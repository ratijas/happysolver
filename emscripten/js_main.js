var Module = typeof Module !== "undefined" ? Module : {};

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = function(status, toThrow) {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = false;

var ENVIRONMENT_IS_WORKER = false;

var ENVIRONMENT_IS_NODE = false;

var ENVIRONMENT_HAS_NODE = false;

var ENVIRONMENT_IS_SHELL = false;

ENVIRONMENT_IS_WEB = typeof window === "object";

ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

ENVIRONMENT_HAS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";

ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;

ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

var nodeFS;

var nodePath;

if (ENVIRONMENT_IS_NODE) {
 scriptDirectory = __dirname + "/";
 read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
   return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  return nodeFS["readFileSync"](filename, binary ? null : "utf8");
 };
 readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 if (process["argv"].length > 1) {
  thisProgram = process["argv"][1].replace(/\\/g, "/");
 }
 arguments_ = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 });
 process["on"]("unhandledRejection", abort);
 quit_ = function(status) {
  process["exit"](status);
 };
 Module["inspect"] = function() {
  return "[Emscripten Module object]";
 };
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof read != "undefined") {
  read_ = function shell_read(f) {
   var data = tryParseAsDataURI(f);
   if (data) {
    return intArrayToString(data);
   }
   return read(f);
  };
 }
 readBinary = function readBinary(f) {
  var data;
  data = tryParseAsDataURI(f);
  if (data) {
   return data;
  }
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  arguments_ = scriptArgs;
 } else if (typeof arguments != "undefined") {
  arguments_ = arguments;
 }
 if (typeof quit === "function") {
  quit_ = function(status) {
   quit(status);
  };
 }
 if (typeof print !== "undefined") {
  if (typeof console === "undefined") console = {};
  console.log = print;
  console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 {
  read_ = function shell_read(url) {
   try {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
   } catch (err) {
    var data = tryParseAsDataURI(url);
    if (data) {
     return intArrayToString(data);
    }
    throw err;
   }
  };
  if (ENVIRONMENT_IS_WORKER) {
   readBinary = function readBinary(url) {
    try {
     var xhr = new XMLHttpRequest();
     xhr.open("GET", url, false);
     xhr.responseType = "arraybuffer";
     xhr.send(null);
     return new Uint8Array(xhr.response);
    } catch (err) {
     var data = tryParseAsDataURI(url);
     if (data) {
      return data;
     }
     throw err;
    }
   };
  }
  readAsync = function readAsync(url, onload, onerror) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, true);
   xhr.responseType = "arraybuffer";
   xhr.onload = function xhr_onload() {
    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
     onload(xhr.response);
     return;
    }
    var data = tryParseAsDataURI(url);
    if (data) {
     onload(data.buffer);
     return;
    }
    onerror();
   };
   xhr.onerror = onerror;
   xhr.send(null);
  };
 }
 setWindowTitle = function(title) {
  document.title = title;
 };
} else {}

var out = Module["print"] || console.log.bind(console);

var err = Module["printErr"] || console.warn.bind(console);

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (Module["quit"]) quit_ = Module["quit"];

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
 var ret = HEAP32[DYNAMICTOP_PTR >> 2];
 var end = ret + size + 15 & -16;
 if (end > _emscripten_get_heap_size()) {
  abort();
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = end;
 return ret;
}

function alignMemory(size, factor) {
 if (!factor) factor = STACK_ALIGN;
 return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;

 case "i16":
  return 2;

 case "i32":
  return 4;

 case "i64":
  return 8;

 case "float":
  return 4;

 case "double":
  return 8;

 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = parseInt(type.substr(1));
    assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
 tempRet0 = value;
};

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

var noExitRuntime;

if (Module["noExitRuntime"]) noExitRuntime = Module["noExitRuntime"];

var WebAssembly = {
 Memory: function(opts) {
  return {
   buffer: new ArrayBuffer(opts["initial"] * 65536),
   grow: function(amount) {
    var ret = __growWasmMemory(amount);
    return ret;
   }
  };
 },
 Table: function(opts) {
  var ret = new Array(opts["initial"]);
  ret.grow = function(by) {
   if (ret.length >= 719 + 0) {
    abort("Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.");
   }
   ret.push(null);
  };
  ret.set = function(i, func) {
   ret[i] = func;
  };
  ret.get = function(i) {
   return ret[i];
  };
  return ret;
 },
 Module: function(binary) {
  return {};
 },
 Instance: function(module, info) {
  var decodeBase64 = typeof atob === "function" ? atob : function(input) {
   var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
   var output = "";
   var chr1, chr2, chr3;
   var enc1, enc2, enc3, enc4;
   var i = 0;
   input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
   do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    output = output + String.fromCharCode(chr1);
    if (enc3 !== 64) {
     output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
     output = output + String.fromCharCode(chr3);
    }
   } while (i < input.length);
   return output;
  };
  var atob = decodeBase64;
  var exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_load_i64() {
    if (typeof setTempRet0 === 'function') setTempRet0(i32ScratchView[1]);
    return i32ScratchView[0];
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var emscripten_asm_const_iii = env.emscripten_asm_const_iii;
 var _embind_register_function = env._embind_register_function;
 var __cxa_throw = env.__cxa_throw;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var glBindBuffer = env.glBindBuffer;
 var glGenBuffers = env.glGenBuffers;
 var _emval_decref = env._emval_decref;
 var _embind_register_value_object_field = env._embind_register_value_object_field;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var glVertexAttribPointer = env.glVertexAttribPointer;
 var glUniformMatrix4fv = env.glUniformMatrix4fv;
 var _embind_register_integer = env._embind_register_integer;
 var __assert_fail = env.__assert_fail;
 var glUseProgram = env.glUseProgram;
 var glUniformMatrix2fv = env.glUniformMatrix2fv;
 var glUniform3fv = env.glUniform3fv;
 var glPolygonOffset = env.glPolygonOffset;
 var glBufferData = env.glBufferData;
 var glBindTexture = env.glBindTexture;
 var glUniform1i = env.glUniform1i;
 var glEnableVertexAttribArray = env.glEnableVertexAttribArray;
 var glDisableVertexAttribArray = env.glDisableVertexAttribArray;
 var glDeleteTextures = env.glDeleteTextures;
 var glClearColor = env.glClearColor;
 var glTexParameteri = env.glTexParameteri;
 var glEnable = env.glEnable;
 var glViewport = env.glViewport;
 var glUniform1f = env.glUniform1f;
 var glClear = env.glClear;
 var abort = env.abort;
 var __unlock = env.__unlock;
 var glVertexAttrib4fv = env.glVertexAttrib4fv;
 var glVertexAttrib1f = env.glVertexAttrib1f;
 var glShaderSource = env.glShaderSource;
 var glGetShaderiv = env.glGetShaderiv;
 var glGetProgramiv = env.glGetProgramiv;
 var glCreateShader = env.glCreateShader;
 var glCompileShader = env.glCompileShader;
 var glAttachShader = env.glAttachShader;
 var _emval_take_value = env._emval_take_value;
 var _emval_run_destructors = env._emval_run_destructors;
 var _emval_new_cstring = env._emval_new_cstring;
 var _emval_incref = env._emval_incref;
 var _emval_get_property = env._emval_get_property;
 var _emval_get_method_caller = env._emval_get_method_caller;
 var _emval_call_void_method = env._emval_call_void_method;
 var _emval_as = env._emval_as;
 var _embind_register_value_object = env._embind_register_value_object;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_float = env._embind_register_float;
 var _embind_finalize_value_object = env._embind_finalize_value_object;
 var __lock = env.__lock;
 var time = env.time;
 var strftime_l = env.strftime_l;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var glUniformMatrix3fv = env.glUniformMatrix3fv;
 var glUniform2fv = env.glUniform2fv;
 var glLinkProgram = env.glLinkProgram;
 var glGetUniformLocation = env.glGetUniformLocation;
 var glGetShaderInfoLog = env.glGetShaderInfoLog;
 var glGetProgramInfoLog = env.glGetProgramInfoLog;
 var glGetAttribLocation = env.glGetAttribLocation;
 var glGenTextures = env.glGenTextures;
 var glDrawElements = env.glDrawElements;
 var glDrawArrays = env.glDrawArrays;
 var glDeleteShader = env.glDeleteShader;
 var glDeleteProgram = env.glDeleteProgram;
 var glCreateProgram = env.glCreateProgram;
 var glClearDepthf = env.glClearDepthf;
 var glBlendFunc = env.glBlendFunc;
 var glActiveTexture = env.glActiveTexture;
 var emscripten_webgl_make_context_current = env.emscripten_webgl_make_context_current;
 var emscripten_webgl_init_context_attributes = env.emscripten_webgl_init_context_attributes;
 var emscripten_webgl_create_context = env.emscripten_webgl_create_context;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var emscripten_asm_const_dii = env.emscripten_asm_const_dii;
 var clock_gettime = env.clock_gettime;
 var _emval_set_property = env._emval_set_property;
 var _emval_new = env._emval_new;
 var _emval_get_global = env._emval_get_global;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_bool = env._embind_register_bool;
 var __wasi_fd_write = env.fd_write;
 var __wasi_fd_read = env.fd_read;
 var __wasi_fd_close = env.fd_close;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var __syscall91 = env.__syscall91;
 var __map_file = env.__map_file;
 var getTempRet0 = env.getTempRet0;
 var global$0 = 5296704;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 672 | 0;
 global$0 = $2;
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 656 | 0, 35136);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 312 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 316 >> 2] = $4;
 HEAP8[$2 + 671 | 0] = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 312 | 0);
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0 < 2) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $4 = HEAP8[$1 | 0];
  $5 = $4 + -76 | 0;
  if ($5 >>> 0 > 40) {
   if ($4 + -49 >>> 0 >= 9) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
   break label$1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   label$20 : {
                    label$21 : {
                     label$22 : {
                      label$23 : {
                       label$24 : {
                        label$25 : {
                         label$26 : {
                          label$27 : {
                           label$28 : {
                            label$29 : {
                             label$30 : {
                              label$31 : {
                               label$32 : {
                                label$33 : {
                                 switch ($5 - 1 | 0) {
                                 default:
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0);
                                  break label$1;
                                 case 7:
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
                                  break label$1;
                                 case 25:
                                  label$51 : {
                                   $1 = HEAP32[$0 >> 2];
                                   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                                    $1 = HEAP8[$1 + 1 | 0];
                                   } else {
                                    $1 = 0;
                                   }
                                   $1 = $1 << 24 >> 24;
                                   if (($1 | 0) != 112) {
                                    if (($1 & 255) != 76) {
                                     break label$51;
                                    }
                                    $1 = HEAP32[$0 >> 2];
                                    if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 2) {
                                     $1 = HEAP8[$1 + 2 | 0];
                                    } else {
                                     $1 = 0;
                                    }
                                    if (($1 << 24 >> 24) + -48 >>> 0 > 9) {
                                     break label$51;
                                    }
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0);
                                   break label$1;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($0);
                                  break label$1;
                                 case 20:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 <= 3) {
                                   break label$32;
                                  }
                                  label$57 : {
                                   label$58 : {
                                    if (($4 | 0) != 78) {
                                     if (($4 | 0) == 83) {
                                      break label$58;
                                     }
                                     if (($4 | 0) != 110) {
                                      if (($4 | 0) == 116) {
                                       break label$57;
                                      }
                                      if (($4 | 0) != 122) {
                                       break label$1;
                                      }
                                      HEAP32[$0 >> 2] = $1 + 2;
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                      HEAP32[$2 + 600 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35149, $2 + 600 | 0);
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 632 | 0, 35142);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 20 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 624 | 0, 35144);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 28 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 24 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 616 | 0, 35147);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 36 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 32 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35149, $2 + 600 | 0);
                                  break label$1;
                                 case 22:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 <= 3) {
                                   break label$31;
                                  }
                                  if (($4 | 0) != 118) {
                                   if (($4 | 0) != 99) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 612 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 35159, $2 + 600 | 0, $2 + 612 | 0);
                                   break label$1;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($0);
                                  break label$1;
                                 case 23:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 <= 10) {
                                   break label$30;
                                  }
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 > 4) {
                                   if (($4 | 0) != 86) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 560 | 0, 35196);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 72 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 76 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 72 | 0);
                                   break label$1;
                                  }
                                  label$63 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    HEAP8[$2 + 612 | 0] = 1;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $2 + 600 | 0, $2 + 671 | 0, $2 + 612 | 0);
                                    break label$1;
                                   case 1:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 612 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 35174, $2 + 600 | 0, $2 + 612 | 0);
                                    break label$1;
                                   case 0:
                                   case 2:
                                    break label$1;
                                   case 3:
                                    break label$63;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 576 | 0, 35187);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 56 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 60 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 56 | 0);
                                  break label$1;
                                 case 24:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -111 | 0;
                                  if ($5 >>> 0 > 2) {
                                   if (($4 | 0) != 79) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 544 | 0, 35201);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 88 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 92 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 88 | 0);
                                   break label$1;
                                  }
                                  label$67 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 552 | 0, 35199);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 80 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 84 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 80 | 0);
                                    break label$1;
                                   case 0:
                                    break label$1;
                                   case 1:
                                    break label$67;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 536 | 0, 35204);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 96 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 100 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 96 | 0);
                                  break label$1;
                                 case 26:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  if (($4 | 0) != 116) {
                                   if (($4 | 0) != 101) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 528 | 0, 35207);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 104 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 108 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 104 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 520 | 0, 35210);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 112 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 116 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 112 | 0);
                                  break label$1;
                                 case 28:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  if (($4 | 0) != 108) {
                                   if (($4 | 0) != 120) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 612 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $2 + 600 | 0;
                                   $3 = $2 + 612 | 0;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$3 >> 2]);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $0 + 8 | 0;
                                  $4 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2;
                                  while (1) {
                                   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                                    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $5;
                                    if (!$5) {
                                     break label$1;
                                    }
                                    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                                    continue;
                                   }
                                   break;
                                  }
                                  HEAP32[$2 + 612 >> 2] = 0;
                                  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 600 | 0);
                                  break label$1;
                                 case 31:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -115 | 0;
                                  if ($5 >>> 0 <= 1) {
                                   break label$29;
                                  }
                                  if (($4 | 0) != 83) {
                                   if (($4 | 0) != 101) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 512 | 0, 35212);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 120 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 124 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 120 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 496 | 0, 35218);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 136 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 140 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 136 | 0);
                                  break label$1;
                                 case 32:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -105 | 0;
                                  if ($5 >>> 0 <= 4) {
                                   break label$28;
                                  }
                                  $4 = $4 + -73 | 0;
                                  if ($4 >>> 0 > 3) {
                                   break label$1;
                                  }
                                  label$74 : {
                                   switch ($4 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 472 | 0, 35226);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 160 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 164 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 160 | 0);
                                    break label$1;
                                   case 0:
                                   case 1:
                                    break label$1;
                                   case 2:
                                    break label$74;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 456 | 0, 35229);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 176 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 180 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 176 | 0);
                                  break label$1;
                                 case 33:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 <= 6) {
                                   break label$27;
                                  }
                                  $4 = $4 + -116 | 0;
                                  if ($4 >>> 0 > 4) {
                                   break label$1;
                                  }
                                  label$76 : {
                                   switch ($4 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 424 | 0, 35238);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 208 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 212 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 208 | 0);
                                    break label$1;
                                   case 0:
                                   case 1:
                                    break label$1;
                                   case 2:
                                    break label$19;
                                   case 3:
                                    break label$76;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, 35240, $2 + 600 | 0);
                                  break label$1;
                                 case 34:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -110 | 0;
                                  if ($5 >>> 0 > 4) {
                                   if (($4 | 0) != 82) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 400 | 0, 35256);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 232 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 236 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 232 | 0);
                                   break label$1;
                                  }
                                  label$79 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
                                    break label$1;
                                   case 0:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 416 | 0, 35251);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 216 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 220 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 216 | 0);
                                    break label$1;
                                   case 1:
                                   case 2:
                                    break label$1;
                                   case 3:
                                    break label$79;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 408 | 0, 35254);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 224 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 228 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 224 | 0);
                                  break label$1;
                                 case 35:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 > 8) {
                                   if (($4 | 0) != 76) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 376 | 0, 35265);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 256 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 260 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 256 | 0);
                                   break label$1;
                                  }
                                  label$83 : {
                                   switch ($5 - 1 | 0) {
                                   case 0:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 392 | 0, 35259);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 240 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 244 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 240 | 0);
                                    break label$1;
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 384 | 0, 35263);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 248 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 252 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 248 | 0);
                                    break label$1;
                                   case 3:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 368 | 0, 35268);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 264 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 268 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 264 | 0);
                                     break label$1;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $2 + 600 | 0, 35268);
                                    break label$1;
                                   case 6:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 360 | 0, 35263);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 272 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 276 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 272 | 0);
                                    break label$1;
                                   case 1:
                                   case 2:
                                   case 4:
                                   case 5:
                                    break label$1;
                                   case 7:
                                    break label$83;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 612 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0, 35271, $2 + 612 | 0);
                                  break label$1;
                                 case 36:
                                  if (HEAPU8[$1 + 1 | 0] != 117) {
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 612 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 356 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $2 + 600 | 0;
                                  $3 = $2 + 612 | 0;
                                  $4 = $2 + 356 | 0;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$3 >> 2], HEAP32[$4 >> 2]);
                                  break label$1;
                                 case 37:
                                  label$89 : {
                                   label$90 : {
                                    $4 = HEAP8[$1 + 1 | 0];
                                    if (($4 | 0) != 77) {
                                     if (($4 | 0) == 83) {
                                      break label$89;
                                     }
                                     if (($4 | 0) == 115) {
                                      break label$90;
                                     }
                                     if (($4 | 0) != 109) {
                                      if (($4 | 0) != 99) {
                                       break label$1;
                                      }
                                      HEAP32[$0 >> 2] = $1 + 2;
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                      HEAP32[$2 + 600 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                      HEAP32[$2 + 612 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 35274, $2 + 600 | 0, $2 + 612 | 0);
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 344 | 0, 35291);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 280 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 284 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 280 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 336 | 0, 35293);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 288 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 292 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 288 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 328 | 0, 35296);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 296 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 300 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 296 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 320 | 0, 35299);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 304 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 308 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 304 | 0);
                                  break label$1;
                                 case 38:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -112 | 0;
                                  if ($5 >>> 0 <= 4) {
                                   break label$26;
                                  }
                                  if (($4 | 0) != 80) {
                                   if (($4 | 0) != 90) {
                                    if (($4 | 0) != 122) {
                                     if (($4 | 0) != 99) {
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                     HEAP32[$2 + 600 >> 2] = $1;
                                     if (!$1) {
                                      break label$5;
                                     }
                                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                     HEAP32[$2 + 612 >> 2] = $1;
                                     if (!$1) {
                                      break label$5;
                                     }
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 35303, $2 + 600 | 0, $2 + 612 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35315, $2 + 600 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = HEAP32[$0 >> 2];
                                   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
                                    $1 = HEAP8[$1 | 0];
                                   } else {
                                    $1 = 0;
                                   }
                                   $1 = $1 << 24 >> 24;
                                   if (($1 | 0) != 102) {
                                    if (($1 & 255) != 84) {
                                     break label$1;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0);
                                    break label$1;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $2 + 600 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $0 + 8 | 0;
                                  $4 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2;
                                  while (1) {
                                   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                                    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $5;
                                    if (!$5) {
                                     break label$1;
                                    }
                                    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                                    continue;
                                   }
                                   break;
                                  }
                                  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
                                  HEAP32[$2 + 612 >> 2] = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 600 | 0);
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $2 + 612 | 0);
                                  break label$1;
                                 case 0:
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 8:
                                 case 9:
                                 case 10:
                                 case 11:
                                 case 12:
                                 case 13:
                                 case 14:
                                 case 15:
                                 case 16:
                                 case 17:
                                 case 18:
                                 case 19:
                                 case 21:
                                 case 27:
                                 case 29:
                                 case 30:
                                  break label$1;
                                 case 39:
                                  break label$33;
                                 }
                                }
                                $4 = HEAP8[$1 + 1 | 0];
                                $5 = $4 + -105 | 0;
                                if ($5 >>> 0 <= 3) {
                                 break label$25;
                                }
                                if (($4 | 0) != 119) {
                                 if (($4 | 0) != 114) {
                                  if (($4 | 0) != 101) {
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35336, $2 + 600 | 0);
                                  break label$1;
                                 }
                                 HEAP32[$0 >> 2] = $1 + 2;
                                 $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35345);
                                 break label$1;
                                }
                                HEAP32[$0 >> 2] = $1 + 2;
                                $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                HEAP32[$2 + 600 >> 2] = $1;
                                if (!$1) {
                                 break label$5;
                                }
                                $3 = $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0);
                                break label$1;
                               }
                               switch ($5 - 1 | 0) {
                               case 0:
                               case 1:
                                break label$1;
                               case 2:
                                break label$4;
                               default:
                                break label$3;
                               }
                              }
                              switch ($5 - 1 | 0) {
                              case 1:
                               break label$1;
                              case 0:
                               break label$7;
                              case 2:
                               break label$8;
                              default:
                               break label$6;
                              }
                             }
                             switch ($5 - 1 | 0) {
                             case 0:
                             case 2:
                             case 3:
                             case 4:
                             case 5:
                             case 8:
                              break label$1;
                             case 1:
                              break label$10;
                             case 6:
                              break label$11;
                             case 7:
                              break label$12;
                             case 9:
                              break label$13;
                             default:
                              break label$9;
                             }
                            }
                            if ($5 - 1) {
                             break label$14;
                            }
                            break label$15;
                           }
                           switch ($5 - 1 | 0) {
                           case 0:
                           case 1:
                            break label$1;
                           case 2:
                            break label$17;
                           case 3:
                            break label$18;
                           default:
                            break label$16;
                           }
                          }
                          switch ($5 - 1 | 0) {
                          case 0:
                          case 1:
                          case 2:
                          case 4:
                           break label$1;
                          case 3:
                           break label$20;
                          case 5:
                           break label$21;
                          default:
                           break label$19;
                          }
                         }
                         switch ($5 - 1 | 0) {
                         case 0:
                         case 2:
                          break label$1;
                         case 1:
                          break label$23;
                         case 3:
                          break label$24;
                         default:
                          break label$22;
                         }
                        }
                        label$103 : {
                         switch ($5 - 1 | 0) {
                         case 2:
                          HEAP32[$0 >> 2] = $1 + 2;
                          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                          HEAP32[$2 + 612 >> 2] = $1;
                          if (!$1) {
                           break label$5;
                          }
                          $1 = $0 + 8 | 0;
                          $3 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2;
                          while (1) {
                           if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                            $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
                            HEAP32[$2 + 600 >> 2] = $4;
                            if (!$4) {
                             break label$5;
                            }
                            $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                            continue;
                           }
                           break;
                          }
                          $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $3);
                          $3 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 612 | 0, $2 + 600 | 0);
                          break label$1;
                         case 0:
                         case 1:
                          break label$1;
                         default:
                          break label$103;
                         }
                        }
                        HEAP32[$0 >> 2] = $1 + 2;
                        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                        HEAP32[$2 + 600 >> 2] = $1;
                        if (!$1) {
                         break label$5;
                        }
                        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35336, $2 + 600 | 0);
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = $1 + 2;
                       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                       HEAP32[$2 + 600 >> 2] = $1;
                       if (!$1) {
                        break label$5;
                       }
                       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35315, $2 + 600 | 0);
                       break label$1;
                      }
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = $1 + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                     HEAP32[$2 + 600 >> 2] = $1;
                     if (!$1) {
                      break label$5;
                     }
                     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = $1 + 2;
                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 432 | 0, 35224);
                    $3 = HEAP32[$1 + 4 >> 2];
                    HEAP32[$2 + 200 >> 2] = HEAP32[$1 >> 2];
                    HEAP32[$2 + 204 >> 2] = $3;
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 200 | 0);
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = $1 + 2;
                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 440 | 0, 35235);
                   $3 = HEAP32[$1 + 4 >> 2];
                   HEAP32[$2 + 192 >> 2] = HEAP32[$1 >> 2];
                   HEAP32[$2 + 196 >> 2] = $3;
                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 192 | 0);
                   break label$1;
                  }
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($0);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = $1 + 2;
                 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 448 | 0, 35232);
                  $3 = HEAP32[$1 + 4 >> 2];
                  HEAP32[$2 + 184 >> 2] = HEAP32[$1 >> 2];
                  HEAP32[$2 + 188 >> 2] = $3;
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 184 | 0);
                  break label$1;
                 }
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                 HEAP32[$2 + 600 >> 2] = $1;
                 if (!$1) {
                  break label$5;
                 }
                 $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $2 + 600 | 0, 35232);
                 break label$1;
                }
                HEAP32[$0 >> 2] = $1 + 2;
                $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 464 | 0, 35187);
                $3 = HEAP32[$1 + 4 >> 2];
                HEAP32[$2 + 168 >> 2] = HEAP32[$1 >> 2];
                HEAP32[$2 + 172 >> 2] = $3;
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 168 | 0);
                break label$1;
               }
               HEAP32[$0 >> 2] = $1 + 2;
               $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 480 | 0, 35224);
               $3 = HEAP32[$1 + 4 >> 2];
               HEAP32[$2 + 152 >> 2] = HEAP32[$1 >> 2];
               HEAP32[$2 + 156 >> 2] = $3;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 152 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $1 + 2;
              $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 488 | 0, 35222);
              $3 = HEAP32[$1 + 4 >> 2];
              HEAP32[$2 + 144 >> 2] = HEAP32[$1 >> 2];
              HEAP32[$2 + 148 >> 2] = $3;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 144 | 0);
              break label$1;
             }
             HEAP32[$0 >> 2] = $1 + 2;
             $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 504 | 0, 35215);
             $3 = HEAP32[$1 + 4 >> 2];
             HEAP32[$2 + 128 >> 2] = HEAP32[$1 >> 2];
             HEAP32[$2 + 132 >> 2] = $3;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 128 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $1 + 2;
            $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 568 | 0, 35194);
            $3 = HEAP32[$1 + 4 >> 2];
            HEAP32[$2 + 64 >> 2] = HEAP32[$1 >> 2];
            HEAP32[$2 + 68 >> 2] = $3;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 - -64 | 0);
            break label$1;
           }
           HEAP32[$0 >> 2] = $1 + 2;
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
           HEAP32[$2 + 600 >> 2] = $1;
           if (!$1) {
            break label$5;
           }
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
           HEAP32[$2 + 612 >> 2] = $1;
           if (!$1) {
            break label$5;
           }
           $3 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0, 35192, $2 + 612 | 0);
           break label$1;
          }
          HEAP32[$0 >> 2] = $1 + 2;
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
          HEAP32[$2 + 600 >> 2] = $1;
          if (!$1) {
           break label$5;
          }
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
          HEAP32[$2 + 612 >> 2] = $1;
          if (!$1) {
           break label$5;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0, 35189, $2 + 612 | 0);
          break label$1;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
         break label$1;
        }
        HEAP32[$0 >> 2] = $1 + 2;
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
        HEAP32[$2 + 600 >> 2] = $1;
        if (!$1) {
         break label$5;
        }
        HEAP8[$2 + 612 | 0] = 0;
        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $2 + 600 | 0, $2 + 671 | 0, $2 + 612 | 0);
        break label$1;
       }
       HEAP32[$0 >> 2] = $1 + 2;
       $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 584 | 0, 35172);
       $3 = HEAP32[$1 + 4 >> 2];
       HEAP32[$2 + 48 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 52 >> 2] = $3;
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 48 | 0);
       break label$1;
      }
      HEAP32[$0 >> 2] = $1 + 2;
      $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 592 | 0, 35170);
      $3 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 40 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 44 >> 2] = $3;
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 40 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = $1 + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$2 + 612 >> 2] = $1;
     if (!$1) {
      break label$1;
     }
     $1 = $0 + 8 | 0;
     $4 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2;
     while (1) {
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
       HEAP32[$2 + 600 >> 2] = $5;
       if (!$5) {
        break label$1;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
     $3 = $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 612 | 0, $2 + 600 | 0);
     break label$1;
    }
    $3 = 0;
    break label$1;
   }
   HEAP32[$0 >> 2] = $1 + 2;
   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 640 | 0, 35142);
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0);
   break label$1;
  }
  HEAP32[$0 >> 2] = $1 + 2;
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 648 | 0, 35139);
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2);
 }
 global$0 = $2 + 672 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $3 = HEAP32[$0 >> 2];
 if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
  $3 = HEAP8[$3 | 0];
 } else {
  $3 = 0;
 }
 $3 = ($3 << 24 >> 24) + -97 | 0;
 label$1 : {
  if ($3 >>> 0 > 21) {
   break label$1;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                switch ($3 - 1 | 0) {
                default:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 3) {
                  break label$16;
                 }
                 label$34 : {
                  if (($1 | 0) != 78) {
                   if (($1 | 0) == 83) {
                    break label$34;
                   }
                   if (($1 | 0) != 110) {
                    break label$1;
                   }
                   break label$4;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37525);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37536);
                 break label$1;
                case 1:
                 $3 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 1) {
                  $3 = HEAP8[$3 + 1 | 0];
                 } else {
                  $3 = 0;
                 }
                 $3 = $3 << 24 >> 24;
                 $5 = $3 + -108 | 0;
                 if ($5 >>> 0 > 3) {
                  if (($3 | 0) != 118) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($4 + 24 | 0, $0 + 360 | 0, 0);
                  $5 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($4 + 16 | 0, $0 + 361 | 0, (HEAPU8[$0 + 361 | 0] | $1) != 0);
                  $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                  HEAP32[$4 + 12 >> 2] = $6;
                  if ($6) {
                   if ($1) {
                    HEAP8[$1 | 0] = 1;
                   }
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 12 | 0);
                  }
                  if (HEAPU8[$5 + 5 | 0]) {
                   HEAP8[HEAP32[$5 >> 2]] = HEAPU8[$5 + 4 | 0];
                  }
                  if (HEAPU8[$3 + 5 | 0]) {
                   HEAP8[HEAP32[$3 >> 2]] = HEAPU8[$3 + 4 | 0];
                  }
                  break label$1;
                 }
                 label$43 : {
                  switch ($5 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37546);
                   break label$1;
                  case 0:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37557);
                   break label$1;
                  case 1:
                   break label$1;
                  case 2:
                   break label$43;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37567);
                 break label$1;
                case 2:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$15;
                 }
                 if (($1 | 0) != 86) {
                  if (($1 | 0) != 108) {
                   if (($1 | 0) != 118) {
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37621);
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 37605);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37631);
                 break label$1;
                case 3:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -111 | 0;
                 if ($3 >>> 0 > 2) {
                  if (($1 | 0) != 79) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37652);
                  break label$1;
                 }
                 label$53 : {
                  switch ($3 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37642);
                   break label$1;
                  case 0:
                   break label$1;
                  case 1:
                   break label$53;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37663);
                 break label$1;
                case 5:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 if (($1 | 0) != 116) {
                  if (($1 | 0) != 101) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37674);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37685);
                 break label$1;
                case 7:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAPU8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 if (($1 & 255) != 120) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37695);
                 break label$1;
                case 10:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -101 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$14;
                 }
                 $3 = $1 + -115 | 0;
                 if ($3 >>> 0 > 1) {
                  if (($1 | 0) != 83) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37728);
                  break label$1;
                 }
                 if ($3 - 1) {
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37717);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37740);
                 break label$1;
                case 11:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -105 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$13;
                 }
                 $1 = $1 + -73 | 0;
                 if ($1 >>> 0 > 3) {
                  break label$1;
                 }
                 label$66 : {
                  switch ($1 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37760);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$66;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37771);
                 break label$1;
                case 12:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 6) {
                  break label$12;
                 }
                 $1 = $1 + -116 | 0;
                 if ($1 >>> 0 > 3) {
                  break label$1;
                 }
                 label$70 : {
                  switch ($1 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37819);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$70;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37829);
                 break label$1;
                case 13:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -111 | 0;
                 if ($3 >>> 0 > 3) {
                  if (($1 | 0) != 82) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37863);
                  break label$1;
                 }
                 label$75 : {
                  switch ($3 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37842);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$75;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37853);
                 break label$1;
                case 14:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAP8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 $1 = $1 << 24 >> 24;
                 $3 = $1 + -108 | 0;
                 if ($3 >>> 0 > 8) {
                  if (($1 | 0) != 76) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37896);
                  break label$1;
                 }
                 label$80 : {
                  switch ($3 - 1 | 0) {
                  case 0:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37874);
                   break label$1;
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37886);
                   break label$1;
                  case 3:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37907);
                   break label$1;
                  case 6:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37886);
                   break label$1;
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                   break label$1;
                  case 7:
                   break label$80;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37918);
                 break label$1;
                case 15:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAPU8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 if (($1 & 255) != 117) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37929);
                 break label$1;
                case 16:
                 label$87 : {
                  label$88 : {
                   $1 = HEAP32[$0 >> 2];
                   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                    $1 = HEAP8[$1 + 1 | 0];
                   } else {
                    $1 = 0;
                   }
                   $1 = $1 << 24 >> 24;
                   if (($1 | 0) != 77) {
                    if (($1 | 0) == 83) {
                     break label$87;
                    }
                    if (($1 | 0) == 115) {
                     break label$88;
                    }
                    if (($1 | 0) != 109) {
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37939);
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37949);
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37960);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37971);
                 break label$1;
                case 17:
                 $1 = HEAP32[$0 >> 2];
                 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                  $1 = HEAPU8[$1 + 1 | 0];
                 } else {
                  $1 = 0;
                 }
                 if (($1 & 255) != 115) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37983);
                 break label$1;
                case 0:
                case 4:
                case 6:
                case 8:
                case 9:
                case 18:
                case 19:
                 break label$1;
                case 20:
                 break label$17;
                }
               }
               $1 = HEAP32[$0 >> 2];
               if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
                $1 = HEAP8[$1 + 1 | 0];
               } else {
                $1 = 0;
               }
               if (($1 << 24 >> 24) + -48 >>> 0 > 9) {
                break label$1;
               }
               HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
               $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
               HEAP32[$4 + 24 >> 2] = $1;
               if (!$1) {
                break label$1;
               }
               $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 24 | 0);
               break label$1;
              }
              label$96 : {
               switch ($3 - 1 | 0) {
               case 0:
               case 1:
                break label$1;
               case 2:
                break label$4;
               default:
                break label$96;
               }
              }
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
              $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37504);
              break label$1;
             }
             switch ($3 - 1 | 0) {
             case 0:
             case 1:
             case 2:
              break label$1;
             case 3:
              break label$6;
             default:
              break label$5;
             }
            }
            switch ($3 - 1 | 0) {
            case 0:
            case 1:
            case 2:
             break label$1;
            case 3:
             break label$8;
            default:
             break label$7;
            }
           }
           switch ($3 - 1 | 0) {
           case 0:
           case 1:
            break label$1;
           case 2:
            break label$10;
           case 3:
            break label$11;
           default:
            break label$9;
           }
          }
          label$97 : {
           switch ($3 - 1 | 0) {
           case 5:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37750);
            break label$1;
           case 3:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37808);
            break label$1;
           case 0:
           case 1:
           case 2:
           case 4:
            break label$1;
           default:
            break label$97;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37793);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37782);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37595);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37750);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
      HEAP32[$4 + 24 >> 2] = $1;
      if (!$1) {
       break label$1;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $4 + 24 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37706);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37595);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37577);
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 37515);
 }
 global$0 = $4 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = 0;
 $4 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            $1 = HEAP32[$0 >> 2];
            if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
             $1 = HEAP8[$1 | 0];
            } else {
             $1 = 0;
            }
            $1 = $1 << 24 >> 24;
            $3 = $1 + -65 | 0;
            if ($3 >>> 0 > 57) {
             break label$11;
            }
            label$14 : {
             switch ($3 - 1 | 0) {
             case 9:
             case 20:
             case 48:
              $6 = HEAP32[$0 >> 2];
              $7 = HEAP32[$0 + 4 >> 2] - $6 | 0;
              $1 = ($1 | 0) == 114;
              $8 = $1 ? 2 : 1;
              $5 = $1;
              $3 = HEAP32[$0 >> 2];
              if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > $1 >>> 0) {
               $1 = HEAPU8[$1 + $3 | 0];
              } else {
               $1 = 0;
              }
              $1 = ($1 & 255) == 86 ? $8 : $5;
              $5 = $1;
              $3 = HEAP32[$0 >> 2];
              if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > $1 >>> 0) {
               $1 = HEAPU8[$1 + $3 | 0];
              } else {
               $1 = 0;
              }
              $1 = $5 + (($1 & 255) == 75) | 0;
              $3 = (($7 >>> 0 > $1 >>> 0 ? HEAP8[$1 + $6 | 0] : 0) << 24 >> 24 & 255) + -68 | 0;
              if ($3 >>> 0 > 2) {
               break label$6;
              }
              label$54 : {
               switch ($3 - 1 | 0) {
               case 1:
                break label$5;
               case 0:
                break label$6;
               default:
                break label$54;
               }
              }
              $3 = HEAP32[$0 >> 2];
              $1 = $1 + 1 | 0;
              if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > $1 >>> 0) {
               $1 = HEAP8[$1 + $3 | 0];
              } else {
               $1 = 0;
              }
              $1 = $1 << 24 >> 24 & 255;
              $3 = $1 + -111 | 0;
              if ($3 >>> 0 > 9 | !(1 << $3 & 769)) {
               break label$7;
              }
              break label$5;
             case 52:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42020);
              break label$1;
             case 53:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 35351);
              break label$1;
             case 32:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42025);
              break label$1;
             case 33:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35367);
              break label$1;
             case 31:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35372);
              break label$1;
             case 38:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35384);
              break label$1;
             case 49:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35398);
              break label$1;
             case 50:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35404);
              break label$1;
             case 39:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42030);
              break label$1;
             case 40:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42034);
              break label$1;
             case 42:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42047);
              break label$1;
             case 43:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42052);
              break label$1;
             case 54:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42066);
              break label$1;
             case 55:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 42076);
              break label$1;
             case 44:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35434);
              break label$1;
             case 45:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 35443);
              break label$1;
             case 36:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42095);
              break label$1;
             case 34:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 42101);
              break label$1;
             case 35:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42108);
              break label$1;
             case 37:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42120);
              break label$1;
             case 56:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 36588);
              break label$1;
             case 51:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($2 + 16 | 0, $0);
              $1 = 0;
              if (HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 20 >> 2]) {
               break label$1;
              }
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $2 + 16 | 0);
              break label$1;
             case 2:
              $1 = 0;
              $3 = HEAP32[$0 >> 2];
              if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 1) {
               $3 = HEAP8[$3 + 1 | 0];
              } else {
               $3 = 0;
              }
              $3 = ($3 << 24 >> 24) + -79 | 0;
              if ($3 >>> 0 > 41) {
               break label$1;
              }
              label$59 : {
               switch ($3 - 1 | 0) {
               case 20:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42131);
                break label$1;
               case 21:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42141);
                break label$1;
               case 22:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42152);
                break label$1;
               case 24:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42162);
                break label$1;
               case 25:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42172);
                break label$1;
               case 35:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42181);
                break label$1;
               case 17:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 34999);
                break label$1;
               case 19:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42190);
                break label$1;
               case 30:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42205);
                break label$1;
               case 4:
               case 36:
                $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0);
                break label$4;
               case 38:
                $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($0);
                break label$4;
               case 32:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                HEAP32[$2 + 16 >> 2] = $4;
                if (!$4) {
                 break label$1;
                }
                HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 16 | 0);
                break label$3;
               case 0:
               case 1:
               case 2:
               case 3:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
               case 16:
               case 18:
               case 23:
               case 26:
               case 27:
               case 28:
               case 29:
               case 33:
               case 34:
               case 37:
                break label$1;
               default:
                break label$59;
               }
              }
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
              break label$4;
             case 4:
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
              break label$4;
             default:
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($0);
              break label$4;
             case 11:
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($0);
              break label$4;
             case 18:
              $1 = HEAP32[$0 >> 2];
              if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
               $1 = HEAP8[$1 + 1 | 0];
              } else {
               $1 = 0;
              }
              $1 = $1 << 24 >> 24 & 255;
              $3 = $1 + -115 | 0;
              if ($3 >>> 0 <= 2) {
               break label$10;
              }
              if (($1 | 0) != 101) {
               break label$9;
              }
              break label$8;
             case 14:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $1;
              if (!$1) {
               break label$2;
              }
              HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 16 | 0);
              break label$3;
             case 16:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $1;
              if (!$1) {
               break label$2;
              }
              HEAP32[$2 + 12 >> 2] = 0;
              HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $2 + 16 | 0, $2 + 12 | 0);
              break label$3;
             case 13:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $1;
              if (!$1) {
               break label$2;
              }
              HEAP32[$2 + 12 >> 2] = 1;
              HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $2 + 16 | 0, $2 + 12 | 0);
              break label$3;
             case 1:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $1;
              if (!$1) {
               break label$2;
              }
              HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0 + 368 | 0, $2 + 16 | 0, 42220);
              break label$3;
             case 5:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $1;
              if (!$1) {
               break label$2;
              }
              HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0 + 368 | 0, $2 + 16 | 0, 42229);
              break label$3;
             case 0:
             case 3:
             case 6:
             case 7:
             case 8:
             case 10:
             case 12:
             case 15:
             case 21:
             case 22:
             case 23:
             case 24:
             case 25:
             case 26:
             case 27:
             case 28:
             case 29:
             case 30:
             case 41:
             case 46:
             case 47:
              break label$11;
             case 17:
              break label$14;
             case 19:
              break label$6;
             }
            }
            $1 = HEAP32[$0 >> 2];
            if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
             $1 = HEAP8[$1 + 1 | 0];
            } else {
             $1 = 0;
            }
            $1 = $1 << 24 >> 24;
            if (!$1 | ($1 & 255) == 116) {
             break label$11;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
            HEAP32[$2 + 16 >> 2] = $1;
            if (!$1 | !HEAPU8[$0 + 360 | 0]) {
             break label$1;
            }
            $4 = HEAP32[$0 >> 2];
            if (HEAP32[$0 + 4 >> 2] - $4 >>> 0 > 0) {
             $3 = HEAPU8[$4 | 0];
            } else {
             $3 = 0;
            }
            if (($3 & 255) != 73) {
             break label$1;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
            HEAP32[$2 + 12 >> 2] = $1;
            if (!$1) {
             break label$2;
            }
            HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 16 | 0, $2 + 12 | 0);
            break label$3;
           }
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0);
           break label$4;
          }
          if ($3 - 1) {
           break label$8;
          }
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
         HEAP32[$2 + 28 >> 2] = $1;
         if (!$1) {
          break label$2;
         }
         if (!HEAPU8[$0 + 360 | 0]) {
          break label$3;
         }
         $1 = HEAP32[$0 >> 2];
         if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
          $1 = HEAPU8[$1 | 0];
         } else {
          $1 = 0;
         }
         if (($1 & 255) != 73) {
          break label$3;
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
         HEAP32[$2 + 16 >> 2] = $1;
         if (!$1) {
          break label$2;
         }
         HEAP32[$2 + 28 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 28 | 0, $2 + 16 | 0);
         break label$3;
        }
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0);
        break label$4;
       }
       if (($1 | 0) == 79) {
        break label$5;
       }
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
      break label$4;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
    }
    HEAP32[$4 + 28 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 28 | 0);
   $1 = HEAP32[$2 + 28 >> 2];
   break label$1;
  }
  $1 = 0;
 }
 global$0 = $2 + 32 | 0;
 return $1;
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $11 = global$0 - 16 | 0;
 global$0 = $11;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            if ($0 >>> 0 <= 244) {
             $5 = HEAP32[13327];
             $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
             $0 = $6 >>> 3;
             $1 = $5 >>> $0;
             if ($1 & 3) {
              $2 = $0 + (($1 ^ -1) & 1) | 0;
              $4 = $2 << 3;
              $1 = HEAP32[$4 + 53356 >> 2];
              $0 = $1 + 8 | 0;
              $3 = HEAP32[$1 + 8 >> 2];
              $4 = $4 + 53348 | 0;
              label$14 : {
               if (($3 | 0) == ($4 | 0)) {
                HEAP32[13327] = __wasm_rotl_i32(-2, $2) & $5;
                break label$14;
               }
               HEAP32[$3 + 12 >> 2] = $4;
               HEAP32[$4 + 8 >> 2] = $3;
              }
              $2 = $2 << 3;
              HEAP32[$1 + 4 >> 2] = $2 | 3;
              $1 = $1 + $2 | 0;
              HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
              break label$1;
             }
             $8 = HEAP32[13329];
             if ($6 >>> 0 <= $8 >>> 0) {
              break label$11;
             }
             if ($1) {
              $2 = 2 << $0;
              $0 = (0 - $2 | $2) & $1 << $0;
              $0 = (0 - $0 & $0) + -1 | 0;
              $1 = $0 >>> 12 & 16;
              $2 = $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 5 & 8;
              $2 = $2 | $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 2 & 4;
              $2 = $2 | $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 1 & 1;
              $2 = ($2 | $1) + ($0 >>> $1) | 0;
              $3 = $2 << 3;
              $1 = HEAP32[$3 + 53356 >> 2];
              $0 = HEAP32[$1 + 8 >> 2];
              $3 = $3 + 53348 | 0;
              label$17 : {
               if (($0 | 0) == ($3 | 0)) {
                $5 = __wasm_rotl_i32(-2, $2) & $5;
                HEAP32[13327] = $5;
                break label$17;
               }
               HEAP32[$0 + 12 >> 2] = $3;
               HEAP32[$3 + 8 >> 2] = $0;
              }
              $0 = $1 + 8 | 0;
              HEAP32[$1 + 4 >> 2] = $6 | 3;
              $7 = $1 + $6 | 0;
              $2 = $2 << 3;
              $4 = $2 - $6 | 0;
              HEAP32[$7 + 4 >> 2] = $4 | 1;
              HEAP32[$1 + $2 >> 2] = $4;
              if ($8) {
               $2 = $8 >>> 3;
               $1 = ($2 << 3) + 53348 | 0;
               $3 = HEAP32[13332];
               $2 = 1 << $2;
               label$20 : {
                if (!($2 & $5)) {
                 HEAP32[13327] = $2 | $5;
                 $2 = $1;
                 break label$20;
                }
                $2 = HEAP32[$1 + 8 >> 2];
               }
               HEAP32[$1 + 8 >> 2] = $3;
               HEAP32[$2 + 12 >> 2] = $3;
               HEAP32[$3 + 12 >> 2] = $1;
               HEAP32[$3 + 8 >> 2] = $2;
              }
              HEAP32[13332] = $7;
              HEAP32[13329] = $4;
              break label$1;
             }
             $10 = HEAP32[13328];
             if (!$10) {
              break label$11;
             }
             $0 = ($10 & 0 - $10) + -1 | 0;
             $1 = $0 >>> 12 & 16;
             $2 = $1;
             $0 = $0 >>> $1;
             $1 = $0 >>> 5 & 8;
             $2 = $2 | $1;
             $0 = $0 >>> $1;
             $1 = $0 >>> 2 & 4;
             $2 = $2 | $1;
             $0 = $0 >>> $1;
             $1 = $0 >>> 1 & 2;
             $2 = $2 | $1;
             $0 = $0 >>> $1;
             $1 = $0 >>> 1 & 1;
             $1 = HEAP32[(($2 | $1) + ($0 >>> $1) << 2) + 53612 >> 2];
             $3 = (HEAP32[$1 + 4 >> 2] & -8) - $6 | 0;
             $2 = $1;
             while (1) {
              label$23 : {
               $0 = HEAP32[$2 + 16 >> 2];
               if (!$0) {
                $0 = HEAP32[$2 + 20 >> 2];
                if (!$0) {
                 break label$23;
                }
               }
               $4 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
               $2 = $4 >>> 0 < $3 >>> 0;
               $3 = $2 ? $4 : $3;
               $1 = $2 ? $0 : $1;
               $2 = $0;
               continue;
              }
              break;
             }
             $9 = HEAP32[$1 + 24 >> 2];
             $4 = HEAP32[$1 + 12 >> 2];
             if (($4 | 0) != ($1 | 0)) {
              $0 = HEAP32[$1 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $4;
              HEAP32[$4 + 8 >> 2] = $0;
              break label$2;
             }
             $2 = $1 + 20 | 0;
             $0 = HEAP32[$2 >> 2];
             if (!$0) {
              $0 = HEAP32[$1 + 16 >> 2];
              if (!$0) {
               break label$10;
              }
              $2 = $1 + 16 | 0;
             }
             while (1) {
              $7 = $2;
              $4 = $0;
              $2 = $0 + 20 | 0;
              $0 = HEAP32[$2 >> 2];
              if ($0) {
               continue;
              }
              $2 = $4 + 16 | 0;
              $0 = HEAP32[$4 + 16 >> 2];
              if ($0) {
               continue;
              }
              break;
             }
             HEAP32[$7 >> 2] = 0;
             break label$2;
            }
            $6 = -1;
            if ($0 >>> 0 > 4294967231) {
             break label$11;
            }
            $1 = $0 + 11 | 0;
            $6 = $1 & -8;
            $8 = HEAP32[13328];
            if (!$8) {
             break label$11;
            }
            $2 = 0 - $6 | 0;
            $1 = $1 >>> 8;
            $5 = 0;
            label$32 : {
             if (!$1) {
              break label$32;
             }
             $5 = 31;
             if ($6 >>> 0 > 16777215) {
              break label$32;
             }
             $3 = $1 + 1048320 >>> 16 & 8;
             $1 = $1 << $3;
             $0 = $1 + 520192 >>> 16 & 4;
             $5 = $1 << $0;
             $1 = $5 + 245760 >>> 16 & 2;
             $0 = ($5 << $1 >>> 15) - ($1 | ($0 | $3)) | 0;
             $5 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
            }
            $3 = HEAP32[($5 << 2) + 53612 >> 2];
            label$29 : {
             label$30 : {
              label$31 : {
               if (!$3) {
                $0 = 0;
                break label$31;
               }
               $1 = $6 << (($5 | 0) == 31 ? 0 : 25 - ($5 >>> 1) | 0);
               $0 = 0;
               while (1) {
                label$35 : {
                 $7 = (HEAP32[$3 + 4 >> 2] & -8) - $6 | 0;
                 if ($7 >>> 0 >= $2 >>> 0) {
                  break label$35;
                 }
                 $4 = $3;
                 $2 = $7;
                 if ($2) {
                  break label$35;
                 }
                 $2 = 0;
                 $0 = $3;
                 break label$30;
                }
                $7 = HEAP32[$3 + 20 >> 2];
                $3 = HEAP32[(($1 >>> 29 & 4) + $3 | 0) + 16 >> 2];
                $0 = $7 ? ($7 | 0) == ($3 | 0) ? $0 : $7 : $0;
                $1 = $1 << (($3 | 0) != 0);
                if ($3) {
                 continue;
                }
                break;
               }
              }
              if (!($0 | $4)) {
               $0 = 2 << $5;
               $0 = (0 - $0 | $0) & $8;
               if (!$0) {
                break label$11;
               }
               $0 = ($0 & 0 - $0) + -1 | 0;
               $1 = $0 >>> 12 & 16;
               $3 = $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 5 & 8;
               $3 = $3 | $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 2 & 4;
               $3 = $3 | $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 1 & 2;
               $3 = $3 | $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 1 & 1;
               $0 = HEAP32[(($3 | $1) + ($0 >>> $1) << 2) + 53612 >> 2];
              }
              if (!$0) {
               break label$29;
              }
             }
             while (1) {
              $3 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
              $1 = $3 >>> 0 < $2 >>> 0;
              $2 = $1 ? $3 : $2;
              $4 = $1 ? $0 : $4;
              $1 = HEAP32[$0 + 16 >> 2];
              if ($1) {
               $0 = $1;
              } else {
               $0 = HEAP32[$0 + 20 >> 2];
              }
              if ($0) {
               continue;
              }
              break;
             }
            }
            if (!$4 | $2 >>> 0 >= HEAP32[13329] - $6 >>> 0) {
             break label$11;
            }
            $7 = HEAP32[$4 + 24 >> 2];
            $1 = HEAP32[$4 + 12 >> 2];
            if (($4 | 0) != ($1 | 0)) {
             $0 = HEAP32[$4 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = $1;
             HEAP32[$1 + 8 >> 2] = $0;
             break label$3;
            }
            $3 = $4 + 20 | 0;
            $0 = HEAP32[$3 >> 2];
            if (!$0) {
             $0 = HEAP32[$4 + 16 >> 2];
             if (!$0) {
              break label$9;
             }
             $3 = $4 + 16 | 0;
            }
            while (1) {
             $5 = $3;
             $1 = $0;
             $3 = $0 + 20 | 0;
             $0 = HEAP32[$3 >> 2];
             if ($0) {
              continue;
             }
             $3 = $1 + 16 | 0;
             $0 = HEAP32[$1 + 16 >> 2];
             if ($0) {
              continue;
             }
             break;
            }
            HEAP32[$5 >> 2] = 0;
            break label$3;
           }
           $1 = HEAP32[13329];
           if ($1 >>> 0 >= $6 >>> 0) {
            $0 = HEAP32[13332];
            $2 = $1 - $6 | 0;
            label$45 : {
             if ($2 >>> 0 >= 16) {
              HEAP32[13329] = $2;
              $3 = $0 + $6 | 0;
              HEAP32[13332] = $3;
              HEAP32[$3 + 4 >> 2] = $2 | 1;
              HEAP32[$0 + $1 >> 2] = $2;
              HEAP32[$0 + 4 >> 2] = $6 | 3;
              break label$45;
             }
             HEAP32[13332] = 0;
             HEAP32[13329] = 0;
             HEAP32[$0 + 4 >> 2] = $1 | 3;
             $1 = $0 + $1 | 0;
             HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
            }
            $0 = $0 + 8 | 0;
            break label$1;
           }
           $3 = HEAP32[13330];
           if ($3 >>> 0 > $6 >>> 0) {
            $1 = $3 - $6 | 0;
            HEAP32[13330] = $1;
            $0 = HEAP32[13333];
            $2 = $0 + $6 | 0;
            HEAP32[13333] = $2;
            HEAP32[$2 + 4 >> 2] = $1 | 1;
            HEAP32[$0 + 4 >> 2] = $6 | 3;
            $0 = $0 + 8 | 0;
            break label$1;
           }
           $0 = 0;
           $4 = $6 + 47 | 0;
           $2 = $4;
           if (HEAP32[13445]) {
            $1 = HEAP32[13447];
           } else {
            HEAP32[13448] = -1;
            HEAP32[13449] = -1;
            HEAP32[13446] = 4096;
            HEAP32[13447] = 4096;
            HEAP32[13445] = $11 + 12 & -16 ^ 1431655768;
            HEAP32[13450] = 0;
            HEAP32[13438] = 0;
            $1 = 4096;
           }
           $5 = $2 + $1 | 0;
           $7 = 0 - $1 | 0;
           $2 = $5 & $7;
           if ($2 >>> 0 <= $6 >>> 0) {
            break label$1;
           }
           $1 = HEAP32[13437];
           if ($1) {
            $8 = HEAP32[13435];
            $9 = $8 + $2 | 0;
            if ($9 >>> 0 <= $8 >>> 0 | $9 >>> 0 > $1 >>> 0) {
             break label$1;
            }
           }
           if (HEAPU8[53752] & 4) {
            break label$6;
           }
           label$51 : {
            label$52 : {
             $1 = HEAP32[13333];
             if ($1) {
              $0 = 53756;
              while (1) {
               $8 = HEAP32[$0 >> 2];
               if ($8 + HEAP32[$0 + 4 >> 2] >>> 0 > $1 >>> 0 ? $8 >>> 0 <= $1 >>> 0 : 0) {
                break label$52;
               }
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue;
               }
               break;
              }
             }
             $1 = sbrk(0);
             if (($1 | 0) == -1) {
              break label$7;
             }
             $5 = $2;
             $0 = HEAP32[13446];
             $3 = $0 + -1 | 0;
             if ($3 & $1) {
              $5 = ($2 - $1 | 0) + ($1 + $3 & 0 - $0) | 0;
             }
             if ($5 >>> 0 <= $6 >>> 0 | $5 >>> 0 > 2147483646) {
              break label$7;
             }
             $0 = HEAP32[13437];
             if ($0) {
              $3 = HEAP32[13435];
              $7 = $3 + $5 | 0;
              if ($7 >>> 0 <= $3 >>> 0 | $7 >>> 0 > $0 >>> 0) {
               break label$7;
              }
             }
             $0 = sbrk($5);
             if (($1 | 0) != ($0 | 0)) {
              break label$51;
             }
             break label$5;
            }
            $5 = $7 & $5 - $3;
            if ($5 >>> 0 > 2147483646) {
             break label$7;
            }
            $1 = sbrk($5);
            if (($1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
             break label$8;
            }
            $0 = $1;
           }
           $1 = $0;
           if (!($6 + 48 >>> 0 <= $5 >>> 0 | $5 >>> 0 > 2147483646 | ($0 | 0) == -1)) {
            $0 = HEAP32[13447];
            $0 = $0 + ($4 - $5 | 0) & 0 - $0;
            if ($0 >>> 0 > 2147483646) {
             break label$5;
            }
            if ((sbrk($0) | 0) != -1) {
             $5 = $0 + $5 | 0;
             break label$5;
            }
            sbrk(0 - $5 | 0);
            break label$7;
           }
           if (($1 | 0) != -1) {
            break label$5;
           }
           break label$7;
          }
          $4 = 0;
          break label$2;
         }
         $1 = 0;
         break label$3;
        }
        if (($1 | 0) != -1) {
         break label$5;
        }
       }
       HEAP32[13438] = HEAP32[13438] | 4;
      }
      if ($2 >>> 0 > 2147483646) {
       break label$4;
      }
      $1 = sbrk($2);
      $0 = sbrk(0);
      if ($1 >>> 0 >= $0 >>> 0 | ($1 | 0) == -1 | ($0 | 0) == -1) {
       break label$4;
      }
      $5 = $0 - $1 | 0;
      if ($5 >>> 0 <= $6 + 40 >>> 0) {
       break label$4;
      }
     }
     $0 = HEAP32[13435] + $5 | 0;
     HEAP32[13435] = $0;
     if ($0 >>> 0 > HEAPU32[13436]) {
      HEAP32[13436] = $0;
     }
     label$61 : {
      label$62 : {
       label$63 : {
        $2 = HEAP32[13333];
        if ($2) {
         $0 = 53756;
         while (1) {
          $3 = HEAP32[$0 >> 2];
          $4 = HEAP32[$0 + 4 >> 2];
          if (($3 + $4 | 0) == ($1 | 0)) {
           break label$63;
          }
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break;
         }
         break label$62;
        }
        $0 = HEAP32[13331];
        if (!($1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
         HEAP32[13331] = $1;
        }
        $0 = 0;
        HEAP32[13440] = $5;
        HEAP32[13439] = $1;
        HEAP32[13335] = -1;
        HEAP32[13336] = HEAP32[13445];
        HEAP32[13442] = 0;
        while (1) {
         $2 = $0 << 3;
         $3 = $2 + 53348 | 0;
         HEAP32[$2 + 53356 >> 2] = $3;
         HEAP32[$2 + 53360 >> 2] = $3;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != 32) {
          continue;
         }
         break;
        }
        $0 = $5 + -40 | 0;
        $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
        $3 = $0 - $2 | 0;
        HEAP32[13330] = $3;
        $2 = $1 + $2 | 0;
        HEAP32[13333] = $2;
        HEAP32[$2 + 4 >> 2] = $3 | 1;
        HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
        HEAP32[13334] = HEAP32[13449];
        break label$61;
       }
       if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 <= $2 >>> 0 | $3 >>> 0 > $2 >>> 0) {
        break label$62;
       }
       HEAP32[$0 + 4 >> 2] = $4 + $5;
       $0 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
       $1 = $0 + $2 | 0;
       HEAP32[13333] = $1;
       $3 = HEAP32[13330] + $5 | 0;
       $0 = $3 - $0 | 0;
       HEAP32[13330] = $0;
       HEAP32[$1 + 4 >> 2] = $0 | 1;
       HEAP32[($2 + $3 | 0) + 4 >> 2] = 40;
       HEAP32[13334] = HEAP32[13449];
       break label$61;
      }
      $4 = HEAP32[13331];
      if ($1 >>> 0 < $4 >>> 0) {
       HEAP32[13331] = $1;
       $4 = 0;
      }
      $3 = $1 + $5 | 0;
      $0 = 53756;
      label$69 : {
       label$70 : {
        label$71 : {
         label$72 : {
          label$73 : {
           label$74 : {
            while (1) {
             if (($3 | 0) != HEAP32[$0 >> 2]) {
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue;
              }
              break label$74;
             }
             break;
            }
            if (!(HEAPU8[$0 + 12 | 0] & 8)) {
             break label$73;
            }
           }
           $0 = 53756;
           while (1) {
            $3 = HEAP32[$0 >> 2];
            if ($3 >>> 0 <= $2 >>> 0) {
             $4 = $3 + HEAP32[$0 + 4 >> 2] | 0;
             if ($4 >>> 0 > $2 >>> 0) {
              break label$72;
             }
            }
            $0 = HEAP32[$0 + 8 >> 2];
            continue;
           }
          }
          HEAP32[$0 >> 2] = $1;
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $5;
          $9 = ($1 + 8 & 7 ? -8 - $1 & 7 : 0) + $1 | 0;
          HEAP32[$9 + 4 >> 2] = $6 | 3;
          $1 = $3 + ($3 + 8 & 7 ? -8 - $3 & 7 : 0) | 0;
          $0 = ($1 - $9 | 0) - $6 | 0;
          $7 = $6 + $9 | 0;
          if (($1 | 0) == ($2 | 0)) {
           HEAP32[13333] = $7;
           $0 = HEAP32[13330] + $0 | 0;
           HEAP32[13330] = $0;
           HEAP32[$7 + 4 >> 2] = $0 | 1;
           break label$70;
          }
          if (HEAP32[13332] == ($1 | 0)) {
           HEAP32[13332] = $7;
           $0 = HEAP32[13329] + $0 | 0;
           HEAP32[13329] = $0;
           HEAP32[$7 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $7 >> 2] = $0;
           break label$70;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          if (($2 & 3) == 1) {
           $10 = $2 & -8;
           label$82 : {
            if ($2 >>> 0 <= 255) {
             $4 = $2 >>> 3;
             $2 = HEAP32[$1 + 8 >> 2];
             $3 = HEAP32[$1 + 12 >> 2];
             if (($3 | 0) == ($2 | 0)) {
              HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $4);
              break label$82;
             }
             HEAP32[$2 + 12 >> 2] = $3;
             HEAP32[$3 + 8 >> 2] = $2;
             break label$82;
            }
            $8 = HEAP32[$1 + 24 >> 2];
            $5 = HEAP32[$1 + 12 >> 2];
            label$85 : {
             if (($5 | 0) != ($1 | 0)) {
              $2 = HEAP32[$1 + 8 >> 2];
              HEAP32[$2 + 12 >> 2] = $5;
              HEAP32[$5 + 8 >> 2] = $2;
              break label$85;
             }
             label$88 : {
              $3 = $1 + 20 | 0;
              $6 = HEAP32[$3 >> 2];
              if ($6) {
               break label$88;
              }
              $3 = $1 + 16 | 0;
              $6 = HEAP32[$3 >> 2];
              if ($6) {
               break label$88;
              }
              $5 = 0;
              break label$85;
             }
             while (1) {
              $2 = $3;
              $5 = $6;
              $3 = $6 + 20 | 0;
              $6 = HEAP32[$3 >> 2];
              if ($6) {
               continue;
              }
              $3 = $5 + 16 | 0;
              $6 = HEAP32[$5 + 16 >> 2];
              if ($6) {
               continue;
              }
              break;
             }
             HEAP32[$2 >> 2] = 0;
            }
            if (!$8) {
             break label$82;
            }
            $2 = HEAP32[$1 + 28 >> 2];
            $3 = ($2 << 2) + 53612 | 0;
            label$90 : {
             if (HEAP32[$3 >> 2] == ($1 | 0)) {
              HEAP32[$3 >> 2] = $5;
              if ($5) {
               break label$90;
              }
              HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $2);
              break label$82;
             }
             HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $5;
             if (!$5) {
              break label$82;
             }
            }
            HEAP32[$5 + 24 >> 2] = $8;
            $2 = HEAP32[$1 + 16 >> 2];
            if ($2) {
             HEAP32[$5 + 16 >> 2] = $2;
             HEAP32[$2 + 24 >> 2] = $5;
            }
            $2 = HEAP32[$1 + 20 >> 2];
            if (!$2) {
             break label$82;
            }
            HEAP32[$5 + 20 >> 2] = $2;
            HEAP32[$2 + 24 >> 2] = $5;
           }
           $1 = $1 + $10 | 0;
           $0 = $0 + $10 | 0;
          }
          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
          HEAP32[$7 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $7 >> 2] = $0;
          if ($0 >>> 0 <= 255) {
           $1 = $0 >>> 3;
           $0 = ($1 << 3) + 53348 | 0;
           $2 = HEAP32[13327];
           $1 = 1 << $1;
           label$94 : {
            if (!($2 & $1)) {
             HEAP32[13327] = $1 | $2;
             $1 = $0;
             break label$94;
            }
            $1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $7;
           HEAP32[$1 + 12 >> 2] = $7;
           HEAP32[$7 + 12 >> 2] = $0;
           HEAP32[$7 + 8 >> 2] = $1;
           break label$70;
          }
          $2 = $7;
          $3 = $0 >>> 8;
          $1 = 0;
          label$96 : {
           if (!$3) {
            break label$96;
           }
           $1 = 31;
           if ($0 >>> 0 > 16777215) {
            break label$96;
           }
           $4 = $3 + 1048320 >>> 16 & 8;
           $3 = $3 << $4;
           $1 = $3 + 520192 >>> 16 & 4;
           $6 = $3 << $1;
           $3 = $6 + 245760 >>> 16 & 2;
           $1 = ($6 << $3 >>> 15) - ($3 | ($1 | $4)) | 0;
           $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$2 + 28 >> 2] = $1;
          HEAP32[$7 + 16 >> 2] = 0;
          HEAP32[$7 + 20 >> 2] = 0;
          $2 = ($1 << 2) + 53612 | 0;
          $3 = HEAP32[13328];
          $4 = 1 << $1;
          label$97 : {
           if (!($3 & $4)) {
            HEAP32[13328] = $3 | $4;
            HEAP32[$2 >> 2] = $7;
            break label$97;
           }
           $3 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
           $1 = HEAP32[$2 >> 2];
           while (1) {
            $2 = $1;
            if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
             break label$71;
            }
            $1 = $3 >>> 29;
            $3 = $3 << 1;
            $4 = ($1 & 4) + $2 | 0;
            $1 = HEAP32[$4 + 16 >> 2];
            if ($1) {
             continue;
            }
            break;
           }
           HEAP32[$4 + 16 >> 2] = $7;
          }
          HEAP32[$7 + 24 >> 2] = $2;
          HEAP32[$7 + 12 >> 2] = $7;
          HEAP32[$7 + 8 >> 2] = $7;
          break label$70;
         }
         $0 = $5 + -40 | 0;
         $3 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
         $7 = $0 - $3 | 0;
         HEAP32[13330] = $7;
         $3 = $1 + $3 | 0;
         HEAP32[13333] = $3;
         HEAP32[$3 + 4 >> 2] = $7 | 1;
         HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
         HEAP32[13334] = HEAP32[13449];
         $0 = ($4 + ($4 + -39 & 7 ? 39 - $4 & 7 : 0) | 0) + -47 | 0;
         $3 = $0 >>> 0 < $2 + 16 >>> 0 ? $2 : $0;
         HEAP32[$3 + 4 >> 2] = 27;
         $0 = HEAP32[13442];
         HEAP32[$3 + 16 >> 2] = HEAP32[13441];
         HEAP32[$3 + 20 >> 2] = $0;
         $0 = HEAP32[13440];
         HEAP32[$3 + 8 >> 2] = HEAP32[13439];
         HEAP32[$3 + 12 >> 2] = $0;
         HEAP32[13441] = $3 + 8;
         HEAP32[13440] = $5;
         HEAP32[13439] = $1;
         HEAP32[13442] = 0;
         $0 = $3 + 24 | 0;
         while (1) {
          HEAP32[$0 + 4 >> 2] = 7;
          $1 = $0 + 8 | 0;
          $0 = $0 + 4 | 0;
          if ($1 >>> 0 < $4 >>> 0) {
           continue;
          }
          break;
         }
         if (($2 | 0) == ($3 | 0)) {
          break label$61;
         }
         HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & -2;
         $4 = $3 - $2 | 0;
         HEAP32[$2 + 4 >> 2] = $4 | 1;
         HEAP32[$3 >> 2] = $4;
         if ($4 >>> 0 <= 255) {
          $1 = $4 >>> 3;
          $0 = ($1 << 3) + 53348 | 0;
          $3 = HEAP32[13327];
          $1 = 1 << $1;
          label$102 : {
           if (!($3 & $1)) {
            HEAP32[13327] = $1 | $3;
            $1 = $0;
            break label$102;
           }
           $1 = HEAP32[$0 + 8 >> 2];
          }
          HEAP32[$0 + 8 >> 2] = $2;
          HEAP32[$1 + 12 >> 2] = $2;
          HEAP32[$2 + 12 >> 2] = $0;
          HEAP32[$2 + 8 >> 2] = $1;
          break label$61;
         }
         HEAP32[$2 + 16 >> 2] = 0;
         HEAP32[$2 + 20 >> 2] = 0;
         $1 = $2;
         $3 = $4 >>> 8;
         $0 = 0;
         label$104 : {
          if (!$3) {
           break label$104;
          }
          $0 = 31;
          if ($4 >>> 0 > 16777215) {
           break label$104;
          }
          $5 = $3 + 1048320 >>> 16 & 8;
          $3 = $3 << $5;
          $0 = $3 + 520192 >>> 16 & 4;
          $7 = $3 << $0;
          $3 = $7 + 245760 >>> 16 & 2;
          $0 = ($7 << $3 >>> 15) - ($3 | ($0 | $5)) | 0;
          $0 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
         }
         HEAP32[$1 + 28 >> 2] = $0;
         $1 = ($0 << 2) + 53612 | 0;
         $3 = HEAP32[13328];
         $5 = 1 << $0;
         label$105 : {
          if (!($3 & $5)) {
           HEAP32[13328] = $3 | $5;
           HEAP32[$1 >> 2] = $2;
           HEAP32[$2 + 24 >> 2] = $1;
           break label$105;
          }
          $0 = $4 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
          $1 = HEAP32[$1 >> 2];
          while (1) {
           $3 = $1;
           if (($4 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
            break label$69;
           }
           $1 = $0 >>> 29;
           $0 = $0 << 1;
           $5 = $3 + ($1 & 4) | 0;
           $1 = HEAP32[$5 + 16 >> 2];
           if ($1) {
            continue;
           }
           break;
          }
          HEAP32[$5 + 16 >> 2] = $2;
          HEAP32[$2 + 24 >> 2] = $3;
         }
         HEAP32[$2 + 12 >> 2] = $2;
         HEAP32[$2 + 8 >> 2] = $2;
         break label$61;
        }
        $0 = HEAP32[$2 + 8 >> 2];
        HEAP32[$0 + 12 >> 2] = $7;
        HEAP32[$2 + 8 >> 2] = $7;
        HEAP32[$7 + 24 >> 2] = 0;
        HEAP32[$7 + 12 >> 2] = $2;
        HEAP32[$7 + 8 >> 2] = $0;
       }
       $0 = $9 + 8 | 0;
       break label$1;
      }
      $0 = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = $2;
      HEAP32[$3 + 8 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$2 + 8 >> 2] = $0;
     }
     $0 = HEAP32[13330];
     if ($0 >>> 0 <= $6 >>> 0) {
      break label$4;
     }
     $1 = $0 - $6 | 0;
     HEAP32[13330] = $1;
     $0 = HEAP32[13333];
     $2 = $0 + $6 | 0;
     HEAP32[13333] = $2;
     HEAP32[$2 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $6 | 3;
     $0 = $0 + 8 | 0;
     break label$1;
    }
    HEAP32[12002] = 48;
    $0 = 0;
    break label$1;
   }
   label$108 : {
    if (!$7) {
     break label$108;
    }
    $0 = HEAP32[$4 + 28 >> 2];
    $3 = ($0 << 2) + 53612 | 0;
    label$109 : {
     if (HEAP32[$3 >> 2] == ($4 | 0)) {
      HEAP32[$3 >> 2] = $1;
      if ($1) {
       break label$109;
      }
      $8 = __wasm_rotl_i32(-2, $0) & $8;
      HEAP32[13328] = $8;
      break label$108;
     }
     HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($4 | 0) ? 16 : 20) >> 2] = $1;
     if (!$1) {
      break label$108;
     }
    }
    HEAP32[$1 + 24 >> 2] = $7;
    $0 = HEAP32[$4 + 16 >> 2];
    if ($0) {
     HEAP32[$1 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $1;
    }
    $0 = HEAP32[$4 + 20 >> 2];
    if (!$0) {
     break label$108;
    }
    HEAP32[$1 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $1;
   }
   label$112 : {
    if ($2 >>> 0 <= 15) {
     $0 = $2 + $6 | 0;
     HEAP32[$4 + 4 >> 2] = $0 | 3;
     $0 = $0 + $4 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$112;
    }
    HEAP32[$4 + 4 >> 2] = $6 | 3;
    $3 = $4 + $6 | 0;
    HEAP32[$3 + 4 >> 2] = $2 | 1;
    HEAP32[$2 + $3 >> 2] = $2;
    if ($2 >>> 0 <= 255) {
     $1 = $2 >>> 3;
     $0 = ($1 << 3) + 53348 | 0;
     $2 = HEAP32[13327];
     $1 = 1 << $1;
     label$115 : {
      if (!($2 & $1)) {
       HEAP32[13327] = $1 | $2;
       $1 = $0;
       break label$115;
      }
      $1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$1 + 12 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $0;
     HEAP32[$3 + 8 >> 2] = $1;
     break label$112;
    }
    $1 = $3;
    $6 = $2 >>> 8;
    $0 = 0;
    label$117 : {
     if (!$6) {
      break label$117;
     }
     $0 = 31;
     if ($2 >>> 0 > 16777215) {
      break label$117;
     }
     $5 = $6 + 1048320 >>> 16 & 8;
     $6 = $6 << $5;
     $0 = $6 + 520192 >>> 16 & 4;
     $7 = $6 << $0;
     $6 = $7 + 245760 >>> 16 & 2;
     $0 = ($7 << $6 >>> 15) - ($6 | ($0 | $5)) | 0;
     $0 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
    }
    HEAP32[$1 + 28 >> 2] = $0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    $1 = ($0 << 2) + 53612 | 0;
    label$118 : {
     $6 = 1 << $0;
     label$119 : {
      if (!($6 & $8)) {
       HEAP32[13328] = $6 | $8;
       HEAP32[$1 >> 2] = $3;
       break label$119;
      }
      $0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
      $6 = HEAP32[$1 >> 2];
      while (1) {
       $1 = $6;
       if ((HEAP32[$1 + 4 >> 2] & -8) == ($2 | 0)) {
        break label$118;
       }
       $6 = $0 >>> 29;
       $0 = $0 << 1;
       $5 = ($6 & 4) + $1 | 0;
       $6 = HEAP32[$5 + 16 >> 2];
       if ($6) {
        continue;
       }
       break;
      }
      HEAP32[$5 + 16 >> 2] = $3;
     }
     HEAP32[$3 + 24 >> 2] = $1;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$112;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $1;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $0 = $4 + 8 | 0;
   break label$1;
  }
  label$122 : {
   if (!$9) {
    break label$122;
   }
   $0 = HEAP32[$1 + 28 >> 2];
   $2 = ($0 << 2) + 53612 | 0;
   label$123 : {
    if (HEAP32[$2 >> 2] == ($1 | 0)) {
     HEAP32[$2 >> 2] = $4;
     if ($4) {
      break label$123;
     }
     HEAP32[13328] = __wasm_rotl_i32(-2, $0) & $10;
     break label$122;
    }
    HEAP32[$9 + (HEAP32[$9 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $4;
    if (!$4) {
     break label$122;
    }
   }
   HEAP32[$4 + 24 >> 2] = $9;
   $0 = HEAP32[$1 + 16 >> 2];
   if ($0) {
    HEAP32[$4 + 16 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $4;
   }
   $0 = HEAP32[$1 + 20 >> 2];
   if (!$0) {
    break label$122;
   }
   HEAP32[$4 + 20 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = $4;
  }
  label$126 : {
   if ($3 >>> 0 <= 15) {
    $0 = $3 + $6 | 0;
    HEAP32[$1 + 4 >> 2] = $0 | 3;
    $0 = $0 + $1 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
    break label$126;
   }
   HEAP32[$1 + 4 >> 2] = $6 | 3;
   $6 = $1 + $6 | 0;
   HEAP32[$6 + 4 >> 2] = $3 | 1;
   HEAP32[$3 + $6 >> 2] = $3;
   if ($8) {
    $2 = $8 >>> 3;
    $0 = ($2 << 3) + 53348 | 0;
    $4 = HEAP32[13332];
    $2 = 1 << $2;
    label$129 : {
     if (!($2 & $5)) {
      HEAP32[13327] = $2 | $5;
      $2 = $0;
      break label$129;
     }
     $2 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 8 >> 2] = $4;
    HEAP32[$2 + 12 >> 2] = $4;
    HEAP32[$4 + 12 >> 2] = $0;
    HEAP32[$4 + 8 >> 2] = $2;
   }
   HEAP32[13332] = $6;
   HEAP32[13329] = $3;
  }
  $0 = $1 + 8 | 0;
 }
 global$0 = $11 + 16 | 0;
 return $0 | 0;
}
function BuildControlBase__boxedDblClick_28int_2c_20int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $4 = global$0 - 304 | 0;
 global$0 = $4;
 label$1 : {
  if (!HEAPU8[$0 + 1293 | 0] | ($1 | 0) == -1) {
   break label$1;
  }
  $7 = HEAPU8[$0 + 1292 | 0] != 0;
  $9 = HEAPU8[$0 + 17 | 0] != 0;
  $5 = HEAP32[$0 + 12 >> 2];
  $8 = HEAP32[$5 + 128 >> 2];
  if (HEAP32[$8 + 32 >> 2] < 7 ? ($7 | 0) != ($9 | 0) : 0) {
   break label$1;
  }
  $14 = $7 ^ $9;
  memset($4 + 208 | 0, 255, 96);
  $10 = HEAP32[$5 + 128 >> 2];
  $9 = 0;
  $5 = 0;
  $7 = 0;
  $2 = $1 & 3;
  $11 = 0;
  label$3 : {
   if ($2 >>> 0 > 2) {
    break label$3;
   }
   $7 = $1 >>> 9 & 127;
   $5 = $1 >>> 2 & 127;
   $1 = $1 >>> 16 & 255;
   label$4 : {
    switch ($2 - 1 | 0) {
    default:
     $3 = $1 + -1 | 0;
     $9 = $5;
     $6 = $1;
     $11 = $7;
     break label$3;
    case 0:
     $9 = $1 + -1 | 0;
     $3 = $5;
     $6 = $3;
     $5 = $1;
     $11 = $7;
     break label$3;
    case 1:
     break label$4;
    }
   }
   $3 = $5;
   $6 = $3;
   $9 = $7;
   $5 = $7;
   $7 = $1;
   $11 = $1 + -1 | 0;
  }
  $2 = 0;
  $13 = $3;
  $3 = HEAP32[$10 + 12 >> 2];
  $1 = HEAP8[HEAP32[$10 + 28 >> 2] + ((Math_imul($3, $5) + $6 | 0) + Math_imul(HEAP32[$10 + 24 >> 2], $7) | 0) | 0] & 1 ^ $14;
  $12 = $1 ? $13 : $6;
  if (($12 | 0) < 1 | ($12 | 0) >= ($3 + -2 | 0)) {
   break label$1;
  }
  $9 = $1 ? $9 : $5;
  if (($9 | 0) < 1) {
   break label$1;
  }
  $11 = $1 ? $11 : $7;
  if (($11 | 0) < 1 | ($9 | 0) >= (HEAP32[$10 + 16 >> 2] + -2 | 0) | ($11 | 0) >= (HEAP32[$10 + 20 >> 2] + -2 | 0)) {
   break label$1;
  }
  HEAP32[$4 + 300 >> 2] = $11;
  HEAP32[$4 + 296 >> 2] = $9;
  $1 = $12 + 1 | 0;
  HEAP32[$4 + 292 >> 2] = $1;
  HEAP32[$4 + 284 >> 2] = $11;
  HEAP32[$4 + 280 >> 2] = $9;
  HEAP32[$4 + 276 >> 2] = $12;
  HEAP32[$4 + 268 >> 2] = $11;
  HEAP32[$4 + 264 >> 2] = $12;
  $5 = $9 + 1 | 0;
  HEAP32[$4 + 260 >> 2] = $5;
  HEAP32[$4 + 252 >> 2] = $11;
  HEAP32[$4 + 248 >> 2] = $12;
  HEAP32[$4 + 244 >> 2] = $9;
  HEAP32[$4 + 236 >> 2] = $9;
  HEAP32[$4 + 232 >> 2] = $12;
  $7 = $11 + 1 | 0;
  HEAP32[$4 + 228 >> 2] = $7;
  HEAP32[$4 + 288 >> 2] = 0;
  HEAP32[$4 + 272 >> 2] = 0;
  HEAP32[$4 + 256 >> 2] = 1;
  HEAP32[$4 + 240 >> 2] = 1;
  HEAP32[$4 + 224 >> 2] = 2;
  HEAP32[$4 + 220 >> 2] = $9;
  HEAP32[$4 + 216 >> 2] = $12;
  HEAP32[$4 + 212 >> 2] = $11;
  HEAP32[$4 + 208 >> 2] = 2;
  HEAP32[$4 + 200 >> 2] = -1;
  HEAP32[$4 + 204 >> 2] = -1;
  HEAP32[$4 + 192 >> 2] = -1;
  HEAP32[$4 + 196 >> 2] = -1;
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      if ($12 >>> 0 <= 49) {
       if ($9 >>> 0 > 49) {
        break label$9;
       }
       label$12 : {
        if ($11 >>> 0 > 49) {
         break label$12;
        }
        $2 = $4 + 208 | 0;
        if ((HEAPU8[($9 + ((Math_imul($11, 2500) + $8 | 0) + Math_imul($12, 50) | 0) | 0) + 250136 | 0] & 15) == 10) {
         break label$8;
        }
        if (!((HEAPU8[($9 + ((Math_imul($7, 2500) + $8 | 0) + Math_imul($12, 50) | 0) | 0) + 250136 | 0] & 15) != 10 | $11 >>> 0 > 48)) {
         $2 = $4 + 224 | 0;
         break label$8;
        }
        if ((HEAPU8[($11 + ((Math_imul($9, 2500) + $8 | 0) + Math_imul($12, 50) | 0) | 0) + 125136 | 0] & 15) == 10) {
         $2 = $4 + 240 | 0;
         break label$8;
        }
        if ((HEAPU8[($11 + ((Math_imul($5, 2500) + $8 | 0) + Math_imul($12, 50) | 0) | 0) + 125136 | 0] & 15) != 10 | $9 >>> 0 > 48) {
         break label$12;
        }
        $2 = $4 + 256 | 0;
        break label$8;
       }
       $2 = $4 + 272 | 0;
       break label$10;
      }
      if ($9 >>> 0 > 49) {
       break label$9;
      }
      $2 = $4 + 272 | 0;
     }
     $5 = $11 >>> 0 > 49;
     if ((HEAPU8[($11 + ((Math_imul($12, 2500) + $8 | 0) + Math_imul($9, 50) | 0) | 0) + 136 | 0] & 15) == 10 ? !($5 | $12 >>> 0 > 49) : 0) {
      break label$8;
     }
     if ($12 >>> 0 > 48 | $5 | (HEAPU8[($11 + ((Math_imul($1, 2500) + $8 | 0) + Math_imul($9, 50) | 0) | 0) + 136 | 0] & 15) != 10) {
      break label$9;
     }
     $2 = $4 + 288 | 0;
     break label$8;
    }
    memset($4, 255, 192);
    $1 = 0;
    break label$7;
   }
   $1 = HEAP32[$2 + 12 >> 2];
   HEAP32[$4 + 200 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$4 + 204 >> 2] = $1;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 192 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 196 >> 2] = $1;
   $5 = memset($4, 255, 192);
   BuildWorld__getAllNei_28CoordBuild_20const__2c_20CoordBuild__29($5 + 192 | 0, $5);
   $1 = HEAP32[$5 + 8 >> 2];
   label$16 : {
    label$17 : {
     if ($1 >>> 0 > 49) {
      break label$17;
     }
     $7 = HEAP32[$5 + 12 >> 2];
     if ($7 >>> 0 > 49) {
      break label$17;
     }
     $3 = HEAP32[$5 + 4 >> 2];
     if ($3 >>> 0 > 49) {
      break label$17;
     }
     $2 = HEAP32[$5 >> 2];
     if ($2 >>> 0 > 2) {
      break label$17;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$16;
     }
    }
    HEAP32[$5 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 24 >> 2];
   label$18 : {
    label$19 : {
     if ($1 >>> 0 >= 50) {
      break label$19;
     }
     $7 = HEAP32[$5 + 28 >> 2];
     if ($7 >>> 0 > 49) {
      break label$19;
     }
     $3 = HEAP32[$5 + 20 >> 2];
     if ($3 >>> 0 > 49) {
      break label$19;
     }
     $2 = HEAP32[$5 + 16 >> 2];
     if ($2 >>> 0 > 2) {
      break label$19;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$18;
     }
    }
    HEAP32[$5 + 16 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 40 >> 2];
   label$20 : {
    label$21 : {
     if ($1 >>> 0 > 49) {
      break label$21;
     }
     $7 = HEAP32[$5 + 44 >> 2];
     if ($7 >>> 0 > 49) {
      break label$21;
     }
     $3 = HEAP32[$5 + 36 >> 2];
     if ($3 >>> 0 > 49) {
      break label$21;
     }
     $2 = HEAP32[$5 + 32 >> 2];
     if ($2 >>> 0 > 2) {
      break label$21;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$20;
     }
    }
    HEAP32[$5 + 32 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 56 >> 2];
   label$22 : {
    label$23 : {
     if ($1 >>> 0 > 49) {
      break label$23;
     }
     $7 = HEAP32[$5 + 60 >> 2];
     if ($7 >>> 0 > 49) {
      break label$23;
     }
     $3 = HEAP32[$5 + 52 >> 2];
     if ($3 >>> 0 > 49) {
      break label$23;
     }
     $2 = HEAP32[$5 + 48 >> 2];
     if ($2 >>> 0 > 2) {
      break label$23;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$22;
     }
    }
    HEAP32[$5 + 48 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 72 >> 2];
   label$24 : {
    label$25 : {
     if ($1 >>> 0 > 49) {
      break label$25;
     }
     $7 = HEAP32[$5 + 76 >> 2];
     if ($7 >>> 0 > 49) {
      break label$25;
     }
     $3 = HEAP32[$5 + 68 >> 2];
     if ($3 >>> 0 > 49) {
      break label$25;
     }
     $2 = HEAP32[$5 + 64 >> 2];
     if ($2 >>> 0 > 2) {
      break label$25;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$24;
     }
    }
    HEAP32[$5 + 64 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 88 >> 2];
   label$26 : {
    label$27 : {
     if ($1 >>> 0 > 49) {
      break label$27;
     }
     $7 = HEAP32[$5 + 92 >> 2];
     if ($7 >>> 0 > 49) {
      break label$27;
     }
     $3 = HEAP32[$5 + 84 >> 2];
     if ($3 >>> 0 > 49) {
      break label$27;
     }
     $2 = HEAP32[$5 + 80 >> 2];
     if ($2 >>> 0 > 2) {
      break label$27;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$26;
     }
    }
    HEAP32[$5 + 80 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 104 >> 2];
   label$28 : {
    label$29 : {
     if ($1 >>> 0 > 49) {
      break label$29;
     }
     $7 = HEAP32[$5 + 108 >> 2];
     if ($7 >>> 0 > 49) {
      break label$29;
     }
     $3 = HEAP32[$5 + 100 >> 2];
     if ($3 >>> 0 > 49) {
      break label$29;
     }
     $2 = HEAP32[$5 + 96 >> 2];
     if ($2 >>> 0 > 2) {
      break label$29;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$28;
     }
    }
    HEAP32[$5 + 96 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 120 >> 2];
   label$30 : {
    label$31 : {
     if ($1 >>> 0 > 49) {
      break label$31;
     }
     $7 = HEAP32[$5 + 124 >> 2];
     if ($7 >>> 0 > 49) {
      break label$31;
     }
     $3 = HEAP32[$5 + 116 >> 2];
     if ($3 >>> 0 > 49) {
      break label$31;
     }
     $2 = HEAP32[$5 + 112 >> 2];
     if ($2 >>> 0 > 2) {
      break label$31;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$30;
     }
    }
    HEAP32[$5 + 112 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 136 >> 2];
   label$32 : {
    label$33 : {
     if ($1 >>> 0 > 49) {
      break label$33;
     }
     $7 = HEAP32[$5 + 140 >> 2];
     if ($7 >>> 0 > 49) {
      break label$33;
     }
     $3 = HEAP32[$5 + 132 >> 2];
     if ($3 >>> 0 > 49) {
      break label$33;
     }
     $2 = HEAP32[$5 + 128 >> 2];
     if ($2 >>> 0 > 2) {
      break label$33;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$32;
     }
    }
    HEAP32[$5 + 128 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 152 >> 2];
   label$34 : {
    label$35 : {
     if ($1 >>> 0 > 49) {
      break label$35;
     }
     $7 = HEAP32[$5 + 156 >> 2];
     if ($7 >>> 0 > 49) {
      break label$35;
     }
     $3 = HEAP32[$5 + 148 >> 2];
     if ($3 >>> 0 > 49) {
      break label$35;
     }
     $2 = HEAP32[$5 + 144 >> 2];
     if ($2 >>> 0 > 2) {
      break label$35;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$34;
     }
    }
    HEAP32[$5 + 144 >> 2] = -1;
   }
   $1 = HEAP32[$5 + 168 >> 2];
   label$36 : {
    label$37 : {
     if ($1 >>> 0 > 49) {
      break label$37;
     }
     $7 = HEAP32[$5 + 172 >> 2];
     if ($7 >>> 0 > 49) {
      break label$37;
     }
     $3 = HEAP32[$5 + 164 >> 2];
     if ($3 >>> 0 > 49) {
      break label$37;
     }
     $2 = HEAP32[$5 + 160 >> 2];
     if ($2 >>> 0 > 2) {
      break label$37;
     }
     if ((HEAPU8[($7 + (((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
      break label$36;
     }
    }
    HEAP32[$5 + 160 >> 2] = -1;
   }
   $7 = HEAP32[$5 + 184 >> 2];
   label$38 : {
    if ($7 >>> 0 > 49) {
     break label$38;
    }
    $3 = HEAP32[$5 + 188 >> 2];
    if ($3 >>> 0 > 49) {
     break label$38;
    }
    $2 = HEAP32[$5 + 180 >> 2];
    if ($2 >>> 0 > 49) {
     break label$38;
    }
    $6 = HEAP32[$5 + 176 >> 2];
    if ($6 >>> 0 > 2) {
     break label$38;
    }
    $1 = 1;
    if ((HEAPU8[($3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0) + 136 | 0] & 12) == 8) {
     break label$7;
    }
   }
   HEAP32[$5 + 176 >> 2] = -1;
   $1 = 1;
  }
  $5 = $1;
  $1 = 1;
  $13 = $8;
  $2 = HEAP32[$4 + 216 >> 2];
  $3 = 1;
  label$39 : {
   if ($2 >>> 0 >= 50) {
    break label$39;
   }
   $6 = HEAP32[$4 + 220 >> 2];
   $3 = 1;
   if ($6 >>> 0 > 49) {
    break label$39;
   }
   label$40 : {
    $3 = HEAP32[$4 + 212 >> 2];
    if ($3 >>> 0 > 49) {
     break label$40;
    }
    $10 = HEAP32[$4 + 208 >> 2];
    if ($10 >>> 0 > 2) {
     break label$40;
    }
    $3 = $6 + (((Math_imul($10, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($2, 50) | 0) | 0;
    if ((HEAPU8[$3 + 136 | 0] & 12) != 8) {
     break label$40;
    }
    HEAP8[$3 + 136 | 0] = 0;
    $3 = -1;
    break label$39;
   }
   $10 = HEAP32[$4 + 212 >> 2];
   $3 = 1;
   if ($10 >>> 0 > 49) {
    break label$39;
   }
   $7 = HEAP32[$4 + 208 >> 2];
   $3 = 1;
   if ($7 >>> 0 > 2) {
    break label$39;
   }
   HEAP8[($6 + (((Math_imul($7, 125e3) + $8 | 0) + Math_imul($10, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 9;
   $3 = 1;
  }
  HEAP32[$13 + 32 >> 2] = $3 + HEAP32[$8 + 32 >> 2];
  $7 = HEAP32[$4 + 232 >> 2];
  label$41 : {
   if ($7 >>> 0 >= 50) {
    break label$41;
   }
   $3 = HEAP32[$4 + 236 >> 2];
   if ($3 >>> 0 > 49) {
    break label$41;
   }
   label$42 : {
    $2 = HEAP32[$4 + 228 >> 2];
    label$43 : {
     if ($2 >>> 0 > 49) {
      break label$43;
     }
     $6 = HEAP32[$4 + 224 >> 2];
     if ($6 >>> 0 > 2) {
      break label$43;
     }
     $2 = $3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0;
     if ((HEAPU8[$2 + 136 | 0] & 12) == 8) {
      break label$42;
     }
    }
    $2 = HEAP32[$4 + 228 >> 2];
    if ($2 >>> 0 > 49) {
     break label$41;
    }
    $6 = HEAP32[$4 + 224 >> 2];
    if ($6 >>> 0 > 2) {
     break label$41;
    }
    HEAP8[($3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0) + 136 | 0] = 9;
    break label$41;
   }
   HEAP8[$2 + 136 | 0] = 0;
   $1 = -1;
  }
  HEAP32[$8 + 32 >> 2] = HEAP32[$8 + 32 >> 2] + $1;
  $1 = 1;
  $13 = $8;
  $2 = HEAP32[$4 + 248 >> 2];
  $3 = 1;
  label$44 : {
   if ($2 >>> 0 > 49) {
    break label$44;
   }
   $6 = HEAP32[$4 + 252 >> 2];
   $3 = 1;
   if ($6 >>> 0 > 49) {
    break label$44;
   }
   label$45 : {
    $3 = HEAP32[$4 + 244 >> 2];
    label$46 : {
     if ($3 >>> 0 > 49) {
      break label$46;
     }
     $10 = HEAP32[$4 + 240 >> 2];
     if ($10 >>> 0 > 2) {
      break label$46;
     }
     $3 = $6 + (((Math_imul($10, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($2, 50) | 0) | 0;
     if ((HEAPU8[$3 + 136 | 0] & 12) == 8) {
      break label$45;
     }
    }
    $10 = HEAP32[$4 + 244 >> 2];
    $3 = 1;
    if ($10 >>> 0 > 49) {
     break label$44;
    }
    $7 = HEAP32[$4 + 240 >> 2];
    $3 = 1;
    if ($7 >>> 0 > 2) {
     break label$44;
    }
    HEAP8[($6 + (((Math_imul($7, 125e3) + $8 | 0) + Math_imul($10, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 9;
    $3 = 1;
    break label$44;
   }
   HEAP8[$3 + 136 | 0] = 0;
   $3 = -1;
  }
  HEAP32[$13 + 32 >> 2] = $3 + HEAP32[$8 + 32 >> 2];
  $7 = HEAP32[$4 + 264 >> 2];
  label$47 : {
   if ($7 >>> 0 > 49) {
    break label$47;
   }
   $3 = HEAP32[$4 + 268 >> 2];
   if ($3 >>> 0 > 49) {
    break label$47;
   }
   label$48 : {
    $2 = HEAP32[$4 + 260 >> 2];
    label$49 : {
     if ($2 >>> 0 > 49) {
      break label$49;
     }
     $6 = HEAP32[$4 + 256 >> 2];
     if ($6 >>> 0 > 2) {
      break label$49;
     }
     $2 = $3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0;
     if ((HEAPU8[$2 + 136 | 0] & 12) == 8) {
      break label$48;
     }
    }
    $2 = HEAP32[$4 + 260 >> 2];
    if ($2 >>> 0 > 49) {
     break label$47;
    }
    $6 = HEAP32[$4 + 256 >> 2];
    if ($6 >>> 0 > 2) {
     break label$47;
    }
    HEAP8[($3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0) + 136 | 0] = 9;
    break label$47;
   }
   HEAP8[$2 + 136 | 0] = 0;
   $1 = -1;
  }
  HEAP32[$8 + 32 >> 2] = HEAP32[$8 + 32 >> 2] + $1;
  $1 = 1;
  $13 = $8;
  $2 = HEAP32[$4 + 280 >> 2];
  $3 = 1;
  label$50 : {
   if ($2 >>> 0 > 49) {
    break label$50;
   }
   $6 = HEAP32[$4 + 284 >> 2];
   $3 = 1;
   if ($6 >>> 0 > 49) {
    break label$50;
   }
   label$51 : {
    $3 = HEAP32[$4 + 276 >> 2];
    label$52 : {
     if ($3 >>> 0 > 49) {
      break label$52;
     }
     $10 = HEAP32[$4 + 272 >> 2];
     if ($10 >>> 0 > 2) {
      break label$52;
     }
     $3 = $6 + (((Math_imul($10, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($2, 50) | 0) | 0;
     if ((HEAPU8[$3 + 136 | 0] & 12) == 8) {
      break label$51;
     }
    }
    $10 = HEAP32[$4 + 276 >> 2];
    $3 = 1;
    if ($10 >>> 0 > 49) {
     break label$50;
    }
    $7 = HEAP32[$4 + 272 >> 2];
    $3 = 1;
    if ($7 >>> 0 > 2) {
     break label$50;
    }
    HEAP8[($6 + (((Math_imul($7, 125e3) + $8 | 0) + Math_imul($10, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 9;
    $3 = 1;
    break label$50;
   }
   HEAP8[$3 + 136 | 0] = 0;
   $3 = -1;
  }
  HEAP32[$13 + 32 >> 2] = $3 + HEAP32[$8 + 32 >> 2];
  $7 = HEAP32[$4 + 296 >> 2];
  label$53 : {
   if ($7 >>> 0 > 49) {
    break label$53;
   }
   $3 = HEAP32[$4 + 300 >> 2];
   if ($3 >>> 0 > 49) {
    break label$53;
   }
   label$54 : {
    $2 = HEAP32[$4 + 292 >> 2];
    label$55 : {
     if ($2 >>> 0 > 49) {
      break label$55;
     }
     $6 = HEAP32[$4 + 288 >> 2];
     if ($6 >>> 0 > 2) {
      break label$55;
     }
     $2 = $3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0;
     if ((HEAPU8[$2 + 136 | 0] & 12) == 8) {
      break label$54;
     }
    }
    $2 = HEAP32[$4 + 292 >> 2];
    if ($2 >>> 0 > 49) {
     break label$53;
    }
    $6 = HEAP32[$4 + 288 >> 2];
    if ($6 >>> 0 > 2) {
     break label$53;
    }
    HEAP8[($3 + (((Math_imul($6, 125e3) + $8 | 0) + Math_imul($2, 2500) | 0) + Math_imul($7, 50) | 0) | 0) + 136 | 0] = 9;
    break label$53;
   }
   HEAP8[$2 + 136 | 0] = 0;
   $1 = -1;
  }
  HEAP32[$8 + 32 >> 2] = HEAP32[$8 + 32 >> 2] + $1;
  label$56 : {
   if (!$5) {
    break label$56;
   }
   label$57 : {
    $2 = HEAP32[$4 >> 2];
    label$58 : {
     label$59 : {
      if (($2 | 0) == -1) {
       break label$59;
      }
      $1 = HEAP32[$4 + 8 >> 2];
      if ($1 >>> 0 > 49) {
       break label$59;
      }
      $6 = HEAP32[$4 + 12 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$59;
      }
      $3 = HEAP32[$4 + 4 >> 2];
      if ($3 >>> 0 > 49) {
       break label$59;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 16 >> 2];
     label$60 : {
      if (($2 | 0) == -1) {
       break label$60;
      }
      $1 = HEAP32[$4 + 24 >> 2];
      if ($1 >>> 0 > 49) {
       break label$60;
      }
      $6 = HEAP32[$4 + 28 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$60;
      }
      $3 = HEAP32[$4 + 20 >> 2];
      if ($3 >>> 0 > 49) {
       break label$60;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 32 >> 2];
     label$61 : {
      if (($2 | 0) == -1) {
       break label$61;
      }
      $1 = HEAP32[$4 + 40 >> 2];
      if ($1 >>> 0 > 49) {
       break label$61;
      }
      $6 = HEAP32[$4 + 44 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$61;
      }
      $3 = HEAP32[$4 + 36 >> 2];
      if ($3 >>> 0 > 49) {
       break label$61;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 48 >> 2];
     label$62 : {
      if (($2 | 0) == -1) {
       break label$62;
      }
      $1 = HEAP32[$4 + 56 >> 2];
      if ($1 >>> 0 > 49) {
       break label$62;
      }
      $6 = HEAP32[$4 + 60 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$62;
      }
      $3 = HEAP32[$4 + 52 >> 2];
      if ($3 >>> 0 > 49) {
       break label$62;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 64 >> 2];
     label$63 : {
      if (($2 | 0) == -1) {
       break label$63;
      }
      $1 = HEAP32[$4 + 72 >> 2];
      if ($1 >>> 0 > 49) {
       break label$63;
      }
      $6 = HEAP32[$4 + 76 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$63;
      }
      $3 = HEAP32[$4 + 68 >> 2];
      if ($3 >>> 0 > 49) {
       break label$63;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 80 >> 2];
     label$64 : {
      if (($2 | 0) == -1) {
       break label$64;
      }
      $1 = HEAP32[$4 + 88 >> 2];
      if ($1 >>> 0 > 49) {
       break label$64;
      }
      $6 = HEAP32[$4 + 92 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$64;
      }
      $3 = HEAP32[$4 + 84 >> 2];
      if ($3 >>> 0 > 49) {
       break label$64;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 96 >> 2];
     label$65 : {
      if (($2 | 0) == -1) {
       break label$65;
      }
      $1 = HEAP32[$4 + 104 >> 2];
      if ($1 >>> 0 > 49) {
       break label$65;
      }
      $6 = HEAP32[$4 + 108 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$65;
      }
      $3 = HEAP32[$4 + 100 >> 2];
      if ($3 >>> 0 > 49) {
       break label$65;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 112 >> 2];
     label$66 : {
      if (($2 | 0) == -1) {
       break label$66;
      }
      $1 = HEAP32[$4 + 120 >> 2];
      if ($1 >>> 0 > 49) {
       break label$66;
      }
      $6 = HEAP32[$4 + 124 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$66;
      }
      $3 = HEAP32[$4 + 116 >> 2];
      if ($3 >>> 0 > 49) {
       break label$66;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 128 >> 2];
     label$67 : {
      if (($2 | 0) == -1) {
       break label$67;
      }
      $1 = HEAP32[$4 + 136 >> 2];
      if ($1 >>> 0 > 49) {
       break label$67;
      }
      $6 = HEAP32[$4 + 140 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$67;
      }
      $3 = HEAP32[$4 + 132 >> 2];
      if ($3 >>> 0 > 49) {
       break label$67;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 144 >> 2];
     label$68 : {
      if (($2 | 0) == -1) {
       break label$68;
      }
      $1 = HEAP32[$4 + 152 >> 2];
      if ($1 >>> 0 > 49) {
       break label$68;
      }
      $6 = HEAP32[$4 + 156 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$68;
      }
      $3 = HEAP32[$4 + 148 >> 2];
      if ($3 >>> 0 > 49) {
       break label$68;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 160 >> 2];
     label$69 : {
      if (($2 | 0) == -1) {
       break label$69;
      }
      $1 = HEAP32[$4 + 168 >> 2];
      if ($1 >>> 0 > 49) {
       break label$69;
      }
      $6 = HEAP32[$4 + 172 >> 2];
      if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
       break label$69;
      }
      $3 = HEAP32[$4 + 164 >> 2];
      if ($3 >>> 0 > 49) {
       break label$69;
      }
      if ((HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) == 8) {
       break label$58;
      }
     }
     $2 = HEAP32[$4 + 176 >> 2];
     if (($2 | 0) == -1) {
      break label$57;
     }
     $1 = HEAP32[$4 + 184 >> 2];
     if ($1 >>> 0 > 49) {
      break label$57;
     }
     $6 = HEAP32[$4 + 188 >> 2];
     if ($6 >>> 0 > 49 | $2 >>> 0 > 2) {
      break label$57;
     }
     $3 = HEAP32[$4 + 180 >> 2];
     if ($3 >>> 0 > 49 | (HEAPU8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] & 12) != 8) {
      break label$57;
     }
    }
    HEAP8[((((Math_imul($2, 125e3) + $8 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $6 | 0) + 136 | 0] = 10;
    break label$56;
   }
   BuildWorld__search_28int_2c_20int_2c_20bool_2c_20bool_29($8, 9, 10);
  }
  $1 = HEAP32[$8 + 28 >> 2] + ((Math_imul($9, HEAP32[$8 + 12 >> 2]) + $12 | 0) + Math_imul($11, HEAP32[$8 + 24 >> 2]) | 0) | 0;
  HEAP8[$1 | 0] = HEAPU8[$1 | 0] & 254 | $14 ^ 1;
  HEAP8[$8 + 375332 | 0] = 0;
  HEAP16[$8 + 375136 >> 1] = 257;
  BuildWorld__reClacLimits_28_29($8);
  $1 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
  label$70 : {
   if (HEAPU8[$1 + 375332 | 0]) {
    $2 = HEAP32[$1 + 375328 >> 2];
    break label$70;
   }
   $2 = Shape__generate_28BuildWorld_20const__29($1 + 375140 | 0, $1);
   HEAP8[$1 + 375332 | 0] = 1;
   HEAP32[$1 + 375328 >> 2] = $2;
  }
  if (($2 | 0) == 3) {
   HEAP32[$0 + 40 >> 2] = 1065353216;
   HEAP32[$0 + 44 >> 2] = -1110651699;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$8 + 32 >> 2]);
  BuildControlBase__makeBuffers_28_29($0);
  HEAP8[HEAP32[$0 + 4 >> 2] + 360 | 0] = 0;
  if (!HEAPU8[$0 + 16 | 0]) {
   BuildControlBase__choiseMouseMove_28int_2c_20bool_29($0, HEAP32[$0 + 20 >> 2], HEAPU8[$0 + 17 | 0] != 0);
  }
  $2 = 1;
 }
 global$0 = $4 + 304 | 0;
 return $2;
}
function CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $1 = global$0 - 224 | 0;
 global$0 = $1;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 0;
 $5 = $1 + 124 | 0;
 HEAP32[$1 + 128 >> 2] = $5;
 HEAP32[$1 + 120 >> 2] = 0;
 $2 = $1 + 112 | 0;
 HEAP32[$1 + 116 >> 2] = $2;
 HEAP32[$1 + 108 >> 2] = 0;
 $6 = $1 + 100 | 0;
 HEAP32[$1 + 104 >> 2] = $6;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 1065353216;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = 47488;
 HEAP32[$1 + 124 >> 2] = $5;
 HEAP32[$1 + 112 >> 2] = $2;
 HEAP32[$1 + 100 >> 2] = $6;
 $2 = 0;
 while (1) {
  $3 = Math_fround(+($2 | 0) + .125);
  $5 = $2 + 1 | 0;
  $4 = Math_fround(+($5 | 0) + -.125);
  $6 = HEAP32[$0 + 4 >> 2];
  if (HEAPU8[$6 + $2 | 0]) {
   HEAP32[$1 + 60 >> 2] = 1040187392;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAPF32[$1 + 56 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = 1040187392;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = 1063256064;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAPF32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = 1063256064;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
   HEAP32[$1 + 212 >> 2] = 1040187392;
   HEAP32[$1 + 216 >> 2] = 1065353216;
   HEAPF32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = 1040187392;
   HEAP32[$1 + 200 >> 2] = 1065353216;
   HEAPF32[$1 + 192 >> 2] = $4;
   HEAP32[$1 + 180 >> 2] = 1063256064;
   HEAP32[$1 + 184 >> 2] = 1065353216;
   HEAPF32[$1 + 176 >> 2] = $4;
   HEAP32[$1 + 164 >> 2] = 1063256064;
   HEAP32[$1 + 168 >> 2] = 1065353216;
   HEAPF32[$1 + 160 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   $6 = HEAP32[$0 + 4 >> 2];
  }
  $7 = $2 + -1 | 0;
  if (!($7 >>> 0 >= 3 ? !HEAPU8[($2 + $6 | 0) + 5 | 0] : 0)) {
   HEAP32[$1 + 60 >> 2] = 1066401792;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAPF32[$1 + 56 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = 1066401792;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = 1072693248;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAPF32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = 1072693248;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
   HEAP32[$1 + 212 >> 2] = 1066401792;
   HEAP32[$1 + 216 >> 2] = 1065353216;
   HEAPF32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = 1066401792;
   HEAP32[$1 + 200 >> 2] = 1065353216;
   HEAPF32[$1 + 192 >> 2] = $4;
   HEAP32[$1 + 180 >> 2] = 1072693248;
   HEAP32[$1 + 184 >> 2] = 1065353216;
   HEAPF32[$1 + 176 >> 2] = $4;
   HEAP32[$1 + 164 >> 2] = 1072693248;
   HEAP32[$1 + 168 >> 2] = 1065353216;
   HEAPF32[$1 + 160 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   $6 = HEAP32[$0 + 4 >> 2];
  }
  if (!($7 >>> 0 > 2 ? !HEAPU8[($2 + $6 | 0) + 10 | 0] : 0)) {
   HEAP32[$1 + 60 >> 2] = 1074266112;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAPF32[$1 + 56 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = 1074266112;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = 1077411840;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAPF32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = 1077411840;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
   HEAP32[$1 + 212 >> 2] = 1074266112;
   HEAP32[$1 + 216 >> 2] = 1065353216;
   HEAPF32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = 1074266112;
   HEAP32[$1 + 200 >> 2] = 1065353216;
   HEAPF32[$1 + 192 >> 2] = $4;
   HEAP32[$1 + 180 >> 2] = 1077411840;
   HEAP32[$1 + 184 >> 2] = 1065353216;
   HEAPF32[$1 + 176 >> 2] = $4;
   HEAP32[$1 + 164 >> 2] = 1077411840;
   HEAP32[$1 + 168 >> 2] = 1065353216;
   HEAPF32[$1 + 160 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   $6 = HEAP32[$0 + 4 >> 2];
  }
  if (!($7 >>> 0 > 2 ? !HEAPU8[($2 + $6 | 0) + 15 | 0] : 0)) {
   HEAP32[$1 + 60 >> 2] = 1078460416;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAPF32[$1 + 56 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = 1078460416;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = 1081606144;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAPF32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = 1081606144;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
   HEAP32[$1 + 212 >> 2] = 1078460416;
   HEAP32[$1 + 216 >> 2] = 1065353216;
   HEAPF32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = 1078460416;
   HEAP32[$1 + 200 >> 2] = 1065353216;
   HEAPF32[$1 + 192 >> 2] = $4;
   HEAP32[$1 + 180 >> 2] = 1081606144;
   HEAP32[$1 + 184 >> 2] = 1065353216;
   HEAPF32[$1 + 176 >> 2] = $4;
   HEAP32[$1 + 164 >> 2] = 1081606144;
   HEAP32[$1 + 168 >> 2] = 1065353216;
   HEAPF32[$1 + 160 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   $6 = HEAP32[$0 + 4 >> 2];
  }
  if (HEAPU8[($2 + $6 | 0) + 20 | 0]) {
   HEAP32[$1 + 60 >> 2] = 1082392576;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAPF32[$1 + 56 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = 1082392576;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = 1083965440;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAPF32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = 1083965440;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
   HEAP32[$1 + 212 >> 2] = 1082392576;
   HEAP32[$1 + 216 >> 2] = 1065353216;
   HEAPF32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = 1082392576;
   HEAP32[$1 + 200 >> 2] = 1065353216;
   HEAPF32[$1 + 192 >> 2] = $4;
   HEAP32[$1 + 180 >> 2] = 1083965440;
   HEAP32[$1 + 184 >> 2] = 1065353216;
   HEAPF32[$1 + 176 >> 2] = $4;
   HEAP32[$1 + 164 >> 2] = 1083965440;
   HEAP32[$1 + 168 >> 2] = 1065353216;
   HEAPF32[$1 + 160 >> 2] = $3;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
  }
  $2 = $5;
  if (($2 | 0) != 5) {
   continue;
  }
  break;
 }
 $5 = 0;
 while (1) {
  $7 = $5 + -1 | 0;
  $6 = $5 + 1 | 0;
  $3 = Math_fround($6 | 0);
  $16 = +($6 | 0);
  $12 = Math_fround($16 + .125);
  $10 = Math_fround($16 + -.125);
  $2 = 0;
  while (1) {
   $9 = HEAP32[$0 + 4 >> 2];
   $8 = Math_imul($2, 5);
   if (!(($2 + -1 >>> 0 > 2 | $7 >>> 0 > 2 ? !HEAPU8[$9 + ($8 + $5 | 0) | 0] : 0) | ($5 >>> 0 > 2 | $2 + -1 >>> 0 > 2 ? !HEAPU8[$9 + ($6 + $8 | 0) | 0] : 0))) {
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 56 >> 2] = $3;
    $4 = Math_fround(+($2 | 0) + .125);
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = 0;
    $11 = Math_fround(+($2 + 1 | 0) + -.125);
    HEAPF32[$1 + 44 >> 2] = $11;
    HEAPF32[$1 + 40 >> 2] = $3;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $11;
    HEAPF32[$1 + 24 >> 2] = $10;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $4;
    HEAPF32[$1 + 8 >> 2] = $10;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $11;
    HEAPF32[$1 + 192 >> 2] = $3;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $11;
    HEAPF32[$1 + 176 >> 2] = $10;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $4;
    HEAPF32[$1 + 160 >> 2] = $10;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAPF32[$1 + 56 >> 2] = $3;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $11;
    HEAPF32[$1 + 40 >> 2] = $3;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $11;
    HEAPF32[$1 + 24 >> 2] = $12;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $4;
    HEAPF32[$1 + 8 >> 2] = $12;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 1, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $11;
    HEAPF32[$1 + 192 >> 2] = $3;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $11;
    HEAPF32[$1 + 176 >> 2] = $12;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $4;
    HEAPF32[$1 + 160 >> 2] = $12;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 1, 1);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 5) {
    continue;
   }
   break;
  }
  $5 = $6;
  if (($5 | 0) != 4) {
   continue;
  }
  break;
 }
 $5 = 0;
 while (1) {
  $7 = $5 + -1 | 0;
  $8 = Math_imul($5, 5);
  $9 = $8 + 5 | 0;
  $6 = $5 + 1 | 0;
  $3 = Math_fround($6 | 0);
  $16 = +($6 | 0);
  $12 = Math_fround($16 + .125);
  $10 = Math_fround($16 + -.125);
  $2 = 0;
  while (1) {
   $13 = HEAP32[$0 + 4 >> 2];
   if (!(($2 + -1 >>> 0 > 2 | $7 >>> 0 > 2 ? !HEAPU8[$13 + ($2 + $8 | 0) | 0] : 0) | ($5 >>> 0 > 2 | $2 + -1 >>> 0 > 2 ? !HEAPU8[$13 + ($2 + $9 | 0) | 0] : 0))) {
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $3;
    $4 = Math_fround(+($2 | 0) + .125);
    HEAPF32[$1 + 56 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $3;
    $11 = Math_fround(+($2 + 1 | 0) + -.125);
    HEAPF32[$1 + 40 >> 2] = $11;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $10;
    HEAPF32[$1 + 24 >> 2] = $11;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $10;
    HEAPF32[$1 + 8 >> 2] = $4;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 1, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $3;
    HEAPF32[$1 + 208 >> 2] = $4;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $3;
    HEAPF32[$1 + 192 >> 2] = $11;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $10;
    HEAPF32[$1 + 176 >> 2] = $11;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $10;
    HEAPF32[$1 + 160 >> 2] = $4;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 1, 1);
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $3;
    HEAPF32[$1 + 56 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $3;
    HEAPF32[$1 + 40 >> 2] = $11;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $12;
    HEAPF32[$1 + 24 >> 2] = $11;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $12;
    HEAPF32[$1 + 8 >> 2] = $4;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $3;
    HEAPF32[$1 + 208 >> 2] = $4;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $3;
    HEAPF32[$1 + 192 >> 2] = $11;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $12;
    HEAPF32[$1 + 176 >> 2] = $11;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $12;
    HEAPF32[$1 + 160 >> 2] = $4;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 5) {
    continue;
   }
   break;
  }
  $5 = $6;
  if (($5 | 0) != 4) {
   continue;
  }
  break;
 }
 $9 = 1;
 while (1) {
  $8 = $9 + -2 | 0;
  $5 = $9 + -1 | 0;
  $16 = +($9 | 0);
  $11 = Math_fround($16 + -.125);
  $12 = Math_fround($16 + .125);
  $3 = Math_fround($9 | 0);
  $2 = 1;
  while (1) {
   $6 = HEAP32[$0 + 4 >> 2];
   $13 = Math_imul($2, 5);
   label$23 : {
    if ($2 + -1 >>> 0 > 2 | $5 >>> 0 > 2 ? !HEAPU8[$6 + ($13 + $9 | 0) | 0] : 0) {
     break label$23;
    }
    $7 = $2 + -1 | 0;
    if ($8 >>> 0 < 3 & $7 >>> 0 < 3 ? 0 : !HEAPU8[$6 + ($5 + $13 | 0) | 0]) {
     break label$23;
    }
    $13 = Math_imul($7, 5);
    if (($5 | $7) < 0 | ($5 >>> 0 > 2 | $2 + -2 >>> 0 > 2 ? !HEAPU8[$6 + ($13 + $9 | 0) | 0] : 0)) {
     break label$23;
    }
    if ($8 >>> 0 > 2 | $2 + -2 >>> 0 > 2 ? !HEAPU8[$6 + ($5 + $13 | 0) | 0] : 0) {
     break label$23;
    }
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 56 >> 2] = $3;
    $4 = Math_fround($2 | 0);
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $4;
    HEAPF32[$1 + 40 >> 2] = $12;
    HEAP32[$1 + 32 >> 2] = 0;
    $16 = +($2 | 0);
    $10 = Math_fround($16 + .125);
    HEAPF32[$1 + 28 >> 2] = $10;
    HEAPF32[$1 + 24 >> 2] = $12;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $10;
    HEAPF32[$1 + 8 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $4;
    HEAPF32[$1 + 192 >> 2] = $12;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $10;
    HEAPF32[$1 + 176 >> 2] = $12;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $10;
    HEAPF32[$1 + 160 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAPF32[$1 + 56 >> 2] = $3;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $4;
    HEAPF32[$1 + 40 >> 2] = $11;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $10;
    HEAPF32[$1 + 24 >> 2] = $11;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $10;
    HEAPF32[$1 + 8 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 1, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $4;
    HEAPF32[$1 + 192 >> 2] = $11;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $10;
    HEAPF32[$1 + 176 >> 2] = $11;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $10;
    HEAPF32[$1 + 160 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 1, 1);
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAPF32[$1 + 56 >> 2] = $3;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $4;
    HEAPF32[$1 + 40 >> 2] = $12;
    HEAP32[$1 + 32 >> 2] = 0;
    $10 = Math_fround($16 + -.125);
    HEAPF32[$1 + 28 >> 2] = $10;
    HEAPF32[$1 + 24 >> 2] = $12;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $10;
    HEAPF32[$1 + 8 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 1, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $4;
    HEAPF32[$1 + 192 >> 2] = $12;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $10;
    HEAPF32[$1 + 176 >> 2] = $12;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $10;
    HEAPF32[$1 + 160 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 1, 1);
    HEAP32[$1 + 64 >> 2] = 0;
    HEAPF32[$1 + 60 >> 2] = $4;
    HEAPF32[$1 + 56 >> 2] = $3;
    HEAP32[$1 + 48 >> 2] = 0;
    HEAPF32[$1 + 44 >> 2] = $4;
    HEAPF32[$1 + 40 >> 2] = $11;
    HEAP32[$1 + 32 >> 2] = 0;
    HEAPF32[$1 + 28 >> 2] = $10;
    HEAPF32[$1 + 24 >> 2] = $11;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAPF32[$1 + 12 >> 2] = $10;
    HEAPF32[$1 + 8 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 8 | 0, $1 + 24 | 0, $1 + 40 | 0, $1 + 56 | 0, 0, 1);
    HEAP32[$1 + 216 >> 2] = 1065353216;
    HEAPF32[$1 + 212 >> 2] = $4;
    HEAPF32[$1 + 208 >> 2] = $3;
    HEAP32[$1 + 200 >> 2] = 1065353216;
    HEAPF32[$1 + 196 >> 2] = $4;
    HEAPF32[$1 + 192 >> 2] = $11;
    HEAP32[$1 + 184 >> 2] = 1065353216;
    HEAPF32[$1 + 180 >> 2] = $10;
    HEAPF32[$1 + 176 >> 2] = $11;
    HEAP32[$1 + 168 >> 2] = 1065353216;
    HEAPF32[$1 + 164 >> 2] = $10;
    HEAPF32[$1 + 160 >> 2] = $3;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1 + 72 | 0, $1 + 208 | 0, $1 + 192 | 0, $1 + 176 | 0, $1 + 160 | 0, 0, 1);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 5) {
    continue;
   }
   break;
  }
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 5) {
   continue;
  }
  break;
 }
 $9 = 0;
 while (1) {
  $19 = $9 + -2 | 0;
  $13 = $9 + -1 | 0;
  $2 = 0;
  while (1) {
   $6 = 0;
   $8 = ($2 | 0) == 5;
   $15 = $8 | $13 >>> 0 > 4;
   $7 = 0;
   label$30 : {
    if ($15) {
     break label$30;
    }
    $7 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + ($13 + Math_imul($2, 5) | 0) | 0]) {
     break label$30;
    }
    $7 = $19 >>> 0 < 3 & $2 + -1 >>> 0 < 3;
   }
   $5 = $8;
   $8 = $9 >>> 0 > 4;
   $17 = $5 | $8;
   label$31 : {
    if ($17) {
     break label$31;
    }
    $6 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + (Math_imul($2, 5) + $9 | 0) | 0]) {
     break label$31;
    }
    $6 = $13 >>> 0 < 3 & $2 + -1 >>> 0 < 3;
   }
   $14 = $2 + -1 | 0;
   $8 = $8 | $14 >>> 0 > 4;
   $5 = 0;
   label$32 : {
    if ($8) {
     break label$32;
    }
    $5 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + (Math_imul($14, 5) + $9 | 0) | 0]) {
     break label$32;
    }
    $5 = $13 >>> 0 < 3 & $2 + -2 >>> 0 < 3;
   }
   HEAP32[$1 + 212 >> 2] = $2;
   HEAP32[$1 + 208 >> 2] = $9;
   HEAP8[$1 + 216 | 0] = $6;
   if (($6 ^ $7) == 1) {
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($1 + 208 | 0, $1 + 72 | 0, 0);
   }
   if (($5 ^ $6) == 1) {
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($1 + 208 | 0, $1 + 72 | 0, 1);
   }
   $5 = 0;
   $7 = 0;
   label$35 : {
    if (($13 | $14) < 0) {
     break label$35;
    }
    $7 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + ($13 + Math_imul($14, 5) | 0) | 0]) {
     break label$35;
    }
    $7 = $19 >>> 0 < 3 & $2 + -2 >>> 0 < 3;
   }
   label$36 : {
    if ($8) {
     break label$36;
    }
    $5 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + (Math_imul($14, 5) + $9 | 0) | 0]) {
     break label$36;
    }
    $5 = $13 >>> 0 < 3 & $2 + -2 >>> 0 < 3;
   }
   $6 = 0;
   $8 = 0;
   label$37 : {
    if ($15) {
     break label$37;
    }
    $8 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + ($13 + Math_imul($2, 5) | 0) | 0]) {
     break label$37;
    }
    $8 = $19 >>> 0 < 3 & $14 >>> 0 < 3;
   }
   label$38 : {
    if ($17) {
     break label$38;
    }
    $6 = 1;
    if (HEAPU8[HEAP32[$0 + 4 >> 2] + (Math_imul($2, 5) + $9 | 0) | 0]) {
     break label$38;
    }
    $6 = $13 >>> 0 < 3 & $14 >>> 0 < 3;
   }
   HEAP8[$1 + 200 | 0] = $7;
   HEAP32[$1 + 196 >> 2] = $2;
   HEAP32[$1 + 192 >> 2] = $9;
   $15 = $5 ^ 1;
   $18 = $15 | $7;
   $20 = $18 | $8;
   $14 = $6 ^ 1;
   label$39 : {
    if (!($14 ? 0 : !$20)) {
     $17 = $7 ^ 1;
     if ($17 | $5 | $8 ^ 1 | $6) {
      break label$39;
     }
    }
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda0__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($1 + 192 | 0, $1 + 72 | 0, 0);
    $17 = $7 ^ 1;
   }
   $21 = $15 | $17;
   $22 = $8 | $21;
   label$41 : {
    if (($22 | $6) == 1) {
     $15 = $8 ^ 1;
     if ($14 | ($15 | ($5 | $7))) {
      break label$41;
     }
    }
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda0__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($1 + 192 | 0, $1 + 72 | 0, 1);
    $15 = $8 ^ 1;
   }
   HEAP32[$1 + 180 >> 2] = $2;
   HEAP32[$1 + 176 >> 2] = $9;
   label$43 : {
    if (($14 | ($15 | $18)) == 1) {
     $18 = $5 | $17;
     if ($8 | $18 | $6) {
      break label$43;
     }
    }
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29__operator_28_29_28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($1 + 176 | 0, $1 + 72 | 0, 0, -1, -1, $7);
    $18 = $5 | $17;
   }
   if (!($6 | $20 ? ($14 | ($15 | $18)) == 1 : 0)) {
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29__operator_28_29_28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($1 + 176 | 0, $1 + 72 | 0, 1, 1, -1, $5);
   }
   if (!($5 | $7 | $15 | $6 ? ($14 | $22) == 1 : 0)) {
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29__operator_28_29_28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($1 + 176 | 0, $1 + 72 | 0, 1, -1, 1, $8);
   }
   if (!($14 | ($8 | ($5 | $7)) ? ($15 | $21 | $6) == 1 : 0)) {
    CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29__operator_28_29_28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($1 + 176 | 0, $1 + 72 | 0, 0, 1, 1, $6);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 6) {
    continue;
   }
   break;
  }
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 6) {
   continue;
  }
  break;
 }
 MyObject__vectorify_28_29($1 + 72 | 0);
 if (HEAP32[$1 + 92 >> 2] >= 1) {
  $6 = 0;
  $2 = HEAP32[$1 + 80 >> 2];
  while (1) {
   $7 = $6 << 2;
   $5 = HEAP32[$7 + $2 >> 2];
   $3 = HEAPF32[$5 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 >> 2];
   HEAPF32[$5 >> 2] = Math_fround(1) - $3;
   $2 = HEAP32[$1 + 80 >> 2];
   $5 = HEAP32[$7 + $2 >> 2];
   $3 = HEAPF32[$5 + 20 >> 2];
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 12 >> 2];
   HEAPF32[$5 + 12 >> 2] = -$3;
   $6 = $6 + 1 | 0;
   if (($6 | 0) < HEAP32[$1 + 92 >> 2]) {
    continue;
   }
   break;
  }
 }
 MyObject__clacNormalsExceptTouched_28_29($1 + 72 | 0);
 MyObject__toMesh_28Mesh__2c_20bool_29($1 + 72 | 0, HEAP32[$0 >> 2], 0);
 MyObject___MyObject_28_29($1 + 72 | 0);
 global$0 = $1 + 224 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 528 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 102)) {
   break label$1;
  }
  $5 = 1;
  $4 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $4 >>> 0 > 0) {
   $2 = HEAP8[$4 | 0];
  } else {
   $2 = 0;
  }
  $4 = $2 << 24 >> 24;
  label$2 : {
   if (($4 | 0) == 76) {
    break label$2;
   }
   $2 = $4 & 255;
   if (($2 | 0) != 114) {
    if (($2 | 0) == 108) {
     break label$2;
    }
    if (($2 | 0) != 82) {
     break label$1;
    }
   }
   $5 = 0;
  }
  HEAP8[$1 + 527 | 0] = $5;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  $5 = $1 + 512 | 0;
  $2 = $5;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 504 | 0, 36264);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 240 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 244 >> 2] = $3;
  label$6 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 240 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35139);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 488 | 0, 36267);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 232 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 236 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 232 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35142);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 480 | 0, 36270);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 224 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 228 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 224 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35144);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 472 | 0, 36273);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 216 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 220 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 216 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35147);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 464 | 0, 36276);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 208 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 212 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 208 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35170);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 456 | 0, 36279);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 200 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 204 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 200 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35189);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 448 | 0, 36282);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 192 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 196 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 192 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35194);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 440 | 0, 36285);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 184 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 188 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 184 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35196);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 432 | 0, 36288);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 176 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 180 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 176 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35199);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 424 | 0, 36291);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 168 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 172 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 168 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35201);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 416 | 0, 36294);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 160 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 164 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 160 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35204);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 408 | 0, 36297);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 152 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 156 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 152 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35207);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 400 | 0, 36300);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 144 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 148 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 144 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35210);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 392 | 0, 36303);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 136 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 140 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 136 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35212);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 384 | 0, 36306);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 128 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 132 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 128 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35215);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 376 | 0, 36309);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 120 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 124 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 120 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35218);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 368 | 0, 36312);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 112 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 116 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 112 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35222);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 360 | 0, 36315);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 104 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 108 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 104 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35224);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 352 | 0, 36318);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 96 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 100 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 96 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35226);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 344 | 0, 36321);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 88 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 92 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 88 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35187);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 336 | 0, 36324);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 80 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 84 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 80 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35229);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 328 | 0, 36327);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 72 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 76 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 72 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35235);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 320 | 0, 36330);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 64 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 68 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 - -64 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35251);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 312 | 0, 36333);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 60 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 56 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35254);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 304 | 0, 36336);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 52 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35256);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 296 | 0, 36339);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 44 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35263);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 288 | 0, 36342);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 36 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35265);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 280 | 0, 36345);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 28 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35291);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 272 | 0, 36348);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 20 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35293);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 264 | 0, 36351);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 12 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35296);
    break label$6;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 256 | 0, 36354);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
    break label$1;
   }
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 35299);
  }
  $2 = HEAP32[$1 + 500 >> 2];
  HEAP32[$1 + 512 >> 2] = HEAP32[$1 + 496 >> 2];
  HEAP32[$1 + 516 >> 2] = $2;
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 496 >> 2] = $2;
  HEAP32[$1 + 252 >> 2] = 0;
  if (!$2) {
   break label$1;
  }
  label$37 : {
   if (($4 & 255) != 76 ? ($4 | 0) != 82 : 0) {
    break label$37;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   HEAP32[$1 + 252 >> 2] = $4;
   if (!$4) {
    break label$1;
   }
   if (!HEAPU8[$1 + 527 | 0]) {
    break label$37;
   }
   $4 = HEAP32[$1 + 496 >> 2];
   HEAP32[$1 + 496 >> 2] = HEAP32[$1 + 252 >> 2];
   HEAP32[$1 + 252 >> 2] = $4;
  }
  $6 = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 527 | 0, $5, $1 + 496 | 0, $1 + 252 | 0);
 }
 global$0 = $1 + 528 | 0;
 return $6;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $11 = global$0 - 560 | 0;
 global$0 = $11;
 HEAP32[$11 + 548 >> 2] = $10;
 HEAP32[$11 + 552 >> 2] = $1;
 HEAP32[$11 + 96 >> 2] = 270;
 $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 96 | 0);
 $1 = HEAP32[$14 >> 2];
 HEAP32[$11 + 132 >> 2] = $1;
 HEAP32[$11 + 128 >> 2] = $1 + 400;
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 96 | 0);
 $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 80 | 0);
 $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 - -64 | 0);
 $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 48 | 0);
 $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 32 | 0);
 std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 116 | 0, $11 + 112 | 0, $17, $15, $12, $13, $11 + 28 | 0);
 HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
 $19 = $4 & 512;
 $1 = 0;
 $4 = 0;
 while (1) {
  $10 = $4;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($1 | 0) == 4) {
      break label$4;
     }
     if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
      break label$4;
     }
     label$5 : {
      label$6 : {
       $2 = HEAP8[($11 + 120 | 0) + $1 | 0];
       label$7 : {
        if ($2 >>> 0 > 4) {
         break label$7;
        }
        $4 = 0;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            switch ($2 - 1 | 0) {
            case 0:
             if (($1 | 0) == 3) {
              break label$7;
             }
             $2 = $7;
             $4 = HEAP32[$0 >> 2];
             $3 = HEAP32[$4 + 12 >> 2];
             label$13 : {
              if (($3 | 0) == HEAP32[$4 + 16 >> 2]) {
               $3 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
               break label$13;
              }
              $3 = HEAP32[$3 >> 2];
             }
             if (FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($2, 8192, $3)) {
              std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0);
              std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, HEAP32[$11 + 16 >> 2]);
              break label$10;
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break label$3;
            case 3:
             break label$5;
            case 1:
             break label$8;
            case 2:
             break label$9;
            default:
             break label$11;
            }
           }
           if (($1 | 0) == 3) {
            break label$7;
           }
          }
          while (1) {
           if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
            break label$7;
           }
           $2 = $7;
           $4 = HEAP32[$0 >> 2];
           $3 = HEAP32[$4 + 12 >> 2];
           label$17 : {
            if (($3 | 0) == HEAP32[$4 + 16 >> 2]) {
             $3 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
             break label$17;
            }
            $3 = HEAP32[$3 >> 2];
           }
           if (!FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($2, 8192, $3)) {
            break label$7;
           }
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0);
           std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, HEAP32[$11 + 16 >> 2]);
           continue;
          }
         }
         if (HEAP8[$12 + 11 | 0] < 0) {
          $2 = HEAP32[$12 + 4 >> 2];
         } else {
          $2 = HEAPU8[$12 + 11 | 0];
         }
         if (HEAP8[$13 + 11 | 0] < 0) {
          $3 = HEAP32[$13 + 4 >> 2];
         } else {
          $3 = HEAPU8[$13 + 11 | 0];
         }
         if (($2 | 0) == (0 - $3 | 0)) {
          break label$7;
         }
         if (HEAP8[$12 + 11 | 0] < 0) {
          $2 = HEAP32[$12 + 4 >> 2];
         } else {
          $2 = HEAPU8[$12 + 11 | 0];
         }
         if (HEAP8[$13 + 11 | 0] < 0) {
          $3 = HEAP32[$13 + 4 >> 2];
         } else {
          $3 = HEAPU8[$13 + 11 | 0];
         }
         if (!($3 ? $2 : 0)) {
          if (HEAP8[$12 + 11 | 0] < 0) {
           $3 = HEAP32[$12 + 4 >> 2];
          } else {
           $3 = HEAPU8[$12 + 11 | 0];
          }
          $4 = HEAP32[$0 >> 2];
          $2 = HEAP32[$4 + 12 >> 2];
          label$31 : {
           if (($2 | 0) == HEAP32[$4 + 16 >> 2]) {
            $2 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
            break label$31;
           }
           $2 = HEAP32[$2 >> 2];
          }
          if ($3) {
           if (HEAP8[$12 + 11 | 0] < 0) {
            $3 = HEAP32[$12 >> 2];
           } else {
            $3 = $12;
           }
           if (($2 | 0) == HEAP32[$3 >> 2]) {
            std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
            $2 = $12;
            $3 = $2;
            if (HEAP8[$2 + 11 | 0] < 0) {
             $2 = HEAP32[$12 + 4 >> 2];
            } else {
             $2 = HEAPU8[$12 + 11 | 0];
            }
            $4 = $2 >>> 0 > 1 ? $3 : $10;
            break label$2;
           }
           HEAP8[$6 | 0] = 1;
           break label$7;
          }
          if (HEAP8[$13 + 11 | 0] < 0) {
           $3 = HEAP32[$13 >> 2];
          } else {
           $3 = $13;
          }
          if (HEAP32[$3 >> 2] != ($2 | 0)) {
           break label$7;
          }
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
          HEAP8[$6 | 0] = 1;
          $2 = $13;
          $3 = $2;
          if (HEAP8[$2 + 11 | 0] < 0) {
           $2 = HEAP32[$13 + 4 >> 2];
          } else {
           $2 = HEAPU8[$13 + 11 | 0];
          }
          $4 = $2 >>> 0 > 1 ? $3 : $10;
          break label$2;
         }
         $3 = HEAP32[$0 >> 2];
         $2 = HEAP32[$3 + 12 >> 2];
         label$43 : {
          if (($2 | 0) == HEAP32[$3 + 16 >> 2]) {
           $2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
           break label$43;
          }
          $2 = HEAP32[$2 >> 2];
         }
         if (HEAP8[$12 + 11 | 0] < 0) {
          $3 = HEAP32[$12 >> 2];
         } else {
          $3 = $12;
         }
         if (($2 | 0) == HEAP32[$3 >> 2]) {
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
          $2 = $12;
          $3 = $2;
          if (HEAP8[$2 + 11 | 0] < 0) {
           $2 = HEAP32[$12 + 4 >> 2];
          } else {
           $2 = HEAPU8[$12 + 11 | 0];
          }
          $4 = $2 >>> 0 > 1 ? $3 : $10;
          break label$2;
         }
         $3 = HEAP32[$0 >> 2];
         $2 = HEAP32[$3 + 12 >> 2];
         label$50 : {
          if (($2 | 0) == HEAP32[$3 + 16 >> 2]) {
           $2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
           break label$50;
          }
          $2 = HEAP32[$2 >> 2];
         }
         if (HEAP8[$13 + 11 | 0] < 0) {
          $3 = HEAP32[$13 >> 2];
         } else {
          $3 = $13;
         }
         if (($2 | 0) == HEAP32[$3 >> 2]) {
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
          HEAP8[$6 | 0] = 1;
          $2 = $13;
          $3 = $2;
          if (HEAP8[$2 + 11 | 0] < 0) {
           $2 = HEAP32[$13 + 4 >> 2];
          } else {
           $2 = HEAPU8[$13 + 11 | 0];
          }
          $4 = $2 >>> 0 > 1 ? $3 : $10;
          break label$2;
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$3;
        }
        if (!($19 | ($10 | $1 >>> 0 < 2))) {
         if (!(($1 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
          break label$2;
         }
        }
        HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
        HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 8 >> 2];
        label$58 : {
         if (!$1 | HEAPU8[($1 + $11 | 0) + 119 | 0] > 1) {
          break label$58;
         }
         while (1) {
          label$60 : {
           HEAP32[$11 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($15);
           if (!!(HEAP32[$11 + 16 >> 2] == HEAP32[$11 + 8 >> 2])) {
            break label$60;
           }
           if (!FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($7, 8192, HEAP32[HEAP32[$11 + 16 >> 2] >> 2])) {
            break label$60;
           }
           HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 16 >> 2] + 4;
           continue;
          }
          break;
         }
         HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
         $3 = HEAP32[$11 + 16 >> 2] - HEAP32[$11 + 8 >> 2] >> 2;
         $2 = $3;
         if (HEAP8[$16 + 11 | 0] < 0) {
          $4 = HEAP32[$16 + 4 >> 2];
         } else {
          $4 = HEAPU8[$16 + 11 | 0];
         }
         if ($2 >>> 0 <= $4 >>> 0) {
          HEAP32[$11 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16);
          if (bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29(std____2____wrap_iter_wchar_t____operator__28long_29_20const($11 + 8 | 0, 0 - $3 | 0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15))) {
           break label$58;
          }
         }
         HEAP32[$11 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
         HEAP32[$11 + 8 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 8 >> 2];
        }
        HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 16 >> 2];
        while (1) {
         label$65 : {
          HEAP32[$11 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($15);
          if (!!(HEAP32[$11 + 8 >> 2] == HEAP32[$11 >> 2])) {
           break label$65;
          }
          if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
           break label$65;
          }
          $3 = HEAP32[$0 >> 2];
          $2 = HEAP32[$3 + 12 >> 2];
          label$66 : {
           if (($2 | 0) == HEAP32[$3 + 16 >> 2]) {
            $2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
            break label$66;
           }
           $2 = HEAP32[$2 >> 2];
          }
          if (($2 | 0) != HEAP32[HEAP32[$11 + 8 >> 2] >> 2]) {
           break label$65;
          }
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
          HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 8 >> 2] + 4;
          continue;
         }
         break;
        }
        if (!$19) {
         break label$7;
        }
        HEAP32[$11 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($15);
        if (!(HEAP32[$11 + 8 >> 2] == HEAP32[$11 >> 2])) {
         break label$6;
        }
       }
       $4 = $10;
       break label$2;
      }
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break label$3;
     }
     while (1) {
      label$69 : {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
        break label$69;
       }
       $18 = $7;
       $2 = HEAP32[$0 >> 2];
       $3 = HEAP32[$2 + 12 >> 2];
       label$71 : {
        if (($3 | 0) == HEAP32[$2 + 16 >> 2]) {
         $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
         break label$71;
        }
        $2 = HEAP32[$3 >> 2];
       }
       label$70 : {
        if (FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($18, 2048, $2)) {
         $3 = HEAP32[$9 >> 2];
         if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
          void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $11 + 548 | 0);
          $3 = HEAP32[$9 >> 2];
         }
         HEAP32[$9 >> 2] = $3 + 4;
         HEAP32[$3 >> 2] = $2;
         $4 = $4 + 1 | 0;
         break label$70;
        }
        $3 = !$4;
        if (HEAP8[$17 + 11 | 0] < 0) {
         $18 = HEAP32[$17 + 4 >> 2];
        } else {
         $18 = HEAPU8[$17 + 11 | 0];
        }
        if ($3 | !$18 | ($2 | 0) != HEAP32[$11 + 112 >> 2]) {
         break label$69;
        }
        $2 = HEAP32[$11 + 132 >> 2];
        if (($2 | 0) == HEAP32[$11 + 128 >> 2]) {
         void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($14, $11 + 132 | 0, $11 + 128 | 0);
         $2 = HEAP32[$11 + 132 >> 2];
        }
        HEAP32[$11 + 132 >> 2] = $2 + 4;
        HEAP32[$2 >> 2] = $4;
        $4 = 0;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
       continue;
      }
      break;
     }
     $3 = HEAP32[$14 >> 2];
     label$78 : {
      if (!$4) {
       break label$78;
      }
      $2 = HEAP32[$11 + 132 >> 2];
      if (($3 | 0) == ($2 | 0)) {
       break label$78;
      }
      if (HEAP32[$11 + 128 >> 2] == ($2 | 0)) {
       void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($14, $11 + 132 | 0, $11 + 128 | 0);
       $2 = HEAP32[$11 + 132 >> 2];
      }
      HEAP32[$11 + 132 >> 2] = $2 + 4;
      HEAP32[$2 >> 2] = $4;
     }
     label$80 : {
      if (HEAP32[$11 + 28 >> 2] < 1) {
       break label$80;
      }
      label$81 : {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
        $3 = HEAP32[$0 >> 2];
        $2 = HEAP32[$3 + 12 >> 2];
        label$83 : {
         if (($2 | 0) == HEAP32[$3 + 16 >> 2]) {
          $2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
          break label$83;
         }
         $2 = HEAP32[$2 >> 2];
        }
        if (($2 | 0) == HEAP32[$11 + 116 >> 2]) {
         break label$81;
        }
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$3;
      }
      while (1) {
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
       if (HEAP32[$11 + 28 >> 2] < 1) {
        break label$80;
       }
       label$86 : {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
         $2 = $7;
         $4 = HEAP32[$0 >> 2];
         $3 = HEAP32[$4 + 12 >> 2];
         label$88 : {
          if (($3 | 0) == HEAP32[$4 + 16 >> 2]) {
           $3 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
           break label$88;
          }
          $3 = HEAP32[$3 >> 2];
         }
         if (FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($2, 2048, $3)) {
          break label$86;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$3;
       }
       if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
        void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $11 + 548 | 0);
       }
       $3 = HEAP32[$0 >> 2];
       $2 = HEAP32[$3 + 12 >> 2];
       label$91 : {
        if (($2 | 0) == HEAP32[$3 + 16 >> 2]) {
         $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
         break label$91;
        }
        $3 = HEAP32[$2 >> 2];
       }
       $2 = HEAP32[$9 >> 2];
       HEAP32[$9 >> 2] = $2 + 4;
       HEAP32[$2 >> 2] = $3;
       HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + -1;
       continue;
      }
     }
     $4 = $10;
     if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
      break label$2;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     $0 = 0;
     break label$3;
    }
    label$93 : {
     if (!$10) {
      break label$93;
     }
     $4 = 1;
     while (1) {
      $1 = $4;
      if (HEAP8[$10 + 11 | 0] < 0) {
       $2 = HEAP32[$10 + 4 >> 2];
      } else {
       $2 = HEAPU8[$10 + 11 | 0];
      }
      if ($1 >>> 0 >= $2 >>> 0) {
       break label$93;
      }
      label$97 : {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
        $2 = HEAP32[$0 >> 2];
        $1 = HEAP32[$2 + 12 >> 2];
        label$99 : {
         if (($1 | 0) == HEAP32[$2 + 16 >> 2]) {
          $1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
          break label$99;
         }
         $1 = HEAP32[$1 >> 2];
        }
        if (HEAP8[$10 + 11 | 0] < 0) {
         $2 = HEAP32[$10 >> 2];
        } else {
         $2 = $10;
        }
        if (($1 | 0) == HEAP32[$2 + ($4 << 2) >> 2]) {
         break label$97;
        }
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$3;
      }
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
      $4 = $4 + 1 | 0;
      continue;
     }
    }
    $0 = 1;
    if (HEAP32[$14 >> 2] == HEAP32[$11 + 132 >> 2]) {
     break label$3;
    }
    $0 = 0;
    HEAP32[$11 + 16 >> 2] = 0;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, HEAP32[$14 >> 2], HEAP32[$11 + 132 >> 2], $11 + 16 | 0);
    if (HEAP32[$11 + 16 >> 2]) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     break label$3;
    }
    $0 = 1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($15);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
   $1 = HEAP32[$14 >> 2];
   HEAP32[$14 >> 2] = 0;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$14 + 4 >> 2]]($1);
   }
   global$0 = $11 + 560 | 0;
   return $0;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}
function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 $13 = global$0 - 192 | 0;
 global$0 = $13;
 $28 = $7;
 $31 = $8 & 65535;
 $22 = $3;
 $17 = $4 & 65535;
 $29 = ($4 ^ $8) & -2147483648;
 $11 = $8 >>> 16 & 32767;
 label$1 : {
  $14 = $4 >>> 16 & 32767;
  label$2 : {
   label$3 : {
    if ($11 + -1 >>> 0 < 32766 ? $14 + -1 >>> 0 <= 32765 : 0) {
     break label$3;
    }
    $12 = $4 & 2147483647;
    $10 = $12;
    $9 = $3;
    if (!(!$9 & ($10 | 0) == 2147418112 ? !($1 | $2) : ($10 | 0) == 2147418112 & $9 >>> 0 < 0 | $10 >>> 0 < 2147418112)) {
     $34 = $3;
     $29 = $4 | 32768;
     break label$2;
    }
    $12 = $8 & 2147483647;
    $4 = $12;
    $3 = $7;
    if (!(!$3 & ($4 | 0) == 2147418112 ? !($5 | $6) : ($4 | 0) == 2147418112 & $3 >>> 0 < 0 | $4 >>> 0 < 2147418112)) {
     $34 = $7;
     $29 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break label$2;
    }
    if (!($1 | $9 | ($10 ^ 2147418112 | $2))) {
     if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      $29 = 2147450880;
      break label$2;
     }
     $29 = $29 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($1 | $9 | ($2 | $10))) {
     break label$1;
    }
    if (!($3 | $5 | ($4 | $6))) {
     $29 = $29 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (($10 | 0) == 65535 & $9 >>> 0 <= 4294967295 | $10 >>> 0 < 65535) {
     $9 = $1;
     $7 = !($17 | $22);
     $8 = $7 << 6;
     $10 = Math_clz32($7 ? $1 : $22) + 32 | 0;
     $1 = Math_clz32($7 ? $2 : $17);
     $1 = $8 + (($1 | 0) == 32 ? $10 : $1) | 0;
     __ashlti3($13 + 176 | 0, $9, $2, $22, $17, $1 + -15 | 0);
     $32 = 16 - $1 | 0;
     $22 = HEAP32[$13 + 184 >> 2];
     $17 = HEAP32[$13 + 188 >> 2];
     $2 = HEAP32[$13 + 180 >> 2];
     $1 = HEAP32[$13 + 176 >> 2];
    }
    if (($4 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4 >>> 0 > 65535) {
     break label$3;
    }
    $3 = !($28 | $31);
    $4 = $3 << 6;
    $7 = Math_clz32($3 ? $5 : $28) + 32 | 0;
    $3 = Math_clz32($3 ? $6 : $31);
    $3 = $4 + (($3 | 0) == 32 ? $7 : $3) | 0;
    __ashlti3($13 + 160 | 0, $5, $6, $28, $31, $3 + -15 | 0);
    $32 = ($3 + $32 | 0) + -16 | 0;
    $28 = HEAP32[$13 + 168 >> 2];
    $31 = HEAP32[$13 + 172 >> 2];
    $5 = HEAP32[$13 + 160 >> 2];
    $6 = HEAP32[$13 + 164 >> 2];
   }
   $4 = $31 | 65536;
   $35 = $4;
   $40 = $28;
   $3 = $28;
   $10 = $4 << 15 | $3 >>> 17;
   $3 = $3 << 15 | $6 >>> 17;
   $7 = -102865788 - $3 | 0;
   $4 = $10;
   $9 = $10;
   $8 = 1963258675 - ($9 + (4192101508 < $3 >>> 0) | 0) | 0;
   __multi3($13 + 144 | 0, $3, $9, $7, $8);
   $9 = HEAP32[$13 + 152 >> 2];
   __multi3($13 + 128 | 0, 0 - $9 | 0, 0 - (HEAP32[$13 + 156 >> 2] + (0 < $9 >>> 0) | 0) | 0, $7, $8);
   $7 = HEAP32[$13 + 136 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 132 >> 2] >>> 31;
   $7 = HEAP32[$13 + 140 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 112 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 120 >> 2];
   __multi3($13 + 96 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 124 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 104 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 100 >> 2] >>> 31;
   $7 = HEAP32[$13 + 108 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 80 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 88 >> 2];
   __multi3($13 - -64 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 92 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 72 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 68 >> 2] >>> 31;
   $7 = HEAP32[$13 + 76 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 48 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 56 >> 2];
   __multi3($13 + 32 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 60 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 40 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 36 >> 2] >>> 31;
   $7 = HEAP32[$13 + 44 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 16 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 24 >> 2];
   __multi3($13, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 28 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $32 = ($14 - $11 | 0) + $32 | 0;
   $7 = HEAP32[$13 + 8 >> 2];
   $9 = HEAP32[$13 + 12 >> 2] << 1 | $7 >>> 31;
   $8 = $7 << 1;
   $10 = $9 + -1 | 0;
   $8 = (HEAP32[$13 + 4 >> 2] >>> 31 | $8) + -1 | 0;
   if ($8 >>> 0 < 4294967295) {
    $10 = $10 + 1 | 0;
   }
   $9 = 0;
   $23 = $9;
   $7 = $8;
   $20 = $4;
   $16 = __wasm_i64_mul($7, $9, $4, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $15 = $4;
   $18 = $10;
   $8 = 0;
   $14 = $3;
   $10 = __wasm_i64_mul($10, $8, $3, 0);
   $3 = $10 + $16 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $4 | 0;
   $12 = $3;
   $3 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $12;
   $14 = __wasm_i64_mul($7, $23, $14, $21);
   $4 = 0 + $14 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $9 = $4 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $4;
   $4 = $9;
   $25 = ($10 | 0) == ($9 | 0) & $14 >>> 0 < $25 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $9 = __wasm_i64_mul($18, $8, $20, $19);
   $10 = ($3 | 0) == ($15 | 0) & $10 >>> 0 < $16 >>> 0 | $3 >>> 0 < $15 >>> 0;
   $12 = $3;
   $3 = $9 + $3 | 0;
   $11 = $10 + i64toi32_i32$HIGH_BITS | 0;
   $11 = $3 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
   $10 = $3;
   $3 = $25 + $10 | 0;
   $9 = $11;
   $26 = $3;
   $3 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = $6;
   $30 = ($9 & 131071) << 15 | $5 >>> 17;
   $15 = __wasm_i64_mul($7, $23, $30, 0);
   $9 = i64toi32_i32$HIGH_BITS;
   $25 = $9;
   $12 = $5;
   $21 = $12 << 15 & -32768;
   $11 = __wasm_i64_mul($18, $8, $21, 0);
   $12 = $11 + $15 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $10 = $12 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $9 = $12;
   $20 = 0;
   $11 = $9;
   $24 = __wasm_i64_mul($7, $23, $21, $24);
   $21 = $24 + $20 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $21 >>> 0 < $24 >>> 0 ? $9 + 1 | 0 : $9;
   $16 = ($9 | 0) == ($11 | 0) & $21 >>> 0 < $20 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $12 = __wasm_i64_mul($18, $8, $30, $27);
   $9 = ($10 | 0) == ($25 | 0) & $11 >>> 0 < $15 >>> 0 | $10 >>> 0 < $25 >>> 0;
   $19 = $10;
   $12 = $12 + $10 | 0;
   $11 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $10 = $12;
   $9 = $16 + $10 | 0;
   $12 = $10 >>> 0 < $19 >>> 0 ? $11 + 1 | 0 : $11;
   $12 = $9 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $9;
   $10 = $14 + $9 | 0;
   $9 = $12 + $4 | 0;
   $9 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $19 = $10;
   $10 = $3;
   $16 = $9;
   $3 = ($4 | 0) == ($9 | 0) & $19 >>> 0 < $14 >>> 0 | $9 >>> 0 < $4 >>> 0;
   $4 = $3 + $26 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $9 = $10;
   $3 = ($19 | 0) != 0 | ($16 | 0) != 0;
   $4 = $4 + $3 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = 0 - $4 | 0;
   $4 = 0 - ((0 < $4 >>> 0) + $9 | 0) | 0;
   $9 = $3;
   $15 = 0;
   $14 = __wasm_i64_mul($9, $15, $7, $23);
   $10 = i64toi32_i32$HIGH_BITS;
   $25 = $10;
   $11 = $10;
   $20 = __wasm_i64_mul($18, $8, $9, $15);
   $9 = i64toi32_i32$HIGH_BITS;
   $21 = $9;
   $10 = $9;
   $26 = $4;
   $9 = 0;
   $4 = __wasm_i64_mul($7, $23, $4, $9);
   $3 = $4 + $20 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $10 = $3 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10;
   $4 = $3;
   $3 = $14 + 0 | 0;
   $11 = $11 + $4 | 0;
   $11 = $3 >>> 0 < $15 >>> 0 ? $11 + 1 | 0 : $11;
   $15 = $3;
   $12 = $3;
   $3 = $11;
   $11 = ($25 | 0) == ($3 | 0) & $12 >>> 0 < $14 >>> 0 | $3 >>> 0 < $25 >>> 0;
   $9 = __wasm_i64_mul($18, $8, $26, $9);
   $12 = ($10 | 0) == ($21 | 0) & $4 >>> 0 < $20 >>> 0 | $10 >>> 0 < $21 >>> 0;
   $4 = $9 + $10 | 0;
   $9 = $12 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $4 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $4;
   $4 = $11 + $10 | 0;
   if ($4 >>> 0 < $10 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $30 = $4;
   $4 = $9;
   $14 = $15;
   $10 = 0 - $19 | 0;
   $27 = 0 - ((0 < $19 >>> 0) + $16 | 0) | 0;
   $19 = 0;
   $21 = __wasm_i64_mul($27, $19, $7, $23);
   $20 = i64toi32_i32$HIGH_BITS;
   $16 = $10;
   $24 = 0;
   $12 = __wasm_i64_mul($10, $24, $18, $8);
   $9 = $12 + $21 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $20 | 0;
   $10 = $9 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
   $26 = 0;
   $11 = $9;
   $16 = __wasm_i64_mul($7, $23, $16, $24);
   $7 = $16 + $26 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $7 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = ($9 | 0) == ($11 | 0) & $7 >>> 0 < $26 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $7 = __wasm_i64_mul($18, $8, $27, $19);
   $7 = $7 + $10 | 0;
   $12 = i64toi32_i32$HIGH_BITS + (($10 | 0) == ($20 | 0) & $11 >>> 0 < $21 >>> 0 | $10 >>> 0 < $20 >>> 0) | 0;
   $12 = $7 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $7;
   $7 = $9 + $7 | 0;
   $9 = $12;
   $9 = $7 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $7;
   $7 = $7 + $14 | 0;
   $9 = $9 + $3 | 0;
   $9 = $7 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $4;
   $4 = $9;
   $3 = ($3 | 0) == ($9 | 0) & $7 >>> 0 < $14 >>> 0 | $9 >>> 0 < $3 >>> 0;
   $8 = $3 + $30 | 0;
   if ($8 >>> 0 < $3 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $3 = $8;
   $9 = $10;
   $10 = $3;
   $11 = $4 + -1 | 0;
   $3 = $7 + -2 | 0;
   if ($3 >>> 0 < 4294967294) {
    $11 = $11 + 1 | 0;
   }
   $15 = $3;
   $8 = $3;
   $3 = $11;
   $4 = ($4 | 0) == ($3 | 0) & $8 >>> 0 < $7 >>> 0 | $3 >>> 0 < $4 >>> 0;
   $7 = $10 + $4 | 0;
   if ($7 >>> 0 < $4 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $4 = $7 + -1 | 0;
   $9 = $9 + -1 | 0;
   $9 = $4 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
   $7 = 0;
   $18 = $7;
   $14 = $4;
   $8 = $22;
   $20 = $8 << 2 | $2 >>> 30;
   $12 = __wasm_i64_mul($4, $7, $20, 0);
   $7 = i64toi32_i32$HIGH_BITS;
   $16 = $7;
   $10 = $7;
   $7 = $2;
   $30 = ($7 & 1073741823) << 2 | $1 >>> 30;
   $27 = $9;
   $8 = 0;
   $7 = __wasm_i64_mul($30, 0, $9, $8);
   $4 = $7 + $12 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $11 = $4 >>> 0 < $7 >>> 0 ? $11 + 1 | 0 : $11;
   $7 = $4;
   $10 = $11;
   $25 = ($16 | 0) == ($10 | 0) & $7 >>> 0 < $12 >>> 0 | $10 >>> 0 < $16 >>> 0;
   $9 = $10;
   $11 = 0;
   $16 = $11;
   $21 = $3;
   $24 = (($17 & 1073741823) << 2 | $22 >>> 30) & -262145 | 262144;
   $4 = __wasm_i64_mul($3, $11, $24, 0);
   $3 = $4 + $7 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $17 = $3;
   $9 = 0;
   $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
   $4 = $12;
   $3 = ($10 | 0) == ($4 | 0) & $3 >>> 0 < $7 >>> 0 | $4 >>> 0 < $10 >>> 0;
   $7 = $3 + $25 | 0;
   if ($7 >>> 0 < $3 >>> 0) {
    $9 = 1;
   }
   $2 = $7;
   $7 = __wasm_i64_mul($27, $8, $24, $36);
   $3 = $2 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $22 = $3;
   $7 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = __wasm_i64_mul($14, $18, $24, $36);
   $9 = i64toi32_i32$HIGH_BITS;
   $11 = __wasm_i64_mul($20, $26, $27, $8);
   $3 = $11 + $10 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $12 = $3 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $3;
   $3 = $12;
   $12 = ($9 | 0) == ($3 | 0) & $11 >>> 0 < $10 >>> 0 | $3 >>> 0 < $9 >>> 0;
   $22 = $3 + $22 | 0;
   $10 = $7 + $12 | 0;
   $9 = $22;
   $12 = $9 >>> 0 < $3 >>> 0 ? $10 + 1 | 0 : $10;
   $11 = $4 + $11 | 0;
   $10 = 0;
   $3 = $10 + $17 | 0;
   if ($3 >>> 0 < $10 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $10 = $3;
   $3 = $11;
   $4 = ($4 | 0) == ($3 | 0) & $10 >>> 0 < $17 >>> 0 | $3 >>> 0 < $4 >>> 0;
   $7 = $4 + $9 | 0;
   if ($7 >>> 0 < $4 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $23 = $7;
   $17 = $3;
   $22 = __wasm_i64_mul($30, $19, $21, $16);
   $11 = i64toi32_i32$HIGH_BITS;
   $25 = $15;
   $15 = __wasm_i64_mul($15, 0, $20, $26);
   $7 = $15 + $22 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $9 = $7 >>> 0 < $15 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $7;
   $7 = $9;
   $37 = ($11 | 0) == ($9 | 0) & $15 >>> 0 < $22 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $39 = $1 << 2 & -4;
   $2 = 0;
   $33 = __wasm_i64_mul($14, $18, $39, $2);
   $22 = $33 + $15 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $11 = $22 >>> 0 < $33 >>> 0 ? $11 + 1 | 0 : $11;
   $33 = $10;
   $9 = 0;
   $4 = $11;
   $7 = ($7 | 0) == ($4 | 0) & $22 >>> 0 < $15 >>> 0 | $4 >>> 0 < $7 >>> 0;
   $11 = $7 + $37 | 0;
   if ($11 >>> 0 < $7 >>> 0) {
    $9 = 1;
   }
   $7 = $33 + $11 | 0;
   $9 = $9 + $17 | 0;
   $9 = $7 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $7;
   $11 = $12;
   $7 = $9;
   $3 = ($3 | 0) == ($9 | 0) & $15 >>> 0 < $10 >>> 0 | $9 >>> 0 < $3 >>> 0;
   $9 = $3 + $23 | 0;
   if ($9 >>> 0 < $3 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $33 = $9;
   $17 = $15;
   $23 = $7;
   $37 = __wasm_i64_mul($27, $8, $39, $2);
   $27 = i64toi32_i32$HIGH_BITS;
   $8 = __wasm_i64_mul($24, $36, $25, $38);
   $3 = $8 + $37 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $27 | 0;
   $24 = $3;
   $12 = $3 >>> 0 < $8 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $12;
   $10 = __wasm_i64_mul($20, $26, $21, $16);
   $3 = $10 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $12 | 0;
   $20 = $3;
   $9 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $9;
   $12 = __wasm_i64_mul($14, $18, $30, $19);
   $3 = $12 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $14 = $3;
   $9 = $3 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
   $18 = 0;
   $12 = $11;
   $3 = $9;
   $11 = ($9 | 0) == ($10 | 0) & $14 >>> 0 < $20 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $9 = ($8 | 0) == ($27 | 0) & $24 >>> 0 < $37 >>> 0 | $8 >>> 0 < $27 >>> 0;
   $8 = ($8 | 0) == ($10 | 0) & $20 >>> 0 < $24 >>> 0 | $10 >>> 0 < $8 >>> 0;
   $10 = $9 + $8 | 0;
   $10 >>> 0 < $8 >>> 0;
   $8 = $11 + $10 | 0;
   $9 = $8;
   $11 = $3 | 0;
   $8 = $11 + $17 | 0;
   $10 = ($9 | $18) + $23 | 0;
   $10 = $8 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $23 = $8;
   $17 = $10;
   $7 = ($7 | 0) == ($10 | 0) & $8 >>> 0 < $15 >>> 0 | $10 >>> 0 < $7 >>> 0;
   $8 = $7 + $33 | 0;
   if ($8 >>> 0 < $7 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $26 = $8;
   $8 = $12;
   $12 = $23;
   $15 = $17;
   $18 = $22;
   $21 = __wasm_i64_mul($21, $16, $39, $2);
   $16 = i64toi32_i32$HIGH_BITS;
   $9 = __wasm_i64_mul($30, $19, $25, $38);
   $7 = $9 + $21 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $16 | 0;
   $11 = $7 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
   $10 = $11;
   $19 = $10;
   $11 = 0;
   $9 = ($10 | 0) == ($16 | 0) & $7 >>> 0 < $21 >>> 0 | $10 >>> 0 < $16 >>> 0;
   $7 = $10 + $18 | 0;
   $10 = ($9 | $11) + $4 | 0;
   $10 = $7 >>> 0 < $19 >>> 0 ? $10 + 1 | 0 : $10;
   $19 = $7;
   $9 = $7;
   $7 = $10;
   $9 = ($4 | 0) == ($10 | 0) & $9 >>> 0 < $18 >>> 0 | $10 >>> 0 < $4 >>> 0;
   $16 = $12;
   $2 = $9;
   $9 = $10 + $14 | 0;
   $12 = 0;
   $3 = $12 + $19 | 0;
   if ($3 >>> 0 < $12 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $19 >>> 0 | $9 >>> 0 < $7 >>> 0;
   $4 = $2 + $3 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $11 = 1;
   }
   $3 = $16 + $4 | 0;
   $12 = $11 + $15 | 0;
   $7 = $3;
   $9 = $8;
   $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $12;
   $3 = ($17 | 0) == ($12 | 0) & $3 >>> 0 < $23 >>> 0 | $12 >>> 0 < $17 >>> 0;
   $4 = $3 + $26 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = $4;
   $4 = $9;
   label$12 : {
    if (($9 | 0) == 131071 & $3 >>> 0 <= 4294967295 | $9 >>> 0 < 131071) {
     $9 = $1 << 17;
     $10 = 0;
     $18 = 0;
     $12 = $5;
     $20 = 0;
     $1 = __wasm_i64_mul($7, $18, $12, $20);
     $11 = i64toi32_i32$HIGH_BITS;
     $17 = $11;
     $11 = ($1 | 0) != 0 | ($11 | 0) != 0;
     $14 = $10 - $11 | 0;
     $24 = $9 - ($10 >>> 0 < $11 >>> 0) | 0;
     $19 = 0 - $1 | 0;
     $16 = 0 - ((0 < $1 >>> 0) + $17 | 0) | 0;
     $17 = 0;
     $26 = __wasm_i64_mul($8, $17, $12, $20);
     $1 = i64toi32_i32$HIGH_BITS;
     $30 = $1;
     $22 = 0;
     $10 = __wasm_i64_mul($7, $18, $6, $22);
     $9 = $10 + $26 | 0;
     $11 = i64toi32_i32$HIGH_BITS + $1 | 0;
     $11 = $9 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
     $1 = $9;
     $10 = $9;
     $15 = 0;
     $9 = $15;
     $25 = $10;
     $9 = ($10 | 0) == ($16 | 0) & $19 >>> 0 < $9 >>> 0 | $16 >>> 0 < $10 >>> 0;
     $23 = $14 - $9 | 0;
     $14 = $24 - ($14 >>> 0 < $9 >>> 0) | 0;
     $9 = __wasm_i64_mul($3, 0, $12, $20);
     $10 = i64toi32_i32$HIGH_BITS;
     $2 = $9;
     $9 = __wasm_i64_mul($7, $18, $28, 0);
     $2 = $2 + $9 | 0;
     $12 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $12 = $2 >>> 0 < $9 >>> 0 ? $12 + 1 | 0 : $12;
     $9 = __wasm_i64_mul($6, $22, $8, $17);
     $2 = $9 + $2 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $12 | 0;
     $10 = $2 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
     $9 = $2;
     $2 = $10;
     $10 = ($11 | 0) == ($30 | 0) & $1 >>> 0 < $26 >>> 0 | $11 >>> 0 < $30 >>> 0;
     $1 = $11 + $9 | 0;
     $9 = $2 + $10 | 0;
     $10 = $1;
     $1 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
     $2 = __wasm_i64_mul($7, $8, $35, 0);
     $9 = i64toi32_i32$HIGH_BITS;
     $11 = $10;
     $10 = __wasm_i64_mul($5, $6, $4, 0);
     $2 = $10 + $2 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $9 = $2 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
     $12 = __wasm_i64_mul($3, $4, $6, $22);
     $2 = $12 + $2 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $12 = __wasm_i64_mul($8, $17, $28, $31);
     $2 = $12 + $2 | 0;
     $9 = $2;
     $10 = 0;
     $2 = $11 + $10 | 0;
     $9 = $1 + $9 | 0;
     $1 = $2;
     $28 = $23 - $1 | 0;
     $31 = $14 - (($23 >>> 0 < $1 >>> 0) + ($1 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9) | 0) | 0;
     $32 = $32 + -1 | 0;
     $2 = $16 - (($19 >>> 0 < $15 >>> 0) + $25 | 0) | 0;
     $9 = $19 - $15 | 0;
     break label$12;
    }
    $16 = $8 >>> 1;
    $11 = 0;
    $17 = 0;
    $14 = $1 << 16;
    $10 = $3 << 31;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | $10;
    $26 = 0;
    $2 = $5;
    $12 = 0;
    $1 = __wasm_i64_mul($7, $26, $2, $12);
    $9 = i64toi32_i32$HIGH_BITS;
    $10 = $9;
    $9 = ($1 | 0) != 0 | ($9 | 0) != 0;
    $15 = $17 - $9 | 0;
    $24 = $14 - ($17 >>> 0 < $9 >>> 0) | 0;
    $25 = 0 - $1 | 0;
    $21 = $25;
    $23 = 0 - ((0 < $1 >>> 0) + $10 | 0) | 0;
    $17 = $23;
    $14 = 0;
    $19 = __wasm_i64_mul($7, $26, $6, $14);
    $1 = i64toi32_i32$HIGH_BITS;
    $27 = $1;
    $9 = $4 << 31 | $3 >>> 1;
    $16 = $16 | $3 << 31;
    $36 = $9 | $11;
    $11 = $16;
    $18 = __wasm_i64_mul($11, 0, $2, $12);
    $10 = $18 + $19 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $1 | 0;
    $9 = $10 >>> 0 < $18 >>> 0 ? $9 + 1 | 0 : $9;
    $1 = $9;
    $9 = $10;
    $20 = $9;
    $18 = 0;
    $9 = ($9 | 0) == ($17 | 0) & $21 >>> 0 < $18 >>> 0 | $17 >>> 0 < $9 >>> 0;
    $21 = $15 - $9 | 0;
    $15 = $24 - ($15 >>> 0 < $9 >>> 0) | 0;
    $24 = __wasm_i64_mul($6, $14, $11, $38);
    $38 = i64toi32_i32$HIGH_BITS;
    $9 = $2;
    $11 = $12;
    $2 = $4 >>> 1;
    $17 = ($4 & 1) << 31 | $3 >>> 1;
    $11 = __wasm_i64_mul($9, $11, $17, 0);
    $12 = $11 + $24 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $38 | 0;
    $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
    $11 = __wasm_i64_mul($7, $26, $28, 0);
    $12 = $11 + $12 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
    $11 = $12;
    $12 = $9;
    $9 = ($1 | 0) == ($27 | 0) & $10 >>> 0 < $19 >>> 0 | $1 >>> 0 < $27 >>> 0;
    $22 = $1;
    $1 = $1 + $11 | 0;
    $11 = $9 + $12 | 0;
    $12 = $1;
    $1 = $12 >>> 0 < $22 >>> 0 ? $11 + 1 | 0 : $11;
    $9 = __wasm_i64_mul($7, $8, $35, 0);
    $10 = i64toi32_i32$HIGH_BITS;
    $4 = __wasm_i64_mul($5, $6, $4 >>> 1, 0);
    $3 = $4 + $9 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
    $4 = __wasm_i64_mul($17, $2, $6, $14);
    $3 = $4 + $3 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $4 = __wasm_i64_mul($16, $36, $28, $31);
    $3 = $4 + $3 | 0;
    $9 = $3;
    $4 = 0;
    $3 = $4 + $12 | 0;
    $10 = $1 + $9 | 0;
    $28 = $21 - $3 | 0;
    $31 = $15 - (($21 >>> 0 < $3 >>> 0) + ($3 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10) | 0) | 0;
    $3 = $17;
    $4 = $2;
    $2 = $23 - (($25 >>> 0 < $18 >>> 0) + $20 | 0) | 0;
    $9 = $25 - $18 | 0;
   }
   $1 = $2;
   if (($32 | 0) >= 16384) {
    $29 = $29 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   if (($32 | 0) <= -16383) {
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $11 = $8;
   $4 = $4 & 65535;
   $12 = $1 << 1 | $9 >>> 31;
   $10 = $9 << 1;
   $6 = ($6 | 0) == ($12 | 0) & $10 >>> 0 >= $5 >>> 0 | $12 >>> 0 > $6 >>> 0;
   $5 = $28;
   $12 = $31 << 1 | $5 >>> 31;
   $2 = $5 << 1 | $1 >>> 31;
   $1 = ($2 | 0) == ($40 | 0) & ($12 | 0) == ($35 | 0) ? $6 : ($35 | 0) == ($12 | 0) & $2 >>> 0 >= $40 >>> 0 | $12 >>> 0 > $35 >>> 0;
   $2 = $1 + $7 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $1 = $2;
   $2 = $11;
   $10 = $32 + 16383 << 16;
   $5 = $3;
   $3 = (($8 | 0) == ($11 | 0) & $1 >>> 0 < $7 >>> 0 | $11 >>> 0 < $8 >>> 0) + $3 | 0;
   $9 = $4 | $10;
   $34 = $3 | $34;
   $29 = $29 | ($3 >>> 0 < $5 >>> 0 ? $9 + 1 | 0 : $9);
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $34;
  HEAP32[$0 + 12 >> 2] = $29;
  global$0 = $13 + 192 | 0;
  return;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $1 = ($3 | $5) != 0 | ($4 | $6) != 0;
 HEAP32[$0 + 8 >> 2] = $1 ? $34 : 0;
 HEAP32[$0 + 12 >> 2] = $1 ? $29 : 2147450880;
 global$0 = $13 + 192 | 0;
}
function ModelControlBase__drawAxisArrows_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0;
 $3 = global$0 - 160 | 0;
 global$0 = $3;
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$1 + 292 >> 2];
 $1 = HEAP32[$1 + 288 >> 2];
 $17 = +((($2 | 0) < ($1 | 0) ? $2 : $1) | 0) * .14;
 label$1 : {
  if (Math_abs($17) < 2147483648) {
   $2 = ~~$17;
   break label$1;
  }
  $2 = -2147483648;
 }
 glViewport(0, 0, $2 | 0, $2 | 0);
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] + 292 >> 2];
 $4 = $0;
 $7 = Math_fround(+($2 | 0) * .3);
 label$3 : {
  if (Math_fround(Math_abs($7)) < Math_fround(2147483648)) {
   $1 = ~~$7;
   break label$3;
  }
  $1 = -2147483648;
 }
 HEAP32[$4 + 620 >> 2] = $1;
 $8 = $0;
 $9 = Math_fround(Math_fround($2 | 0) - Math_fround($7 + $7));
 label$5 : {
  if (Math_fround(Math_abs($9)) < Math_fround(2147483648)) {
   $4 = ~~$9;
   break label$5;
  }
  $4 = -2147483648;
 }
 $5 = $4 + $1 | 0;
 HEAP32[$8 + 628 >> 2] = $5;
 $8 = $0;
 $7 = Math_fround(Math_fround($10 - $2 | 0) + $7);
 label$7 : {
  if (Math_fround(Math_abs($7)) < Math_fround(2147483648)) {
   $2 = ~~$7;
   break label$7;
  }
  $2 = -2147483648;
 }
 HEAP32[$8 + 624 >> 2] = $2;
 $4 = $2 + $4 | 0;
 HEAP32[$0 + 632 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = $5;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP32[$3 >> 2] = $1;
 emscripten_asm_const_iii(6052, 6077, $3 | 0) | 0;
 $1 = HEAP32[11869];
 HEAP32[11869] = $1 + 1;
 $8 = $0 + 24 | 0;
 if (!(!HEAPU8[$0 + 68 | 0] | $1)) {
  glUseProgram(HEAP32[$0 + 28 >> 2]);
  HEAP32[11870] = $8;
 }
 $1 = HEAP32[$0 + 220 >> 2];
 if (($1 | 0) != -1) {
  glUniform1i($1 | 0, 0);
 }
 $4 = HEAP32[$0 + 4 >> 2];
 $1 = $4;
 $2 = HEAP32[$1 + 88 >> 2];
 HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 84 >> 2];
 HEAP32[$3 + 148 >> 2] = $2;
 $2 = HEAP32[$1 + 80 >> 2];
 HEAP32[$3 + 136 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$3 + 140 >> 2] = $2;
 $2 = HEAP32[$1 + 72 >> 2];
 HEAP32[$3 + 128 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$3 + 132 >> 2] = $2;
 $2 = HEAP32[$1 + 64 >> 2];
 HEAP32[$3 + 120 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$3 + 124 >> 2] = $2;
 $2 = HEAP32[$1 + 56 >> 2];
 HEAP32[$3 + 112 >> 2] = HEAP32[$1 + 52 >> 2];
 HEAP32[$3 + 116 >> 2] = $2;
 $2 = HEAP32[$1 + 48 >> 2];
 HEAP32[$3 + 104 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$3 + 108 >> 2] = $2;
 $2 = HEAP32[$1 + 40 >> 2];
 HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$3 + 100 >> 2] = $2;
 $2 = HEAP32[$1 + 32 >> 2];
 HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[$3 + 92 >> 2] = $2;
 HEAP32[$3 + 152 >> 2] = 0;
 $2 = HEAP32[$1 + 100 >> 2];
 label$11 : {
  if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
   $1 = HEAP32[$3 + 92 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 + 88 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $1 = HEAP32[$3 + 148 >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[$3 + 144 >> 2];
   HEAP32[$2 + 60 >> 2] = $1;
   $1 = HEAP32[$3 + 140 >> 2];
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 + 136 >> 2];
   HEAP32[$2 + 52 >> 2] = $1;
   $1 = HEAP32[$3 + 132 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$3 + 128 >> 2];
   HEAP32[$2 + 44 >> 2] = $1;
   $1 = HEAP32[$3 + 124 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$3 + 120 >> 2];
   HEAP32[$2 + 36 >> 2] = $1;
   $1 = HEAP32[$3 + 116 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$3 + 112 >> 2];
   HEAP32[$2 + 28 >> 2] = $1;
   $1 = HEAP32[$3 + 108 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$3 + 104 >> 2];
   HEAP32[$2 + 20 >> 2] = $1;
   $1 = HEAP32[$3 + 100 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 96 >> 2];
   HEAP32[$2 + 12 >> 2] = $1;
   HEAP32[$2 + 64 >> 2] = HEAP32[$3 + 152 >> 2];
   HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 100 >> 2] + 68;
   break label$11;
  }
  void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($4 + 96 | 0, $3 + 88 | 0);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$1 + 192 >> 2];
 $4 = HEAP32[$1 + 188 >> 2];
 HEAP32[$1 + 28 >> 2] = $4;
 HEAP32[$1 + 32 >> 2] = $2;
 $2 = HEAP32[$1 + 248 >> 2];
 HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 244 >> 2];
 HEAP32[$1 + 88 >> 2] = $2;
 $2 = HEAP32[$1 + 240 >> 2];
 HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 236 >> 2];
 HEAP32[$1 + 80 >> 2] = $2;
 $2 = HEAP32[$1 + 232 >> 2];
 HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 228 >> 2];
 HEAP32[$1 + 72 >> 2] = $2;
 $2 = HEAP32[$1 + 224 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 220 >> 2];
 HEAP32[$1 + 64 >> 2] = $2;
 $2 = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 212 >> 2];
 HEAP32[$1 + 56 >> 2] = $2;
 $2 = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 204 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 $2 = HEAP32[$1 + 200 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 196 >> 2];
 HEAP32[$1 + 40 >> 2] = $2;
 $4 = HEAP32[$0 + 4 >> 2];
 $1 = $4;
 $2 = HEAP32[$1 + 168 >> 2];
 HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 164 >> 2];
 HEAP32[$3 + 148 >> 2] = $2;
 $2 = HEAP32[$1 + 160 >> 2];
 HEAP32[$3 + 136 >> 2] = HEAP32[$1 + 156 >> 2];
 HEAP32[$3 + 140 >> 2] = $2;
 $2 = HEAP32[$1 + 152 >> 2];
 HEAP32[$3 + 128 >> 2] = HEAP32[$1 + 148 >> 2];
 HEAP32[$3 + 132 >> 2] = $2;
 $2 = HEAP32[$1 + 144 >> 2];
 HEAP32[$3 + 120 >> 2] = HEAP32[$1 + 140 >> 2];
 HEAP32[$3 + 124 >> 2] = $2;
 $2 = HEAP32[$1 + 136 >> 2];
 HEAP32[$3 + 112 >> 2] = HEAP32[$1 + 132 >> 2];
 HEAP32[$3 + 116 >> 2] = $2;
 $2 = HEAP32[$1 + 128 >> 2];
 HEAP32[$3 + 104 >> 2] = HEAP32[$1 + 124 >> 2];
 HEAP32[$3 + 108 >> 2] = $2;
 $2 = HEAP32[$1 + 120 >> 2];
 HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 116 >> 2];
 HEAP32[$3 + 100 >> 2] = $2;
 $2 = HEAP32[$1 + 112 >> 2];
 HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 108 >> 2];
 HEAP32[$3 + 92 >> 2] = $2;
 HEAP32[$3 + 152 >> 2] = 0;
 $2 = HEAP32[$1 + 180 >> 2];
 label$13 : {
  if ($2 >>> 0 < HEAPU32[$1 + 184 >> 2]) {
   $1 = HEAP32[$3 + 92 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 + 88 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   $1 = HEAP32[$3 + 148 >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[$3 + 144 >> 2];
   HEAP32[$2 + 60 >> 2] = $1;
   $1 = HEAP32[$3 + 140 >> 2];
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 + 136 >> 2];
   HEAP32[$2 + 52 >> 2] = $1;
   $1 = HEAP32[$3 + 132 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$3 + 128 >> 2];
   HEAP32[$2 + 44 >> 2] = $1;
   $1 = HEAP32[$3 + 124 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$3 + 120 >> 2];
   HEAP32[$2 + 36 >> 2] = $1;
   $1 = HEAP32[$3 + 116 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$3 + 112 >> 2];
   HEAP32[$2 + 28 >> 2] = $1;
   $1 = HEAP32[$3 + 108 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$3 + 104 >> 2];
   HEAP32[$2 + 20 >> 2] = $1;
   $1 = HEAP32[$3 + 100 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 96 >> 2];
   HEAP32[$2 + 12 >> 2] = $1;
   HEAP32[$2 + 64 >> 2] = HEAP32[$3 + 152 >> 2];
   HEAP32[$4 + 180 >> 2] = HEAP32[$4 + 180 >> 2] + 68;
   break label$13;
  }
  void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($4 + 176 | 0, $3 + 88 | 0);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 108 >> 2] = 1065353216;
 HEAP32[$1 + 168 >> 2] = 1065353216;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 1065353216;
 HEAP32[$1 + 128 >> 2] = 1065353216;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 $7 = HEAPF32[$0 + 644 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = $1 + 116 | 0;
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 36 >> 2] = $4;
 $2 = HEAP32[$1 + 128 >> 2];
 HEAP32[$3 + 40 >> 2] = HEAP32[$1 + 124 >> 2];
 HEAP32[$3 + 44 >> 2] = $2;
 $2 = HEAP32[$1 + 136 >> 2];
 HEAP32[$3 + 48 >> 2] = HEAP32[$1 + 132 >> 2];
 HEAP32[$3 + 52 >> 2] = $2;
 $2 = HEAP32[$1 + 144 >> 2];
 HEAP32[$3 + 56 >> 2] = HEAP32[$1 + 140 >> 2];
 HEAP32[$3 + 60 >> 2] = $2;
 $5 = HEAP32[$1 + 152 >> 2];
 $2 = $3 - -64 | 0;
 HEAP32[$2 >> 2] = HEAP32[$1 + 148 >> 2];
 HEAP32[$2 + 4 >> 2] = $5;
 $4 = HEAP32[$1 + 160 >> 2];
 HEAP32[$3 + 72 >> 2] = HEAP32[$1 + 156 >> 2];
 HEAP32[$3 + 76 >> 2] = $4;
 $4 = HEAP32[$1 + 168 >> 2];
 HEAP32[$3 + 80 >> 2] = HEAP32[$1 + 164 >> 2];
 HEAP32[$3 + 84 >> 2] = $4;
 $4 = HEAP32[$1 + 112 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 108 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 HEAP32[$3 + 100 >> 2] = 0;
 HEAP32[$3 + 104 >> 2] = 0;
 HEAP32[$3 + 108 >> 2] = 0;
 HEAP32[$3 + 112 >> 2] = 0;
 HEAP32[$3 + 116 >> 2] = 0;
 HEAP32[$3 + 120 >> 2] = 0;
 HEAP32[$3 + 124 >> 2] = 0;
 HEAP32[$3 + 128 >> 2] = 0;
 HEAP32[$3 + 132 >> 2] = 0;
 HEAP32[$3 + 136 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 $6 = HEAPF32[$3 + 72 >> 2];
 $11 = HEAPF32[$3 + 24 >> 2];
 $12 = Math_fround(Math_fround($11 * Math_fround(0)) + Math_fround(0));
 $13 = HEAPF32[$3 + 40 >> 2];
 $14 = Math_fround($13 * Math_fround(0));
 $15 = Math_fround($12 + $14);
 $16 = HEAPF32[$3 + 56 >> 2];
 $9 = Math_fround($16 * Math_fround(0));
 HEAPF32[$3 + 136 >> 2] = $6 + Math_fround($15 + $9);
 $17 = +$7;
 $7 = Math_fround($17 * .25 + .6);
 $6 = Math_fround($6 * Math_fround(0));
 HEAPF32[$3 + 120 >> 2] = Math_fround($15 + Math_fround($16 * $7)) + $6;
 HEAPF32[$3 + 104 >> 2] = Math_fround(Math_fround($12 + Math_fround($13 * $7)) + $9) + $6;
 HEAPF32[$3 + 88 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $7) + Math_fround(0)) + $14) + $9) + $6;
 $11 = HEAPF32[$3 + 28 >> 2];
 $6 = Math_fround(Math_fround($11 * Math_fround(0)) + Math_fround(0));
 $12 = HEAPF32[$3 + 44 >> 2];
 $13 = Math_fround($12 * Math_fround(0));
 $14 = Math_fround($6 + $13);
 $15 = HEAPF32[$3 + 60 >> 2];
 $16 = HEAPF32[$3 + 76 >> 2];
 $9 = Math_fround($16 * Math_fround(0));
 HEAPF32[$3 + 124 >> 2] = Math_fround($14 + Math_fround($15 * $7)) + $9;
 $12 = Math_fround($6 + Math_fround($12 * $7));
 $6 = Math_fround($15 * Math_fround(0));
 HEAPF32[$3 + 108 >> 2] = Math_fround($12 + $6) + $9;
 HEAPF32[$3 + 92 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $7) + Math_fround(0)) + $13) + $6) + $9;
 HEAPF32[$3 + 140 >> 2] = $16 + Math_fround($14 + $6);
 $6 = HEAPF32[$3 + 80 >> 2];
 $11 = HEAPF32[$3 + 32 >> 2];
 $12 = Math_fround(Math_fround($11 * Math_fround(0)) + Math_fround(0));
 $13 = HEAPF32[$3 + 48 >> 2];
 $14 = Math_fround($13 * Math_fround(0));
 $15 = Math_fround($12 + $14);
 $16 = HEAPF32[$2 >> 2];
 $9 = Math_fround($16 * Math_fround(0));
 HEAPF32[$3 + 144 >> 2] = $6 + Math_fround($15 + $9);
 $6 = Math_fround($6 * Math_fround(0));
 HEAPF32[$3 + 128 >> 2] = Math_fround($15 + Math_fround($16 * $7)) + $6;
 HEAPF32[$3 + 112 >> 2] = Math_fround(Math_fround($12 + Math_fround($13 * $7)) + $9) + $6;
 HEAPF32[$3 + 96 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $7) + Math_fround(0)) + $14) + $9) + $6;
 $11 = HEAPF32[$3 + 36 >> 2];
 $12 = HEAPF32[$3 + 52 >> 2];
 $13 = Math_fround($12 * Math_fround(0));
 $14 = HEAPF32[$3 + 68 >> 2];
 $9 = Math_fround($14 * Math_fround(0));
 $15 = HEAPF32[$3 + 84 >> 2];
 $6 = Math_fround($15 * Math_fround(0));
 HEAPF32[$3 + 100 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $7) + Math_fround(0)) + $13) + $9) + $6;
 $11 = Math_fround(Math_fround($11 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$3 + 116 >> 2] = Math_fround(Math_fround($11 + Math_fround($12 * $7)) + $9) + $6;
 $11 = Math_fround($11 + $13);
 HEAPF32[$3 + 132 >> 2] = Math_fround($11 + Math_fround($14 * $7)) + $6;
 HEAPF32[$3 + 148 >> 2] = $15 + Math_fround($11 + $9);
 $2 = HEAP32[$3 + 140 >> 2];
 HEAP32[$1 + 156 >> 2] = HEAP32[$3 + 136 >> 2];
 HEAP32[$1 + 160 >> 2] = $2;
 $2 = HEAP32[$3 + 132 >> 2];
 HEAP32[$1 + 148 >> 2] = HEAP32[$3 + 128 >> 2];
 HEAP32[$1 + 152 >> 2] = $2;
 $2 = HEAP32[$3 + 124 >> 2];
 HEAP32[$1 + 140 >> 2] = HEAP32[$3 + 120 >> 2];
 HEAP32[$1 + 144 >> 2] = $2;
 $2 = HEAP32[$3 + 116 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[$3 + 112 >> 2];
 HEAP32[$1 + 136 >> 2] = $2;
 $2 = HEAP32[$3 + 100 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[$3 + 96 >> 2];
 HEAP32[$1 + 120 >> 2] = $2;
 $2 = HEAP32[$3 + 148 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[$3 + 144 >> 2];
 HEAP32[$1 + 168 >> 2] = $2;
 $2 = HEAP32[$3 + 108 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[$3 + 104 >> 2];
 HEAP32[$1 + 128 >> 2] = $2;
 $2 = HEAP32[$3 + 92 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[$3 + 88 >> 2];
 HEAP32[$1 + 112 >> 2] = $2;
 NoiseSlvProgram__setModelMat_28Mat4_20const__29($8, HEAP32[$0 + 4 >> 2] + 108 | 0);
 BaseGLWidget__transformMat_28_29($3 + 88 | 0, HEAP32[$0 + 4 >> 2]);
 $1 = HEAP32[$0 + 100 >> 2];
 if (($1 | 0) != -1) {
  glUniformMatrix4fv($1 | 0, 1, 0, $3 + 88 | 0);
 }
 $2 = HEAPU8[$0 + 636 | 0];
 $1 = HEAP32[$0 + 616 >> 2];
 HEAP32[$1 + 80 >> 2] = 1065353216;
 HEAP32[$1 + 88 >> 2] = 0;
 HEAPF32[$1 + 84 >> 2] = $17 * -.4 + 1 + +($2 >>> 0) * -.3;
 Mesh__paint_28bool_29_20const(HEAP32[$0 + 616 >> 2], 0);
 $2 = HEAP32[$0 + 4 >> 2];
 $5 = HEAP32[$2 + 180 >> 2];
 if (($5 | 0) != HEAP32[$2 + 176 >> 2]) {
  label$17 : {
   $4 = $5 + -68 | 0;
   $1 = $2;
   if (($4 | 0) != ($1 + 108 | 0)) {
    $1 = $4;
    $10 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 + 108 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 112 >> 2] = $10;
    $10 = HEAP32[$1 + 60 >> 2];
    HEAP32[$2 + 164 >> 2] = HEAP32[$1 + 56 >> 2];
    HEAP32[$2 + 168 >> 2] = $10;
    $10 = HEAP32[$1 + 52 >> 2];
    HEAP32[$2 + 156 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$2 + 160 >> 2] = $10;
    $10 = HEAP32[$1 + 44 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$2 + 152 >> 2] = $10;
    $10 = HEAP32[$1 + 36 >> 2];
    HEAP32[$2 + 140 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$2 + 144 >> 2] = $10;
    $10 = HEAP32[$1 + 28 >> 2];
    HEAP32[$2 + 132 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$2 + 136 >> 2] = $10;
    $10 = HEAP32[$1 + 20 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$2 + 128 >> 2] = $10;
    $10 = HEAP32[$1 + 12 >> 2];
    HEAP32[$2 + 116 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$2 + 120 >> 2] = $10;
    $1 = HEAP32[$0 + 4 >> 2];
   }
   $5 = HEAP32[$5 + -4 >> 2];
   HEAP32[$2 + 180 >> 2] = $4;
   HEAP32[$2 + 172 >> 2] = $5;
   $4 = HEAP32[$1 + 168 >> 2];
   HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 164 >> 2];
   HEAP32[$3 + 148 >> 2] = $4;
   $4 = HEAP32[$1 + 160 >> 2];
   HEAP32[$3 + 136 >> 2] = HEAP32[$1 + 156 >> 2];
   HEAP32[$3 + 140 >> 2] = $4;
   $4 = HEAP32[$1 + 152 >> 2];
   HEAP32[$3 + 128 >> 2] = HEAP32[$1 + 148 >> 2];
   HEAP32[$3 + 132 >> 2] = $4;
   $4 = HEAP32[$1 + 144 >> 2];
   HEAP32[$3 + 120 >> 2] = HEAP32[$1 + 140 >> 2];
   HEAP32[$3 + 124 >> 2] = $4;
   $4 = HEAP32[$1 + 136 >> 2];
   HEAP32[$3 + 112 >> 2] = HEAP32[$1 + 132 >> 2];
   HEAP32[$3 + 116 >> 2] = $4;
   $4 = HEAP32[$1 + 128 >> 2];
   HEAP32[$3 + 104 >> 2] = HEAP32[$1 + 124 >> 2];
   HEAP32[$3 + 108 >> 2] = $4;
   $4 = HEAP32[$1 + 120 >> 2];
   HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 116 >> 2];
   HEAP32[$3 + 100 >> 2] = $4;
   $4 = HEAP32[$1 + 112 >> 2];
   HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 108 >> 2];
   HEAP32[$3 + 92 >> 2] = $4;
   HEAP32[$3 + 152 >> 2] = 0;
   $4 = HEAP32[$1 + 180 >> 2];
   label$19 : {
    if ($4 >>> 0 < HEAPU32[$1 + 184 >> 2]) {
     $2 = HEAP32[$3 + 92 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$3 + 88 >> 2];
     HEAP32[$4 + 4 >> 2] = $2;
     $2 = HEAP32[$3 + 148 >> 2];
     HEAP32[$4 + 56 >> 2] = HEAP32[$3 + 144 >> 2];
     HEAP32[$4 + 60 >> 2] = $2;
     $2 = HEAP32[$3 + 140 >> 2];
     HEAP32[$4 + 48 >> 2] = HEAP32[$3 + 136 >> 2];
     HEAP32[$4 + 52 >> 2] = $2;
     $2 = HEAP32[$3 + 132 >> 2];
     HEAP32[$4 + 40 >> 2] = HEAP32[$3 + 128 >> 2];
     HEAP32[$4 + 44 >> 2] = $2;
     $2 = HEAP32[$3 + 124 >> 2];
     HEAP32[$4 + 32 >> 2] = HEAP32[$3 + 120 >> 2];
     HEAP32[$4 + 36 >> 2] = $2;
     $2 = HEAP32[$3 + 116 >> 2];
     HEAP32[$4 + 24 >> 2] = HEAP32[$3 + 112 >> 2];
     HEAP32[$4 + 28 >> 2] = $2;
     $2 = HEAP32[$3 + 108 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[$3 + 104 >> 2];
     HEAP32[$4 + 20 >> 2] = $2;
     $2 = HEAP32[$3 + 100 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 96 >> 2];
     HEAP32[$4 + 12 >> 2] = $2;
     HEAP32[$4 + 64 >> 2] = HEAP32[$3 + 152 >> 2];
     HEAP32[$1 + 180 >> 2] = HEAP32[$1 + 180 >> 2] + 68;
     break label$19;
    }
    void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($1 + 176 | 0, $3 + 88 | 0);
   }
   MatStack__scale_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(.10499999672174454), Math_fround(.10499999672174454), Math_fround(.10499999672174454));
   NoiseSlvProgram__setModelMat_28Mat4_20const__29($8, HEAP32[$0 + 4 >> 2] + 108 | 0);
   BaseGLWidget__transformMat_28_29($3 + 88 | 0, HEAP32[$0 + 4 >> 2]);
   $1 = HEAP32[$0 + 100 >> 2];
   if (($1 | 0) != -1) {
    glUniformMatrix4fv($1 | 0, 1, 0, $3 + 88 | 0);
   }
   $1 = HEAP32[$0 + 612 >> 2];
   HEAP32[$1 + 80 >> 2] = 1065353216;
   HEAP32[$1 + 84 >> 2] = 1045220557;
   HEAP32[$1 + 88 >> 2] = 1045220557;
   Mesh__paint_28bool_29_20const(HEAP32[$0 + 612 >> 2], 0);
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(90), Math_fround(-1), Math_fround(0), Math_fround(0));
   NoiseSlvProgram__setModelMat_28Mat4_20const__29($8, HEAP32[$0 + 4 >> 2] + 108 | 0);
   BaseGLWidget__transformMat_28_29($3 + 88 | 0, HEAP32[$0 + 4 >> 2]);
   $1 = HEAP32[$0 + 100 >> 2];
   if (($1 | 0) != -1) {
    glUniformMatrix4fv($1 | 0, 1, 0, $3 + 88 | 0);
   }
   $1 = HEAP32[$0 + 612 >> 2];
   HEAP32[$1 + 80 >> 2] = 1045220557;
   HEAP32[$1 + 84 >> 2] = 1060320051;
   HEAP32[$1 + 88 >> 2] = 1045220557;
   Mesh__paint_28bool_29_20const(HEAP32[$0 + 612 >> 2], 0);
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
   NoiseSlvProgram__setModelMat_28Mat4_20const__29($8, HEAP32[$0 + 4 >> 2] + 108 | 0);
   BaseGLWidget__transformMat_28_29($3 + 88 | 0, HEAP32[$0 + 4 >> 2]);
   $1 = HEAP32[$0 + 100 >> 2];
   if (($1 | 0) != -1) {
    glUniformMatrix4fv($1 | 0, 1, 0, $3 + 88 | 0);
   }
   $1 = HEAP32[$0 + 612 >> 2];
   HEAP32[$1 + 80 >> 2] = 1045220557;
   HEAP32[$1 + 84 >> 2] = 1045220557;
   HEAP32[$1 + 88 >> 2] = 1065353216;
   Mesh__paint_28bool_29_20const(HEAP32[$0 + 612 >> 2], 0);
   $2 = HEAP32[$0 + 4 >> 2];
   $8 = HEAP32[$2 + 180 >> 2];
   if (($8 | 0) == HEAP32[$2 + 176 >> 2]) {
    break label$17;
   }
   $4 = $8 + -68 | 0;
   $1 = $2;
   if (($4 | 0) != ($1 + 108 | 0)) {
    $1 = $4;
    $5 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 + 108 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    $5 = HEAP32[$1 + 60 >> 2];
    HEAP32[$2 + 164 >> 2] = HEAP32[$1 + 56 >> 2];
    HEAP32[$2 + 168 >> 2] = $5;
    $5 = HEAP32[$1 + 52 >> 2];
    HEAP32[$2 + 156 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$2 + 160 >> 2] = $5;
    $5 = HEAP32[$1 + 44 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$2 + 152 >> 2] = $5;
    $5 = HEAP32[$1 + 36 >> 2];
    HEAP32[$2 + 140 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$2 + 144 >> 2] = $5;
    $5 = HEAP32[$1 + 28 >> 2];
    HEAP32[$2 + 132 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$2 + 136 >> 2] = $5;
    $5 = HEAP32[$1 + 20 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$2 + 128 >> 2] = $5;
    $5 = HEAP32[$1 + 12 >> 2];
    HEAP32[$2 + 116 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$2 + 120 >> 2] = $5;
    $1 = HEAP32[$0 + 4 >> 2];
   }
   $8 = HEAP32[$8 + -4 >> 2];
   HEAP32[$2 + 180 >> 2] = $4;
   HEAP32[$2 + 172 >> 2] = $8;
   $8 = HEAP32[$1 + 100 >> 2];
   if (($8 | 0) == HEAP32[$1 + 96 >> 2]) {
    break label$17;
   }
   $4 = $8 + -68 | 0;
   $2 = $1;
   if (($4 | 0) != ($1 + 28 | 0)) {
    $1 = $4;
    $5 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 32 >> 2] = $5;
    $5 = HEAP32[$1 + 60 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$1 + 56 >> 2];
    HEAP32[$2 + 88 >> 2] = $5;
    $5 = HEAP32[$1 + 52 >> 2];
    HEAP32[$2 + 76 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$2 + 80 >> 2] = $5;
    $5 = HEAP32[$1 + 44 >> 2];
    HEAP32[$2 + 68 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$2 + 72 >> 2] = $5;
    $5 = HEAP32[$1 + 36 >> 2];
    HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$2 + 64 >> 2] = $5;
    $5 = HEAP32[$1 + 28 >> 2];
    HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$2 + 56 >> 2] = $5;
    $5 = HEAP32[$1 + 20 >> 2];
    HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$2 + 48 >> 2] = $5;
    $5 = HEAP32[$1 + 12 >> 2];
    HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$2 + 40 >> 2] = $5;
    $1 = HEAP32[$0 + 4 >> 2];
   }
   $0 = HEAP32[$8 + -4 >> 2];
   HEAP32[$2 + 100 >> 2] = $4;
   HEAP32[$2 + 92 >> 2] = $0;
   glViewport(0, 0, HEAP32[$1 + 288 >> 2], HEAP32[$1 + 292 >> 2]);
   $0 = HEAP32[11869] + -1 | 0;
   HEAP32[11869] = $0;
   if (!$0) {
    glUseProgram(0);
    HEAP32[11870] = 0;
   }
   global$0 = $3 + 160 | 0;
   return;
  }
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $11 = global$0 - 560 | 0;
 global$0 = $11;
 HEAP32[$11 + 548 >> 2] = $10;
 HEAP32[$11 + 552 >> 2] = $1;
 HEAP32[$11 + 104 >> 2] = 270;
 $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 104 | 0);
 $1 = HEAP32[$14 >> 2];
 HEAP32[$11 + 132 >> 2] = $1;
 HEAP32[$11 + 128 >> 2] = $1 + 400;
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 104 | 0);
 $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 88 | 0);
 $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 72 | 0);
 $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 56 | 0);
 $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 40 | 0);
 std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 119 | 0, $11 + 118 | 0, $17, $15, $12, $13, $11 + 36 | 0);
 HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
 $18 = $4 & 512;
 $1 = 0;
 $4 = 0;
 while (1) {
  $10 = $4;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($1 | 0) == 4) {
      break label$4;
     }
     if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
      break label$4;
     }
     label$5 : {
      label$6 : {
       $2 = HEAP8[($11 + 120 | 0) + $1 | 0];
       label$7 : {
        if ($2 >>> 0 > 4) {
         break label$7;
        }
        $4 = 0;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            switch ($2 - 1 | 0) {
            case 0:
             if (($1 | 0) == 3) {
              break label$7;
             }
             $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
             if (($2 | 0) >= 0) {
              $2 = HEAPU16[HEAP32[$7 + 8 >> 2] + (($2 & 255) << 1) >> 1] & 8192;
             } else {
              $2 = 0;
             }
             if ($2) {
              std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0);
              std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, HEAP8[$11 + 24 | 0]);
              break label$10;
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break label$3;
            case 3:
             break label$5;
            case 1:
             break label$8;
            case 2:
             break label$9;
            default:
             break label$11;
            }
           }
           if (($1 | 0) == 3) {
            break label$7;
           }
          }
          while (1) {
           if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
            break label$7;
           }
           $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
           if (($2 | 0) >= 0) {
            $2 = (HEAPU16[HEAP32[$7 + 8 >> 2] + (($2 & 255) << 1) >> 1] & 8192) != 0;
           } else {
            $2 = 0;
           }
           if (!$2) {
            break label$7;
           }
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0);
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, HEAP8[$11 + 24 | 0]);
           continue;
          }
         }
         if (HEAP8[$12 + 11 | 0] < 0) {
          $2 = HEAP32[$12 + 4 >> 2];
         } else {
          $2 = HEAPU8[$12 + 11 | 0];
         }
         if (HEAP8[$13 + 11 | 0] < 0) {
          $3 = HEAP32[$13 + 4 >> 2];
         } else {
          $3 = HEAPU8[$13 + 11 | 0];
         }
         if (($2 | 0) == (0 - $3 | 0)) {
          break label$7;
         }
         if (HEAP8[$12 + 11 | 0] < 0) {
          $2 = HEAP32[$12 + 4 >> 2];
         } else {
          $2 = HEAPU8[$12 + 11 | 0];
         }
         if (HEAP8[$13 + 11 | 0] < 0) {
          $3 = HEAP32[$13 + 4 >> 2];
         } else {
          $3 = HEAPU8[$13 + 11 | 0];
         }
         if (!($3 ? $2 : 0)) {
          if (HEAP8[$12 + 11 | 0] < 0) {
           $2 = HEAP32[$12 + 4 >> 2];
          } else {
           $2 = HEAPU8[$12 + 11 | 0];
          }
          $3 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
          if ($2) {
           if (HEAP8[$12 + 11 | 0] < 0) {
            $2 = HEAP32[$12 >> 2];
           } else {
            $2 = $12;
           }
           if (HEAPU8[$2 | 0] == ($3 & 255)) {
            std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
            $2 = $12;
            if (HEAP8[$12 + 11 | 0] < 0) {
             $3 = HEAP32[$12 + 4 >> 2];
            } else {
             $3 = HEAPU8[$12 + 11 | 0];
            }
            $4 = $3 >>> 0 > 1 ? $2 : $10;
            break label$2;
           }
           HEAP8[$6 | 0] = 1;
           break label$7;
          }
          if (HEAP8[$13 + 11 | 0] < 0) {
           $2 = HEAP32[$13 >> 2];
          } else {
           $2 = $13;
          }
          if (HEAPU8[$2 | 0] != ($3 & 255)) {
           break label$7;
          }
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
          HEAP8[$6 | 0] = 1;
          $2 = $13;
          if (HEAP8[$13 + 11 | 0] < 0) {
           $3 = HEAP32[$13 + 4 >> 2];
          } else {
           $3 = HEAPU8[$13 + 11 | 0];
          }
          $4 = $3 >>> 0 > 1 ? $2 : $10;
          break label$2;
         }
         $3 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255;
         if (HEAP8[$12 + 11 | 0] < 0) {
          $2 = HEAP32[$12 >> 2];
         } else {
          $2 = $12;
         }
         if (($3 | 0) == HEAPU8[$2 | 0]) {
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
          $2 = $12;
          if (HEAP8[$12 + 11 | 0] < 0) {
           $3 = HEAP32[$12 + 4 >> 2];
          } else {
           $3 = HEAPU8[$12 + 11 | 0];
          }
          $4 = $3 >>> 0 > 1 ? $2 : $10;
          break label$2;
         }
         $3 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255;
         if (HEAP8[$13 + 11 | 0] < 0) {
          $2 = HEAP32[$13 >> 2];
         } else {
          $2 = $13;
         }
         if (($3 | 0) == HEAPU8[$2 | 0]) {
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
          HEAP8[$6 | 0] = 1;
          $2 = $13;
          if (HEAP8[$13 + 11 | 0] < 0) {
           $3 = HEAP32[$13 + 4 >> 2];
          } else {
           $3 = HEAPU8[$13 + 11 | 0];
          }
          $4 = $3 >>> 0 > 1 ? $2 : $10;
          break label$2;
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$3;
        }
        if (!($18 | ($10 | $1 >>> 0 < 2))) {
         if (!(($1 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
          break label$2;
         }
        }
        HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
        HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 16 >> 2];
        label$52 : {
         if (!$1 | HEAPU8[($1 + $11 | 0) + 119 | 0] > 1) {
          break label$52;
         }
         while (1) {
          label$54 : {
           HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($15);
           if (!!(HEAP32[$11 + 24 >> 2] == HEAP32[$11 + 16 >> 2])) {
            break label$54;
           }
           $2 = HEAP8[HEAP32[$11 + 24 >> 2]];
           if (($2 | 0) >= 0) {
            $2 = (HEAPU16[HEAP32[$7 + 8 >> 2] + (($2 & 255) << 1) >> 1] & 8192) != 0;
           } else {
            $2 = 0;
           }
           if (!$2) {
            break label$54;
           }
           HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
         $3 = HEAP32[$11 + 24 >> 2] - HEAP32[$11 + 16 >> 2] | 0;
         $2 = $3;
         if (HEAP8[$16 + 11 | 0] < 0) {
          $4 = HEAP32[$16 + 4 >> 2];
         } else {
          $4 = HEAPU8[$16 + 11 | 0];
         }
         if ($2 >>> 0 <= $4 >>> 0) {
          HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16);
          if (bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29(std____2____wrap_iter_char____operator__28long_29_20const($11 + 16 | 0, 0 - $3 | 0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15))) {
           break label$52;
          }
         }
         HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($15);
         HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 8 >> 2];
         HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 16 >> 2];
        }
        HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
        while (1) {
         label$61 : {
          HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($15);
          if (!!(HEAP32[$11 + 16 >> 2] == HEAP32[$11 + 8 >> 2])) {
           break label$61;
          }
          if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
           break label$61;
          }
          if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) != HEAPU8[HEAP32[$11 + 16 >> 2]]) {
           break label$61;
          }
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
          HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 16 >> 2] + 1;
          continue;
         }
         break;
        }
        if (!$18) {
         break label$7;
        }
        HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($15);
        if (!(HEAP32[$11 + 16 >> 2] == HEAP32[$11 + 8 >> 2])) {
         break label$6;
        }
       }
       $4 = $10;
       break label$2;
      }
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break label$3;
     }
     while (1) {
      label$63 : {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
        break label$63;
       }
       $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
       label$64 : {
        if (($2 | 0) >= 0 ? HEAPU16[HEAP32[$7 + 8 >> 2] + (($2 & 255) << 1) >> 1] & 2048 : 0) {
         $3 = HEAP32[$9 >> 2];
         if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
          void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
          $3 = HEAP32[$9 >> 2];
         }
         HEAP32[$9 >> 2] = $3 + 1;
         HEAP8[$3 | 0] = $2;
         $4 = $4 + 1 | 0;
         break label$64;
        }
        $3 = !$4;
        if (HEAP8[$17 + 11 | 0] < 0) {
         $19 = HEAP32[$17 + 4 >> 2];
        } else {
         $19 = HEAPU8[$17 + 11 | 0];
        }
        if ($3 | !$19 | HEAPU8[$11 + 118 | 0] != ($2 & 255)) {
         break label$63;
        }
        $2 = HEAP32[$11 + 132 >> 2];
        if (($2 | 0) == HEAP32[$11 + 128 >> 2]) {
         void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($14, $11 + 132 | 0, $11 + 128 | 0);
         $2 = HEAP32[$11 + 132 >> 2];
        }
        HEAP32[$11 + 132 >> 2] = $2 + 4;
        HEAP32[$2 >> 2] = $4;
        $4 = 0;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
       continue;
      }
      break;
     }
     $3 = HEAP32[$14 >> 2];
     label$72 : {
      if (!$4) {
       break label$72;
      }
      $2 = HEAP32[$11 + 132 >> 2];
      if (($3 | 0) == ($2 | 0)) {
       break label$72;
      }
      if (HEAP32[$11 + 128 >> 2] == ($2 | 0)) {
       void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($14, $11 + 132 | 0, $11 + 128 | 0);
       $2 = HEAP32[$11 + 132 >> 2];
      }
      HEAP32[$11 + 132 >> 2] = $2 + 4;
      HEAP32[$2 >> 2] = $4;
     }
     label$74 : {
      if (HEAP32[$11 + 36 >> 2] < 1) {
       break label$74;
      }
      label$75 : {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
        if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == HEAPU8[$11 + 119 | 0]) {
         break label$75;
        }
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$3;
      }
      while (1) {
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
       if (HEAP32[$11 + 36 >> 2] < 1) {
        break label$74;
       }
       label$78 : {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
         $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
         if (($2 | 0) >= 0) {
          $2 = HEAPU16[HEAP32[$7 + 8 >> 2] + (($2 & 255) << 1) >> 1] & 2048;
         } else {
          $2 = 0;
         }
         if ($2) {
          break label$78;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$3;
       }
       if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
        void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
       }
       $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
       $3 = HEAP32[$9 >> 2];
       HEAP32[$9 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $2;
       HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + -1;
       continue;
      }
     }
     $4 = $10;
     if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
      break label$2;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     $0 = 0;
     break label$3;
    }
    label$83 : {
     if (!$10) {
      break label$83;
     }
     $4 = 1;
     while (1) {
      $1 = $4;
      if (HEAP8[$10 + 11 | 0] < 0) {
       $2 = HEAP32[$10 + 4 >> 2];
      } else {
       $2 = HEAPU8[$10 + 11 | 0];
      }
      if ($1 >>> 0 >= $2 >>> 0) {
       break label$83;
      }
      label$87 : {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
        $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255;
        if (HEAP8[$10 + 11 | 0] < 0) {
         $1 = HEAP32[$10 >> 2];
        } else {
         $1 = $10;
        }
        if (($2 | 0) == HEAPU8[$1 + $4 | 0]) {
         break label$87;
        }
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$3;
      }
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
      $4 = $4 + 1 | 0;
      continue;
     }
    }
    $0 = 1;
    if (HEAP32[$14 >> 2] == HEAP32[$11 + 132 >> 2]) {
     break label$3;
    }
    $0 = 0;
    HEAP32[$11 + 24 >> 2] = 0;
    std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, HEAP32[$14 >> 2], HEAP32[$11 + 132 >> 2], $11 + 24 | 0);
    if (HEAP32[$11 + 24 >> 2]) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     break label$3;
    }
    $0 = 1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($15);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
   $1 = HEAP32[$14 >> 2];
   HEAP32[$14 >> 2] = 0;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$14 + 4 >> 2]]($1);
   }
   global$0 = $11 + 560 | 0;
   return $0;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}
function printf_core($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 76 >> 2] = $1;
 $19 = $5 + 55 | 0;
 $16 = $5 + 56 | 0;
 $1 = 0;
 label$1 : {
  label$2 : while (1) {
   label$3 : {
    if (($13 | 0) < 0) {
     break label$3;
    }
    if (($1 | 0) > (2147483647 - $13 | 0)) {
     HEAP32[12002] = 61;
     $13 = -1;
     break label$3;
    }
    $13 = $1 + $13 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $9 = HEAP32[$5 + 76 >> 2];
                 $1 = $9;
                 $8 = HEAPU8[$1 | 0];
                 if ($8) {
                  while (1) {
                   label$21 : {
                    label$22 : {
                     $6 = $8 & 255;
                     label$23 : {
                      if (!$6) {
                       $8 = $1;
                       break label$23;
                      }
                      if (($6 | 0) != 37) {
                       break label$22;
                      }
                      $8 = $1;
                      while (1) {
                       if (HEAPU8[$1 + 1 | 0] != 37) {
                        break label$23;
                       }
                       $6 = $1 + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $8 + 1 | 0;
                       $7 = HEAPU8[$1 + 2 | 0];
                       $1 = $6;
                       if (($7 | 0) == 37) {
                        continue;
                       }
                       break;
                      }
                     }
                     $1 = $8 - $9 | 0;
                     if ($0) {
                      out($0, $9, $1);
                     }
                     if ($1) {
                      continue label$2;
                     }
                     $14 = -1;
                     $8 = 1;
                     $6 = $5;
                     $1 = HEAP32[$5 + 76 >> 2];
                     if (!(HEAPU8[$1 + 2 | 0] != 36 | HEAP8[HEAP32[$5 + 76 >> 2] + 1 | 0] + -48 >>> 0 >= 10)) {
                      $14 = HEAP8[$1 + 1 | 0] + -48 | 0;
                      $17 = 1;
                      $8 = 3;
                     }
                     $1 = $8 + $1 | 0;
                     HEAP32[$6 + 76 >> 2] = $1;
                     $8 = 0;
                     $15 = HEAP8[$1 | 0];
                     $7 = $15 + -32 | 0;
                     label$28 : {
                      if ($7 >>> 0 > 31) {
                       $6 = $1;
                       break label$28;
                      }
                      $6 = $1;
                      $7 = 1 << $7;
                      if (!($7 & 75913)) {
                       break label$28;
                      }
                      while (1) {
                       $6 = $1 + 1 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $7 | $8;
                       $15 = HEAP8[$1 + 1 | 0];
                       $7 = $15 + -32 | 0;
                       if ($7 >>> 0 > 31) {
                        break label$28;
                       }
                       $1 = $6;
                       $7 = 1 << $7;
                       if ($7 & 75913) {
                        continue;
                       }
                       break;
                      }
                     }
                     label$31 : {
                      if (($15 | 0) == 42) {
                       $10 = $5;
                       label$33 : {
                        label$34 : {
                         if (HEAP8[$6 + 1 | 0] + -48 >>> 0 >= 10) {
                          break label$34;
                         }
                         $1 = HEAP32[$5 + 76 >> 2];
                         if (HEAPU8[$1 + 2 | 0] != 36) {
                          break label$34;
                         }
                         HEAP32[((HEAP8[$1 + 1 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                         $11 = HEAP32[((HEAP8[$1 + 1 | 0] << 3) + $3 | 0) + -384 >> 2];
                         $17 = 1;
                         $1 = $1 + 3 | 0;
                         break label$33;
                        }
                        if ($17) {
                         break label$18;
                        }
                        $17 = 0;
                        $11 = 0;
                        if ($0) {
                         $1 = HEAP32[$2 >> 2];
                         HEAP32[$2 >> 2] = $1 + 4;
                         $11 = HEAP32[$1 >> 2];
                        }
                        $1 = HEAP32[$5 + 76 >> 2] + 1 | 0;
                       }
                       HEAP32[$10 + 76 >> 2] = $1;
                       if (($11 | 0) > -1) {
                        break label$31;
                       }
                       $11 = 0 - $11 | 0;
                       $8 = $8 | 8192;
                       break label$31;
                      }
                      $11 = getint($5 + 76 | 0);
                      if (($11 | 0) < 0) {
                       break label$18;
                      }
                      $1 = HEAP32[$5 + 76 >> 2];
                     }
                     $7 = -1;
                     label$36 : {
                      if (HEAPU8[$1 | 0] != 46) {
                       break label$36;
                      }
                      if (HEAPU8[$1 + 1 | 0] == 42) {
                       label$38 : {
                        if (HEAP8[$1 + 2 | 0] + -48 >>> 0 >= 10) {
                         break label$38;
                        }
                        $1 = HEAP32[$5 + 76 >> 2];
                        if (HEAPU8[$1 + 3 | 0] != 36) {
                         break label$38;
                        }
                        HEAP32[((HEAP8[$1 + 2 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                        $7 = HEAP32[((HEAP8[$1 + 2 | 0] << 3) + $3 | 0) + -384 >> 2];
                        $1 = $1 + 4 | 0;
                        HEAP32[$5 + 76 >> 2] = $1;
                        break label$36;
                       }
                       if ($17) {
                        break label$18;
                       }
                       if ($0) {
                        $1 = HEAP32[$2 >> 2];
                        HEAP32[$2 >> 2] = $1 + 4;
                        $7 = HEAP32[$1 >> 2];
                       } else {
                        $7 = 0;
                       }
                       $1 = HEAP32[$5 + 76 >> 2] + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $1;
                       break label$36;
                      }
                      HEAP32[$5 + 76 >> 2] = $1 + 1;
                      $7 = getint($5 + 76 | 0);
                      $1 = HEAP32[$5 + 76 >> 2];
                     }
                     $6 = 0;
                     while (1) {
                      $18 = $6;
                      $12 = -1;
                      if (HEAP8[$1 | 0] + -65 >>> 0 > 57) {
                       break label$1;
                      }
                      $15 = $1 + 1 | 0;
                      HEAP32[$5 + 76 >> 2] = $15;
                      $6 = HEAP8[$1 | 0];
                      $1 = $15;
                      $6 = HEAPU8[($6 + Math_imul($18, 58) | 0) + 17199 | 0];
                      if ($6 + -1 >>> 0 < 8) {
                       continue;
                      }
                      break;
                     }
                     if (!$6) {
                      break label$1;
                     }
                     label$42 : {
                      label$43 : {
                       label$44 : {
                        if (($6 | 0) == 19) {
                         if (($14 | 0) <= -1) {
                          break label$44;
                         }
                         break label$1;
                        }
                        if (($14 | 0) < 0) {
                         break label$43;
                        }
                        HEAP32[($14 << 2) + $4 >> 2] = $6;
                        $1 = ($14 << 3) + $3 | 0;
                        $6 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$5 + 64 >> 2] = HEAP32[$1 >> 2];
                        HEAP32[$5 + 68 >> 2] = $6;
                       }
                       $1 = 0;
                       if (!$0) {
                        continue label$2;
                       }
                       break label$42;
                      }
                      if (!$0) {
                       break label$5;
                      }
                      pop_arg($5 - -64 | 0, $6, $2);
                      $15 = HEAP32[$5 + 76 >> 2];
                     }
                     $10 = $8 & -65537;
                     $8 = $8 & 8192 ? $10 : $8;
                     $12 = 0;
                     $14 = 17236;
                     $6 = $16;
                     $1 = HEAP8[$15 + -1 | 0];
                     $1 = $18 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
                     $15 = $1 + -88 | 0;
                     if ($15 >>> 0 <= 32) {
                      break label$21;
                     }
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         $10 = $1 + -65 | 0;
                         if ($10 >>> 0 > 6) {
                          if (($1 | 0) != 83) {
                           break label$6;
                          }
                          if (!$7) {
                           break label$49;
                          }
                          $6 = HEAP32[$5 + 64 >> 2];
                          break label$47;
                         }
                         switch ($10 - 1 | 0) {
                         case 1:
                          break label$48;
                         case 0:
                         case 2:
                          break label$6;
                         default:
                          break label$17;
                         }
                        }
                        $1 = 0;
                        pad($0, 32, $11, 0, $8);
                        break label$46;
                       }
                       HEAP32[$5 + 12 >> 2] = 0;
                       HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 64 >> 2];
                       HEAP32[$5 + 64 >> 2] = $5 + 8;
                       $7 = -1;
                       $6 = $5 + 8 | 0;
                      }
                      $1 = 0;
                      label$51 : {
                       while (1) {
                        $9 = HEAP32[$6 >> 2];
                        if (!$9) {
                         break label$51;
                        }
                        $9 = wctomb($5 + 4 | 0, $9);
                        $10 = ($9 | 0) < 0;
                        if (!($10 | $9 >>> 0 > $7 - $1 >>> 0)) {
                         $6 = $6 + 4 | 0;
                         $1 = $1 + $9 | 0;
                         if ($7 >>> 0 > $1 >>> 0) {
                          continue;
                         }
                         break label$51;
                        }
                        break;
                       }
                       $12 = -1;
                       if ($10) {
                        break label$1;
                       }
                      }
                      pad($0, 32, $11, $1, $8);
                      if (!$1) {
                       $1 = 0;
                       break label$46;
                      }
                      $7 = 0;
                      $6 = HEAP32[$5 + 64 >> 2];
                      while (1) {
                       $9 = HEAP32[$6 >> 2];
                       if (!$9) {
                        break label$46;
                       }
                       $9 = wctomb($5 + 4 | 0, $9);
                       $7 = $9 + $7 | 0;
                       if (($7 | 0) > ($1 | 0)) {
                        break label$46;
                       }
                       out($0, $5 + 4 | 0, $9);
                       $6 = $6 + 4 | 0;
                       if ($7 >>> 0 < $1 >>> 0) {
                        continue;
                       }
                       break;
                      }
                     }
                     pad($0, 32, $11, $1, $8 ^ 8192);
                     $1 = ($11 | 0) > ($1 | 0) ? $11 : $1;
                     continue label$2;
                    }
                    $6 = $1 + 1 | 0;
                    HEAP32[$5 + 76 >> 2] = $6;
                    $8 = HEAPU8[$1 + 1 | 0];
                    $1 = $6;
                    continue;
                   }
                   break;
                  }
                  switch ($15 - 1 | 0) {
                  case 21:
                   break label$10;
                  case 23:
                   break label$12;
                  case 22:
                   break label$13;
                  case 11:
                  case 16:
                   break label$14;
                  case 10:
                   break label$15;
                  case 26:
                   break label$16;
                  case 8:
                  case 12:
                  case 13:
                  case 14:
                   break label$17;
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                  case 15:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 24:
                  case 25:
                  case 27:
                  case 29:
                  case 30:
                   break label$6;
                  case 28:
                   break label$9;
                  default:
                   break label$11;
                  }
                 }
                 $12 = $13;
                 if ($0) {
                  break label$1;
                 }
                 if (!$17) {
                  break label$5;
                 }
                 $1 = 1;
                 while (1) {
                  $0 = HEAP32[($1 << 2) + $4 >> 2];
                  if ($0) {
                   pop_arg(($1 << 3) + $3 | 0, $0, $2);
                   $12 = 1;
                   $1 = $1 + 1 | 0;
                   if (($1 | 0) != 10) {
                    continue;
                   }
                   break label$1;
                  }
                  break;
                 }
                 $12 = 1;
                 if ($1 >>> 0 >= 10) {
                  break label$1;
                 }
                 while (1) {
                  if (HEAP32[($1 << 2) + $4 >> 2]) {
                   break label$18;
                  }
                  $0 = $1 >>> 0 > 8;
                  $1 = $1 + 1 | 0;
                  if (!$0) {
                   continue;
                  }
                  break;
                 }
                 break label$1;
                }
                $12 = -1;
                break label$1;
               }
               $1 = FUNCTION_TABLE[203]($0, HEAPF64[$5 + 64 >> 3], $11, $7, $8, $1) | 0;
               continue;
              }
              $1 = HEAP32[$5 + 64 >> 2];
              $9 = $1 ? $1 : 17246;
              $1 = memchr($9, 0, $7);
              $6 = $1 ? $1 : $7 + $9 | 0;
              $8 = $10;
              $7 = $1 ? $1 - $9 | 0 : $7;
              break label$6;
             }
             HEAP8[$5 + 55 | 0] = HEAP32[$5 + 64 >> 2];
             $7 = 1;
             $9 = $19;
             $8 = $10;
             break label$6;
            }
            $10 = HEAP32[$5 + 68 >> 2];
            $1 = $10;
            $9 = HEAP32[$5 + 64 >> 2];
            if (($1 | 0) < -1 ? 1 : ($1 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
             $1 = 0 - ($1 + (0 < $9 >>> 0) | 0) | 0;
             $9 = 0 - $9 | 0;
             HEAP32[$5 + 64 >> 2] = $9;
             HEAP32[$5 + 68 >> 2] = $1;
             $12 = 1;
             $14 = 17236;
             break label$8;
            }
            if ($8 & 2048) {
             $12 = 1;
             $14 = 17237;
             break label$8;
            }
            $12 = $8 & 1;
            $14 = $12 ? 17238 : 17236;
            break label$8;
           }
           $9 = fmt_o(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16);
           if (!($8 & 8)) {
            break label$7;
           }
           $1 = $16 - $9 | 0;
           $7 = ($7 | 0) > ($1 | 0) ? $7 : $1 + 1 | 0;
           break label$7;
          }
          $7 = $7 >>> 0 > 8 ? $7 : 8;
          $8 = $8 | 8;
          $1 = 120;
         }
         $9 = fmt_x(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16, $1 & 32);
         if (!($8 & 8) | !(HEAP32[$5 + 64 >> 2] | HEAP32[$5 + 68 >> 2])) {
          break label$7;
         }
         $14 = ($1 >>> 4) + 17236 | 0;
         $12 = 2;
         break label$7;
        }
        $1 = 0;
        $6 = $18 & 255;
        if ($6 >>> 0 > 7) {
         continue;
        }
        label$61 : {
         switch ($6 - 1 | 0) {
         default:
          HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $13;
          continue;
         case 0:
          HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $13;
          continue;
         case 1:
          $6 = HEAP32[$5 + 64 >> 2];
          HEAP32[$6 >> 2] = $13;
          HEAP32[$6 + 4 >> 2] = $13 >> 31;
          continue;
         case 2:
          HEAP16[HEAP32[$5 + 64 >> 2] >> 1] = $13;
          continue;
         case 3:
          HEAP8[HEAP32[$5 + 64 >> 2]] = $13;
          continue;
         case 5:
          HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $13;
          continue;
         case 4:
          continue;
         case 6:
          break label$61;
         }
        }
        $6 = HEAP32[$5 + 64 >> 2];
        HEAP32[$6 >> 2] = $13;
        HEAP32[$6 + 4 >> 2] = $13 >> 31;
        continue;
       }
       $9 = HEAP32[$5 + 64 >> 2];
       $1 = HEAP32[$5 + 68 >> 2];
       $14 = 17236;
      }
      $9 = fmt_u($9, $1, $16);
     }
     $8 = ($7 | 0) > -1 ? $8 & -65537 : $8;
     $1 = HEAP32[$5 + 64 >> 2];
     $10 = HEAP32[$5 + 68 >> 2];
     label$68 : {
      if (!(!!($1 | $10) | $7)) {
       $9 = $16;
       $7 = 0;
       break label$68;
      }
      $1 = !($1 | $10) + ($16 - $9 | 0) | 0;
      $7 = ($7 | 0) > ($1 | 0) ? $7 : $1;
     }
    }
    $10 = $6 - $9 | 0;
    $7 = ($7 | 0) < ($10 | 0) ? $10 : $7;
    $6 = $7 + $12 | 0;
    $1 = ($11 | 0) < ($6 | 0) ? $6 : $11;
    pad($0, 32, $1, $6, $8);
    out($0, $14, $12);
    pad($0, 48, $1, $6, $8 ^ 65536);
    pad($0, 48, $7, $10, 0);
    out($0, $9, $10);
    pad($0, 32, $1, $6, $8 ^ 8192);
    continue;
   }
   break;
  }
  $12 = 0;
 }
 global$0 = $5 + 80 | 0;
 return $12;
}
function decfloat($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 $7 = global$0 - 8960 | 0;
 global$0 = $7;
 $22 = $3 + $4 | 0;
 $27 = 0 - $22 | 0;
 label$1 : {
  label$2 : {
   while (1) {
    label$4 : {
     if (($2 | 0) != 48) {
      if (($2 | 0) != 46) {
       break label$1;
      }
      $2 = HEAP32[$1 + 4 >> 2];
      if ($2 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$4;
      }
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$2;
     }
     $2 = HEAP32[$1 + 4 >> 2];
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $15 = 1;
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      continue;
     }
     $2 = __shgetc($1);
     $15 = 1;
     continue;
    }
    break;
   }
   $2 = __shgetc($1);
  }
  $11 = 1;
  if (($2 | 0) != 48) {
   break label$1;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   label$8 : {
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$8;
    }
    $2 = __shgetc($1);
   }
   $8 = $8 + -1 | 0;
   $10 = $10 + -1 | 0;
   if ($10 >>> 0 < 4294967295) {
    $8 = $8 + 1 | 0;
   }
   if (($2 | 0) == 48) {
    continue;
   }
   break;
  }
  $15 = 1;
 }
 HEAP32[$7 + 768 >> 2] = 0;
 label$10 : {
  label$11 : {
   $12 = ($2 | 0) == 46;
   $17 = $2 + -48 | 0;
   label$12 : {
    label$13 : {
     label$14 : {
      if ($12 | $17 >>> 0 <= 9) {
       while (1) {
        label$18 : {
         if ($12 & 1) {
          if (!$11) {
           $10 = $13;
           $8 = $9;
           $11 = 1;
           break label$18;
          }
          $15 = ($15 | 0) != 0;
          break label$14;
         }
         $12 = $9;
         $9 = $13 + 1 | 0;
         if ($9 >>> 0 < 1) {
          $12 = $12 + 1 | 0;
         }
         $13 = $9;
         $9 = $12;
         if (($14 | 0) <= 2044) {
          $21 = ($2 | 0) != 48 ? $13 : $21;
          $12 = ($7 + 768 | 0) + ($14 << 2) | 0;
          $15 = $12;
          if ($16) {
           $17 = (Math_imul(HEAP32[$12 >> 2], 10) + $2 | 0) + -48 | 0;
          }
          HEAP32[$15 >> 2] = $17;
          $15 = 1;
          $12 = $16 + 1 | 0;
          $2 = ($12 | 0) == 9;
          $16 = $2 ? 0 : $12;
          $14 = $2 + $14 | 0;
          break label$18;
         }
         if (($2 | 0) == 48) {
          break label$18;
         }
         HEAP32[$7 + 8944 >> 2] = HEAP32[$7 + 8944 >> 2] | 1;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        label$24 : {
         if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$1 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$24;
         }
         $2 = __shgetc($1);
        }
        $12 = ($2 | 0) == 46;
        $17 = $2 + -48 | 0;
        if ($12 | $17 >>> 0 < 10) {
         continue;
        }
        break;
       }
      }
      $10 = $11 ? $10 : $13;
      $8 = $11 ? $8 : $9;
      if (!(!$15 | ($2 | 32) != 101)) {
       $2 = scanexp($1, $6);
       $12 = i64toi32_i32$HIGH_BITS;
       $11 = $12;
       label$27 : {
        if ($2 | ($11 | 0) != -2147483648) {
         break label$27;
        }
        if (!$6) {
         break label$12;
        }
        $2 = 0;
        $11 = 0;
        if (!HEAP32[$1 + 104 >> 2]) {
         break label$27;
        }
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
       }
       $8 = $8 + $11 | 0;
       $1 = $2 + $10 | 0;
       if ($1 >>> 0 < $2 >>> 0) {
        $8 = $8 + 1 | 0;
       }
       $10 = $1;
       break label$11;
      }
      $15 = ($15 | 0) != 0;
      if (($2 | 0) < 0) {
       break label$13;
      }
     }
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$13;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
    }
    if ($15) {
     break label$11;
    }
    HEAP32[12002] = 28;
   }
   $13 = 0;
   $9 = 0;
   __shlim($1, 0, 0);
   $2 = 0;
   $1 = 0;
   break label$10;
  }
  $1 = HEAP32[$7 + 768 >> 2];
  if (!$1) {
   __extenddftf2($7, +($5 | 0) * 0);
   $13 = HEAP32[$7 >> 2];
   $9 = HEAP32[$7 + 4 >> 2];
   $2 = HEAP32[$7 + 12 >> 2];
   $1 = HEAP32[$7 + 8 >> 2];
   break label$10;
  }
  if (!(($10 | 0) != ($13 | 0) | ($8 | 0) != ($9 | 0) | (($9 | 0) > 0 ? 1 : ($9 | 0) >= 0 ? $13 >>> 0 <= 9 ? 0 : 1 : 0) | ($1 >>> $3 ? ($3 | 0) <= 30 : 0))) {
   __floatunsitf($7 + 32 | 0, $1);
   __floatsitf($7 + 48 | 0, $5);
   __multf3($7 + 16 | 0, HEAP32[$7 + 48 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 60 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 44 >> 2]);
   $13 = HEAP32[$7 + 16 >> 2];
   $9 = HEAP32[$7 + 20 >> 2];
   $2 = HEAP32[$7 + 28 >> 2];
   $1 = HEAP32[$7 + 24 >> 2];
   break label$10;
  }
  $1 = ($4 | 0) / -2 | 0;
  $2 = $10 >>> 0 <= $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) > ($1 | 0) ? 1 : ($8 | 0) >= ($1 | 0) ? $2 : 0) {
   __floatsitf($7 + 96 | 0, $5);
   __multf3($7 + 80 | 0, HEAP32[$7 + 96 >> 2], HEAP32[$7 + 100 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 108 >> 2], -1, -1, -1, 2147418111);
   __multf3($7 - -64 | 0, HEAP32[$7 + 80 >> 2], HEAP32[$7 + 84 >> 2], HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], -1, -1, -1, 2147418111);
   HEAP32[12002] = 68;
   $13 = HEAP32[$7 + 64 >> 2];
   $9 = HEAP32[$7 + 68 >> 2];
   $2 = HEAP32[$7 + 76 >> 2];
   $1 = HEAP32[$7 + 72 >> 2];
   break label$10;
  }
  $1 = $4 + -226 | 0;
  $2 = $10 >>> 0 >= $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) < ($1 | 0) ? 1 : ($8 | 0) <= ($1 | 0) ? $2 : 0) {
   __floatsitf($7 + 144 | 0, $5);
   __multf3($7 + 128 | 0, HEAP32[$7 + 144 >> 2], HEAP32[$7 + 148 >> 2], HEAP32[$7 + 152 >> 2], HEAP32[$7 + 156 >> 2], 0, 0, 0, 65536);
   __multf3($7 + 112 | 0, HEAP32[$7 + 128 >> 2], HEAP32[$7 + 132 >> 2], HEAP32[$7 + 136 >> 2], HEAP32[$7 + 140 >> 2], 0, 0, 0, 65536);
   HEAP32[12002] = 68;
   $13 = HEAP32[$7 + 112 >> 2];
   $9 = HEAP32[$7 + 116 >> 2];
   $2 = HEAP32[$7 + 124 >> 2];
   $1 = HEAP32[$7 + 120 >> 2];
   break label$10;
  }
  if ($16) {
   if (($16 | 0) <= 8) {
    $2 = ($7 + 768 | 0) + ($14 << 2) | 0;
    $1 = HEAP32[$2 >> 2];
    while (1) {
     $1 = Math_imul($1, 10);
     $6 = ($16 | 0) < 8;
     $16 = $16 + 1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
    HEAP32[$2 >> 2] = $1;
   }
   $14 = $14 + 1 | 0;
  }
  label$35 : {
   $11 = $10;
   if (($21 | 0) > 8 | ($21 | 0) > ($11 | 0) | ($11 | 0) > 17) {
    break label$35;
   }
   if (($11 | 0) == 9) {
    __floatunsitf($7 + 176 | 0, HEAP32[$7 + 768 >> 2]);
    __floatsitf($7 + 192 | 0, $5);
    __multf3($7 + 160 | 0, HEAP32[$7 + 192 >> 2], HEAP32[$7 + 196 >> 2], HEAP32[$7 + 200 >> 2], HEAP32[$7 + 204 >> 2], HEAP32[$7 + 176 >> 2], HEAP32[$7 + 180 >> 2], HEAP32[$7 + 184 >> 2], HEAP32[$7 + 188 >> 2]);
    $13 = HEAP32[$7 + 160 >> 2];
    $9 = HEAP32[$7 + 164 >> 2];
    $2 = HEAP32[$7 + 172 >> 2];
    $1 = HEAP32[$7 + 168 >> 2];
    break label$10;
   }
   if (($11 | 0) <= 8) {
    __floatunsitf($7 + 256 | 0, HEAP32[$7 + 768 >> 2]);
    __floatsitf($7 + 272 | 0, $5);
    __multf3($7 + 240 | 0, HEAP32[$7 + 272 >> 2], HEAP32[$7 + 276 >> 2], HEAP32[$7 + 280 >> 2], HEAP32[$7 + 284 >> 2], HEAP32[$7 + 256 >> 2], HEAP32[$7 + 260 >> 2], HEAP32[$7 + 264 >> 2], HEAP32[$7 + 268 >> 2]);
    __floatsitf($7 + 224 | 0, HEAP32[(0 - $11 << 2) + 23504 >> 2]);
    __divtf3($7 + 208 | 0, HEAP32[$7 + 240 >> 2], HEAP32[$7 + 244 >> 2], HEAP32[$7 + 248 >> 2], HEAP32[$7 + 252 >> 2], HEAP32[$7 + 224 >> 2], HEAP32[$7 + 228 >> 2], HEAP32[$7 + 232 >> 2], HEAP32[$7 + 236 >> 2]);
    $13 = HEAP32[$7 + 208 >> 2];
    $9 = HEAP32[$7 + 212 >> 2];
    $2 = HEAP32[$7 + 220 >> 2];
    $1 = HEAP32[$7 + 216 >> 2];
    break label$10;
   }
   $1 = (Math_imul($11, -3) + $3 | 0) + 27 | 0;
   $2 = HEAP32[$7 + 768 >> 2];
   if ($2 >>> $1 ? ($1 | 0) <= 30 : 0) {
    break label$35;
   }
   __floatunsitf($7 + 336 | 0, $2);
   __floatsitf($7 + 352 | 0, $5);
   __multf3($7 + 320 | 0, HEAP32[$7 + 352 >> 2], HEAP32[$7 + 356 >> 2], HEAP32[$7 + 360 >> 2], HEAP32[$7 + 364 >> 2], HEAP32[$7 + 336 >> 2], HEAP32[$7 + 340 >> 2], HEAP32[$7 + 344 >> 2], HEAP32[$7 + 348 >> 2]);
   __floatsitf($7 + 304 | 0, HEAP32[($11 << 2) + 23432 >> 2]);
   __multf3($7 + 288 | 0, HEAP32[$7 + 320 >> 2], HEAP32[$7 + 324 >> 2], HEAP32[$7 + 328 >> 2], HEAP32[$7 + 332 >> 2], HEAP32[$7 + 304 >> 2], HEAP32[$7 + 308 >> 2], HEAP32[$7 + 312 >> 2], HEAP32[$7 + 316 >> 2]);
   $13 = HEAP32[$7 + 288 >> 2];
   $9 = HEAP32[$7 + 292 >> 2];
   $2 = HEAP32[$7 + 300 >> 2];
   $1 = HEAP32[$7 + 296 >> 2];
   break label$10;
  }
  $16 = 0;
  $1 = ($11 | 0) % 9 | 0;
  label$38 : {
   if (!$1) {
    $2 = 0;
    break label$38;
   }
   $6 = ($11 | 0) > -1 ? $1 : $1 + 9 | 0;
   label$40 : {
    if (!$14) {
     $2 = 0;
     $14 = 0;
     break label$40;
    }
    $8 = HEAP32[(0 - $6 << 2) + 23504 >> 2];
    $12 = 1e9 / ($8 | 0) | 0;
    $15 = 0;
    $1 = 0;
    $2 = 0;
    while (1) {
     $10 = $15;
     $9 = ($7 + 768 | 0) + ($1 << 2) | 0;
     $13 = HEAP32[$9 >> 2];
     $15 = ($13 >>> 0) / ($8 >>> 0) | 0;
     $10 = $10 + $15 | 0;
     HEAP32[$9 >> 2] = $10;
     $10 = !$10 & ($1 | 0) == ($2 | 0);
     $2 = $10 ? $2 + 1 & 2047 : $2;
     $11 = $10 ? $11 + -9 | 0 : $11;
     $15 = Math_imul($12, $13 - Math_imul($8, $15) | 0);
     $1 = $1 + 1 | 0;
     if (($14 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    if (!$15) {
     break label$40;
    }
    HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2] = $15;
    $14 = $14 + 1 | 0;
   }
   $11 = ($11 - $6 | 0) + 9 | 0;
  }
  while (1) {
   $13 = ($7 + 768 | 0) + ($2 << 2) | 0;
   label$44 : {
    while (1) {
     if (($11 | 0) != 36 | HEAPU32[$13 >> 2] >= 10384593 ? ($11 | 0) >= 36 : 0) {
      break label$44;
     }
     $17 = $14 + 2047 | 0;
     $15 = 0;
     $12 = $14;
     while (1) {
      $14 = $12;
      $9 = $17 & 2047;
      $17 = ($7 + 768 | 0) + ($9 << 2) | 0;
      $1 = HEAP32[$17 >> 2];
      $8 = $1 >>> 3;
      $6 = $1 << 29;
      $1 = $6 + $15 | 0;
      $12 = $1 >>> 0 < $6 >>> 0 ? $8 + 1 | 0 : $8;
      $10 = $1;
      $8 = $12;
      $6 = 0;
      label$48 : {
       if (!$8 & $1 >>> 0 < 1000000001 | $8 >>> 0 < 0) {
        break label$48;
       }
       $6 = __wasm_i64_udiv($1, $8, 1e9);
       $10 = $10 - __wasm_i64_mul($6, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
      }
      $15 = $6;
      HEAP32[$17 >> 2] = $10;
      $12 = ($9 | 0) != ($14 + -1 & 2047) ? $14 : ($2 | 0) == ($9 | 0) ? $14 : $10 ? $14 : $9;
      $17 = $9 + -1 | 0;
      if (($2 | 0) != ($9 | 0)) {
       continue;
      }
      break;
     }
     $16 = $16 + -29 | 0;
     if (!$15) {
      continue;
     }
     break;
    }
    $2 = $2 + -1 & 2047;
    if (($12 | 0) == ($2 | 0)) {
     $1 = ($7 + 768 | 0) + (($12 + 2046 & 2047) << 2) | 0;
     $14 = $12 + -1 & 2047;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2];
    }
    $11 = $11 + 9 | 0;
    HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2] = $15;
    continue;
   }
   break;
  }
  label$50 : {
   label$51 : while (1) {
    $6 = $14 + 1 & 2047;
    $10 = ($7 + 768 | 0) + (($14 + -1 & 2047) << 2) | 0;
    while (1) {
     $8 = ($11 | 0) > 45 ? 9 : 1;
     label$53 : {
      while (1) {
       $12 = $2;
       $1 = 0;
       label$55 : {
        while (1) {
         label$57 : {
          $2 = $1 + $12 & 2047;
          if (($2 | 0) == ($14 | 0)) {
           break label$57;
          }
          $2 = HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2];
          $9 = HEAP32[($1 << 2) + 23456 >> 2];
          if ($2 >>> 0 < $9 >>> 0) {
           break label$57;
          }
          if ($2 >>> 0 > $9 >>> 0) {
           break label$55;
          }
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue;
          }
         }
         break;
        }
        if (($11 | 0) != 36) {
         break label$55;
        }
        $10 = 0;
        $8 = 0;
        $1 = 0;
        $13 = 0;
        $9 = 0;
        while (1) {
         $2 = $1 + $12 & 2047;
         if (($2 | 0) == ($14 | 0)) {
          $14 = $14 + 1 & 2047;
          HEAP32[(($14 << 2) + $7 | 0) + 764 >> 2] = 0;
         }
         __multf3($7 + 752 | 0, $10, $8, $13, $9, 0, 0, 1342177280, 1075633366);
         __floatunsitf($7 + 736 | 0, HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2]);
         __addtf3($7 + 720 | 0, HEAP32[$7 + 752 >> 2], HEAP32[$7 + 756 >> 2], HEAP32[$7 + 760 >> 2], HEAP32[$7 + 764 >> 2], HEAP32[$7 + 736 >> 2], HEAP32[$7 + 740 >> 2], HEAP32[$7 + 744 >> 2], HEAP32[$7 + 748 >> 2]);
         $13 = HEAP32[$7 + 728 >> 2];
         $9 = HEAP32[$7 + 732 >> 2];
         $10 = HEAP32[$7 + 720 >> 2];
         $8 = HEAP32[$7 + 724 >> 2];
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 4) {
          continue;
         }
         break;
        }
        __floatsitf($7 + 704 | 0, $5);
        __multf3($7 + 688 | 0, $10, $8, $13, $9, HEAP32[$7 + 704 >> 2], HEAP32[$7 + 708 >> 2], HEAP32[$7 + 712 >> 2], HEAP32[$7 + 716 >> 2]);
        $13 = HEAP32[$7 + 696 >> 2];
        $9 = HEAP32[$7 + 700 >> 2];
        $10 = 0;
        $8 = 0;
        $2 = HEAP32[$7 + 688 >> 2];
        $11 = HEAP32[$7 + 692 >> 2];
        $15 = $16 + 113 | 0;
        $4 = $15 - $4 | 0;
        $6 = ($4 | 0) < ($3 | 0);
        $3 = $6 ? ($4 | 0) > 0 ? $4 : 0 : $3;
        if (($3 | 0) <= 112) {
         break label$53;
        }
        break label$50;
       }
       $16 = $8 + $16 | 0;
       $2 = $14;
       if (($12 | 0) == ($2 | 0)) {
        continue;
       }
       break;
      }
      $9 = 1e9 >>> $8;
      $13 = -1 << $8 ^ -1;
      $1 = 0;
      $2 = $12;
      while (1) {
       $15 = ($7 + 768 | 0) + ($12 << 2) | 0;
       $17 = HEAP32[$15 >> 2];
       $1 = ($17 >>> $8) + $1 | 0;
       HEAP32[$15 >> 2] = $1;
       $1 = !$1 & ($2 | 0) == ($12 | 0);
       $2 = $1 ? $2 + 1 & 2047 : $2;
       $11 = $1 ? $11 + -9 | 0 : $11;
       $1 = Math_imul($9, $13 & $17);
       $12 = $12 + 1 & 2047;
       if (($12 | 0) != ($14 | 0)) {
        continue;
       }
       break;
      }
      if (!$1) {
       continue;
      }
      if (($2 | 0) != ($6 | 0)) {
       HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2] = $1;
       $14 = $6;
       continue label$51;
      }
      HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 1;
      $2 = $6;
      continue;
     }
     break;
    }
    break;
   }
   __extenddftf2($7 + 640 | 0, scalbn(1, 225 - $3 | 0));
   copysignl($7 + 672 | 0, HEAP32[$7 + 640 >> 2], HEAP32[$7 + 644 >> 2], HEAP32[$7 + 648 >> 2], HEAP32[$7 + 652 >> 2], $2, $11, $13, $9);
   $23 = HEAP32[$7 + 680 >> 2];
   $24 = HEAP32[$7 + 684 >> 2];
   $25 = HEAP32[$7 + 672 >> 2];
   $26 = HEAP32[$7 + 676 >> 2];
   __extenddftf2($7 + 624 | 0, scalbn(1, 113 - $3 | 0));
   fmodl($7 + 656 | 0, $2, $11, $13, $9, HEAP32[$7 + 624 >> 2], HEAP32[$7 + 628 >> 2], HEAP32[$7 + 632 >> 2], HEAP32[$7 + 636 >> 2]);
   $10 = HEAP32[$7 + 656 >> 2];
   $8 = HEAP32[$7 + 660 >> 2];
   $18 = HEAP32[$7 + 664 >> 2];
   $19 = HEAP32[$7 + 668 >> 2];
   __subtf3($7 + 608 | 0, $2, $11, $13, $9, $10, $8, $18, $19);
   __addtf3($7 + 592 | 0, $25, $26, $23, $24, HEAP32[$7 + 608 >> 2], HEAP32[$7 + 612 >> 2], HEAP32[$7 + 616 >> 2], HEAP32[$7 + 620 >> 2]);
   $13 = HEAP32[$7 + 600 >> 2];
   $9 = HEAP32[$7 + 604 >> 2];
   $2 = HEAP32[$7 + 592 >> 2];
   $11 = HEAP32[$7 + 596 >> 2];
  }
  $1 = $12 + 4 & 2047;
  label$62 : {
   if (($1 | 0) == ($14 | 0)) {
    break label$62;
   }
   $1 = HEAP32[($7 + 768 | 0) + ($1 << 2) >> 2];
   label$63 : {
    if ($1 >>> 0 <= 499999999) {
     if (($12 + 5 & 2047) == ($14 | 0) ? !$1 : 0) {
      break label$63;
     }
     __extenddftf2($7 + 480 | 0, +($5 | 0) * .25);
     __addtf3($7 + 464 | 0, $10, $8, $18, $19, HEAP32[$7 + 480 >> 2], HEAP32[$7 + 484 >> 2], HEAP32[$7 + 488 >> 2], HEAP32[$7 + 492 >> 2]);
     $18 = HEAP32[$7 + 472 >> 2];
     $19 = HEAP32[$7 + 476 >> 2];
     $10 = HEAP32[$7 + 464 >> 2];
     $8 = HEAP32[$7 + 468 >> 2];
     break label$63;
    }
    if (($1 | 0) != 5e8) {
     __extenddftf2($7 + 576 | 0, +($5 | 0) * .75);
     __addtf3($7 + 560 | 0, $10, $8, $18, $19, HEAP32[$7 + 576 >> 2], HEAP32[$7 + 580 >> 2], HEAP32[$7 + 584 >> 2], HEAP32[$7 + 588 >> 2]);
     $18 = HEAP32[$7 + 568 >> 2];
     $19 = HEAP32[$7 + 572 >> 2];
     $10 = HEAP32[$7 + 560 >> 2];
     $8 = HEAP32[$7 + 564 >> 2];
     break label$63;
    }
    $20 = +($5 | 0);
    if (($12 + 5 & 2047) == ($14 | 0)) {
     __extenddftf2($7 + 512 | 0, $20 * .5);
     __addtf3($7 + 496 | 0, $10, $8, $18, $19, HEAP32[$7 + 512 >> 2], HEAP32[$7 + 516 >> 2], HEAP32[$7 + 520 >> 2], HEAP32[$7 + 524 >> 2]);
     $18 = HEAP32[$7 + 504 >> 2];
     $19 = HEAP32[$7 + 508 >> 2];
     $10 = HEAP32[$7 + 496 >> 2];
     $8 = HEAP32[$7 + 500 >> 2];
     break label$63;
    }
    __extenddftf2($7 + 544 | 0, $20 * .75);
    __addtf3($7 + 528 | 0, $10, $8, $18, $19, HEAP32[$7 + 544 >> 2], HEAP32[$7 + 548 >> 2], HEAP32[$7 + 552 >> 2], HEAP32[$7 + 556 >> 2]);
    $18 = HEAP32[$7 + 536 >> 2];
    $19 = HEAP32[$7 + 540 >> 2];
    $10 = HEAP32[$7 + 528 >> 2];
    $8 = HEAP32[$7 + 532 >> 2];
   }
   if (($3 | 0) > 111) {
    break label$62;
   }
   fmodl($7 + 448 | 0, $10, $8, $18, $19, 0, 0, 0, 1073676288);
   if (__letf2(HEAP32[$7 + 448 >> 2], HEAP32[$7 + 452 >> 2], HEAP32[$7 + 456 >> 2], HEAP32[$7 + 460 >> 2], 0, 0, 0, 0)) {
    break label$62;
   }
   __addtf3($7 + 432 | 0, $10, $8, $18, $19, 0, 0, 0, 1073676288);
   $18 = HEAP32[$7 + 440 >> 2];
   $19 = HEAP32[$7 + 444 >> 2];
   $10 = HEAP32[$7 + 432 >> 2];
   $8 = HEAP32[$7 + 436 >> 2];
  }
  __addtf3($7 + 416 | 0, $2, $11, $13, $9, $10, $8, $18, $19);
  __subtf3($7 + 400 | 0, HEAP32[$7 + 416 >> 2], HEAP32[$7 + 420 >> 2], HEAP32[$7 + 424 >> 2], HEAP32[$7 + 428 >> 2], $25, $26, $23, $24);
  $13 = HEAP32[$7 + 408 >> 2];
  $9 = HEAP32[$7 + 412 >> 2];
  $2 = HEAP32[$7 + 400 >> 2];
  $11 = HEAP32[$7 + 404 >> 2];
  label$67 : {
   if (($15 & 2147483647) <= (-2 - $22 | 0)) {
    break label$67;
   }
   __multf3($7 + 384 | 0, $2, $11, $13, $9, 0, 0, 0, 1073610752);
   $5 = __letf2($10, $8, $18, $19, 0, 0, 0, 0);
   $20 = Math_abs(__trunctfdf2($2, $11, $13, $9));
   $1 = $20 >= 1.0384593717069655e+34;
   $13 = $1 ? HEAP32[$7 + 392 >> 2] : $13;
   $9 = $1 ? HEAP32[$7 + 396 >> 2] : $9;
   $2 = $1 ? HEAP32[$7 + 384 >> 2] : $2;
   $11 = $1 ? HEAP32[$7 + 388 >> 2] : $11;
   $16 = $1 + $16 | 0;
   if (($16 + 110 | 0) <= ($27 | 0) ? !($6 & ($1 ^ 1 | ($3 | 0) != ($4 | 0)) & ($5 | 0) != 0) : 0) {
    break label$67;
   }
   HEAP32[12002] = 68;
  }
  scalbnl($7 + 368 | 0, $2, $11, $13, $9, $16);
  $13 = HEAP32[$7 + 368 >> 2];
  $9 = HEAP32[$7 + 372 >> 2];
  $2 = HEAP32[$7 + 380 >> 2];
  $1 = HEAP32[$7 + 376 >> 2];
 }
 HEAP32[$0 >> 2] = $13;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 global$0 = $7 + 8960 | 0;
}
function ObjExport__addMesh_28PicGroupDef_20const__2c_20Mesh__2c_20Mat4_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0);
 HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 20 >> 2];
  if (!$5) {
   break label$1;
  }
  $4 = 1;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, 14879, 15), HEAP32[$0 + 12 >> 2]), 4537, 1);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2], 14895, 94);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2], 14990, 5), HEAPF32[$1 + 40 >> 2]), 4535, 1), HEAPF32[$1 + 44 >> 2]), 4535, 1), HEAPF32[$1 + 48 >> 2]), 4537, 1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 14996, 8), HEAP32[$0 + 12 >> 2]), 4537, 1);
 if ($4) {
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 15005, 15), HEAP32[$0 + 12 >> 2]), 4537, 1);
 }
 $4 = HEAP32[$2 + 12 >> 2];
 $9 = $4;
 $5 = HEAP32[$2 + 8 >> 2];
 if (($5 | 0) != ($4 | 0)) {
  $1 = 0;
  $4 = $5;
  while (1) {
   $5 = Math_imul($1, 12) + $4 | 0;
   $13 = HEAPF32[$5 + 4 >> 2];
   $16 = HEAPF32[$3 + 20 >> 2];
   $14 = HEAPF32[$5 >> 2];
   $17 = HEAPF32[$3 + 4 >> 2];
   $15 = HEAPF32[$5 + 8 >> 2];
   $18 = HEAPF32[$3 + 36 >> 2];
   $19 = HEAPF32[$3 + 52 >> 2];
   $20 = HEAPF32[$3 + 16 >> 2];
   $21 = HEAPF32[$3 >> 2];
   $22 = HEAPF32[$3 + 32 >> 2];
   $6 = HEAPF32[$3 + 48 >> 2];
   $23 = HEAPF32[$3 + 56 >> 2];
   $24 = HEAPF32[$3 + 40 >> 2];
   $25 = HEAPF32[$3 + 8 >> 2];
   $26 = HEAPF32[$3 + 24 >> 2];
   $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4532, 2);
   $6 = Math_fround($6 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($13 * $20)) + Math_fround($15 * $22)));
   $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($4, +Math_fround(Math_abs($6)) < 1e-5 ? Math_fround(0) : $6), 4535, 1);
   $6 = Math_fround($19 + Math_fround(Math_fround(Math_fround($14 * $17) + Math_fround($13 * $16)) + Math_fround($15 * $18)));
   $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($4, +Math_fround(Math_abs($6)) < 1e-5 ? Math_fround(0) : $6), 4535, 1);
   $6 = Math_fround($23 + Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround($13 * $26)) + Math_fround($15 * $24)));
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($4, +Math_fround(Math_abs($6)) < 1e-5 ? Math_fround(0) : $6), 4537, 1);
   $1 = $1 + 1 | 0;
   $9 = HEAP32[$2 + 12 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   if ($1 >>> 0 < ($9 - $4 | 0) / 12 >>> 0) {
    continue;
   }
   break;
  }
 }
 $5 = HEAP32[$2 + 116 >> 2];
 label$5 : {
  label$6 : {
   if ($5 + -1 >>> 0 < 3) {
    $1 = HEAP32[$2 + 68 >> 2];
    if (($1 | 0) == HEAP32[$2 + 72 >> 2]) {
     break label$5;
    }
    $9 = $5 + 1 | 0;
    $3 = 0;
    $4 = $5 + -2 | 0;
    $5 = $4 >>> 0 > 1;
    while (1) {
     if (!$5) {
      label$10 : {
       if (!($4 - 1)) {
        $8 = ($3 << 1) + $1 | 0;
        $1 = HEAP32[$0 + 4 >> 2];
        $10 = HEAPU16[$8 >> 1] + $1 | 0;
        $11 = $1 + HEAPU16[$8 + 6 >> 1] | 0;
        $7 = $1 + HEAPU16[$8 + 4 >> 1] | 0;
        $12 = $1 + HEAPU16[$8 + 2 >> 1] | 0;
        if (HEAPU8[$0 | 0]) {
         $1 = HEAPU8[$0 + 1 | 0];
         $8 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4539, 2), $10);
         if ($1) {
          std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($8, 15021, 1), $10), 4535, 1), $12), 15021, 1), $12), 4535, 1), $7), 15021, 1), $7), 4537, 1);
          $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4539, 2), $10), 15021, 1), $10), 4535, 1), $7), 15021, 1), $7), 4535, 1), $11), 15021, 1), $11);
          break label$10;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($8, 4535, 1), $12), 4535, 1), $7), 4537, 1);
         $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4539, 2), $10), 4535, 1), $7), 4535, 1), $11);
         break label$10;
        }
        $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4539, 2), $10), 4535, 1), $12), 4535, 1), $7), 4535, 1), $11);
        break label$10;
       }
       $7 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], 4539, 2);
       $1 = $3 << 1;
       $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29($7, HEAP32[$0 + 4 >> 2] + HEAPU16[$1 + HEAP32[$2 + 68 >> 2] >> 1] | 0), 4535, 1), HEAP32[$0 + 4 >> 2] + HEAPU16[($1 + HEAP32[$2 + 68 >> 2] | 0) + 2 >> 1] | 0), 4535, 1), HEAP32[$0 + 4 >> 2] + HEAPU16[($1 + HEAP32[$2 + 68 >> 2] | 0) + 4 >> 1] | 0);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($1, 4537, 1);
     }
     $3 = $3 + $9 | 0;
     $1 = HEAP32[$2 + 68 >> 2];
     if ($3 >>> 0 < HEAP32[$2 + 72 >> 2] - $1 >> 1 >>> 0) {
      continue;
     }
     break;
    }
    break label$6;
   }
   $0 = __cxa_allocate_exception(8) | 0;
   HCException__HCException_28char_20const__29($0, 4518);
   __cxa_throw($0 | 0, 1364, 1);
   abort();
  }
  $9 = HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[$2 + 8 >> 2];
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + (($9 - $4 | 0) / 12 | 0);
}
function vfscanf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $7 = global$0 - 304 | 0;
 global$0 = $7;
 $4 = HEAPU8[$1 | 0];
 label$3 : {
  if (!$4) {
   break label$3;
  }
  label$4 : {
   while (1) {
    label$6 : {
     $4 = $4 & 255;
     label$7 : {
      if (($4 | 0) == 32 | $4 + -9 >>> 0 < 5) {
       while (1) {
        $4 = $1;
        $1 = $1 + 1 | 0;
        $3 = HEAPU8[$4 + 1 | 0];
        if (($3 | 0) == 32 | $3 + -9 >>> 0 < 5) {
         continue;
        }
        break;
       }
       __shlim($0, 0, 0);
       while (1) {
        $1 = HEAP32[$0 + 4 >> 2];
        label$11 : {
         if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $1 + 1;
          $1 = HEAPU8[$1 | 0];
          break label$11;
         }
         $1 = __shgetc($0);
        }
        if (($1 | 0) == 32 | $1 + -9 >>> 0 < 5) {
         continue;
        }
        break;
       }
       label$13 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $1 = HEAP32[$0 + 4 >> 2];
         break label$13;
        }
        $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $1;
       }
       $3 = $1 - HEAP32[$0 + 8 >> 2] | 0;
       $1 = $3;
       $3 = $3 >> 31;
       $5 = $1;
       $9 = $8 + HEAP32[$0 + 124 >> 2] | 0;
       $1 = $10 + HEAP32[$0 + 120 >> 2] | 0;
       if ($1 >>> 0 < $10 >>> 0) {
        $9 = $9 + 1 | 0;
       }
       $8 = $5 + $1 | 0;
       $3 = $3 + $9 | 0;
       $10 = $8;
       $8 = $8 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
       break label$7;
      }
      label$15 : {
       label$16 : {
        label$17 : {
         $4 = HEAPU8[$1 | 0];
         if (($4 | 0) == 37) {
          $3 = HEAPU8[$1 + 1 | 0];
          if (($3 | 0) == 42) {
           break label$17;
          }
          if (($3 | 0) != 37) {
           break label$16;
          }
         }
         __shlim($0, 0, 0);
         $4 = (($4 | 0) == 37) + $1 | 0;
         $1 = HEAP32[$0 + 4 >> 2];
         label$19 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1 + 1;
           $1 = HEAPU8[$1 | 0];
           break label$19;
          }
          $1 = __shgetc($0);
         }
         if (($1 | 0) != HEAPU8[$4 | 0]) {
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
          }
          $16 = 0;
          if (($1 | 0) >= 0) {
           break label$3;
          }
          break label$6;
         }
         $1 = $10 + 1 | 0;
         if ($1 >>> 0 < 1) {
          $8 = $8 + 1 | 0;
         }
         $10 = $1;
         break label$7;
        }
        $4 = $1 + 2 | 0;
        $9 = 0;
        break label$15;
       }
       if (!(HEAPU8[$1 + 2 | 0] != 36 | $3 + -48 >>> 0 >= 10)) {
        $4 = $1 + 3 | 0;
        $9 = arg_n($2, HEAPU8[$1 + 1 | 0] + -48 | 0);
        break label$15;
       }
       $4 = $1 + 1 | 0;
       $9 = HEAP32[$2 >> 2];
       $2 = $2 + 4 | 0;
      }
      $16 = 0;
      $1 = 0;
      if (HEAPU8[$4 | 0] + -48 >>> 0 < 10) {
       while (1) {
        $1 = (HEAPU8[$4 | 0] + Math_imul($1, 10) | 0) + -48 | 0;
        $3 = HEAPU8[$4 + 1 | 0];
        $4 = $4 + 1 | 0;
        if ($3 + -48 >>> 0 < 10) {
         continue;
        }
        break;
       }
      }
      $3 = $4;
      $6 = HEAPU8[$3 | 0];
      label$26 : {
       if (($6 | 0) != 109) {
        break label$26;
       }
       $11 = 0;
       $16 = ($9 | 0) != 0;
       $6 = HEAPU8[$4 + 1 | 0];
       $12 = 0;
       $3 = $4 + 1 | 0;
      }
      $5 = ($6 & 255) + -65 | 0;
      if ($5 >>> 0 > 57) {
       break label$6;
      }
      $4 = $3 + 1 | 0;
      $6 = 3;
      label$27 : {
       label$28 : {
        switch ($5 - 1 | 0) {
        case 38:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 104;
         $4 = $3 ? $5 : $4;
         $6 = $3 ? -2 : -1;
         break label$27;
        case 42:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 108;
         $4 = $3 ? $5 : $4;
         $6 = $3 ? 3 : 1;
         break label$27;
        case 50:
        case 56:
         $6 = 1;
         break label$27;
        case 10:
         $6 = 2;
         break label$27;
        case 40:
         break label$27;
        case 0:
        case 2:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 41:
        case 43:
        case 47:
        case 48:
        case 52:
        case 53:
        case 55:
         break label$6;
        default:
         break label$28;
        }
       }
       $6 = 0;
       $4 = $3;
      }
      $5 = HEAPU8[$4 | 0];
      $3 = ($5 & 47) == 3;
      $17 = $3 ? 1 : $6;
      $13 = $3 ? $5 | 32 : $5;
      label$33 : {
       if (($13 | 0) == 91) {
        break label$33;
       }
       label$34 : {
        if (($13 | 0) != 110) {
         if (($13 | 0) != 99) {
          break label$34;
         }
         $1 = ($1 | 0) > 1 ? $1 : 1;
         break label$33;
        }
        store_int($9, $17, $10, $8);
        break label$7;
       }
       __shlim($0, 0, 0);
       while (1) {
        $3 = HEAP32[$0 + 4 >> 2];
        label$37 : {
         if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $3 + 1;
          $3 = HEAPU8[$3 | 0];
          break label$37;
         }
         $3 = __shgetc($0);
        }
        if (($3 | 0) == 32 | $3 + -9 >>> 0 < 5) {
         continue;
        }
        break;
       }
       label$39 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $3 = HEAP32[$0 + 4 >> 2];
         break label$39;
        }
        $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $3;
       }
       $5 = $3 - HEAP32[$0 + 8 >> 2] | 0;
       $3 = $5;
       $5 = $3 >> 31;
       $19 = $3;
       $15 = $8 + HEAP32[$0 + 124 >> 2] | 0;
       $8 = $10 + HEAP32[$0 + 120 >> 2] | 0;
       if ($8 >>> 0 < $10 >>> 0) {
        $15 = $15 + 1 | 0;
       }
       $3 = $8;
       $10 = $19 + $3 | 0;
       $8 = $5 + $15 | 0;
       $8 = $10 >>> 0 < $3 >>> 0 ? $8 + 1 | 0 : $8;
      }
      $3 = $1 >> 31;
      $19 = $3;
      $15 = $1;
      __shlim($0, $1, $3);
      $5 = HEAP32[$0 + 4 >> 2];
      $3 = HEAP32[$0 + 104 >> 2];
      label$41 : {
       if ($5 >>> 0 < $3 >>> 0) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        break label$41;
       }
       if ((__shgetc($0) | 0) < 0) {
        break label$6;
       }
       $3 = HEAP32[$0 + 104 >> 2];
      }
      if ($3) {
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
      }
      label$44 : {
       label$45 : {
        $3 = $13 + -88 | 0;
        if ($3 >>> 0 > 32) {
         $1 = $13 + -65 | 0;
         if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
          break label$44;
         }
         break label$45;
        }
        $6 = 16;
        label$47 : {
         label$48 : {
          label$49 : {
           switch ($3 - 1 | 0) {
           case 16:
            $6 = 0;
            break label$48;
           case 11:
           case 28:
            $6 = 10;
            break label$48;
           case 0:
           case 1:
           case 3:
           case 4:
           case 5:
           case 6:
           case 7:
           case 9:
           case 15:
           case 17:
           case 18:
           case 19:
           case 20:
           case 21:
           case 24:
           case 25:
           case 27:
           case 29:
           case 30:
            break label$44;
           case 8:
           case 12:
           case 13:
           case 14:
            break label$45;
           case 2:
           case 10:
           case 26:
            break label$47;
           case 22:
            break label$49;
           default:
            break label$48;
           }
          }
          $6 = 8;
         }
         $15 = __intscan($0, $6, 0, -1, -1);
         $5 = i64toi32_i32$HIGH_BITS;
         $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
         if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
          break label$4;
         }
         if (!(!$9 | ($13 | 0) != 112)) {
          HEAP32[$9 >> 2] = $15;
          break label$44;
         }
         store_int($9, $17, $15, $5);
         break label$44;
        }
        label$53 : {
         if (($13 | 16) == 115) {
          memset($7 + 32 | 0, -1, 257);
          HEAP8[$7 + 32 | 0] = 0;
          if (($13 | 0) != 115) {
           break label$53;
          }
          HEAP8[$7 + 65 | 0] = 0;
          HEAP8[$7 + 46 | 0] = 0;
          HEAP16[$7 + 42 >> 1] = 0;
          HEAP16[$7 + 44 >> 1] = 0;
          break label$53;
         }
         $14 = HEAPU8[$4 + 1 | 0];
         $5 = ($14 | 0) == 94;
         memset($7 + 32 | 0, $5, 257);
         HEAP8[$7 + 32 | 0] = 0;
         $3 = $5 ? $4 + 2 | 0 : $4 + 1 | 0;
         label$55 : {
          label$56 : {
           label$57 : {
            $4 = HEAPU8[($5 ? 2 : 1) + $4 | 0];
            if (($4 | 0) != 45) {
             if (($4 | 0) == 93) {
              break label$57;
             }
             $6 = ($14 | 0) != 94;
             break label$55;
            }
            $6 = ($14 | 0) != 94;
            HEAP8[$7 + 78 | 0] = $6;
            break label$56;
           }
           $6 = ($14 | 0) != 94;
           HEAP8[$7 + 126 | 0] = $6;
          }
          $3 = $3 + 1 | 0;
         }
         $4 = $3;
         while (1) {
          $3 = HEAPU8[$4 | 0];
          label$60 : {
           if (($3 | 0) != 45) {
            if (!$3) {
             break label$6;
            }
            if (($3 | 0) != 93) {
             break label$60;
            }
            break label$53;
           }
           $3 = 45;
           $14 = HEAPU8[$4 + 1 | 0];
           if (!$14 | ($14 | 0) == 93) {
            break label$60;
           }
           $5 = $4 + 1 | 0;
           $4 = HEAPU8[$4 + -1 | 0];
           label$62 : {
            if ($4 >>> 0 >= $14 >>> 0) {
             $3 = $14;
             break label$62;
            }
            while (1) {
             $4 = $4 + 1 | 0;
             HEAP8[$4 + ($7 + 32 | 0) | 0] = $6;
             $3 = HEAPU8[$5 | 0];
             if ($4 >>> 0 < $3 >>> 0) {
              continue;
             }
             break;
            }
           }
           $4 = $5;
          }
          HEAP8[($3 + $7 | 0) + 33 | 0] = $6;
          $4 = $4 + 1 | 0;
          continue;
         }
        }
        $13 = ($13 | 0) == 99;
        $6 = $13 ? $1 + 1 | 0 : 31;
        label$65 : {
         label$66 : {
          if (($17 | 0) == 1) {
           $3 = $9;
           if ($16) {
            $3 = dlmalloc($6 << 2);
            if (!$3) {
             break label$65;
            }
           }
           HEAP32[$7 + 296 >> 2] = 0;
           HEAP32[$7 + 300 >> 2] = 0;
           $1 = 0;
           while (1) {
            $12 = $3;
            label$70 : {
             while (1) {
              $3 = HEAP32[$0 + 4 >> 2];
              label$72 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$0 + 4 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$72;
               }
               $3 = __shgetc($0);
              }
              if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
               break label$70;
              }
              HEAP8[$7 + 27 | 0] = $3;
              $3 = mbrtowc($7 + 28 | 0, $7 + 27 | 0, 1, $7 + 296 | 0);
              if (($3 | 0) == -2) {
               continue;
              }
              $11 = 0;
              if (($3 | 0) == -1) {
               break label$6;
              }
              if ($12) {
               HEAP32[($1 << 2) + $12 >> 2] = HEAP32[$7 + 28 >> 2];
               $1 = $1 + 1 | 0;
              }
              if (!$16 | ($1 | 0) != ($6 | 0)) {
               continue;
              }
              break;
             }
             $6 = $6 << 1 | 1;
             $3 = dlrealloc($12, $6 << 2);
             if (!$3) {
              break label$6;
             }
             continue;
            }
            break;
           }
           $11 = 0;
           $3 = $7 + 296 | 0;
           $5 = 1;
           label$75 : {
            if (!$3) {
             break label$75;
            }
            $5 = !HEAP32[$3 >> 2];
           }
           if (!$5) {
            break label$6;
           }
           break label$66;
          }
          if ($16) {
           $1 = 0;
           $3 = dlmalloc($6);
           if (!$3) {
            break label$65;
           }
           while (1) {
            $11 = $3;
            while (1) {
             $3 = HEAP32[$0 + 4 >> 2];
             label$79 : {
              if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$0 + 4 >> 2] = $3 + 1;
               $3 = HEAPU8[$3 | 0];
               break label$79;
              }
              $3 = __shgetc($0);
             }
             if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
              $12 = 0;
              break label$66;
             }
             HEAP8[$1 + $11 | 0] = $3;
             $1 = $1 + 1 | 0;
             if (($6 | 0) != ($1 | 0)) {
              continue;
             }
             break;
            }
            $12 = 0;
            $6 = $6 << 1 | 1;
            $3 = dlrealloc($11, $6);
            if ($3) {
             continue;
            }
            break;
           }
           break label$6;
          }
          $1 = 0;
          if ($9) {
           while (1) {
            $3 = HEAP32[$0 + 4 >> 2];
            label$84 : {
             if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $3 + 1;
              $3 = HEAPU8[$3 | 0];
              break label$84;
             }
             $3 = __shgetc($0);
            }
            if (HEAPU8[($3 + $7 | 0) + 33 | 0]) {
             HEAP8[$1 + $9 | 0] = $3;
             $1 = $1 + 1 | 0;
             continue;
            } else {
             $12 = 0;
             $11 = $9;
             break label$66;
            }
           }
          }
          while (1) {
           $1 = HEAP32[$0 + 4 >> 2];
           label$89 : {
            if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $1 + 1;
             $1 = HEAPU8[$1 | 0];
             break label$89;
            }
            $1 = __shgetc($0);
           }
           if (HEAPU8[($1 + $7 | 0) + 33 | 0]) {
            continue;
           }
           break;
          }
          $11 = 0;
          $12 = 0;
          $1 = 0;
         }
         label$91 : {
          if (!HEAP32[$0 + 104 >> 2]) {
           $3 = HEAP32[$0 + 4 >> 2];
           break label$91;
          }
          $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
          HEAP32[$0 + 4 >> 2] = $3;
         }
         $3 = $3 - HEAP32[$0 + 8 >> 2] | 0;
         $5 = $3;
         $14 = $3 + HEAP32[$0 + 120 >> 2] | 0;
         $3 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
         $3 = $14 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
         if (!($3 | $14) | ($13 ? ($15 | 0) != ($14 | 0) | ($3 | 0) != ($19 | 0) : 0)) {
          break label$4;
         }
         if ($16) {
          HEAP32[$9 >> 2] = ($17 | 0) == 1 ? $12 : $11;
         }
         if ($13) {
          break label$44;
         }
         if ($12) {
          HEAP32[($1 << 2) + $12 >> 2] = 0;
         }
         if (!$11) {
          $11 = 0;
          break label$44;
         }
         HEAP8[$1 + $11 | 0] = 0;
         break label$44;
        }
        $11 = 0;
        $12 = 0;
        break label$6;
       }
       __floatscan($7, $0, $17, 0);
       $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
       if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
        break label$4;
       }
       if (!$9 | $17 >>> 0 > 2) {
        break label$44;
       }
       $15 = HEAP32[$7 + 8 >> 2];
       $5 = HEAP32[$7 + 12 >> 2];
       $3 = HEAP32[$7 >> 2];
       $1 = HEAP32[$7 + 4 >> 2];
       label$96 : {
        switch ($17 - 1 | 0) {
        default:
         HEAPF32[$9 >> 2] = __trunctfsf2($3, $1, $15, $5);
         break label$44;
        case 0:
         HEAPF64[$9 >> 3] = __trunctfdf2($3, $1, $15, $5);
         break label$44;
        case 1:
         break label$96;
        }
       }
       HEAP32[$9 >> 2] = $3;
       HEAP32[$9 + 4 >> 2] = $1;
       HEAP32[$9 + 8 >> 2] = $15;
       HEAP32[$9 + 12 >> 2] = $5;
      }
      $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
      $1 = $3;
      $3 = $3 >> 31;
      $5 = $1;
      $8 = $8 + HEAP32[$0 + 124 >> 2] | 0;
      $1 = $10 + HEAP32[$0 + 120 >> 2] | 0;
      if ($1 >>> 0 < $10 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $10 = $5 + $1 | 0;
      $8 = $3 + $8 | 0;
      $8 = $10 >>> 0 < $1 >>> 0 ? $8 + 1 | 0 : $8;
      $18 = (($9 | 0) != 0) + $18 | 0;
     }
     $1 = $4 + 1 | 0;
     $4 = HEAPU8[$4 + 1 | 0];
     if ($4) {
      continue;
     }
     break label$3;
    }
    break;
   }
   $18 = $18 ? $18 : -1;
  }
  if (!$16) {
   break label$3;
  }
  dlfree($11);
  dlfree($12);
 }
 global$0 = $7 + 304 | 0;
 return $18;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          $1 = HEAP32[$0 >> 2];
          if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
           $1 = HEAP8[$1 | 0];
          } else {
           $1 = 0;
          }
          $1 = $1 << 24 >> 24;
          if (($1 | 0) != 71) {
           if (($1 | 0) != 84) {
            break label$1;
           }
           $1 = HEAP32[$0 >> 2];
           if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
            $1 = HEAP8[$1 + 1 | 0];
           } else {
            $1 = 0;
           }
           $1 = $1 << 24 >> 24;
           $4 = $1 + -83 | 0;
           if ($4 >>> 0 <= 4) {
            break label$9;
           }
           $4 = $1 + -67 | 0;
           if ($4 >>> 0 > 6) {
            if (($1 | 0) != 99) {
             break label$8;
            }
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
             break label$1;
            }
            if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
             break label$1;
            }
            $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
            HEAP32[$3 >> 2] = $2;
            if (!$2) {
             break label$3;
            }
            $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34253, $3);
            break label$1;
           }
           label$16 : {
            switch ($4 - 1 | 0) {
            case 5:
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
             $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$3 >> 2] = $2;
             if (!$2) {
              break label$3;
             }
             $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34220, $3);
             break label$1;
            default:
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
             $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$3 + 12 >> 2] = $1;
             if (!$1) {
              break label$1;
             }
             $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($3, $0, 1);
             if (HEAP32[$3 >> 2] == HEAP32[$3 + 4 >> 2]) {
              break label$1;
             }
             if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
              break label$1;
             }
             $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$3 >> 2] = $2;
             if (!$2) {
              break label$3;
             }
             $2 = $3 + 12 | 0;
             $2 = $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$3 >> 2], HEAP32[$2 >> 2]);
             break label$1;
            case 4:
             break label$16;
            case 0:
            case 1:
            case 2:
            case 3:
             break label$8;
            }
           }
           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
           HEAP32[$3 >> 2] = $1;
           if (!$1) {
            break label$1;
           }
           $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34314, $3);
           break label$1;
          }
          $1 = HEAP32[$0 >> 2];
          if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
           $1 = HEAP8[$1 + 1 | 0];
          } else {
           $1 = 0;
          }
          $1 = ($1 << 24 >> 24) + -82 | 0;
          if ($1 >>> 0 > 4) {
           break label$1;
          }
          label$21 : {
           switch ($1 - 1 | 0) {
           case 3:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
            HEAP32[$3 >> 2] = $1;
            if (!$1) {
             break label$1;
            }
            $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34395, $3);
            break label$1;
           case 0:
           case 1:
           case 2:
            break label$1;
           default:
            break label$21;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
          HEAP32[$3 >> 2] = $1;
          if (!$1) {
           break label$1;
          }
          $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $3 + 12 | 0);
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
          if (!$2) {
           $2 = 0;
           if (!$1) {
            break label$1;
           }
          }
          $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34415, $3);
          break label$1;
         }
         switch ($4 - 1 | 0) {
         case 2:
          break label$4;
         case 0:
          break label$5;
         case 3:
          break label$7;
         case 1:
          break label$8;
         default:
          break label$6;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
        $1 = HEAP32[$0 >> 2];
        if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
         $1 = HEAP8[$1 | 0];
        } else {
         $1 = 0;
        }
        $1 = $1 << 24 >> 24;
        if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
         break label$1;
        }
        $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
        HEAP32[$3 >> 2] = $2;
        if (!$2) {
         break label$3;
        }
        if (($1 | 0) == 118) {
         $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34355, $3);
         break label$1;
        }
        $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34373, $3);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
       HEAP32[$3 >> 2] = $1;
       if (!$1) {
        break label$1;
       }
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 34280, $3);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$3 >> 2] = $2;
      if (!$2) {
       break label$3;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34234, $3);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
     HEAP32[$3 >> 2] = $2;
     if (!$2) {
      break label$3;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34211, $3);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$3 >> 2] = $2;
    if ($2) {
     break label$2;
    }
   }
   $2 = 0;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 34199, $3);
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 288 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76)) {
   break label$1;
  }
  label$2 : {
   $3 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
    $3 = HEAP8[$3 | 0];
   } else {
    $3 = 0;
   }
   $3 = ($3 << 24 >> 24) + -84 | 0;
   if ($3 >>> 0 > 37) {
    break label$2;
   }
   label$5 : {
    switch ($3 - 1 | 0) {
    case 34:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 280 | 0, 35351);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1);
     break label$1;
    case 13:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 272 | 0, 35359);
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 16 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 20 >> 2] = $4;
     if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
      HEAP32[$1 + 136 >> 2] = 0;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 136 | 0);
      break label$1;
     }
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 264 | 0, 35363);
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 12 >> 2] = $4;
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
      break label$1;
     }
     HEAP32[$1 + 136 >> 2] = 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 136 | 0);
     break label$1;
    case 14:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 256 | 0, 35367);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 28 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0);
     break label$1;
    case 12:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 248 | 0, 35372);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 36 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0);
     break label$1;
    case 19:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 240 | 0, 35384);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 44 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0);
     break label$1;
    case 30:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 232 | 0, 35398);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 52 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0);
     break label$1;
    case 31:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 224 | 0, 35404);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 60 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 56 | 0);
     break label$1;
    case 20:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 216 | 0, 35419);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 64 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 68 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 - -64 | 0);
     break label$1;
    case 21:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 208 | 0, 35420);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 72 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 76 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 72 | 0);
     break label$1;
    case 23:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 200 | 0, 35422);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 80 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 84 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 80 | 0);
     break label$1;
    case 24:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 192 | 0, 35424);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 88 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 92 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 88 | 0);
     break label$1;
    case 35:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 184 | 0, 35427);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 96 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 100 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 96 | 0);
     break label$1;
    case 36:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 176 | 0, 35430);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 104 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 108 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 104 | 0);
     break label$1;
    case 25:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 168 | 0, 35434);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 112 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 116 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 112 | 0);
     break label$1;
    case 26:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 160 | 0, 35443);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 120 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 124 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 120 | 0);
     break label$1;
    case 17:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($0);
     break label$1;
    case 15:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($0);
     break label$1;
    case 16:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($0);
     break label$1;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 18:
    case 22:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
     break label$2;
    case 10:
     break label$5;
    default:
     break label$1;
    }
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 152 | 0, 34129);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 128 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 132 >> 2] = $3;
   label$25 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 128 | 0)) {
     break label$25;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
    if (!$2) {
     break label$25;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     break label$1;
    }
   }
   $2 = 0;
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 148 >> 2] = $3;
  if (!$3) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 136 | 0, $0, 0);
  $5 = HEAP32[$1 + 136 >> 2] == HEAP32[$1 + 140 >> 2];
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69);
  if (!$5) {
   if (!$4) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 148 | 0, $1 + 136 | 0);
   break label$1;
  }
  $2 = $4 ? $3 : 0;
 }
 global$0 = $1 + 288 | 0;
 return $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 + -64 | 0;
 global$0 = $7;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 $8 = HEAP32[$3 + 28 >> 2];
 HEAP32[$7 >> 2] = $8;
 HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
 $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($7);
 $9 = HEAP32[$7 >> 2];
 $10 = HEAP32[$9 + 4 >> 2] + -1 | 0;
 HEAP32[$9 + 4 >> 2] = $10;
 if (($10 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9);
 }
 label$3 : {
  label$4 : {
   label$5 : {
    $9 = $6 + -65 | 0;
    if ($9 >>> 0 > 56) {
     if (($6 | 0) != 37) {
      break label$5;
     }
     std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($7 + 56 | 0, $2, $4, $8);
     break label$4;
    }
    label$7 : {
     switch ($9 - 1 | 0) {
     default:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 0:
     case 32:
     case 38:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 33:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
      $6 = $7;
      $8 = $0;
      $10 = HEAP32[$7 + 56 >> 2];
      $0 = $1;
      label$29 : {
       if (HEAP8[$0 + 11 | 0] < 0) {
        $1 = HEAP32[$0 >> 2];
        break label$29;
       }
       $1 = $0;
      }
      $9 = $1;
      if (HEAP8[$0 + 11 | 0] < 0) {
       $1 = HEAP32[$0 >> 2];
      } else {
       $1 = $0;
      }
      if (HEAP8[$0 + 11 | 0] < 0) {
       $0 = HEAP32[$0 + 4 >> 2];
      } else {
       $0 = HEAPU8[$0 + 11 | 0];
      }
      HEAP32[$6 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($8, $10, $2, $3, $4, $5, $9, $1 + ($0 << 2) | 0);
      break label$4;
     case 34:
     case 35:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 12 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 2:
      $6 = HEAP32[6935];
      HEAP32[$7 + 24 >> 2] = HEAP32[6934];
      HEAP32[$7 + 28 >> 2] = $6;
      $6 = HEAP32[6933];
      HEAP32[$7 + 16 >> 2] = HEAP32[6932];
      HEAP32[$7 + 20 >> 2] = $6;
      $6 = HEAP32[6931];
      HEAP32[$7 + 8 >> 2] = HEAP32[6930];
      HEAP32[$7 + 12 >> 2] = $6;
      $6 = HEAP32[6929];
      HEAP32[$7 >> 2] = HEAP32[6928];
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
      break label$4;
     case 4:
      $6 = HEAP32[6943];
      HEAP32[$7 + 24 >> 2] = HEAP32[6942];
      HEAP32[$7 + 28 >> 2] = $6;
      $6 = HEAP32[6941];
      HEAP32[$7 + 16 >> 2] = HEAP32[6940];
      HEAP32[$7 + 20 >> 2] = $6;
      $6 = HEAP32[6939];
      HEAP32[$7 + 8 >> 2] = HEAP32[6938];
      HEAP32[$7 + 12 >> 2] = $6;
      $6 = HEAP32[6937];
      HEAP32[$7 >> 2] = HEAP32[6936];
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
      break label$4;
     case 6:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 7:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 40:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 28 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 43:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 11:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 4 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 44:
     case 50:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 46:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 48:
      $6 = memcpy($7, 27776, 44);
      HEAP32[$6 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 44 | 0);
      break label$4;
     case 16:
      HEAP32[$7 + 16 >> 2] = HEAP32[6960];
      $6 = HEAP32[6959];
      HEAP32[$7 + 8 >> 2] = HEAP32[6958];
      HEAP32[$7 + 12 >> 2] = $6;
      $6 = HEAP32[6957];
      HEAP32[$7 >> 2] = HEAP32[6956];
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 20 | 0);
      break label$4;
     case 17:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 18:
      $6 = HEAP32[6971];
      HEAP32[$7 + 24 >> 2] = HEAP32[6970];
      HEAP32[$7 + 28 >> 2] = $6;
      $6 = HEAP32[6969];
      HEAP32[$7 + 16 >> 2] = HEAP32[6968];
      HEAP32[$7 + 20 >> 2] = $6;
      $6 = HEAP32[6967];
      HEAP32[$7 + 8 >> 2] = HEAP32[6966];
      HEAP32[$7 + 12 >> 2] = $6;
      $6 = HEAP32[6965];
      HEAP32[$7 >> 2] = HEAP32[6964];
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
      break label$4;
     case 53:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 54:
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
      break label$3;
     case 22:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
      $6 = $7;
      $8 = $0;
      $10 = HEAP32[$7 + 56 >> 2];
      $0 = $1;
      label$35 : {
       if (HEAP8[$0 + 11 | 0] < 0) {
        $1 = HEAP32[$0 >> 2];
        break label$35;
       }
       $1 = $0;
      }
      $9 = $1;
      if (HEAP8[$0 + 11 | 0] < 0) {
       $1 = HEAP32[$0 >> 2];
      } else {
       $1 = $0;
      }
      if (HEAP8[$0 + 11 | 0] < 0) {
       $0 = HEAP32[$0 + 4 >> 2];
      } else {
       $0 = HEAPU8[$0 + 11 | 0];
      }
      HEAP32[$6 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($8, $10, $2, $3, $4, $5, $9, $1 + ($0 << 2) | 0);
      break label$4;
     case 55:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$4;
     case 1:
     case 3:
     case 5:
     case 8:
     case 9:
     case 10:
     case 12:
     case 13:
     case 14:
     case 15:
     case 19:
     case 20:
     case 21:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 36:
     case 37:
     case 39:
     case 41:
     case 42:
     case 45:
     case 47:
     case 49:
     case 51:
     case 52:
      break label$5;
     case 23:
      break label$7;
     }
    }
    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
    break label$4;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  }
  $0 = HEAP32[$7 + 56 >> 2];
 }
 global$0 = $7 - -64 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 78)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  if ($1) {
   HEAP32[$1 + 4 >> 2] = $2;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 79)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 2;
    break label$3;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 82)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 1;
    break label$3;
   }
   if (!$1) {
    break label$3;
   }
   HEAP8[$1 + 8 | 0] = 0;
  }
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = $3 + 44;
  HEAP32[$3 + 24 >> 2] = $3 + 40;
  HEAP32[$3 + 28 >> 2] = $0;
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 16 | 0, 34782);
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $3)) {
   HEAP32[$3 + 40 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 34785);
  }
  $1 = $0 + 148 | 0;
  while (1) {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
        $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
        if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
         if (HEAP32[$3 + 40 >> 2]) {
          continue;
         }
         break label$8;
        }
        $2 = HEAP32[$0 >> 2];
        if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
         $2 = HEAP8[$2 | 0];
        } else {
         $2 = 0;
        }
        $2 = $2 << 24 >> 24 & 255;
        $4 = $2 + -67 | 0;
        if ($4 >>> 0 <= 6) {
         break label$11;
        }
        $2 = $2 + -83 | 0;
        if ($2 >>> 0 > 1) {
         break label$10;
        }
        if (!($2 - 1)) {
         if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0))) {
          break label$8;
         }
         $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 40 | 0);
         continue;
        }
        $2 = HEAP32[$0 >> 2];
        if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 1) {
         $2 = HEAPU8[$2 + 1 | 0];
        } else {
         $2 = 0;
        }
        if (($2 & 255) == 116) {
         break label$10;
        }
        $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
        HEAP32[$3 + 12 >> 2] = $2;
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3 + 24 | 0, $2)) {
         break label$8;
        }
        if (($2 | 0) == HEAP32[$3 + 40 >> 2]) {
         continue;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 12 | 0);
        continue;
       }
       $2 = 0;
       if (!HEAP32[$3 + 40 >> 2] | HEAP32[$1 >> 2] == HEAP32[$1 + 4 >> 2]) {
        break label$1;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -4;
       $2 = HEAP32[$3 + 40 >> 2];
       break label$1;
      }
      label$19 : {
       label$20 : {
        switch ($4 - 1 | 0) {
        case 1:
        case 2:
        case 3:
        case 4:
         break label$10;
        case 0:
         break label$20;
        case 5:
         break label$9;
        default:
         break label$19;
        }
       }
       $2 = HEAP32[$0 >> 2];
       if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 1) {
        $2 = HEAP8[$2 + 1 | 0];
       } else {
        $2 = 0;
       }
       $2 = $2 << 24 >> 24;
       if (($2 | 0) == 67) {
        break label$10;
       }
       $2 = $2 & 255;
       if (($2 | 0) != 84 ? ($2 | 0) != 116 : 0) {
        break label$19;
       }
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0))) {
        break label$8;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 40 | 0);
       continue;
      }
      $2 = 0;
      if (!HEAP32[$3 + 40 >> 2]) {
       break label$1;
      }
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $3 + 40 | 0, HEAP32[$3 + 44 >> 2]))) {
       break label$1;
      }
      $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, HEAP32[$3 + 40 >> 2]);
      HEAP32[$3 + 40 >> 2] = $4;
      if (!$4) {
       break label$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 40 | 0);
      continue;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, HEAP32[$3 + 44 >> 2]))) {
      break label$8;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 40 | 0);
     continue;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, HEAP32[$3 + 44 >> 2] != 0);
    HEAP32[$3 + 12 >> 2] = $2;
    if (!$2 | !HEAP32[$3 + 40 >> 2]) {
     break label$8;
    }
    HEAP32[$3 + 40 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 40 | 0, $3 + 12 | 0);
    $2 = HEAP32[$3 + 44 >> 2];
    if ($2) {
     HEAP8[$2 + 1 | 0] = 1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $3 + 40 | 0);
    continue;
   }
   break;
  }
  $2 = 0;
 }
 global$0 = $3 + 48 | 0;
 return $2;
}
function BuildControlBase__choiseMouseMove_28int_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $16 = global$0 - 96 | 0;
 global$0 = $16;
 HEAP8[$0 + 17 | 0] = $2;
 label$1 : {
  $13 = HEAPU8[$0 + 1292 | 0] != 0 ^ $2;
  label$2 : {
   if (($13 | 0) == HEAPU8[$0 + 18 | 0] ? HEAP32[$0 + 20 >> 2] == ($1 | 0) : 0) {
    break label$2;
   }
   HEAP8[$0 + 18 | 0] = $13;
   HEAP32[$0 + 20 >> 2] = $1;
   $14 = HEAP32[$0 + 12 >> 2];
   $2 = $14;
   $7 = HEAP32[$2 + 128 >> 2];
   label$4 : {
    label$5 : {
     label$6 : {
      if (($1 | 0) >= 0) {
       $3 = memset($16, 255, 96);
       $9 = HEAP32[$2 + 128 >> 2];
       $6 = $1 & 3;
       label$8 : {
        if ($6 >>> 0 > 2) {
         $6 = 0;
         $2 = 0;
         $4 = 0;
         break label$8;
        }
        $5 = $1 >>> 9 & 127;
        $2 = $1 >>> 2 & 127;
        $4 = $1 >>> 16 & 255;
        label$10 : {
         switch ($6 - 1 | 0) {
         default:
          $10 = $4 + -1 | 0;
          $11 = $2;
          $6 = $4;
          $4 = $5;
          break label$8;
         case 0:
          $11 = $4 + -1 | 0;
          $10 = $2;
          $6 = $2;
          $2 = $4;
          $4 = $5;
          break label$8;
         case 1:
          break label$10;
         }
        }
        $10 = $2;
        $6 = $2;
        $11 = $5;
        $2 = $5;
        $5 = $4;
        $4 = $5 + -1 | 0;
       }
       $8 = 1;
       $15 = $6;
       $12 = HEAP32[$9 + 12 >> 2];
       $6 = $13 ^ HEAP8[HEAP32[$9 + 28 >> 2] + ((Math_imul($12, $2) + $6 | 0) + Math_imul(HEAP32[$9 + 24 >> 2], $5) | 0) | 0] & 1;
       $10 = $6 ? $10 : $15;
       if (($10 | 0) < 1 | ($10 | 0) >= ($12 + -2 | 0)) {
        break label$2;
       }
       $11 = $6 ? $11 : $2;
       if (($11 | 0) < 1) {
        break label$2;
       }
       $12 = $6 ? $4 : $5;
       if (($12 | 0) < 1 | ($11 | 0) >= (HEAP32[$9 + 16 >> 2] + -2 | 0) | ($12 | 0) >= (HEAP32[$9 + 20 >> 2] + -2 | 0)) {
        break label$2;
       }
       HEAP32[$3 + 92 >> 2] = $12;
       HEAP32[$3 + 88 >> 2] = $11;
       HEAP32[$3 + 84 >> 2] = $10 + 1;
       HEAP32[$3 + 76 >> 2] = $12;
       HEAP32[$3 + 72 >> 2] = $11;
       HEAP32[$3 + 68 >> 2] = $10;
       HEAP32[$3 + 60 >> 2] = $12;
       HEAP32[$3 + 56 >> 2] = $10;
       HEAP32[$3 + 52 >> 2] = $11 + 1;
       HEAP32[$3 + 44 >> 2] = $12;
       HEAP32[$3 + 40 >> 2] = $10;
       HEAP32[$3 + 36 >> 2] = $11;
       HEAP32[$3 + 28 >> 2] = $11;
       HEAP32[$3 + 24 >> 2] = $10;
       HEAP32[$3 + 20 >> 2] = $12 + 1;
       HEAP32[$3 + 80 >> 2] = 0;
       HEAP32[$3 + 64 >> 2] = 0;
       HEAP32[$3 + 48 >> 2] = 1;
       HEAP32[$3 + 32 >> 2] = 1;
       HEAP32[$3 + 16 >> 2] = 2;
       HEAP32[$3 + 12 >> 2] = $11;
       HEAP32[$3 + 8 >> 2] = $10;
       HEAP32[$3 + 4 >> 2] = $12;
       HEAP32[$3 >> 2] = 2;
       if (($12 | 0) == HEAP32[$0 + 32 >> 2] ? !(($10 | 0) != HEAP32[$0 + 24 >> 2] | ($11 | 0) != HEAP32[$0 + 28 >> 2]) : 0) {
        break label$4;
       }
       $2 = HEAP32[$14 + 92 >> 2];
       $5 = HEAP32[$14 + 96 >> 2] - $2 | 0;
       if (($5 | 0) >= 1) {
        $4 = $2;
        $2 = $5 >>> 2;
        memset($4, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
       }
       if (($1 | 0) <= 65535) {
        break label$1;
       }
       label$15 : {
        if (!HEAPU8[$0 + 1293 | 0]) {
         $2 = 3;
         $9 = 0;
         break label$15;
        }
        $2 = 2;
        BuildWorld__clean_28BuildWorld__ECleanMethod_29($7, 2);
        label$17 : {
         if (!$13) {
          $2 = HEAP32[$3 + 8 >> 2];
          label$19 : {
           if ($2 >>> 0 > 49) {
            break label$19;
           }
           $5 = HEAP32[$3 + 12 >> 2];
           if ($5 >>> 0 > 49) {
            break label$19;
           }
           $6 = HEAP32[$3 + 4 >> 2];
           if ($6 >>> 0 > 49) {
            break label$19;
           }
           $4 = HEAP32[$3 >> 2];
           if ((HEAPU8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $4 >>> 0 <= 2 : 0) {
            break label$19;
           }
           $6 = HEAP32[$3 + 4 >> 2];
           if ($6 >>> 0 > 49) {
            break label$19;
           }
           $4 = HEAP32[$3 >> 2];
           if ($4 >>> 0 > 2) {
            break label$19;
           }
           HEAP8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 7;
          }
          $2 = HEAP32[$3 + 24 >> 2];
          label$21 : {
           if ($2 >>> 0 >= 50) {
            break label$21;
           }
           $5 = HEAP32[$3 + 28 >> 2];
           if ($5 >>> 0 > 49) {
            break label$21;
           }
           $6 = HEAP32[$3 + 20 >> 2];
           if ($6 >>> 0 > 49) {
            break label$21;
           }
           $4 = HEAP32[$3 + 16 >> 2];
           if ((HEAPU8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $4 >>> 0 <= 2 : 0) {
            break label$21;
           }
           $6 = HEAP32[$3 + 20 >> 2];
           if ($6 >>> 0 > 49) {
            break label$21;
           }
           $4 = HEAP32[$3 + 16 >> 2];
           if ($4 >>> 0 > 2) {
            break label$21;
           }
           HEAP8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 7;
          }
          $2 = HEAP32[$3 + 40 >> 2];
          label$23 : {
           if ($2 >>> 0 > 49) {
            break label$23;
           }
           $5 = HEAP32[$3 + 44 >> 2];
           if ($5 >>> 0 > 49) {
            break label$23;
           }
           $6 = HEAP32[$3 + 36 >> 2];
           if ($6 >>> 0 > 49) {
            break label$23;
           }
           $4 = HEAP32[$3 + 32 >> 2];
           if ((HEAPU8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $4 >>> 0 <= 2 : 0) {
            break label$23;
           }
           $6 = HEAP32[$3 + 36 >> 2];
           if ($6 >>> 0 > 49) {
            break label$23;
           }
           $4 = HEAP32[$3 + 32 >> 2];
           if ($4 >>> 0 > 2) {
            break label$23;
           }
           HEAP8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 7;
          }
          $2 = HEAP32[$3 + 56 >> 2];
          label$25 : {
           if ($2 >>> 0 > 49) {
            break label$25;
           }
           $5 = HEAP32[$3 + 60 >> 2];
           if ($5 >>> 0 > 49) {
            break label$25;
           }
           $6 = HEAP32[$3 + 52 >> 2];
           if ($6 >>> 0 > 49) {
            break label$25;
           }
           $4 = HEAP32[$3 + 48 >> 2];
           if ((HEAPU8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $4 >>> 0 <= 2 : 0) {
            break label$25;
           }
           $6 = HEAP32[$3 + 52 >> 2];
           if ($6 >>> 0 > 49) {
            break label$25;
           }
           $4 = HEAP32[$3 + 48 >> 2];
           if ($4 >>> 0 > 2) {
            break label$25;
           }
           HEAP8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 7;
          }
          $2 = HEAP32[$3 + 72 >> 2];
          label$27 : {
           if ($2 >>> 0 > 49) {
            break label$27;
           }
           $5 = HEAP32[$3 + 76 >> 2];
           if ($5 >>> 0 > 49) {
            break label$27;
           }
           $6 = HEAP32[$3 + 68 >> 2];
           if ($6 >>> 0 > 49) {
            break label$27;
           }
           $4 = HEAP32[$3 + 64 >> 2];
           if ((HEAPU8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $4 >>> 0 <= 2 : 0) {
            break label$27;
           }
           $6 = HEAP32[$3 + 68 >> 2];
           if ($6 >>> 0 > 49) {
            break label$27;
           }
           $4 = HEAP32[$3 + 64 >> 2];
           if ($4 >>> 0 > 2) {
            break label$27;
           }
           HEAP8[($5 + (((Math_imul($4, 125e3) + $7 | 0) + Math_imul($6, 2500) | 0) + Math_imul($2, 50) | 0) | 0) + 136 | 0] = 7;
          }
          $2 = 0;
          $9 = 1;
          $5 = HEAP32[$3 + 88 >> 2];
          if ($5 >>> 0 > 49) {
           break label$17;
          }
          $6 = HEAP32[$3 + 92 >> 2];
          if ($6 >>> 0 > 49) {
           break label$17;
          }
          $4 = HEAP32[$3 + 84 >> 2];
          if ($4 >>> 0 > 49) {
           break label$17;
          }
          $13 = HEAP32[$3 + 80 >> 2];
          if ((HEAPU8[($6 + (((Math_imul($13, 125e3) + $7 | 0) + Math_imul($4, 2500) | 0) + Math_imul($5, 50) | 0) | 0) + 136 | 0] & 12) == 8 ? $13 >>> 0 <= 2 : 0) {
           break label$17;
          }
          $4 = HEAP32[$3 + 84 >> 2];
          if ($4 >>> 0 > 49) {
           break label$17;
          }
          $13 = HEAP32[$3 + 80 >> 2];
          if ($13 >>> 0 > 2) {
           break label$17;
          }
          HEAP8[($6 + (((Math_imul($13, 125e3) + $7 | 0) + Math_imul($4, 2500) | 0) + Math_imul($5, 50) | 0) | 0) + 136 | 0] = 7;
          break label$17;
         }
         $9 = 0;
         if (HEAP32[$7 + 32 >> 2] < 7) {
          break label$17;
         }
         while (1) {
          $2 = ($9 << 4) + $3 | 0;
          $5 = HEAP32[$2 + 8 >> 2];
          label$31 : {
           if ($5 >>> 0 > 49) {
            break label$31;
           }
           $6 = HEAP32[$2 + 12 >> 2];
           if ($6 >>> 0 > 49) {
            break label$31;
           }
           $4 = HEAP32[$2 + 4 >> 2];
           if ($4 >>> 0 > 49) {
            break label$31;
           }
           $8 = HEAP32[$2 >> 2];
           if ($8 >>> 0 > 2) {
            break label$31;
           }
           $5 = $6 + (((Math_imul($8, 125e3) + $7 | 0) + Math_imul($4, 2500) | 0) + Math_imul($5, 50) | 0) | 0;
           $6 = HEAPU8[$5 + 136 | 0];
           if (($6 & 12) != 8) {
            break label$31;
           }
           HEAP8[$5 + 136 | 0] = $6 | 32;
          }
          $15 = HEAP32[$0 + 12 >> 2];
          $8 = HEAP32[$15 + 116 >> 2];
          label$32 : {
           if (!$8) {
            break label$32;
           }
           $14 = HEAP32[$2 >> 2];
           label$33 : {
            if ($14 >>> 0 > 2) {
             $5 = 0;
             $2 = 0;
             $6 = 0;
             break label$33;
            }
            $6 = HEAP32[$2 + 12 >> 2];
            $4 = HEAP32[$2 + 4 >> 2];
            $2 = HEAP32[($2 | 8) >> 2];
            label$35 : {
             switch ($14 - 1 | 0) {
             default:
              $5 = $4;
              break label$33;
             case 0:
              $5 = $2;
              $2 = $4;
              break label$33;
             case 1:
              break label$35;
             }
            }
            $5 = $2;
            $2 = $6;
            $6 = $4;
           }
           $4 = HEAP32[$8 + 12 >> 2];
           if (($4 | 0) < 1) {
            break label$32;
           }
           $17 = ($2 << 2) - HEAP32[$8 + 84 >> 2] | 0;
           $18 = ($5 << 2) - HEAP32[$8 + 76 >> 2] | 0;
           $6 = ($6 << 2) - HEAP32[$8 + 68 >> 2] | 0;
           $8 = HEAP32[$8 + 28 >> 2];
           $2 = 0;
           while (1) {
            label$39 : {
             $5 = $8 + Math_imul($2, 188) | 0;
             if (!(($14 | 0) != HEAP32[$5 >> 2] | ($18 | 0) != HEAP32[$5 + 4 >> 2] | HEAP32[$5 + 8 >> 2] != ($17 | 0))) {
              if (HEAP32[$5 + 12 >> 2] == ($6 | 0)) {
               break label$39;
              }
             }
             $2 = $2 + 1 | 0;
             if (($4 | 0) != ($2 | 0)) {
              continue;
             }
             break label$32;
            }
            break;
           }
           HEAP32[HEAP32[$15 + 92 >> 2] + ($2 << 2) >> 2] = 1;
          }
          $9 = $9 + 1 | 0;
          if (($9 | 0) != 6) {
           continue;
          }
          break;
         }
         $9 = 1;
         $2 = $13;
        }
        BuildControlBase__makeBuffers_28_29($0);
       }
       HEAP32[$0 + 24 >> 2] = $10;
       HEAP32[$0 + 32 >> 2] = $12;
       HEAP32[$0 + 28 >> 2] = $11;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2);
       $8 = 1;
       if (!$9) {
        break label$2;
       }
       $1 = HEAP32[$0 + 4 >> 2];
       $2 = $0 + 8 | 0;
       HEAP32[$3 >> 2] = $2;
       $5 = HEAP32[$1 + 328 >> 2];
       if (($5 | 0) == HEAP32[$1 + 332 >> 2]) {
        break label$6;
       }
       HEAP32[$5 >> 2] = $2;
       HEAP32[$1 + 328 >> 2] = HEAP32[$1 + 328 >> 2] + 4;
       break label$5;
      }
      BuildWorld__clean_28BuildWorld__ECleanMethod_29($7, 2);
      $8 = 1;
      $5 = HEAP32[$0 + 12 >> 2];
      $2 = HEAP32[$5 + 92 >> 2];
      $5 = HEAP32[$5 + 96 >> 2] - $2 | 0;
      if (($5 | 0) >= 1) {
       $4 = $2;
       $2 = $5 >>> 2;
       memset($4, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
      }
      HEAP32[$0 + 24 >> 2] = -1;
      HEAP32[$0 + 28 >> 2] = -1;
      HEAP32[$0 + 32 >> 2] = -1;
      BuildControlBase__makeBuffers_28_29($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $13);
      break label$2;
     }
     void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 324 | 0, $3);
    }
    HEAP8[$0 + 36 | 0] = 1;
    HEAP32[$0 + 1288 >> 2] = 0;
   }
  }
  global$0 = $16 + 96 | 0;
  return $8;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 14868);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 32 | 0;
 global$0 = $7;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 $8 = HEAP32[$3 + 28 >> 2];
 HEAP32[$7 + 8 >> 2] = $8;
 HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
 $8 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($7 + 8 | 0);
 $9 = HEAP32[$7 + 8 >> 2];
 $10 = HEAP32[$9 + 4 >> 2] + -1 | 0;
 HEAP32[$9 + 4 >> 2] = $10;
 if (($10 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9);
 }
 label$3 : {
  label$4 : {
   label$5 : {
    $9 = $6 + -65 | 0;
    if ($9 >>> 0 > 56) {
     if (($6 | 0) != 37) {
      break label$5;
     }
     std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($7 + 24 | 0, $2, $4, $8);
     break label$4;
    }
    label$7 : {
     switch ($9 - 1 | 0) {
     default:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 0:
     case 32:
     case 38:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 33:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
      $6 = $7;
      $8 = $0;
      $10 = HEAP32[$7 + 24 >> 2];
      $0 = $1;
      label$29 : {
       if (HEAP8[$0 + 11 | 0] < 0) {
        $1 = HEAP32[$0 >> 2];
        break label$29;
       }
       $1 = $0;
      }
      $9 = $1;
      if (HEAP8[$0 + 11 | 0] < 0) {
       $1 = HEAP32[$0 >> 2];
      } else {
       $1 = $0;
      }
      if (HEAP8[$0 + 11 | 0] < 0) {
       $0 = HEAP32[$0 + 4 >> 2];
      } else {
       $0 = HEAPU8[$0 + 11 | 0];
      }
      HEAP32[$6 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($8, $10, $2, $3, $4, $5, $9, $1 + $0 | 0);
      break label$4;
     case 34:
     case 35:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 12 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 2:
      HEAP32[$7 + 8 >> 2] = 623865125;
      HEAP32[$7 + 12 >> 2] = 2032480100;
      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
      break label$4;
     case 4:
      HEAP32[$7 + 8 >> 2] = 623728933;
      HEAP32[$7 + 12 >> 2] = 1680158061;
      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
      break label$4;
     case 6:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 7:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 40:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 28 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 43:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 11:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 4 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 44:
     case 50:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 46:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 48:
      $6 = HEAPU8[27695] | HEAPU8[27696] << 8 | (HEAPU8[27697] << 16 | HEAPU8[27698] << 24);
      HEAP8[$7 + 15 | 0] = $6;
      HEAP8[$7 + 16 | 0] = $6 >>> 8;
      HEAP8[$7 + 17 | 0] = $6 >>> 16;
      HEAP8[$7 + 18 | 0] = $6 >>> 24;
      $6 = HEAPU8[27692] | HEAPU8[27693] << 8 | (HEAPU8[27694] << 16 | HEAPU8[27695] << 24);
      HEAP32[$7 + 8 >> 2] = HEAPU8[27688] | HEAPU8[27689] << 8 | (HEAPU8[27690] << 16 | HEAPU8[27691] << 24);
      HEAP32[$7 + 12 >> 2] = $6;
      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 19 | 0);
      break label$4;
     case 16:
      HEAP8[$7 + 12 | 0] = HEAPU8[27703];
      HEAP32[$7 + 8 >> 2] = HEAPU8[27699] | HEAPU8[27700] << 8 | (HEAPU8[27701] << 16 | HEAPU8[27702] << 24);
      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 13 | 0);
      break label$4;
     case 17:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 18:
      HEAP32[$7 + 8 >> 2] = 624576549;
      HEAP32[$7 + 12 >> 2] = 1394948685;
      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
      break label$4;
     case 53:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 54:
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
      break label$3;
     case 22:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
      $6 = $7;
      $8 = $0;
      $10 = HEAP32[$7 + 24 >> 2];
      $0 = $1;
      label$35 : {
       if (HEAP8[$0 + 11 | 0] < 0) {
        $1 = HEAP32[$0 >> 2];
        break label$35;
       }
       $1 = $0;
      }
      $9 = $1;
      if (HEAP8[$0 + 11 | 0] < 0) {
       $1 = HEAP32[$0 >> 2];
      } else {
       $1 = $0;
      }
      if (HEAP8[$0 + 11 | 0] < 0) {
       $0 = HEAP32[$0 + 4 >> 2];
      } else {
       $0 = HEAPU8[$0 + 11 | 0];
      }
      HEAP32[$6 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($8, $10, $2, $3, $4, $5, $9, $1 + $0 | 0);
      break label$4;
     case 55:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$4;
     case 1:
     case 3:
     case 5:
     case 8:
     case 9:
     case 10:
     case 12:
     case 13:
     case 14:
     case 15:
     case 19:
     case 20:
     case 21:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 36:
     case 37:
     case 39:
     case 41:
     case 42:
     case 45:
     case 47:
     case 49:
     case 51:
     case 52:
      break label$5;
     case 23:
      break label$7;
     }
    }
    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
    break label$4;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  }
  $0 = HEAP32[$7 + 24 >> 2];
 }
 global$0 = $7 + 32 | 0;
 return $0 | 0;
}
function SlvPainter__paintPiece_28int_2c_20BaseGLWidget__2c_20bool_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0;
 $4 = global$0 - 144 | 0;
 global$0 = $4;
 $16 = HEAP32[$0 + 12 >> 2];
 $5 = HEAP32[$16 + 52 >> 2];
 $33 = HEAP32[$5 + 28 >> 2];
 $13 = $33 + Math_imul($1, 188) | 0;
 $8 = (HEAP32[$5 + 76 >> 2] + HEAP32[$13 + 4 >> 2] | 0) / 4 | 0;
 $7 = (HEAP32[$5 + 84 >> 2] + HEAP32[$13 + 8 >> 2] | 0) / 4 | 0;
 $15 = (HEAP32[$5 + 68 >> 2] + HEAP32[$13 + 12 >> 2] | 0) / 4 | 0;
 label$1 : {
  $14 = HEAP32[$13 >> 2];
  label$2 : {
   if ($14 >>> 0 > 2) {
    break label$2;
   }
   $13 = $15;
   $5 = $7;
   label$3 : {
    label$4 : {
     switch ($14 - 1 | 0) {
     case 0:
      $5 = $8;
      $8 = $7;
      break label$3;
     case 1:
      break label$4;
     default:
      break label$3;
     }
    }
    $13 = $7;
    $5 = $8;
    $8 = $15;
   }
   if ($13 >>> 0 > 49 | $5 >>> 0 > 49 | ((HEAPU8[((((HEAP32[HEAP32[11981] + 128 >> 2] + Math_imul($14, 125e3) | 0) + Math_imul($8, 2500) | 0) + Math_imul($5, 50) | 0) + $13 | 0) + 136 | 0] & 12) != 8 | $8 >>> 0 > 49)) {
    break label$2;
   }
   $8 = HEAP32[$16 >> 2];
   $15 = HEAP32[$8 + ($1 << 3) >> 2];
   $7 = HEAP32[(($1 << 3) + $8 | 0) + 4 >> 2];
   $16 = HEAP32[HEAP32[11988] + 16 >> 2];
   $13 = $16 + Math_imul($15, 652) | 0;
   $8 = HEAP32[$13 + 336 >> 2];
   label$6 : {
    if (($8 | 0) <= 3) {
     $5 = (($7 + $8 | 0) + 4 | 0) % 4 | 0;
     if (($7 | 0) <= 3) {
      break label$6;
     }
     $5 = (($7 - $8 | 0) % 4 | 0) + 4 | 0;
     break label$6;
    }
    $5 = (($7 + $8 | 0) % 4 | 0) + 4 | 0;
    if (($7 | 0) <= 3) {
     break label$6;
    }
    $5 = (($7 - $8 | 0) + 4 | 0) % 4 | 0;
   }
   $8 = $5;
   $7 = $2;
   $5 = HEAP32[$7 + 168 >> 2];
   $14 = $4 - -64 | 0;
   HEAP32[$14 >> 2] = HEAP32[$7 + 164 >> 2];
   HEAP32[$14 + 4 >> 2] = $5;
   $5 = HEAP32[$7 + 160 >> 2];
   HEAP32[$4 + 56 >> 2] = HEAP32[$7 + 156 >> 2];
   HEAP32[$4 + 60 >> 2] = $5;
   $5 = HEAP32[$7 + 152 >> 2];
   HEAP32[$4 + 48 >> 2] = HEAP32[$7 + 148 >> 2];
   HEAP32[$4 + 52 >> 2] = $5;
   $5 = HEAP32[$7 + 144 >> 2];
   HEAP32[$4 + 40 >> 2] = HEAP32[$7 + 140 >> 2];
   HEAP32[$4 + 44 >> 2] = $5;
   $5 = HEAP32[$7 + 136 >> 2];
   HEAP32[$4 + 32 >> 2] = HEAP32[$7 + 132 >> 2];
   HEAP32[$4 + 36 >> 2] = $5;
   $5 = HEAP32[$7 + 128 >> 2];
   HEAP32[$4 + 24 >> 2] = HEAP32[$7 + 124 >> 2];
   HEAP32[$4 + 28 >> 2] = $5;
   $5 = HEAP32[$7 + 120 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$7 + 116 >> 2];
   HEAP32[$4 + 20 >> 2] = $5;
   $5 = HEAP32[$7 + 112 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 108 >> 2];
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$4 + 72 >> 2] = 0;
   $6 = $7 + 108 | 0;
   $5 = HEAP32[$7 + 180 >> 2];
   label$10 : {
    if ($5 >>> 0 < HEAPU32[$7 + 184 >> 2]) {
     $7 = HEAP32[$4 + 12 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$5 + 4 >> 2] = $7;
     $7 = HEAP32[$14 + 4 >> 2];
     HEAP32[$5 + 56 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$5 + 60 >> 2] = $7;
     $7 = HEAP32[$4 + 60 >> 2];
     HEAP32[$5 + 48 >> 2] = HEAP32[$4 + 56 >> 2];
     HEAP32[$5 + 52 >> 2] = $7;
     $7 = HEAP32[$4 + 52 >> 2];
     HEAP32[$5 + 40 >> 2] = HEAP32[$4 + 48 >> 2];
     HEAP32[$5 + 44 >> 2] = $7;
     $7 = HEAP32[$4 + 44 >> 2];
     HEAP32[$5 + 32 >> 2] = HEAP32[$4 + 40 >> 2];
     HEAP32[$5 + 36 >> 2] = $7;
     $7 = HEAP32[$4 + 36 >> 2];
     HEAP32[$5 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
     HEAP32[$5 + 28 >> 2] = $7;
     $7 = HEAP32[$4 + 28 >> 2];
     HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
     HEAP32[$5 + 20 >> 2] = $7;
     $7 = HEAP32[$4 + 20 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
     HEAP32[$5 + 12 >> 2] = $7;
     HEAP32[$5 + 64 >> 2] = HEAP32[$4 + 72 >> 2];
     HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 180 >> 2] + 68;
     break label$10;
    }
    void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($2 + 176 | 0, $4 + 8 | 0);
   }
   $5 = Math_imul($15, 652);
   Mat4__translate_28float_2c_20float_2c_20float_29($6, Math_fround(.5), Math_fround(.5), Math_fround(-.5));
   $7 = HEAP32[$0 + 16 >> 2];
   $0 = HEAP32[$6 + 12 >> 2];
   HEAP32[$4 + 88 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$4 + 92 >> 2] = $0;
   $0 = HEAP32[$6 + 20 >> 2];
   HEAP32[$4 + 96 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$4 + 100 >> 2] = $0;
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$6 + 24 >> 2];
   HEAP32[$4 + 108 >> 2] = $0;
   $0 = HEAP32[$6 + 36 >> 2];
   HEAP32[$4 + 112 >> 2] = HEAP32[$6 + 32 >> 2];
   HEAP32[$4 + 116 >> 2] = $0;
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$4 + 120 >> 2] = HEAP32[$6 + 40 >> 2];
   HEAP32[$4 + 124 >> 2] = $0;
   $0 = HEAP32[$6 + 52 >> 2];
   HEAP32[$4 + 128 >> 2] = HEAP32[$6 + 48 >> 2];
   HEAP32[$4 + 132 >> 2] = $0;
   $0 = HEAP32[$6 + 60 >> 2];
   HEAP32[$4 + 136 >> 2] = HEAP32[$6 + 56 >> 2];
   HEAP32[$4 + 140 >> 2] = $0;
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$4 + 80 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 84 >> 2] = $0;
   $0 = $7 + ($1 << 6) | 0;
   $17 = HEAPF32[$0 + 12 >> 2];
   $18 = HEAPF32[$0 + 8 >> 2];
   $19 = HEAPF32[$0 >> 2];
   $20 = HEAPF32[$0 + 4 >> 2];
   $21 = HEAPF32[$0 + 28 >> 2];
   $22 = HEAPF32[$0 + 24 >> 2];
   $23 = HEAPF32[$0 + 16 >> 2];
   $24 = HEAPF32[$0 + 20 >> 2];
   $25 = HEAPF32[$0 + 44 >> 2];
   $26 = HEAPF32[$0 + 40 >> 2];
   $27 = HEAPF32[$0 + 32 >> 2];
   $28 = HEAPF32[$0 + 36 >> 2];
   $29 = HEAPF32[$0 + 60 >> 2];
   $30 = HEAPF32[$0 + 56 >> 2];
   $31 = HEAPF32[$0 + 48 >> 2];
   $32 = HEAPF32[$0 + 52 >> 2];
   HEAP32[$4 + 56 >> 2] = 0;
   HEAP32[$4 + 60 >> 2] = 0;
   HEAP32[$4 + 40 >> 2] = 0;
   HEAP32[$4 + 44 >> 2] = 0;
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 0;
   HEAP32[$4 + 64 >> 2] = 0;
   HEAP32[$4 + 68 >> 2] = 0;
   HEAP32[$4 + 48 >> 2] = 0;
   HEAP32[$4 + 52 >> 2] = 0;
   HEAP32[$4 + 32 >> 2] = 0;
   HEAP32[$4 + 36 >> 2] = 0;
   HEAP32[$4 + 16 >> 2] = 0;
   HEAP32[$4 + 20 >> 2] = 0;
   $9 = HEAPF32[$4 + 80 >> 2];
   $10 = HEAPF32[$4 + 96 >> 2];
   $11 = HEAPF32[$4 + 112 >> 2];
   $12 = HEAPF32[$4 + 128 >> 2];
   HEAPF32[$4 + 56 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($31 * $9) + Math_fround(0)) + Math_fround($32 * $10)) + Math_fround($30 * $11)) + Math_fround($29 * $12);
   HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27 * $9) + Math_fround(0)) + Math_fround($28 * $10)) + Math_fround($26 * $11)) + Math_fround($25 * $12);
   HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $9) + Math_fround(0)) + Math_fround($24 * $10)) + Math_fround($22 * $11)) + Math_fround($21 * $12);
   HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround(0)) + Math_fround($20 * $10)) + Math_fround($18 * $11)) + Math_fround($17 * $12);
   $9 = HEAPF32[$4 + 84 >> 2];
   $10 = HEAPF32[$4 + 100 >> 2];
   $11 = HEAPF32[$4 + 116 >> 2];
   $12 = HEAPF32[$4 + 132 >> 2];
   HEAPF32[$4 + 44 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27 * $9) + Math_fround(0)) + Math_fround($28 * $10)) + Math_fround($26 * $11)) + Math_fround($25 * $12);
   HEAPF32[$4 + 28 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $9) + Math_fround(0)) + Math_fround($24 * $10)) + Math_fround($22 * $11)) + Math_fround($21 * $12);
   HEAPF32[$4 + 12 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround(0)) + Math_fround($20 * $10)) + Math_fround($18 * $11)) + Math_fround($17 * $12);
   HEAPF32[$4 + 60 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($31 * $9) + Math_fround(0)) + Math_fround($32 * $10)) + Math_fround($30 * $11)) + Math_fround($29 * $12);
   $9 = HEAPF32[$4 + 88 >> 2];
   $10 = HEAPF32[$4 + 104 >> 2];
   $11 = HEAPF32[$4 + 120 >> 2];
   $12 = HEAPF32[$4 + 136 >> 2];
   HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($31 * $9) + Math_fround(0)) + Math_fround($32 * $10)) + Math_fround($30 * $11)) + Math_fround($29 * $12);
   HEAPF32[$4 + 48 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27 * $9) + Math_fround(0)) + Math_fround($28 * $10)) + Math_fround($26 * $11)) + Math_fround($25 * $12);
   HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $9) + Math_fround(0)) + Math_fround($24 * $10)) + Math_fround($22 * $11)) + Math_fround($21 * $12);
   HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround(0)) + Math_fround($20 * $10)) + Math_fround($18 * $11)) + Math_fround($17 * $12);
   $9 = HEAPF32[$4 + 92 >> 2];
   $10 = HEAPF32[$4 + 108 >> 2];
   $11 = HEAPF32[$4 + 124 >> 2];
   $12 = HEAPF32[$4 + 140 >> 2];
   HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround(0)) + Math_fround($20 * $10)) + Math_fround($18 * $11)) + Math_fround($17 * $12);
   HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $9) + Math_fround(0)) + Math_fround($24 * $10)) + Math_fround($22 * $11)) + Math_fround($21 * $12);
   HEAPF32[$4 + 52 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27 * $9) + Math_fround(0)) + Math_fround($28 * $10)) + Math_fround($26 * $11)) + Math_fround($25 * $12);
   HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($31 * $9) + Math_fround(0)) + Math_fround($32 * $10)) + Math_fround($30 * $11)) + Math_fround($29 * $12);
   $0 = HEAP32[$4 + 60 >> 2];
   HEAP32[$6 + 48 >> 2] = HEAP32[$4 + 56 >> 2];
   HEAP32[$6 + 52 >> 2] = $0;
   $0 = HEAP32[$4 + 52 >> 2];
   HEAP32[$6 + 40 >> 2] = HEAP32[$4 + 48 >> 2];
   HEAP32[$6 + 44 >> 2] = $0;
   $0 = HEAP32[$4 + 44 >> 2];
   HEAP32[$6 + 32 >> 2] = HEAP32[$4 + 40 >> 2];
   HEAP32[$6 + 36 >> 2] = $0;
   $0 = HEAP32[$4 + 36 >> 2];
   HEAP32[$6 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$6 + 28 >> 2] = $0;
   $0 = HEAP32[$4 + 20 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$6 + 12 >> 2] = $0;
   $0 = HEAP32[$4 + 68 >> 2];
   HEAP32[$6 + 56 >> 2] = HEAP32[$4 + 64 >> 2];
   HEAP32[$6 + 60 >> 2] = $0;
   $0 = HEAP32[$4 + 28 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[$6 + 20 >> 2] = $0;
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$6 + 4 >> 2] = $0;
   Mat4__translate_28float_2c_20float_2c_20float_29($6, Math_fround(-.5), Math_fround(-.5), Math_fround(.5));
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($6, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
   Mat4__translate_28float_2c_20float_2c_20float_29($6, Math_fround(.5), Math_fround(2.5), Math_fround(2.5));
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($6, Math_fround(Math_imul($8, -90) | 0), Math_fround(1), Math_fround(0), Math_fround(0));
   if (($8 | 0) >= 4) {
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($6, Math_fround(180), Math_fround(0), Math_fround(0), Math_fround(1));
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($6, Math_fround(90), Math_fround(1), Math_fround(0), Math_fround(0));
   }
   $7 = $5 + $16 | 0;
   Mat4__translate_28float_2c_20float_2c_20float_29($6, Math_fround(-.5), Math_fround(-2.5), Math_fround(-2.5));
   $0 = $1 + 1 | 0;
   HEAPF32[$4 + 8 >> 2] = +(($0 & 255) >>> 0) / 255;
   HEAPF32[$4 + 16 >> 2] = +(($0 >>> 16 & 255) >>> 0) / 255;
   HEAPF32[$4 + 12 >> 2] = +(($0 >>> 8 & 255) >>> 0) / 255;
   $5 = 0;
   $0 = HEAP32[11981];
   $15 = HEAP32[$0 + 92 >> 2];
   $5 = HEAP32[$0 + 96 >> 2] - $15 >> 2 >>> 0 > $1 >>> 0 ? HEAP32[$15 + ($1 << 2) >> 2] : $5;
   $0 = HEAP32[(Math_imul($1, 188) + $33 | 0) + 16 >> 2];
   $1 = HEAP32[$13 + 336 >> 2];
   HEAP32[$4 + 80 >> 2] = $7;
   PicPainter__paint_28bool_2c_20Vec3_20const__2c_20BaseGLWidget__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($4 + 80 | 0, $3, $4 + 8 | 0, $2, ($1 | 0) > 3, $5, $1, ($0 | 0) != 1 ^ ($8 | 0) > 3);
   $8 = HEAP32[$2 + 180 >> 2];
   if (($8 | 0) == HEAP32[$2 + 176 >> 2]) {
    break label$1;
   }
   $0 = $8 + -68 | 0;
   if (($0 | 0) != ($6 | 0)) {
    $3 = HEAP32[$0 + 4 >> 2];
    HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$6 + 4 >> 2] = $3;
    $3 = HEAP32[$0 + 60 >> 2];
    HEAP32[$6 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
    HEAP32[$6 + 60 >> 2] = $3;
    $3 = HEAP32[$0 + 52 >> 2];
    HEAP32[$6 + 48 >> 2] = HEAP32[$0 + 48 >> 2];
    HEAP32[$6 + 52 >> 2] = $3;
    $3 = HEAP32[$0 + 44 >> 2];
    HEAP32[$6 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
    HEAP32[$6 + 44 >> 2] = $3;
    $3 = HEAP32[$0 + 36 >> 2];
    HEAP32[$6 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
    HEAP32[$6 + 36 >> 2] = $3;
    $3 = HEAP32[$0 + 28 >> 2];
    HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
    HEAP32[$6 + 28 >> 2] = $3;
    $3 = HEAP32[$0 + 20 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
    HEAP32[$6 + 20 >> 2] = $3;
    $3 = HEAP32[$0 + 12 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$6 + 12 >> 2] = $3;
   }
   $1 = HEAP32[$8 + -4 >> 2];
   HEAP32[$2 + 180 >> 2] = $0;
   HEAP32[$2 + 172 >> 2] = $1;
  }
  global$0 = $4 + 144 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $11 = global$0 - 560 | 0;
 global$0 = $11;
 HEAP32[$11 + 44 >> 2] = 0;
 wasm2js_scratch_store_f64(+$1);
 $6 = wasm2js_scratch_load_i32(1) | 0;
 label$1 : {
  if (wasm2js_i32$0 = 1, wasm2js_i32$1 = (wasm2js_i32$3 = wasm2js_scratch_load_i32(0) >>> 0 > 4294967295 ? 0 : 1, wasm2js_i32$4 = 0, wasm2js_i32$5 = ($6 | 0) <= -1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$2 = ($6 | 0) < -1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
   $1 = -$1;
   wasm2js_scratch_store_f64(+$1);
   $6 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $21 = 1;
   $22 = 17744;
   break label$1;
  }
  if ($4 & 2048) {
   $21 = 1;
   $22 = 17747;
   break label$1;
  }
  $21 = $4 & 1;
  $22 = $21 ? 17750 : 17745;
 }
 label$4 : {
  if (($6 & 2146435072) == 2146435072) {
   $10 = $21 + 3 | 0;
   pad($0, 32, $2, $10, $4 & -65537);
   out($0, $22, $21);
   $3 = $5 >>> 5 & 1;
   out($0, $1 != $1 ? $3 ? 17771 : 17775 : $3 ? 17763 : 17767, 3);
   break label$4;
  }
  $1 = frexp($1, $11 + 44 | 0);
  $1 = $1 + $1;
  if ($1 != 0) {
   HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + -1;
  }
  $18 = $11 + 16 | 0;
  $23 = $5 | 32;
  if (($23 | 0) == 97) {
   $13 = $5 & 32;
   $12 = $13 ? $22 + 9 | 0 : $22;
   label$8 : {
    if ($3 >>> 0 > 11) {
     break label$8;
    }
    $6 = 12 - $3 | 0;
    if (!$6) {
     break label$8;
    }
    $19 = 8;
    while (1) {
     $19 = $19 * 16;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
    if (HEAPU8[$12 | 0] == 45) {
     $1 = -($19 + (-$1 - $19));
     break label$8;
    }
    $1 = $1 + $19 - $19;
   }
   $6 = HEAP32[$11 + 44 >> 2];
   $8 = $6 >> 31;
   $6 = fmt_u($8 ^ $6 + $8, 0, $18);
   if (($18 | 0) == ($6 | 0)) {
    HEAP8[$11 + 15 | 0] = 48;
    $6 = $11 + 15 | 0;
   }
   $15 = $21 | 2;
   $8 = HEAP32[$11 + 44 >> 2];
   $14 = $6 + -2 | 0;
   HEAP8[$14 | 0] = $5 + 15;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $4 & 8;
   $7 = $11 + 16 | 0;
   while (1) {
    $5 = $7;
    $10 = $13;
    if (Math_abs($1) < 2147483648) {
     $8 = ~~$1;
    } else {
     $8 = -2147483648;
    }
    HEAP8[$7 | 0] = $10 | HEAPU8[$8 + 17728 | 0];
    $1 = ($1 - +($8 | 0)) * 16;
    $7 = $5 + 1 | 0;
    if (!(($7 - ($11 + 16 | 0) | 0) != 1 | ($1 == 0 ? !(($3 | 0) > 0 | $6) : 0))) {
     HEAP8[$5 + 1 | 0] = 46;
     $7 = $5 + 2 | 0;
    }
    if ($1 != 0) {
     continue;
    }
    break;
   }
   $5 = $0;
   $6 = $2;
   if (!$3 | (($7 - $11 | 0) + -18 | 0) >= ($3 | 0)) {
    $13 = (($18 - ($11 + 16 | 0) | 0) - $14 | 0) + $7 | 0;
   } else {
    $13 = (($3 + $18 | 0) - $14 | 0) + 2 | 0;
   }
   $10 = $13 + $15 | 0;
   pad($5, 32, $6, $10, $4);
   out($0, $12, $15);
   pad($0, 48, $2, $10, $4 ^ 65536);
   $3 = $7 - ($11 + 16 | 0) | 0;
   out($0, $11 + 16 | 0, $3);
   $5 = $3;
   $3 = $18 - $14 | 0;
   pad($0, 48, $13 - ($5 + $3 | 0) | 0, 0, 0);
   out($0, $14, $3);
   break label$4;
  }
  $6 = ($3 | 0) < 0;
  label$19 : {
   if ($1 == 0) {
    $9 = HEAP32[$11 + 44 >> 2];
    break label$19;
   }
   $9 = HEAP32[$11 + 44 >> 2] + -28 | 0;
   HEAP32[$11 + 44 >> 2] = $9;
   $1 = $1 * 268435456;
  }
  $13 = $6 ? 6 : $3;
  $15 = ($9 | 0) < 0 ? $11 + 48 | 0 : $11 + 336 | 0;
  $8 = $15;
  while (1) {
   $3 = $8;
   if ($1 < 4294967296 & $1 >= 0) {
    $6 = ~~$1 >>> 0;
   } else {
    $6 = 0;
   }
   HEAP32[$3 >> 2] = $6;
   $8 = $8 + 4 | 0;
   $1 = ($1 - +($6 >>> 0)) * 1e9;
   if ($1 != 0) {
    continue;
   }
   break;
  }
  label$24 : {
   if (($9 | 0) < 1) {
    $6 = $8;
    $7 = $15;
    break label$24;
   }
   $7 = $15;
   while (1) {
    $16 = ($9 | 0) < 29 ? $9 : 29;
    $6 = $8 + -4 | 0;
    label$27 : {
     if ($6 >>> 0 < $7 >>> 0) {
      break label$27;
     }
     $3 = $16;
     $10 = 0;
     while (1) {
      $14 = 0;
      $17 = $10;
      $10 = HEAP32[$6 >> 2];
      $12 = $3 & 31;
      if (32 <= ($3 & 63) >>> 0) {
       $9 = $10 << $12;
       $12 = 0;
      } else {
       $9 = (1 << $12) - 1 & $10 >>> 32 - $12;
       $12 = $10 << $12;
      }
      $10 = $17 + $12 | 0;
      $9 = $9 + $14 | 0;
      $9 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $14 = $10;
      $10 = __wasm_i64_udiv($10, $9, 1e9);
      $12 = __wasm_i64_mul($10, i64toi32_i32$HIGH_BITS, 1e9, 0);
      HEAP32[$6 >> 2] = $14 - $12;
      $6 = $6 + -4 | 0;
      if ($6 >>> 0 >= $7 >>> 0) {
       continue;
      }
      break;
     }
     $3 = $10;
     if (!$3) {
      break label$27;
     }
     $7 = $7 + -4 | 0;
     HEAP32[$7 >> 2] = $3;
    }
    while (1) {
     $6 = $8;
     if ($6 >>> 0 > $7 >>> 0) {
      $8 = $6 + -4 | 0;
      if (!HEAP32[$8 >> 2]) {
       continue;
      }
     }
     break;
    }
    $9 = HEAP32[$11 + 44 >> 2] - $16 | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $8 = $6;
    if (($9 | 0) > 0) {
     continue;
    }
    break;
   }
  }
  if (($9 | 0) <= -1) {
   $20 = (($13 + 25 | 0) / 9 | 0) + 1 | 0;
   $17 = ($23 | 0) == 102;
   while (1) {
    $16 = ($9 | 0) < -9 ? 9 : 0 - $9 | 0;
    label$33 : {
     if ($7 >>> 0 >= $6 >>> 0) {
      $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
      break label$33;
     }
     $14 = 1e9 >>> $16;
     $12 = -1 << $16 ^ -1;
     $9 = 0;
     $8 = $7;
     while (1) {
      $3 = HEAP32[$8 >> 2];
      HEAP32[$8 >> 2] = ($3 >>> $16) + $9;
      $9 = Math_imul($14, $3 & $12);
      $8 = $8 + 4 | 0;
      if ($8 >>> 0 < $6 >>> 0) {
       continue;
      }
      break;
     }
     $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
     if (!$9) {
      break label$33;
     }
     HEAP32[$6 >> 2] = $9;
     $6 = $6 + 4 | 0;
    }
    $9 = $16 + HEAP32[$11 + 44 >> 2] | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $3 = $17 ? $15 : $7;
    $6 = $6 - $3 >> 2 > ($20 | 0) ? $3 + ($20 << 2) | 0 : $6;
    if (($9 | 0) < 0) {
     continue;
    }
    break;
   }
  }
  $8 = 0;
  label$36 : {
   if ($7 >>> 0 >= $6 >>> 0) {
    break label$36;
   }
   $8 = Math_imul($15 - $7 >> 2, 9);
   $9 = 10;
   $3 = HEAP32[$7 >> 2];
   if ($3 >>> 0 < 10) {
    break label$36;
   }
   while (1) {
    $8 = $8 + 1 | 0;
    $9 = Math_imul($9, 10);
    if ($3 >>> 0 >= $9 >>> 0) {
     continue;
    }
    break;
   }
  }
  $3 = ($13 - (($23 | 0) == 102 ? 0 : $8) | 0) - (($23 | 0) == 103 & ($13 | 0) != 0) | 0;
  if (($3 | 0) < (Math_imul($6 - $15 >> 2, 9) + -9 | 0)) {
   $14 = $3 + 9216 | 0;
   $12 = ($14 | 0) / 9 | 0;
   $10 = ($15 + ($12 << 2) | 0) + -4092 | 0;
   $3 = 10;
   $9 = $14 - Math_imul($12, 9) | 0;
   if (($9 | 0) <= 7) {
    while (1) {
     $3 = Math_imul($3, 10);
     $12 = ($9 | 0) < 7;
     $9 = $9 + 1 | 0;
     if ($12) {
      continue;
     }
     break;
    }
   }
   $17 = HEAP32[$10 >> 2];
   $14 = ($17 >>> 0) / ($3 >>> 0) | 0;
   $20 = $10 + 4 | 0;
   $16 = $17 - Math_imul($3, $14) | 0;
   label$41 : {
    if ($16 ? 0 : ($20 | 0) == ($6 | 0)) {
     break label$41;
    }
    $12 = $3 >>> 1;
    $19 = $16 >>> 0 < $12 >>> 0 ? .5 : ($6 | 0) == ($20 | 0) ? ($12 | 0) == ($16 | 0) ? 1 : 1.5 : 1.5;
    $1 = $14 & 1 ? 9007199254740994 : 9007199254740992;
    if (!(!$21 | HEAPU8[$22 | 0] != 45)) {
     $19 = -$19;
     $1 = -$1;
    }
    $12 = $17 - $16 | 0;
    HEAP32[$10 >> 2] = $12;
    if ($1 + $19 == $1) {
     break label$41;
    }
    $3 = $3 + $12 | 0;
    HEAP32[$10 >> 2] = $3;
    if ($3 >>> 0 >= 1e9) {
     while (1) {
      HEAP32[$10 >> 2] = 0;
      $10 = $10 + -4 | 0;
      if ($10 >>> 0 < $7 >>> 0) {
       $7 = $7 + -4 | 0;
       HEAP32[$7 >> 2] = 0;
      }
      $3 = HEAP32[$10 >> 2] + 1 | 0;
      HEAP32[$10 >> 2] = $3;
      if ($3 >>> 0 > 999999999) {
       continue;
      }
      break;
     }
    }
    $8 = Math_imul($15 - $7 >> 2, 9);
    $9 = 10;
    $3 = HEAP32[$7 >> 2];
    if ($3 >>> 0 < 10) {
     break label$41;
    }
    while (1) {
     $8 = $8 + 1 | 0;
     $9 = Math_imul($9, 10);
     if ($3 >>> 0 >= $9 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = $10 + 4 | 0;
   $6 = $6 >>> 0 > $3 >>> 0 ? $3 : $6;
  }
  label$47 : {
   while (1) {
    $17 = $6;
    $14 = 0;
    if ($6 >>> 0 <= $7 >>> 0) {
     break label$47;
    }
    $6 = $17 + -4 | 0;
    if (!HEAP32[$6 >> 2]) {
     continue;
    }
    break;
   }
   $14 = 1;
  }
  label$49 : {
   if (($23 | 0) != 103) {
    $12 = $4 & 8;
    break label$49;
   }
   $6 = $13 ? $13 : 1;
   $3 = ($6 | 0) > ($8 | 0) & ($8 | 0) > -5;
   $13 = ($3 ? $8 ^ -1 : -1) + $6 | 0;
   $5 = ($3 ? -1 : -2) + $5 | 0;
   $12 = $4 & 8;
   if ($12) {
    break label$49;
   }
   $6 = 9;
   label$51 : {
    if (!$14) {
     break label$51;
    }
    $12 = HEAP32[$17 + -4 >> 2];
    if (!$12) {
     break label$51;
    }
    $3 = 10;
    $6 = 0;
    if (($12 >>> 0) % 10) {
     break label$51;
    }
    while (1) {
     $6 = $6 + 1 | 0;
     $3 = Math_imul($3, 10);
     if (!(($12 >>> 0) % ($3 >>> 0))) {
      continue;
     }
     break;
    }
   }
   $3 = Math_imul($17 - $15 >> 2, 9) + -9 | 0;
   if (($5 | 32) == 102) {
    $12 = 0;
    $3 = $3 - $6 | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
    break label$49;
   }
   $12 = 0;
   $3 = ($3 + $8 | 0) - $6 | 0;
   $3 = ($3 | 0) > 0 ? $3 : 0;
   $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
  }
  $9 = $13 | $12;
  $10 = ($9 | 0) != 0;
  $3 = $0;
  $23 = $2;
  $16 = $5 | 32;
  $6 = ($8 | 0) > 0 ? $8 : 0;
  label$54 : {
   if (($16 | 0) == 102) {
    break label$54;
   }
   $6 = $8 >> 31;
   $6 = fmt_u($6 + $8 ^ $6, 0, $18);
   if (($18 - $6 | 0) <= 1) {
    while (1) {
     $6 = $6 + -1 | 0;
     HEAP8[$6 | 0] = 48;
     if (($18 - $6 | 0) < 2) {
      continue;
     }
     break;
    }
   }
   $20 = $6 + -2 | 0;
   HEAP8[$20 | 0] = $5;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $18 - $20 | 0;
  }
  $10 = ($6 + ($10 + ($13 + $21 | 0) | 0) | 0) + 1 | 0;
  pad($3, 32, $23, $10, $4);
  out($0, $22, $21);
  pad($0, 48, $2, $10, $4 ^ 65536);
  label$57 : {
   label$58 : {
    label$59 : {
     if (($16 | 0) == 102) {
      $3 = $11 + 16 | 8;
      $8 = $11 + 16 | 9;
      $5 = $7 >>> 0 > $15 >>> 0 ? $15 : $7;
      $7 = $5;
      while (1) {
       $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
       label$62 : {
        if (($5 | 0) != ($7 | 0)) {
         if ($6 >>> 0 <= $11 + 16 >>> 0) {
          break label$62;
         }
         while (1) {
          $6 = $6 + -1 | 0;
          HEAP8[$6 | 0] = 48;
          if ($6 >>> 0 > $11 + 16 >>> 0) {
           continue;
          }
          break;
         }
         break label$62;
        }
        if (($6 | 0) != ($8 | 0)) {
         break label$62;
        }
        HEAP8[$11 + 24 | 0] = 48;
        $6 = $3;
       }
       out($0, $6, $8 - $6 | 0);
       $7 = $7 + 4 | 0;
       if ($7 >>> 0 <= $15 >>> 0) {
        continue;
       }
       break;
      }
      if ($9) {
       out($0, 17779, 1);
      }
      if (($13 | 0) < 1 | $7 >>> 0 >= $17 >>> 0) {
       break label$59;
      }
      while (1) {
       $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
       if ($6 >>> 0 > $11 + 16 >>> 0) {
        while (1) {
         $6 = $6 + -1 | 0;
         HEAP8[$6 | 0] = 48;
         if ($6 >>> 0 > $11 + 16 >>> 0) {
          continue;
         }
         break;
        }
       }
       out($0, $6, ($13 | 0) < 9 ? $13 : 9);
       $6 = $13 + -9 | 0;
       $7 = $7 + 4 | 0;
       if ($7 >>> 0 >= $17 >>> 0) {
        break label$58;
       }
       $3 = ($13 | 0) > 9;
       $13 = $6;
       if ($3) {
        continue;
       }
       break;
      }
      break label$58;
     }
     label$69 : {
      if (($13 | 0) < 0) {
       break label$69;
      }
      $5 = $14 ? $17 : $7 + 4 | 0;
      $3 = $11 + 16 | 8;
      $15 = $11 + 16 | 9;
      $8 = $7;
      while (1) {
       $6 = fmt_u(HEAP32[$8 >> 2], 0, $15);
       if (($15 | 0) == ($6 | 0)) {
        HEAP8[$11 + 24 | 0] = 48;
        $6 = $3;
       }
       label$72 : {
        if (($7 | 0) != ($8 | 0)) {
         if ($6 >>> 0 <= $11 + 16 >>> 0) {
          break label$72;
         }
         while (1) {
          $6 = $6 + -1 | 0;
          HEAP8[$6 | 0] = 48;
          if ($6 >>> 0 > $11 + 16 >>> 0) {
           continue;
          }
          break;
         }
         break label$72;
        }
        out($0, $6, 1);
        $6 = $6 + 1 | 0;
        if (($13 | 0) < 1 ? !$12 : 0) {
         break label$72;
        }
        out($0, 17779, 1);
       }
       $14 = $6;
       $6 = $15 - $6 | 0;
       out($0, $14, ($13 | 0) > ($6 | 0) ? $6 : $13);
       $13 = $13 - $6 | 0;
       $8 = $8 + 4 | 0;
       if ($8 >>> 0 >= $5 >>> 0) {
        break label$69;
       }
       if (($13 | 0) > -1) {
        continue;
       }
       break;
      }
     }
     pad($0, 48, $13 + 18 | 0, 18, 0);
     out($0, $20, $18 - $20 | 0);
     break label$57;
    }
    $6 = $13;
   }
   pad($0, 48, $6 + 9 | 0, 9, 0);
  }
 }
 pad($0, 32, $2, $10, $4 ^ 8192);
 global$0 = $11 + 560 | 0;
 return (($10 | 0) < ($2 | 0) ? $2 : $10) | 0;
}
function PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $6 = global$0 - 272 | 0;
 global$0 = $6;
 if (!(!!(HEAPU8[47600] != 0) | HEAP8[47600] & 1)) {
  HEAP32[11898] = 0;
  HEAP32[11899] = 0;
  HEAP32[11896] = 0;
  HEAP32[11897] = 0;
  HEAP32[11894] = 0;
  HEAP32[11895] = 0;
  HEAP32[11892] = 0;
  HEAP32[11893] = 0;
  HEAP32[11890] = 0;
  HEAP32[11891] = 0;
  HEAP32[11888] = 0;
  HEAP32[11889] = 0;
  HEAP32[11900] = 0;
  HEAP32[11900] = HEAP32[11900] | 1;
 }
 if (!(!!(HEAPU8[47664] != 0) | HEAP8[47664] & 1)) {
  HEAP32[11914] = 0;
  HEAP32[11915] = 0;
  HEAP32[11912] = 0;
  HEAP32[11913] = 0;
  HEAP32[11910] = 0;
  HEAP32[11911] = 0;
  HEAP32[11908] = 0;
  HEAP32[11909] = 0;
  HEAP32[11906] = 0;
  HEAP32[11907] = 0;
  HEAP32[11904] = 0;
  HEAP32[11905] = 0;
  HEAP32[11916] = 0;
  HEAP32[11916] = HEAP32[11916] | 1;
 }
 if (!(!!(HEAPU8[47728] != 0) | HEAP8[47728] & 1)) {
  HEAP32[11930] = 0;
  HEAP32[11931] = 0;
  HEAP32[11928] = 0;
  HEAP32[11929] = 0;
  HEAP32[11926] = 0;
  HEAP32[11927] = 0;
  HEAP32[11924] = 0;
  HEAP32[11925] = 0;
  HEAP32[11922] = 0;
  HEAP32[11923] = 0;
  HEAP32[11920] = 0;
  HEAP32[11921] = 0;
  HEAP32[11932] = 0;
  HEAP32[11932] = HEAP32[11932] | 1;
 }
 if (!(!!(HEAPU8[47792] != 0) | HEAP8[47792] & 1)) {
  HEAP32[11946] = 0;
  HEAP32[11947] = 0;
  HEAP32[11944] = 0;
  HEAP32[11945] = 0;
  HEAP32[11942] = 0;
  HEAP32[11943] = 0;
  HEAP32[11940] = 0;
  HEAP32[11941] = 0;
  HEAP32[11938] = 0;
  HEAP32[11939] = 0;
  HEAP32[11936] = 0;
  HEAP32[11937] = 0;
  HEAP32[11948] = 0;
  HEAP32[11948] = HEAP32[11948] | 1;
 }
 if (!(!!(HEAPU8[47856] != 0) | HEAP8[47856] & 1)) {
  HEAP32[11962] = 0;
  HEAP32[11963] = 0;
  HEAP32[11960] = 0;
  HEAP32[11961] = 0;
  HEAP32[11958] = 0;
  HEAP32[11959] = 0;
  HEAP32[11956] = 0;
  HEAP32[11957] = 0;
  HEAP32[11954] = 0;
  HEAP32[11955] = 0;
  HEAP32[11952] = 0;
  HEAP32[11953] = 0;
  HEAP32[11964] = 0;
  HEAP32[11964] = HEAP32[11964] | 1;
 }
 if (!(!!(HEAPU8[47920] != 0) | HEAP8[47920] & 1)) {
  HEAP32[11978] = 0;
  HEAP32[11979] = 0;
  HEAP32[11976] = 0;
  HEAP32[11977] = 0;
  HEAP32[11974] = 0;
  HEAP32[11975] = 0;
  HEAP32[11972] = 0;
  HEAP32[11973] = 0;
  HEAP32[11970] = 0;
  HEAP32[11971] = 0;
  HEAP32[11968] = 0;
  HEAP32[11969] = 0;
  HEAP32[11980] = 0;
  HEAP32[11980] = HEAP32[11980] | 1;
 }
 HEAP32[$6 + 120 >> 2] = 0;
 HEAP32[$6 + 124 >> 2] = 0;
 HEAP32[$6 + 112 >> 2] = 0;
 HEAP32[$6 + 116 >> 2] = 0;
 HEAP32[$6 + 104 >> 2] = 0;
 HEAP32[$6 + 108 >> 2] = 0;
 HEAP32[$6 + 96 >> 2] = 0;
 HEAP32[$6 + 100 >> 2] = 0;
 HEAP32[$6 + 88 >> 2] = 0;
 HEAP32[$6 + 92 >> 2] = 0;
 HEAP32[$6 + 80 >> 2] = 0;
 HEAP32[$6 + 84 >> 2] = 0;
 HEAP32[$6 + 72 >> 2] = 0;
 HEAP32[$6 + 76 >> 2] = 0;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAP32[$6 + 68 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 60 >> 2] = 0;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 52 >> 2] = 0;
 HEAP32[$6 + 40 >> 2] = 0;
 HEAP32[$6 + 44 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $17 = +($5 | 0) / 5;
 $7 = Math_fround($17);
 HEAPF32[$6 + 164 >> 2] = $7;
 $18 = +($4 | 0) / 5;
 $8 = Math_fround($18);
 HEAPF32[$6 + 160 >> 2] = $8;
 HEAPF32[$6 + 172 >> 2] = $7;
 $10 = Math_fround($18 + .2);
 HEAPF32[$6 + 168 >> 2] = $10;
 $11 = Math_fround($17 + .2);
 HEAPF32[$6 + 180 >> 2] = $11;
 HEAPF32[$6 + 176 >> 2] = $10;
 HEAPF32[$6 + 188 >> 2] = $11;
 HEAPF32[$6 + 184 >> 2] = $8;
 HEAPF32[$6 + 156 >> 2] = $11;
 HEAPF32[$6 + 148 >> 2] = $11;
 HEAPF32[$6 + 152 >> 2] = $8;
 HEAPF32[$6 + 144 >> 2] = $10;
 HEAPF32[$6 + 140 >> 2] = $7;
 HEAPF32[$6 + 136 >> 2] = $10;
 HEAPF32[$6 + 132 >> 2] = $7;
 HEAPF32[$6 + 128 >> 2] = $8;
 $9 = HEAP32[$6 + 164 >> 2];
 $15 = HEAP32[$6 + 160 >> 2];
 HEAP32[$6 + 224 >> 2] = $15;
 HEAP32[$6 + 228 >> 2] = $9;
 $12 = HEAP32[$6 + 188 >> 2];
 $16 = HEAP32[$6 + 184 >> 2];
 HEAP32[$6 + 192 >> 2] = $16;
 HEAP32[$6 + 196 >> 2] = $12;
 $13 = HEAP32[$6 + 172 >> 2];
 $19 = HEAP32[$6 + 168 >> 2];
 HEAP32[$6 + 232 >> 2] = $19;
 HEAP32[$6 + 236 >> 2] = $13;
 $14 = HEAP32[$6 + 180 >> 2];
 $20 = HEAP32[$6 + 176 >> 2];
 HEAP32[$6 + 200 >> 2] = $20;
 HEAP32[$6 + 204 >> 2] = $14;
 HEAP32[$6 + 240 >> 2] = $20;
 HEAP32[$6 + 244 >> 2] = $14;
 HEAP32[$6 + 208 >> 2] = $19;
 HEAP32[$6 + 212 >> 2] = $13;
 HEAP32[$6 + 248 >> 2] = $16;
 HEAP32[$6 + 252 >> 2] = $12;
 HEAP32[$6 + 216 >> 2] = $15;
 HEAP32[$6 + 220 >> 2] = $9;
 $7 = Math_fround($5 | 0);
 HEAPF32[11889] = $7;
 HEAP32[11888] = 0;
 $8 = Math_fround($4 | 0);
 HEAPF32[11890] = $8;
 $9 = HEAP32[11889];
 HEAP32[11913] = HEAP32[11888];
 HEAP32[11914] = $9;
 HEAP32[11915] = HEAP32[11890];
 HEAPF32[11913] = HEAPF32[11913] + Math_fround(1);
 HEAPF32[11892] = $7;
 HEAP32[11891] = 0;
 $10 = Math_fround($4 + 1 | 0);
 HEAPF32[11893] = $10;
 $4 = HEAP32[11892];
 HEAP32[11910] = HEAP32[11891];
 HEAP32[11911] = $4;
 HEAP32[11912] = HEAP32[11893];
 HEAPF32[11910] = HEAPF32[11910] + Math_fround(1);
 $11 = Math_fround($5 + 1 | 0);
 HEAPF32[11895] = $11;
 HEAP32[11894] = 0;
 HEAPF32[11896] = $10;
 $4 = HEAP32[11895];
 HEAP32[11907] = HEAP32[11894];
 HEAP32[11908] = $4;
 HEAP32[11909] = HEAP32[11896];
 HEAPF32[11907] = HEAPF32[11907] + Math_fround(1);
 HEAPF32[11898] = $11;
 HEAP32[11897] = 0;
 HEAPF32[11899] = $8;
 $4 = HEAP32[11898];
 HEAP32[11904] = HEAP32[11897];
 HEAP32[11905] = $4;
 HEAP32[11906] = HEAP32[11899];
 HEAPF32[11904] = HEAPF32[11904] + Math_fround(1);
 if ($3) {
  MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47552, $6 + 224 | 0);
  MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47616, $6 + 192 | 0);
 }
 label$8 : {
  if (($2 | 0) < 0) {
   break label$8;
  }
  $4 = HEAP32[$6 + 156 >> 2];
  $12 = HEAP32[$6 + 152 >> 2];
  HEAP32[$6 + 88 >> 2] = $12;
  HEAP32[$6 + 92 >> 2] = $4;
  $5 = HEAP32[$6 + 148 >> 2];
  $13 = HEAP32[$6 + 144 >> 2];
  HEAP32[$6 + 80 >> 2] = $13;
  HEAP32[$6 + 84 >> 2] = $5;
  HEAP32[$6 + 16 >> 2] = $13;
  HEAP32[$6 + 20 >> 2] = $5;
  HEAP32[$6 + 24 >> 2] = $12;
  HEAP32[$6 + 28 >> 2] = $4;
  $9 = HEAP32[$6 + 140 >> 2];
  $14 = HEAP32[$6 + 136 >> 2];
  HEAP32[$6 + 72 >> 2] = $14;
  HEAP32[$6 + 76 >> 2] = $9;
  $15 = HEAP32[$6 + 132 >> 2];
  $16 = HEAP32[$6 + 128 >> 2];
  HEAP32[$6 + 64 >> 2] = $16;
  HEAP32[$6 + 68 >> 2] = $15;
  HEAP32[$6 >> 2] = $16;
  HEAP32[$6 + 4 >> 2] = $15;
  HEAP32[$6 + 8 >> 2] = $14;
  HEAP32[$6 + 12 >> 2] = $9;
  HEAP32[$6 + 112 >> 2] = $14;
  HEAP32[$6 + 116 >> 2] = $9;
  HEAP32[$6 + 48 >> 2] = $14;
  HEAP32[$6 + 52 >> 2] = $9;
  HEAP32[$6 + 96 >> 2] = $12;
  HEAP32[$6 + 100 >> 2] = $4;
  HEAP32[$6 + 32 >> 2] = $12;
  HEAP32[$6 + 36 >> 2] = $4;
  HEAP32[$6 + 104 >> 2] = $13;
  HEAP32[$6 + 108 >> 2] = $5;
  HEAP32[$6 + 40 >> 2] = $13;
  HEAP32[$6 + 44 >> 2] = $5;
  $4 = 0;
  HEAPF32[11921] = $7;
  HEAPF32[11922] = $8;
  HEAP32[11923] = 1065353216;
  HEAPF32[11924] = $7;
  HEAPF32[11925] = $8;
  HEAP32[11920] = 0;
  $5 = HEAP32[11921];
  HEAP32[11945] = HEAP32[11920];
  HEAP32[11946] = $5;
  HEAP32[11947] = HEAP32[11922];
  $5 = HEAP32[11924];
  HEAP32[11942] = HEAP32[11923];
  HEAP32[11943] = $5;
  HEAP32[11944] = HEAP32[11925];
  HEAPF32[11946] = HEAPF32[11946] + Math_fround(1);
  $5 = HEAP32[$6 + 132 >> 2];
  $9 = HEAP32[$6 + 128 >> 2];
  HEAP32[$6 + 120 >> 2] = $9;
  HEAP32[$6 + 124 >> 2] = $5;
  HEAP32[$6 + 56 >> 2] = $9;
  HEAP32[$6 + 60 >> 2] = $5;
  HEAPF32[11943] = HEAPF32[11943] + Math_fround(1);
  HEAPF32[11927] = $7;
  HEAP32[11926] = 1065353216;
  HEAPF32[11928] = $10;
  $5 = HEAP32[11927];
  HEAP32[11939] = HEAP32[11926];
  HEAP32[11940] = $5;
  HEAP32[11941] = HEAP32[11928];
  HEAPF32[11940] = HEAPF32[11940] + Math_fround(1);
  HEAPF32[11930] = $7;
  HEAP32[11929] = 0;
  HEAPF32[11931] = $10;
  $5 = HEAP32[11930];
  HEAP32[11936] = HEAP32[11929];
  HEAP32[11937] = $5;
  HEAP32[11938] = HEAP32[11931];
  HEAPF32[11937] = HEAPF32[11937] + Math_fround(1);
  HEAPF32[11953] = $7;
  HEAP32[11952] = 0;
  HEAPF32[11954] = $8;
  $5 = HEAP32[11953];
  HEAP32[11977] = HEAP32[11952];
  HEAP32[11978] = $5;
  HEAP32[11979] = HEAP32[11954];
  HEAPF32[11979] = HEAPF32[11979] + Math_fround(1);
  HEAPF32[11956] = $11;
  HEAP32[11955] = 0;
  HEAPF32[11957] = $8;
  $5 = HEAP32[11956];
  HEAP32[11974] = HEAP32[11955];
  HEAP32[11975] = $5;
  HEAP32[11976] = HEAP32[11957];
  HEAPF32[11976] = HEAPF32[11976] + Math_fround(1);
  HEAPF32[11959] = $11;
  HEAP32[11958] = 1065353216;
  HEAPF32[11960] = $8;
  $5 = HEAP32[11959];
  HEAP32[11971] = HEAP32[11958];
  HEAP32[11972] = $5;
  HEAP32[11973] = HEAP32[11960];
  HEAPF32[11973] = HEAPF32[11973] + Math_fround(1);
  HEAPF32[11962] = $7;
  HEAP32[11961] = 1065353216;
  HEAPF32[11963] = $8;
  $5 = HEAP32[11962];
  HEAP32[11968] = HEAP32[11961];
  HEAP32[11969] = $5;
  HEAP32[11970] = HEAP32[11963];
  HEAPF32[11970] = HEAPF32[11970] + Math_fround(1);
  $5 = 4369 >>> $2 & 1;
  label$9 : {
   label$10 : {
    if ($3) {
     $3 = Math_imul($2, 60);
     $4 = HEAP32[$3 + 4988 >> 2];
     $4 = $5 ? HEAP32[$3 + 4992 >> 2] | $4 : $4;
     $3 = Math_imul($2 ? $2 + -1 | 0 : 15, 60);
     if (!HEAPU8[((Math_imul(HEAP32[$3 + 4948 >> 2], 5) + HEAP32[$3 + 4944 >> 2] | 0) + $0 | 0) + 204 | 0]) {
      $4 = HEAP32[Math_imul($2, 60) + 5e3 >> 2] | $4;
     }
     $3 = $0;
     $0 = Math_imul($2 + 1 | 0, 60);
     if (HEAPU8[($3 + (Math_imul(HEAP32[$0 + 4948 >> 2], 5) + HEAP32[$0 + 4944 >> 2] | 0) | 0) + 204 | 0]) {
      break label$10;
     }
     $4 = HEAP32[Math_imul($2, 60) + 4996 >> 2] | $4;
     break label$10;
    }
    if ($5) {
     break label$9;
    }
    $4 = HEAP32[Math_imul($2, 60) + 4992 >> 2];
   }
   if ($4 & 1) {
    MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47680, $6 + 96 | 0);
   }
   if ($4 & 2) {
    MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47744, $6 - -64 | 0);
   }
   if ($4 & 4) {
    MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47808, $6 + 32 | 0);
   }
   if (!($4 & 8)) {
    break label$9;
   }
   MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47872, $6);
  }
  $0 = HEAP32[11923];
  $2 = HEAP32[11924];
  $3 = HEAP32[11930];
  HEAP32[11923] = HEAP32[11929];
  HEAP32[11924] = $3;
  $3 = HEAP32[11925];
  HEAP32[11925] = HEAP32[11931];
  HEAP32[11929] = $0;
  HEAP32[11930] = $2;
  HEAP32[11931] = $3;
  $0 = HEAP32[$6 + 120 >> 2];
  $2 = HEAP32[$6 + 124 >> 2];
  $3 = HEAP32[$6 + 108 >> 2];
  HEAP32[$6 + 120 >> 2] = HEAP32[$6 + 104 >> 2];
  HEAP32[$6 + 124 >> 2] = $3;
  HEAP32[$6 + 104 >> 2] = $0;
  HEAP32[$6 + 108 >> 2] = $2;
  $2 = HEAP32[11941];
  HEAP32[$6 + 264 >> 2] = $2;
  $0 = HEAP32[11940];
  $3 = HEAP32[11939];
  HEAP32[$6 + 256 >> 2] = $3;
  HEAP32[$6 + 260 >> 2] = $0;
  HEAP32[11941] = HEAP32[11947];
  $5 = HEAP32[11946];
  HEAP32[11939] = HEAP32[11945];
  HEAP32[11940] = $5;
  HEAP32[11947] = $2;
  HEAP32[11945] = $3;
  HEAP32[11946] = $0;
  $0 = HEAP32[$6 + 88 >> 2];
  $2 = HEAP32[$6 + 92 >> 2];
  $3 = HEAP32[$6 + 76 >> 2];
  HEAP32[$6 + 88 >> 2] = HEAP32[$6 + 72 >> 2];
  HEAP32[$6 + 92 >> 2] = $3;
  HEAP32[$6 + 72 >> 2] = $0;
  HEAP32[$6 + 76 >> 2] = $2;
  $2 = HEAP32[11957];
  HEAP32[$6 + 264 >> 2] = $2;
  $0 = HEAP32[11956];
  $3 = HEAP32[11955];
  HEAP32[$6 + 256 >> 2] = $3;
  HEAP32[$6 + 260 >> 2] = $0;
  HEAP32[11957] = HEAP32[11963];
  $5 = HEAP32[11962];
  HEAP32[11955] = HEAP32[11961];
  HEAP32[11956] = $5;
  HEAP32[11963] = $2;
  HEAP32[11961] = $3;
  HEAP32[11962] = $0;
  $0 = HEAP32[$6 + 56 >> 2];
  $2 = HEAP32[$6 + 60 >> 2];
  $3 = HEAP32[$6 + 44 >> 2];
  HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 40 >> 2];
  HEAP32[$6 + 60 >> 2] = $3;
  HEAP32[$6 + 40 >> 2] = $0;
  HEAP32[$6 + 44 >> 2] = $2;
  $2 = HEAP32[11973];
  HEAP32[$6 + 264 >> 2] = $2;
  $0 = HEAP32[11972];
  $3 = HEAP32[11971];
  HEAP32[$6 + 256 >> 2] = $3;
  HEAP32[$6 + 260 >> 2] = $0;
  HEAP32[11973] = HEAP32[11979];
  $5 = HEAP32[11978];
  HEAP32[11971] = HEAP32[11977];
  HEAP32[11972] = $5;
  HEAP32[11979] = $2;
  HEAP32[11977] = $3;
  HEAP32[11978] = $0;
  $0 = HEAP32[$6 + 24 >> 2];
  $2 = HEAP32[$6 + 28 >> 2];
  $3 = HEAP32[$6 + 12 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 28 >> 2] = $3;
  HEAP32[$6 + 8 >> 2] = $0;
  HEAP32[$6 + 12 >> 2] = $2;
  if ($4 & 16) {
   MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47680, $6 + 96 | 0);
  }
  if ($4 & 32) {
   MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47744, $6 - -64 | 0);
  }
  if ($4 & 64) {
   MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47808, $6 + 32 | 0);
  }
  if (!($4 & 128)) {
   break label$8;
  }
  MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($1, 47872, $6);
 }
 global$0 = $6 + 272 | 0;
}
function MyObject__toMesh_28Mesh__2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$1 >> 2] = 0;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  if (!$3) {
   break label$1;
  }
  $8 = HEAP32[$3 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = $8 + -1;
  if ($8) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  std____2____shared_weak_count____release_weak_28_29($3);
 }
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
 $3 = HEAP32[$1 + 124 >> 2];
 $5 = HEAP32[$1 + 120 >> 2];
 if (($3 | 0) != ($5 | 0)) {
  while (1) {
   $8 = $3 + -20 | 0;
   $9 = HEAP32[$8 >> 2];
   if ($9) {
    HEAP32[$3 + -16 >> 2] = $9;
    dlfree($9);
   }
   $3 = $8;
   if (($5 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = $5;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = $1 + 8;
 HEAP32[$4 + 16 >> 2] = $4 + 16 | 4;
 if (HEAP32[$0 + 12 >> 2] < 1) {
  $3 = 0;
 } else {
  $8 = $1 + 68 | 0;
  $9 = $1 + 20 | 0;
  while (1) {
   $5 = HEAP32[HEAP32[$0 >> 2] + ($12 << 2) >> 2];
   $3 = HEAP32[$5 >> 2];
   HEAP32[$4 + 12 >> 2] = 0;
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          if (!$2) {
           if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
            break label$12;
           }
           $6 = $3 + 12 | 0;
           $3 = HEAP32[$1 + 24 >> 2];
           if (($3 | 0) == HEAP32[$1 + 28 >> 2]) {
            break label$13;
           }
           $7 = HEAP32[$6 + 4 >> 2];
           HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
           HEAP32[$3 + 4 >> 2] = $7;
           HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
           HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
           break label$12;
          }
          label$15 : {
           if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
            break label$15;
           }
           $3 = $3 + 12 | 0;
           $6 = HEAP32[$1 + 24 >> 2];
           if (($6 | 0) != HEAP32[$1 + 28 >> 2]) {
            $7 = HEAP32[$3 + 4 >> 2];
            HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
            HEAP32[$6 + 4 >> 2] = $7;
            HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
            HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
            break label$15;
           }
           void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $3);
          }
          $6 = HEAP32[$4 + 12 >> 2];
          HEAP16[$4 + 10 >> 1] = $6;
          $3 = HEAP32[$1 + 72 >> 2];
          label$17 : {
           if ($3 >>> 0 >= HEAPU32[$1 + 76 >> 2]) {
            void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 10 | 0);
            break label$17;
           }
           HEAP16[$3 >> 1] = $6;
           HEAP32[$1 + 72 >> 2] = $3 + 2;
          }
          $3 = HEAP32[$5 + 4 >> 2];
          HEAP32[$4 + 12 >> 2] = 0;
          if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
           break label$10;
          }
          $6 = $3 + 12 | 0;
          $3 = HEAP32[$1 + 24 >> 2];
          if (($3 | 0) == HEAP32[$1 + 28 >> 2]) {
           break label$11;
          }
          $7 = HEAP32[$6 + 4 >> 2];
          HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$3 + 4 >> 2] = $7;
          HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
          HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
          break label$10;
         }
         void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $6);
        }
        $6 = HEAP32[$4 + 12 >> 2];
        $3 = HEAP32[$5 + 4 >> 2];
        HEAP32[$4 + 12 >> 2] = 0;
        label$19 : {
         if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
          break label$19;
         }
         $7 = $3 + 12 | 0;
         $3 = HEAP32[$1 + 24 >> 2];
         if (($3 | 0) != HEAP32[$1 + 28 >> 2]) {
          $11 = HEAP32[$7 + 4 >> 2];
          HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$3 + 4 >> 2] = $11;
          HEAP32[$3 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
          HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
          break label$19;
         }
         void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $7);
        }
        $11 = HEAP32[$4 + 12 >> 2];
        $3 = HEAP32[$5 + 8 >> 2];
        HEAP32[$4 + 12 >> 2] = 0;
        label$21 : {
         if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
          break label$21;
         }
         $7 = $3 + 12 | 0;
         $3 = HEAP32[$1 + 24 >> 2];
         if (($3 | 0) != HEAP32[$1 + 28 >> 2]) {
          $10 = HEAP32[$7 + 4 >> 2];
          HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$3 + 4 >> 2] = $10;
          HEAP32[$3 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
          HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
          break label$21;
         }
         void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $7);
        }
        $7 = HEAP32[$4 + 12 >> 2];
        $3 = HEAP32[$5 + 12 >> 2];
        HEAP32[$4 + 12 >> 2] = 0;
        if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
         break label$8;
        }
        $3 = $3 + 12 | 0;
        $5 = HEAP32[$1 + 24 >> 2];
        if (($5 | 0) == HEAP32[$1 + 28 >> 2]) {
         break label$9;
        }
        $10 = HEAP32[$3 + 4 >> 2];
        HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$5 + 4 >> 2] = $10;
        HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
        HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
        break label$8;
       }
       void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $6);
      }
      $6 = HEAP32[$4 + 12 >> 2];
      HEAP16[$4 + 10 >> 1] = $6;
      $3 = HEAP32[$1 + 72 >> 2];
      label$23 : {
       if ($3 >>> 0 >= HEAPU32[$1 + 76 >> 2]) {
        void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 10 | 0);
        break label$23;
       }
       HEAP16[$3 >> 1] = $6;
       HEAP32[$1 + 72 >> 2] = $3 + 2;
      }
      $3 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 12 >> 2] = 0;
      label$25 : {
       if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
        break label$25;
       }
       $6 = $3 + 12 | 0;
       $3 = HEAP32[$1 + 24 >> 2];
       if (($3 | 0) != HEAP32[$1 + 28 >> 2]) {
        $7 = HEAP32[$6 + 4 >> 2];
        HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$3 + 4 >> 2] = $7;
        HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
        HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
        break label$25;
       }
       void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $6);
      }
      $6 = HEAP32[$4 + 12 >> 2];
      HEAP16[$4 + 10 >> 1] = $6;
      $3 = HEAP32[$1 + 72 >> 2];
      label$27 : {
       if ($3 >>> 0 >= HEAPU32[$1 + 76 >> 2]) {
        void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 10 | 0);
        break label$27;
       }
       HEAP16[$3 >> 1] = $6;
       HEAP32[$1 + 72 >> 2] = $3 + 2;
      }
      $3 = HEAP32[$5 + 12 >> 2];
      HEAP32[$4 + 12 >> 2] = 0;
      label$29 : {
       if (!VecRep__add_28Vec3_20const__2c_20int__29($4 + 16 | 0, $3, $4 + 12 | 0)) {
        break label$29;
       }
       $3 = $3 + 12 | 0;
       $5 = HEAP32[$1 + 24 >> 2];
       if (($5 | 0) != HEAP32[$1 + 28 >> 2]) {
        $6 = HEAP32[$3 + 4 >> 2];
        HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
        HEAP32[$5 + 4 >> 2] = $6;
        HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
        HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 12;
        break label$29;
       }
       void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $3);
      }
      $5 = HEAP32[$4 + 12 >> 2];
      HEAP16[$4 + 10 >> 1] = $5;
      $3 = HEAP32[$1 + 72 >> 2];
      if ($3 >>> 0 >= HEAPU32[$1 + 76 >> 2]) {
       void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 10 | 0);
       break label$7;
      }
      HEAP16[$3 >> 1] = $5;
      HEAP32[$1 + 72 >> 2] = $3 + 2;
      break label$7;
     }
     void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9, $3);
    }
    $10 = HEAP32[$4 + 12 >> 2];
    HEAP16[$4 + 12 >> 1] = $6;
    $3 = HEAP32[$1 + 72 >> 2];
    $5 = HEAP32[$1 + 76 >> 2];
    label$32 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP16[$3 >> 1] = $6;
      $3 = $3 + 2 | 0;
      HEAP32[$1 + 72 >> 2] = $3;
      break label$32;
     }
     void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
     $5 = HEAP32[$1 + 76 >> 2];
     $3 = HEAP32[$1 + 72 >> 2];
    }
    HEAP16[$4 + 12 >> 1] = $11;
    label$34 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP16[$3 >> 1] = $11;
      $3 = $3 + 2 | 0;
      HEAP32[$1 + 72 >> 2] = $3;
      break label$34;
     }
     void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
     $5 = HEAP32[$1 + 76 >> 2];
     $3 = HEAP32[$1 + 72 >> 2];
    }
    HEAP16[$4 + 12 >> 1] = $7;
    label$36 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP16[$3 >> 1] = $7;
      $3 = $3 + 2 | 0;
      HEAP32[$1 + 72 >> 2] = $3;
      break label$36;
     }
     void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
     $5 = HEAP32[$1 + 76 >> 2];
     $3 = HEAP32[$1 + 72 >> 2];
    }
    HEAP16[$4 + 12 >> 1] = $6;
    label$38 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP16[$3 >> 1] = $6;
      $3 = $3 + 2 | 0;
      HEAP32[$1 + 72 >> 2] = $3;
      break label$38;
     }
     void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
     $5 = HEAP32[$1 + 76 >> 2];
     $3 = HEAP32[$1 + 72 >> 2];
    }
    HEAP16[$4 + 12 >> 1] = $7;
    label$40 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP16[$3 >> 1] = $7;
      $3 = $3 + 2 | 0;
      HEAP32[$1 + 72 >> 2] = $3;
      break label$40;
     }
     void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
     $5 = HEAP32[$1 + 76 >> 2];
     $3 = HEAP32[$1 + 72 >> 2];
    }
    HEAP16[$4 + 12 >> 1] = $10;
    if ($3 >>> 0 < $5 >>> 0) {
     HEAP16[$3 >> 1] = $10;
     HEAP32[$1 + 72 >> 2] = $3 + 2;
     break label$7;
    }
    void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($8, $4 + 12 | 0);
   }
   $12 = $12 + 1 | 0;
   if (($12 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
  $3 = HEAP32[$4 + 20 >> 2];
 }
 HEAP8[$1 + 111 | 0] = 1;
 HEAP8[$1 + 108 | 0] = 1;
 HEAP32[$1 + 116 >> 2] = $2 ? 3 : 2;
 std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($4 + 16 | 0, $3);
 global$0 = $4 + 32 | 0;
}
function Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = global$0 - 176 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 12 >> 2];
 $7 = HEAP32[$2 >> 2];
 $5 = HEAP32[$2 + 4 >> 2] - $7 >> 6;
 label$1 : {
  if (($4 | 0) == ($5 | 0)) {
   break label$1;
  }
  if ($4 >>> 0 > $5 >>> 0) {
   std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20_____append_28unsigned_20long_29($2, $4 - $5 | 0);
   break label$1;
  }
  if ($4 >>> 0 >= $5 >>> 0) {
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = $7 + ($4 << 6);
 }
 memset($3 + 16 | 0, 0, 80);
 Shape__startNeiTransform_28MatStack__29_20const($0, $3 + 16 | 0);
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 168 >> 2] = 0;
 $2 = $3 + 160 | 0;
 HEAP32[$3 + 164 >> 2] = $2;
 HEAP32[$3 + 160 >> 2] = $2;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 156 >> 2] = -1;
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 136 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 $2 = 0;
 label$3 : {
  label$4 : {
   if ($4) {
    if ($4 >>> 0 >= 1073741824) {
     break label$4;
    }
    $4 = $4 << 2;
    $2 = operator_20new_28unsigned_20long_29($4);
    HEAP32[$3 + 136 >> 2] = $2;
    $5 = $2 + $4 | 0;
    HEAP32[$3 + 144 >> 2] = $5;
    memset($2, 0, $4);
    HEAP32[$3 + 140 >> 2] = $5;
   }
   HEAP32[$3 + 128 >> 2] = 0;
   HEAP32[$3 + 124 >> 2] = $3 + 120;
   HEAP32[$3 + 120 >> 2] = $3 + 120;
   $4 = operator_20new_28unsigned_20long_29(12);
   HEAP32[$4 + 4 >> 2] = $3 + 120;
   HEAP32[$4 + 8 >> 2] = $3 + 152;
   HEAP32[$4 >> 2] = $3 + 120;
   HEAP32[$3 + 128 >> 2] = 1;
   HEAP32[$3 + 120 >> 2] = $4;
   HEAP32[$3 + 124 >> 2] = $4;
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   $7 = $3 + 104 | 0;
   $2 = 1;
   while (1) {
    $5 = HEAP32[$4 + 8 >> 2];
    $8 = HEAP32[$5 >> 2];
    $9 = HEAP32[$4 >> 2];
    HEAP32[$9 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $9;
    HEAP32[$3 + 128 >> 2] = $2 + -1;
    dlfree($4);
    $9 = $5 + 8 | 0;
    $8 = HEAP32[$0 + 28 >> 2] + Math_imul($8, 188) | 0;
    $2 = HEAP32[$8 + 60 >> 2];
    label$7 : {
     if (($2 | 0) == -1) {
      break label$7;
     }
     $4 = HEAP32[$3 + 136 >> 2] + ($2 << 2) | 0;
     $6 = HEAP32[$4 >> 2];
     if (($6 | 0) > 0) {
      break label$7;
     }
     HEAP32[$4 >> 2] = $6 + 1;
     HEAP32[$3 + 112 >> 2] = 0;
     HEAP32[$3 + 108 >> 2] = $7;
     HEAP32[$3 + 104 >> 2] = $7;
     HEAP32[$3 + 100 >> 2] = 0;
     HEAP32[$3 + 96 >> 2] = $2;
     $2 = operator_20new_28unsigned_20long_29(28);
     HEAP32[$2 >> 2] = 0;
     $4 = HEAP32[$3 + 100 >> 2];
     $6 = HEAP32[$3 + 96 >> 2];
     HEAP32[$2 + 24 >> 2] = 0;
     $10 = $2 + 16 | 0;
     HEAP32[$2 + 20 >> 2] = $10;
     HEAP32[$2 + 16 >> 2] = $10;
     HEAP32[$2 + 8 >> 2] = $6;
     HEAP32[$2 + 12 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $9;
     $4 = HEAP32[$5 + 8 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$5 + 8 >> 2] = $2;
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     label$8 : {
      if (!HEAP32[$3 + 112 >> 2]) {
       break label$8;
      }
      $4 = HEAP32[$3 + 108 >> 2];
      $2 = HEAP32[$4 >> 2];
      $6 = HEAP32[$3 + 104 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[HEAP32[$6 + 4 >> 2] >> 2] = $2;
      HEAP32[$3 + 112 >> 2] = 0;
      if (($4 | 0) == ($7 | 0)) {
       break label$8;
      }
      while (1) {
       $2 = HEAP32[$4 + 4 >> 2];
       void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($4 + 8 | 0);
       dlfree($4);
       $4 = $2;
       if (($2 | 0) != ($7 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = HEAP32[$5 + 8 >> 2];
     $2 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$2 + 8 >> 2] = $4 + 8;
     HEAP32[$2 + 4 >> 2] = $3 + 120;
     $4 = HEAP32[$3 + 120 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$3 + 120 >> 2] = $2;
     HEAP32[$3 + 128 >> 2] = HEAP32[$3 + 128 >> 2] + 1;
    }
    $2 = HEAP32[$8 - -64 >> 2];
    label$10 : {
     if (($2 | 0) == -1) {
      break label$10;
     }
     $4 = HEAP32[$3 + 136 >> 2] + ($2 << 2) | 0;
     $6 = HEAP32[$4 >> 2];
     if (($6 | 0) > 0) {
      break label$10;
     }
     HEAP32[$4 >> 2] = $6 + 1;
     HEAP32[$3 + 112 >> 2] = 0;
     HEAP32[$3 + 108 >> 2] = $7;
     HEAP32[$3 + 104 >> 2] = $7;
     HEAP32[$3 + 100 >> 2] = 1;
     HEAP32[$3 + 96 >> 2] = $2;
     $2 = operator_20new_28unsigned_20long_29(28);
     HEAP32[$2 >> 2] = 0;
     $4 = HEAP32[$3 + 100 >> 2];
     $6 = HEAP32[$3 + 96 >> 2];
     HEAP32[$2 + 24 >> 2] = 0;
     $10 = $2 + 16 | 0;
     HEAP32[$2 + 20 >> 2] = $10;
     HEAP32[$2 + 16 >> 2] = $10;
     HEAP32[$2 + 8 >> 2] = $6;
     HEAP32[$2 + 12 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $9;
     $4 = HEAP32[$5 + 8 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$5 + 8 >> 2] = $2;
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     label$11 : {
      if (!HEAP32[$3 + 112 >> 2]) {
       break label$11;
      }
      $4 = HEAP32[$3 + 108 >> 2];
      $2 = HEAP32[$4 >> 2];
      $6 = HEAP32[$3 + 104 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[HEAP32[$6 + 4 >> 2] >> 2] = $2;
      HEAP32[$3 + 112 >> 2] = 0;
      if (($4 | 0) == ($7 | 0)) {
       break label$11;
      }
      while (1) {
       $2 = HEAP32[$4 + 4 >> 2];
       void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($4 + 8 | 0);
       dlfree($4);
       $4 = $2;
       if (($2 | 0) != ($7 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = HEAP32[$5 + 8 >> 2];
     $2 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$2 + 8 >> 2] = $4 + 8;
     HEAP32[$2 + 4 >> 2] = $3 + 120;
     $4 = HEAP32[$3 + 120 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$3 + 120 >> 2] = $2;
     HEAP32[$3 + 128 >> 2] = HEAP32[$3 + 128 >> 2] + 1;
    }
    $2 = HEAP32[$8 + 68 >> 2];
    label$13 : {
     if (($2 | 0) == -1) {
      break label$13;
     }
     $4 = HEAP32[$3 + 136 >> 2] + ($2 << 2) | 0;
     $6 = HEAP32[$4 >> 2];
     if (($6 | 0) > 0) {
      break label$13;
     }
     HEAP32[$4 >> 2] = $6 + 1;
     HEAP32[$3 + 112 >> 2] = 0;
     HEAP32[$3 + 108 >> 2] = $7;
     HEAP32[$3 + 104 >> 2] = $7;
     HEAP32[$3 + 100 >> 2] = 2;
     HEAP32[$3 + 96 >> 2] = $2;
     $2 = operator_20new_28unsigned_20long_29(28);
     HEAP32[$2 >> 2] = 0;
     $4 = HEAP32[$3 + 100 >> 2];
     $6 = HEAP32[$3 + 96 >> 2];
     HEAP32[$2 + 24 >> 2] = 0;
     $10 = $2 + 16 | 0;
     HEAP32[$2 + 20 >> 2] = $10;
     HEAP32[$2 + 16 >> 2] = $10;
     HEAP32[$2 + 8 >> 2] = $6;
     HEAP32[$2 + 12 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $9;
     $4 = HEAP32[$5 + 8 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$5 + 8 >> 2] = $2;
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     label$14 : {
      if (!HEAP32[$3 + 112 >> 2]) {
       break label$14;
      }
      $4 = HEAP32[$3 + 108 >> 2];
      $2 = HEAP32[$4 >> 2];
      $6 = HEAP32[$3 + 104 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[HEAP32[$6 + 4 >> 2] >> 2] = $2;
      HEAP32[$3 + 112 >> 2] = 0;
      if (($4 | 0) == ($7 | 0)) {
       break label$14;
      }
      while (1) {
       $2 = HEAP32[$4 + 4 >> 2];
       void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($4 + 8 | 0);
       dlfree($4);
       $4 = $2;
       if (($2 | 0) != ($7 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = HEAP32[$5 + 8 >> 2];
     $2 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$2 + 8 >> 2] = $4 + 8;
     HEAP32[$2 + 4 >> 2] = $3 + 120;
     $4 = HEAP32[$3 + 120 >> 2];
     HEAP32[$2 >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$3 + 120 >> 2] = $2;
     HEAP32[$3 + 128 >> 2] = HEAP32[$3 + 128 >> 2] + 1;
    }
    label$16 : {
     label$17 : {
      $2 = HEAP32[$8 + 72 >> 2];
      if (($2 | 0) == -1) {
       break label$17;
      }
      $4 = HEAP32[$3 + 136 >> 2] + ($2 << 2) | 0;
      $8 = HEAP32[$4 >> 2];
      if (($8 | 0) > 0) {
       break label$17;
      }
      HEAP32[$4 >> 2] = $8 + 1;
      HEAP32[$3 + 112 >> 2] = 0;
      HEAP32[$3 + 108 >> 2] = $7;
      HEAP32[$3 + 104 >> 2] = $7;
      HEAP32[$3 + 100 >> 2] = 3;
      HEAP32[$3 + 96 >> 2] = $2;
      $2 = operator_20new_28unsigned_20long_29(28);
      HEAP32[$2 >> 2] = 0;
      $4 = HEAP32[$3 + 100 >> 2];
      $8 = HEAP32[$3 + 96 >> 2];
      HEAP32[$2 + 24 >> 2] = 0;
      $6 = $2 + 16 | 0;
      HEAP32[$2 + 20 >> 2] = $6;
      HEAP32[$2 + 16 >> 2] = $6;
      HEAP32[$2 + 8 >> 2] = $8;
      HEAP32[$2 + 12 >> 2] = $4;
      HEAP32[$2 + 4 >> 2] = $9;
      $4 = HEAP32[$5 + 8 >> 2];
      HEAP32[$2 >> 2] = $4;
      HEAP32[$4 + 4 >> 2] = $2;
      HEAP32[$5 + 8 >> 2] = $2;
      HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
      label$18 : {
       if (!HEAP32[$3 + 112 >> 2]) {
        break label$18;
       }
       $4 = HEAP32[$3 + 108 >> 2];
       $2 = HEAP32[$4 >> 2];
       $9 = HEAP32[$3 + 104 >> 2];
       HEAP32[$2 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
       HEAP32[HEAP32[$9 + 4 >> 2] >> 2] = $2;
       HEAP32[$3 + 112 >> 2] = 0;
       if (($4 | 0) == ($7 | 0)) {
        break label$18;
       }
       while (1) {
        $2 = HEAP32[$4 + 4 >> 2];
        void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($4 + 8 | 0);
        dlfree($4);
        $4 = $2;
        if (($2 | 0) != ($7 | 0)) {
         continue;
        }
        break;
       }
      }
      $4 = HEAP32[$5 + 8 >> 2];
      $2 = operator_20new_28unsigned_20long_29(12);
      HEAP32[$2 + 8 >> 2] = $4 + 8;
      HEAP32[$2 + 4 >> 2] = $3 + 120;
      $4 = HEAP32[$3 + 120 >> 2];
      HEAP32[$2 >> 2] = $4;
      HEAP32[$4 + 4 >> 2] = $2;
      HEAP32[$3 + 120 >> 2] = $2;
      $2 = HEAP32[$3 + 128 >> 2] + 1 | 0;
      HEAP32[$3 + 128 >> 2] = $2;
      break label$16;
     }
     $2 = HEAP32[$3 + 128 >> 2];
    }
    if (!$2) {
     break label$3;
    }
    $4 = HEAP32[$3 + 124 >> 2];
    continue;
   }
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 void_20Shape__runBFSTree_Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__28MatStack__2c_20BNode_20const__2c_20float_2c_20Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__29_20const($0, $3 + 16 | 0, $3 + 152 | 0, $1, $3 + 8 | 0);
 label$20 : {
  if (!HEAP32[$3 + 128 >> 2]) {
   break label$20;
  }
  $2 = HEAP32[$3 + 124 >> 2];
  $0 = HEAP32[$2 >> 2];
  $4 = HEAP32[$3 + 120 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $0;
  HEAP32[$3 + 128 >> 2] = 0;
  if (($3 + 120 | 0) == ($2 | 0)) {
   break label$20;
  }
  while (1) {
   $0 = HEAP32[$2 + 4 >> 2];
   dlfree($2);
   $2 = $0;
   if (($2 | 0) != ($3 + 120 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = HEAP32[$3 + 136 >> 2];
 if ($0) {
  HEAP32[$3 + 140 >> 2] = $0;
  dlfree($0);
 }
 label$23 : {
  if (!HEAP32[$3 + 168 >> 2]) {
   break label$23;
  }
  $2 = HEAP32[$3 + 164 >> 2];
  $0 = HEAP32[$2 >> 2];
  $4 = HEAP32[$3 + 160 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $0;
  HEAP32[$3 + 168 >> 2] = 0;
  $4 = $3 + 160 | 0;
  if (($4 | 0) == ($2 | 0)) {
   break label$23;
  }
  while (1) {
   $0 = HEAP32[$2 + 4 >> 2];
   void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($2 + 8 | 0);
   dlfree($2);
   $2 = $0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = HEAP32[$3 + 84 >> 2];
 if ($0) {
  HEAP32[$3 + 88 >> 2] = $0;
  dlfree($0);
 }
 global$0 = $3 + 176 | 0;
}
function PicBucket__distinctMeshes_28ProgressCallback__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $2 = global$0 - 400 | 0;
 global$0 = $2;
 HEAP32[$2 + 352 >> 2] = 0;
 HEAP32[$2 + 356 >> 2] = 0;
 HEAP32[$2 + 360 >> 2] = 0;
 HEAP32[$2 + 364 >> 2] = 0;
 HEAP32[$2 + 368 >> 2] = 0;
 HEAP32[$2 + 372 >> 2] = 0;
 HEAP32[$2 + 376 >> 2] = 0;
 HEAP32[$2 + 380 >> 2] = 0;
 HEAP8[$2 + 384 | 0] = 0;
 HEAP32[$2 + 344 >> 2] = 0;
 HEAP32[$2 + 348 >> 2] = 0;
 HEAP32[$2 + 388 >> 2] = 0;
 label$1 : {
  if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 16 >> 2]) {
   while (1) {
    PicsSet__add_28int_2c_20bool_29($2 + 344 | 0, $1, 0);
    $1 = $1 + 1 | 0;
    if ($1 >>> 0 < (HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 16 >> 2] | 0) / 652 >>> 0) {
     continue;
    }
    break;
   }
   $3 = HEAP32[$2 + 348 >> 2];
   $1 = HEAP32[$2 + 344 >> 2];
   break label$1;
  }
  $1 = 0;
 }
 $10 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(50352, ($3 - $1 | 0) / 324 | 0), 7084, 24), (HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 16 >> 2] | 0) / 652 | 0), 7109, 15), HEAP32[$0 + 72 >> 2]);
 $1 = HEAP32[(HEAP32[HEAP32[$10 >> 2] + -12 >> 2] + $10 | 0) + 28 >> 2];
 HEAP32[$2 + 16 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 16 | 0, 51440);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $3 = HEAP32[$2 + 16 >> 2];
 $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $4;
 if (($4 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($10, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($10);
 $1 = HEAP32[$2 + 344 >> 2];
 if (($1 | 0) != HEAP32[$2 + 348 >> 2]) {
  $10 = $0 + 68 | 0;
  while (1) {
   $3 = Math_imul($16, 324) + $1 | 0;
   memcpy($2 + 16 | 0, $3, 309);
   $15 = 0;
   HEAP32[$2 + 336 >> 2] = 0;
   HEAP32[$2 + 328 >> 2] = 0;
   HEAP32[$2 + 332 >> 2] = 0;
   label$8 : {
    label$9 : {
     label$10 : {
      $4 = HEAP32[$3 + 316 >> 2] - HEAP32[$3 + 312 >> 2] | 0;
      label$11 : {
       if (!$4) {
        $7 = 0;
        $9 = 0;
        break label$11;
       }
       $1 = $4 >> 3;
       if ($1 >>> 0 >= 536870912) {
        break label$10;
       }
       $7 = operator_20new_28unsigned_20long_29($4);
       HEAP32[$2 + 328 >> 2] = $7;
       HEAP32[$2 + 332 >> 2] = $7;
       HEAP32[$2 + 336 >> 2] = ($1 << 3) + $7;
       $1 = HEAP32[$3 + 312 >> 2];
       $4 = HEAP32[$3 + 316 >> 2] - $1 | 0;
       if (($4 | 0) < 1) {
        $9 = $7;
        break label$11;
       }
       $9 = memcpy($7, $1, $4) + $4 | 0;
       HEAP32[$2 + 332 >> 2] = $9;
      }
      $6 = HEAPU16[$2 + 276 >> 1];
      $12 = HEAP32[$2 + 16 >> 2];
      label$14 : {
       if (($12 | 0) < 1) {
        break label$14;
       }
       $4 = $6;
       $11 = 0;
       $8 = HEAP32[$10 >> 2];
       if (!$8) {
        break label$14;
       }
       while (1) {
        $3 = $10;
        $1 = $8;
        while (1) {
         $13 = $4 & 65535;
         $14 = HEAPU16[$1 + 16 >> 1] < $13 >>> 0;
         $3 = $14 ? $3 : $1;
         $1 = HEAP32[($14 << 2) + $1 >> 2];
         if ($1) {
          continue;
         }
         break;
        }
        if (!($13 >>> 0 >= HEAPU16[$3 + 16 >> 1] ? ($3 | 0) != ($10 | 0) : 0)) {
         $11 = $11 + 1 | 0;
         if (($11 | 0) >= ($12 | 0)) {
          break label$14;
         }
         $4 = HEAPU16[(($11 << 1) + $2 | 0) + 276 >> 1];
         continue;
        }
        break;
       }
       $15 = HEAP32[(($11 << 2) + $2 | 0) + 292 >> 2];
       $11 = HEAP32[$3 + 20 >> 2];
       if ($11) {
        break label$8;
       }
      }
      $1 = 0;
      HEAP8[$2 + 14 | 0] = 0;
      HEAP8[$2 + 10 | 0] = 0;
      HEAP16[$2 + 12 >> 1] = 0;
      HEAP16[$2 + 8 >> 1] = 0;
      HEAP16[$2 + 4 >> 1] = 0;
      HEAP8[$2 + 6 | 0] = 0;
      $4 = 0;
      $3 = 0;
      $7 = 0;
      $17 = 0;
      $18 = 0;
      $9 = 0;
      $19 = 0;
      $20 = 0;
      $21 = 0;
      $22 = 0;
      $23 = 0;
      $12 = 0;
      $13 = 0;
      $14 = 0;
      $8 = 0;
      if ($6) {
       $8 = $6 & 1;
       $7 = $6 >>> 15;
       $18 = $6 >>> 14 & 1;
       $19 = $6 >>> 13 & 1;
       $21 = $6 >>> 12 & 1;
       $22 = $6 >>> 11 & 1;
       $23 = $6 >>> 10 & 1;
       $12 = $6 >>> 9 & 1;
       $13 = $6 >>> 8 & 1;
       $20 = $6 >>> 7 & 1;
       $9 = $6 >>> 6 & 1;
       $17 = $6 >>> 5 & 1;
       $3 = $6 >>> 4 & 1;
       $4 = $6 >>> 3 & 1;
       $14 = $6 >>> 1 & 1;
       $1 = $6 >>> 2 & 1;
      }
      $11 = operator_20new_28unsigned_20long_29(236);
      $5 = memset($11, 0, 115);
      HEAP32[$5 + 124 >> 2] = 0;
      HEAP32[$5 + 128 >> 2] = 0;
      HEAP32[$5 + 116 >> 2] = 0;
      HEAP32[$5 + 120 >> 2] = 0;
      HEAP8[$5 + 209 | 0] = $7;
      HEAP8[$5 + 208 | 0] = $3;
      HEAP8[$5 + 207 | 0] = $4;
      HEAP8[$5 + 206 | 0] = $1;
      HEAP8[$5 + 205 | 0] = $14;
      HEAP8[$5 + 204 | 0] = $8;
      HEAP32[$5 + 196 >> 2] = 34963;
      HEAP32[$5 + 200 >> 2] = 0;
      HEAP32[$5 + 188 >> 2] = 0;
      HEAP32[$5 + 192 >> 2] = 0;
      HEAP32[$5 + 180 >> 2] = 0;
      HEAP32[$5 + 184 >> 2] = 34962;
      HEAP32[$5 + 172 >> 2] = 34962;
      HEAP32[$5 + 176 >> 2] = 0;
      HEAP32[$5 + 164 >> 2] = 0;
      HEAP32[$5 + 168 >> 2] = 0;
      HEAP32[$5 + 156 >> 2] = 0;
      HEAP32[$5 + 160 >> 2] = 34962;
      HEAP32[$5 + 148 >> 2] = 34962;
      HEAP32[$5 + 152 >> 2] = 0;
      HEAP32[$5 + 140 >> 2] = 0;
      HEAP32[$5 + 144 >> 2] = 0;
      HEAP32[$5 + 132 >> 2] = 0;
      HEAP32[$5 + 136 >> 2] = 34962;
      HEAP8[$5 + 212 | 0] = HEAPU8[$2 + 14 | 0];
      HEAP16[$5 + 210 >> 1] = HEAPU16[$2 + 12 >> 1];
      HEAP8[$5 + 214 | 0] = $18;
      HEAP8[$5 + 213 | 0] = $17;
      $1 = HEAPU16[$2 + 8 >> 1];
      HEAP8[$5 + 215 | 0] = $1;
      HEAP8[$5 + 216 | 0] = $1 >>> 8;
      HEAP8[$5 + 217 | 0] = HEAPU8[$2 + 10 | 0];
      HEAP8[$5 + 219 | 0] = $19;
      HEAP8[$5 + 218 | 0] = $9;
      HEAP16[$5 + 220 >> 1] = HEAPU16[$2 + 4 >> 1];
      HEAP8[$5 + 222 | 0] = HEAPU8[$2 + 6 | 0];
      HEAP32[$5 + 232 >> 2] = -1;
      HEAP8[$5 + 229 | 0] = 0;
      HEAP8[$5 + 228 | 0] = $13;
      HEAP8[$5 + 227 | 0] = $12;
      HEAP8[$5 + 226 | 0] = $23;
      HEAP8[$5 + 225 | 0] = $22;
      HEAP8[$5 + 224 | 0] = $21;
      HEAP8[$5 + 223 | 0] = $20;
      $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 7125, 20);
      $1 = HEAP32[HEAP32[$4 >> 2] + -12 >> 2] + $4 | 0;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -75 | 8;
      $8 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29($4, $6);
      $4 = HEAP32[$8 >> 2] + -12 | 0;
      $1 = HEAP32[$4 >> 2] + $8 | 0;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -75 | 2;
      $1 = HEAP32[($8 + HEAP32[$4 >> 2] | 0) + 28 >> 2];
      HEAP32[$2 + 392 >> 2] = $1;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
      $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 392 | 0, 51440);
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
      $3 = HEAP32[$2 + 392 >> 2];
      $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
      HEAP32[$3 + 4 >> 2] = $4;
      if (($4 | 0) == -1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($8, $1);
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($8);
      HEAP32[$2 + 396 >> 2] = $5 + 204;
      HEAP32[$2 + 392 >> 2] = $5;
      CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29($2 + 392 | 0);
      HEAP32[11874] = 0;
      $1 = HEAP32[11875];
      if (($1 | 0) > HEAP32[11876]) {
       HEAP32[11876] = $1;
      }
      HEAP32[11879] = 0;
      HEAP32[11875] = 0;
      $1 = HEAP32[11880];
      if (($1 | 0) > HEAP32[11881]) {
       HEAP32[11881] = $1;
      }
      HEAP32[11884] = 0;
      HEAP32[11880] = 0;
      $1 = HEAP32[11885];
      if (($1 | 0) > HEAP32[11886]) {
       HEAP32[11886] = $1;
      }
      HEAP32[11885] = 0;
      Mesh__makeSelfBos_28bool_29($5, 1);
      $4 = $10;
      $1 = HEAP32[$4 >> 2];
      if (!$1) {
       $1 = $10;
       $4 = $1;
       break label$9;
      }
      while (1) {
       $3 = HEAPU16[$1 + 16 >> 1];
       label$27 : {
        if ($6 >>> 0 < $3 >>> 0) {
         $3 = HEAP32[$1 >> 2];
         if ($3) {
          break label$27;
         }
         $4 = $1;
         break label$9;
        }
        if ($3 >>> 0 >= $6 >>> 0) {
         break label$9;
        }
        $4 = $1 + 4 | 0;
        $3 = HEAP32[$1 + 4 >> 2];
        if (!$3) {
         break label$9;
        }
        $1 = $4;
       }
       $4 = $1;
       $1 = $3;
       continue;
      }
     }
     std____2____vector_base_common_true_____throw_length_error_28_29_20const();
     abort();
    }
    $3 = HEAP32[$4 >> 2];
    if (!$3) {
     $3 = operator_20new_28unsigned_20long_29(24);
     HEAP32[$3 + 20 >> 2] = 0;
     HEAP16[$3 + 16 >> 1] = $6;
     HEAP32[$3 + 8 >> 2] = $1;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$4 >> 2] = $3;
     $1 = $3;
     $8 = HEAP32[HEAP32[$0 + 64 >> 2] >> 2];
     if ($8) {
      HEAP32[$0 + 64 >> 2] = $8;
      $1 = HEAP32[$4 >> 2];
     }
     void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$0 + 68 >> 2], $1);
     HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
    }
    $1 = HEAP32[$3 + 20 >> 2];
    HEAP32[$3 + 20 >> 2] = $5;
    if ($1) {
     Mesh___Mesh_28_29($1);
     dlfree($1);
    }
    $7 = HEAP32[$2 + 328 >> 2];
    $9 = HEAP32[$2 + 332 >> 2];
   }
   if (($7 | 0) != ($9 | 0)) {
    $6 = 4 - $15 | 0;
    $9 = $9 - $7 >> 3;
    $8 = HEAP32[$0 + 16 >> 2];
    $1 = 0;
    while (1) {
     $3 = ($1 << 3) + $7 | 0;
     $4 = HEAP32[$3 >> 2];
     $3 = HEAP32[$3 + 4 >> 2];
     label$34 : {
      if ((($3 | 0) < 4 | 0) != (($15 | 0) > 3 | 0)) {
       $3 = ($3 + $6 | 0) % 4 | 0;
       break label$34;
      }
      $3 = (($3 + $15 | 0) % 4 | 0) + 4 | 0;
     }
     $4 = $8 + Math_imul($4, 652) | 0;
     HEAP32[$4 + 332 >> 2] = $11;
     HEAP32[$4 + 336 >> 2] = $3;
     $1 = $1 + 1 | 0;
     if ($1 >>> 0 < $9 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($7) {
    HEAP32[$2 + 332 >> 2] = $7;
    dlfree($7);
   }
   $16 = $16 + 1 | 0;
   $1 = HEAP32[$2 + 344 >> 2];
   if ($16 >>> 0 < (HEAP32[$2 + 348 >> 2] - $1 | 0) / 324 >>> 0) {
    continue;
   }
   break;
  }
 }
 $4 = HEAP32[$2 + 368 >> 2];
 if ($4) {
  $1 = HEAP32[$2 + 372 >> 2];
  $0 = $4;
  label$38 : {
   if (($4 | 0) == ($1 | 0)) {
    break label$38;
   }
   while (1) {
    $0 = HEAP32[$1 + -12 >> 2];
    if ($0) {
     HEAP32[$1 + -8 >> 2] = $0;
     dlfree($0);
    }
    $1 = $1 + -16 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 368 >> 2];
  }
  HEAP32[$2 + 372 >> 2] = $4;
  dlfree($0);
 }
 $0 = HEAP32[$2 + 356 >> 2];
 if ($0) {
  HEAP32[$2 + 360 >> 2] = $0;
  dlfree($0);
 }
 $4 = HEAP32[$2 + 344 >> 2];
 if ($4) {
  $1 = HEAP32[$2 + 348 >> 2];
  $0 = $4;
  label$43 : {
   if (($4 | 0) == ($1 | 0)) {
    break label$43;
   }
   while (1) {
    $0 = HEAP32[$1 + -12 >> 2];
    if ($0) {
     HEAP32[$1 + -8 >> 2] = $0;
     dlfree($0);
    }
    $1 = $1 + -324 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 344 >> 2];
  }
  HEAP32[$2 + 348 >> 2] = $4;
  dlfree($0);
 }
 global$0 = $2 + 400 | 0;
}
function Shape__makeNeiTransforms_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $12 = global$0 - 80 | 0;
 global$0 = $12;
 if (HEAP32[$0 + 12 >> 2] >= 1) {
  while (1) {
   $1 = HEAP32[$0 + 28 >> 2];
   $5 = $1 + Math_imul($11, 188) | 0;
   $10 = $5;
   $2 = HEAP32[$5 + 60 >> 2];
   if (($2 | 0) != -1) {
    label$4 : {
     label$5 : {
      $3 = HEAP32[$5 >> 2];
      if ($3 >>> 0 > 2) {
       break label$5;
      }
      $1 = $1 + Math_imul($2, 188) | 0;
      $7 = HEAP32[$1 + 4 >> 2] - HEAP32[$5 + 4 >> 2] | 0;
      $6 = HEAP32[$1 + 12 >> 2] - HEAP32[$10 + 12 >> 2] | 0;
      $2 = HEAP32[$1 + 8 >> 2] - HEAP32[$5 + 8 >> 2] | 0;
      label$6 : {
       switch ($3 - 1 | 0) {
       case 1:
        $3 = HEAP32[$1 >> 2];
        if ($3 >>> 0 > 2) {
         break label$5;
        }
        label$9 : {
         switch ($3 - 1 | 0) {
         case 1:
          $3 = 0;
          $8 = 0;
          $1 = 0;
          $4 = 0;
          $9 = 0;
          break label$4;
         case 0:
          $4 = 1;
          $9 = $2 ? $6 ? 1 : 2 : $6 ? 3 : 4;
          $3 = 0;
          $8 = ($6 | 0) != 0;
          $1 = 0;
          break label$4;
         default:
          break label$9;
         }
        }
        $1 = 1;
        $9 = $7 ? $6 ? 2 : 1 : $6 ? 4 : 3;
        $3 = 0;
        $8 = ($6 | 0) != 0;
        $4 = 0;
        break label$4;
       case 0:
        $3 = HEAP32[$1 >> 2];
        if ($3 >>> 0 > 2) {
         break label$5;
        }
        label$12 : {
         switch ($3 - 1 | 0) {
         case 0:
          $3 = 0;
          $8 = 0;
          $1 = 0;
          $4 = 0;
          $9 = 0;
          $2 = $6;
          break label$4;
         case 1:
          $4 = 1;
          $9 = $6 ? $2 ? 2 : 1 : $2 ? 4 : 3;
          $3 = 0;
          $8 = ($2 | 0) != 0;
          $1 = 0;
          $2 = $6;
          $7 = 0;
          break label$4;
         default:
          break label$12;
         }
        }
        $3 = 1;
        $9 = $7 ? $2 ? 1 : 2 : $2 ? 3 : 4;
        $4 = 0;
        $8 = ($2 | 0) != 0;
        $1 = 1;
        $2 = $6;
        break label$4;
       default:
        break label$6;
       }
      }
      $3 = HEAP32[$1 >> 2];
      if ($3 >>> 0 > 2) {
       break label$5;
      }
      label$15 : {
       label$16 : {
        switch ($3 - 1 | 0) {
        default:
         $8 = 0;
         $1 = 0;
         $4 = 0;
         $9 = 0;
         $3 = 0;
         break label$15;
        case 1:
         $1 = 1;
         $9 = $7 ? $6 ? 1 : 3 : $6 ? 2 : 4;
         $8 = ($7 | 0) != 0;
         $4 = 0;
         $3 = 0;
         break label$15;
        case 0:
         break label$16;
        }
       }
       $9 = $2 ? $7 ? 2 : 1 : $7 ? 4 : 3;
       $1 = 0;
       $8 = ($7 | 0) != 0;
       $4 = 1;
       $3 = 1;
      }
      $7 = $6;
      break label$4;
     }
     $3 = 0;
     $8 = 0;
     $1 = 0;
     $4 = 0;
     $9 = 0;
     $2 = 0;
     $7 = 0;
    }
    HEAP32[$5 + 76 >> 2] = $7;
    HEAP8[$5 + 101 | 0] = $3;
    HEAP8[$5 + 100 | 0] = $8;
    HEAP32[$5 + 96 >> 2] = 0;
    HEAP32[$5 + 92 >> 2] = $1;
    HEAP32[$5 + 88 >> 2] = $4;
    HEAP32[$5 + 84 >> 2] = $9;
    HEAP32[$5 + 80 >> 2] = $2;
   }
   $2 = HEAP32[$5 - -64 >> 2];
   if (($2 | 0) != -1) {
    label$20 : {
     label$21 : {
      $1 = HEAP32[$5 >> 2];
      if ($1 >>> 0 > 2) {
       break label$21;
      }
      $4 = HEAP32[$0 + 28 >> 2] + Math_imul($2, 188) | 0;
      $6 = HEAP32[$4 + 4 >> 2] - HEAP32[$5 + 4 >> 2] | 0;
      $3 = HEAP32[$4 + 12 >> 2] - HEAP32[$10 + 12 >> 2] | 0;
      $2 = HEAP32[$4 + 8 >> 2] - HEAP32[$5 + 8 >> 2] | 0;
      label$22 : {
       label$23 : {
        switch ($1 - 1 | 0) {
        default:
         $1 = HEAP32[$4 >> 2];
         if ($1 >>> 0 > 2) {
          break label$21;
         }
         label$26 : {
          switch ($1 - 1 | 0) {
          case 0:
           $7 = 1;
           $9 = $2 ? $6 ? 2 : 1 : $6 ? 4 : 3;
           $1 = 0;
           $8 = ($6 | 0) != 0;
           $4 = 1;
           break label$20;
          case 1:
           $1 = 1;
           $9 = $6 ? $3 ? 1 : 3 : $3 ? 2 : 4;
           $7 = 0;
           $8 = ($6 | 0) != 0;
           $4 = 0;
           break label$20;
          default:
           break label$26;
          }
         }
         $7 = 0;
         $8 = 0;
         $1 = 0;
         $4 = 0;
         $9 = 0;
         break label$20;
        case 0:
         $1 = HEAP32[$4 >> 2];
         if ($1 >>> 0 > 2) {
          break label$21;
         }
         label$29 : {
          switch ($1 - 1 | 0) {
          default:
           $7 = 1;
           $9 = $6 ? $2 ? 1 : 2 : $2 ? 3 : 4;
           $4 = 0;
           $8 = ($2 | 0) != 0;
           $2 = $3;
           $1 = 1;
           break label$22;
          case 1:
           $4 = 1;
           $9 = $3 ? $2 ? 2 : 1 : $2 ? 4 : 3;
           $7 = 0;
           $8 = ($2 | 0) != 0;
           $1 = 0;
           $2 = $3;
           $3 = 0;
           break label$20;
          case 0:
           break label$29;
          }
         }
         $7 = 0;
         $8 = 0;
         $4 = 0;
         $9 = 0;
         $2 = $3;
         $1 = 0;
         break label$22;
        case 1:
         break label$23;
        }
       }
       $1 = HEAP32[$4 >> 2];
       if ($1 >>> 0 > 2) {
        break label$21;
       }
       label$32 : {
        switch ($1 - 1 | 0) {
        default:
         $9 = $6 ? $3 ? 2 : 1 : $3 ? 4 : 3;
         $7 = 0;
         $8 = ($3 | 0) != 0;
         $4 = 0;
         $1 = 1;
         break label$22;
        case 0:
         $4 = 1;
         $9 = $2 ? $3 ? 1 : 2 : $3 ? 3 : 4;
         $7 = 0;
         $8 = ($3 | 0) != 0;
         $1 = 0;
         break label$22;
        case 1:
         break label$32;
        }
       }
       $7 = 0;
       $8 = 0;
       $4 = 0;
       $9 = 0;
       $1 = 0;
      }
      $3 = $6;
      break label$20;
     }
     $7 = 0;
     $8 = 0;
     $1 = 0;
     $4 = 0;
     $9 = 0;
     $2 = 0;
     $3 = 0;
    }
    HEAP8[$5 + 129 | 0] = $7;
    HEAP8[$5 + 128 | 0] = $8;
    HEAP32[$5 + 124 >> 2] = 0;
    HEAP32[$5 + 120 >> 2] = $1;
    HEAP32[$5 + 116 >> 2] = $4;
    HEAP32[$5 + 112 >> 2] = $9;
    HEAP32[$5 + 108 >> 2] = $2;
    HEAP32[$5 + 104 >> 2] = $3;
   }
   $2 = HEAP32[$5 + 68 >> 2];
   if (($2 | 0) != -1) {
    label$36 : {
     label$37 : {
      $1 = HEAP32[$5 >> 2];
      if ($1 >>> 0 > 2) {
       break label$37;
      }
      $4 = HEAP32[$0 + 28 >> 2] + Math_imul($2, 188) | 0;
      $6 = HEAP32[$4 + 4 >> 2] - HEAP32[$5 + 4 >> 2] | 0;
      $3 = HEAP32[$4 + 12 >> 2] - HEAP32[$10 + 12 >> 2] | 0;
      $2 = HEAP32[$4 + 8 >> 2] - HEAP32[$5 + 8 >> 2] | 0;
      label$38 : {
       label$39 : {
        switch ($1 - 1 | 0) {
        default:
         $1 = HEAP32[$4 >> 2];
         if ($1 >>> 0 > 2) {
          break label$37;
         }
         label$42 : {
          switch ($1 - 1 | 0) {
          case 0:
           $7 = 1;
           $9 = $2 ? $6 ? 2 : 1 : $6 ? 4 : 3;
           $1 = 0;
           $8 = ($6 | 0) != 0;
           $4 = 1;
           break label$36;
          case 1:
           $1 = 1;
           $9 = $6 ? $3 ? 1 : 3 : $3 ? 2 : 4;
           $7 = 0;
           $8 = ($6 | 0) != 0;
           $4 = 0;
           break label$36;
          default:
           break label$42;
          }
         }
         $7 = 0;
         $8 = 0;
         $1 = 0;
         $4 = 0;
         $9 = 0;
         break label$36;
        case 0:
         $1 = HEAP32[$4 >> 2];
         if ($1 >>> 0 > 2) {
          break label$37;
         }
         label$45 : {
          switch ($1 - 1 | 0) {
          default:
           $7 = 1;
           $9 = $6 ? $2 ? 1 : 2 : $2 ? 3 : 4;
           $4 = 0;
           $8 = ($2 | 0) != 0;
           $2 = $3;
           $1 = 1;
           break label$38;
          case 1:
           $4 = 1;
           $9 = $3 ? $2 ? 2 : 1 : $2 ? 4 : 3;
           $7 = 0;
           $8 = ($2 | 0) != 0;
           $1 = 0;
           $2 = $3;
           $3 = 0;
           break label$36;
          case 0:
           break label$45;
          }
         }
         $7 = 0;
         $8 = 0;
         $4 = 0;
         $9 = 0;
         $2 = $3;
         $1 = 0;
         break label$38;
        case 1:
         break label$39;
        }
       }
       $1 = HEAP32[$4 >> 2];
       if ($1 >>> 0 > 2) {
        break label$37;
       }
       label$48 : {
        switch ($1 - 1 | 0) {
        default:
         $9 = $6 ? $3 ? 2 : 1 : $3 ? 4 : 3;
         $7 = 0;
         $8 = ($3 | 0) != 0;
         $4 = 0;
         $1 = 1;
         break label$38;
        case 0:
         $4 = 1;
         $9 = $2 ? $3 ? 1 : 2 : $3 ? 3 : 4;
         $7 = 0;
         $8 = ($3 | 0) != 0;
         $1 = 0;
         break label$38;
        case 1:
         break label$48;
        }
       }
       $7 = 0;
       $8 = 0;
       $4 = 0;
       $9 = 0;
       $1 = 0;
      }
      $3 = $6;
      break label$36;
     }
     $7 = 0;
     $8 = 0;
     $1 = 0;
     $4 = 0;
     $9 = 0;
     $2 = 0;
     $3 = 0;
    }
    HEAP8[$5 + 157 | 0] = $7;
    HEAP8[$5 + 156 | 0] = $8;
    HEAP32[$5 + 152 >> 2] = 0;
    HEAP32[$5 + 148 >> 2] = $1;
    HEAP32[$5 + 144 >> 2] = $4;
    HEAP32[$5 + 140 >> 2] = $9;
    HEAP32[$5 + 136 >> 2] = $2;
    HEAP32[$5 + 132 >> 2] = $3;
   }
   $3 = HEAP32[$5 + 72 >> 2];
   if (($3 | 0) != -1) {
    label$52 : {
     label$53 : {
      $2 = HEAP32[$5 >> 2];
      if ($2 >>> 0 > 2) {
       break label$53;
      }
      $3 = HEAP32[$0 + 28 >> 2] + Math_imul($3, 188) | 0;
      $4 = HEAP32[$3 + 4 >> 2] - HEAP32[$5 + 4 >> 2] | 0;
      $6 = HEAP32[$3 + 12 >> 2] - HEAP32[$10 + 12 >> 2] | 0;
      $1 = HEAP32[$3 + 8 >> 2] - HEAP32[$5 + 8 >> 2] | 0;
      label$54 : {
       label$55 : {
        switch ($2 - 1 | 0) {
        default:
         $2 = HEAP32[$3 >> 2];
         if ($2 >>> 0 > 2) {
          break label$53;
         }
         label$58 : {
          switch ($2 - 1 | 0) {
          case 0:
           $9 = 1;
           $8 = $1 ? $4 ? 2 : 1 : $4 ? 4 : 3;
           $7 = 0;
           $3 = ($4 | 0) != 0;
           $2 = 1;
           break label$52;
          case 1:
           $7 = 1;
           $8 = $4 ? $6 ? 1 : 3 : $6 ? 2 : 4;
           $9 = 0;
           $3 = ($4 | 0) != 0;
           $2 = 0;
           break label$52;
          default:
           break label$58;
          }
         }
         $9 = 0;
         $3 = 0;
         $7 = 0;
         $2 = 0;
         $8 = 0;
         break label$52;
        case 0:
         $2 = HEAP32[$3 >> 2];
         if ($2 >>> 0 > 2) {
          break label$53;
         }
         label$61 : {
          switch ($2 - 1 | 0) {
          default:
           $9 = 1;
           $8 = $4 ? $1 ? 1 : 2 : $1 ? 3 : 4;
           $3 = ($1 | 0) != 0;
           $7 = 1;
           $1 = $6;
           $2 = 0;
           break label$54;
          case 1:
           $2 = 1;
           $8 = $6 ? $1 ? 2 : 1 : $1 ? 4 : 3;
           $9 = 0;
           $3 = ($1 | 0) != 0;
           $7 = 0;
           $1 = $6;
           $6 = 0;
           break label$52;
          case 0:
           break label$61;
          }
         }
         $9 = 0;
         $3 = 0;
         $7 = 0;
         $8 = 0;
         $1 = $6;
         $2 = 0;
         break label$54;
        case 1:
         break label$55;
        }
       }
       $2 = HEAP32[$3 >> 2];
       if ($2 >>> 0 > 2) {
        break label$53;
       }
       label$64 : {
        switch ($2 - 1 | 0) {
        default:
         $7 = 1;
         $8 = $4 ? $6 ? 2 : 1 : $6 ? 4 : 3;
         $9 = 0;
         $3 = ($6 | 0) != 0;
         $2 = 0;
         break label$54;
        case 0:
         $8 = $1 ? $6 ? 1 : 2 : $6 ? 3 : 4;
         $9 = 0;
         $3 = ($6 | 0) != 0;
         $7 = 0;
         $2 = 1;
         break label$54;
        case 1:
         break label$64;
        }
       }
       $9 = 0;
       $3 = 0;
       $7 = 0;
       $8 = 0;
       $2 = 0;
      }
      $6 = $4;
      break label$52;
     }
     $9 = 0;
     $3 = 0;
     $7 = 0;
     $2 = 0;
     $8 = 0;
     $1 = 0;
     $6 = 0;
    }
    HEAP8[$5 + 185 | 0] = $9;
    HEAP8[$5 + 184 | 0] = $3;
    HEAP32[$5 + 180 >> 2] = 0;
    HEAP32[$5 + 176 >> 2] = $7;
    HEAP32[$5 + 172 >> 2] = $2;
    HEAP32[$5 + 168 >> 2] = $8;
    HEAP32[$5 + 164 >> 2] = $1;
    HEAP32[$5 + 160 >> 2] = $6;
   }
   $11 = $11 + 1 | 0;
   if (($11 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 $2 = memset($12, 0, 80);
 Shape__startNeiTransform_28MatStack__29_20const($0, $2);
 $0 = HEAP32[$2 + 68 >> 2];
 if ($0) {
  HEAP32[$2 + 72 >> 2] = $0;
  dlfree($0);
 }
 global$0 = $2 + 80 | 0;
}
function std____2____next_prime_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 label$1 : {
  if ($0 >>> 0 <= 211) {
   $0 = HEAP32[unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(20944, 21136, $4 + 12 | 0) >> 2];
   break label$1;
  }
  $5 = ($0 >>> 0) / 210 | 0;
  $3 = Math_imul($5, 210);
  HEAP32[$4 + 8 >> 2] = $0 - $3;
  $6 = unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(21136, 21328, $4 + 8 | 0) - 21136 >> 2;
  label$3 : {
   while (1) {
    $0 = HEAP32[($6 << 2) + 21136 >> 2] + $3 | 0;
    $3 = 5;
    label$5 : {
     label$6 : {
      label$7 : {
       while (1) {
        if (($3 | 0) == 47) {
         break label$7;
        }
        $1 = HEAP32[($3 << 2) + 20944 >> 2];
        $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
        $7 = $2 >>> 0 < $1 >>> 0;
        $8 = $7 ? $0 : $8;
        $3 = $3 + 1 | 0;
        $1 = $7 ? 1 : (Math_imul($1, $2) | 0) == ($0 | 0) ? 7 : 0;
        if (!$1) {
         continue;
        }
        break;
       }
       $3 = $1 + -4 | 0;
       if ($3 >>> 0 > 3) {
        break label$3;
       }
       switch ($3 - 1 | 0) {
       case 0:
       case 1:
        break label$3;
       case 2:
        break label$6;
       default:
        break label$7;
       }
      }
      $3 = 211;
      while (1) {
       $1 = ($0 >>> 0) / ($3 >>> 0) | 0;
       if ($1 >>> 0 < $3 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $3) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 10 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 12 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 16 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 18 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 22 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 28 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 30 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 36 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 40 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 42 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 46 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 52 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 58 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 60 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 66 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 70 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 72 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 78 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 82 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 88 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 96 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 100 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 102 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 106 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 108 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 112 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 120 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 126 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 130 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 136 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 138 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 142 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 148 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 150 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 156 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 162 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 166 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 168 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 172 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 178 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 180 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 186 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 190 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 192 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 196 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 198 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 208 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       $3 = $3 + 210 | 0;
       if ((Math_imul($1, $2) | 0) != ($0 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = $6 + 1 | 0;
     $0 = ($3 | 0) == 48;
     $6 = $0 ? 0 : $3;
     $5 = $0 + $5 | 0;
     $3 = Math_imul($5, 210);
     continue;
    }
    break;
   }
   HEAP32[$4 + 12 >> 2] = $0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = $0;
  $0 = $8;
 }
 global$0 = $4 + 16 | 0;
 return $0;
}
function Shape__makeReverseNei_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $9 = global$0 - 32 | 0;
 global$0 = $9;
 Shape__make_sides_facenei_28_29($0);
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$9 + 24 >> 2] = 0;
 HEAP32[$9 + 16 >> 2] = 0;
 HEAP32[$9 + 20 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$4) {
     $4 = 0;
     break label$3;
    }
    if ($4 >>> 0 >= 1073741824) {
     break label$2;
    }
    $1 = $4 << 2;
    $12 = operator_20new_28unsigned_20long_29($1);
    HEAP32[$9 + 16 >> 2] = $12;
    HEAP32[$9 + 20 >> 2] = $12;
    HEAP32[$9 + 24 >> 2] = $1 + $12;
    $3 = memset($12, 0, $1);
    $1 = $4;
    while (1) {
     $3 = $3 + 4 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue;
     }
     break;
    }
    HEAP32[$9 + 20 >> 2] = $3;
    if (($4 | 0) < 1) {
     break label$3;
    }
    $1 = HEAP32[$0 + 28 >> 2];
    $3 = 0;
    while (1) {
     $4 = $1 + Math_imul($3, 188) | 0;
     HEAP32[$4 + 36 >> 2] = -1;
     HEAP32[$4 + 40 >> 2] = -1;
     HEAP32[$4 + 28 >> 2] = -1;
     HEAP32[$4 + 32 >> 2] = -1;
     $3 = $3 + 1 | 0;
     $4 = HEAP32[$0 + 12 >> 2];
     if (($3 | 0) < ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   if (HEAP32[$0 + 20 >> 2] < 1) {
    break label$1;
   }
   $6 = HEAP32[$0 + 44 >> 2];
   $3 = 0;
   while (1) {
    $4 = $6 + Math_imul($3, 40) | 0;
    $1 = HEAP32[$4 + 16 >> 2];
    if (($1 | 0) != -1) {
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($1 << 2) + $12 | 0;
     $8 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = $8 + 1;
     HEAP32[(($2 + Math_imul($1, 188) | 0) + ($8 << 2) | 0) + 28 >> 2] = $3;
    }
    $1 = HEAP32[$4 + 20 >> 2];
    if (($1 | 0) != -1) {
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($1 << 2) + $12 | 0;
     $8 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = $8 + 1;
     HEAP32[(($2 + Math_imul($1, 188) | 0) + ($8 << 2) | 0) + 28 >> 2] = $3;
    }
    $1 = HEAP32[$4 + 24 >> 2];
    if (($1 | 0) != -1) {
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($1 << 2) + $12 | 0;
     $8 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = $8 + 1;
     HEAP32[(($2 + Math_imul($1, 188) | 0) + ($8 << 2) | 0) + 28 >> 2] = $3;
    }
    $1 = HEAP32[$4 + 28 >> 2];
    if (($1 | 0) != -1) {
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($1 << 2) + $12 | 0;
     $8 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = $8 + 1;
     HEAP32[(($2 + Math_imul($1, 188) | 0) + ($8 << 2) | 0) + 28 >> 2] = $3;
    }
    $1 = HEAP32[$4 + 32 >> 2];
    if (($1 | 0) != -1) {
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($1 << 2) + $12 | 0;
     $8 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = $8 + 1;
     HEAP32[(($2 + Math_imul($1, 188) | 0) + ($8 << 2) | 0) + 28 >> 2] = $3;
    }
    $4 = HEAP32[$4 + 36 >> 2];
    if (($4 | 0) != -1) {
     $8 = HEAP32[$0 + 28 >> 2];
     $2 = ($4 << 2) + $12 | 0;
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 1;
     HEAP32[(($8 + Math_imul($4, 188) | 0) + ($1 << 2) | 0) + 28 >> 2] = $3;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) >= HEAP32[$0 + 20 >> 2]) {
     $4 = HEAP32[$0 + 12 >> 2];
     break label$1;
    } else {
     $12 = HEAP32[$9 + 16 >> 2];
     continue;
    }
   }
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 if (($4 | 0) >= 1) {
  while (1) {
   HEAP32[$9 + 8 >> 2] = -1;
   HEAP32[$9 + 12 >> 2] = -1;
   HEAP32[$9 >> 2] = -1;
   HEAP32[$9 + 4 >> 2] = -1;
   $2 = HEAP32[$0 + 28 >> 2] + Math_imul($14, 188) | 0;
   $10 = $2;
   $4 = -1;
   $1 = -1;
   $11 = -1;
   $3 = HEAP32[$2 + 44 >> 2];
   $6 = -1;
   label$18 : {
    if (($3 | 0) == -1) {
     break label$18;
    }
    $4 = 0;
    $6 = 1;
    label$21 : {
     $1 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
     if (!(HEAP32[$1 + 4 >> 2] != HEAP32[$2 + 4 >> 2] | HEAP32[$1 + 8 >> 2] != HEAP32[$2 + 8 >> 2])) {
      $4 = HEAP32[$1 + 12 >> 2] == HEAP32[$10 + 12 >> 2];
     }
     $1 = HEAP32[$1 >> 2];
     $8 = HEAP32[$2 >> 2];
     if (!((($8 | 0) == 2 ? ($1 | 0) == 1 : 0) | ($8 ? 0 : ($1 | 0) == 3))) {
      $6 = ($1 | 0) == 1 & ($8 | 0) == 1;
     }
     if ($4 & $6) {
      $4 = $3;
      $1 = -1;
      break label$21;
     }
     if ($4) {
      $4 = -1;
      $1 = $3;
      break label$21;
     }
     $4 = -1;
     $11 = $6 ? -1 : $3;
     $1 = -1;
     $6 = $6 ? $3 : -1;
     break label$18;
    }
    $6 = -1;
   }
   $3 = HEAP32[$2 + 48 >> 2];
   label$24 : {
    if (($3 | 0) == -1) {
     break label$24;
    }
    $8 = 0;
    $7 = 1;
    $5 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
    if (!(HEAP32[$5 + 4 >> 2] != HEAP32[$2 + 4 >> 2] | HEAP32[$5 + 8 >> 2] != HEAP32[$2 + 8 >> 2])) {
     $8 = HEAP32[$5 + 12 >> 2] == HEAP32[$10 + 12 >> 2];
    }
    $5 = HEAP32[$5 >> 2];
    $13 = HEAP32[$2 >> 2];
    if (!((($13 | 0) == 2 ? ($5 | 0) == 1 : 0) | ($13 ? 0 : ($5 | 0) == 3))) {
     $7 = ($5 | 0) == 1 & ($13 | 0) == 1;
    }
    if ($7 & $8) {
     $4 = $3;
     break label$24;
    }
    if ($8) {
     $1 = $3;
     break label$24;
    }
    $11 = $7 ? $11 : $3;
    $6 = $7 ? $3 : $6;
   }
   $8 = HEAP32[$2 + 52 >> 2];
   label$29 : {
    if (($8 | 0) == -1) {
     break label$29;
    }
    $3 = 0;
    $7 = 1;
    $5 = HEAP32[$0 + 32 >> 2] + Math_imul($8, 24) | 0;
    if (!(HEAP32[$5 + 4 >> 2] != HEAP32[$2 + 4 >> 2] | HEAP32[$5 + 8 >> 2] != HEAP32[$2 + 8 >> 2])) {
     $3 = HEAP32[$5 + 12 >> 2] == HEAP32[$10 + 12 >> 2];
    }
    $5 = HEAP32[$5 >> 2];
    $13 = HEAP32[$2 >> 2];
    if (!((($13 | 0) == 2 ? ($5 | 0) == 1 : 0) | ($13 ? 0 : ($5 | 0) == 3))) {
     $7 = ($5 | 0) == 1 & ($13 | 0) == 1;
    }
    if ($3 & $7) {
     $4 = $8;
     break label$29;
    }
    if ($3) {
     $1 = $8;
     break label$29;
    }
    $11 = $7 ? $11 : $8;
    $6 = $7 ? $8 : $6;
   }
   $3 = HEAP32[$2 + 56 >> 2];
   label$34 : {
    if (($3 | 0) == -1) {
     break label$34;
    }
    $7 = 0;
    $5 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
    if (!(HEAP32[$5 + 4 >> 2] != HEAP32[$2 + 4 >> 2] | HEAP32[$5 + 8 >> 2] != HEAP32[$2 + 8 >> 2])) {
     $7 = HEAP32[$5 + 12 >> 2] == HEAP32[$10 + 12 >> 2];
    }
    $8 = 1;
    $5 = HEAP32[$5 >> 2];
    $13 = HEAP32[$2 >> 2];
    if (!((($13 | 0) == 2 ? ($5 | 0) == 1 : 0) | ($13 ? 0 : ($5 | 0) == 3))) {
     $8 = ($5 | 0) == 1 & ($13 | 0) == 1;
    }
    if ($7 & $8) {
     $4 = $3;
     break label$34;
    }
    if ($7) {
     $1 = $3;
     break label$34;
    }
    $11 = $8 ? $11 : $3;
    $6 = $8 ? $3 : $6;
   }
   HEAP32[$2 + 44 >> 2] = $4;
   $8 = -1;
   HEAP32[$9 >> 2] = -1;
   HEAP32[$2 + 48 >> 2] = $11;
   HEAP32[$9 + 4 >> 2] = -1;
   HEAP32[$2 + 52 >> 2] = $6;
   HEAP32[$9 + 8 >> 2] = -1;
   HEAP32[$2 + 56 >> 2] = $1;
   HEAP32[$9 + 12 >> 2] = -1;
   Shape__faceNei_28int_2c_20int__29($0, $14, $2 + 60 | 0);
   $3 = HEAP32[$2 + 28 >> 2];
   label$39 : {
    label$40 : {
     if (($3 | 0) == -1) {
      $1 = -1;
      $3 = -1;
      break label$40;
     }
     $4 = HEAP32[$0 + 44 >> 2] + Math_imul($3, 40) | 0;
     $1 = HEAP32[$4 >> 2];
     if (!(($1 | 0) != HEAP32[$2 + 4 >> 2] | HEAP32[$4 + 4 >> 2] != HEAP32[$2 + 8 >> 2] | HEAP32[$4 + 8 >> 2] != HEAP32[$10 + 12 >> 2])) {
      $1 = $3;
      $3 = -1;
      break label$40;
     }
     label$43 : {
      $6 = HEAP32[$2 + 48 >> 2];
      if (($6 | 0) == -1) {
       break label$43;
      }
      $6 = HEAP32[$0 + 32 >> 2] + Math_imul($6, 24) | 0;
      if (($1 | 0) != HEAP32[$6 + 4 >> 2] | HEAP32[$4 + 4 >> 2] != HEAP32[$6 + 8 >> 2] | HEAP32[$4 + 8 >> 2] != HEAP32[$6 + 12 >> 2]) {
       break label$43;
      }
      $1 = -1;
      $4 = -1;
      $8 = $3;
      $3 = -1;
      break label$39;
     }
     label$44 : {
      $6 = HEAP32[$2 + 52 >> 2];
      if (($6 | 0) == -1) {
       break label$44;
      }
      $6 = HEAP32[$0 + 32 >> 2] + Math_imul($6, 24) | 0;
      if (($1 | 0) != HEAP32[$6 + 4 >> 2] | HEAP32[$4 + 4 >> 2] != HEAP32[$6 + 8 >> 2] | HEAP32[$4 + 8 >> 2] != HEAP32[$6 + 12 >> 2]) {
       break label$44;
      }
      $1 = -1;
      $4 = -1;
      break label$39;
     }
     $1 = -1;
    }
    $4 = $3;
    $3 = -1;
   }
   $6 = HEAP32[$2 + 32 >> 2];
   label$45 : {
    if (($6 | 0) == -1) {
     break label$45;
    }
    $7 = HEAP32[$0 + 44 >> 2] + Math_imul($6, 40) | 0;
    $11 = HEAP32[$7 >> 2];
    if (!(($11 | 0) != HEAP32[$2 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$2 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$10 + 12 >> 2])) {
     $1 = $6;
     break label$45;
    }
    label$47 : {
     $5 = HEAP32[$2 + 48 >> 2];
     if (($5 | 0) == -1) {
      break label$47;
     }
     $5 = HEAP32[$0 + 32 >> 2] + Math_imul($5, 24) | 0;
     if (($11 | 0) != HEAP32[$5 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$5 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$5 + 12 >> 2]) {
      break label$47;
     }
     $8 = $6;
     break label$45;
    }
    label$48 : {
     $5 = HEAP32[$2 + 52 >> 2];
     if (($5 | 0) == -1) {
      break label$48;
     }
     $5 = HEAP32[$0 + 32 >> 2] + Math_imul($5, 24) | 0;
     if (($11 | 0) != HEAP32[$5 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$5 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$5 + 12 >> 2]) {
      break label$48;
     }
     $3 = $6;
     break label$45;
    }
    $4 = $6;
   }
   $6 = HEAP32[$2 + 36 >> 2];
   label$49 : {
    if (($6 | 0) == -1) {
     break label$49;
    }
    $7 = HEAP32[$0 + 44 >> 2] + Math_imul($6, 40) | 0;
    $11 = HEAP32[$7 >> 2];
    if (!(($11 | 0) != HEAP32[$2 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$2 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$10 + 12 >> 2])) {
     $1 = $6;
     break label$49;
    }
    label$51 : {
     $5 = HEAP32[$2 + 48 >> 2];
     if (($5 | 0) == -1) {
      break label$51;
     }
     $5 = HEAP32[$0 + 32 >> 2] + Math_imul($5, 24) | 0;
     if (($11 | 0) != HEAP32[$5 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$5 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$5 + 12 >> 2]) {
      break label$51;
     }
     $8 = $6;
     break label$49;
    }
    label$52 : {
     $5 = HEAP32[$2 + 52 >> 2];
     if (($5 | 0) == -1) {
      break label$52;
     }
     $5 = HEAP32[$0 + 32 >> 2] + Math_imul($5, 24) | 0;
     if (($11 | 0) != HEAP32[$5 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$5 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$5 + 12 >> 2]) {
      break label$52;
     }
     $3 = $6;
     break label$49;
    }
    $4 = $6;
   }
   $6 = HEAP32[$2 + 40 >> 2];
   label$53 : {
    if (($6 | 0) == -1) {
     break label$53;
    }
    $7 = HEAP32[$0 + 44 >> 2] + Math_imul($6, 40) | 0;
    $11 = HEAP32[$7 >> 2];
    if (!(($11 | 0) != HEAP32[$2 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$2 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$10 + 12 >> 2])) {
     $1 = $6;
     break label$53;
    }
    label$55 : {
     $10 = HEAP32[$2 + 48 >> 2];
     if (($10 | 0) == -1) {
      break label$55;
     }
     $10 = HEAP32[$0 + 32 >> 2] + Math_imul($10, 24) | 0;
     if (($11 | 0) != HEAP32[$10 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$10 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$10 + 12 >> 2]) {
      break label$55;
     }
     $8 = $6;
     break label$53;
    }
    label$56 : {
     $10 = HEAP32[$2 + 52 >> 2];
     if (($10 | 0) == -1) {
      break label$56;
     }
     $10 = HEAP32[$0 + 32 >> 2] + Math_imul($10, 24) | 0;
     if (($11 | 0) != HEAP32[$10 + 4 >> 2] | HEAP32[$7 + 4 >> 2] != HEAP32[$10 + 8 >> 2] | HEAP32[$7 + 8 >> 2] != HEAP32[$10 + 12 >> 2]) {
      break label$56;
     }
     $3 = $6;
     break label$53;
    }
    $4 = $6;
   }
   HEAP32[$9 >> 2] = $1;
   HEAP32[$9 + 4 >> 2] = $8;
   HEAP32[$9 + 12 >> 2] = $3;
   HEAP32[$9 + 8 >> 2] = $4;
   $4 = HEAP32[$9 + 4 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$2 + 32 >> 2] = $4;
   $4 = HEAP32[$9 + 12 >> 2];
   HEAP32[$2 + 36 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$2 + 40 >> 2] = $4;
   $14 = $14 + 1 | 0;
   if (($14 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 if ($12) {
  HEAP32[$9 + 20 >> 2] = $12;
  dlfree($12);
 }
 global$0 = $9 + 32 | 0;
}
function CubeDocBase__loadMinBin_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 $2 = HEAPU8[$1 + 11 | 0];
 $3 = $2 << 24 >> 24 < 0;
 label$1 : {
  label$2 : {
   $2 = $3 ? HEAP32[$1 + 4 >> 2] : $2;
   if ($2) {
    $3 = $3 ? HEAP32[$1 >> 2] : $1;
    if (HEAPU8[$3 | 0] == 1) {
     break label$2;
    }
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6523, 17);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$4 + 24 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 24 | 0, 51440);
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$4 + 24 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   if (($3 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $2);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  label$6 : {
   if ($2 >>> 0 >= 2) {
    $11 = HEAPU8[$3 + 1 | 0];
    if ($11) {
     break label$6;
    }
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6541, 21);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$4 + 24 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 24 | 0, 51440);
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$4 + 24 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   if (($3 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $2);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 48 >> 2] = 0;
  HEAP32[$4 + 52 >> 2] = 50;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 50;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 40 >> 2] = 0;
  HEAP32[$4 + 44 >> 2] = 50;
  $7 = 2;
  $3 = $11;
  $5 = 8;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      while (1) {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           label$19 : {
            label$20 : {
             label$21 : {
              label$22 : {
               if (($5 | 0) >= 3) {
                $8 = 0;
                $6 = HEAPU8[$1 + 11 | 0];
                $2 = $6 << 24 >> 24;
                if ($7 >>> 0 >= (($2 | 0) < 0 ? HEAP32[$1 + 4 >> 2] : $6) >>> 0) {
                 $2 = $5;
                 break label$21;
                }
                $6 = HEAPU8[(($2 | 0) < 0 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
                $10 = $6 << 8 - $5 | ($3 & 255) >>> $5;
                $7 = $7 + 1 | 0;
                $2 = $5 + -2 | 0;
                break label$22;
               }
               $10 = ($3 & 255) >>> $5;
               $6 = $3;
               $2 = $5 + 6 | 0;
              }
              $8 = $10 << 2 & 252;
              if (($2 | 0) < 3) {
               break label$20;
              }
              $3 = $6;
             }
             $10 = 0;
             $6 = HEAPU8[$1 + 11 | 0];
             $5 = $6 << 24 >> 24;
             if ($7 >>> 0 >= (($5 | 0) < 0 ? HEAP32[$1 + 4 >> 2] : $6) >>> 0) {
              $5 = $2;
              break label$18;
             }
             $6 = HEAPU8[(($5 | 0) < 0 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
             $3 = $6 << 8 - $2 | ($3 & 255) >>> $2;
             $7 = $7 + 1 | 0;
             $5 = $2 + -2 | 0;
             break label$19;
            }
            $3 = ($6 & 255) >>> $2;
            $5 = $2 + 6 | 0;
           }
           $10 = $3 << 2 & 252;
           $2 = $5 + 6 | 0;
           if (($2 | 0) < 9) {
            break label$17;
           }
           $3 = $6;
          }
          $13 = 0;
          $9 = 1;
          $6 = HEAPU8[$1 + 11 | 0];
          $2 = $6 << 24 >> 24;
          if ($7 >>> 0 >= (($2 | 0) < 0 ? HEAP32[$1 + 4 >> 2] : $6) >>> 0) {
           $2 = $5;
           $6 = $3;
           break label$15;
          }
          $6 = HEAPU8[(($2 | 0) < 0 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
          $3 = $6 << 8 - $5 | ($3 & 255) >>> $5;
          $2 = $5 + -2 | 0;
          $7 = $7 + 1 | 0;
          break label$16;
         }
         $3 = ($6 & 255) >>> $5;
        }
        $13 = $3 & 63;
        $9 = 0;
       }
       $5 = $2 + 2 | 0;
       label$27 : {
        if (($5 | 0) >= 9) {
         $5 = HEAPU8[$1 + 11 | 0];
         $3 = $5 << 24 >> 24 < 0;
         if ($7 >>> 0 >= ($3 ? HEAP32[$1 + 4 >> 2] : $5) >>> 0) {
          break label$13;
         }
         $3 = HEAPU8[($3 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
         $9 = $3 << 8 - $2 | ($6 & 255) >>> $2;
         $5 = $2 + -6 | 0;
         $7 = $7 + 1 | 0;
         break label$27;
        }
        if (!$7) {
         $6 = HEAPU8[$1 + 11 | 0];
         $3 = $6 << 24 >> 24 < 0;
         if (!($3 ? HEAP32[$1 + 4 >> 2] : $6)) {
          break label$13;
         }
         $3 = HEAPU8[($3 ? HEAP32[$1 >> 2] : $1) | 0];
         $9 = $3 >>> $2;
         $7 = 1;
         break label$27;
        }
        if ($9) {
         break label$13;
        }
        $9 = ($6 & 255) >>> $2;
        $3 = $6;
       }
       $6 = $13 << 2;
       HEAP32[$4 + 16 >> 2] = $6;
       HEAP32[$4 + 12 >> 2] = $10;
       HEAP32[$4 + 8 >> 2] = $8;
       $9 = $9 & 3;
       HEAP32[$4 + 20 >> 2] = $9;
       $2 = HEAP32[$4 + 28 >> 2];
       label$30 : {
        if ($2 >>> 0 < HEAPU32[$4 + 32 >> 2]) {
         HEAP32[$2 + 12 >> 2] = $9;
         HEAP32[$2 + 8 >> 2] = $6;
         HEAP32[$2 + 4 >> 2] = $10;
         HEAP32[$2 >> 2] = $8;
         HEAP32[$4 + 28 >> 2] = $2 + 16;
         break label$30;
        }
        void_20std____2__vector_OrderTemplate__LoadedFace_2c_20std____2__allocator_OrderTemplate__LoadedFace__20_____push_back_slow_path_OrderTemplate__LoadedFace__28OrderTemplate__LoadedFace___29($4 + 24 | 0, $4 + 8 | 0);
       }
       $12 = $12 + 1 | 0;
       if (($12 | 0) != ($11 | 0)) {
        continue;
       }
       break;
      }
      HEAP32[$4 + 16 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      $10 = 0;
      while (1) {
       label$33 : {
        label$34 : {
         if (($5 | 0) >= 1) {
          $6 = 0;
          $9 = HEAPU8[$1 + 11 | 0];
          $2 = $9 << 24 >> 24;
          $8 = 1;
          if ($7 >>> 0 >= (($2 | 0) < 0 ? HEAP32[$1 + 4 >> 2] : $9) >>> 0) {
           break label$34;
          }
          $8 = 0;
          $2 = HEAPU8[(($2 | 0) < 0 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
          $6 = $2 << 8 - $5 | ($3 & 255) >>> $5;
          $7 = $7 + 1 | 0;
          break label$33;
         }
         $6 = ($3 & 255) >>> $5;
         $5 = $5 + 8 | 0;
         $8 = 0;
        }
        $2 = $3;
       }
       $3 = $5 + 3 | 0;
       label$36 : {
        if (($3 | 0) >= 9) {
         $8 = HEAPU8[$1 + 11 | 0];
         $3 = $8 << 24 >> 24 < 0;
         if ($7 >>> 0 >= ($3 ? HEAP32[$1 + 4 >> 2] : $8) >>> 0) {
          break label$12;
         }
         $3 = HEAPU8[($3 ? HEAP32[$1 >> 2] : $1) + $7 | 0];
         $8 = $3 << 8 - $5 | ($2 & 255) >>> $5;
         $5 = $5 + -5 | 0;
         $7 = $7 + 1 | 0;
         break label$36;
        }
        if ($8) {
         break label$12;
        }
        $8 = ($2 & 255) >>> $5;
        $5 = $3;
        $3 = $2;
       }
       HEAP32[$4 >> 2] = $6 & 255;
       HEAP32[$4 + 4 >> 2] = $8 & 7;
       $2 = HEAP32[$4 + 12 >> 2];
       label$38 : {
        if ($2 >>> 0 < HEAPU32[$4 + 16 >> 2]) {
         $6 = HEAP32[$4 + 4 >> 2];
         HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$2 + 4 >> 2] = $6;
         HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 8;
         break label$38;
        }
        void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($4 + 8 | 0, $4);
       }
       $10 = $10 + 1 | 0;
       if ($10 >>> 0 < $11 >>> 0) {
        continue;
       }
       break;
      }
      CubeDocBase__generateFromFaces_28OrderTemplate__29($0, $4 + 24 | 0);
      CubeDocBase__addSlvMin_28std____2__vector_std____2__pair_int_2c_20int__2c_20std____2__allocator_std____2__pair_int_2c_20int__20__20__20const__29($0, $4 + 8 | 0);
      break label$11;
     }
     $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6563, 33), $12);
     $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
     HEAP32[$4 + 8 >> 2] = $1;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
     $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 51440);
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
     $1 = HEAP32[$4 + 8 >> 2];
     $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
     HEAP32[$1 + 4 >> 2] = $3;
     if (($3 | 0) == -1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $2);
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
     break label$10;
    }
    $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6597, 31), $10);
    $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
    HEAP32[$4 >> 2] = $1;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4, 51440);
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
    $1 = HEAP32[$4 >> 2];
    $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
    HEAP32[$1 + 4 >> 2] = $3;
    if (($3 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $2);
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   }
   $0 = HEAP32[$4 + 8 >> 2];
   if (!$0) {
    break label$10;
   }
   HEAP32[$4 + 12 >> 2] = $0;
   dlfree($0);
  }
  $0 = HEAP32[$4 + 24 >> 2];
  if (!$0) {
   break label$1;
  }
  HEAP32[$4 + 28 >> 2] = $0;
  dlfree($0);
 }
 global$0 = $4 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = 0;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 37247);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $4;
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
    HEAP32[$1 + 60 >> 2] = $2;
    if (!$2) {
     break label$1;
    }
    $2 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
     $2 = HEAPU8[$2 | 0];
    } else {
     $2 = 0;
    }
    if (($2 & 255) == 73) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
     HEAP32[$1 + 44 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     HEAP32[$1 + 60 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
    }
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
      HEAP32[$1 + 44 >> 2] = $2;
      if (!$2) {
       break label$2;
      }
      HEAP32[$1 + 60 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
      continue;
     }
     break;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0);
    HEAP32[$1 + 44 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 35136);
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 12 >> 2] = $4;
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0);
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 37251);
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0);
    HEAP32[$1 + 60 >> 2] = $3;
    if (!$3 | $4 ^ 1) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0);
    HEAP32[$1 + 60 >> 2] = $3;
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
    $2 = HEAP8[$2 | 0];
   } else {
    $2 = 0;
   }
   label$10 : {
    if (($2 << 24 >> 24) + -48 >>> 0 <= 9) {
     $2 = $0;
     while (1) {
      $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($2);
      HEAP32[$1 + 44 >> 2] = $5;
      if (!$5) {
       break label$1;
      }
      label$15 : {
       if (HEAP32[$1 + 60 >> 2]) {
        HEAP32[$1 + 60 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
        break label$15;
       }
       if ($4) {
        HEAP32[$1 + 60 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 44 | 0);
        break label$15;
       }
       HEAP32[$1 + 60 >> 2] = $5;
      }
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       continue;
      }
      break;
     }
     break label$10;
    }
    $2 = $0;
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
    HEAP32[$1 + 60 >> 2] = $4;
    if (!$4) {
     break label$1;
    }
    $3 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
     $3 = HEAPU8[$3 | 0];
    } else {
     $3 = 0;
    }
    if (($3 & 255) != 73) {
     break label$10;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($2, 0);
    HEAP32[$1 + 44 >> 2] = $3;
    if (!$3) {
     break label$2;
    }
    HEAP32[$1 + 60 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($2);
   HEAP32[$1 + 44 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
   break label$1;
  }
  $3 = 0;
 }
 global$0 = $1 - -64 | 0;
 return $3;
}
function PicBucket__updateGrp_28int_2c_20PicArr__2c_20bool_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $4 = global$0 - 656 | 0;
 global$0 = $4;
 label$1 : {
  label$2 : {
   label$3 : {
    $5 = HEAP32[$0 + 8 >> 2];
    $7 = HEAP32[$0 + 4 >> 2];
    $10 = ($5 - $7 | 0) / 152 | 0;
    if (!(($10 | 0) != ($1 | 0) ? ($1 | 0) != -1 : 0)) {
     $1 = HEAP32[$0 + 12 >> 2];
     if ($10 >>> 0 > ($1 - $7 | 0) / 152 >>> 0) {
      $11 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 7024, 32), $10);
      $1 = HEAP32[(HEAP32[HEAP32[$11 >> 2] + -12 >> 2] + $11 | 0) + 28 >> 2];
      HEAP32[$4 >> 2] = $1;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
      $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4, 51440);
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
      $6 = HEAP32[$4 >> 2];
      $7 = HEAP32[$6 + 4 >> 2] + -1 | 0;
      HEAP32[$6 + 4 >> 2] = $7;
      if (($7 | 0) == -1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($11, $1);
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($11);
      $5 = HEAP32[$0 + 8 >> 2];
      $1 = HEAP32[$0 + 12 >> 2];
     }
     $7 = $0 + 4 | 0;
     HEAP32[$4 + 32 >> 2] = 0;
     HEAP32[$4 + 36 >> 2] = -1;
     HEAP32[$4 + 8 >> 2] = 0;
     HEAP32[$4 + 12 >> 2] = 0;
     HEAP32[$4 + 16 >> 2] = 0;
     HEAP32[$4 + 48 >> 2] = 1065353216;
     HEAP32[$4 + 80 >> 2] = 0;
     HEAP32[$4 + 84 >> 2] = 0;
     HEAP32[$4 + 60 >> 2] = 0;
     HEAP32[$4 + 64 >> 2] = 0;
     HEAP8[$4 + 68 | 0] = 0;
     HEAP32[$4 + 88 >> 2] = 0;
     HEAP32[$4 + 92 >> 2] = 1065353216;
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 100 >> 2] = 0;
     HEAP32[$4 + 104 >> 2] = 0;
     HEAP32[$4 + 108 >> 2] = 0;
     HEAP32[$4 + 112 >> 2] = 0;
     HEAP32[$4 + 116 >> 2] = 0;
     HEAP32[$4 + 120 >> 2] = 0;
     HEAP32[$4 + 124 >> 2] = 0;
     HEAP32[$4 + 128 >> 2] = 0;
     HEAP32[$4 + 132 >> 2] = 0;
     HEAP32[$4 + 136 >> 2] = 0;
     HEAP32[$4 + 140 >> 2] = 0;
     HEAP32[$4 + 144 >> 2] = 0;
     HEAP32[$4 + 24 >> 2] = 0;
     HEAP32[$4 + 28 >> 2] = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 72 >> 2] = 0;
     HEAP32[$4 + 76 >> 2] = 0;
     HEAP32[$4 + 40 >> 2] = 1065353216;
     HEAP32[$4 + 44 >> 2] = 1065353216;
     HEAP32[$4 + 52 >> 2] = 0;
     HEAP32[$4 + 56 >> 2] = 0;
     HEAP8[$4 + 148 | 0] = 1;
     if ($5 >>> 0 >= $1 >>> 0) {
      break label$3;
     }
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$4 + 8 >> 2] = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$5 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
     HEAP32[$4 + 12 >> 2] = 0;
     HEAP32[$4 + 16 >> 2] = 0;
     HEAP32[$5 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
     HEAP32[$5 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
     $1 = HEAP32[$4 + 28 >> 2];
     HEAP32[$5 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
     HEAP32[$5 + 28 >> 2] = $1;
     HEAP32[$4 + 24 >> 2] = 0;
     HEAP32[$4 + 28 >> 2] = 0;
     HEAP32[$4 + 32 >> 2] = 0;
     HEAP8[$5 + 68 | 0] = HEAPU8[$4 + 68 | 0];
     $1 = HEAP32[$4 + 64 >> 2];
     HEAP32[$5 + 60 >> 2] = HEAP32[$4 + 60 >> 2];
     HEAP32[$5 + 64 >> 2] = $1;
     $1 = HEAP32[$4 + 56 >> 2];
     HEAP32[$5 + 52 >> 2] = HEAP32[$4 + 52 >> 2];
     HEAP32[$5 + 56 >> 2] = $1;
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$5 + 44 >> 2] = HEAP32[$4 + 44 >> 2];
     HEAP32[$5 + 48 >> 2] = $1;
     $1 = HEAP32[$4 + 40 >> 2];
     HEAP32[$5 + 36 >> 2] = HEAP32[$4 + 36 >> 2];
     HEAP32[$5 + 40 >> 2] = $1;
     HEAP32[$5 + 80 >> 2] = HEAP32[$4 + 80 >> 2];
     $1 = HEAP32[$4 + 76 >> 2];
     HEAP32[$5 + 72 >> 2] = HEAP32[$4 + 72 >> 2];
     HEAP32[$5 + 76 >> 2] = $1;
     HEAP32[$4 + 72 >> 2] = 0;
     HEAP32[$4 + 76 >> 2] = 0;
     HEAP32[$4 + 80 >> 2] = 0;
     HEAP32[$5 + 92 >> 2] = HEAP32[$4 + 92 >> 2];
     $1 = HEAP32[$4 + 88 >> 2];
     HEAP32[$5 + 84 >> 2] = HEAP32[$4 + 84 >> 2];
     HEAP32[$5 + 88 >> 2] = $1;
     HEAP32[$5 + 104 >> 2] = HEAP32[$4 + 104 >> 2];
     $1 = HEAP32[$4 + 100 >> 2];
     HEAP32[$5 + 96 >> 2] = HEAP32[$4 + 96 >> 2];
     HEAP32[$5 + 100 >> 2] = $1;
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 100 >> 2] = 0;
     HEAP32[$4 + 104 >> 2] = 0;
     HEAP32[$5 + 116 >> 2] = HEAP32[$4 + 116 >> 2];
     $1 = HEAP32[$4 + 112 >> 2];
     HEAP32[$5 + 108 >> 2] = HEAP32[$4 + 108 >> 2];
     HEAP32[$5 + 112 >> 2] = $1;
     HEAP32[$4 + 108 >> 2] = 0;
     HEAP32[$4 + 112 >> 2] = 0;
     HEAP32[$4 + 116 >> 2] = 0;
     HEAP32[$5 + 128 >> 2] = HEAP32[$4 + 128 >> 2];
     $1 = HEAP32[$4 + 124 >> 2];
     HEAP32[$5 + 120 >> 2] = HEAP32[$4 + 120 >> 2];
     HEAP32[$5 + 124 >> 2] = $1;
     HEAP32[$4 + 128 >> 2] = 0;
     HEAP32[$4 + 120 >> 2] = 0;
     HEAP32[$4 + 124 >> 2] = 0;
     HEAP32[$5 + 132 >> 2] = HEAP32[$4 + 132 >> 2];
     HEAP32[$5 + 144 >> 2] = HEAP32[$4 + 144 >> 2];
     $1 = HEAP32[$4 + 140 >> 2];
     HEAP32[$5 + 136 >> 2] = HEAP32[$4 + 136 >> 2];
     HEAP32[$5 + 140 >> 2] = $1;
     HEAP32[$4 + 136 >> 2] = 0;
     HEAP32[$4 + 140 >> 2] = 0;
     HEAP32[$4 + 144 >> 2] = 0;
     HEAP8[$5 + 148 | 0] = HEAPU8[$4 + 148 | 0];
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 152;
     break label$2;
    }
    $5 = $7 + Math_imul($1, 152) | 0;
    $10 = $1;
    $7 = 0;
    break label$1;
   }
   void_20std____2__vector_PicGroupDef_2c_20std____2__allocator_PicGroupDef__20_____push_back_slow_path_PicGroupDef__28PicGroupDef___29($7, $4);
  }
  PicGroupDef___PicGroupDef_28_29($4);
  $5 = HEAP32[$7 >> 2] + Math_imul($10, 152) | 0;
  HEAP32[$5 + 40 >> 2] = 1065353216;
  HEAP32[$5 + 44 >> 2] = 1065353216;
  HEAP32[$5 + 36 >> 2] = 0;
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  HEAP32[$5 + 48 >> 2] = 1065353216;
  HEAP32[$5 + 52 >> 2] = 0;
  $7 = 1;
 }
 $12 = $0 + 16 | 0;
 $11 = $4 + 356 | 0;
 $1 = 0;
 while (1) {
  label$9 : {
   if ($7) {
    $6 = HEAP32[$0 + 20 >> 2];
    HEAP32[$4 + 652 >> 2] = ($6 - HEAP32[$0 + 16 >> 2] | 0) / 652;
    HEAP32[$4 + 36 >> 2] = -1;
    HEAP8[$4 + 33 | 0] = 0;
    HEAP32[$4 >> 2] = -1;
    HEAP32[$4 + 4 >> 2] = -1;
    HEAP32[$4 + 16 >> 2] = 0;
    HEAP32[$4 + 20 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAP8[$4 + 32 | 0] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP32[$4 + 68 >> 2] = -1;
    HEAP8[$4 + 65 | 0] = 0;
    HEAP8[$4 + 64 | 0] = 0;
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 48 >> 2] = 0;
    HEAP32[$4 + 52 >> 2] = 0;
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP32[$4 + 100 >> 2] = -1;
    HEAP8[$4 + 97 | 0] = 0;
    HEAP8[$4 + 96 | 0] = 0;
    HEAP32[$4 + 88 >> 2] = 0;
    HEAP32[$4 + 92 >> 2] = 0;
    HEAP32[$4 + 80 >> 2] = 0;
    HEAP32[$4 + 84 >> 2] = 0;
    HEAP32[$4 + 72 >> 2] = 0;
    HEAP32[$4 + 76 >> 2] = 0;
    HEAP32[$4 + 132 >> 2] = -1;
    HEAP8[$4 + 129 | 0] = 0;
    HEAP8[$4 + 128 | 0] = 0;
    HEAP32[$4 + 120 >> 2] = 0;
    HEAP32[$4 + 124 >> 2] = 0;
    HEAP32[$4 + 112 >> 2] = 0;
    HEAP32[$4 + 116 >> 2] = 0;
    HEAP32[$4 + 104 >> 2] = 0;
    HEAP32[$4 + 108 >> 2] = 0;
    HEAP32[$4 + 164 >> 2] = -1;
    HEAP8[$4 + 161 | 0] = 0;
    HEAP8[$4 + 160 | 0] = 0;
    HEAP32[$4 + 152 >> 2] = 0;
    HEAP32[$4 + 156 >> 2] = 0;
    HEAP32[$4 + 144 >> 2] = 0;
    HEAP32[$4 + 148 >> 2] = 0;
    HEAP32[$4 + 136 >> 2] = 0;
    HEAP32[$4 + 140 >> 2] = 0;
    HEAP32[$4 + 196 >> 2] = -1;
    HEAP8[$4 + 193 | 0] = 0;
    HEAP8[$4 + 192 | 0] = 0;
    HEAP32[$4 + 184 >> 2] = 0;
    HEAP32[$4 + 188 >> 2] = 0;
    HEAP32[$4 + 176 >> 2] = 0;
    HEAP32[$4 + 180 >> 2] = 0;
    HEAP32[$4 + 168 >> 2] = 0;
    HEAP32[$4 + 172 >> 2] = 0;
    HEAP32[$4 + 228 >> 2] = -1;
    HEAP8[$4 + 225 | 0] = 0;
    HEAP8[$4 + 224 | 0] = 0;
    HEAP32[$4 + 216 >> 2] = 0;
    HEAP32[$4 + 220 >> 2] = 0;
    HEAP32[$4 + 208 >> 2] = 0;
    HEAP32[$4 + 212 >> 2] = 0;
    HEAP32[$4 + 200 >> 2] = 0;
    HEAP32[$4 + 204 >> 2] = 0;
    HEAP32[$4 + 260 >> 2] = -1;
    HEAP8[$4 + 257 | 0] = 0;
    HEAP8[$4 + 256 | 0] = 0;
    HEAP32[$4 + 248 >> 2] = 0;
    HEAP32[$4 + 252 >> 2] = 0;
    HEAP32[$4 + 240 >> 2] = 0;
    HEAP32[$4 + 244 >> 2] = 0;
    HEAP32[$4 + 232 >> 2] = 0;
    HEAP32[$4 + 236 >> 2] = 0;
    HEAP32[$4 + 292 >> 2] = -1;
    HEAP8[$4 + 289 | 0] = 0;
    HEAP8[$4 + 288 | 0] = 0;
    HEAP32[$4 + 280 >> 2] = 0;
    HEAP32[$4 + 284 >> 2] = 0;
    HEAP32[$4 + 272 >> 2] = 0;
    HEAP32[$4 + 276 >> 2] = 0;
    HEAP32[$4 + 264 >> 2] = 0;
    HEAP32[$4 + 268 >> 2] = 0;
    HEAP32[$4 + 312 >> 2] = 0;
    HEAP32[$4 + 304 >> 2] = 0;
    HEAP32[$4 + 308 >> 2] = 0;
    HEAP32[$4 + 296 >> 2] = 0;
    HEAP32[$4 + 300 >> 2] = 0;
    HEAP32[$4 + 348 >> 2] = 0;
    HEAP32[$4 + 352 >> 2] = 0;
    HEAP32[$4 + 340 >> 2] = -1;
    HEAP32[$4 + 344 >> 2] = -1;
    HEAP32[$4 + 332 >> 2] = 0;
    HEAP32[$4 + 336 >> 2] = -1;
    HEAP32[$4 + 324 >> 2] = 0;
    HEAP32[$4 + 328 >> 2] = 1;
    HEAP32[$4 + 316 >> 2] = 1065353216;
    HEAP32[$4 + 320 >> 2] = 1065353216;
    memset($11, 255, 296);
    label$11 : {
     if (HEAPU32[$0 + 24 >> 2] > $6 >>> 0) {
      memcpy($6, $4, 652);
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 652;
      break label$11;
     }
     void_20std____2__vector_PicDef_2c_20std____2__allocator_PicDef__20_____push_back_slow_path_PicDef__28PicDef___29($12, $4);
    }
    $6 = HEAP32[$5 + 4 >> 2];
    if (($6 | 0) != HEAP32[$5 + 8 >> 2]) {
     HEAP32[$6 >> 2] = HEAP32[$4 + 652 >> 2];
     HEAP32[$5 + 4 >> 2] = $6 + 4;
     break label$9;
    }
    void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($5, $4 + 652 | 0);
    break label$9;
   }
   HEAP32[$4 + 652 >> 2] = HEAP32[HEAP32[$5 >> 2] + ($1 << 2) >> 2];
  }
  $8 = HEAP32[$12 >> 2] + Math_imul(HEAP32[$4 + 652 >> 2], 652) | 0;
  HEAP32[$8 + 4 >> 2] = $1;
  HEAP32[$8 >> 2] = $10;
  $9 = ($1 << 5) + $2 | 0;
  $6 = HEAP32[$9 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$8 + 12 >> 2] = $6;
  $6 = HEAP32[$9 + 12 >> 2];
  HEAP32[$8 + 16 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$8 + 20 >> 2] = $6;
  $6 = HEAP32[$9 + 20 >> 2];
  HEAP32[$8 + 24 >> 2] = HEAP32[$9 + 16 >> 2];
  HEAP32[$8 + 28 >> 2] = $6;
  $6 = HEAP32[$9 + 28 >> 2];
  HEAP32[$8 + 32 >> 2] = HEAP32[$9 + 24 >> 2];
  HEAP32[$8 + 36 >> 2] = $6;
  PicArr__makeRtns_28PicArr__29_20const($8 + 8 | 0, $8 + 40 | 0);
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 6) {
   continue;
  }
  break;
 }
 if ($3) {
  MyAllocator__init_28int_2c_20int_2c_20int_29();
  HEAP32[11886] = 0;
  HEAP32[11881] = 0;
  HEAP32[11876] = 0;
  PicBucket__makeAllComp_28_29($0);
  PicBucket__distinctMeshes_28ProgressCallback__29($0);
  MyAllocator__checkMaxAlloc_28_29_20const();
 }
 global$0 = $4 + 656 | 0;
 return $10;
}
function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 $11 = global$0 - 96 | 0;
 global$0 = $11;
 $12 = ($6 & 131071) << 15 | $5 >>> 17;
 $20 = $2;
 $9 = $8 & 65535;
 $15 = $9;
 $21 = $7;
 $10 = $7;
 $25 = $10 << 15 | $6 >>> 17;
 $14 = ($4 ^ $8) & -2147483648;
 $26 = ($9 & 131071) << 15 | $7 >>> 17;
 $17 = $4 & 65535;
 $9 = $17;
 $19 = $3;
 $23 = $9;
 $17 = 0;
 $36 = $8 >>> 16 & 32767;
 $37 = $4 >>> 16 & 32767;
 label$1 : {
  label$2 : {
   if ($37 + -1 >>> 0 <= 32765) {
    $10 = 0;
    if ($36 + -1 >>> 0 < 32766) {
     break label$2;
    }
   }
   $13 = $4 & 2147483647;
   $16 = $13;
   $10 = $3;
   if (!(!$3 & ($13 | 0) == 2147418112 ? !($1 | $2) : ($13 | 0) == 2147418112 & $3 >>> 0 < 0 | $13 >>> 0 < 2147418112)) {
    $22 = $3;
    $14 = $4 | 32768;
    break label$1;
   }
   $13 = $8 & 2147483647;
   $4 = $13;
   $3 = $7;
   if (!(!$3 & ($4 | 0) == 2147418112 ? !($5 | $6) : ($4 | 0) == 2147418112 & $3 >>> 0 < 0 | $4 >>> 0 < 2147418112)) {
    $22 = $7;
    $14 = $8 | 32768;
    $1 = $5;
    $2 = $6;
    break label$1;
   }
   if (!($1 | $10 | ($16 ^ 2147418112 | $2))) {
    if (!($3 | $5 | ($4 | $6))) {
     $14 = 2147450880;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $14 = $14 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
    $3 = $1 | $10;
    $4 = $2 | $16;
    $1 = 0;
    $2 = 0;
    if (!($3 | $4)) {
     $14 = 2147450880;
     break label$1;
    }
    $14 = $14 | 2147418112;
    break label$1;
   }
   if (!($1 | $10 | ($2 | $16))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!($3 | $5 | ($4 | $6))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (($16 | 0) == 65535 & $10 >>> 0 <= 4294967295 | $16 >>> 0 < 65535) {
    $10 = $1;
    $7 = !($9 | $19);
    $8 = $7 << 6;
    $13 = Math_clz32($7 ? $1 : $19) + 32 | 0;
    $1 = Math_clz32($7 ? $2 : $9);
    $1 = $8 + (($1 | 0) == 32 ? $13 : $1) | 0;
    __ashlti3($11 + 80 | 0, $10, $2, $19, $9, $1 + -15 | 0);
    $20 = HEAP32[$11 + 84 >> 2];
    $19 = HEAP32[$11 + 88 >> 2];
    $23 = HEAP32[$11 + 92 >> 2];
    $18 = 16 - $1 | 0;
    $1 = HEAP32[$11 + 80 >> 2];
   }
   $10 = $18;
   if (($4 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4 >>> 0 > 65535) {
    break label$2;
   }
   $2 = !($15 | $21);
   $3 = $2 << 6;
   $4 = Math_clz32($2 ? $5 : $21) + 32 | 0;
   $2 = Math_clz32($2 ? $6 : $15);
   $2 = $3 + (($2 | 0) == 32 ? $4 : $2) | 0;
   $7 = $2;
   __ashlti3($11 - -64 | 0, $5, $6, $21, $15, $2 + -15 | 0);
   $5 = HEAP32[$11 + 76 >> 2];
   $2 = $5;
   $8 = HEAP32[$11 + 68 >> 2];
   $6 = $8;
   $4 = HEAP32[$11 + 72 >> 2];
   $3 = $4;
   $25 = $3 << 15 | $6 >>> 17;
   $3 = $6;
   $5 = HEAP32[$11 + 64 >> 2];
   $12 = ($3 & 131071) << 15 | $5 >>> 17;
   $26 = ($2 & 131071) << 15 | $4 >>> 17;
   $10 = ($18 - $7 | 0) + 16 | 0;
  }
  $18 = $10;
  $7 = 0;
  $27 = __wasm_i64_mul($12, 0, $1, $7);
  $2 = i64toi32_i32$HIGH_BITS;
  $28 = $2;
  $3 = $5;
  $8 = $3 << 15 & -32768;
  $16 = 0;
  $13 = $20;
  $4 = __wasm_i64_mul($8, $16, $13, 0);
  $3 = $4 + $27 | 0;
  $6 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $6 = $3 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
  $2 = $3;
  $4 = 0;
  $15 = __wasm_i64_mul($1, $7, $8, $16);
  $9 = $15 + $4 | 0;
  $5 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $20 = $9;
  $5 = $9 >>> 0 < $15 >>> 0 ? $5 + 1 | 0 : $5;
  $15 = $5;
  $47 = ($2 | 0) == ($5 | 0) & $9 >>> 0 < $4 >>> 0 | $5 >>> 0 < $2 >>> 0;
  $39 = __wasm_i64_mul($12, $24, $13, $38);
  $31 = i64toi32_i32$HIGH_BITS;
  $32 = $19;
  $4 = __wasm_i64_mul($8, $16, $19, 0);
  $3 = $4 + $39 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $31 | 0;
  $40 = $3;
  $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
  $4 = $9;
  $5 = __wasm_i64_mul($25, 0, $1, $7);
  $3 = $5 + $3 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $4 | 0;
  $41 = $3;
  $9 = $3 >>> 0 < $5 >>> 0 ? $9 + 1 | 0 : $9;
  $21 = $9;
  $3 = $6 + $3 | 0;
  $2 = (($6 | 0) == ($28 | 0) & $2 >>> 0 < $27 >>> 0 | $6 >>> 0 < $28 >>> 0) + $9 | 0;
  $27 = $3;
  $2 = $3 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $19 = $2;
  $6 = $3;
  $43 = __wasm_i64_mul($12, $24, $32, $42);
  $33 = i64toi32_i32$HIGH_BITS;
  $29 = $23 | 65536;
  $23 = $17;
  $8 = __wasm_i64_mul($8, $16, $29, $17);
  $3 = $8 + $43 | 0;
  $5 = i64toi32_i32$HIGH_BITS + $33 | 0;
  $44 = $3;
  $5 = $3 >>> 0 < $8 >>> 0 ? $5 + 1 | 0 : $5;
  $17 = $5;
  $8 = __wasm_i64_mul($13, $38, $25, $45);
  $3 = $8 + $3 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $5 | 0;
  $34 = $3;
  $9 = $3 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
  $16 = $9;
  $30 = $26 & 2147483647 | -2147483648;
  $3 = __wasm_i64_mul($1, $7, $30, 0);
  $1 = $3 + $34 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
  $26 = $1;
  $3 = $1 >>> 0 < $3 >>> 0 ? $10 + 1 | 0 : $10;
  $5 = 0;
  $1 = $5 + $6 | 0;
  $2 = $2 + $26 | 0;
  $28 = $1;
  $35 = $1 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
  $9 = $35;
  $2 = $1 + $47 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $7 = $2;
  $8 = $9;
  $18 = ($18 + ($36 + $37 | 0) | 0) + -16383 | 0;
  $6 = __wasm_i64_mul($32, $42, $25, $45);
  $1 = i64toi32_i32$HIGH_BITS;
  $10 = __wasm_i64_mul($12, $24, $29, $23);
  $2 = $10 + $6 | 0;
  $5 = i64toi32_i32$HIGH_BITS + $1 | 0;
  $9 = $2;
  $5 = $2 >>> 0 < $10 >>> 0 ? $5 + 1 | 0 : $5;
  $2 = $5;
  $24 = ($1 | 0) == ($2 | 0) & $9 >>> 0 < $6 >>> 0 | $2 >>> 0 < $1 >>> 0;
  $6 = __wasm_i64_mul($30, $46, $13, $38);
  $1 = $6 + $9 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $10 = $1 >>> 0 < $6 >>> 0 ? $10 + 1 | 0 : $10;
  $12 = $1;
  $6 = 0;
  $1 = $10;
  $2 = ($2 | 0) == ($1 | 0) & $12 >>> 0 < $9 >>> 0 | $1 >>> 0 < $2 >>> 0;
  $5 = $2 + $24 | 0;
  if ($5 >>> 0 < $2 >>> 0) {
   $6 = 1;
  }
  $2 = $1;
  $9 = $6;
  $24 = $5;
  $5 = 0;
  $6 = ($4 | 0) == ($31 | 0) & $40 >>> 0 < $39 >>> 0 | $4 >>> 0 < $31 >>> 0;
  $4 = ($4 | 0) == ($21 | 0) & $41 >>> 0 < $40 >>> 0 | $21 >>> 0 < $4 >>> 0;
  $6 = $6 + $4 | 0;
  if ($6 >>> 0 < $4 >>> 0) {
   $5 = 1;
  }
  $4 = $6 + $12 | 0;
  $10 = $2 + $5 | 0;
  $13 = $4;
  $2 = $4;
  $10 = $2 >>> 0 < $6 >>> 0 ? $10 + 1 | 0 : $10;
  $4 = $10;
  $1 = ($1 | 0) == ($4 | 0) & $2 >>> 0 < $12 >>> 0 | $4 >>> 0 < $1 >>> 0;
  $2 = $24 + $1 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $5 = __wasm_i64_mul($30, $46, $29, $23);
  $1 = $5 + $2 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $9 | 0;
  $2 = $1 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
  $9 = $1;
  $6 = __wasm_i64_mul($30, $46, $32, $42);
  $5 = i64toi32_i32$HIGH_BITS;
  $12 = __wasm_i64_mul($25, $45, $29, $23);
  $1 = $12 + $6 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $5 | 0;
  $10 = $1 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $12 = $1;
  $1 = $10;
  $10 = ($5 | 0) == ($1 | 0) & $12 >>> 0 < $6 >>> 0 | $1 >>> 0 < $5 >>> 0;
  $5 = $1 + $9 | 0;
  $6 = $2 + $10 | 0;
  $6 = $5 >>> 0 < $1 >>> 0 ? $6 + 1 | 0 : $6;
  $10 = $6;
  $9 = $5;
  $5 = $4 + $12 | 0;
  $6 = 0;
  $1 = $6 + $13 | 0;
  if ($1 >>> 0 < $6 >>> 0) {
   $5 = $5 + 1 | 0;
  }
  $12 = $1;
  $2 = $1;
  $1 = $5;
  $2 = ($4 | 0) == ($1 | 0) & $2 >>> 0 < $13 >>> 0 | $1 >>> 0 < $4 >>> 0;
  $4 = $9 + $2 | 0;
  if ($4 >>> 0 < $2 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $13 = $4;
  $6 = $1;
  $5 = ($17 | 0) == ($16 | 0) & $34 >>> 0 < $44 >>> 0 | $16 >>> 0 < $17 >>> 0;
  $9 = $5 + (($17 | 0) == ($33 | 0) & $44 >>> 0 < $43 >>> 0 | $17 >>> 0 < $33 >>> 0) | 0;
  $9 >>> 0 < $5 >>> 0;
  $9 = $9 + (($3 | 0) == ($16 | 0) & $26 >>> 0 < $34 >>> 0 | $3 >>> 0 < $16 >>> 0) | 0;
  $4 = $3;
  $3 = $3 + $12 | 0;
  $6 = $6 + $9 | 0;
  $6 = $3 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
  $17 = $3;
  $2 = $6;
  $1 = ($1 | 0) == ($2 | 0) & $3 >>> 0 < $12 >>> 0 | $2 >>> 0 < $1 >>> 0;
  $3 = $1 + $13 | 0;
  if ($3 >>> 0 < $1 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $1 = $2;
  $5 = $10;
  $10 = $3;
  $9 = 0;
  $3 = ($19 | 0) == ($35 | 0) & $28 >>> 0 < $27 >>> 0 | $35 >>> 0 < $19 >>> 0;
  $4 = $3 + (($19 | 0) == ($21 | 0) & $27 >>> 0 < $41 >>> 0 | $19 >>> 0 < $21 >>> 0) | 0;
  if ($4 >>> 0 < $3 >>> 0) {
   $9 = 1;
  }
  $3 = $4 + $17 | 0;
  $6 = $1 + $9 | 0;
  $6 = $3 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
  $1 = $3;
  $4 = $6;
  $1 = ($2 | 0) == ($4 | 0) & $1 >>> 0 < $17 >>> 0 | $4 >>> 0 < $2 >>> 0;
  $2 = $10 + $1 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $5 = $5 + 1 | 0;
  }
  $1 = $2;
  $2 = $5;
  label$13 : {
   if ($2 & 65536) {
    $18 = $18 + 1 | 0;
    break label$13;
   }
   $17 = $15 >>> 31;
   $5 = $2 << 1 | $1 >>> 31;
   $1 = $1 << 1 | $4 >>> 31;
   $2 = $5;
   $5 = $4 << 1 | $3 >>> 31;
   $3 = $3 << 1 | $8 >>> 31;
   $4 = $5;
   $6 = $20;
   $5 = $15 << 1 | $6 >>> 31;
   $20 = $6 << 1;
   $15 = $5;
   $5 = $7;
   $10 = $8 << 1 | $5 >>> 31;
   $7 = $5 << 1 | $17;
   $8 = $10;
  }
  if (($18 | 0) >= 32767) {
   $14 = $14 | 2147418112;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  label$16 : {
   if (($18 | 0) <= 0) {
    $5 = 1 - $18 | 0;
    if ($5 >>> 0 <= 127) {
     __lshrti3($11 + 16 | 0, $20, $15, $7, $8, $5);
     $6 = $18 + 127 | 0;
     __ashlti3($11 + 32 | 0, $3, $4, $1, $2, $6);
     __ashlti3($11 + 48 | 0, $20, $15, $7, $8, $6);
     __lshrti3($11, $3, $4, $1, $2, $5);
     $20 = (HEAP32[$11 + 48 >> 2] | HEAP32[$11 + 56 >> 2]) != 0 | (HEAP32[$11 + 52 >> 2] | HEAP32[$11 + 60 >> 2]) != 0 | (HEAP32[$11 + 32 >> 2] | HEAP32[$11 + 16 >> 2]);
     $15 = HEAP32[$11 + 36 >> 2] | HEAP32[$11 + 20 >> 2];
     $7 = HEAP32[$11 + 40 >> 2] | HEAP32[$11 + 24 >> 2];
     $8 = HEAP32[$11 + 44 >> 2] | HEAP32[$11 + 28 >> 2];
     $3 = HEAP32[$11 >> 2];
     $4 = HEAP32[$11 + 4 >> 2];
     $2 = HEAP32[$11 + 12 >> 2];
     $1 = HEAP32[$11 + 8 >> 2];
     break label$16;
    }
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $2 = $2 & 65535 | $18 << 16;
  }
  $22 = $1 | $22;
  $14 = $2 | $14;
  if (!(!$7 & ($8 | 0) == -2147483648 ? !($15 | $20) : ($8 | 0) > -1 ? 1 : ($8 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0)) {
   $6 = $14;
   $9 = $4;
   $1 = $3 + 1 | 0;
   if ($1 >>> 0 < 1) {
    $9 = $9 + 1 | 0;
   }
   $2 = $9;
   $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
   $4 = $3 + $22 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $6 = $6 + 1 | 0;
   }
   $22 = $4;
   $14 = $6;
   break label$1;
  }
  if ($7 | $20 | ($8 ^ -2147483648 | $15)) {
   $1 = $3;
   $2 = $4;
   break label$1;
  }
  $9 = $14;
  $5 = $4;
  $1 = $3 & 1;
  $2 = $1 + $3 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $5 = $5 + 1 | 0;
  }
  $1 = $2;
  $2 = $5;
  $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
  $4 = $3 + $22 | 0;
  if ($4 >>> 0 < $3 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $22 = $4;
  $14 = $9;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $22;
 HEAP32[$0 + 12 >> 2] = $14;
 global$0 = $11 + 96 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 128 | 0;
 global$0 = $1;
 HEAP32[$1 + 124 >> 2] = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
 HEAP32[$1 + 120 >> 2] = 0;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 112 | 0, 42240);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 52 >> 2] = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0)) {
     HEAP32[$1 + 120 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 42243);
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 104 | 0, 42252);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 44 >> 2] = $3;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 88 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      break label$2;
     }
     HEAP32[$1 + 120 >> 2] = $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 88 | 0);
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 96 | 0, 42255);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 36 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0)) {
     break label$3;
    }
    $2 = $0 + 8 | 0;
    $3 = HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 2;
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$1 + 88 >> 2] = $4;
      if (!$4) {
       break label$2;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 88 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $3);
    HEAP32[$1 + 120 >> 2] = $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $1 + 88 | 0);
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 80 | 0, 42258);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 28 >> 2] = $3;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0);
   $2 = 0;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 70)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 89);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 76 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   HEAP8[$1 + 75 | 0] = 0;
   $2 = $0 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 2;
   while (1) {
    label$9 : {
     label$10 : {
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       break label$10;
      }
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
       continue;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 - -64 | 0, 42261);
      $5 = HEAP32[$4 + 4 >> 2];
      HEAP32[$1 + 16 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 20 >> 2] = $5;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
       HEAP8[$1 + 75 | 0] = 1;
       break label$10;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 56 | 0, 42264);
      $5 = HEAP32[$4 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 12 >> 2] = $5;
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
       break label$9;
      }
      HEAP8[$1 + 75 | 0] = 2;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $3);
     $2 = $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 76 | 0, $1 + 88 | 0, $1 + 124 | 0, $1 + 75 | 0, $1 + 120 | 0);
     break label$1;
    }
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 88 >> 2] = $4;
    if (!$4) {
     break label$2;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 88 | 0);
    continue;
   }
  }
  $2 = 0;
 }
 global$0 = $1 + 128 | 0;
 return $2;
}
function hexfloat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 $6 = global$0 - 432 | 0;
 global$0 = $6;
 $7 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $7 + 1;
   $7 = HEAPU8[$7 | 0];
   break label$1;
  }
  $7 = __shgetc($1);
 }
 label$3 : {
  label$4 : {
   while (1) {
    label$6 : {
     if (($7 | 0) != 48) {
      if (($7 | 0) != 46) {
       break label$3;
      }
      $7 = HEAP32[$1 + 4 >> 2];
      if ($7 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$6;
      }
      HEAP32[$1 + 4 >> 2] = $7 + 1;
      $7 = HEAPU8[$7 | 0];
      break label$4;
     }
     $7 = HEAP32[$1 + 4 >> 2];
     if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $22 = 1;
      HEAP32[$1 + 4 >> 2] = $7 + 1;
      $7 = HEAPU8[$7 | 0];
      continue;
     }
     $7 = __shgetc($1);
     $22 = 1;
     continue;
    }
    break;
   }
   $7 = __shgetc($1);
  }
  $21 = 1;
  if (($7 | 0) != 48) {
   break label$3;
  }
  while (1) {
   $7 = HEAP32[$1 + 4 >> 2];
   label$10 : {
    if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $7 + 1;
     $7 = HEAPU8[$7 | 0];
     break label$10;
    }
    $7 = __shgetc($1);
   }
   $14 = $14 + -1 | 0;
   $9 = $24 + -1 | 0;
   if ($9 >>> 0 < 4294967295) {
    $14 = $14 + 1 | 0;
   }
   $24 = $9;
   if (($7 | 0) == 48) {
    continue;
   }
   break;
  }
  $22 = 1;
 }
 $9 = 1073676288;
 while (1) {
  label$13 : {
   $25 = $7 | 32;
   label$14 : {
    label$15 : {
     $23 = $7 + -48 | 0;
     if ($23 >>> 0 < 10) {
      break label$15;
     }
     if ($25 + -97 >>> 0 > 5 ? ($7 | 0) != 46 : 0) {
      break label$13;
     }
     if (($7 | 0) != 46) {
      break label$15;
     }
     if ($21) {
      break label$13;
     }
     $21 = 1;
     $24 = $13;
     $14 = $8;
     break label$14;
    }
    $7 = ($7 | 0) > 57 ? $25 + -87 | 0 : $23;
    label$16 : {
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $13 >>> 0 > 7 ? 0 : 1 : 0) {
      $15 = $7 + ($15 << 4) | 0;
      break label$16;
     }
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $13 >>> 0 > 28 ? 0 : 1 : 0) {
      __multf3($6 + 32 | 0, $18, $19, $10, $9, 0, 0, 0, 1073414144);
      __floatsitf($6 + 48 | 0, $7);
      $18 = HEAP32[$6 + 32 >> 2];
      $19 = HEAP32[$6 + 36 >> 2];
      $10 = HEAP32[$6 + 40 >> 2];
      $9 = HEAP32[$6 + 44 >> 2];
      __multf3($6 + 16 | 0, $18, $19, $10, $9, HEAP32[$6 + 48 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 60 >> 2]);
      __addtf3($6, $11, $12, $16, $17, HEAP32[$6 + 16 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 28 >> 2]);
      $16 = HEAP32[$6 + 8 >> 2];
      $17 = HEAP32[$6 + 12 >> 2];
      $11 = HEAP32[$6 >> 2];
      $12 = HEAP32[$6 + 4 >> 2];
      break label$16;
     }
     if (!$7 | $20) {
      break label$16;
     }
     __multf3($6 + 80 | 0, $18, $19, $10, $9, 0, 0, 0, 1073610752);
     __addtf3($6 - -64 | 0, $11, $12, $16, $17, HEAP32[$6 + 80 >> 2], HEAP32[$6 + 84 >> 2], HEAP32[$6 + 88 >> 2], HEAP32[$6 + 92 >> 2]);
     $16 = HEAP32[$6 + 72 >> 2];
     $17 = HEAP32[$6 + 76 >> 2];
     $20 = 1;
     $11 = HEAP32[$6 + 64 >> 2];
     $12 = HEAP32[$6 + 68 >> 2];
    }
    $13 = $13 + 1 | 0;
    if ($13 >>> 0 < 1) {
     $8 = $8 + 1 | 0;
    }
    $22 = 1;
   }
   $7 = HEAP32[$1 + 4 >> 2];
   if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = $7 + 1;
    $7 = HEAPU8[$7 | 0];
    continue;
   }
   $7 = __shgetc($1);
   continue;
  }
  break;
 }
 label$20 : {
  if (!$22) {
   $2 = HEAP32[$1 + 104 >> 2];
   if ($2) {
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
   }
   label$23 : {
    if ($5) {
     if (!$2) {
      break label$23;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     if (!$21 | !$2) {
      break label$23;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     break label$23;
    }
    __shlim($1, 0, 0);
   }
   __extenddftf2($6 + 96 | 0, +($4 | 0) * 0);
   $11 = HEAP32[$6 + 96 >> 2];
   $12 = HEAP32[$6 + 100 >> 2];
   $2 = HEAP32[$6 + 104 >> 2];
   $1 = HEAP32[$6 + 108 >> 2];
   break label$20;
  }
  if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $13 >>> 0 > 7 ? 0 : 1 : 0) {
   $10 = $13;
   $9 = $8;
   while (1) {
    $15 = $15 << 4;
    $23 = ($9 | 0) < 0 ? 1 : ($9 | 0) <= 0 ? $10 >>> 0 >= 7 ? 0 : 1 : 0;
    $20 = $9;
    $9 = $10 + 1 | 0;
    if ($9 >>> 0 < 1) {
     $20 = $20 + 1 | 0;
    }
    $10 = $9;
    $9 = $20;
    if ($23) {
     continue;
    }
    break;
   }
  }
  label$27 : {
   if (($7 | 32) == 112) {
    $10 = scanexp($1, $5);
    $7 = i64toi32_i32$HIGH_BITS;
    $9 = $7;
    if ($10 | ($7 | 0) != -2147483648) {
     break label$27;
    }
    if ($5) {
     $10 = 0;
     $9 = 0;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$27;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     break label$27;
    }
    $11 = 0;
    $12 = 0;
    __shlim($1, 0, 0);
    $2 = 0;
    $1 = 0;
    break label$20;
   }
   $10 = 0;
   $9 = 0;
   if (!HEAP32[$1 + 104 >> 2]) {
    break label$27;
   }
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
  }
  if (!$15) {
   __extenddftf2($6 + 112 | 0, +($4 | 0) * 0);
   $11 = HEAP32[$6 + 112 >> 2];
   $12 = HEAP32[$6 + 116 >> 2];
   $2 = HEAP32[$6 + 120 >> 2];
   $1 = HEAP32[$6 + 124 >> 2];
   break label$20;
  }
  $5 = $21 ? $24 : $13;
  $20 = ($21 ? $14 : $8) << 2 | $5 >>> 30;
  $1 = $10 + ($5 << 2) | 0;
  $5 = $9 + $20 | 0;
  $5 = $1 >>> 0 < $10 >>> 0 ? $5 + 1 | 0 : $5;
  $1 = $1 + -32 | 0;
  $8 = $5 + -1 | 0;
  $8 = $1 >>> 0 < 4294967264 ? $8 + 1 | 0 : $8;
  $13 = $1;
  $1 = 0 - $3 | 0;
  $5 = $13 >>> 0 <= $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) > ($1 | 0) ? 1 : ($8 | 0) >= ($1 | 0) ? $5 : 0) {
   __floatsitf($6 + 160 | 0, $4);
   __multf3($6 + 144 | 0, HEAP32[$6 + 160 >> 2], HEAP32[$6 + 164 >> 2], HEAP32[$6 + 168 >> 2], HEAP32[$6 + 172 >> 2], -1, -1, -1, 2147418111);
   __multf3($6 + 128 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 148 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 156 >> 2], -1, -1, -1, 2147418111);
   HEAP32[12002] = 68;
   $11 = HEAP32[$6 + 128 >> 2];
   $12 = HEAP32[$6 + 132 >> 2];
   $2 = HEAP32[$6 + 136 >> 2];
   $1 = HEAP32[$6 + 140 >> 2];
   break label$20;
  }
  $1 = $3 + -226 | 0;
  $5 = $13 >>> 0 < $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) > ($1 | 0) ? 1 : ($8 | 0) >= ($1 | 0) ? $5 : 0) {
   if (($15 | 0) > -1) {
    while (1) {
     __addtf3($6 + 416 | 0, $11, $12, $16, $17, 0, 0, 0, -1073807360);
     $7 = __getf2($11, $12, $16, $17);
     $5 = ($7 | 0) < 0;
     $1 = $5;
     __addtf3($6 + 400 | 0, $11, $12, $16, $17, $1 ? $11 : HEAP32[$6 + 416 >> 2], $1 ? $12 : HEAP32[$6 + 420 >> 2], $1 ? $16 : HEAP32[$6 + 424 >> 2], $1 ? $17 : HEAP32[$6 + 428 >> 2]);
     $14 = $8 + -1 | 0;
     $1 = $13 + -1 | 0;
     if ($1 >>> 0 < 4294967295) {
      $14 = $14 + 1 | 0;
     }
     $13 = $1;
     $8 = $14;
     $16 = HEAP32[$6 + 408 >> 2];
     $17 = HEAP32[$6 + 412 >> 2];
     $11 = HEAP32[$6 + 400 >> 2];
     $12 = HEAP32[$6 + 404 >> 2];
     $15 = $15 << 1 | ($7 | 0) > -1;
     if (($15 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   $1 = $3;
   $14 = ($13 - $1 | 0) + 32 | 0;
   $8 = $8 - (($1 >> 31) + ($13 >>> 0 < $1 >>> 0) | 0) | 0;
   $3 = $14;
   $1 = $3;
   $5 = ($1 | 0) > 0 ? $1 : 0;
   $7 = $2;
   $8 = $1 >>> 0 < 32 ? $8 + 1 | 0 : $8;
   $1 = $7 >> 31;
   $1 = (($8 | 0) < ($1 | 0) ? 1 : ($8 | 0) <= ($1 | 0) ? $3 >>> 0 >= $7 >>> 0 ? 0 : 1 : 0) ? $5 : $7;
   label$35 : {
    if (($1 | 0) >= 113) {
     __floatsitf($6 + 384 | 0, $4);
     $10 = HEAP32[$6 + 392 >> 2];
     $9 = HEAP32[$6 + 396 >> 2];
     $18 = HEAP32[$6 + 384 >> 2];
     $19 = HEAP32[$6 + 388 >> 2];
     $3 = 0;
     $2 = 0;
     break label$35;
    }
    __floatsitf($6 + 336 | 0, $4);
    __extenddftf2($6 + 352 | 0, scalbn(1, 144 - $1 | 0));
    $18 = HEAP32[$6 + 336 >> 2];
    $19 = HEAP32[$6 + 340 >> 2];
    $10 = HEAP32[$6 + 344 >> 2];
    $9 = HEAP32[$6 + 348 >> 2];
    copysignl($6 + 368 | 0, HEAP32[$6 + 352 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2], HEAP32[$6 + 364 >> 2], $18, $19, $10, $9);
    $26 = HEAP32[$6 + 376 >> 2];
    $27 = HEAP32[$6 + 380 >> 2];
    $3 = HEAP32[$6 + 368 >> 2];
    $2 = HEAP32[$6 + 372 >> 2];
   }
   $4 = $6 + 320 | 0;
   $1 = !($15 & 1) & ((__letf2($11, $12, $16, $17, 0, 0, 0, 0) | 0) != 0 & ($1 | 0) < 32);
   __floatunsitf($4, $1 + $15 | 0);
   __multf3($6 + 304 | 0, $18, $19, $10, $9, HEAP32[$6 + 320 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 332 >> 2]);
   __multf3($6 + 288 | 0, $1 ? 0 : $11, $1 ? 0 : $12, $1 ? 0 : $16, $1 ? 0 : $17, $18, $19, $10, $9);
   __addtf3($6 + 272 | 0, HEAP32[$6 + 304 >> 2], HEAP32[$6 + 308 >> 2], HEAP32[$6 + 312 >> 2], HEAP32[$6 + 316 >> 2], $3, $2, $26, $27);
   __addtf3($6 + 256 | 0, HEAP32[$6 + 288 >> 2], HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2], HEAP32[$6 + 272 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 284 >> 2]);
   __subtf3($6 + 240 | 0, HEAP32[$6 + 256 >> 2], HEAP32[$6 + 260 >> 2], HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2], $3, $2, $26, $27);
   $4 = HEAP32[$6 + 240 >> 2];
   $3 = HEAP32[$6 + 244 >> 2];
   $2 = HEAP32[$6 + 248 >> 2];
   $1 = HEAP32[$6 + 252 >> 2];
   if (!__letf2($4, $3, $2, $1, 0, 0, 0, 0)) {
    HEAP32[12002] = 68;
   }
   scalbnl($6 + 224 | 0, $4, $3, $2, $1, $13);
   $11 = HEAP32[$6 + 224 >> 2];
   $12 = HEAP32[$6 + 228 >> 2];
   $2 = HEAP32[$6 + 232 >> 2];
   $1 = HEAP32[$6 + 236 >> 2];
   break label$20;
  }
  __floatsitf($6 + 208 | 0, $4);
  __multf3($6 + 192 | 0, HEAP32[$6 + 208 >> 2], HEAP32[$6 + 212 >> 2], HEAP32[$6 + 216 >> 2], HEAP32[$6 + 220 >> 2], 0, 0, 0, 65536);
  __multf3($6 + 176 | 0, HEAP32[$6 + 192 >> 2], HEAP32[$6 + 196 >> 2], HEAP32[$6 + 200 >> 2], HEAP32[$6 + 204 >> 2], 0, 0, 0, 65536);
  HEAP32[12002] = 68;
  $11 = HEAP32[$6 + 176 >> 2];
  $12 = HEAP32[$6 + 180 >> 2];
  $2 = HEAP32[$6 + 184 >> 2];
  $1 = HEAP32[$6 + 188 >> 2];
 }
 HEAP32[$0 >> 2] = $11;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 global$0 = $6 + 432 | 0;
}
function ModelControlBase__myPaintGL_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, wasm2js_f64$0 = 0, wasm2js_f64$1 = 0, wasm2js_i32$0 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 label$1 : {
  if ($1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 8 >> 2];
  $5 = HEAP32[$2 + 124 >> 2];
  label$2 : {
   if (!$5) {
    break label$2;
   }
   $7 = HEAP32[$5 + 12 >> 2];
   $5 = HEAP32[$5 + 8 >> 2];
   if (($7 | 0) == ($5 | 0)) {
    break label$2;
   }
   $7 = HEAP32[$2 + 132 >> 2];
   if (($7 | 0) == -1) {
    break label$2;
   }
   $3 = HEAP32[$5 + ($7 << 2) >> 2];
  }
  $8 = HEAPF32[$2 + 68 >> 2];
  $10 = HEAPF32[$2 - -64 >> 2];
  $11 = HEAPF32[$2 + 60 >> 2];
  label$3 : {
   label$4 : {
    if (!$3) {
     break label$4;
    }
    $2 = HEAP32[$0 + 12 >> 2];
    if (($2 | 0) < 0) {
     break label$4;
    }
    $5 = HEAP32[11988];
    if (HEAP32[(HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[HEAP32[$3 >> 2] + ($2 << 3) >> 2], 652) >> 2], 152) | 0) + 64 >> 2] < 1) {
     break label$4;
    }
    glClearColor(Math_fround(Math_fround(.25)), Math_fround(Math_fround(.25)), Math_fround(Math_fround(.25)), Math_fround(Math_fround(1)));
    break label$3;
   }
   glClearColor(Math_fround($11), Math_fround($10), Math_fround($8), Math_fround(Math_fround(1)));
  }
  glClear(16640);
  if (!HEAPU8[$0 + 1996 | 0]) {
   break label$1;
  }
  ModelControlBase__drawAxisArrows_28_29($0);
 }
 $5 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$5 + 312 >> 2];
 $2 = $5;
 $12 = HEAP32[$2 + 168 >> 2];
 $7 = $4 - -64 | 0;
 $6 = $7;
 HEAP32[$6 >> 2] = HEAP32[$2 + 164 >> 2];
 HEAP32[$6 + 4 >> 2] = $12;
 $6 = HEAP32[$2 + 160 >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$2 + 156 >> 2];
 HEAP32[$4 + 60 >> 2] = $6;
 $6 = HEAP32[$2 + 152 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$2 + 148 >> 2];
 HEAP32[$4 + 52 >> 2] = $6;
 $6 = HEAP32[$2 + 144 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$2 + 140 >> 2];
 HEAP32[$4 + 44 >> 2] = $6;
 $6 = HEAP32[$2 + 136 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 132 >> 2];
 HEAP32[$4 + 36 >> 2] = $6;
 $6 = HEAP32[$2 + 128 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$2 + 124 >> 2];
 HEAP32[$4 + 28 >> 2] = $6;
 $6 = HEAP32[$2 + 120 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$2 + 116 >> 2];
 HEAP32[$4 + 20 >> 2] = $6;
 $6 = HEAP32[$2 + 112 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 108 >> 2];
 HEAP32[$4 + 12 >> 2] = $6;
 HEAP32[$4 + 72 >> 2] = 0;
 $9 = +($3 | 0) / 100;
 $9 = (wasm2js_f64$0 = $9 * $9, wasm2js_f64$1 = pow($9) + -2, wasm2js_i32$0 = $9 <= 1, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
 $3 = HEAP32[$2 + 180 >> 2];
 label$5 : {
  if ($3 >>> 0 < HEAPU32[$2 + 184 >> 2]) {
   $2 = HEAP32[$4 + 12 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $2 = HEAP32[$7 + 4 >> 2];
   HEAP32[$3 + 56 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$3 + 60 >> 2] = $2;
   $2 = HEAP32[$4 + 60 >> 2];
   HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 56 >> 2];
   HEAP32[$3 + 52 >> 2] = $2;
   $2 = HEAP32[$4 + 52 >> 2];
   HEAP32[$3 + 40 >> 2] = HEAP32[$4 + 48 >> 2];
   HEAP32[$3 + 44 >> 2] = $2;
   $2 = HEAP32[$4 + 44 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 40 >> 2];
   HEAP32[$3 + 36 >> 2] = $2;
   $2 = HEAP32[$4 + 36 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$3 + 28 >> 2] = $2;
   $2 = HEAP32[$4 + 28 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = $2;
   $2 = HEAP32[$4 + 20 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$3 + 12 >> 2] = $2;
   HEAP32[$3 + 64 >> 2] = HEAP32[$4 + 72 >> 2];
   HEAP32[$5 + 180 >> 2] = HEAP32[$5 + 180 >> 2] + 68;
   break label$5;
  }
  void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($5 + 176 | 0, $4 + 8 | 0);
 }
 $8 = Math_fround($9);
 MatStack__scale_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, $8, $8, $8);
 Mat4__translate_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, HEAPF32[$0 + 592 >> 2], HEAPF32[$0 + 596 >> 2], HEAPF32[$0 + 600 >> 2]);
 Mat4__translate_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(Math_fround(HEAPF32[$0 + 580 >> 2] + HEAPF32[$0 + 568 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 584 >> 2] + HEAPF32[$0 + 572 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 588 >> 2] + HEAPF32[$0 + 576 >> 2]) * Math_fround(-.5)));
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1);
 $5 = HEAP32[$0 + 4 >> 2];
 $7 = HEAP32[$5 + 180 >> 2];
 if (($7 | 0) != HEAP32[$5 + 176 >> 2]) {
  label$8 : {
   $3 = $7 + -68 | 0;
   $2 = $5;
   if (($3 | 0) != ($2 + 108 | 0)) {
    $2 = $3;
    $6 = HEAP32[$2 + 4 >> 2];
    HEAP32[$5 + 108 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$5 + 112 >> 2] = $6;
    $6 = HEAP32[$2 + 60 >> 2];
    HEAP32[$5 + 164 >> 2] = HEAP32[$2 + 56 >> 2];
    HEAP32[$5 + 168 >> 2] = $6;
    $6 = HEAP32[$2 + 52 >> 2];
    HEAP32[$5 + 156 >> 2] = HEAP32[$2 + 48 >> 2];
    HEAP32[$5 + 160 >> 2] = $6;
    $6 = HEAP32[$2 + 44 >> 2];
    HEAP32[$5 + 148 >> 2] = HEAP32[$2 + 40 >> 2];
    HEAP32[$5 + 152 >> 2] = $6;
    $6 = HEAP32[$2 + 36 >> 2];
    HEAP32[$5 + 140 >> 2] = HEAP32[$2 + 32 >> 2];
    HEAP32[$5 + 144 >> 2] = $6;
    $6 = HEAP32[$2 + 28 >> 2];
    HEAP32[$5 + 132 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[$5 + 136 >> 2] = $6;
    $6 = HEAP32[$2 + 20 >> 2];
    HEAP32[$5 + 124 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$5 + 128 >> 2] = $6;
    $6 = HEAP32[$2 + 12 >> 2];
    HEAP32[$5 + 116 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$5 + 120 >> 2] = $6;
    $2 = HEAP32[$0 + 4 >> 2];
   }
   $7 = HEAP32[$7 + -4 >> 2];
   HEAP32[$5 + 180 >> 2] = $3;
   HEAP32[$5 + 172 >> 2] = $7;
   $6 = HEAP32[$2 + 168 >> 2];
   $7 = $4 - -64 | 0;
   $3 = $7;
   HEAP32[$3 >> 2] = HEAP32[$2 + 164 >> 2];
   HEAP32[$3 + 4 >> 2] = $6;
   $3 = HEAP32[$2 + 160 >> 2];
   HEAP32[$4 + 56 >> 2] = HEAP32[$2 + 156 >> 2];
   HEAP32[$4 + 60 >> 2] = $3;
   $3 = HEAP32[$2 + 152 >> 2];
   HEAP32[$4 + 48 >> 2] = HEAP32[$2 + 148 >> 2];
   HEAP32[$4 + 52 >> 2] = $3;
   $3 = HEAP32[$2 + 144 >> 2];
   HEAP32[$4 + 40 >> 2] = HEAP32[$2 + 140 >> 2];
   HEAP32[$4 + 44 >> 2] = $3;
   $3 = HEAP32[$2 + 136 >> 2];
   HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 132 >> 2];
   HEAP32[$4 + 36 >> 2] = $3;
   $3 = HEAP32[$2 + 128 >> 2];
   HEAP32[$4 + 24 >> 2] = HEAP32[$2 + 124 >> 2];
   HEAP32[$4 + 28 >> 2] = $3;
   $3 = HEAP32[$2 + 120 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$2 + 116 >> 2];
   HEAP32[$4 + 20 >> 2] = $3;
   $3 = HEAP32[$2 + 112 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 108 >> 2];
   HEAP32[$4 + 12 >> 2] = $3;
   HEAP32[$4 + 72 >> 2] = 0;
   $3 = HEAP32[$2 + 180 >> 2];
   label$10 : {
    if ($3 >>> 0 < HEAPU32[$2 + 184 >> 2]) {
     $5 = HEAP32[$4 + 12 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = $5;
     $5 = HEAP32[$7 + 4 >> 2];
     HEAP32[$3 + 56 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$3 + 60 >> 2] = $5;
     $5 = HEAP32[$4 + 60 >> 2];
     HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 56 >> 2];
     HEAP32[$3 + 52 >> 2] = $5;
     $5 = HEAP32[$4 + 52 >> 2];
     HEAP32[$3 + 40 >> 2] = HEAP32[$4 + 48 >> 2];
     HEAP32[$3 + 44 >> 2] = $5;
     $5 = HEAP32[$4 + 44 >> 2];
     HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 40 >> 2];
     HEAP32[$3 + 36 >> 2] = $5;
     $5 = HEAP32[$4 + 36 >> 2];
     HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
     HEAP32[$3 + 28 >> 2] = $5;
     $5 = HEAP32[$4 + 28 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
     HEAP32[$3 + 20 >> 2] = $5;
     $5 = HEAP32[$4 + 20 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
     HEAP32[$3 + 12 >> 2] = $5;
     HEAP32[$3 + 64 >> 2] = HEAP32[$4 + 72 >> 2];
     HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 180 >> 2] + 68;
     break label$10;
    }
    void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($2 + 176 | 0, $4 + 8 | 0);
   }
   $8 = Math_fround($9 * 4);
   MatStack__scale_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, $8, $8, $8);
   Mat4__translate_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(Math_fround(HEAPF32[$0 + 1972 >> 2] + HEAPF32[$0 + 1960 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 1976 >> 2] + HEAPF32[$0 + 1964 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 1980 >> 2] + HEAPF32[$0 + 1968 >> 2]) * Math_fround(-.5)));
   BuildControlBase__drawTargets_28bool_29($0 + 700 | 0, $1);
   $2 = HEAP32[$0 + 4 >> 2];
   $5 = HEAP32[$2 + 180 >> 2];
   if (($5 | 0) == HEAP32[$2 + 176 >> 2]) {
    break label$8;
   }
   $1 = $5 + -68 | 0;
   if (($1 | 0) != ($2 + 108 | 0)) {
    $0 = $1;
    $3 = HEAP32[$0 + 4 >> 2];
    HEAP32[$2 + 108 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$2 + 112 >> 2] = $3;
    $3 = HEAP32[$0 + 60 >> 2];
    HEAP32[$2 + 164 >> 2] = HEAP32[$0 + 56 >> 2];
    HEAP32[$2 + 168 >> 2] = $3;
    $3 = HEAP32[$0 + 52 >> 2];
    HEAP32[$2 + 156 >> 2] = HEAP32[$0 + 48 >> 2];
    HEAP32[$2 + 160 >> 2] = $3;
    $3 = HEAP32[$0 + 44 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$0 + 40 >> 2];
    HEAP32[$2 + 152 >> 2] = $3;
    $3 = HEAP32[$0 + 36 >> 2];
    HEAP32[$2 + 140 >> 2] = HEAP32[$0 + 32 >> 2];
    HEAP32[$2 + 144 >> 2] = $3;
    $3 = HEAP32[$0 + 28 >> 2];
    HEAP32[$2 + 132 >> 2] = HEAP32[$0 + 24 >> 2];
    HEAP32[$2 + 136 >> 2] = $3;
    $3 = HEAP32[$0 + 20 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$0 + 16 >> 2];
    HEAP32[$2 + 128 >> 2] = $3;
    $3 = HEAP32[$0 + 12 >> 2];
    HEAP32[$2 + 116 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$2 + 120 >> 2] = $3;
   }
   $0 = HEAP32[$5 + -4 >> 2];
   HEAP32[$2 + 180 >> 2] = $1;
   HEAP32[$2 + 172 >> 2] = $0;
   global$0 = $4 + 80 | 0;
   return;
  }
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function BaseGLWidget__rotate_28BaseGLWidget__EAxis_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0;
 $4 = global$0 - 192 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = 0;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 48 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $5 = $0 + 108 | 0;
 if (($4 | 0) != ($5 | 0)) {
  $10 = HEAP32[$5 + 60 >> 2];
  HEAP32[$4 + 56 >> 2] = HEAP32[$5 + 56 >> 2];
  HEAP32[$4 + 60 >> 2] = $10;
  $10 = HEAP32[$5 + 52 >> 2];
  HEAP32[$4 + 48 >> 2] = HEAP32[$5 + 48 >> 2];
  HEAP32[$4 + 52 >> 2] = $10;
  $10 = HEAP32[$5 + 44 >> 2];
  HEAP32[$4 + 40 >> 2] = HEAP32[$5 + 40 >> 2];
  HEAP32[$4 + 44 >> 2] = $10;
  $10 = HEAP32[$5 + 36 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$5 + 32 >> 2];
  HEAP32[$4 + 36 >> 2] = $10;
  $10 = HEAP32[$5 + 28 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$5 + 24 >> 2];
  HEAP32[$4 + 28 >> 2] = $10;
  $10 = HEAP32[$5 + 20 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$5 + 16 >> 2];
  HEAP32[$4 + 20 >> 2] = $10;
  $10 = HEAP32[$5 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = $10;
  $10 = HEAP32[$5 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$4 + 4 >> 2] = $10;
 }
 HEAP32[$0 + 108 >> 2] = 1065353216;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 1065353216;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 1065353216;
 HEAP32[$0 + 128 >> 2] = 1065353216;
 HEAP32[$0 + 132 >> 2] = 0;
 label$2 : {
  if ($1 >>> 0 > 5) {
   break label$2;
  }
  $28 = +($3 | 0);
  $11 = +($2 | 0);
  label$3 : {
   switch ($1 - 1 | 0) {
   default:
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(1), Math_fround(0), Math_fround(0));
    break label$2;
   case 0:
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(0), Math_fround(1), Math_fround(0));
    break label$2;
   case 1:
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(0), Math_fround(0), Math_fround(1));
    break label$2;
   case 2:
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(0), Math_fround(1), Math_fround(0));
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($28), Math_fround(1), Math_fround(0), Math_fround(0));
    break label$2;
   case 3:
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(0), Math_fround(0), Math_fround(1));
    Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($28), Math_fround(1), Math_fround(0), Math_fround(0));
    break label$2;
   case 4:
    break label$3;
   }
  }
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($11), Math_fround(0), Math_fround(1), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($5, Math_fround($28), Math_fround(0), Math_fround(0), Math_fround(1));
 }
 $0 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 72 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 76 >> 2] = $0;
 $0 = HEAP32[$5 + 20 >> 2];
 HEAP32[$4 + 80 >> 2] = HEAP32[$5 + 16 >> 2];
 HEAP32[$4 + 84 >> 2] = $0;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAP32[$4 + 88 >> 2] = HEAP32[$5 + 24 >> 2];
 HEAP32[$4 + 92 >> 2] = $0;
 $0 = HEAP32[$5 + 36 >> 2];
 HEAP32[$4 + 96 >> 2] = HEAP32[$5 + 32 >> 2];
 HEAP32[$4 + 100 >> 2] = $0;
 $0 = HEAP32[$5 + 44 >> 2];
 HEAP32[$4 + 104 >> 2] = HEAP32[$5 + 40 >> 2];
 HEAP32[$4 + 108 >> 2] = $0;
 $0 = HEAP32[$5 + 52 >> 2];
 HEAP32[$4 + 112 >> 2] = HEAP32[$5 + 48 >> 2];
 HEAP32[$4 + 116 >> 2] = $0;
 $0 = HEAP32[$5 + 60 >> 2];
 HEAP32[$4 + 120 >> 2] = HEAP32[$5 + 56 >> 2];
 HEAP32[$4 + 124 >> 2] = $0;
 $0 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 64 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 68 >> 2] = $0;
 $12 = HEAPF32[$4 + 12 >> 2];
 $13 = HEAPF32[$4 + 8 >> 2];
 $14 = HEAPF32[$4 >> 2];
 $15 = HEAPF32[$4 + 4 >> 2];
 $16 = HEAPF32[$4 + 28 >> 2];
 $17 = HEAPF32[$4 + 24 >> 2];
 $18 = HEAPF32[$4 + 16 >> 2];
 $19 = HEAPF32[$4 + 20 >> 2];
 $20 = HEAPF32[$4 + 44 >> 2];
 $21 = HEAPF32[$4 + 40 >> 2];
 $22 = HEAPF32[$4 + 32 >> 2];
 $23 = HEAPF32[$4 + 36 >> 2];
 $24 = HEAPF32[$4 + 60 >> 2];
 $25 = HEAPF32[$4 + 56 >> 2];
 $26 = HEAPF32[$4 + 48 >> 2];
 $27 = HEAPF32[$4 + 52 >> 2];
 HEAP32[$4 + 184 >> 2] = 0;
 HEAP32[$4 + 188 >> 2] = 0;
 HEAP32[$4 + 176 >> 2] = 0;
 HEAP32[$4 + 180 >> 2] = 0;
 HEAP32[$4 + 168 >> 2] = 0;
 HEAP32[$4 + 172 >> 2] = 0;
 HEAP32[$4 + 160 >> 2] = 0;
 HEAP32[$4 + 164 >> 2] = 0;
 HEAP32[$4 + 152 >> 2] = 0;
 HEAP32[$4 + 156 >> 2] = 0;
 HEAP32[$4 + 144 >> 2] = 0;
 HEAP32[$4 + 148 >> 2] = 0;
 HEAP32[$4 + 136 >> 2] = 0;
 HEAP32[$4 + 140 >> 2] = 0;
 $6 = HEAPF32[$4 + 64 >> 2];
 $7 = HEAPF32[$4 + 80 >> 2];
 $8 = HEAPF32[$4 + 96 >> 2];
 $9 = HEAPF32[$4 + 112 >> 2];
 HEAPF32[$4 + 176 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26 * $6) + Math_fround(0)) + Math_fround($27 * $7)) + Math_fround($25 * $8)) + Math_fround($24 * $9);
 HEAPF32[$4 + 160 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22 * $6) + Math_fround(0)) + Math_fround($23 * $7)) + Math_fround($21 * $8)) + Math_fround($20 * $9);
 HEAPF32[$4 + 144 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround(0)) + Math_fround($19 * $7)) + Math_fround($17 * $8)) + Math_fround($16 * $9);
 HEAPF32[$4 + 128 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $6) + Math_fround(0)) + Math_fround($15 * $7)) + Math_fround($13 * $8)) + Math_fround($12 * $9);
 $6 = HEAPF32[$4 + 68 >> 2];
 $7 = HEAPF32[$4 + 84 >> 2];
 $8 = HEAPF32[$4 + 100 >> 2];
 $9 = HEAPF32[$4 + 116 >> 2];
 HEAPF32[$4 + 164 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22 * $6) + Math_fround(0)) + Math_fround($23 * $7)) + Math_fround($21 * $8)) + Math_fround($20 * $9);
 HEAPF32[$4 + 148 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround(0)) + Math_fround($19 * $7)) + Math_fround($17 * $8)) + Math_fround($16 * $9);
 HEAPF32[$4 + 132 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $6) + Math_fround(0)) + Math_fround($15 * $7)) + Math_fround($13 * $8)) + Math_fround($12 * $9);
 HEAPF32[$4 + 180 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26 * $6) + Math_fround(0)) + Math_fround($27 * $7)) + Math_fround($25 * $8)) + Math_fround($24 * $9);
 $6 = HEAPF32[$4 + 72 >> 2];
 $7 = HEAPF32[$4 + 88 >> 2];
 $8 = HEAPF32[$4 + 104 >> 2];
 $9 = HEAPF32[$4 + 120 >> 2];
 HEAPF32[$4 + 184 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26 * $6) + Math_fround(0)) + Math_fround($27 * $7)) + Math_fround($25 * $8)) + Math_fround($24 * $9);
 HEAPF32[$4 + 168 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22 * $6) + Math_fround(0)) + Math_fround($23 * $7)) + Math_fround($21 * $8)) + Math_fround($20 * $9);
 HEAPF32[$4 + 152 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround(0)) + Math_fround($19 * $7)) + Math_fround($17 * $8)) + Math_fround($16 * $9);
 HEAPF32[$4 + 136 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $6) + Math_fround(0)) + Math_fround($15 * $7)) + Math_fround($13 * $8)) + Math_fround($12 * $9);
 $6 = HEAPF32[$4 + 76 >> 2];
 $7 = HEAPF32[$4 + 92 >> 2];
 $8 = HEAPF32[$4 + 108 >> 2];
 $9 = HEAPF32[$4 + 124 >> 2];
 HEAPF32[$4 + 140 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $6) + Math_fround(0)) + Math_fround($15 * $7)) + Math_fround($13 * $8)) + Math_fround($12 * $9);
 HEAPF32[$4 + 156 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround(0)) + Math_fround($19 * $7)) + Math_fround($17 * $8)) + Math_fround($16 * $9);
 HEAPF32[$4 + 172 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22 * $6) + Math_fround(0)) + Math_fround($23 * $7)) + Math_fround($21 * $8)) + Math_fround($20 * $9);
 HEAPF32[$4 + 188 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($26 * $6) + Math_fround(0)) + Math_fround($27 * $7)) + Math_fround($25 * $8)) + Math_fround($24 * $9);
 $0 = HEAP32[$4 + 180 >> 2];
 HEAP32[$5 + 48 >> 2] = HEAP32[$4 + 176 >> 2];
 HEAP32[$5 + 52 >> 2] = $0;
 $0 = HEAP32[$4 + 172 >> 2];
 HEAP32[$5 + 40 >> 2] = HEAP32[$4 + 168 >> 2];
 HEAP32[$5 + 44 >> 2] = $0;
 $0 = HEAP32[$4 + 164 >> 2];
 HEAP32[$5 + 32 >> 2] = HEAP32[$4 + 160 >> 2];
 HEAP32[$5 + 36 >> 2] = $0;
 $0 = HEAP32[$4 + 156 >> 2];
 HEAP32[$5 + 24 >> 2] = HEAP32[$4 + 152 >> 2];
 HEAP32[$5 + 28 >> 2] = $0;
 $0 = HEAP32[$4 + 140 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 136 >> 2];
 HEAP32[$5 + 12 >> 2] = $0;
 $0 = HEAP32[$4 + 188 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$4 + 184 >> 2];
 HEAP32[$5 + 60 >> 2] = $0;
 $0 = HEAP32[$4 + 148 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 144 >> 2];
 HEAP32[$5 + 20 >> 2] = $0;
 $0 = HEAP32[$4 + 132 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$4 + 128 >> 2];
 HEAP32[$5 + 4 >> 2] = $0;
 global$0 = $4 + 192 | 0;
}
function PicBucket__loadUnifiedJs_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 $6 = global$0 + -64 | 0;
 global$0 = $6;
 $8 = operator_20new_28unsigned_20long_29(48);
 $2 = $8;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 34962;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 $2 = $2 + 24 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 34962;
 $7 = operator_20new_28unsigned_20long_29(16);
 HEAP32[$7 + 12 >> 2] = $8;
 HEAP32[$7 >> 2] = 17e3;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 glGenBuffers(1, $2 | 0);
 glBindBuffer(HEAP32[$8 + 28 >> 2], HEAP32[$2 >> 2]);
 emscripten_asm_const_iii(7146, 1076, 0) | 0;
 HEAP32[$8 + 32 >> 2] = emscripten_asm_const_iii(7215, 1076, 0);
 $3 = $8 + 36 | 0;
 $2 = HEAP32[$3 >> 2];
 if (!$2) {
  glGenBuffers(1, $3 | 0);
  $2 = HEAP32[$3 >> 2];
 }
 glBindBuffer(HEAP32[$8 + 40 >> 2], $2 | 0);
 emscripten_asm_const_iii(7243, 1076, 0) | 0;
 HEAP32[$8 + 44 >> 2] = emscripten_asm_const_iii(7313, 1076, 0);
 $13 = emscripten_asm_const_iii(7342, 1076, 0) | 0;
 $11 = $0 - -64 | 0;
 $9 = $0 + 68 | 0;
 std____2____tree_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2____map_value_compare_unsigned_20short_2c_20std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2__less_unsigned_20short__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20void____29($11, HEAP32[$9 >> 2]);
 HEAP32[$0 + 64 >> 2] = $9;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 if (($13 | 0) >= 1) {
  $27 = $0 + 68 | 0;
  while (1) {
   HEAP32[$6 + 32 >> 2] = $12;
   $10 = +emscripten_asm_const_dii(7371, 3467, $6 + 32 | 0);
   wasm2js_scratch_store_f64(+$10);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   $3 = wasm2js_scratch_load_i32(0) | 0;
   $2 = $2 & 2147483647;
   label$4 : {
    if (($2 | 0) == 2146435072 & $3 >>> 0 > 0 | $2 >>> 0 > 2146435072) {
     break label$4;
    }
    $1 = operator_20new_28unsigned_20long_29(236);
    $2 = 0;
    HEAP8[$6 + 58 | 0] = 0;
    HEAP8[$6 + 54 | 0] = 0;
    HEAP16[$6 + 56 >> 1] = 0;
    HEAP16[$6 + 52 >> 1] = 0;
    HEAP16[$6 + 48 >> 1] = 0;
    HEAP8[$6 + 50 | 0] = 0;
    $3 = 0;
    $5 = 0;
    $14 = 0;
    $15 = 0;
    $16 = 0;
    $17 = 0;
    $18 = 0;
    $19 = 0;
    $20 = 0;
    $21 = 0;
    $22 = 0;
    $23 = 0;
    $24 = 0;
    $25 = 0;
    $26 = 0;
    if ($10 < 4294967296 & $10 >= 0) {
     $4 = ~~$10 >>> 0;
    } else {
     $4 = 0;
    }
    if ($4) {
     $5 = $4 >>> 15;
     $26 = $4 & 1;
     $15 = $4 >>> 14 & 1;
     $17 = $4 >>> 13 & 1;
     $19 = $4 >>> 12 & 1;
     $20 = $4 >>> 11 & 1;
     $21 = $4 >>> 10 & 1;
     $22 = $4 >>> 9 & 1;
     $23 = $4 >>> 8 & 1;
     $18 = $4 >>> 7 & 1;
     $16 = $4 >>> 6 & 1;
     $14 = $4 >>> 5 & 1;
     $3 = $4 >>> 4 & 1;
     $24 = $4 >>> 2 & 1;
     $25 = $4 >>> 1 & 1;
     $2 = $4 >>> 3 & 1;
    }
    $1 = memset($1, 0, 115);
    HEAP32[$1 + 124 >> 2] = 0;
    HEAP32[$1 + 128 >> 2] = 0;
    HEAP32[$1 + 116 >> 2] = 0;
    HEAP32[$1 + 120 >> 2] = 0;
    HEAP8[$1 + 209 | 0] = $5;
    HEAP8[$1 + 208 | 0] = $3;
    HEAP8[$1 + 207 | 0] = $2;
    HEAP8[$1 + 206 | 0] = $24;
    HEAP8[$1 + 205 | 0] = $25;
    HEAP8[$1 + 204 | 0] = $26;
    HEAP32[$1 + 196 >> 2] = 34963;
    HEAP32[$1 + 200 >> 2] = 0;
    HEAP32[$1 + 188 >> 2] = 0;
    HEAP32[$1 + 192 >> 2] = 0;
    HEAP32[$1 + 180 >> 2] = 0;
    HEAP32[$1 + 184 >> 2] = 34962;
    HEAP32[$1 + 172 >> 2] = 34962;
    HEAP32[$1 + 176 >> 2] = 0;
    HEAP32[$1 + 164 >> 2] = 0;
    HEAP32[$1 + 168 >> 2] = 0;
    HEAP32[$1 + 156 >> 2] = 0;
    HEAP32[$1 + 160 >> 2] = 34962;
    HEAP32[$1 + 148 >> 2] = 34962;
    HEAP32[$1 + 152 >> 2] = 0;
    HEAP32[$1 + 140 >> 2] = 0;
    HEAP32[$1 + 144 >> 2] = 0;
    HEAP32[$1 + 132 >> 2] = 0;
    HEAP32[$1 + 136 >> 2] = 34962;
    HEAP8[$1 + 212 | 0] = HEAPU8[$6 + 58 | 0];
    HEAP16[$1 + 210 >> 1] = HEAPU16[$6 + 56 >> 1];
    HEAP8[$1 + 214 | 0] = $15;
    HEAP8[$1 + 213 | 0] = $14;
    $2 = HEAPU16[$6 + 52 >> 1];
    HEAP8[$1 + 215 | 0] = $2;
    HEAP8[$1 + 216 | 0] = $2 >>> 8;
    HEAP8[$1 + 217 | 0] = HEAPU8[$6 + 54 | 0];
    HEAP8[$1 + 219 | 0] = $17;
    HEAP8[$1 + 218 | 0] = $16;
    HEAP16[$1 + 220 >> 1] = HEAPU16[$6 + 48 >> 1];
    HEAP8[$1 + 222 | 0] = HEAPU8[$6 + 50 | 0];
    HEAP8[$1 + 229 | 0] = 0;
    HEAP8[$1 + 228 | 0] = $23;
    HEAP8[$1 + 227 | 0] = $22;
    HEAP8[$1 + 226 | 0] = $21;
    HEAP8[$1 + 225 | 0] = $20;
    HEAP8[$1 + 224 | 0] = $19;
    HEAP8[$1 + 223 | 0] = $18;
    $2 = HEAPU16[$6 + 46 >> 1];
    HEAP32[$1 + 232 >> 2] = -1;
    HEAP16[$1 + 230 >> 1] = $2;
    $3 = $27;
    label$8 : {
     $2 = HEAP32[$9 >> 2];
     if (!$2) {
      $2 = $9;
      $3 = $2;
      break label$8;
     }
     while (1) {
      $5 = HEAPU16[$2 + 16 >> 1];
      label$11 : {
       if ($5 >>> 0 > $4 >>> 0) {
        $5 = HEAP32[$2 >> 2];
        if ($5) {
         break label$11;
        }
        $3 = $2;
        break label$8;
       }
       if ($5 >>> 0 >= $4 >>> 0) {
        break label$8;
       }
       $3 = $2 + 4 | 0;
       $5 = HEAP32[$2 + 4 >> 2];
       if (!$5) {
        break label$8;
       }
       $2 = $3;
      }
      $3 = $2;
      $2 = $5;
      continue;
     }
    }
    $5 = HEAP32[$3 >> 2];
    if (!$5) {
     $5 = operator_20new_28unsigned_20long_29(24);
     HEAP32[$5 + 20 >> 2] = 0;
     HEAP16[$5 + 16 >> 1] = $4;
     HEAP32[$5 + 8 >> 2] = $2;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[$3 >> 2] = $5;
     $2 = $5;
     $4 = HEAP32[HEAP32[$11 >> 2] >> 2];
     if ($4) {
      HEAP32[$11 >> 2] = $4;
      $2 = HEAP32[$3 >> 2];
     }
     void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$0 + 68 >> 2], $2);
     HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
    }
    $2 = HEAP32[$5 + 20 >> 2];
    HEAP32[$5 + 20 >> 2] = $1;
    if ($2) {
     Mesh___Mesh_28_29($2);
     dlfree($2);
    }
    $3 = $1 + 192 | 0;
    $2 = HEAP32[$3 >> 2];
    if (!$2) {
     glGenBuffers(1, $3 | 0);
     $2 = HEAP32[$3 >> 2];
    }
    glBindBuffer(HEAP32[$1 + 196 >> 2], $2 | 0);
    HEAPF64[$6 + 16 >> 3] = $10;
    emscripten_asm_const_iii(7405, 7482, $6 + 16 | 0) | 0;
    HEAP32[$6 >> 2] = (HEAPU8[$1 + 205 | 0] != 0) << 1 | HEAPU8[$1 + 204 | 0] != 0 | ((HEAPU8[$1 + 207 | 0] != 0) << 1 | HEAPU8[$1 + 206 | 0] != 0) << 2 | ((((HEAPU8[$1 + 225 | 0] != 0) << 1 | HEAPU8[$1 + 226 | 0] != 0) << 6 | ((((HEAPU8[$1 + 209 | 0] != 0) << 1 | HEAPU8[$1 + 214 | 0] != 0) << 2 | (HEAPU8[$1 + 219 | 0] != 0) << 1 | HEAPU8[$1 + 224 | 0] != 0) << 4 | (HEAPU8[$1 + 227 | 0] != 0) << 1 | HEAPU8[$1 + 228 | 0] != 0) << 4 | (HEAPU8[$1 + 213 | 0] != 0) << 1 | HEAPU8[$1 + 208 | 0] != 0) << 4 & 65328 | ((HEAPU8[$1 + 223 | 0] != 0) << 1 | HEAPU8[$1 + 218 | 0] != 0) << 6);
    $2 = emscripten_asm_const_iii(7484, 7510, $6 | 0) | 0;
    HEAP32[$1 + 116 >> 2] = 2;
    HEAP32[$1 + 200 >> 2] = $2;
    HEAP8[$1 + 111 | 0] = 1;
    HEAP8[$1 + 108 | 0] = 1;
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
    HEAP32[$1 >> 2] = $8;
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$1 + 4 >> 2] = $7;
    if (!$2) {
     break label$4;
    }
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $3 + -1;
    if ($3) {
     break label$4;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
    std____2____shared_weak_count____release_weak_28_29($2);
   }
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($13 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 7512, 7), HEAP32[$0 + 72 >> 2]), 7520, 7);
 $3 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
 HEAP32[$6 + 56 >> 2] = $3;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
 $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($6 + 56 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
 $3 = HEAP32[$6 + 56 >> 2];
 $5 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 PicBucket__distinctMeshes_28ProgressCallback__29($0);
 $0 = HEAP32[$7 + 4 >> 2];
 HEAP32[$7 + 4 >> 2] = $0 + -1;
 if (!$0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7);
  std____2____shared_weak_count____release_weak_28_29($7);
 }
 global$0 = $6 - -64 | 0;
}
function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $7 = global$0 - 560 | 0;
 global$0 = $7;
 $6 = $2;
 $2 = ($2 + -3 | 0) / 24 | 0;
 $18 = ($2 | 0) > 0 ? $2 : 0;
 $15 = $6 + Math_imul($18, -24) | 0;
 $13 = HEAP32[($4 << 2) + 17936 >> 2];
 $9 = $3 + -1 | 0;
 if (($13 + $9 | 0) >= 0) {
  $6 = $3 + $13 | 0;
  $2 = $18 - $9 | 0;
  while (1) {
   HEAPF64[($7 + 320 | 0) + ($8 << 3) >> 3] = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 17952 >> 2];
   $2 = $2 + 1 | 0;
   $8 = $8 + 1 | 0;
   if (($6 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 $11 = $15 + -24 | 0;
 $6 = 0;
 $8 = ($3 | 0) < 1;
 while (1) {
  label$6 : {
   if ($8) {
    $5 = 0;
    break label$6;
   }
   $10 = $6 + $9 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($10 - $2 << 3) >> 3];
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($6 << 3) + $7 >> 3] = $5;
  $2 = ($6 | 0) < ($13 | 0);
  $6 = $6 + 1 | 0;
  if ($2) {
   continue;
  }
  break;
 }
 $23 = 23 - $11 | 0;
 $19 = 24 - $11 | 0;
 $6 = $13;
 label$9 : {
  while (1) {
   $5 = HEAPF64[($6 << 3) + $7 >> 3];
   $2 = 0;
   $8 = $6;
   $16 = ($6 | 0) < 1;
   if (!$16) {
    while (1) {
     $9 = ($7 + 480 | 0) + ($2 << 2) | 0;
     $12 = $5;
     $5 = $5 * 5.960464477539063e-8;
     label$14 : {
      if (Math_abs($5) < 2147483648) {
       $10 = ~~$5;
       break label$14;
      }
      $10 = -2147483648;
     }
     $5 = +($10 | 0);
     $12 = $12 + $5 * -16777216;
     label$13 : {
      if (Math_abs($12) < 2147483648) {
       $10 = ~~$12;
       break label$13;
      }
      $10 = -2147483648;
     }
     HEAP32[$9 >> 2] = $10;
     $9 = $8 + -1 | 0;
     $5 = HEAPF64[($9 << 3) + $7 >> 3] + $5;
     $2 = $2 + 1 | 0;
     $10 = ($8 | 0) > 1;
     $8 = $9;
     if ($10) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $11);
   $5 = $5 + Math_floor($5 * .125) * -8;
   label$17 : {
    if (Math_abs($5) < 2147483648) {
     $10 = ~~$5;
     break label$17;
    }
    $10 = -2147483648;
   }
   $5 = $5 - +($10 | 0);
   label$19 : {
    label$20 : {
     label$21 : {
      $20 = ($11 | 0) < 1;
      label$22 : {
       if (!$20) {
        $8 = ($6 << 2) + $7 | 0;
        $9 = HEAP32[$8 + 476 >> 2];
        $2 = $9 >> $19;
        $17 = $8;
        $8 = $9 - ($2 << $19) | 0;
        HEAP32[$17 + 476 >> 2] = $8;
        $10 = $2 + $10 | 0;
        $9 = $8 >> $23;
        break label$22;
       }
       if ($11) {
        break label$21;
       }
       $9 = HEAP32[(($6 << 2) + $7 | 0) + 476 >> 2] >> 23;
      }
      if (($9 | 0) < 1) {
       break label$19;
      }
      break label$20;
     }
     $9 = 2;
     if (!!($5 >= .5)) {
      break label$20;
     }
     $9 = 0;
     break label$19;
    }
    $2 = 0;
    $8 = 0;
    if (!$16) {
     while (1) {
      $21 = ($7 + 480 | 0) + ($2 << 2) | 0;
      $16 = HEAP32[$21 >> 2];
      $17 = 16777215;
      label$26 : {
       label$27 : {
        if (!$8) {
         if (!$16) {
          break label$27;
         }
         $17 = 16777216;
         $8 = 1;
        }
        HEAP32[$21 >> 2] = $17 - $16;
        break label$26;
       }
       $8 = 0;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$29 : {
     if ($20) {
      break label$29;
     }
     $2 = $11 + -1 | 0;
     if ($2 >>> 0 > 1) {
      break label$29;
     }
     if ($2 - 1) {
      $2 = ($6 << 2) + $7 | 0;
      HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 8388607;
      break label$29;
     }
     $2 = ($6 << 2) + $7 | 0;
     HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 4194303;
    }
    $10 = $10 + 1 | 0;
    if (($9 | 0) != 2) {
     break label$19;
    }
    $5 = 1 - $5;
    $9 = 2;
    if (!$8) {
     break label$19;
    }
    $5 = $5 - scalbn(1, $11);
   }
   if ($5 == 0) {
    $8 = 0;
    label$32 : {
     $2 = $6;
     if (($2 | 0) <= ($13 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 + -1 | 0;
      $8 = HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2] | $8;
      if (($2 | 0) > ($13 | 0)) {
       continue;
      }
      break;
     }
     if (!$8) {
      break label$32;
     }
     $15 = $11;
     while (1) {
      $15 = $15 + -24 | 0;
      $6 = $6 + -1 | 0;
      if (!HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $8 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($7 + 480 | 0) + ($13 - $8 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $8 = $6 + $8 | 0;
    while (1) {
     $9 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     HEAPF64[($7 + 320 | 0) + ($9 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 17952 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) >= 1) {
      while (1) {
       $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($9 - $2 << 3) >> 3];
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($6 << 3) + $7 >> 3] = $5;
     if (($6 | 0) < ($8 | 0)) {
      continue;
     }
     break;
    }
    $6 = $8;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 0 - $11 | 0);
  label$39 : {
   if (!!($5 >= 16777216)) {
    $0 = ($7 + 480 | 0) + ($6 << 2) | 0;
    $12 = $5;
    $5 = $5 * 5.960464477539063e-8;
    label$42 : {
     if (Math_abs($5) < 2147483648) {
      $2 = ~~$5;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = $12 + +($2 | 0) * -16777216;
    label$41 : {
     if (Math_abs($5) < 2147483648) {
      $3 = ~~$5;
      break label$41;
     }
     $3 = -2147483648;
    }
    HEAP32[$0 >> 2] = $3;
    $6 = $6 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $15 = $11;
  }
  HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $15);
 label$47 : {
  if (($6 | 0) <= -1) {
   break label$47;
  }
  $2 = $6;
  while (1) {
   HEAPF64[($2 << 3) + $7 >> 3] = $5 * +HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2];
   $5 = $5 * 5.960464477539063e-8;
   $0 = ($2 | 0) > 0;
   $2 = $2 + -1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
  if (($6 | 0) <= -1) {
   break label$47;
  }
  $2 = $6;
  while (1) {
   $0 = $2;
   $3 = $6 - $2 | 0;
   $5 = 0;
   $2 = 0;
   while (1) {
    label$51 : {
     $5 = $5 + HEAPF64[($2 << 3) + 20720 >> 3] * HEAPF64[($0 + $2 << 3) + $7 >> 3];
     if (($2 | 0) >= ($13 | 0)) {
      break label$51;
     }
     $8 = $2 >>> 0 < $3 >>> 0;
     $2 = $2 + 1 | 0;
     if ($8) {
      continue;
     }
    }
    break;
   }
   HEAPF64[($7 + 160 | 0) + ($3 << 3) >> 3] = $5;
   $2 = $0 + -1 | 0;
   if (($0 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 label$52 : {
  if ($4 >>> 0 > 3) {
   break label$52;
  }
  label$53 : {
   label$54 : {
    switch ($4 - 1 | 0) {
    case 2:
     label$57 : {
      if (($6 | 0) < 1) {
       break label$57;
      }
      $5 = HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $12 = $5;
       $0 = $2 + -1 | 0;
       $3 = ($7 + 160 | 0) + ($0 << 3) | 0;
       $22 = HEAPF64[$3 >> 3];
       $5 = $22 + $5;
       HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3] = $12 + ($22 - $5);
       HEAPF64[$3 >> 3] = $5;
       $3 = ($2 | 0) > 1;
       $2 = $0;
       if ($3) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$57;
      }
      $5 = HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $12 = $5;
       $0 = $2 + -1 | 0;
       $3 = ($7 + 160 | 0) + ($0 << 3) | 0;
       $14 = HEAPF64[$3 >> 3];
       $5 = $14 + $5;
       HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3] = $12 + ($14 - $5);
       HEAPF64[$3 >> 3] = $5;
       $3 = ($2 | 0) > 2;
       $2 = $0;
       if ($3) {
        continue;
       }
       break;
      }
      $14 = 0;
      if (($6 | 0) <= 1) {
       break label$57;
      }
      while (1) {
       $14 = $14 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
       $0 = ($6 | 0) > 2;
       $6 = $6 + -1 | 0;
       if ($0) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$7 + 160 >> 3];
     if ($9) {
      break label$53;
     }
     HEAPF64[$1 >> 3] = $5;
     $0 = HEAP32[$7 + 172 >> 2];
     $2 = HEAP32[$7 + 168 >> 2];
     HEAPF64[$1 + 16 >> 3] = $14;
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$1 + 12 >> 2] = $0;
     break label$52;
    default:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $5 = $5 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
       $0 = ($6 | 0) > 0;
       $6 = $6 + -1 | 0;
       if ($0) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
     break label$52;
    case 0:
    case 1:
     break label$54;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $2 = $6;
    while (1) {
     $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
     $0 = ($2 | 0) > 0;
     $2 = $2 + -1 | 0;
     if ($0) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
   $5 = HEAPF64[$7 + 160 >> 3] - $5;
   $2 = 1;
   if (($6 | 0) >= 1) {
    while (1) {
     $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
     $0 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($0) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $9 ? -$5 : $5;
   break label$52;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$7 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$14;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 global$0 = $7 + 560 | 0;
 return $10 & 7;
}
function BuildControlBase__makeBuffers_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 $1 = global$0 - 176 | 0;
 global$0 = $1;
 $19 = $0 + 48 | 0;
 $26 = QuadAdder__QuadAdder_28Mesh__29($1 + 152 | 0, $19);
 $20 = $0 + 252 | 0;
 $27 = QuadAdder__QuadAdder_28Mesh__29($1 + 144 | 0, $20);
 $21 = $0 + 456 | 0;
 $6 = LineAdder__LineAdder_28Mesh__29($1 + 112 | 0, $21);
 $15 = $6 + 4 | 0;
 $22 = $0 + 660 | 0;
 $7 = LineAdder__LineAdder_28Mesh__29($1 + 80 | 0, $22);
 $16 = $7 + 4 | 0;
 $23 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
 while (1) {
  $8 = Math_imul($12, 24) + $23 | 0;
  $10 = HEAP32[$8 + 40 >> 2];
  if (($10 | 0) < HEAP32[$8 + 44 >> 2]) {
   $3 = HEAP32[$8 + 52 >> 2];
   while (1) {
    $9 = HEAP32[$8 + 48 >> 2];
    if (($9 | 0) < ($3 | 0)) {
     $28 = $10 << 16 & 16711680 | $12;
     $2 = HEAP32[$8 + 60 >> 2];
     $5 = Math_fround($10 | 0);
     while (1) {
      $17 = $9 + 1 | 0;
      $3 = HEAP32[$8 + 56 >> 2];
      if (($3 | 0) < ($2 | 0)) {
       $29 = $9 << 2 & 508 | $28;
       $17 = $9 + 1 | 0;
       $13 = Math_fround($17 | 0);
       $14 = Math_fround($9 | 0);
       while (1) {
        label$8 : {
         if ($10 >>> 0 > 49 | $9 >>> 0 > 49 | $3 >>> 0 > 49) {
          break label$8;
         }
         $18 = HEAPU8[((((Math_imul($12, 125e3) + $23 | 0) + Math_imul($10, 2500) | 0) + Math_imul($9, 50) | 0) + $3 | 0) + 136 | 0];
         if (!($18 & 15)) {
          break label$8;
         }
         HEAP32[$1 + 72 >> 2] = 0;
         HEAP32[$1 + 64 >> 2] = 0;
         HEAP32[$1 + 68 >> 2] = 0;
         HEAP32[$1 + 56 >> 2] = 0;
         HEAP32[$1 + 48 >> 2] = 0;
         HEAP32[$1 + 52 >> 2] = 0;
         HEAP32[$1 + 40 >> 2] = 0;
         HEAP32[$1 + 32 >> 2] = 0;
         HEAP32[$1 + 36 >> 2] = 0;
         HEAP32[$1 + 24 >> 2] = 0;
         HEAP32[$1 + 16 >> 2] = 0;
         HEAP32[$1 + 20 >> 2] = 0;
         if ($12 >>> 0 <= 2) {
          label$10 : {
           label$11 : {
            switch ($12 - 1 | 0) {
            default:
             HEAPF32[$1 + 68 >> 2] = $14;
             HEAPF32[$1 + 64 >> 2] = $5;
             HEAPF32[$1 + 52 >> 2] = $13;
             HEAPF32[$1 + 48 >> 2] = $5;
             HEAPF32[$1 + 36 >> 2] = $13;
             HEAPF32[$1 + 32 >> 2] = $5;
             HEAPF32[$1 + 16 >> 2] = $5;
             $4 = Math_fround($3 | 0);
             HEAPF32[$1 + 72 >> 2] = $4;
             HEAPF32[$1 + 56 >> 2] = $4;
             $11 = Math_fround($3 + 1 | 0);
             HEAPF32[$1 + 40 >> 2] = $11;
             $4 = $14;
             break label$10;
            case 0:
             HEAPF32[$1 + 68 >> 2] = $5;
             HEAPF32[$1 + 64 >> 2] = $14;
             HEAPF32[$1 + 52 >> 2] = $5;
             HEAPF32[$1 + 48 >> 2] = $13;
             HEAPF32[$1 + 36 >> 2] = $5;
             HEAPF32[$1 + 32 >> 2] = $13;
             HEAPF32[$1 + 16 >> 2] = $14;
             $4 = Math_fround($3 | 0);
             HEAPF32[$1 + 72 >> 2] = $4;
             HEAPF32[$1 + 56 >> 2] = $4;
             $11 = Math_fround($3 + 1 | 0);
             HEAPF32[$1 + 40 >> 2] = $11;
             $4 = $5;
             break label$10;
            case 1:
             break label$11;
            }
           }
           HEAPF32[$1 + 72 >> 2] = $5;
           HEAPF32[$1 + 64 >> 2] = $14;
           HEAPF32[$1 + 56 >> 2] = $5;
           HEAPF32[$1 + 48 >> 2] = $13;
           HEAPF32[$1 + 40 >> 2] = $5;
           HEAPF32[$1 + 32 >> 2] = $13;
           HEAPF32[$1 + 16 >> 2] = $14;
           $4 = Math_fround($3 | 0);
           HEAPF32[$1 + 68 >> 2] = $4;
           HEAPF32[$1 + 52 >> 2] = $4;
           $4 = Math_fround($3 + 1 | 0);
           HEAPF32[$1 + 36 >> 2] = $4;
           $11 = $5;
          }
          HEAPF32[$1 + 24 >> 2] = $11;
          HEAPF32[$1 + 20 >> 2] = $4;
         }
         $24 = $3 << 9 & 65024 | $29;
         HEAP32[$1 + 8 >> 2] = 0;
         HEAP32[$1 + 12 >> 2] = 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         label$14 : {
          if (($18 & 12) == 4) {
           HEAP32[$1 + 8 >> 2] = 1065353216;
           HEAP32[$1 + 12 >> 2] = 1056964608;
           HEAP32[$1 >> 2] = 1056964608;
           HEAP32[$1 + 4 >> 2] = 1056964608;
           QuadAdder__add_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec4_20const__2c_20unsigned_20int_2c_20unsigned_20int_29($27, $1 - -64 | 0, $1 + 48 | 0, $1 + 32 | 0, $1 + 16 | 0, $1, $24, 1);
           VecRep__add_28Vec3_20const__2c_20int__29($16, $1 - -64 | 0, $1 + 172 | 0);
           VecRep__add_28Vec3_20const__2c_20int__29($16, $1 + 48 | 0, $1 + 168 | 0);
           VecRep__add_28Vec3_20const__2c_20int__29($16, $1 + 32 | 0, $1 + 164 | 0);
           VecRep__add_28Vec3_20const__2c_20int__29($16, $1 + 16 | 0, $1 + 160 | 0);
           LineAdder__addPair_28int_2c_20int_29($7, HEAP32[$1 + 172 >> 2], HEAP32[$1 + 168 >> 2]);
           LineAdder__addPair_28int_2c_20int_29($7, HEAP32[$1 + 168 >> 2], HEAP32[$1 + 164 >> 2]);
           LineAdder__addPair_28int_2c_20int_29($7, HEAP32[$1 + 164 >> 2], HEAP32[$1 + 160 >> 2]);
           LineAdder__addPair_28int_2c_20int_29($7, HEAP32[$1 + 160 >> 2], HEAP32[$1 + 172 >> 2]);
           $2 = HEAP32[$7 >> 2];
           HEAP32[$2 + 92 >> 2] = 1045220557;
           HEAP32[$2 + 96 >> 2] = 1045220557;
           HEAP32[$2 + 100 >> 2] = 1065353216;
           HEAP32[$2 + 104 >> 2] = 1056964608;
           break label$14;
          }
          $2 = $18 & 63;
          label$16 : {
           if ($2 + -41 >>> 0 <= 1) {
            HEAP32[$1 >> 2] = 0;
            $2 = 2;
            $11 = Math_fround(0);
            $4 = Math_fround(.25);
            $25 = Math_fround(.25);
            break label$16;
           }
           $11 = Math_fround(1);
           label$18 : {
            if (!(!HEAPU8[$0 + 16 | 0] | ($2 | 0) != 10)) {
             HEAP32[$1 >> 2] = 1065353216;
             $2 = 0;
             $4 = Math_fround(0);
             break label$18;
            }
            HEAP32[$1 >> 2] = 1065353216;
            $2 = 0;
            $4 = Math_fround(1);
           }
           $25 = Math_fround(1);
          }
          HEAPF32[$1 + 12 >> 2] = $11;
          HEAPF32[$1 + 8 >> 2] = $4;
          HEAPF32[$1 + 4 >> 2] = $25;
          QuadAdder__add_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec4_20const__2c_20unsigned_20int_2c_20unsigned_20int_29($26, $1 - -64 | 0, $1 + 48 | 0, $1 + 32 | 0, $1 + 16 | 0, $1, $24, $2);
          VecRep__add_28Vec3_20const__2c_20int__29($15, $1 - -64 | 0, $1 + 172 | 0);
          VecRep__add_28Vec3_20const__2c_20int__29($15, $1 + 48 | 0, $1 + 168 | 0);
          VecRep__add_28Vec3_20const__2c_20int__29($15, $1 + 32 | 0, $1 + 164 | 0);
          VecRep__add_28Vec3_20const__2c_20int__29($15, $1 + 16 | 0, $1 + 160 | 0);
          LineAdder__addPair_28int_2c_20int_29($6, HEAP32[$1 + 172 >> 2], HEAP32[$1 + 168 >> 2]);
          LineAdder__addPair_28int_2c_20int_29($6, HEAP32[$1 + 168 >> 2], HEAP32[$1 + 164 >> 2]);
          LineAdder__addPair_28int_2c_20int_29($6, HEAP32[$1 + 164 >> 2], HEAP32[$1 + 160 >> 2]);
          LineAdder__addPair_28int_2c_20int_29($6, HEAP32[$1 + 160 >> 2], HEAP32[$1 + 172 >> 2]);
          $2 = HEAP32[$6 >> 2];
          HEAP32[$2 + 92 >> 2] = 1045220557;
          HEAP32[$2 + 96 >> 2] = 1045220557;
          HEAP32[$2 + 100 >> 2] = 1045220557;
          HEAP32[$2 + 104 >> 2] = 1065353216;
         }
         $2 = HEAP32[$8 + 60 >> 2];
        }
        $3 = $3 + 1 | 0;
        if (($3 | 0) < ($2 | 0)) {
         continue;
        }
        break;
       }
      }
      $9 = $17;
      $3 = HEAP32[$8 + 52 >> 2];
      if (($9 | 0) < ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $10 = $10 + 1 | 0;
    if (($10 | 0) < HEAP32[$8 + 44 >> 2]) {
     continue;
    }
    break;
   }
  }
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 3) {
   continue;
  }
  break;
 }
 Mesh__makeSelfBos_28bool_29($19, 0);
 Mesh__makeSelfBos_28bool_29($20, 0);
 Mesh__makeSelfBos_28bool_29($21, 0);
 Mesh__makeSelfBos_28bool_29($22, 0);
 std____2____tree_LineAdder__SortedPair_2c_20std____2__less_LineAdder__SortedPair__2c_20std____2__allocator_LineAdder__SortedPair__20___destroy_28std____2____tree_node_LineAdder__SortedPair_2c_20void____29($7 + 20 | 0, HEAP32[$7 + 24 >> 2]);
 std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($7 + 4 | 0, HEAP32[$7 + 8 >> 2]);
 std____2____tree_LineAdder__SortedPair_2c_20std____2__less_LineAdder__SortedPair__2c_20std____2__allocator_LineAdder__SortedPair__20___destroy_28std____2____tree_node_LineAdder__SortedPair_2c_20void____29($6 + 20 | 0, HEAP32[$6 + 24 >> 2]);
 std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($6 + 4 | 0, HEAP32[$6 + 8 >> 2]);
 global$0 = $1 + 176 | 0;
}
function BaseGLWidget__translate_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0;
 $3 = global$0 - 192 | 0;
 global$0 = $3;
 $10 = HEAPF64[$0 + 352 >> 3];
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = $0 + 108 | 0;
 if (($3 | 0) != ($4 | 0)) {
  $9 = HEAP32[$4 + 60 >> 2];
  HEAP32[$3 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
  HEAP32[$3 + 60 >> 2] = $9;
  $9 = HEAP32[$4 + 52 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
  HEAP32[$3 + 52 >> 2] = $9;
  $9 = HEAP32[$4 + 44 >> 2];
  HEAP32[$3 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$3 + 44 >> 2] = $9;
  $9 = HEAP32[$4 + 36 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$3 + 36 >> 2] = $9;
  $9 = HEAP32[$4 + 28 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$3 + 28 >> 2] = $9;
  $9 = HEAP32[$4 + 20 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$3 + 20 >> 2] = $9;
  $9 = HEAP32[$4 + 12 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = $9;
  $9 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $9;
 }
 HEAP32[$0 + 108 >> 2] = 1065353216;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 1065353216;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 1065353216;
 HEAP32[$0 + 128 >> 2] = 1065353216;
 HEAP32[$0 + 132 >> 2] = 0;
 $0 = HEAP32[$0 + 304 >> 2];
 label$2 : {
  if ($0 >>> 0 > 5) {
   break label$2;
  }
  $27 = +($2 | 0) / $10;
  $10 = +($1 | 0) / $10;
  label$3 : {
   switch ($0 - 1 | 0) {
   default:
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround($10), Math_fround(0), Math_fround(0));
    break label$2;
   case 0:
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround($10), Math_fround(0));
    break label$2;
   case 1:
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround(0), Math_fround($10));
    break label$2;
   case 2:
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround($10), Math_fround(0), Math_fround(0));
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround(-Math_fround($27)), Math_fround(0));
    break label$2;
   case 3:
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround($10), Math_fround(0), Math_fround(0));
    Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround(0), Math_fround($27));
    break label$2;
   case 4:
    break label$3;
   }
  }
  Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround(0), Math_fround($10));
  Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(0), Math_fround(-Math_fround($27)), Math_fround(0));
 }
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[$3 + 72 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 76 >> 2] = $0;
 $0 = HEAP32[$4 + 20 >> 2];
 HEAP32[$3 + 80 >> 2] = HEAP32[$4 + 16 >> 2];
 HEAP32[$3 + 84 >> 2] = $0;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$3 + 88 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$3 + 92 >> 2] = $0;
 $0 = HEAP32[$4 + 36 >> 2];
 HEAP32[$3 + 96 >> 2] = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 100 >> 2] = $0;
 $0 = HEAP32[$4 + 44 >> 2];
 HEAP32[$3 + 104 >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[$3 + 108 >> 2] = $0;
 $0 = HEAP32[$4 + 52 >> 2];
 HEAP32[$3 + 112 >> 2] = HEAP32[$4 + 48 >> 2];
 HEAP32[$3 + 116 >> 2] = $0;
 $0 = HEAP32[$4 + 60 >> 2];
 HEAP32[$3 + 120 >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[$3 + 124 >> 2] = $0;
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 64 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 68 >> 2] = $0;
 $11 = HEAPF32[$3 + 12 >> 2];
 $12 = HEAPF32[$3 + 8 >> 2];
 $13 = HEAPF32[$3 >> 2];
 $14 = HEAPF32[$3 + 4 >> 2];
 $15 = HEAPF32[$3 + 28 >> 2];
 $16 = HEAPF32[$3 + 24 >> 2];
 $17 = HEAPF32[$3 + 16 >> 2];
 $18 = HEAPF32[$3 + 20 >> 2];
 $19 = HEAPF32[$3 + 44 >> 2];
 $20 = HEAPF32[$3 + 40 >> 2];
 $21 = HEAPF32[$3 + 32 >> 2];
 $22 = HEAPF32[$3 + 36 >> 2];
 $23 = HEAPF32[$3 + 60 >> 2];
 $24 = HEAPF32[$3 + 56 >> 2];
 $25 = HEAPF32[$3 + 48 >> 2];
 $26 = HEAPF32[$3 + 52 >> 2];
 HEAP32[$3 + 184 >> 2] = 0;
 HEAP32[$3 + 188 >> 2] = 0;
 HEAP32[$3 + 176 >> 2] = 0;
 HEAP32[$3 + 180 >> 2] = 0;
 HEAP32[$3 + 168 >> 2] = 0;
 HEAP32[$3 + 172 >> 2] = 0;
 HEAP32[$3 + 160 >> 2] = 0;
 HEAP32[$3 + 164 >> 2] = 0;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 156 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 HEAP32[$3 + 136 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 $5 = HEAPF32[$3 + 64 >> 2];
 $6 = HEAPF32[$3 + 80 >> 2];
 $7 = HEAPF32[$3 + 96 >> 2];
 $8 = HEAPF32[$3 + 112 >> 2];
 HEAPF32[$3 + 176 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25 * $5) + Math_fround(0)) + Math_fround($26 * $6)) + Math_fround($24 * $7)) + Math_fround($23 * $8);
 HEAPF32[$3 + 160 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $5) + Math_fround(0)) + Math_fround($22 * $6)) + Math_fround($20 * $7)) + Math_fround($19 * $8);
 HEAPF32[$3 + 144 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround(0)) + Math_fround($18 * $6)) + Math_fround($16 * $7)) + Math_fround($15 * $8);
 HEAPF32[$3 + 128 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround(0)) + Math_fround($14 * $6)) + Math_fround($12 * $7)) + Math_fround($11 * $8);
 $5 = HEAPF32[$3 + 68 >> 2];
 $6 = HEAPF32[$3 + 84 >> 2];
 $7 = HEAPF32[$3 + 100 >> 2];
 $8 = HEAPF32[$3 + 116 >> 2];
 HEAPF32[$3 + 164 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $5) + Math_fround(0)) + Math_fround($22 * $6)) + Math_fround($20 * $7)) + Math_fround($19 * $8);
 HEAPF32[$3 + 148 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround(0)) + Math_fround($18 * $6)) + Math_fround($16 * $7)) + Math_fround($15 * $8);
 HEAPF32[$3 + 132 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround(0)) + Math_fround($14 * $6)) + Math_fround($12 * $7)) + Math_fround($11 * $8);
 HEAPF32[$3 + 180 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25 * $5) + Math_fround(0)) + Math_fround($26 * $6)) + Math_fround($24 * $7)) + Math_fround($23 * $8);
 $5 = HEAPF32[$3 + 72 >> 2];
 $6 = HEAPF32[$3 + 88 >> 2];
 $7 = HEAPF32[$3 + 104 >> 2];
 $8 = HEAPF32[$3 + 120 >> 2];
 HEAPF32[$3 + 184 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25 * $5) + Math_fround(0)) + Math_fround($26 * $6)) + Math_fround($24 * $7)) + Math_fround($23 * $8);
 HEAPF32[$3 + 168 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $5) + Math_fround(0)) + Math_fround($22 * $6)) + Math_fround($20 * $7)) + Math_fround($19 * $8);
 HEAPF32[$3 + 152 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround(0)) + Math_fround($18 * $6)) + Math_fround($16 * $7)) + Math_fround($15 * $8);
 HEAPF32[$3 + 136 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround(0)) + Math_fround($14 * $6)) + Math_fround($12 * $7)) + Math_fround($11 * $8);
 $5 = HEAPF32[$3 + 76 >> 2];
 $6 = HEAPF32[$3 + 92 >> 2];
 $7 = HEAPF32[$3 + 108 >> 2];
 $8 = HEAPF32[$3 + 124 >> 2];
 HEAPF32[$3 + 140 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround(0)) + Math_fround($14 * $6)) + Math_fround($12 * $7)) + Math_fround($11 * $8);
 HEAPF32[$3 + 156 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround(0)) + Math_fround($18 * $6)) + Math_fround($16 * $7)) + Math_fround($15 * $8);
 HEAPF32[$3 + 172 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $5) + Math_fround(0)) + Math_fround($22 * $6)) + Math_fround($20 * $7)) + Math_fround($19 * $8);
 HEAPF32[$3 + 188 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25 * $5) + Math_fround(0)) + Math_fround($26 * $6)) + Math_fround($24 * $7)) + Math_fround($23 * $8);
 $0 = HEAP32[$3 + 180 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$3 + 176 >> 2];
 HEAP32[$4 + 52 >> 2] = $0;
 $0 = HEAP32[$3 + 172 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$3 + 168 >> 2];
 HEAP32[$4 + 44 >> 2] = $0;
 $0 = HEAP32[$3 + 164 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$3 + 160 >> 2];
 HEAP32[$4 + 36 >> 2] = $0;
 $0 = HEAP32[$3 + 156 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$3 + 152 >> 2];
 HEAP32[$4 + 28 >> 2] = $0;
 $0 = HEAP32[$3 + 140 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 136 >> 2];
 HEAP32[$4 + 12 >> 2] = $0;
 $0 = HEAP32[$3 + 188 >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$3 + 184 >> 2];
 HEAP32[$4 + 60 >> 2] = $0;
 $0 = HEAP32[$3 + 148 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$3 + 144 >> 2];
 HEAP32[$4 + 20 >> 2] = $0;
 $0 = HEAP32[$3 + 132 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$3 + 128 >> 2];
 HEAP32[$4 + 4 >> 2] = $0;
 global$0 = $3 + 192 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = HEAP32[$0 >> 2];
 if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
  $2 = HEAP8[$2 | 0];
 } else {
  $2 = 0;
 }
 $2 = $2 << 24 >> 24;
 label$1 : {
  if (!(($2 & 255) != 71 ? ($2 | 0) != 84 : 0)) {
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($0);
   break label$1;
  }
  HEAP32[$1 + 56 >> 2] = $0;
  $3 = $1 + 40 | 0;
  HEAP8[$3 + 8 | 0] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP16[$3 >> 1] = 0;
  $2 = $0;
  HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 336 >> 2] - HEAP32[$2 + 332 >> 2] >> 2;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($2, $3);
  HEAP32[$1 + 36 >> 2] = $4;
  $0 = 0;
  if (!$4) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($2, $3)) {
   break label$1;
  }
  $0 = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 34185);
  $4 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  label$6 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($2, $1)) {
    $0 = $2 + 8 | 0;
    $4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($2, 69)) {
      $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($2);
      HEAP32[$1 + 16 >> 2] = $5;
      if (!$5) {
       break label$6;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1 + 16 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $2, $4);
    HEAP32[$1 + 32 >> 2] = $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($2 + 368 | 0, $1 + 16 | 0);
   }
   HEAP32[$1 + 12 >> 2] = 0;
   if (!(HEAPU8[$1 + 40 | 0] | !HEAPU8[$3 + 1 | 0])) {
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($2);
    HEAP32[$1 + 12 >> 2] = $0;
    if (!$0) {
     break label$6;
    }
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($2, 118)) {
    $0 = $1 + 16 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($2, $1 + 12 | 0, $1 + 36 | 0, $0, $1 + 32 | 0, $3 + 4 | 0, $3 + 8 | 0);
    break label$1;
   }
   $0 = $2 + 8 | 0;
   $4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
   while (1) {
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($2);
    HEAP32[$1 + 16 >> 2] = $5;
    if (!$5) {
     break label$6;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1 + 16 | 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $2, $4);
   $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($2, $1 + 12 | 0, $1 + 36 | 0, $1 + 16 | 0, $1 + 32 | 0, $3 + 4 | 0, $3 + 8 | 0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 - -64 | 0;
 return $0;
}
function exportModel_28emscripten__val_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $1 = global$0 - 496 | 0;
 global$0 = $1;
 $4 = HEAP32[11720];
 $3 = HEAP32[$4 + 124 >> 2];
 label$1 : {
  if (!$3) {
   break label$1;
  }
  $2 = HEAP32[$3 + 12 >> 2];
  $3 = HEAP32[$3 + 8 >> 2];
  if (($2 | 0) == ($3 | 0)) {
   break label$1;
  }
  $4 = HEAP32[$4 + 132 >> 2];
  if (($4 | 0) == -1) {
   break label$1;
  }
  $3 = HEAP32[$3 + ($4 << 2) >> 2];
  if (!$3) {
   break label$1;
  }
  HEAP32[$1 + 416 >> 2] = 3156;
  HEAP32[$1 + 352 >> 2] = 3136;
  HEAP32[$1 + 360 >> 2] = 2996;
  HEAP32[$1 + 356 >> 2] = 0;
  $9 = $1 + 416 | 0;
  $4 = $1 + 364 | 0;
  std____2__ios_base__init_28void__29($9, $4);
  HEAP32[$1 + 488 >> 2] = 0;
  HEAP32[$1 + 492 >> 2] = -1;
  HEAP32[$1 + 416 >> 2] = 3016;
  HEAP32[$1 + 352 >> 2] = 2976;
  HEAP32[$1 + 360 >> 2] = 2996;
  $12 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($4);
  HEAP32[$1 + 396 >> 2] = 0;
  HEAP32[$1 + 400 >> 2] = 0;
  HEAP32[$1 + 404 >> 2] = 0;
  HEAP32[$1 + 408 >> 2] = 0;
  HEAP32[$1 + 412 >> 2] = 24;
  HEAP32[$1 + 364 >> 2] = 3296;
  HEAP32[$1 + 272 >> 2] = 3156;
  HEAP32[$1 + 208 >> 2] = 3136;
  HEAP32[$1 + 216 >> 2] = 2996;
  HEAP32[$1 + 212 >> 2] = 0;
  $10 = $1 + 272 | 0;
  $7 = $1 + 220 | 0;
  std____2__ios_base__init_28void__29($10, $7);
  HEAP32[$1 + 344 >> 2] = 0;
  HEAP32[$1 + 348 >> 2] = -1;
  HEAP32[$1 + 272 >> 2] = 3016;
  HEAP32[$1 + 208 >> 2] = 2976;
  HEAP32[$1 + 216 >> 2] = 2996;
  $13 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($7);
  HEAP32[$1 + 252 >> 2] = 0;
  HEAP32[$1 + 256 >> 2] = 0;
  HEAP32[$1 + 260 >> 2] = 0;
  HEAP32[$1 + 264 >> 2] = 0;
  HEAP32[$1 + 268 >> 2] = 24;
  HEAP32[$1 + 220 >> 2] = 3296;
  HEAP32[$1 + 128 >> 2] = 3156;
  HEAP32[$1 + 64 >> 2] = 3136;
  HEAP32[$1 + 72 >> 2] = 2996;
  HEAP32[$1 + 68 >> 2] = 0;
  $11 = $1 + 128 | 0;
  $6 = $1 + 76 | 0;
  std____2__ios_base__init_28void__29($11, $6);
  HEAP32[$1 + 200 >> 2] = 0;
  HEAP32[$1 + 204 >> 2] = -1;
  HEAP32[$1 + 128 >> 2] = 3016;
  HEAP32[$1 + 64 >> 2] = 2976;
  HEAP32[$1 + 72 >> 2] = 2996;
  $14 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($6);
  HEAP32[$1 + 108 >> 2] = 0;
  HEAP32[$1 + 112 >> 2] = 0;
  HEAP32[$1 + 116 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 124 >> 2] = 24;
  HEAP32[$1 + 76 >> 2] = 3296;
  $2 = HEAP32[$3 + 52 >> 2];
  $5 = HEAP32[$2 + 8 >> 2];
  $8 = HEAP32[$2 + 4 >> 2];
  $2 = HEAP32[$2 >> 2];
  $15 = emscripten_asm_const_iii(1940, 1076, 0) | 0;
  $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($1 + 72 | 0, 1970, 6), ($2 + -5 | 0) / 4 | 0), 1833, 1), ($8 + -5 | 0) / 4 | 0), 1833, 1), ($5 + -5 | 0) / 4 | 0), 1977, 1);
  $5 = HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0;
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -75 | 8;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29($2, ($15 >>> 0) % 4095 | 0);
  std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($1 + 48 | 0, $6);
  $6 = $1 + 360 | 0;
  $8 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, 1979, 7);
  $2 = HEAPU8[$1 + 59 | 0];
  $5 = $2 << 24 >> 24 < 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($8, $5 ? HEAP32[$1 + 48 >> 2] : $1 + 48 | 0, $5 ? HEAP32[$1 + 52 >> 2] : $2), 1987, 4), 1992, 1);
  void_20emscripten__val__set_char_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const_20_28__29_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, 1994, $1 + 48 | 0);
  HEAP32[$1 + 44 >> 2] = $1 + 216;
  HEAP32[$1 + 40 >> 2] = $6;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 1;
  HEAP32[$1 + 32 >> 2] = 1;
  HEAP16[$1 + 24 >> 1] = 0;
  if (SlvPainter__exportToObj_28ObjExport__29_20const($3 + 24 | 0, $1 + 24 | 0)) {
   std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($1 + 8 | 0, $4);
   void_20emscripten__val__set_char_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const_20_28__29_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, 1999, $1 + 8 | 0);
   if (HEAP8[$1 + 19 | 0] <= -1) {
    dlfree(HEAP32[$1 + 8 >> 2]);
   }
   std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($1 + 8 | 0, $7);
   void_20emscripten__val__set_char_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const_20_28__29_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, 2003, $1 + 8 | 0);
   if (HEAP8[$1 + 19 | 0] <= -1) {
    dlfree(HEAP32[$1 + 8 >> 2]);
   }
   $16 = 1;
  }
  if (HEAP8[$1 + 59 | 0] <= -1) {
   dlfree(HEAP32[$1 + 48 >> 2]);
  }
  HEAP32[$1 + 128 >> 2] = 3016;
  HEAP32[$1 + 64 >> 2] = 2976;
  HEAP32[$1 + 76 >> 2] = 3296;
  HEAP32[$1 + 72 >> 2] = 2996;
  if (HEAP8[$1 + 119 | 0] <= -1) {
   dlfree(HEAP32[$1 + 108 >> 2]);
  }
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($14);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($11);
  HEAP32[$1 + 272 >> 2] = 3016;
  HEAP32[$1 + 208 >> 2] = 2976;
  HEAP32[$1 + 220 >> 2] = 3296;
  HEAP32[$1 + 216 >> 2] = 2996;
  if (HEAP8[$1 + 263 | 0] <= -1) {
   dlfree(HEAP32[$1 + 252 >> 2]);
  }
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($13);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($10);
  HEAP32[$1 + 416 >> 2] = 3016;
  HEAP32[$1 + 352 >> 2] = 2976;
  HEAP32[$1 + 364 >> 2] = 3296;
  HEAP32[$1 + 360 >> 2] = 2996;
  if (HEAP8[$1 + 407 | 0] <= -1) {
   dlfree(HEAP32[$1 + 396 >> 2]);
  }
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($12);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($9);
 }
 global$0 = $1 + 496 | 0;
 return $16 | 0;
}
function __intscan($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $11 = global$0 - 16 | 0;
 global$0 = $11;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($1 >>> 0 <= 36) {
       while (1) {
        $5 = HEAP32[$0 + 4 >> 2];
        label$8 : {
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$8;
         }
         $5 = __shgetc($0);
        }
        if (($5 | 0) == 32 | $5 + -9 >>> 0 < 5) {
         continue;
        }
        break;
       }
       $8 = $5 + -43 | 0;
       label$10 : {
        if ($8 >>> 0 > 2 | !($8 - 1)) {
         break label$10;
        }
        $12 = ($5 | 0) == 45 ? -1 : 0;
        $5 = HEAP32[$0 + 4 >> 2];
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$10;
        }
        $5 = __shgetc($0);
       }
       label$12 : {
        if (!($1 & -17 | ($5 | 0) != 48)) {
         $5 = HEAP32[$0 + 4 >> 2];
         label$14 : {
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $5 = HEAPU8[$5 | 0];
           break label$14;
          }
          $5 = __shgetc($0);
         }
         if (($5 | 32) == 120) {
          $1 = HEAP32[$0 + 4 >> 2];
          label$17 : {
           if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $1 + 1;
            $5 = HEAPU8[$1 | 0];
            break label$17;
           }
           $5 = __shgetc($0);
          }
          $1 = 16;
          if (HEAPU8[$5 + 22961 | 0] < 16) {
           break label$4;
          }
          $1 = HEAP32[$0 + 104 >> 2];
          if ($1) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
          }
          if ($2) {
           $3 = 0;
           $4 = 0;
           if (!$1) {
            break label$1;
           }
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
           break label$1;
          }
          $3 = 0;
          $4 = 0;
          __shlim($0, 0, 0);
          break label$1;
         }
         if ($1) {
          break label$12;
         }
         $1 = 8;
         break label$4;
        }
        $1 = $1 ? $1 : 10;
        if ($1 >>> 0 > HEAPU8[$5 + 22961 | 0]) {
         break label$12;
        }
        if (HEAP32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
        }
        $3 = 0;
        $4 = 0;
        __shlim($0, 0, 0);
        HEAP32[12002] = 28;
        break label$1;
       }
       if (($1 | 0) != 10) {
        break label$4;
       }
       $2 = $5 + -48 | 0;
       if ($2 >>> 0 <= 9) {
        $1 = 0;
        while (1) {
         $6 = Math_imul($1, 10);
         $1 = HEAP32[$0 + 4 >> 2];
         label$24 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1 + 1;
           $5 = HEAPU8[$1 | 0];
           break label$24;
          }
          $5 = __shgetc($0);
         }
         $1 = $2 + $6 | 0;
         $2 = $5 + -48 | 0;
         if ($1 >>> 0 < 429496729 ? $2 >>> 0 <= 9 : 0) {
          continue;
         }
         break;
        }
        $7 = $1;
        $6 = 0;
       }
       if ($2 >>> 0 > 9) {
        break label$5;
       }
       $8 = __wasm_i64_mul($7, 0, 10, 0);
       $1 = i64toi32_i32$HIGH_BITS;
       while (1) {
        $5 = HEAP32[$0 + 4 >> 2];
        label$27 : {
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$27;
         }
         $5 = __shgetc($0);
        }
        $6 = $1;
        $1 = $2 + $8 | 0;
        if ($1 >>> 0 < $2 >>> 0) {
         $6 = $6 + 1 | 0;
        }
        $7 = $1;
        $2 = $5 + -48 | 0;
        if (($6 | 0) == 429496729 & $1 >>> 0 >= 2576980378 | $6 >>> 0 > 429496729 | $2 >>> 0 > 9) {
         break label$5;
        }
        $8 = __wasm_i64_mul($7, $6, 10, 0);
        $1 = i64toi32_i32$HIGH_BITS;
        if (($1 | 0) == -1 & $8 >>> 0 <= ($2 ^ -1) >>> 0 | $1 >>> 0 < 4294967295) {
         continue;
        }
        break;
       }
       $1 = 10;
       break label$3;
      }
      HEAP32[12002] = 28;
      $3 = 0;
      $4 = 0;
      break label$1;
     }
     $1 = 10;
     if ($2 >>> 0 <= 9) {
      break label$3;
     }
     break label$2;
    }
    if ($1 + -1 & $1) {
     $2 = HEAPU8[$5 + 22961 | 0];
     if ($1 >>> 0 > $2 >>> 0) {
      while (1) {
       $7 = Math_imul($1, $7) + $2 | 0;
       $10 = $7 >>> 0 <= 119304646;
       $8 = $1;
       $5 = HEAP32[$0 + 4 >> 2];
       label$32 : {
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$32;
        }
        $5 = __shgetc($0);
       }
       $2 = HEAPU8[$5 + 22961 | 0];
       if ($8 >>> 0 > $2 >>> 0 ? $10 : 0) {
        continue;
       }
       break;
      }
     }
     if ($1 >>> 0 <= $2 >>> 0) {
      break label$3;
     }
     $8 = $1;
     while (1) {
      $9 = __wasm_i64_mul($7, $6, $8, 0);
      $10 = i64toi32_i32$HIGH_BITS;
      $2 = $2 & 255;
      if (($10 | 0) == -1 & $9 >>> 0 > ($2 ^ -1) >>> 0 | $10 >>> 0 > 4294967295) {
       break label$3;
      }
      $5 = HEAP32[$0 + 4 >> 2];
      label$35 : {
       if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        $5 = HEAPU8[$5 | 0];
        break label$35;
       }
       $5 = __shgetc($0);
      }
      $6 = $10;
      $7 = $2 + $9 | 0;
      if ($7 >>> 0 < $2 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $2 = HEAPU8[$5 + 22961 | 0];
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$3;
      }
      __multi3($11, $8, 0, $7, $6);
      if (!(HEAP32[$11 + 8 >> 2] | HEAP32[$11 + 12 >> 2])) {
       continue;
      }
      break;
     }
     break label$3;
    }
    $8 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 23217 | 0];
    $2 = HEAPU8[$5 + 22961 | 0];
    if ($1 >>> 0 > $2 >>> 0) {
     while (1) {
      $7 = $7 << $8 | $2;
      $13 = $7 >>> 0 <= 134217727;
      $9 = $1;
      $5 = HEAP32[$0 + 4 >> 2];
      label$39 : {
       if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        $5 = HEAPU8[$5 | 0];
        break label$39;
       }
       $5 = __shgetc($0);
      }
      $2 = HEAPU8[$5 + 22961 | 0];
      if ($9 >>> 0 > $2 >>> 0 ? $13 : 0) {
       continue;
      }
      break;
     }
    }
    $9 = $8 & 31;
    if (32 <= ($8 & 63) >>> 0) {
     $9 = -1 >>> $9;
    } else {
     $10 = -1 >>> $9;
     $9 = (1 << $9) - 1 << 32 - $9 | -1 >>> $9;
    }
    if (!$10 & $9 >>> 0 < $7 >>> 0 | $10 >>> 0 < 0 | $1 >>> 0 <= $2 >>> 0) {
     break label$3;
    }
    while (1) {
     $13 = $2 & 255;
     $2 = $8;
     $5 = $2 & 31;
     if (32 <= ($2 & 63) >>> 0) {
      $6 = $7 << $5;
      $2 = 0;
     } else {
      $6 = (1 << $5) - 1 & $7 >>> 32 - $5 | $6 << $5;
      $2 = $7 << $5;
     }
     $7 = $13 | $2;
     $2 = HEAP32[$0 + 4 >> 2];
     label$42 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $5 = HEAPU8[$2 | 0];
       break label$42;
      }
      $5 = __shgetc($0);
     }
     if (($6 | 0) == ($10 | 0) & $7 >>> 0 > $9 >>> 0 | $6 >>> 0 > $10 >>> 0) {
      break label$3;
     }
     $2 = HEAPU8[$5 + 22961 | 0];
     if ($1 >>> 0 > $2 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($1 >>> 0 <= HEAPU8[$5 + 22961 | 0]) {
    break label$2;
   }
   while (1) {
    $2 = $1;
    $5 = HEAP32[$0 + 4 >> 2];
    label$45 : {
     if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $5 + 1;
      $5 = HEAPU8[$5 | 0];
      break label$45;
     }
     $5 = __shgetc($0);
    }
    if ($2 >>> 0 > HEAPU8[$5 + 22961 | 0]) {
     continue;
    }
    break;
   }
   HEAP32[12002] = 68;
   $12 = $3 & 1 ? 0 : $12;
   $7 = $3;
   $6 = $4;
  }
  if (HEAP32[$0 + 104 >> 2]) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  }
  label$48 : {
   if (($4 | 0) == ($6 | 0) & $7 >>> 0 < $3 >>> 0 | $6 >>> 0 < $4 >>> 0) {
    break label$48;
   }
   if (!($12 | $3 & 1)) {
    HEAP32[12002] = 68;
    $4 = $4 + -1 | 0;
    $0 = $3 + -1 | 0;
    if ($0 >>> 0 < 4294967295) {
     $4 = $4 + 1 | 0;
    }
    $3 = $0;
    break label$1;
   }
   if (($4 | 0) == ($6 | 0) & $7 >>> 0 <= $3 >>> 0 | $6 >>> 0 < $4 >>> 0) {
    break label$48;
   }
   HEAP32[12002] = 68;
   break label$1;
  }
  $0 = $12;
  $1 = $0 ^ $7;
  $3 = $1 - $0 | 0;
  $2 = $0 >> 31;
  $4 = ($2 ^ $6) - ($2 + ($1 >>> 0 < $0 >>> 0) | 0) | 0;
 }
 global$0 = $11 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $4;
 return $3;
}
function Shape__readWorld_28BuildWorld_20const__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$2 >> 2] = -1;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $3 = HEAP32[$0 + 184 >> 2];
     if (!$3) {
      $6 = HEAP32[$1 + 8 >> 2];
      $7 = HEAP32[$1 + 4 >> 2];
      $8 = HEAP32[$1 >> 2];
      HEAP32[$4 + 36 >> 2] = 0;
      $3 = $4;
      HEAP32[$3 + 28 >> 2] = 0;
      HEAP32[$3 + 32 >> 2] = 200;
      HEAP32[$3 + 40 >> 2] = 200;
      HEAP32[$3 + 44 >> 2] = 0;
      HEAP32[$3 + 24 >> 2] = 200;
      HEAP32[$3 + 16 >> 2] = 0;
      HEAP32[$3 + 12 >> 2] = $3 + 8;
      HEAP32[$3 + 8 >> 2] = $3 + 8;
      Shape__readAxis_28BuildWorld_20const__2c_20int_2c_20int_2c_20int_2c_20EPlane_2c_20std____2__list_Shape__FaceDef_2c_20std____2__allocator_Shape__FaceDef__20___2c_20int__2c_20SqrLimits__29($0, $1, $7, $6, $8, 0, $3 + 8 | 0, $2, $3 + 24 | 0);
      $5 = 1;
      Shape__readAxis_28BuildWorld_20const__2c_20int_2c_20int_2c_20int_2c_20EPlane_2c_20std____2__list_Shape__FaceDef_2c_20std____2__allocator_Shape__FaceDef__20___2c_20int__2c_20SqrLimits__29($0, $1, $8, $6, $7, 1, $3 + 8 | 0, $2, $3 + 24 | 0);
      Shape__readAxis_28BuildWorld_20const__2c_20int_2c_20int_2c_20int_2c_20EPlane_2c_20std____2__list_Shape__FaceDef_2c_20std____2__allocator_Shape__FaceDef__20___2c_20int__2c_20SqrLimits__29($0, $1, $8, $7, $6, 2, $3 + 8 | 0, $2, $3 + 24 | 0);
      $8 = HEAP32[$3 + 28 >> 2];
      $9 = HEAP32[$3 + 36 >> 2];
      $6 = 4;
      $10 = HEAP32[$3 + 44 >> 2];
      $11 = HEAP32[$3 + 32 >> 2];
      $7 = HEAP32[$3 + 24 >> 2];
      $3 = HEAP32[$3 + 40 >> 2];
      if (!($10 | ($3 | 0) != 200 | (($11 | 0) != 200 | ($7 | 0) != 200))) {
       if (!($8 | $9)) {
        break label$3;
       }
      }
      $5 = HEAP32[$4 + 28 >> 2];
      HEAP32[$1 + 112 >> 2] = HEAP32[$4 + 24 >> 2];
      HEAP32[$1 + 116 >> 2] = $5;
      $5 = HEAP32[$4 + 44 >> 2];
      HEAP32[$1 + 128 >> 2] = HEAP32[$4 + 40 >> 2];
      HEAP32[$1 + 132 >> 2] = $5;
      $5 = HEAP32[$4 + 36 >> 2];
      HEAP32[$1 + 120 >> 2] = HEAP32[$4 + 32 >> 2];
      HEAP32[$1 + 124 >> 2] = $5;
      $1 = HEAP32[$4 + 32 >> 2];
      $5 = HEAP32[$4 + 36 >> 2];
      $6 = HEAP32[$4 + 40 >> 2];
      $12 = HEAP32[$4 + 44 >> 2];
      $13 = HEAP32[$4 + 24 >> 2];
      $14 = HEAP32[$4 + 28 >> 2];
      HEAP32[$0 + 8 >> 2] = ($8 - $7 | 0) + 5;
      HEAP32[$0 + 4 >> 2] = ($10 - $3 | 0) + 5;
      HEAP32[$0 >> 2] = ($9 - $11 | 0) + 5;
      HEAP32[$0 + 84 >> 2] = $6;
      HEAP32[$0 + 88 >> 2] = $12;
      HEAP32[$0 + 76 >> 2] = $1;
      HEAP32[$0 + 80 >> 2] = $5;
      HEAP32[$0 + 68 >> 2] = $13;
      HEAP32[$0 + 72 >> 2] = $14;
      $3 = HEAP32[$0 + 12 >> 2];
      $1 = operator_20new_28unsigned_20long_29((wasm2js_i32$0 = -1, wasm2js_i32$1 = __wasm_i64_mul($3, 0, 188, 0), wasm2js_i32$2 = i64toi32_i32$HIGH_BITS, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
      if (!$3) {
       HEAP32[$0 + 28 >> 2] = $1;
       break label$4;
      }
      $5 = $4 + 8 | 4;
      $6 = Math_imul($3, 188) + $1 | 0;
      $3 = $1;
      while (1) {
       HEAP32[$3 + 76 >> 2] = 0;
       HEAP32[$3 + 80 >> 2] = 0;
       HEAP16[$3 + 24 >> 1] = 0;
       HEAP32[$3 + 16 >> 2] = 2;
       HEAP32[$3 + 20 >> 2] = -1;
       HEAP32[$3 >> 2] = -1;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = 0;
       HEAP32[$3 + 84 >> 2] = 0;
       HEAP32[$3 + 88 >> 2] = 0;
       HEAP32[$3 + 92 >> 2] = 0;
       HEAP32[$3 + 96 >> 2] = 0;
       HEAP16[$3 + 100 >> 1] = 0;
       HEAP32[$3 + 104 >> 2] = 0;
       HEAP32[$3 + 108 >> 2] = 0;
       HEAP32[$3 + 112 >> 2] = 0;
       HEAP32[$3 + 116 >> 2] = 0;
       HEAP32[$3 + 120 >> 2] = 0;
       HEAP32[$3 + 124 >> 2] = 0;
       HEAP16[$3 + 128 >> 1] = 0;
       HEAP32[$3 + 132 >> 2] = 0;
       HEAP32[$3 + 136 >> 2] = 0;
       HEAP32[$3 + 140 >> 2] = 0;
       HEAP32[$3 + 144 >> 2] = 0;
       HEAP32[$3 + 148 >> 2] = 0;
       HEAP32[$3 + 152 >> 2] = 0;
       HEAP16[$3 + 156 >> 1] = 0;
       HEAP32[$3 + 160 >> 2] = 0;
       HEAP32[$3 + 164 >> 2] = 0;
       HEAP32[$3 + 168 >> 2] = 0;
       HEAP32[$3 + 172 >> 2] = 0;
       HEAP32[$3 + 176 >> 2] = 0;
       HEAP32[$3 + 180 >> 2] = 0;
       HEAP16[$3 + 184 >> 1] = 0;
       HEAP32[$3 + 68 >> 2] = -1;
       HEAP32[$3 + 72 >> 2] = -1;
       HEAP32[$3 + 60 >> 2] = -1;
       HEAP32[$3 + 64 >> 2] = -1;
       HEAP32[$3 + 52 >> 2] = -1;
       HEAP32[$3 + 56 >> 2] = -1;
       HEAP32[$3 + 44 >> 2] = -1;
       HEAP32[$3 + 48 >> 2] = -1;
       HEAP32[$3 + 36 >> 2] = -1;
       HEAP32[$3 + 40 >> 2] = -1;
       HEAP32[$3 + 28 >> 2] = -1;
       HEAP32[$3 + 32 >> 2] = -1;
       $3 = $3 + 188 | 0;
       if (($6 | 0) != ($3 | 0)) {
        continue;
       }
       break;
      }
      HEAP32[$0 + 28 >> 2] = $1;
      if (HEAP32[$0 + 12 >> 2] < 1) {
       break label$4;
      }
      $3 = 0;
      $8 = HEAP32[$4 + 40 >> 2];
      $9 = HEAP32[$4 + 32 >> 2];
      while (1) {
       $6 = Math_imul($3, 188) + $1 | 0;
       $1 = HEAP32[$5 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$1 + 8 >> 2];
       $5 = HEAP32[$1 + 12 >> 2];
       $10 = HEAP32[$1 + 16 >> 2];
       HEAP32[$6 + 12 >> 2] = HEAP32[$1 + 20 >> 2] - $7;
       HEAP32[$6 + 8 >> 2] = $10 - $8;
       HEAP32[$6 + 4 >> 2] = $5 - $9;
       $3 = $3 + 1 | 0;
       if (($3 | 0) >= HEAP32[$0 + 12 >> 2]) {
        break label$4;
       }
       $5 = $1 + 4 | 0;
       $1 = HEAP32[$0 + 28 >> 2];
       continue;
      }
     }
     HEAP32[$0 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 4;
     $1 = HEAP32[$3 + 16 >> 2];
     label$10 : {
      if (HEAP32[$3 + 20 >> 2] | ($1 | 0) != 200) {
       break label$10;
      }
      $1 = 200;
      if (HEAP32[$3 + 36 >> 2] | (HEAP32[$3 + 28 >> 2] | HEAP32[$3 + 24 >> 2] != 200)) {
       break label$10;
      }
      $6 = 4;
      if (HEAP32[$3 + 32 >> 2] == 200) {
       break label$1;
      }
     }
     $5 = HEAP32[$3 + 20 >> 2];
     HEAP32[$0 + 68 >> 2] = HEAP32[$3 + 16 >> 2];
     HEAP32[$0 + 72 >> 2] = $5;
     $5 = HEAP32[$3 + 36 >> 2];
     HEAP32[$0 + 84 >> 2] = HEAP32[$3 + 32 >> 2];
     HEAP32[$0 + 88 >> 2] = $5;
     $5 = HEAP32[$3 + 28 >> 2];
     HEAP32[$0 + 76 >> 2] = HEAP32[$3 + 24 >> 2];
     HEAP32[$0 + 80 >> 2] = $5;
     HEAP32[$0 >> 2] = (HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 24 >> 2] | 0) + 5;
     HEAP32[$0 + 4 >> 2] = (HEAP32[$3 + 36 >> 2] - HEAP32[$3 + 32 >> 2] | 0) + 5;
     HEAP32[$0 + 8 >> 2] = (HEAP32[$3 + 20 >> 2] - $1 | 0) + 5;
     HEAP32[$2 >> 2] = 0;
     break label$2;
    }
    label$11 : {
     if (!HEAP32[$4 + 16 >> 2]) {
      break label$11;
     }
     $3 = HEAP32[$4 + 12 >> 2];
     $1 = HEAP32[$3 >> 2];
     $5 = HEAP32[$4 + 8 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[HEAP32[$5 + 4 >> 2] >> 2] = $1;
     HEAP32[$4 + 16 >> 2] = 0;
     if (($4 + 8 | 0) == ($3 | 0)) {
      break label$11;
     }
     while (1) {
      $1 = HEAP32[$3 + 4 >> 2];
      dlfree($3);
      $3 = $1;
      if (($3 | 0) != ($4 + 8 | 0)) {
       continue;
      }
      break;
     }
    }
    $6 = 1;
    $1 = HEAP32[$2 >> 2];
    if (($1 | 0) == -1) {
     $5 = 1;
     break label$3;
    }
    HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2] + ($1 ^ -1);
    $5 = 0;
   }
   label$14 : {
    if (!HEAP32[$4 + 16 >> 2]) {
     break label$14;
    }
    $3 = HEAP32[$4 + 12 >> 2];
    $1 = HEAP32[$3 >> 2];
    $2 = HEAP32[$4 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $1;
    HEAP32[$4 + 16 >> 2] = 0;
    if (($4 + 8 | 0) == ($3 | 0)) {
     break label$14;
    }
    while (1) {
     $1 = HEAP32[$3 + 4 >> 2];
     dlfree($3);
     $3 = $1;
     if (($3 | 0) != ($4 + 8 | 0)) {
      continue;
     }
     break;
    }
   }
   if ($5) {
    break label$1;
   }
  }
  $5 = HEAP32[$0 + 12 >> 2];
  if (($5 | 0) < 1) {
   $6 = 0;
   break label$1;
  }
  $7 = HEAP32[$0 + 28 >> 2];
  $6 = 0;
  $3 = 0;
  while (1) {
   $1 = $7 + Math_imul($3, 188) | 0;
   $2 = Math_imul(HEAP32[$1 >> 2], 20) + $0 | 0;
   HEAP16[HEAP32[$2 + 136 >> 2] + ((Math_imul(HEAP32[$2 + 120 >> 2], HEAP32[$1 + 8 >> 2] / 4 | 0) + (HEAP32[$1 + 4 >> 2] / 4 | 0) | 0) + Math_imul(HEAP32[$2 + 132 >> 2], HEAP32[$1 + 12 >> 2] / 4 | 0) << 1) >> 1] = $3;
   $3 = $3 + 1 | 0;
   if (($3 | 0) < ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 48 | 0;
 return $6;
}
function Cube__puttgr_28Solutions__2c_20SolveContext__2c_20SlvCube__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $8 = global$0 - 32 | 0;
 global$0 = $8;
 label$1 : {
  if (!HEAP32[HEAP32[$0 + 32 >> 2] + 44 >> 2]) {
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8555, 7);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$8 + 8 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($8 + 8 | 0, 51440);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$8 + 8 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   if (($3 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   HEAP8[$2 + 68 | 0] = 1;
   break label$1;
  }
  $5 = HEAP32[$2 + 84 >> 2];
  label$5 : {
   label$6 : {
    if (($5 | 0) == -1) {
     break label$6;
    }
    $12 = HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2] == ($5 | 0);
    while (1) {
     if (HEAPU8[$2 + 68 | 0] | (HEAP32[$2 + 28 >> 2] | ($4 | 0) == ($9 | 0))) {
      break label$5;
     }
     label$8 : {
      if ($12) {
       break label$8;
      }
      label$9 : {
       if (HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2] == ($5 | 0)) {
        break label$9;
       }
       if (!Cube__maskAssemble_28int_29($0, $5)) {
        break label$9;
       }
       $5 = $5 + 1 | 0;
       break label$8;
      }
      $5 = $5 + -1 | 0;
     }
     $6 = HEAP32[$2 + 44 >> 2];
     $7 = HEAP32[$2 + 40 >> 2] + 1 | 0;
     if ($7 >>> 0 < 1) {
      $6 = $6 + 1 | 0;
     }
     HEAP32[$2 + 40 >> 2] = $7;
     HEAP32[$2 + 44 >> 2] = $6;
     $9 = $9 + 1 | 0;
     if (HEAP32[HEAP32[$0 + 32 >> 2] + 44 >> 2] < (HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2] - $5 | 0)) {
      $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8563, 17), $9), 8581, 7), HEAP32[HEAP32[$0 + 32 >> 2] + 44 >> 2]), 8589, 5), HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2]), 8595, 3), $5);
      $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
      HEAP32[$8 + 16 >> 2] = $3;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($8 + 16 | 0, 51440);
      $9 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
      $3 = HEAP32[$8 + 16 >> 2];
      $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
      HEAP32[$3 + 4 >> 2] = $4;
      if (($4 | 0) == -1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $9);
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
      HEAP8[$2 + 68 | 0] = 1;
      if (($5 | 0) == -1) {
       break label$6;
      }
      break label$5;
     }
     label$13 : {
      if (($5 | 0) <= HEAP32[$2 + 52 >> 2]) {
       break label$13;
      }
      HEAP32[$2 + 52 >> 2] = $5;
      $7 = Cube__generateConcreteSlv_28SlvCube__29($0, $3);
      $6 = HEAP32[$2 + 56 >> 2];
      HEAP32[$2 + 56 >> 2] = $7;
      if (!$6) {
       break label$13;
      }
      dlfree(SlvCube___SlvCube_28_29($6));
     }
     $6 = HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2];
     if (!(!HEAPU8[$0 + 2 | 0] | ($5 | 0) < ($6 - HEAP32[$2 + 80 >> 2] | 0))) {
      HEAP8[$2 + 48 | 0] = 1;
     }
     label$15 : {
      if (($5 | 0) != ($6 | 0)) {
       break label$15;
      }
      Solutions__addBackCommon_28SlvCube__2c_20bool_29($1, Cube__generateConcreteSlv_28SlvCube__29($0, $3), !HEAPU8[$2 + 4 | 0]);
      $6 = HEAP32[$2 + 76 >> 2];
      HEAP32[$2 + 76 >> 2] = $6 + 1;
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, !$6);
      $6 = HEAP32[$0 + 12 >> 2];
      label$16 : {
       if ($6 >>> 0 > 3) {
        break label$16;
       }
       label$17 : {
        switch ($6 - 1 | 0) {
        case 1:
         $6 = HEAP32[$2 + 72 >> 2] + 1 | 0;
         HEAP32[$2 + 72 >> 2] = $6;
         if (($6 | 0) < HEAP32[$0 + 16 >> 2]) {
          break label$16;
         }
         break;
        case 0:
         break label$16;
        default:
         break label$17;
        }
       }
       $5 = 0;
       Cube__clear_28int_29($0);
       HEAP32[$2 + 72 >> 2] = 0;
      }
      if (!HEAPU8[$0 + 20 | 0] | HEAP32[$2 + 76 >> 2] < HEAP32[$0 + 24 >> 2]) {
       break label$15;
      }
      HEAP8[$2 + 68 | 0] = 1;
     }
     label$19 : {
      if (!HEAPU8[$0 | 0] | !HEAPU8[$0 + 1 | 0]) {
       break label$19;
      }
      if (_ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2]) | i64toi32_i32$HIGH_BITS) {
       break label$19;
      }
      $6 = std____2__chrono__steady_clock__now_28_29();
      $7 = HEAP32[$2 + 88 >> 2];
      $10 = i64toi32_i32$HIGH_BITS;
      if (HEAP32[$0 + 4 >> 2] > (_ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($6 - $7 | 0, $10 - (HEAP32[$2 + 92 >> 2] + ($6 >>> 0 < $7 >>> 0) | 0) | 0) | 0)) {
       break label$19;
      }
      $5 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8599, 12);
      $7 = HEAP32[(HEAP32[HEAP32[$5 >> 2] + -12 >> 2] + $5 | 0) + 28 >> 2];
      HEAP32[$8 + 24 >> 2] = $7;
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
      $7 = std____2__locale__use_facet_28std____2__locale__id__29_20const($8 + 24 | 0, 51440);
      $13 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 28 >> 2]]($7, 10) | 0;
      $7 = HEAP32[$8 + 24 >> 2];
      $11 = HEAP32[$7 + 4 >> 2] + -1 | 0;
      HEAP32[$7 + 4 >> 2] = $11;
      if (($11 | 0) == -1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($5, $13);
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($5);
      $5 = 0;
      Cube__clear_28int_29($0);
      HEAP8[$2 + 48 | 0] = 0;
      HEAP32[$2 + 72 >> 2] = 0;
      HEAP32[$2 + 88 >> 2] = $6;
      HEAP32[$2 + 92 >> 2] = $10;
     }
     if (($5 | 0) != -1) {
      continue;
     }
     break;
    }
   }
   if (!HEAP32[$2 + 76 >> 2]) {
    $0 = HEAP32[$2 + 56 >> 2];
    if ($0) {
     HEAP32[$2 + 56 >> 2] = 0;
     Solutions__addBackCommon_28SlvCube__2c_20bool_29($1, $0, 0);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
    HEAP8[$2 + 68 | 0] = 1;
   }
   $5 = -1;
  }
  HEAP32[$2 + 84 >> 2] = $5;
 }
 global$0 = $8 + 32 | 0;
}
function ShaderProgram__init_28ProgCompileConf_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 if (!HEAPU8[47484]) {
  HEAP8[47484] = 1;
 }
 HEAP32[$0 + 4 >> 2] = glCreateProgram();
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 36 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
 HEAP8[$0 + 44 | 0] = 0;
 HEAP32[$1 + 24 >> 2] = 100663296;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = HEAPU8[4412] | HEAPU8[4413] << 8 | (HEAPU8[4414] << 16 | HEAPU8[4415] << 24);
 HEAP16[$1 + 20 >> 1] = HEAPU8[4416] | HEAPU8[4417] << 8;
 HEAP8[$1 + 22 | 0] = 0;
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
 $3 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $4 = HEAP8[$2 + 11 | 0];
 HEAP32[$2 + 8 >> 2] = 0;
 if (($4 | 0) <= -1) {
  dlfree($3);
 }
 if (HEAP8[$1 + 27 | 0] <= -1) {
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 if (HEAP32[$0 + 12 >> 2] != HEAP32[$0 + 8 >> 2]) {
  $5 = $0 + 48 | 0;
  $4 = 0;
  while (1) {
   $6 = glCreateShader(35633) | 0;
   HEAP32[$1 + 12 >> 2] = $6;
   HEAP32[$1 + 16 >> 2] = HEAP8[$1 + 43 | 0] < 0 ? HEAP32[$1 + 32 >> 2] : $1 + 32 | 0;
   $3 = $1;
   $2 = HEAP32[$0 + 8 >> 2] + Math_imul($4, 12) | 0;
   if (HEAP8[$2 + 11 | 0] <= -1) {
    $2 = HEAP32[$2 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = $2;
   glShaderSource($6 | 0, 2, $1 + 16 | 0, 0);
   glCompileShader(HEAP32[$1 + 12 >> 2]);
   glAttachShader(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
   ShaderProgram__printShaderInfoLog_28unsigned_20int_29(HEAP32[$1 + 12 >> 2]);
   $2 = HEAP32[$0 + 52 >> 2];
   label$8 : {
    if (($2 | 0) != HEAP32[$0 + 56 >> 2]) {
     HEAP32[$2 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 52 >> 2] = $2 + 4;
     break label$8;
    }
    void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($5, $1 + 12 | 0);
   }
   $4 = $4 + 1 | 0;
   if ($4 >>> 0 < (HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] | 0) / 12 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 24 >> 2] = 67108864;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP8[$1 + 20 | 0] = 0;
 HEAP32[$1 + 16 >> 2] = 544765046;
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
 $3 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $4 = HEAP8[$2 + 11 | 0];
 HEAP32[$2 + 8 >> 2] = 0;
 if (($4 | 0) < 0) {
  dlfree($3);
 }
 if (HEAP8[$1 + 27 | 0] <= -1) {
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 if (HEAP32[$0 + 36 >> 2] != HEAP32[$0 + 32 >> 2]) {
  $5 = $0 + 48 | 0;
  $4 = 0;
  while (1) {
   $6 = glCreateShader(35632) | 0;
   HEAP32[$1 + 12 >> 2] = $6;
   HEAP32[$1 + 16 >> 2] = HEAP8[$1 + 43 | 0] < 0 ? HEAP32[$1 + 32 >> 2] : $1 + 32 | 0;
   $3 = $1;
   $2 = HEAP32[$0 + 32 >> 2] + Math_imul($4, 12) | 0;
   if (HEAP8[$2 + 11 | 0] <= -1) {
    $2 = HEAP32[$2 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = $2;
   glShaderSource($6 | 0, 2, $1 + 16 | 0, 0);
   glCompileShader(HEAP32[$1 + 12 >> 2]);
   glAttachShader(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
   ShaderProgram__printShaderInfoLog_28unsigned_20int_29(HEAP32[$1 + 12 >> 2]);
   $2 = HEAP32[$0 + 52 >> 2];
   label$16 : {
    if (($2 | 0) != HEAP32[$0 + 56 >> 2]) {
     HEAP32[$2 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 52 >> 2] = $2 + 4;
     break label$16;
    }
    void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($5, $1 + 12 | 0);
   }
   $4 = $4 + 1 | 0;
   if ($4 >>> 0 < (HEAP32[$0 + 36 >> 2] - HEAP32[$0 + 32 >> 2] | 0) / 12 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 24 >> 2] = 83886080;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = HEAPU8[4419] | HEAPU8[4420] << 8 | (HEAPU8[4421] << 16 | HEAPU8[4422] << 24);
 HEAP8[$1 + 20 | 0] = HEAPU8[4423];
 HEAP8[$1 + 21 | 0] = 0;
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
 $3 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $4 = HEAP8[$2 + 11 | 0];
 HEAP32[$2 + 8 >> 2] = 0;
 if (($4 | 0) < 0) {
  dlfree($3);
 }
 if (HEAP8[$1 + 27 | 0] <= -1) {
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 label$20 : {
  if (HEAP32[$0 + 52 >> 2] == HEAP32[$0 + 48 >> 2]) {
   break label$20;
  }
  glLinkProgram(HEAP32[$0 + 4 >> 2]);
  HEAP32[$1 + 24 >> 2] = 83886080;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = HEAPU8[4425] | HEAPU8[4426] << 8 | (HEAPU8[4427] << 16 | HEAPU8[4428] << 24);
  HEAP8[$1 + 20 | 0] = HEAPU8[4429];
  HEAP8[$1 + 21 | 0] = 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
  $3 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $4 = HEAP8[$2 + 11 | 0];
  HEAP32[$2 + 8 >> 2] = 0;
  if (($4 | 0) <= -1) {
   dlfree($3);
  }
  if (HEAP8[$1 + 27 | 0] <= -1) {
   dlfree(HEAP32[$1 + 16 >> 2]);
  }
  $2 = ShaderProgram__printProgramInfoLog_28unsigned_20int_29(HEAP32[$0 + 4 >> 2]);
  HEAP8[$0 + 44 | 0] = $2;
  if ($2) {
   $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4431, 12), HEAP32[$0 + 4 >> 2]);
   $3 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
   HEAP32[$1 + 16 >> 2] = $3;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 16 | 0, 51440);
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   $3 = HEAP32[$1 + 16 >> 2];
   $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
   HEAP32[$3 + 4 >> 2] = $4;
   if (($4 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $5);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
  }
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP8[$1 + 24 | 0] = HEAPU8[4452];
  $2 = HEAPU8[4448] | HEAPU8[4449] << 8 | (HEAPU8[4450] << 16 | HEAPU8[4451] << 24);
  HEAP32[$1 + 16 >> 2] = HEAPU8[4444] | HEAPU8[4445] << 8 | (HEAPU8[4446] << 16 | HEAPU8[4447] << 24);
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP8[$1 + 27 | 0] = 9;
  HEAP8[$1 + 25 | 0] = 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
  $3 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $4 = HEAP8[$2 + 11 | 0];
  HEAP32[$2 + 8 >> 2] = 0;
  if (($4 | 0) <= -1) {
   dlfree($3);
  }
  if (HEAP8[$1 + 27 | 0] <= -1) {
   dlfree(HEAP32[$1 + 16 >> 2]);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
  HEAP32[$1 + 24 >> 2] = 83886080;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = HEAPU8[4454] | HEAPU8[4455] << 8 | (HEAPU8[4456] << 16 | HEAPU8[4457] << 24);
  HEAP8[$1 + 20 | 0] = HEAPU8[4458];
  HEAP8[$1 + 21 | 0] = 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($1 + 16 | 0);
  $3 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $4 = HEAP8[$2 + 11 | 0];
  HEAP32[$2 + 8 >> 2] = 0;
  if (($4 | 0) <= -1) {
   dlfree($3);
  }
  if (HEAP8[$1 + 27 | 0] > -1) {
   break label$20;
  }
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 if (HEAP8[$1 + 43 | 0] <= -1) {
  dlfree(HEAP32[$1 + 32 >> 2]);
 }
 global$0 = $1 + 48 | 0;
}
function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $10 = global$0 - 112 | 0;
 global$0 = $10;
 $13 = $7;
 $12 = $8 & 2147483647;
 $11 = $2 + -1 | 0;
 $9 = $1 + -1 | 0;
 if ($9 >>> 0 < 4294967295) {
  $11 = $11 + 1 | 0;
 }
 $14 = $9;
 $17 = ($9 | 0) == -1 & ($11 | 0) == -1;
 $15 = $4 & 2147483647;
 $9 = $15;
 $16 = $3;
 $11 = ($2 | 0) == ($11 | 0) & $14 >>> 0 < $1 >>> 0 | $11 >>> 0 < $2 >>> 0;
 $14 = $3 + $11 | 0;
 if ($14 >>> 0 < $11 >>> 0) {
  $9 = $9 + 1 | 0;
 }
 $11 = $14 + -1 | 0;
 $9 = $9 + -1 | 0;
 $9 = $11 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
 label$1 : {
  label$2 : {
   if (!(($11 | 0) == -1 & ($9 | 0) == 2147418111 ? $17 : ($9 | 0) == 2147418111 & $11 >>> 0 > 4294967295 | $9 >>> 0 > 2147418111)) {
    $11 = $6 + -1 | 0;
    $9 = $5 + -1 | 0;
    if ($9 >>> 0 < 4294967295) {
     $11 = $11 + 1 | 0;
    }
    $14 = $9;
    $17 = ($9 | 0) != -1 | ($11 | 0) != -1;
    $9 = $12;
    $11 = ($6 | 0) == ($11 | 0) & $14 >>> 0 < $5 >>> 0 | $11 >>> 0 < $6 >>> 0;
    $14 = $11 + $13 | 0;
    if ($14 >>> 0 < $11 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $11 = $14 + -1 | 0;
    $9 = $9 + -1 | 0;
    $9 = $11 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
    if (($11 | 0) == -1 & ($9 | 0) == 2147418111 ? $17 : ($9 | 0) == 2147418111 & $11 >>> 0 < 4294967295 | $9 >>> 0 < 2147418111) {
     break label$2;
    }
   }
   if (!(!$16 & ($15 | 0) == 2147418112 ? !($1 | $2) : ($15 | 0) == 2147418112 & $16 >>> 0 < 0 | $15 >>> 0 < 2147418112)) {
    $7 = $3;
    $8 = $4 | 32768;
    $5 = $1;
    $6 = $2;
    break label$1;
   }
   if (!(!$13 & ($12 | 0) == 2147418112 ? !($5 | $6) : ($12 | 0) == 2147418112 & $13 >>> 0 < 0 | $12 >>> 0 < 2147418112)) {
    $8 = $8 | 32768;
    break label$1;
   }
   if (!($1 | $16 | ($15 ^ 2147418112 | $2))) {
    $9 = $3;
    $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
    $7 = $3 ? 0 : $9;
    $8 = $3 ? 2147450880 : $4;
    $5 = $3 ? 0 : $1;
    $6 = $3 ? 0 : $2;
    break label$1;
   }
   if (!($5 | $13 | ($12 ^ 2147418112 | $6))) {
    break label$1;
   }
   if (!($1 | $16 | ($2 | $15))) {
    if ($5 | $13 | ($6 | $12)) {
     break label$1;
    }
    $5 = $1 & $5;
    $6 = $2 & $6;
    $7 = $3 & $7;
    $8 = $4 & $8;
    break label$1;
   }
   if ($5 | $13 | ($6 | $12)) {
    break label$2;
   }
   $5 = $1;
   $6 = $2;
   $7 = $3;
   $8 = $4;
   break label$1;
  }
  $9 = ($13 | 0) == ($16 | 0) & ($12 | 0) == ($15 | 0) ? ($2 | 0) == ($6 | 0) & $5 >>> 0 > $1 >>> 0 | $6 >>> 0 > $2 >>> 0 : ($12 | 0) == ($15 | 0) & $13 >>> 0 > $16 >>> 0 | $12 >>> 0 > $15 >>> 0;
  $15 = $9 ? $5 : $1;
  $11 = $9 ? $6 : $2;
  $13 = $9 ? $8 : $4;
  $16 = $13;
  $18 = $9 ? $7 : $3;
  $14 = $18;
  $13 = $13 & 65535;
  $4 = $9 ? $4 : $8;
  $19 = $4;
  $3 = $9 ? $3 : $7;
  $17 = $4 >>> 16 & 32767;
  $12 = $16 >>> 16 & 32767;
  if (!$12) {
   $4 = !($13 | $14);
   $7 = $4 << 6;
   $8 = Math_clz32($4 ? $15 : $14) + 32 | 0;
   $4 = Math_clz32($4 ? $11 : $13);
   $4 = $7 + (($4 | 0) == 32 ? $8 : $4) | 0;
   __ashlti3($10 + 96 | 0, $15, $11, $14, $13, $4 + -15 | 0);
   $14 = HEAP32[$10 + 104 >> 2];
   $13 = HEAP32[$10 + 108 >> 2];
   $15 = HEAP32[$10 + 96 >> 2];
   $12 = 16 - $4 | 0;
   $11 = HEAP32[$10 + 100 >> 2];
  }
  $5 = $9 ? $1 : $5;
  $6 = $9 ? $2 : $6;
  $1 = $3;
  $2 = $19 & 65535;
  if ($17) {
   $4 = $1;
  } else {
   $8 = $1;
   $4 = !($1 | $2);
   $7 = $4 << 6;
   $9 = Math_clz32($4 ? $5 : $1) + 32 | 0;
   $1 = Math_clz32($4 ? $6 : $2);
   $1 = $7 + (($1 | 0) == 32 ? $9 : $1) | 0;
   __ashlti3($10 + 80 | 0, $5, $6, $8, $2, $1 + -15 | 0);
   $17 = 16 - $1 | 0;
   $5 = HEAP32[$10 + 80 >> 2];
   $6 = HEAP32[$10 + 84 >> 2];
   $4 = HEAP32[$10 + 88 >> 2];
   $2 = HEAP32[$10 + 92 >> 2];
  }
  $2 = $2 << 3 | $4 >>> 29;
  $7 = $4 << 3 | $6 >>> 29;
  $8 = $2 | 524288;
  $1 = $14;
  $9 = $13 << 3 | $1 >>> 29;
  $13 = $1 << 3 | $11 >>> 29;
  $14 = $9;
  $18 = $3 ^ $18;
  $9 = $16 ^ $19;
  $1 = $5;
  $2 = $6 << 3 | $1 >>> 29;
  $1 = $1 << 3;
  $4 = $2;
  $5 = $12 - $17 | 0;
  $3 = $1;
  label$11 : {
   if (!$5) {
    break label$11;
   }
   if ($5 >>> 0 > 127) {
    $7 = 0;
    $8 = 0;
    $2 = 0;
    $3 = 1;
    break label$11;
   }
   __ashlti3($10 - -64 | 0, $1, $4, $7, $8, 128 - $5 | 0);
   __lshrti3($10 + 48 | 0, $1, $4, $7, $8, $5);
   $7 = HEAP32[$10 + 56 >> 2];
   $8 = HEAP32[$10 + 60 >> 2];
   $2 = HEAP32[$10 + 52 >> 2];
   $3 = HEAP32[$10 + 48 >> 2] | ((HEAP32[$10 + 64 >> 2] | HEAP32[$10 + 72 >> 2]) != 0 | (HEAP32[$10 + 68 >> 2] | HEAP32[$10 + 76 >> 2]) != 0);
  }
  $6 = $2;
  $4 = $13;
  $13 = $14 | 524288;
  $1 = $15;
  $2 = $11 << 3 | $1 >>> 29;
  $5 = $1 << 3;
  label$13 : {
   if (($9 | 0) < -1 ? 1 : ($9 | 0) <= -1 ? $18 >>> 0 > 4294967295 ? 0 : 1 : 0) {
    $9 = $5;
    $11 = $3;
    $1 = $9 - $3 | 0;
    $15 = $4 - $7 | 0;
    $3 = ($2 | 0) == ($6 | 0) & $9 >>> 0 < $3 >>> 0 | $2 >>> 0 < $6 >>> 0;
    $5 = $15 - $3 | 0;
    $2 = $2 - (($9 >>> 0 < $11 >>> 0) + $6 | 0) | 0;
    $6 = ($13 - (($4 >>> 0 < $7 >>> 0) + $8 | 0) | 0) - ($15 >>> 0 < $3 >>> 0) | 0;
    if (!($1 | $5 | ($2 | $6))) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     break label$1;
    }
    if (($6 | 0) == 524287 & $5 >>> 0 > 4294967295 | $6 >>> 0 > 524287) {
     break label$13;
    }
    $7 = $1;
    $3 = !($5 | $6);
    $4 = $3 << 6;
    $8 = Math_clz32($3 ? $1 : $5) + 32 | 0;
    $1 = Math_clz32($3 ? $2 : $6);
    $1 = $4 + (($1 | 0) == 32 ? $8 : $1) | 0;
    $1 = $1 + -12 | 0;
    __ashlti3($10 + 32 | 0, $7, $2, $5, $6, $1);
    $12 = $12 - $1 | 0;
    $5 = HEAP32[$10 + 40 >> 2];
    $6 = HEAP32[$10 + 44 >> 2];
    $1 = HEAP32[$10 + 32 >> 2];
    $2 = HEAP32[$10 + 36 >> 2];
    break label$13;
   }
   $2 = $2 + $6 | 0;
   $1 = $3;
   $5 = $1 + $5 | 0;
   if ($5 >>> 0 < $1 >>> 0) {
    $2 = $2 + 1 | 0;
   }
   $1 = $5;
   $5 = ($2 | 0) == ($6 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $6 >>> 0;
   $9 = $8 + $13 | 0;
   $3 = $4 + $7 | 0;
   if ($3 >>> 0 < $4 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $4 = $3;
   $3 = $5 + $4 | 0;
   if ($3 >>> 0 < $4 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $5 = $3;
   $6 = $9;
   if (!($9 & 1048576)) {
    break label$13;
   }
   $9 = $5 << 31;
   $1 = $1 & 1 | (($2 & 1) << 31 | $1 >>> 1);
   $2 = $9 | $2 >>> 1;
   $12 = $12 + 1 | 0;
   $5 = ($6 & 1) << 31 | $5 >>> 1;
   $6 = $6 >>> 1;
  }
  $7 = 0;
  $8 = $16 & -2147483648;
  if (($12 | 0) >= 32767) {
   $8 = $8 | 2147418112;
   $5 = 0;
   $6 = 0;
   break label$1;
  }
  $3 = 0;
  label$17 : {
   if (($12 | 0) > 0) {
    $3 = $12;
    break label$17;
   }
   __ashlti3($10 + 16 | 0, $1, $2, $5, $6, $12 + 127 | 0);
   __lshrti3($10, $1, $2, $5, $6, 1 - $12 | 0);
   $1 = HEAP32[$10 >> 2] | ((HEAP32[$10 + 16 >> 2] | HEAP32[$10 + 24 >> 2]) != 0 | (HEAP32[$10 + 20 >> 2] | HEAP32[$10 + 28 >> 2]) != 0);
   $2 = HEAP32[$10 + 4 >> 2];
   $5 = HEAP32[$10 + 8 >> 2];
   $6 = HEAP32[$10 + 12 >> 2];
  }
  $9 = $5 << 29;
  $12 = ($2 & 7) << 29 | $1 >>> 3;
  $9 = $2 >>> 3 | $9;
  $2 = $9;
  $13 = $1 & 7;
  $1 = $13 >>> 0 > 4;
  $4 = $1 + $12 | 0;
  if ($4 >>> 0 < $1 >>> 0) {
   $2 = $2 + 1 | 0;
  }
  $11 = $4;
  $1 = $4;
  $4 = $2;
  $1 = ($9 | 0) == ($2 | 0) & $1 >>> 0 < $12 >>> 0 | $2 >>> 0 < $9 >>> 0;
  $5 = $7 | (($6 & 7) << 29 | $5 >>> 3);
  $6 = $8 | $6 >>> 3 & 65535;
  $2 = $3 << 16;
  $1 = $5 + $1 | 0;
  $2 = $2 | $6;
  $2 = $1 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
  $3 = $1;
  $5 = ($13 | 0) == 4;
  $1 = $5 ? $11 & 1 : 0;
  $5 = $4;
  $4 = 0;
  $9 = $5 + $4 | 0;
  $5 = $1 + $11 | 0;
  if ($5 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $6 = $9;
  $1 = ($4 | 0) == ($9 | 0) & $5 >>> 0 < $1 >>> 0 | $9 >>> 0 < $4 >>> 0;
  $3 = $3 + $1 | 0;
  if ($3 >>> 0 < $1 >>> 0) {
   $2 = $2 + 1 | 0;
  }
  $7 = $3;
  $8 = $2;
 }
 HEAP32[$0 >> 2] = $5;
 HEAP32[$0 + 4 >> 2] = $6;
 HEAP32[$0 + 8 >> 2] = $7;
 HEAP32[$0 + 12 >> 2] = $8;
 global$0 = $10 + 112 | 0;
}
function CubeDocBase__loadMinText_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 - 240 | 0;
 global$0 = $2;
 $1 = std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_istringstream_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int_29($2 + 96 | 0, $1);
 HEAP32[$2 + 92 >> 2] = 0;
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29($1, $2 + 92 | 0);
 $4 = HEAP32[$2 + 92 >> 2];
 label$1 : {
  if (!$4) {
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6439, 17);
   $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 24 | 0, 51440);
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   $3 = HEAP32[$2 + 24 >> 2];
   $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
   HEAP32[$3 + 4 >> 2] = $4;
   if (($4 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $5);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 50;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 50;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 50;
  label$5 : {
   if (($4 | 0) >= 1) {
    $5 = $1 + 16 | 0;
    while (1) {
     std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29($1, $2 + 88 | 0), $2 + 84 | 0), $2 + 80 | 0), $2 + 76 | 0);
     if (HEAP32[$5 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] >> 2]) {
      $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6457, 26), $3);
      $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
      HEAP32[$2 + 8 >> 2] = $3;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 51440);
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
      $3 = HEAP32[$2 + 8 >> 2];
      $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
      HEAP32[$3 + 4 >> 2] = $4;
      if (($4 | 0) == -1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $5);
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
      break label$5;
     }
     $6 = HEAP32[$2 + 76 >> 2];
     HEAP32[$2 + 20 >> 2] = $6;
     $7 = HEAP32[$2 + 80 >> 2];
     HEAP32[$2 + 16 >> 2] = $7;
     $8 = HEAP32[$2 + 84 >> 2];
     HEAP32[$2 + 12 >> 2] = $8;
     $9 = HEAP32[$2 + 88 >> 2];
     HEAP32[$2 + 8 >> 2] = $9;
     $4 = HEAP32[$2 + 28 >> 2];
     label$11 : {
      if ($4 >>> 0 < HEAPU32[$2 + 32 >> 2]) {
       HEAP32[$4 + 12 >> 2] = $6;
       HEAP32[$4 + 8 >> 2] = $7;
       HEAP32[$4 + 4 >> 2] = $8;
       HEAP32[$4 >> 2] = $9;
       HEAP32[$2 + 28 >> 2] = $4 + 16;
       break label$11;
      }
      void_20std____2__vector_OrderTemplate__LoadedFace_2c_20std____2__allocator_OrderTemplate__LoadedFace__20_____push_back_slow_path_OrderTemplate__LoadedFace__28OrderTemplate__LoadedFace___29($2 + 24 | 0, $2 + 8 | 0);
     }
     $3 = $3 + 1 | 0;
     $4 = HEAP32[$2 + 92 >> 2];
     if (($3 | 0) < ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   label$13 : {
    if (($4 | 0) >= 1) {
     $5 = $1 + 16 | 0;
     while (1) {
      std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29($1, $2 + 72 | 0);
      if (HEAP32[$5 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] >> 2]) {
       $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6484, 29), $3);
       $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
       HEAP32[$2 >> 2] = $3;
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2, 51440);
       $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
       $3 = HEAP32[$2 >> 2];
       $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
       HEAP32[$3 + 4 >> 2] = $4;
       if (($4 | 0) == -1) {
        FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $5);
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
       break label$13;
      }
      std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29($1, $2 + 68 | 0);
      HEAP32[$2 >> 2] = HEAP32[$2 + 72 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 68 >> 2];
      $4 = HEAP32[$2 + 12 >> 2];
      label$19 : {
       if ($4 >>> 0 < HEAPU32[$2 + 16 >> 2]) {
        $6 = HEAP32[$2 + 4 >> 2];
        HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$4 + 4 >> 2] = $6;
        HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 8;
        break label$19;
       }
       void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($2 + 8 | 0, $2);
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) < HEAP32[$2 + 92 >> 2]) {
       continue;
      }
      break;
     }
    }
    CubeDocBase__generateFromFaces_28OrderTemplate__29($0, $2 + 24 | 0);
    CubeDocBase__addSlvMin_28std____2__vector_std____2__pair_int_2c_20int__2c_20std____2__allocator_std____2__pair_int_2c_20int__20__20__20const__29($0, $2 + 8 | 0);
   }
   $0 = HEAP32[$2 + 8 >> 2];
   if (!$0) {
    break label$5;
   }
   HEAP32[$2 + 12 >> 2] = $0;
   dlfree($0);
  }
  $0 = HEAP32[$2 + 24 >> 2];
  if (!$0) {
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = $0;
  dlfree($0);
 }
 HEAP32[$1 + 60 >> 2] = 16408;
 HEAP32[$1 >> 2] = 16388;
 HEAP32[$1 + 8 >> 2] = 3296;
 if (HEAP8[$1 + 51 | 0] <= -1) {
  dlfree(HEAP32[$1 + 40 >> 2]);
 }
 $0 = $1 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($1 + 8 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0);
 global$0 = $2 + 240 | 0;
}
function PicsSet__add_28int_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = global$0 - 336 | 0;
 global$0 = $3;
 $4 = HEAP32[11988];
 $8 = HEAP32[$4 + 16 >> 2];
 $6 = $8 + Math_imul($1, 652) | 0;
 $7 = $2 ? (HEAPU8[(HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$6 >> 2], 152) | 0) + 36 | 0] & 16) >>> 4 : $7;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      $2 = HEAP32[$0 + 4 >> 2];
      $5 = HEAP32[$0 >> 2];
      label$7 : {
       if (($2 | 0) == ($5 | 0)) {
        break label$7;
       }
       $11 = ($2 - $5 | 0) / 324 | 0;
       $8 = ($8 + Math_imul($1, 652) | 0) + 8 | 0;
       $4 = 0;
       if ($7) {
        while (1) {
         $9 = $5 + Math_imul($4, 324) | 0;
         label$10 : {
          if (!HEAPU8[$9 + 308 | 0]) {
           break label$10;
          }
          $2 = 0;
          $10 = HEAP32[$9 >> 2];
          if (($10 | 0) < 1) {
           break label$10;
          }
          while (1) {
           if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const(($9 + ($2 << 5) | 0) + 4 | 0, $8, 1)) {
            break label$6;
           }
           $2 = $2 + 1 | 0;
           if (($2 | 0) < ($10 | 0)) {
            continue;
           }
           break;
          }
         }
         $4 = $4 + 1 | 0;
         if ($4 >>> 0 < $11 >>> 0) {
          continue;
         }
         break label$7;
        }
       }
       while (1) {
        $2 = 0;
        $9 = $5 + Math_imul($4, 324) | 0;
        $10 = HEAP32[$9 >> 2];
        if (($10 | 0) >= 1) {
         while (1) {
          if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const(($9 + ($2 << 5) | 0) + 4 | 0, $8, 0)) {
           break label$6;
          }
          $2 = $2 + 1 | 0;
          if (($2 | 0) < ($10 | 0)) {
           continue;
          }
          break;
         }
        }
        $4 = $4 + 1 | 0;
        if ($4 >>> 0 < $11 >>> 0) {
         continue;
        }
        break;
       }
      }
      HEAP32[$3 + 40 >> 2] = -1;
      HEAP32[$3 + 20 >> 2] = 0;
      HEAP32[$3 + 24 >> 2] = 0;
      HEAP32[$3 + 28 >> 2] = 0;
      HEAP32[$3 + 32 >> 2] = 0;
      HEAP16[$3 + 36 >> 1] = 0;
      HEAP32[$3 + 72 >> 2] = -1;
      HEAP32[$3 + 44 >> 2] = 0;
      HEAP32[$3 + 48 >> 2] = 0;
      HEAP32[$3 + 52 >> 2] = 0;
      HEAP32[$3 + 56 >> 2] = 0;
      HEAP32[$3 + 60 >> 2] = 0;
      HEAP32[$3 + 64 >> 2] = 0;
      HEAP16[$3 + 68 >> 1] = 0;
      HEAP32[$3 + 104 >> 2] = -1;
      HEAP32[$3 + 76 >> 2] = 0;
      HEAP32[$3 + 80 >> 2] = 0;
      HEAP32[$3 + 84 >> 2] = 0;
      HEAP32[$3 + 88 >> 2] = 0;
      HEAP32[$3 + 92 >> 2] = 0;
      HEAP32[$3 + 96 >> 2] = 0;
      HEAP16[$3 + 100 >> 1] = 0;
      HEAP8[$3 + 133 | 0] = 0;
      HEAP32[$3 + 136 >> 2] = -1;
      HEAP32[$3 + 8 >> 2] = 0;
      HEAP32[$3 + 12 >> 2] = 0;
      HEAP32[$3 + 16 >> 2] = 0;
      HEAP8[$3 + 132 | 0] = 0;
      HEAP32[$3 + 124 >> 2] = 0;
      HEAP32[$3 + 128 >> 2] = 0;
      HEAP32[$3 + 116 >> 2] = 0;
      HEAP32[$3 + 120 >> 2] = 0;
      HEAP32[$3 + 108 >> 2] = 0;
      HEAP32[$3 + 112 >> 2] = 0;
      HEAP32[$3 + 168 >> 2] = -1;
      HEAP16[$3 + 164 >> 1] = 0;
      HEAP32[$3 + 140 >> 2] = 0;
      HEAP32[$3 + 144 >> 2] = 0;
      HEAP32[$3 + 148 >> 2] = 0;
      HEAP32[$3 + 152 >> 2] = 0;
      HEAP32[$3 + 156 >> 2] = 0;
      HEAP32[$3 + 160 >> 2] = 0;
      HEAP32[$3 + 200 >> 2] = -1;
      HEAP16[$3 + 196 >> 1] = 0;
      HEAP32[$3 + 172 >> 2] = 0;
      HEAP32[$3 + 176 >> 2] = 0;
      HEAP32[$3 + 180 >> 2] = 0;
      HEAP32[$3 + 184 >> 2] = 0;
      HEAP32[$3 + 188 >> 2] = 0;
      HEAP32[$3 + 192 >> 2] = 0;
      HEAP16[$3 + 228 >> 1] = 0;
      HEAP32[$3 + 232 >> 2] = -1;
      HEAP32[$3 + 204 >> 2] = 0;
      HEAP32[$3 + 208 >> 2] = 0;
      HEAP32[$3 + 212 >> 2] = 0;
      HEAP32[$3 + 216 >> 2] = 0;
      HEAP32[$3 + 220 >> 2] = 0;
      HEAP32[$3 + 224 >> 2] = 0;
      HEAP32[$3 + 264 >> 2] = -1;
      HEAP16[$3 + 260 >> 1] = 0;
      HEAP32[$3 + 236 >> 2] = 0;
      HEAP32[$3 + 240 >> 2] = 0;
      HEAP32[$3 + 244 >> 2] = 0;
      HEAP32[$3 + 248 >> 2] = 0;
      HEAP32[$3 + 252 >> 2] = 0;
      HEAP32[$3 + 256 >> 2] = 0;
      HEAP32[$3 + 328 >> 2] = 0;
      HEAP32[$3 + 276 >> 2] = 0;
      HEAP32[$3 + 280 >> 2] = 0;
      HEAP8[$3 + 316 | 0] = 0;
      HEAP32[$3 + 320 >> 2] = 0;
      HEAP32[$3 + 324 >> 2] = 0;
      HEAP32[$3 + 268 >> 2] = 0;
      HEAP32[$3 + 272 >> 2] = 0;
      PicType__load_28PicDef_20const__2c_20bool_29($3 + 8 | 0, $6, $7);
      $2 = HEAP32[$0 + 16 >> 2];
      $4 = HEAP32[$0 + 12 >> 2];
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 >> 2] = $2 - $4 >> 3;
      $2 = HEAP32[$3 + 324 >> 2];
      if ($2 >>> 0 >= HEAPU32[$3 + 328 >> 2]) {
       break label$5;
      }
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$2 + 4 >> 2] = $4;
      HEAP32[$3 + 324 >> 2] = HEAP32[$3 + 324 >> 2] + 8;
      break label$4;
     }
     $6 = HEAP32[$0 + 16 >> 2];
     $7 = HEAP32[$0 + 12 >> 2];
     $8 = $2 << 5;
     $2 = $5 + Math_imul($4, 324) | 0;
     HEAP32[$3 + 12 >> 2] = HEAP32[($8 + $2 | 0) + 32 >> 2];
     HEAP32[$3 + 8 >> 2] = $6 - $7 >> 3;
     $5 = HEAP32[$2 + 316 >> 2];
     if ($5 >>> 0 < HEAPU32[$2 + 320 >> 2]) {
      $6 = HEAP32[$3 + 12 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      HEAP32[$2 + 316 >> 2] = HEAP32[$2 + 316 >> 2] + 8;
      break label$3;
     }
     void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($2 + 312 | 0, $3 + 8 | 0);
     break label$3;
    }
    void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($3 + 320 | 0, $3);
   }
   $2 = HEAP32[$0 + 4 >> 2];
   $4 = ($2 - HEAP32[$0 >> 2] | 0) / 324 | 0;
   label$16 : {
    if (($2 | 0) != HEAP32[$0 + 8 >> 2]) {
     $2 = memcpy($2, $3 + 8 | 0, 309);
     HEAP32[$2 + 320 >> 2] = 0;
     HEAP32[$2 + 312 >> 2] = 0;
     HEAP32[$2 + 316 >> 2] = 0;
     $5 = HEAP32[$3 + 324 >> 2] - HEAP32[$3 + 320 >> 2] | 0;
     label$18 : {
      if (!$5) {
       break label$18;
      }
      $6 = $5 >> 3;
      if ($6 >>> 0 >= 536870912) {
       break label$2;
      }
      $5 = operator_20new_28unsigned_20long_29($5);
      HEAP32[$2 + 312 >> 2] = $5;
      HEAP32[$2 + 316 >> 2] = $5;
      HEAP32[$2 + 320 >> 2] = $5 + ($6 << 3);
      $7 = HEAP32[$3 + 320 >> 2];
      $6 = HEAP32[$3 + 324 >> 2] - $7 | 0;
      if (($6 | 0) < 1) {
       break label$18;
      }
      HEAP32[$2 + 316 >> 2] = memcpy($5, $7, $6) + $6;
     }
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 324;
     break label$16;
    }
    void_20std____2__vector_PicType_2c_20std____2__allocator_PicType__20_____push_back_slow_path_PicType_20const___28PicType_20const__29($0, $3 + 8 | 0);
   }
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + HEAP32[$3 + 8 >> 2];
   $2 = HEAP32[$3 + 320 >> 2];
   if (!$2) {
    break label$3;
   }
   HEAP32[$3 + 324 >> 2] = $2;
   dlfree($2);
  }
  HEAP32[$3 + 12 >> 2] = $4;
  HEAP32[$3 + 8 >> 2] = $1;
  $1 = HEAP32[$0 + 16 >> 2];
  label$19 : {
   if ($1 >>> 0 < HEAPU32[$0 + 20 >> 2]) {
    $2 = HEAP32[$3 + 12 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 8;
    break label$19;
   }
   void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($0 + 12 | 0, $3 + 8 | 0);
  }
  global$0 = $3 + 336 | 0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function textureParamCube_28int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = Math_fround($6);
 $7 = Math_fround($7);
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $17 = global$0 - 16 | 0;
 global$0 = $17;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($0 | 0) >= 0) {
     $18 = HEAP32[11988];
     $19 = HEAP32[$18 + 4 >> 2];
     if ((HEAP32[$18 + 8 >> 2] - $19 | 0) / 152 >>> 0 > $0 >>> 0) {
      break label$3;
     }
    }
    $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1700, 18), $0);
    $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
    HEAP32[$17 + 8 >> 2] = $1;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($17 + 8 | 0, 51440);
    $9 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
    $1 = HEAP32[$17 + 8 >> 2];
    $8 = HEAP32[$1 + 4 >> 2] + -1 | 0;
    HEAP32[$1 + 4 >> 2] = $8;
    if (($8 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $9);
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
    break label$2;
   }
   $16 = Math_imul($0, 152) + $19 | 0;
   HEAPF32[$16 + 52 >> 2] = $5;
   HEAPF32[$16 + 40 >> 2] = $2;
   HEAP8[$16 + 68 | 0] = $14;
   HEAP32[$16 + 64 >> 2] = (($8 | 0) != 0) << 1;
   HEAPF32[$16 + 60 >> 2] = $7;
   HEAPF32[$16 + 56 >> 2] = $6;
   HEAPF32[$16 + 48 >> 2] = $4;
   HEAPF32[$16 + 44 >> 2] = $3;
   $20 = HEAP32[$16 + 36 >> 2];
   HEAP32[$16 + 36 >> 2] = $1;
   label$7 : {
    label$8 : {
     if ($1 >>> 0 > 20) {
      break label$8;
     }
     label$9 : {
      switch ($1 - 1 | 0) {
      default:
       $8 = Math_imul($0, 152) + $19 | 0;
       HEAP32[$8 + 12 >> 2] = 0;
       $1 = HEAP32[$8 + 16 >> 2];
       HEAP32[$8 + 16 >> 2] = 0;
       if (!$1) {
        break label$7;
       }
       $8 = HEAP32[$1 + 4 >> 2];
       HEAP32[$1 + 4 >> 2] = $8 + -1;
       if ($8) {
        break label$7;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
       std____2____shared_weak_count____release_weak_28_29($1);
       break label$7;
      case 1:
      case 3:
       $1 = HEAP32[$18 + 40 >> 2];
       if (($1 | 0) == HEAP32[$18 + 44 >> 2]) {
        break label$1;
       }
       $14 = Math_imul($0, 152) + $19 | 0;
       $16 = $14;
       $18 = HEAP32[$1 >> 2];
       $8 = HEAP32[$1 + 4 >> 2];
       if ($8) {
        HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
       }
       HEAP32[$16 + 12 >> 2] = $18;
       $1 = HEAP32[$14 + 16 >> 2];
       HEAP32[$14 + 16 >> 2] = $8;
       if (!$1) {
        break label$7;
       }
       $8 = HEAP32[$1 + 4 >> 2];
       HEAP32[$1 + 4 >> 2] = $8 + -1;
       if ($8) {
        break label$7;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
       std____2____shared_weak_count____release_weak_28_29($1);
       break label$7;
      case 0:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
       break label$8;
      case 19:
       break label$9;
      }
     }
     $14 = Math_imul($0, 152) + $19 | 0;
     $1 = $14;
     $16 = HEAP32[11850];
     $8 = HEAP32[11851];
     if ($8) {
      HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
     }
     HEAP32[$1 + 12 >> 2] = $16;
     $1 = HEAP32[$14 + 16 >> 2];
     HEAP32[$14 + 16 >> 2] = $8;
     label$14 : {
      if (!$1) {
       break label$14;
      }
      $8 = HEAP32[$1 + 4 >> 2];
      HEAP32[$1 + 4 >> 2] = $8 + -1;
      if ($8) {
       break label$14;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
      std____2____shared_weak_count____release_weak_28_29($1);
     }
     if (!$15 | ($20 | 0) == 20) {
      break label$7;
     }
     PicBucket__makeAllComp_28_29($18);
     break label$7;
    }
    $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1743, 20), HEAP32[$16 + 36 >> 2]);
    $8 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 28 >> 2];
    HEAP32[$17 >> 2] = $8;
    HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] + 1;
    $8 = std____2__locale__use_facet_28std____2__locale__id__29_20const($17, 51440);
    $16 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 28 >> 2]]($8, 10) | 0;
    $8 = HEAP32[$17 >> 2];
    $14 = HEAP32[$8 + 4 >> 2] + -1 | 0;
    HEAP32[$8 + 4 >> 2] = $14;
    if (($14 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 8 >> 2]]($8);
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $16);
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
   }
   $0 = Math_imul($0, 152) + $19 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 136 | 0, $13);
   HEAP32[$0 + 132 >> 2] = $12;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 96 | 0, $9);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 108 | 0, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 120 | 0, $11);
   if (!$15) {
    break label$2;
   }
   $0 = HEAP32[11720];
   if (HEAPU8[$0 + 2612 | 0]) {
    break label$2;
   }
   HEAP8[$0 + 2612 | 0] = 1;
   emscripten_asm_const_iii(2692, 1076, 0) | 0;
  }
  global$0 = $17 + 16 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 1719);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 96 | 0, 35136);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 36 >> 2] = $3;
 HEAP8[$1 + 111 | 0] = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0);
 $4 = $1;
 $2 = HEAP32[$0 >> 2];
 if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 1) {
  $2 = HEAPU8[$2 + 1 | 0];
 } else {
  $2 = 0;
 }
 HEAP8[$4 + 95 | 0] = ($2 & 255) == 97;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 80 | 0, 39016);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 28 >> 2] = $3;
 label$3 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 72 | 0, 39019);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 20 >> 2] = $3;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    break label$3;
   }
  }
  $4 = $0 + 8 | 0;
  $2 = HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 2;
  label$5 : {
   while (1) {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$5;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$1 + 64 >> 2] = $3;
    if ($3) {
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $1 - -64 | 0);
     continue;
    }
    break;
   }
   break label$3;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 - -64 | 0, $0, $2);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 60 >> 2] = $3;
  if (!$3) {
   break label$3;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 39022);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   $2 = HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 2;
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 40 >> 2] = $3;
     if (!$3) {
      break label$3;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $1 + 40 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 40 | 0, $0, $2);
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $1 + 40 | 0, $1 + 111 | 0, $1 + 95 | 0);
   break label$3;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$3;
  }
  $3 = $1 + 40 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $3, $1 + 111 | 0, $1 + 95 | 0);
 }
 global$0 = $1 + 112 | 0;
 return $5;
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $3 = $0 + -8 | 0;
  $2 = HEAP32[$0 + -4 >> 2];
  $0 = $2 & -8;
  $5 = $3 + $0 | 0;
  label$2 : {
   if ($2 & 1) {
    break label$2;
   }
   if (!($2 & 3)) {
    break label$1;
   }
   $2 = HEAP32[$3 >> 2];
   $3 = $3 - $2 | 0;
   if ($3 >>> 0 < HEAPU32[13331]) {
    break label$1;
   }
   $0 = $0 + $2 | 0;
   if (HEAP32[13332] != ($3 | 0)) {
    if ($2 >>> 0 <= 255) {
     $4 = HEAP32[$3 + 8 >> 2];
     $2 = $2 >>> 3;
     $1 = HEAP32[$3 + 12 >> 2];
     if (($1 | 0) == ($4 | 0)) {
      HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $2);
      break label$2;
     }
     HEAP32[$4 + 12 >> 2] = $1;
     HEAP32[$1 + 8 >> 2] = $4;
     break label$2;
    }
    $7 = HEAP32[$3 + 24 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    label$6 : {
     if (($3 | 0) != ($2 | 0)) {
      $1 = HEAP32[$3 + 8 >> 2];
      HEAP32[$1 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $1;
      break label$6;
     }
     label$9 : {
      $4 = $3 + 20 | 0;
      $1 = HEAP32[$4 >> 2];
      if ($1) {
       break label$9;
      }
      $4 = $3 + 16 | 0;
      $1 = HEAP32[$4 >> 2];
      if ($1) {
       break label$9;
      }
      $2 = 0;
      break label$6;
     }
     while (1) {
      $6 = $4;
      $2 = $1;
      $4 = $2 + 20 | 0;
      $1 = HEAP32[$4 >> 2];
      if ($1) {
       continue;
      }
      $4 = $2 + 16 | 0;
      $1 = HEAP32[$2 + 16 >> 2];
      if ($1) {
       continue;
      }
      break;
     }
     HEAP32[$6 >> 2] = 0;
    }
    if (!$7) {
     break label$2;
    }
    $4 = HEAP32[$3 + 28 >> 2];
    $1 = ($4 << 2) + 53612 | 0;
    label$11 : {
     if (HEAP32[$1 >> 2] == ($3 | 0)) {
      HEAP32[$1 >> 2] = $2;
      if ($2) {
       break label$11;
      }
      HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $4);
      break label$2;
     }
     HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2;
     if (!$2) {
      break label$2;
     }
    }
    HEAP32[$2 + 24 >> 2] = $7;
    $1 = HEAP32[$3 + 16 >> 2];
    if ($1) {
     HEAP32[$2 + 16 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
    }
    $1 = HEAP32[$3 + 20 >> 2];
    if (!$1) {
     break label$2;
    }
    HEAP32[$2 + 20 >> 2] = $1;
    HEAP32[$1 + 24 >> 2] = $2;
    break label$2;
   }
   $2 = HEAP32[$5 + 4 >> 2];
   if (($2 & 3) != 3) {
    break label$2;
   }
   HEAP32[13329] = $0;
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$3 + 4 >> 2] = $0 | 1;
   HEAP32[$0 + $3 >> 2] = $0;
   return;
  }
  if ($5 >>> 0 <= $3 >>> 0) {
   break label$1;
  }
  $2 = HEAP32[$5 + 4 >> 2];
  if (!($2 & 1)) {
   break label$1;
  }
  label$14 : {
   if (!($2 & 2)) {
    if (HEAP32[13333] == ($5 | 0)) {
     HEAP32[13333] = $3;
     $0 = HEAP32[13330] + $0 | 0;
     HEAP32[13330] = $0;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     if (HEAP32[13332] != ($3 | 0)) {
      break label$1;
     }
     HEAP32[13329] = 0;
     HEAP32[13332] = 0;
     return;
    }
    if (HEAP32[13332] == ($5 | 0)) {
     HEAP32[13332] = $3;
     $0 = HEAP32[13329] + $0 | 0;
     HEAP32[13329] = $0;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     return;
    }
    $0 = ($2 & -8) + $0 | 0;
    label$18 : {
     if ($2 >>> 0 <= 255) {
      $1 = HEAP32[$5 + 8 >> 2];
      $2 = $2 >>> 3;
      $4 = HEAP32[$5 + 12 >> 2];
      if (($1 | 0) == ($4 | 0)) {
       HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $2);
       break label$18;
      }
      HEAP32[$1 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $1;
      break label$18;
     }
     $7 = HEAP32[$5 + 24 >> 2];
     $2 = HEAP32[$5 + 12 >> 2];
     label$23 : {
      if (($5 | 0) != ($2 | 0)) {
       $1 = HEAP32[$5 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$23;
      }
      label$26 : {
       $4 = $5 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        break label$26;
       }
       $4 = $5 + 16 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        break label$26;
       }
       $2 = 0;
       break label$23;
      }
      while (1) {
       $6 = $4;
       $2 = $1;
       $4 = $2 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        continue;
       }
       $4 = $2 + 16 | 0;
       $1 = HEAP32[$2 + 16 >> 2];
       if ($1) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$18;
     }
     $4 = HEAP32[$5 + 28 >> 2];
     $1 = ($4 << 2) + 53612 | 0;
     label$28 : {
      if (HEAP32[$1 >> 2] == ($5 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$28;
       }
       HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $4);
       break label$18;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$18;
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $1 = HEAP32[$5 + 16 >> 2];
     if ($1) {
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$5 + 20 >> 2];
     if (!$1) {
      break label$18;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
    }
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
    if (HEAP32[13332] != ($3 | 0)) {
     break label$14;
    }
    HEAP32[13329] = $0;
    return;
   }
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$3 + 4 >> 2] = $0 | 1;
   HEAP32[$0 + $3 >> 2] = $0;
  }
  if ($0 >>> 0 <= 255) {
   $0 = $0 >>> 3;
   $2 = ($0 << 3) + 53348 | 0;
   $1 = HEAP32[13327];
   $0 = 1 << $0;
   label$32 : {
    if (!($1 & $0)) {
     HEAP32[13327] = $0 | $1;
     $0 = $2;
     break label$32;
    }
    $0 = HEAP32[$2 + 8 >> 2];
   }
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$0 + 12 >> 2] = $3;
   HEAP32[$3 + 12 >> 2] = $2;
   HEAP32[$3 + 8 >> 2] = $0;
   return;
  }
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  $2 = $3;
  $4 = $0 >>> 8;
  $1 = 0;
  label$34 : {
   if (!$4) {
    break label$34;
   }
   $1 = 31;
   if ($0 >>> 0 > 16777215) {
    break label$34;
   }
   $1 = $4;
   $4 = $4 + 1048320 >>> 16 & 8;
   $1 = $1 << $4;
   $7 = $1 + 520192 >>> 16 & 4;
   $1 = $1 << $7;
   $6 = $1 + 245760 >>> 16 & 2;
   $1 = ($1 << $6 >>> 15) - ($6 | ($4 | $7)) | 0;
   $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
  }
  HEAP32[$2 + 28 >> 2] = $1;
  $6 = ($1 << 2) + 53612 | 0;
  $4 = HEAP32[13328];
  $2 = 1 << $1;
  label$35 : {
   if (!($4 & $2)) {
    HEAP32[13328] = $2 | $4;
    HEAP32[$6 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = $6;
    HEAP32[$3 + 8 >> 2] = $3;
    break label$35;
   }
   $4 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
   $2 = HEAP32[$6 >> 2];
   label$37 : {
    while (1) {
     $1 = $2;
     if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
      break label$37;
     }
     $2 = $4 >>> 29;
     $4 = $4 << 1;
     $6 = $1 + ($2 & 4) | 0;
     $2 = HEAP32[$6 + 16 >> 2];
     if ($2) {
      continue;
     }
     break;
    }
    HEAP32[$6 + 16 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = $1;
    HEAP32[$3 + 8 >> 2] = $3;
    break label$35;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = $1;
   HEAP32[$3 + 8 >> 2] = $0;
  }
  $0 = HEAP32[13335] + -1 | 0;
  HEAP32[13335] = $0;
  if ($0) {
   break label$1;
  }
  $3 = 53764;
  while (1) {
   $0 = HEAP32[$3 >> 2];
   $3 = $0 + 8 | 0;
   if ($0) {
    continue;
   }
   break;
  }
  HEAP32[13335] = -1;
 }
}
function std____2__locale____imp____imp_28unsigned_20long_29() {
 HEAP32[13257] = 0;
 HEAP32[13256] = 33860;
 HEAP32[13256] = 28444;
 HEAP32[13256] = 27920;
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29();
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29();
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29(28);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29(53200, 27909);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29(53040);
 HEAP32[13177] = 0;
 HEAP32[13176] = 33860;
 HEAP32[13176] = 28444;
 HEAP32[13176] = 29512;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52704, std____2__locale__id____get_28_29(51236));
 HEAP32[13179] = 0;
 HEAP32[13178] = 33860;
 HEAP32[13178] = 28444;
 HEAP32[13178] = 29544;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52712, std____2__locale__id____get_28_29(51244));
 std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29();
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52720, std____2__locale__id____get_28_29(51440));
 HEAP32[13185] = 0;
 HEAP32[13184] = 33860;
 HEAP32[13184] = 28444;
 HEAP32[13184] = 28500;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52736, std____2__locale__id____get_28_29(51432));
 HEAP32[13187] = 0;
 HEAP32[13186] = 33860;
 HEAP32[13186] = 28444;
 HEAP32[13186] = 28648;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52744, std____2__locale__id____get_28_29(51448));
 HEAP32[13189] = 0;
 HEAP32[13188] = 33860;
 HEAP32[13188] = 28444;
 HEAP32[13188] = 27992;
 HEAP32[13190] = std____2____cloc_28_29();
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52752, std____2__locale__id____get_28_29(51456));
 HEAP32[13193] = 0;
 HEAP32[13192] = 33860;
 HEAP32[13192] = 28444;
 HEAP32[13192] = 28796;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52768, std____2__locale__id____get_28_29(51464));
 HEAP32[13195] = 0;
 HEAP32[13194] = 33860;
 HEAP32[13194] = 28444;
 HEAP32[13194] = 28912;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52776, std____2__locale__id____get_28_29(51472));
 HEAP32[13197] = 0;
 HEAP32[13196] = 33860;
 HEAP32[13196] = 28444;
 HEAP16[26396] = 11310;
 HEAP32[13196] = 28040;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29(52796);
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52784, std____2__locale__id____get_28_29(51480));
 HEAP32[13205] = 0;
 HEAP32[13204] = 33860;
 HEAP32[13204] = 28444;
 HEAP32[13206] = 46;
 HEAP32[13207] = 44;
 HEAP32[13204] = 28080;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29(52832);
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52816, std____2__locale__id____get_28_29(51488));
 HEAP32[13213] = 0;
 HEAP32[13212] = 33860;
 HEAP32[13212] = 28444;
 HEAP32[13212] = 29576;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52848, std____2__locale__id____get_28_29(51252));
 HEAP32[13215] = 0;
 HEAP32[13214] = 33860;
 HEAP32[13214] = 28444;
 HEAP32[13214] = 29820;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52856, std____2__locale__id____get_28_29(51260));
 HEAP32[13217] = 0;
 HEAP32[13216] = 33860;
 HEAP32[13216] = 28444;
 HEAP32[13216] = 30032;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52864, std____2__locale__id____get_28_29(51268));
 HEAP32[13219] = 0;
 HEAP32[13218] = 33860;
 HEAP32[13218] = 28444;
 HEAP32[13218] = 30264;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52872, std____2__locale__id____get_28_29(51276));
 HEAP32[13221] = 0;
 HEAP32[13220] = 33860;
 HEAP32[13220] = 28444;
 HEAP32[13220] = 31248;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52880, std____2__locale__id____get_28_29(51316));
 HEAP32[13223] = 0;
 HEAP32[13222] = 33860;
 HEAP32[13222] = 28444;
 HEAP32[13222] = 31396;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52888, std____2__locale__id____get_28_29(51324));
 HEAP32[13225] = 0;
 HEAP32[13224] = 33860;
 HEAP32[13224] = 28444;
 HEAP32[13224] = 31512;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52896, std____2__locale__id____get_28_29(51332));
 HEAP32[13227] = 0;
 HEAP32[13226] = 33860;
 HEAP32[13226] = 28444;
 HEAP32[13226] = 31628;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52904, std____2__locale__id____get_28_29(51340));
 HEAP32[13229] = 0;
 HEAP32[13228] = 33860;
 HEAP32[13228] = 28444;
 HEAP32[13228] = 31744;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52912, std____2__locale__id____get_28_29(51348));
 HEAP32[13231] = 0;
 HEAP32[13230] = 33860;
 HEAP32[13230] = 28444;
 HEAP32[13230] = 31908;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52920, std____2__locale__id____get_28_29(51356));
 HEAP32[13233] = 0;
 HEAP32[13232] = 33860;
 HEAP32[13232] = 28444;
 HEAP32[13232] = 32072;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52928, std____2__locale__id____get_28_29(51364));
 HEAP32[13235] = 0;
 HEAP32[13234] = 33860;
 HEAP32[13234] = 28444;
 HEAP32[13234] = 32236;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52936, std____2__locale__id____get_28_29(51372));
 HEAP32[13237] = 0;
 HEAP32[13236] = 33860;
 HEAP32[13236] = 28444;
 HEAP32[13238] = 33788;
 HEAP32[13236] = 30464;
 HEAP32[13238] = 30512;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52944, std____2__locale__id____get_28_29(51284));
 HEAP32[13241] = 0;
 HEAP32[13240] = 33860;
 HEAP32[13240] = 28444;
 HEAP32[13242] = 33824;
 HEAP32[13240] = 30728;
 HEAP32[13242] = 30776;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52960, std____2__locale__id____get_28_29(51292));
 HEAP32[13245] = 0;
 HEAP32[13244] = 33860;
 HEAP32[13244] = 28444;
 std____2____time_put____time_put_28_29(52984);
 HEAP32[13244] = 30964;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52976, std____2__locale__id____get_28_29(51300));
 HEAP32[13249] = 0;
 HEAP32[13248] = 33860;
 HEAP32[13248] = 28444;
 std____2____time_put____time_put_28_29(53e3);
 HEAP32[13248] = 31120;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(52992, std____2__locale__id____get_28_29(51308));
 HEAP32[13253] = 0;
 HEAP32[13252] = 33860;
 HEAP32[13252] = 28444;
 HEAP32[13252] = 32400;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(53008, std____2__locale__id____get_28_29(51380));
 HEAP32[13255] = 0;
 HEAP32[13254] = 33860;
 HEAP32[13254] = 28444;
 HEAP32[13254] = 32520;
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29(53016, std____2__locale__id____get_28_29(51388));
}
function CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29__operator_28_29_28MyObject__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 $12 = +($4 | 0);
 $8 = Math_fround($12 * .03125);
 $15 = +($3 | 0);
 $10 = Math_fround($15 * .03125);
 $7 = Math_fround($12 * .125);
 $16 = $5 ^ 1;
 $21 = $16 ^ $2;
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, Math_fround(HEAP32[$0 >> 2]), Math_fround(HEAP32[$0 + 4 >> 2]), Math_fround(.125), Math_fround(.875), $8, $10, $7, Math_fround(0), $7, Math_fround(0), $8, $10, $21, $2, 0);
 $9 = Math_fround($15 * .125);
 $22 = $2 ^ $5;
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, Math_fround(HEAP32[$0 >> 2]), Math_fround(HEAP32[$0 + 4 >> 2]), Math_fround(.125), Math_fround(.875), $8, $10, Math_fround(0), $9, Math_fround(0), $9, $8, $10, $22, $2, 0);
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $17 = HEAP32[$0 >> 2];
 label$1 : {
  if (!$16) {
   $16 = HEAP32[$0 + 4 >> 2];
   $18 = Math_fround($12 * .055555555 + +($16 | 0));
   $14 = Math_fround($17 | 0);
   $20 = Math_fround($16 | 0);
   $19 = Math_fround(.0555555559694767);
   $13 = Math_fround($15 * .055555555 + +($17 | 0));
   break label$1;
  }
  $19 = Math_fround(.019999999552965164);
  $20 = Math_fround(HEAP32[$0 + 4 >> 2]);
  $18 = $20;
  $14 = Math_fround($17 | 0);
  $13 = $14;
 }
 HEAPF32[$6 + 8 >> 2] = $19;
 HEAPF32[$6 + 4 >> 2] = $18;
 HEAPF32[$6 >> 2] = $13;
 HEAP32[$6 + 68 >> 2] = 0;
 HEAPF32[$6 + 64 >> 2] = $7;
 HEAPF32[$6 + 52 >> 2] = $10;
 HEAPF32[$6 + 48 >> 2] = $8;
 $12 = $5 ? -.03125 : .03125;
 $15 = +(0 - $3 | 0);
 $11 = Math_fround($12 * $15);
 HEAPF32[$6 + 36 >> 2] = $11;
 HEAPF32[$6 + 32 >> 2] = $7;
 addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($1, $14, $20, Math_fround(.125), Math_fround(.03125), $6 - -64 | 0, $6 + 48 | 0, $6, $6 + 32 | 0, $22, $2);
 $3 = HEAP32[$0 >> 2];
 $17 = HEAP32[$0 + 4 >> 2];
 HEAPF32[$6 + 68 >> 2] = $9;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAPF32[$6 + 52 >> 2] = $10;
 HEAPF32[$6 + 48 >> 2] = $8;
 HEAPF32[$6 + 36 >> 2] = $9;
 $23 = $12;
 $12 = +(0 - $4 | 0);
 $14 = Math_fround($23 * $12);
 HEAPF32[$6 + 32 >> 2] = $14;
 addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($1, Math_fround($3 | 0), Math_fround($17 | 0), Math_fround(.125), Math_fround(.03125), $6 - -64 | 0, $6 + 48 | 0, $6, $6 + 32 | 0, $21, $2);
 $8 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $10 = Math_fround(HEAP32[$0 >> 2]);
 label$3 : {
  if ($5) {
   $0 = $2 ^ 1;
   if (!$2) {
    HEAP32[$6 + 72 >> 2] = 1023410176;
    $11 = Math_fround($11 + $8);
    HEAPF32[$6 + 68 >> 2] = $11;
    $7 = Math_fround($7 + $10);
    HEAPF32[$6 + 64 >> 2] = $7;
    HEAP32[$6 + 56 >> 2] = 1023410176;
    $9 = Math_fround($9 + $8);
    HEAPF32[$6 + 52 >> 2] = $9;
    $8 = Math_fround($14 + $10);
    HEAPF32[$6 + 48 >> 2] = $8;
    HEAP32[$6 + 40 >> 2] = 0;
    HEAPF32[$6 + 36 >> 2] = $9;
    HEAPF32[$6 + 32 >> 2] = $7;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1, $6 - -64 | 0, $6, $6 + 48 | 0, $6 + 32 | 0, 0, 0);
    HEAP32[$6 + 72 >> 2] = 1064828928;
    HEAPF32[$6 + 68 >> 2] = $11;
    HEAPF32[$6 + 64 >> 2] = $7;
    HEAPF32[$6 + 56 >> 2] = Math_fround(1) - $19;
    HEAPF32[$6 + 52 >> 2] = $18;
    HEAPF32[$6 + 48 >> 2] = $13;
    HEAP32[$6 + 40 >> 2] = 1064828928;
    HEAPF32[$6 + 36 >> 2] = $9;
    HEAPF32[$6 + 32 >> 2] = $8;
    HEAP32[$6 + 24 >> 2] = 1065353216;
    HEAPF32[$6 + 20 >> 2] = $9;
    HEAPF32[$6 + 16 >> 2] = $7;
    MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1, $6 - -64 | 0, $6 + 48 | 0, $6 + 32 | 0, $6 + 16 | 0, $0, 0);
    break label$3;
   }
   HEAP32[$6 + 72 >> 2] = 1023410176;
   $7 = Math_fround($7 + $8);
   HEAPF32[$6 + 68 >> 2] = $7;
   $11 = Math_fround($11 + $10);
   HEAPF32[$6 + 64 >> 2] = $11;
   HEAP32[$6 + 56 >> 2] = 1023410176;
   $8 = Math_fround($14 + $8);
   HEAPF32[$6 + 52 >> 2] = $8;
   $9 = Math_fround($9 + $10);
   HEAPF32[$6 + 48 >> 2] = $9;
   HEAP32[$6 + 40 >> 2] = 0;
   HEAPF32[$6 + 36 >> 2] = $7;
   HEAPF32[$6 + 32 >> 2] = $9;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1, $6 - -64 | 0, $6, $6 + 48 | 0, $6 + 32 | 0, $0, 0);
   HEAP32[$6 + 72 >> 2] = 1064828928;
   HEAPF32[$6 + 68 >> 2] = $7;
   HEAPF32[$6 + 64 >> 2] = $11;
   HEAPF32[$6 + 56 >> 2] = Math_fround(1) - $19;
   HEAPF32[$6 + 52 >> 2] = $18;
   HEAPF32[$6 + 48 >> 2] = $13;
   HEAP32[$6 + 40 >> 2] = 1064828928;
   HEAPF32[$6 + 36 >> 2] = $8;
   HEAPF32[$6 + 32 >> 2] = $9;
   HEAP32[$6 + 24 >> 2] = 1065353216;
   HEAPF32[$6 + 20 >> 2] = $7;
   HEAPF32[$6 + 16 >> 2] = $9;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($1, $6 - -64 | 0, $6 + 48 | 0, $6 + 32 | 0, $6 + 16 | 0, 1, 0);
   break label$3;
  }
  HEAPF32[$6 + 64 >> 2] = $7;
  $13 = Math_fround($15 * .125);
  HEAPF32[$6 + 68 >> 2] = $13;
  HEAPF32[$6 + 52 >> 2] = $13;
  HEAP32[$6 + 48 >> 2] = 0;
  HEAPF32[$6 + 36 >> 2] = $11;
  HEAPF32[$6 + 32 >> 2] = $7;
  $3 = $2 ^ 1;
  addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($1, $10, $8, Math_fround(0), Math_fround(.03125), $6 - -64 | 0, $6 + 48 | 0, $6, $6 + 32 | 0, $3, $2);
  $4 = HEAP32[$0 >> 2];
  $5 = HEAP32[$0 + 4 >> 2];
  HEAPF32[$6 + 68 >> 2] = $9;
  $7 = Math_fround($12 * .125);
  HEAPF32[$6 + 64 >> 2] = $7;
  HEAP32[$6 + 52 >> 2] = 0;
  HEAPF32[$6 + 48 >> 2] = $7;
  HEAPF32[$6 + 36 >> 2] = $9;
  HEAPF32[$6 + 32 >> 2] = $14;
  addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($1, Math_fround($4 | 0), Math_fround($5 | 0), Math_fround(0), Math_fround(.03125), $6 - -64 | 0, $6 + 48 | 0, $6, $6 + 32 | 0, $2, $2);
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAPF32[$6 + 68 >> 2] = $13;
  HEAPF32[$6 + 64 >> 2] = $7;
  HEAP32[$6 + 52 >> 2] = 0;
  HEAPF32[$6 + 48 >> 2] = $7;
  HEAPF32[$6 + 36 >> 2] = $13;
  HEAP32[$6 + 32 >> 2] = 0;
  addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($1, Math_fround($4 | 0), Math_fround($0 | 0), Math_fround(0), Math_fround(0), $6 - -64 | 0, $6 + 48 | 0, $6, $6 + 32 | 0, $3, $2);
 }
 global$0 = $6 + 80 | 0;
}
function readCubeFromEditor_28int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $1 = global$0 - 272 | 0;
 global$0 = $1;
 HEAP16[$1 + 88 >> 1] = 0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = -1;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP16[$1 + 120 >> 1] = 0;
 HEAP32[$1 + 156 >> 2] = -1;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP16[$1 + 152 >> 1] = 0;
 HEAP16[$1 + 184 >> 1] = 0;
 HEAP32[$1 + 188 >> 2] = -1;
 HEAP32[$1 + 168 >> 2] = 0;
 HEAP32[$1 + 172 >> 2] = 0;
 HEAP32[$1 + 176 >> 2] = 0;
 HEAP32[$1 + 180 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = -1;
 HEAP32[$1 + 64 >> 2] = 0;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 HEAP32[$1 + 220 >> 2] = -1;
 HEAP16[$1 + 216 >> 1] = 0;
 HEAP32[$1 + 200 >> 2] = 0;
 HEAP32[$1 + 204 >> 2] = 0;
 HEAP32[$1 + 208 >> 2] = 0;
 HEAP32[$1 + 212 >> 2] = 0;
 HEAP32[$1 + 252 >> 2] = -1;
 HEAP16[$1 + 248 >> 1] = 0;
 HEAP32[$1 + 232 >> 2] = 0;
 HEAP32[$1 + 236 >> 2] = 0;
 HEAP32[$1 + 240 >> 2] = 0;
 HEAP32[$1 + 244 >> 2] = 0;
 HEAP32[$1 + 192 >> 2] = 0;
 HEAP32[$1 + 196 >> 2] = 0;
 HEAP32[$1 + 224 >> 2] = 0;
 HEAP32[$1 + 228 >> 2] = 0;
 $2 = $1 - -64 | 0;
 HEAP8[$2 + 18 | 0] = 1;
 HEAP8[$2 + 16 | 0] = 257;
 HEAP8[$2 + 17 | 0] = 1;
 HEAP8[$2 + 13 | 0] = 1;
 HEAP8[$2 + 11 | 0] = 257;
 HEAP8[$2 + 12 | 0] = 1;
 HEAP8[$2 + 8 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 257;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$1 + 114 | 0] = 1;
 HEAP8[$1 + 112 | 0] = 257;
 HEAP8[$1 + 113 | 0] = 1;
 HEAP8[$1 + 109 | 0] = 1;
 HEAP8[$1 + 107 | 0] = 257;
 HEAP8[$1 + 108 | 0] = 1;
 HEAP8[$1 + 104 | 0] = 1;
 HEAP8[$1 + 102 | 0] = 257;
 HEAP8[$1 + 103 | 0] = 1;
 HEAP8[$1 + 146 | 0] = 1;
 HEAP8[$1 + 144 | 0] = 257;
 HEAP8[$1 + 145 | 0] = 1;
 HEAP8[$1 + 141 | 0] = 1;
 HEAP8[$1 + 139 | 0] = 257;
 HEAP8[$1 + 140 | 0] = 1;
 HEAP8[$1 + 136 | 0] = 1;
 HEAP8[$1 + 134 | 0] = 257;
 HEAP8[$1 + 135 | 0] = 1;
 HEAP8[$1 + 178 | 0] = 1;
 HEAP8[$1 + 176 | 0] = 257;
 HEAP8[$1 + 177 | 0] = 1;
 HEAP8[$1 + 173 | 0] = 1;
 HEAP8[$1 + 171 | 0] = 257;
 HEAP8[$1 + 172 | 0] = 1;
 HEAP8[$1 + 168 | 0] = 1;
 HEAP8[$1 + 166 | 0] = 257;
 HEAP8[$1 + 167 | 0] = 1;
 HEAP8[$1 + 210 | 0] = 1;
 HEAP8[$1 + 208 | 0] = 257;
 HEAP8[$1 + 209 | 0] = 1;
 HEAP8[$1 + 205 | 0] = 1;
 HEAP8[$1 + 203 | 0] = 257;
 HEAP8[$1 + 204 | 0] = 1;
 HEAP8[$1 + 200 | 0] = 1;
 HEAP8[$1 + 198 | 0] = 257;
 HEAP8[$1 + 199 | 0] = 1;
 HEAP8[$1 + 242 | 0] = 1;
 HEAP8[$1 + 240 | 0] = 257;
 HEAP8[$1 + 241 | 0] = 1;
 HEAP8[$1 + 237 | 0] = 1;
 HEAP8[$1 + 235 | 0] = 257;
 HEAP8[$1 + 236 | 0] = 1;
 HEAP8[$1 + 232 | 0] = 1;
 HEAP8[$1 + 230 | 0] = 257;
 HEAP8[$1 + 231 | 0] = 1;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP8[$1 + 40 | 0] = 0;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP8[$1 + 32 | 0] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = $1 + 48;
 while (1) {
  $7 = Math_imul($10, 7);
  $11 = HEAPU8[$7 + 46897 | 0];
  $12 = HEAPU8[$7 + 46896 | 0];
  HEAP32[$1 + 4 >> 2] = $12;
  HEAP32[$1 >> 2] = $11;
  $4 = emscripten_asm_const_iii(1636, 1093, $1 | 0) | 0;
  $8 = HEAPU8[$7 + 46898 | 0];
  label$2 : {
   label$3 : {
    if ($8) {
     $9 = $8 + -1 | 0;
     $2 = 0;
     while (1) {
      label$6 : {
       $3 = HEAP8[($2 + $7 | 0) + 46899 | 0];
       if (($4 | 0) == ($3 | 0)) {
        $9 = $2;
        $3 = $4;
        break label$6;
       }
       $2 = $2 + 1 | 0;
       if (($8 | 0) != ($2 | 0)) {
        continue;
       }
      }
      break;
     }
     $2 = $3 + 1 | 0;
     if ($2 >>> 0 > 1) {
      break label$3;
     }
     if (!($2 - 1)) {
      break label$2;
     }
    }
    $0 = __cxa_allocate_exception(8) | 0;
    HCException__HCException_28char_20const__29($0, 1656);
    __cxa_throw($0 | 0, 1364, 1);
    abort();
   }
   $2 = $3 << 3;
   HEAP8[(($3 << 5) + $1 + (($12 - HEAP32[$2 + 47344 >> 2] | 0) + Math_imul($11 - HEAP32[$2 + 47348 >> 2] | 0, 5)) | 0) + 32 | 0] = 1;
  }
  $3 = $9 & 255;
  $5 = $3 << $6 | $5;
  HEAP8[$1 + 32 | 0] = $5;
  $2 = ($8 | 0) == 2 ? 1 : 2;
  $6 = $2 + $6 | 0;
  if (($6 | 0) >= 9) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29(HEAP32[$1 + 24 >> 2], $5 << 24 >> 24);
   $4 = $3;
   $3 = HEAP32[$1 + 28 >> 2];
   $5 = $4 >>> 8 - $3;
   HEAP8[$1 + 32 | 0] = $5;
   $6 = $3 + ($2 | -8) | 0;
  }
  HEAP32[$1 + 28 >> 2] = $6;
  $13 = $2 + $13 | 0;
  $10 = $10 + 1 | 0;
  if (($10 | 0) != 63) {
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29(HEAP32[$1 + 24 >> 2], $5 << 24 >> 24);
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP8[$1 + 32 | 0] = 0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1665, 23);
 BinWriter__repr_28_29_20const($1 + 8 | 0, $1 + 24 | 0);
 $4 = $2;
 $2 = HEAPU8[$1 + 19 | 0];
 $3 = $2 << 24 >> 24 < 0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($4, $3 ? HEAP32[$1 + 8 >> 2] : $1 + 8 | 0, $3 ? HEAP32[$1 + 12 >> 2] : $2), 1689, 10), $13);
 $3 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
 HEAP32[$1 + 264 >> 2] = $3;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
 $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 264 | 0, 51440);
 $9 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
 $3 = HEAP32[$1 + 264 >> 2];
 $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $4;
 if (($4 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $9);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 if (HEAP8[$1 + 19 | 0] < 0) {
  dlfree(HEAP32[$1 + 8 >> 2]);
 }
 $2 = HEAP32[11988];
 PicBucket__updateGrp_28int_2c_20PicArr__2c_20bool_29($2, $0, $1 - -64 | 0, 1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29((HEAP32[$2 + 4 >> 2] + Math_imul($0, 152) | 0) + 72 | 0, $1 + 48 | 0);
 if (HEAP8[$1 + 59 | 0] <= -1) {
  dlfree(HEAP32[$1 + 48 >> 2]);
 }
 global$0 = $1 + 272 | 0;
}
function PicType__load_28PicDef_20const__2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $6 = $1 + 8 | 0;
 $1 = $0 + 4 | 0;
 PicArr__makeRtns_28PicArr__29_20const($6, $1);
 HEAP32[$0 + 300 >> 2] = 6;
 HEAP32[$0 + 304 >> 2] = 7;
 HEAP32[$0 + 292 >> 2] = 4;
 HEAP32[$0 + 296 >> 2] = 5;
 HEAP32[$0 + 284 >> 2] = 2;
 HEAP32[$0 + 288 >> 2] = 3;
 HEAP32[$0 + 276 >> 2] = 0;
 HEAP32[$0 + 280 >> 2] = 1;
 HEAP32[$0 >> 2] = 8;
 HEAP8[$0 + 308 | 0] = $2;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 36 | 0, $2)) {
  HEAP8[$3 + 9 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 68 | 0, $2)) {
  HEAP8[$3 + 10 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 100 | 0, $2)) {
  HEAP8[$3 + 11 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 132 | 0, $2)) {
  HEAP8[$3 + 12 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 164 | 0, $2)) {
  HEAP8[$3 + 13 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 228 | 0, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $1 = $0 + 36 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 68 | 0, $2)) {
  HEAP8[$3 + 10 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 100 | 0, $2)) {
  HEAP8[$3 + 11 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 132 | 0, $2)) {
  HEAP8[$3 + 12 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 164 | 0, $2)) {
  HEAP8[$3 + 13 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 228 | 0, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $1 = $0 + 68 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 100 | 0, $2)) {
  HEAP8[$3 + 11 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 132 | 0, $2)) {
  HEAP8[$3 + 12 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 164 | 0, $2)) {
  HEAP8[$3 + 13 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 228 | 0, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $1 = $0 + 100 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 132 | 0, $2)) {
  HEAP8[$3 + 12 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 164 | 0, $2)) {
  HEAP8[$3 + 13 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 228 | 0, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $1 = $0 + 132 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 164 | 0, $2)) {
  HEAP8[$3 + 13 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 228 | 0, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $1 = $0 + 164 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($1, $0 + 196 | 0, $2)) {
  HEAP8[$3 + 14 | 0] = 1;
 }
 $6 = $1;
 $1 = $0 + 228 | 0;
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($6, $1, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 if (PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($0 + 196 | 0, $1, $2)) {
  HEAP8[$3 + 15 | 0] = 1;
 }
 $2 = 7;
 $7 = $0 + 4 | 0;
 $8 = $0 + 276 | 0;
 while (1) {
  label$30 : {
   if (!HEAPU8[($3 + 8 | 0) + $2 | 0]) {
    break label$30;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -1;
   $1 = $2;
   if ($2 >>> 0 > 6) {
    break label$30;
   }
   while (1) {
    $4 = ($1 << 5) + $7 | 0;
    $6 = $1 + 1 | 0;
    $5 = ($6 << 5) + $7 | 0;
    HEAP8[$4 | 0] = HEAPU8[$5 | 0];
    HEAP8[$4 + 1 | 0] = HEAPU8[$5 + 1 | 0];
    HEAP8[$4 + 2 | 0] = HEAPU8[$5 + 2 | 0];
    HEAP8[$4 + 3 | 0] = HEAPU8[$5 + 3 | 0];
    HEAP8[$4 + 4 | 0] = HEAPU8[$5 + 4 | 0];
    HEAP8[$4 + 5 | 0] = HEAPU8[$5 + 5 | 0];
    HEAP8[$4 + 6 | 0] = HEAPU8[$5 + 6 | 0];
    HEAP8[$4 + 7 | 0] = HEAPU8[$5 + 7 | 0];
    HEAP8[$4 + 8 | 0] = HEAPU8[$5 + 8 | 0];
    HEAP8[$4 + 9 | 0] = HEAPU8[$5 + 9 | 0];
    HEAP8[$4 + 10 | 0] = HEAPU8[$5 + 10 | 0];
    HEAP8[$4 + 11 | 0] = HEAPU8[$5 + 11 | 0];
    HEAP8[$4 + 12 | 0] = HEAPU8[$5 + 12 | 0];
    HEAP8[$4 + 13 | 0] = HEAPU8[$5 + 13 | 0];
    HEAP8[$4 + 14 | 0] = HEAPU8[$5 + 14 | 0];
    HEAP8[$4 + 15 | 0] = HEAPU8[$5 + 15 | 0];
    HEAP8[$4 + 16 | 0] = HEAPU8[$5 + 16 | 0];
    HEAP8[$4 + 17 | 0] = HEAPU8[$5 + 17 | 0];
    HEAP8[$4 + 18 | 0] = HEAPU8[$5 + 18 | 0];
    HEAP8[$4 + 19 | 0] = HEAPU8[$5 + 19 | 0];
    HEAP8[$4 + 20 | 0] = HEAPU8[$5 + 20 | 0];
    HEAP8[$4 + 21 | 0] = HEAPU8[$5 + 21 | 0];
    HEAP8[$4 + 22 | 0] = HEAPU8[$5 + 22 | 0];
    HEAP8[$4 + 23 | 0] = HEAPU8[$5 + 23 | 0];
    HEAP8[$4 + 24 | 0] = HEAPU8[$5 + 24 | 0];
    HEAP8[$4 + 25 | 0] = HEAPU8[$5 + 25 | 0];
    HEAP32[$4 + 28 >> 2] = HEAP32[$5 + 28 >> 2];
    HEAP32[($1 << 2) + $8 >> 2] = HEAP32[($6 << 2) + $8 >> 2];
    $4 = $1 >>> 0 < 6;
    $1 = $6;
    if ($4) {
     continue;
    }
    break;
   }
  }
  $2 = $2 + -1 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 8) {
   continue;
  }
  break;
 }
 $4 = HEAP32[$0 >> 2];
 $1 = 0;
 while (1) {
  $5 = ($1 << 1) + $0 | 0;
  HEAP16[$5 + 260 >> 1] = 0;
  $6 = ($1 << 5) + $0 | 0;
  $2 = $6;
  label$33 : {
   if (($1 | 0) < ($4 | 0)) {
    HEAP16[$5 + 260 >> 1] = (HEAPU8[$6 + 5 | 0] != 0) << 1 | HEAPU8[$2 + 4 | 0] != 0 | (((HEAPU8[$6 + 13 | 0] != 0) << 1 | HEAPU8[$6 + 8 | 0] != 0 | (((HEAPU8[$6 + 27 | 0] != 0) << 1 | HEAPU8[$6 + 28 | 0] != 0 | ((((HEAPU8[$6 + 9 | 0] != 0) << 1 | HEAPU8[$6 + 14 | 0] != 0) << 2 | (HEAPU8[$6 + 19 | 0] != 0) << 1 | HEAPU8[$6 + 24 | 0] != 0) << 4 | ((HEAPU8[$6 + 25 | 0] != 0) << 1 | HEAPU8[$6 + 26 | 0] != 0) << 2)) << 4 | ((HEAPU8[$6 + 23 | 0] != 0) << 1 | HEAPU8[$6 + 18 | 0] != 0) << 2)) << 4 | ((HEAPU8[$6 + 7 | 0] != 0) << 1 | HEAPU8[$6 + 6 | 0] != 0) << 2);
    break label$33;
   }
   HEAP8[$2 + 4 | 0] = 0;
   HEAP8[$2 + 5 | 0] = 0;
   HEAP8[$2 + 6 | 0] = 0;
   HEAP8[$2 + 7 | 0] = 0;
   HEAP8[$2 + 8 | 0] = 0;
   HEAP8[$2 + 9 | 0] = 0;
   HEAP8[$2 + 10 | 0] = 0;
   HEAP8[$2 + 11 | 0] = 0;
   HEAP8[$2 + 28 | 0] = 0;
   HEAP8[$2 + 29 | 0] = 0;
   HEAP8[$2 + 20 | 0] = 0;
   HEAP8[$2 + 21 | 0] = 0;
   HEAP8[$2 + 22 | 0] = 0;
   HEAP8[$2 + 23 | 0] = 0;
   HEAP8[$2 + 24 | 0] = 0;
   HEAP8[$2 + 25 | 0] = 0;
   HEAP8[$2 + 26 | 0] = 0;
   HEAP8[$2 + 27 | 0] = 0;
   HEAP8[$2 + 12 | 0] = 0;
   HEAP8[$2 + 13 | 0] = 0;
   HEAP8[$2 + 14 | 0] = 0;
   HEAP8[$2 + 15 | 0] = 0;
   HEAP8[$2 + 16 | 0] = 0;
   HEAP8[$2 + 17 | 0] = 0;
   HEAP8[$2 + 18 | 0] = 0;
   HEAP8[$2 + 19 | 0] = 0;
   HEAP32[$6 + 32 >> 2] = -1;
   HEAP32[(($1 << 2) + $0 | 0) + 276 >> 2] = -1;
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 8) {
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
}
function void_20std____2__vector_PicGroupDef_2c_20std____2__allocator_PicGroupDef__20_____push_back_slow_path_PicGroupDef__28PicGroupDef___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2];
 $4 = (HEAP32[$0 + 4 >> 2] - $3 | 0) / 152 | 0;
 $2 = $4 + 1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($2 >>> 0 < 28256364) {
     $3 = (HEAP32[$0 + 8 >> 2] - $3 | 0) / 152 | 0;
     $6 = $3 << 1;
     $3 = $3 >>> 0 < 14128181 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 28256363;
     if ($3) {
      if ($3 >>> 0 >= 28256364) {
       break label$3;
      }
      $5 = operator_20new_28unsigned_20long_29(Math_imul($3, 152));
     }
     $2 = Math_imul($4, 152) + $5 | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$1 + 12 >> 2] = 0;
     HEAP32[$1 + 16 >> 2] = 0;
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     $4 = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = $4;
     HEAP32[$1 + 32 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = 0;
     HEAP32[$1 + 28 >> 2] = 0;
     HEAP8[$2 + 68 | 0] = HEAPU8[$1 + 68 | 0];
     $4 = HEAP32[$1 + 64 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     HEAP32[$2 + 64 >> 2] = $4;
     $4 = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = $4;
     $4 = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = $4;
     $4 = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = $4;
     HEAP32[$2 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
     $4 = HEAP32[$1 + 76 >> 2];
     HEAP32[$2 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
     HEAP32[$2 + 76 >> 2] = $4;
     HEAP32[$1 + 72 >> 2] = 0;
     HEAP32[$1 + 76 >> 2] = 0;
     HEAP32[$1 + 80 >> 2] = 0;
     $4 = HEAP32[$1 + 88 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
     HEAP32[$2 + 88 >> 2] = $4;
     HEAP32[$2 + 92 >> 2] = HEAP32[$1 + 92 >> 2];
     $4 = HEAP32[$1 + 100 >> 2];
     HEAP32[$2 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
     HEAP32[$2 + 100 >> 2] = $4;
     HEAP32[$2 + 104 >> 2] = HEAP32[$1 + 104 >> 2];
     HEAP32[$1 + 104 >> 2] = 0;
     HEAP32[$1 + 96 >> 2] = 0;
     HEAP32[$1 + 100 >> 2] = 0;
     HEAP32[$2 + 116 >> 2] = HEAP32[$1 + 116 >> 2];
     $4 = HEAP32[$1 + 112 >> 2];
     HEAP32[$2 + 108 >> 2] = HEAP32[$1 + 108 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$1 + 116 >> 2] = 0;
     HEAP32[$1 + 108 >> 2] = 0;
     HEAP32[$1 + 112 >> 2] = 0;
     HEAP32[$2 + 128 >> 2] = HEAP32[$1 + 128 >> 2];
     $4 = HEAP32[$1 + 124 >> 2];
     HEAP32[$2 + 120 >> 2] = HEAP32[$1 + 120 >> 2];
     HEAP32[$2 + 124 >> 2] = $4;
     HEAP32[$1 + 128 >> 2] = 0;
     HEAP32[$1 + 120 >> 2] = 0;
     HEAP32[$1 + 124 >> 2] = 0;
     HEAP32[$2 + 132 >> 2] = HEAP32[$1 + 132 >> 2];
     HEAP32[$2 + 144 >> 2] = HEAP32[$1 + 144 >> 2];
     $4 = HEAP32[$1 + 140 >> 2];
     HEAP32[$2 + 136 >> 2] = HEAP32[$1 + 136 >> 2];
     HEAP32[$2 + 140 >> 2] = $4;
     HEAP32[$1 + 136 >> 2] = 0;
     HEAP32[$1 + 140 >> 2] = 0;
     HEAP32[$1 + 144 >> 2] = 0;
     HEAP8[$2 + 148 | 0] = HEAPU8[$1 + 148 | 0];
     $4 = Math_imul($3, 152) + $5 | 0;
     $6 = $2 + 152 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     $5 = HEAP32[$0 >> 2];
     if (($1 | 0) == ($5 | 0)) {
      break label$2;
     }
     while (1) {
      $2 = $2 + -152 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $1 = $1 + -152 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
      HEAP32[$1 + 12 >> 2] = 0;
      HEAP32[$1 + 16 >> 2] = 0;
      HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
      $3 = HEAP32[$1 + 28 >> 2];
      HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
      HEAP32[$2 + 28 >> 2] = $3;
      HEAP32[$1 + 32 >> 2] = 0;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 28 >> 2] = 0;
      HEAP8[$2 + 68 | 0] = HEAPU8[$1 + 68 | 0];
      $3 = HEAP32[$1 + 64 >> 2];
      HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
      HEAP32[$2 + 64 >> 2] = $3;
      $3 = HEAP32[$1 + 56 >> 2];
      HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
      HEAP32[$2 + 56 >> 2] = $3;
      $3 = HEAP32[$1 + 48 >> 2];
      HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
      HEAP32[$2 + 48 >> 2] = $3;
      $3 = HEAP32[$1 + 40 >> 2];
      HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
      HEAP32[$2 + 40 >> 2] = $3;
      HEAP32[$2 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
      $3 = HEAP32[$1 + 76 >> 2];
      HEAP32[$2 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
      HEAP32[$2 + 76 >> 2] = $3;
      HEAP32[$1 + 72 >> 2] = 0;
      HEAP32[$1 + 76 >> 2] = 0;
      HEAP32[$1 + 80 >> 2] = 0;
      $3 = HEAP32[$1 + 88 >> 2];
      HEAP32[$2 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
      HEAP32[$2 + 88 >> 2] = $3;
      HEAP32[$2 + 92 >> 2] = HEAP32[$1 + 92 >> 2];
      $3 = HEAP32[$1 + 100 >> 2];
      HEAP32[$2 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
      HEAP32[$2 + 100 >> 2] = $3;
      HEAP32[$2 + 104 >> 2] = HEAP32[$1 + 104 >> 2];
      HEAP32[$1 + 104 >> 2] = 0;
      HEAP32[$1 + 96 >> 2] = 0;
      HEAP32[$1 + 100 >> 2] = 0;
      HEAP32[$2 + 116 >> 2] = HEAP32[$1 + 116 >> 2];
      $3 = HEAP32[$1 + 112 >> 2];
      HEAP32[$2 + 108 >> 2] = HEAP32[$1 + 108 >> 2];
      HEAP32[$2 + 112 >> 2] = $3;
      HEAP32[$1 + 116 >> 2] = 0;
      HEAP32[$1 + 108 >> 2] = 0;
      HEAP32[$1 + 112 >> 2] = 0;
      HEAP32[$2 + 128 >> 2] = HEAP32[$1 + 128 >> 2];
      $3 = HEAP32[$1 + 124 >> 2];
      HEAP32[$2 + 120 >> 2] = HEAP32[$1 + 120 >> 2];
      HEAP32[$2 + 124 >> 2] = $3;
      HEAP32[$1 + 128 >> 2] = 0;
      HEAP32[$1 + 120 >> 2] = 0;
      HEAP32[$1 + 124 >> 2] = 0;
      HEAP32[$2 + 132 >> 2] = HEAP32[$1 + 132 >> 2];
      HEAP32[$2 + 144 >> 2] = HEAP32[$1 + 144 >> 2];
      $3 = HEAP32[$1 + 140 >> 2];
      HEAP32[$2 + 136 >> 2] = HEAP32[$1 + 136 >> 2];
      HEAP32[$2 + 140 >> 2] = $3;
      HEAP32[$1 + 136 >> 2] = 0;
      HEAP32[$1 + 140 >> 2] = 0;
      HEAP32[$1 + 144 >> 2] = 0;
      HEAP8[$2 + 148 | 0] = HEAPU8[$1 + 148 | 0];
      if (($1 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
     $5 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[$0 >> 2];
     break label$1;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const();
    abort();
   }
   std____2____throw_length_error_28char_20const__29(15792);
   abort();
  }
  $1 = $5;
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $6;
 if (($1 | 0) != ($5 | 0)) {
  while (1) {
   $5 = PicGroupDef___PicGroupDef_28_29($5 + -152 | 0);
   if (($1 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($1) {
  dlfree($1);
 }
}
function BuildWorld__bootstrapSpace_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 $2 = Math_imul(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
 if (($2 | 0) >= 1) {
  while (1) {
   HEAP8[HEAP32[$0 + 28 >> 2] + $1 | 0] = 0;
   $1 = $1 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $8 = $0 + 12 | 0;
 $2 = HEAP32[$0 + 40 >> 2];
 if (($2 | 0) < HEAP32[$0 + 44 >> 2]) {
  $5 = HEAP32[$0 + 52 >> 2];
  while (1) {
   $4 = HEAP32[$0 + 48 >> 2];
   if (($4 | 0) < ($5 | 0)) {
    $7 = $2 + -1 | 0;
    $6 = HEAP32[$0 + 60 >> 2];
    while (1) {
     label$7 : {
      if ($2 >>> 0 > 49) {
       break label$7;
      }
      $1 = HEAP32[$0 + 56 >> 2];
      if ($4 >>> 0 > 49 | ($1 | 0) >= ($6 | 0)) {
       break label$7;
      }
      while (1) {
       if (!((HEAPU8[(((Math_imul($2, 2500) + $0 | 0) + Math_imul($4, 50) | 0) + $1 | 0) + 136 | 0] & 12) != 8 | $1 >>> 0 > 49)) {
        HEAP32[$3 + 32 >> 2] = $1;
        HEAP32[$3 + 28 >> 2] = $4;
        HEAP32[$3 + 24 >> 2] = $2;
        HEAP32[$3 + 16 >> 2] = $1;
        HEAP32[$3 + 12 >> 2] = $4;
        HEAP32[$3 + 8 >> 2] = $7;
        BoundedBlockSpace3D__erectWalls_28int_2c_20Vec3i_2c_20Vec3i_29($8, 0, $3 + 24 | 0, $3 + 8 | 0);
        $6 = HEAP32[$0 + 60 >> 2];
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) < ($6 | 0)) {
        continue;
       }
       break;
      }
      $5 = HEAP32[$0 + 52 >> 2];
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 44 >> 2]) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 - -64 >> 2];
 $1 = HEAP32[$0 + 68 >> 2];
 if (($2 | 0) < ($1 | 0)) {
  $5 = HEAP32[$0 + 76 >> 2];
  while (1) {
   $4 = HEAP32[$0 + 72 >> 2];
   if (($4 | 0) < ($5 | 0)) {
    $7 = $2 + -1 | 0;
    $6 = HEAP32[$0 + 84 >> 2];
    while (1) {
     label$14 : {
      if ($2 >>> 0 > 49) {
       break label$14;
      }
      $1 = HEAP32[$0 + 80 >> 2];
      if ($4 >>> 0 > 49 | ($1 | 0) >= ($6 | 0)) {
       break label$14;
      }
      while (1) {
       if (!((HEAPU8[(((Math_imul($2, 2500) + $0 | 0) + Math_imul($4, 50) | 0) + $1 | 0) + 125136 | 0] & 12) != 8 | $1 >>> 0 > 49)) {
        HEAP32[$3 + 32 >> 2] = $1;
        HEAP32[$3 + 28 >> 2] = $2;
        HEAP32[$3 + 24 >> 2] = $4;
        HEAP32[$3 + 16 >> 2] = $1;
        HEAP32[$3 + 12 >> 2] = $7;
        HEAP32[$3 + 8 >> 2] = $4;
        BoundedBlockSpace3D__erectWalls_28int_2c_20Vec3i_2c_20Vec3i_29($8, 1, $3 + 24 | 0, $3 + 8 | 0);
        $6 = HEAP32[$0 + 84 >> 2];
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) < ($6 | 0)) {
        continue;
       }
       break;
      }
      $5 = HEAP32[$0 + 76 >> 2];
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($5 | 0)) {
      continue;
     }
     break;
    }
    $1 = HEAP32[$0 + 68 >> 2];
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 88 >> 2];
 $1 = HEAP32[$0 + 92 >> 2];
 if (($2 | 0) < ($1 | 0)) {
  $5 = HEAP32[$0 + 100 >> 2];
  while (1) {
   $4 = HEAP32[$0 + 96 >> 2];
   if (($4 | 0) < ($5 | 0)) {
    $7 = $2 + -1 | 0;
    $6 = HEAP32[$0 + 108 >> 2];
    while (1) {
     label$21 : {
      if ($2 >>> 0 > 49) {
       break label$21;
      }
      $1 = HEAP32[$0 + 104 >> 2];
      if ($4 >>> 0 > 49 | ($1 | 0) >= ($6 | 0)) {
       break label$21;
      }
      while (1) {
       if (!((HEAPU8[(((Math_imul($2, 2500) + $0 | 0) + Math_imul($4, 50) | 0) + $1 | 0) + 250136 | 0] & 12) != 8 | $1 >>> 0 > 49)) {
        HEAP32[$3 + 32 >> 2] = $2;
        HEAP32[$3 + 28 >> 2] = $1;
        HEAP32[$3 + 24 >> 2] = $4;
        HEAP32[$3 + 16 >> 2] = $7;
        HEAP32[$3 + 12 >> 2] = $1;
        HEAP32[$3 + 8 >> 2] = $4;
        BoundedBlockSpace3D__erectWalls_28int_2c_20Vec3i_2c_20Vec3i_29($8, 2, $3 + 24 | 0, $3 + 8 | 0);
        $6 = HEAP32[$0 + 108 >> 2];
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) < ($6 | 0)) {
        continue;
       }
       break;
      }
      $5 = HEAP32[$0 + 100 >> 2];
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($5 | 0)) {
      continue;
     }
     break;
    }
    $1 = HEAP32[$0 + 92 >> 2];
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8544, 6), HEAP32[$0 + 12 >> 2]), 7528, 1), HEAP32[$0 + 16 >> 2]), 7528, 1), HEAP32[$0 + 20 >> 2]);
 $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 40 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$3 + 40 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $0 = BoundedBlockSpace3D__passFill_28_29($8);
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8551, 3), $0);
 $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 40 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$3 + 40 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 global$0 = $3 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 83)) {
   break label$1;
  }
  $4 = $1;
  $6 = $0;
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
     $2 = HEAP8[$2 | 0];
    } else {
     $2 = 0;
    }
    $2 = $2 << 24 >> 24;
    if ($2 + -97 >>> 0 < 26) {
     $5 = $2 + -97 | 0;
     if ($5 >>> 0 <= 8) {
      break label$3;
     }
     $2 = $2 + -111 | 0;
     if ($2 >>> 0 > 4) {
      break label$1;
     }
     label$7 : {
      switch ($2 - 1 | 0) {
      case 3:
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       HEAP32[$1 + 12 >> 2] = 2;
       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
       break label$2;
      case 0:
      case 1:
      case 2:
       break label$1;
      default:
       break label$7;
      }
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 4;
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     $0 = $0 + 148 | 0;
     if (HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2]) {
      break label$1;
     }
     $3 = HEAP32[HEAP32[$0 >> 2] >> 2];
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1 + 12 | 0)) {
     break label$1;
    }
    $4 = HEAP32[$1 + 12 >> 2] + 1 | 0;
    HEAP32[$1 + 12 >> 2] = $4;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $0 = $0 + 148 | 0;
    if ($4 >>> 0 >= HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2 >>> 0) {
     break label$1;
    }
    $3 = HEAP32[HEAP32[$0 >> 2] + ($4 << 2) >> 2];
    break label$1;
   }
   label$10 : {
    switch ($5 - 1 | 0) {
    case 2:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 5;
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 7:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 3;
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 0:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 1;
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
     break label$1;
    default:
     break label$10;
    }
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP32[$1 + 12 >> 2] = 0;
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
  }
  $2 = $4;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($6, $3);
  HEAP32[$2 + 12 >> 2] = $4;
  if (($4 | 0) == ($3 | 0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $1 + 12 | 0);
  $3 = $4;
 }
 global$0 = $1 + 16 | 0;
 return $3;
}
function readCubeToEditor_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 label$1 : {
  if (($0 | 0) <= -1) {
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1528, 18), $0);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$2 + 32 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 32 | 0, 51440);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$2 + 32 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   if (($3 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  $3 = HEAP32[11988];
  HEAP32[$2 - -64 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP8[$2 + 48 | 0] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP8[$2 + 40 | 0] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = $2 + 56;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $4 = HEAP32[$3 + 8 >> 2];
       $3 = HEAP32[$3 + 4 >> 2];
       if (($4 - $3 | 0) / 152 >>> 0 > $0 >>> 0) {
        $4 = $3 + Math_imul($0, 152) | 0;
        $5 = HEAP8[$4 + 83 | 0];
        $0 = HEAP32[($3 + Math_imul($0, 152) | 0) + 76 >> 2];
        label$11 : {
         if (($5 | 0) <= -1) {
          break label$11;
         }
         $0 = $5 & 255;
        }
        if ($0) {
         break label$9;
        }
       }
       $0 = HEAPU8[$1 + 11 | 0];
       if (!($0 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] : $0)) {
        break label$7;
       }
       BinWriter__unrepr_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 32 | 0, $1);
       break label$8;
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 56 | 0, $4 + 72 | 0);
     }
     $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1572, 24);
     BinWriter__repr_28_29_20const($2 + 16 | 0, $2 + 32 | 0);
     $1 = 0;
     $4 = $0;
     $0 = HEAPU8[$2 + 27 | 0];
     $3 = $0 << 24 >> 24 < 0;
     $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($4, $3 ? HEAP32[$2 + 16 >> 2] : $2 + 16 | 0, $3 ? HEAP32[$2 + 20 >> 2] : $0);
     $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
     HEAP32[$2 + 72 >> 2] = $3;
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
     $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 72 | 0, 51440);
     $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
     $3 = HEAP32[$2 + 72 >> 2];
     $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
     HEAP32[$3 + 4 >> 2] = $4;
     if (($4 | 0) == -1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $5);
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
     if (HEAP8[$2 + 27 | 0] <= -1) {
      dlfree(HEAP32[$2 + 16 >> 2]);
     }
     $0 = HEAP8[$2 + 67 | 0];
     if (((($0 | 0) < 0 ? HEAP32[$2 + 60 >> 2] : $0 & 255) | 0) != 9) {
      break label$5;
     }
     while (1) {
      $3 = Math_imul($1, 7);
      $9 = HEAPU8[$3 + 46897 | 0];
      $10 = HEAPU8[$3 + 46896 | 0];
      $0 = HEAP32[$2 + 44 >> 2];
      $11 = $2;
      $12 = $3;
      $8 = HEAPU8[$3 + 46898 | 0] == 2 ? 1 : 2;
      $6 = HEAP32[$2 + 36 >> 2];
      $7 = $8 + $6 | 0;
      label$17 : {
       label$18 : {
        if (($7 | 0) >= 9) {
         $13 = $2;
         $5 = $0;
         $3 = HEAP32[$2 + 32 >> 2];
         $4 = HEAP8[$3 + 11 | 0];
         label$20 : {
          if (($4 | 0) <= -1) {
           $4 = HEAP32[$3 + 4 >> 2];
           break label$20;
          }
          $4 = $4 & 255;
         }
         $5 = $5 >>> 0 >= $4 >>> 0;
         HEAP8[$13 + 48 | 0] = $5;
         $4 = 0;
         if ($5) {
          break label$17;
         }
         HEAP32[$2 + 44 >> 2] = $0 + 1;
         $5 = HEAPU8[$2 + 40 | 0] >>> $6;
         $4 = $2;
         if (HEAP8[$3 + 11 | 0] <= -1) {
          $3 = HEAP32[$3 >> 2];
         }
         $0 = HEAPU8[$0 + $3 | 0];
         HEAP8[$4 + 40 | 0] = $0;
         $7 = $7 + -8 | 0;
         $0 = $5 | $0 << 8 - $6;
         break label$18;
        }
        label$24 : {
         if ($0) {
          $0 = HEAPU8[$2 + 40 | 0];
          break label$24;
         }
         $3 = $2;
         $0 = HEAP32[$2 + 32 >> 2];
         $4 = HEAP8[$0 + 11 | 0];
         label$26 : {
          if (($4 | 0) <= -1) {
           $5 = HEAP32[$0 + 4 >> 2];
           break label$26;
          }
          $5 = $4 & 255;
         }
         HEAP8[$3 + 48 | 0] = !$5;
         $4 = 0;
         if (!$5) {
          break label$17;
         }
         HEAP32[$2 + 44 >> 2] = 1;
         $3 = $2;
         if (HEAP8[$0 + 11 | 0] <= -1) {
          $0 = HEAP32[$0 >> 2];
         }
         $0 = HEAPU8[$0 | 0];
         HEAP8[$3 + 40 | 0] = $0;
        }
        $0 = ($0 & 255) >>> $6;
       }
       HEAP32[$2 + 36 >> 2] = $7;
       $4 = $0 & HEAPU8[$8 + 6514 | 0];
      }
      HEAP32[$11 + 8 >> 2] = HEAP8[($12 + ($4 & 255) | 0) + 46899 | 0];
      HEAP32[$2 + 4 >> 2] = $10;
      HEAP32[$2 >> 2] = $9;
      emscripten_asm_const_iii(1614, 1632, $2 | 0) | 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != 63) {
       continue;
      }
      break;
     }
     break label$6;
    }
    $0 = __cxa_allocate_exception(8) | 0;
    HCException__HCException_28char_20const__29($0, 1547);
    __cxa_throw($0 | 0, 1364, 1);
    abort();
   }
   if (HEAP8[$2 + 67 | 0] > -1) {
    break label$1;
   }
   dlfree(HEAP32[$2 + 56 >> 2]);
   break label$1;
  }
  $0 = __cxa_allocate_exception(8) | 0;
  HCException__HCException_28char_20const__29($0, 1597);
  __cxa_throw($0 | 0, 1364, 1);
  abort();
 }
 global$0 = $2 + 80 | 0;
}
function BuildControlBase__initialized_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0);
 $1 = global$0 - 2032 | 0;
 global$0 = $1;
 ShaderProgram__init_28ProgCompileConf_20const__29($0 + 1068 | 0);
 BuildControlBase__makeBuffers_28_29($0);
 memset($1 + 1024 | 0, 0, 1e3);
 memset($1 + 16 | 0, 0, 1e3);
 while (1) {
  $4 = $2 << 2;
  $11 = Math_fround(+($2 | 0) * 6.283185307179586 / 20);
  HEAPF32[$4 + ($1 + 16 | 0) >> 2] = sinf($11) * Math_fround(.10000000149011612);
  HEAPF32[$4 + ($1 + 1024 | 0) >> 2] = cosf($11) * Math_fround(.10000000149011612);
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 20) {
   continue;
  }
  break;
 }
 HEAP8[$0 + 975 | 0] = 1;
 HEAP32[$0 + 980 >> 2] = 4;
 $4 = $0 + 864 | 0;
 Mesh__addIdx_28Mesh__Type_29($4);
 Mesh__addIdx_28Mesh__Type_29($4);
 $4 = HEAP32[$0 + 984 >> 2];
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $8 = $0 + 872 | 0;
 $2 = HEAP32[$0 + 876 >> 2];
 label$2 : {
  if ($2 >>> 0 < HEAPU32[$0 + 880 >> 2]) {
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $2 = HEAP32[$0 + 876 >> 2] + 12 | 0;
   HEAP32[$0 + 876 >> 2] = $2;
   break label$2;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8, $1);
  $2 = HEAP32[$0 + 876 >> 2];
 }
 HEAP32[$1 + 8 >> 2] = 1067030938;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$4 : {
  if ($2 >>> 0 < HEAPU32[$0 + 880 >> 2]) {
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$0 + 876 >> 2] = HEAP32[$0 + 876 >> 2] + 12;
   break label$4;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8, $1);
 }
 HEAP16[$1 >> 1] = 0;
 $2 = HEAP32[$4 + 4 >> 2];
 label$6 : {
  if ($2 >>> 0 < HEAPU32[$4 + 8 >> 2]) {
   HEAP16[$2 >> 1] = 0;
   HEAP32[$4 + 4 >> 2] = $2 + 2;
   break label$6;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($4, $1);
 }
 HEAP16[$1 >> 1] = 1;
 $10 = $4 + 20 | 0;
 $2 = HEAP32[$4 + 24 >> 2];
 label$8 : {
  if ($2 >>> 0 < HEAPU32[$4 + 28 >> 2]) {
   HEAP16[$2 >> 1] = 1;
   HEAP32[$4 + 24 >> 2] = $2 + 2;
   break label$8;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($10, $1);
 }
 $9 = $0 + 932 | 0;
 $2 = 0;
 while (1) {
  HEAP32[$1 + 8 >> 2] = 0;
  $3 = $2 << 2;
  $6 = HEAP32[$3 + ($1 + 1024 | 0) >> 2];
  HEAP32[$1 + 4 >> 2] = $6;
  $5 = HEAP32[$3 + ($1 + 16 | 0) >> 2];
  HEAP32[$1 >> 2] = $5;
  $3 = HEAP32[$0 + 876 >> 2];
  label$11 : {
   if ($3 >>> 0 < HEAPU32[$0 + 880 >> 2]) {
    $7 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $7;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    $3 = HEAP32[$0 + 876 >> 2] + 12 | 0;
    HEAP32[$0 + 876 >> 2] = $3;
    break label$11;
   }
   void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8, $1);
   $3 = HEAP32[$0 + 876 >> 2];
  }
  HEAP32[$1 + 8 >> 2] = 1067030938;
  HEAP32[$1 + 4 >> 2] = $6;
  HEAP32[$1 >> 2] = $5;
  label$13 : {
   if ($3 >>> 0 < HEAPU32[$0 + 880 >> 2]) {
    $6 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $6;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 876 >> 2] = HEAP32[$0 + 876 >> 2] + 12;
    break label$13;
   }
   void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8, $1);
  }
  $5 = $2 << 1;
  $6 = $5 + 2 | 0;
  HEAP16[$1 >> 1] = $6;
  $3 = HEAP32[$0 + 936 >> 2];
  $7 = HEAP32[$0 + 940 >> 2];
  label$15 : {
   if ($3 >>> 0 < $7 >>> 0) {
    HEAP16[$3 >> 1] = $6;
    $3 = $3 + 2 | 0;
    HEAP32[$0 + 936 >> 2] = $3;
    break label$15;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($9, $1);
   $7 = HEAP32[$0 + 940 >> 2];
   $3 = HEAP32[$0 + 936 >> 2];
  }
  $5 = $5 + 3 | 0;
  HEAP16[$1 >> 1] = $5;
  label$17 : {
   if ($3 >>> 0 < $7 >>> 0) {
    HEAP16[$3 >> 1] = $5;
    HEAP32[$0 + 936 >> 2] = $3 + 2;
    break label$17;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($9, $1);
  }
  HEAP16[$1 >> 1] = $6;
  $3 = HEAP32[$4 + 4 >> 2];
  label$19 : {
   if ($3 >>> 0 < HEAPU32[$4 + 8 >> 2]) {
    HEAP16[$3 >> 1] = $6;
    HEAP32[$4 + 4 >> 2] = $3 + 2;
    break label$19;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($4, $1);
  }
  HEAP16[$1 >> 1] = $5;
  $3 = HEAP32[$4 + 24 >> 2];
  label$21 : {
   if ($3 >>> 0 < HEAPU32[$4 + 28 >> 2]) {
    HEAP16[$3 >> 1] = $5;
    HEAP32[$4 + 24 >> 2] = $3 + 2;
    break label$21;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($10, $1);
  }
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 20) {
   continue;
  }
  break;
 }
 HEAP16[$1 >> 1] = 2;
 $2 = HEAP32[$0 + 936 >> 2];
 $3 = HEAP32[$0 + 940 >> 2];
 label$23 : {
  if ($2 >>> 0 < $3 >>> 0) {
   HEAP16[$2 >> 1] = 2;
   $2 = $2 + 2 | 0;
   HEAP32[$0 + 936 >> 2] = $2;
   break label$23;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($9, $1);
  $3 = HEAP32[$0 + 940 >> 2];
  $2 = HEAP32[$0 + 936 >> 2];
 }
 HEAP16[$1 >> 1] = 3;
 label$25 : {
  if ($2 >>> 0 < $3 >>> 0) {
   HEAP16[$2 >> 1] = 3;
   HEAP32[$0 + 936 >> 2] = $2 + 2;
   break label$25;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($9, $1);
 }
 HEAP16[$1 >> 1] = 2;
 $0 = HEAP32[$4 + 4 >> 2];
 label$27 : {
  if ($0 >>> 0 < HEAPU32[$4 + 8 >> 2]) {
   HEAP16[$0 >> 1] = 2;
   HEAP32[$4 + 4 >> 2] = $0 + 2;
   break label$27;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($4, $1);
 }
 HEAP16[$1 >> 1] = 3;
 $0 = HEAP32[$4 + 24 >> 2];
 label$29 : {
  if ($0 >>> 0 < HEAPU32[$4 + 28 >> 2]) {
   HEAP16[$0 >> 1] = 3;
   HEAP32[$4 + 24 >> 2] = $0 + 2;
   break label$29;
  }
  void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($10, $1);
 }
 global$0 = $1 + 2032 | 0;
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 1072 | 0;
 global$0 = $0;
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $6;
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 28 >> 2] = $8;
 HEAP32[$0 + 956 >> 2] = $0 + 960;
 $9 = snprintf($0 + 960 | 0, 100, 27903, $0 + 16 | 0);
 HEAP32[$0 + 544 >> 2] = 269;
 $11 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 536 | 0, 0, $0 + 544 | 0);
 HEAP32[$0 + 544 >> 2] = 269;
 $10 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 528 | 0, 0, $0 + 544 | 0);
 $14 = $0 + 544 | 0;
 label$1 : {
  if ($9 >>> 0 >= 100) {
   $13 = std____2____cloc_28_29();
   HEAP32[$0 >> 2] = $5;
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = $8;
   $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 956 | 0, $13, 27903, $0);
   $5 = HEAP32[$0 + 956 >> 2];
   if (!$5) {
    break label$1;
   }
   $6 = HEAP32[$11 >> 2];
   HEAP32[$11 >> 2] = $5;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$11 + 4 >> 2]]($6);
   }
   $5 = dlmalloc($9 << 2);
   $6 = HEAP32[$10 >> 2];
   HEAP32[$10 >> 2] = $5;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$10 + 4 >> 2]]($6);
   }
   if (!(HEAP32[$10 >> 2] != 0)) {
    break label$1;
   }
   $14 = HEAP32[$10 >> 2];
  }
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 + 520 >> 2] = $5;
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
  $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 520 | 0);
  $6 = $7;
  $5 = HEAP32[$0 + 956 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 48 >> 2]]($6, $5, $5 + $9 | 0, $14) | 0;
  $16 = $9 ? HEAPU8[HEAP32[$0 + 956 >> 2]] == 45 : $16;
  $5 = $0 + 520 | 0;
  $8 = $0 + 512 | 0;
  $17 = $0 + 508 | 0;
  $15 = $0 + 504 | 0;
  $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 488 | 0);
  $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 472 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 456 | 0);
  std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $16, $5, $8, $17, $15, $13, $12, $6, $0 + 452 | 0);
  HEAP32[$0 + 48 >> 2] = 269;
  $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
  $2 = HEAP32[$0 + 452 >> 2];
  label$7 : {
   if (($9 | 0) > ($2 | 0)) {
    if (HEAP8[$6 + 11 | 0] < 0) {
     $5 = HEAP32[$6 + 4 >> 2];
    } else {
     $5 = HEAPU8[$6 + 11 | 0];
    }
    $5 = $5 + ($9 - $2 << 1 | 1) | 0;
    break label$7;
   }
   if (HEAP8[$6 + 11 | 0] < 0) {
    $2 = HEAP32[$6 + 4 >> 2];
   } else {
    $2 = HEAPU8[$6 + 11 | 0];
   }
   $5 = $2 + 2 | 0;
  }
  $2 = $0 + 48 | 0;
  $17 = HEAP32[$0 + 452 >> 2];
  if (HEAP8[$12 + 11 | 0] < 0) {
   $15 = HEAP32[$12 + 4 >> 2];
  } else {
   $15 = HEAPU8[$12 + 11 | 0];
  }
  $5 = $17 + ($15 + $5 | 0) | 0;
  if ($5 >>> 0 >= 101) {
   $2 = dlmalloc($5 << 2);
   $5 = HEAP32[$8 >> 2];
   HEAP32[$8 >> 2] = $2;
   if ($5) {
    FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($5);
   }
   $2 = HEAP32[$8 >> 2];
   if (!$2) {
    break label$1;
   }
  }
  std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($2, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3 + 4 >> 2], $14, ($9 << 2) + $14 | 0, $7, $16, $0 + 512 | 0, HEAP32[$0 + 508 >> 2], HEAP32[$0 + 504 >> 2], $13, $12, $6, HEAP32[$0 + 452 >> 2]);
  $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4);
  $2 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($2);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
  $3 = HEAP32[$0 + 520 >> 2];
  $2 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $2;
  if (($2 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  $2 = HEAP32[$10 >> 2];
  HEAP32[$10 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$10 + 4 >> 2]]($2);
  }
  $2 = HEAP32[$11 >> 2];
  HEAP32[$11 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$11 + 4 >> 2]]($2);
  }
  global$0 = $0 + 1072 | 0;
  return $1 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + $1 | 0;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 4 >> 2];
   if ($2 & 1) {
    break label$2;
   }
   if (!($2 & 3)) {
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   $1 = $2 + $1 | 0;
   $0 = $0 - $2 | 0;
   if (($0 | 0) != HEAP32[13332]) {
    if ($2 >>> 0 <= 255) {
     $4 = $2 >>> 3;
     $2 = HEAP32[$0 + 8 >> 2];
     $3 = HEAP32[$0 + 12 >> 2];
     if (($3 | 0) == ($2 | 0)) {
      HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $4);
      break label$2;
     }
     HEAP32[$2 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $2;
     break label$2;
    }
    $7 = HEAP32[$0 + 24 >> 2];
    $2 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     if (($2 | 0) != ($0 | 0)) {
      $3 = HEAP32[$0 + 8 >> 2];
      HEAP32[$3 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $3;
      break label$6;
     }
     label$9 : {
      $3 = $0 + 20 | 0;
      $4 = HEAP32[$3 >> 2];
      if ($4) {
       break label$9;
      }
      $3 = $0 + 16 | 0;
      $4 = HEAP32[$3 >> 2];
      if ($4) {
       break label$9;
      }
      $2 = 0;
      break label$6;
     }
     while (1) {
      $6 = $3;
      $2 = $4;
      $3 = $2 + 20 | 0;
      $4 = HEAP32[$3 >> 2];
      if ($4) {
       continue;
      }
      $3 = $2 + 16 | 0;
      $4 = HEAP32[$2 + 16 >> 2];
      if ($4) {
       continue;
      }
      break;
     }
     HEAP32[$6 >> 2] = 0;
    }
    if (!$7) {
     break label$2;
    }
    $3 = HEAP32[$0 + 28 >> 2];
    $4 = ($3 << 2) + 53612 | 0;
    label$11 : {
     if (HEAP32[$4 >> 2] == ($0 | 0)) {
      HEAP32[$4 >> 2] = $2;
      if ($2) {
       break label$11;
      }
      HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $3);
      break label$2;
     }
     HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2;
     if (!$2) {
      break label$2;
     }
    }
    HEAP32[$2 + 24 >> 2] = $7;
    $3 = HEAP32[$0 + 16 >> 2];
    if ($3) {
     HEAP32[$2 + 16 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2;
    }
    $3 = HEAP32[$0 + 20 >> 2];
    if (!$3) {
     break label$2;
    }
    HEAP32[$2 + 20 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = $2;
    break label$2;
   }
   $2 = HEAP32[$5 + 4 >> 2];
   if (($2 & 3) != 3) {
    break label$2;
   }
   HEAP32[13329] = $1;
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$5 >> 2] = $1;
   return;
  }
  $2 = HEAP32[$5 + 4 >> 2];
  label$14 : {
   if (!($2 & 2)) {
    if (HEAP32[13333] == ($5 | 0)) {
     HEAP32[13333] = $0;
     $1 = HEAP32[13330] + $1 | 0;
     HEAP32[13330] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     if (HEAP32[13332] != ($0 | 0)) {
      break label$1;
     }
     HEAP32[13329] = 0;
     HEAP32[13332] = 0;
     return;
    }
    if (HEAP32[13332] == ($5 | 0)) {
     HEAP32[13332] = $0;
     $1 = HEAP32[13329] + $1 | 0;
     HEAP32[13329] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     return;
    }
    $1 = ($2 & -8) + $1 | 0;
    label$18 : {
     if ($2 >>> 0 <= 255) {
      $4 = $2 >>> 3;
      $2 = HEAP32[$5 + 8 >> 2];
      $3 = HEAP32[$5 + 12 >> 2];
      if (($3 | 0) == ($2 | 0)) {
       HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $4);
       break label$18;
      }
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$18;
     }
     $7 = HEAP32[$5 + 24 >> 2];
     $2 = HEAP32[$5 + 12 >> 2];
     label$21 : {
      if (($5 | 0) != ($2 | 0)) {
       $3 = HEAP32[$5 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$21;
      }
      label$24 : {
       $3 = $5 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$24;
       }
       $3 = $5 + 16 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$24;
       }
       $2 = 0;
       break label$21;
      }
      while (1) {
       $6 = $3;
       $2 = $4;
       $3 = $2 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        continue;
       }
       $3 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$18;
     }
     $3 = HEAP32[$5 + 28 >> 2];
     $4 = ($3 << 2) + 53612 | 0;
     label$26 : {
      if (HEAP32[$4 >> 2] == ($5 | 0)) {
       HEAP32[$4 >> 2] = $2;
       if ($2) {
        break label$26;
       }
       HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $3);
       break label$18;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$18;
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $3 = HEAP32[$5 + 16 >> 2];
     if ($3) {
      HEAP32[$2 + 16 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $3 = HEAP32[$5 + 20 >> 2];
     if (!$3) {
      break label$18;
     }
     HEAP32[$2 + 20 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2;
    }
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
    if (HEAP32[13332] != ($0 | 0)) {
     break label$14;
    }
    HEAP32[13329] = $1;
    return;
   }
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$0 + $1 >> 2] = $1;
  }
  if ($1 >>> 0 <= 255) {
   $2 = $1 >>> 3;
   $1 = ($2 << 3) + 53348 | 0;
   $3 = HEAP32[13327];
   $2 = 1 << $2;
   label$30 : {
    if (!($3 & $2)) {
     HEAP32[13327] = $2 | $3;
     $2 = $1;
     break label$30;
    }
    $2 = HEAP32[$1 + 8 >> 2];
   }
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $0;
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $2;
   return;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $3 = $0;
  $4 = $1 >>> 8;
  $2 = 0;
  label$32 : {
   if (!$4) {
    break label$32;
   }
   $2 = 31;
   if ($1 >>> 0 > 16777215) {
    break label$32;
   }
   $6 = $4 + 1048320 >>> 16 & 8;
   $4 = $4 << $6;
   $2 = $4 + 520192 >>> 16 & 4;
   $5 = $4 << $2;
   $4 = $5 + 245760 >>> 16 & 2;
   $2 = ($5 << $4 >>> 15) - ($4 | ($2 | $6)) | 0;
   $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
  }
  HEAP32[$3 + 28 >> 2] = $2;
  $4 = ($2 << 2) + 53612 | 0;
  label$33 : {
   $3 = HEAP32[13328];
   $6 = 1 << $2;
   label$34 : {
    if (!($3 & $6)) {
     HEAP32[13328] = $3 | $6;
     HEAP32[$4 >> 2] = $0;
     break label$34;
    }
    $3 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1) | 0);
    $2 = HEAP32[$4 >> 2];
    while (1) {
     $4 = $2;
     if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
      break label$33;
     }
     $2 = $3 >>> 29;
     $3 = $3 << 1;
     $6 = $4 + ($2 & 4) | 0;
     $2 = HEAP32[$6 + 16 >> 2];
     if ($2) {
      continue;
     }
     break;
    }
    HEAP32[$6 + 16 >> 2] = $0;
   }
   HEAP32[$0 + 24 >> 2] = $4;
   HEAP32[$0 + 12 >> 2] = $0;
   HEAP32[$0 + 8 >> 2] = $0;
   return;
  }
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $1;
 }
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 464 | 0;
 global$0 = $0;
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $6;
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 28 >> 2] = $8;
 HEAP32[$0 + 348 >> 2] = $0 + 352;
 $9 = snprintf($0 + 352 | 0, 100, 27903, $0 + 16 | 0);
 HEAP32[$0 + 240 >> 2] = 269;
 $11 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 232 | 0, 0, $0 + 240 | 0);
 HEAP32[$0 + 240 >> 2] = 269;
 $10 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 224 | 0, 0, $0 + 240 | 0);
 $14 = $0 + 240 | 0;
 label$1 : {
  if ($9 >>> 0 >= 100) {
   $13 = std____2____cloc_28_29();
   HEAP32[$0 >> 2] = $5;
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = $8;
   $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 348 | 0, $13, 27903, $0);
   $5 = HEAP32[$0 + 348 >> 2];
   if (!$5) {
    break label$1;
   }
   $6 = HEAP32[$11 >> 2];
   HEAP32[$11 >> 2] = $5;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$11 + 4 >> 2]]($6);
   }
   $5 = dlmalloc($9);
   $6 = HEAP32[$10 >> 2];
   HEAP32[$10 >> 2] = $5;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$10 + 4 >> 2]]($6);
   }
   if (!(HEAP32[$10 >> 2] != 0)) {
    break label$1;
   }
   $14 = HEAP32[$10 >> 2];
  }
  $5 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 + 216 >> 2] = $5;
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
  $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 216 | 0);
  $6 = $7;
  $5 = HEAP32[$0 + 348 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 32 >> 2]]($6, $5, $5 + $9 | 0, $14) | 0;
  $16 = $9 ? HEAPU8[HEAP32[$0 + 348 >> 2]] == 45 : $16;
  $5 = $0 + 216 | 0;
  $8 = $0 + 208 | 0;
  $17 = $0 + 207 | 0;
  $15 = $0 + 206 | 0;
  $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
  $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 176 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
  std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $16, $5, $8, $17, $15, $13, $12, $6, $0 + 156 | 0);
  HEAP32[$0 + 48 >> 2] = 269;
  $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
  $2 = HEAP32[$0 + 156 >> 2];
  label$7 : {
   if (($9 | 0) > ($2 | 0)) {
    if (HEAP8[$6 + 11 | 0] < 0) {
     $5 = HEAP32[$6 + 4 >> 2];
    } else {
     $5 = HEAPU8[$6 + 11 | 0];
    }
    $5 = $5 + ($9 - $2 << 1 | 1) | 0;
    break label$7;
   }
   if (HEAP8[$6 + 11 | 0] < 0) {
    $2 = HEAP32[$6 + 4 >> 2];
   } else {
    $2 = HEAPU8[$6 + 11 | 0];
   }
   $5 = $2 + 2 | 0;
  }
  $2 = $0 + 48 | 0;
  $17 = HEAP32[$0 + 156 >> 2];
  if (HEAP8[$12 + 11 | 0] < 0) {
   $15 = HEAP32[$12 + 4 >> 2];
  } else {
   $15 = HEAPU8[$12 + 11 | 0];
  }
  $5 = $17 + ($15 + $5 | 0) | 0;
  if ($5 >>> 0 >= 101) {
   $2 = dlmalloc($5);
   $5 = HEAP32[$8 >> 2];
   HEAP32[$8 >> 2] = $2;
   if ($5) {
    FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($5);
   }
   $2 = HEAP32[$8 >> 2];
   if (!$2) {
    break label$1;
   }
  }
  std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($2, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3 + 4 >> 2], $14, $9 + $14 | 0, $7, $16, $0 + 208 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $13, $12, $6, HEAP32[$0 + 156 >> 2]);
  $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4);
  $2 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($2);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
  $3 = HEAP32[$0 + 216 >> 2];
  $2 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $2;
  if (($2 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  $2 = HEAP32[$10 >> 2];
  HEAP32[$10 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$10 + 4 >> 2]]($2);
  }
  $2 = HEAP32[$11 >> 2];
  HEAP32[$11 >> 2] = 0;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$11 + 4 >> 2]]($2);
  }
  global$0 = $0 + 464 | 0;
  return $1 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $21 = global$0 - 16 | 0;
 global$0 = $21;
 HEAP32[$2 >> 2] = $0;
 $23 = $3 & 512;
 while (1) {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($22 | 0) == 4) {
       if (HEAP8[$13 + 11 | 0] < 0) {
        $4 = HEAP32[$13 + 4 >> 2];
       } else {
        $4 = HEAPU8[$13 + 11 | 0];
       }
       if ($4 >>> 0 > 1) {
        HEAP32[$21 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($13);
        HEAP32[$2 >> 2] = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2____wrap_iter_char____operator__28long_29_20const($21 + 8 | 0, 1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($13), HEAP32[$2 >> 2]);
       }
       $3 = $3 & 176;
       if (($3 | 0) == 16) {
        break label$4;
       }
       if (($3 | 0) != 32) {
        break label$5;
       }
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break label$4;
      }
      $16 = HEAP8[$8 + $22 | 0];
      if ($16 >>> 0 > 4) {
       break label$2;
      }
      label$10 : {
       switch ($16 - 1 | 0) {
       default:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        break label$2;
       case 0:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        $16 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($6, 32) | 0;
        $15 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $15 + 1;
        HEAP8[$15 | 0] = $16;
        break label$2;
       case 2:
        if (HEAP8[$13 + 11 | 0] < 0) {
         $15 = HEAP32[$13 + 4 >> 2];
        } else {
         $15 = HEAPU8[$13 + 11 | 0];
        }
        if (!$15) {
         break label$2;
        }
        if (HEAP8[$13 + 11 | 0] < 0) {
         $15 = HEAP32[$13 >> 2];
        } else {
         $15 = $13;
        }
        $16 = HEAPU8[$15 | 0];
        $15 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $15 + 1;
        HEAP8[$15 | 0] = $16;
        break label$2;
       case 1:
        $16 = !$23;
        if (HEAP8[$12 + 11 | 0] < 0) {
         $15 = HEAP32[$12 + 4 >> 2];
        } else {
         $15 = HEAPU8[$12 + 11 | 0];
        }
        if ($16 | !$15) {
         break label$2;
        }
        HEAP32[$2 >> 2] = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($12), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($12), HEAP32[$2 >> 2]);
        break label$2;
       case 3:
        break label$10;
       }
      }
      $24 = HEAP32[$2 >> 2];
      $4 = $7 ? $4 + 1 | 0 : $4;
      $17 = $4;
      while (1) {
       label$22 : {
        if ($17 >>> 0 >= $5 >>> 0) {
         break label$22;
        }
        $16 = HEAP8[$17 | 0];
        if (($16 | 0) >= 0) {
         $15 = (HEAPU16[HEAP32[$6 + 8 >> 2] + (($16 & 255) << 1) >> 1] & 2048) != 0;
        } else {
         $15 = 0;
        }
        if (!$15) {
         break label$22;
        }
        $17 = $17 + 1 | 0;
        continue;
       }
       break;
      }
      $16 = $14;
      if (($16 | 0) >= 1) {
       while (1) {
        $15 = ($16 | 0) < 1;
        if (!($15 | $17 >>> 0 <= $4 >>> 0)) {
         $17 = $17 + -1 | 0;
         $15 = HEAPU8[$17 | 0];
         $18 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $18 + 1;
         HEAP8[$18 | 0] = $15;
         $16 = $16 + -1 | 0;
         continue;
        }
        break;
       }
       if ($15) {
        $15 = 0;
       } else {
        $15 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($6, 48) | 0;
       }
       while (1) {
        $18 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $18 + 1;
        if (($16 | 0) >= 1) {
         HEAP8[$18 | 0] = $15;
         $16 = $16 + -1 | 0;
         continue;
        }
        break;
       }
       HEAP8[$18 | 0] = $9;
      }
      if (($4 | 0) == ($17 | 0)) {
       $16 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($6, 48) | 0;
       $15 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $15 + 1;
       HEAP8[$15 | 0] = $16;
       break label$3;
      }
      if (HEAP8[$11 + 11 | 0] < 0) {
       $15 = HEAP32[$11 + 4 >> 2];
      } else {
       $15 = HEAPU8[$11 + 11 | 0];
      }
      if ($15) {
       if (HEAP8[$11 + 11 | 0] < 0) {
        $15 = HEAP32[$11 >> 2];
       } else {
        $15 = $11;
       }
       $15 = HEAP8[$15 | 0];
      } else {
       $15 = -1;
      }
      $16 = 0;
      $19 = 0;
      while (1) {
       if (($4 | 0) == ($17 | 0)) {
        break label$3;
       }
       label$39 : {
        if (($16 | 0) != ($15 | 0)) {
         $18 = $16;
         break label$39;
        }
        $15 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $15 + 1;
        HEAP8[$15 | 0] = $10;
        $18 = 0;
        $19 = $19 + 1 | 0;
        $15 = $19;
        if (HEAP8[$11 + 11 | 0] < 0) {
         $20 = HEAP32[$11 + 4 >> 2];
        } else {
         $20 = HEAPU8[$11 + 11 | 0];
        }
        if ($15 >>> 0 >= $20 >>> 0) {
         $15 = $16;
         break label$39;
        }
        if (HEAP8[$11 + 11 | 0] < 0) {
         $15 = HEAP32[$11 >> 2];
        } else {
         $15 = $11;
        }
        if (HEAPU8[$15 + $19 | 0] == 127) {
         $15 = -1;
         break label$39;
        }
        if (HEAP8[$11 + 11 | 0] < 0) {
         $15 = HEAP32[$11 >> 2];
        } else {
         $15 = $11;
        }
        $15 = HEAP8[$15 + $19 | 0];
       }
       $17 = $17 + -1 | 0;
       $16 = HEAPU8[$17 | 0];
       $20 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $20 + 1;
       HEAP8[$20 | 0] = $16;
       $16 = $18 + 1 | 0;
       continue;
      }
     }
     HEAP32[$1 >> 2] = $0;
    }
    global$0 = $21 + 16 | 0;
    return;
   }
   void_20std____2__reverse_char___28char__2c_20char__29($24, HEAP32[$2 >> 2]);
  }
  $22 = $22 + 1 | 0;
  continue;
 }
}
function mbsrtowcs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = HEAP32[$1 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           if (!$3) {
            break label$10;
           }
           $6 = HEAP32[$3 >> 2];
           if (!$6) {
            break label$10;
           }
           if (!$0) {
            $3 = $2;
            break label$7;
           }
           HEAP32[$3 >> 2] = 0;
           $3 = $2;
           break label$9;
          }
          label$12 : {
           label$13 : {
            if (!HEAP32[HEAP32[11593] >> 2]) {
             if (!$0) {
              break label$13;
             }
             if (!$2) {
              break label$1;
             }
             $6 = $2;
             while (1) {
              $3 = HEAP8[$4 | 0];
              if ($3) {
               HEAP32[$0 >> 2] = $3 & 57343;
               $0 = $0 + 4 | 0;
               $4 = $4 + 1 | 0;
               $6 = $6 + -1 | 0;
               if ($6) {
                continue;
               }
               break label$1;
              }
              break;
             }
             HEAP32[$0 >> 2] = 0;
             HEAP32[$1 >> 2] = 0;
             return $2 - $6 | 0;
            }
            $3 = $2;
            if (!$0) {
             break label$12;
            }
            $5 = $2;
            $7 = 0;
            break label$8;
           }
           return strlen($4);
          }
          $5 = 1;
          break label$7;
         }
         $7 = 1;
        }
        while (1) {
         if (!$7) {
          if (!$5) {
           break label$1;
          }
          while (1) {
           label$20 : {
            $7 = HEAPU8[$4 | 0];
            $8 = $7 + -1 | 0;
            label$21 : {
             label$22 : {
              if ($8 >>> 0 > 126) {
               $6 = $7;
               $3 = $5;
               break label$22;
              }
              if ($4 & 3 | $5 >>> 0 < 5) {
               break label$21;
              }
              $3 = ($5 - ($5 + -5 & -4) | 0) + -4 | 0;
              label$24 : {
               label$25 : {
                while (1) {
                 $6 = HEAP32[$4 >> 2];
                 if (($6 | $6 + -16843009) & -2139062144) {
                  break label$25;
                 }
                 HEAP32[$0 >> 2] = $6 & 255;
                 HEAP32[$0 + 4 >> 2] = HEAPU8[$4 + 1 | 0];
                 HEAP32[$0 + 8 >> 2] = HEAPU8[$4 + 2 | 0];
                 HEAP32[$0 + 12 >> 2] = HEAPU8[$4 + 3 | 0];
                 $0 = $0 + 16 | 0;
                 $4 = $4 + 4 | 0;
                 $5 = $5 + -4 | 0;
                 if ($5 >>> 0 > 4) {
                  continue;
                 }
                 break;
                }
                $6 = HEAPU8[$4 | 0];
                break label$24;
               }
               $3 = $5;
              }
              $7 = $6 & 255;
              $8 = $7 + -1 | 0;
             }
             if ($8 >>> 0 > 126) {
              break label$20;
             }
             $5 = $3;
            }
            HEAP32[$0 >> 2] = $7;
            $0 = $0 + 4 | 0;
            $4 = $4 + 1 | 0;
            $5 = $5 + -1 | 0;
            if ($5) {
             continue;
            }
            break label$1;
           }
           break;
          }
          $7 = $7 + -194 | 0;
          if ($7 >>> 0 > 50) {
           break label$5;
          }
          $4 = $4 + 1 | 0;
          $6 = HEAP32[($7 << 2) + 23232 >> 2];
          $7 = 1;
          continue;
         }
         $8 = HEAPU8[$4 | 0];
         $5 = $8 >>> 3;
         if (($5 + -16 | $5 + ($6 >> 26)) >>> 0 > 7) {
          break label$6;
         }
         label$27 : {
          label$28 : {
           $5 = $8 + -128 | $6 << 6;
           $7 = $4 + 1 | 0;
           label$29 : {
            if (($5 | 0) > -1) {
             break label$29;
            }
            $8 = HEAPU8[$4 + 1 | 0] + -128 | 0;
            if ($8 >>> 0 > 63) {
             break label$28;
            }
            $5 = $8 | $5 << 6;
            $7 = $4 + 2 | 0;
            if (($5 | 0) > -1) {
             break label$29;
            }
            $7 = HEAPU8[$4 + 2 | 0] + -128 | 0;
            if ($7 >>> 0 > 63) {
             break label$28;
            }
            $5 = $7 | $5 << 6;
            $7 = $4 + 3 | 0;
           }
           $4 = $7;
           HEAP32[$0 >> 2] = $5;
           $5 = $3 + -1 | 0;
           $0 = $0 + 4 | 0;
           break label$27;
          }
          HEAP32[12002] = 25;
          $4 = $4 + -1 | 0;
          break label$3;
         }
         $7 = 0;
         continue;
        }
       }
       while (1) {
        if (!$5) {
         $5 = HEAPU8[$4 | 0] >>> 3;
         if (($5 + -16 | $5 + ($6 >> 26)) >>> 0 > 7) {
          break label$6;
         }
         $5 = $4 + 1 | 0;
         label$32 : {
          if (!($6 & 33554432)) {
           break label$32;
          }
          if ((HEAPU8[$4 + 1 | 0] & 192) != 128) {
           break label$6;
          }
          $5 = $4 + 2 | 0;
          if (!($6 & 524288)) {
           break label$32;
          }
          if ((HEAPU8[$4 + 2 | 0] & 192) != 128) {
           break label$6;
          }
          $5 = $4 + 3 | 0;
         }
         $4 = $5;
         $3 = $3 + -1 | 0;
         $5 = 1;
         continue;
        }
        while (1) {
         $6 = HEAPU8[$4 | 0];
         label$34 : {
          if ($4 & 3 | $6 + -1 >>> 0 > 126) {
           break label$34;
          }
          $6 = HEAP32[$4 >> 2];
          if (($6 | $6 + -16843009) & -2139062144) {
           break label$34;
          }
          while (1) {
           $3 = $3 + -4 | 0;
           $6 = HEAP32[$4 + 4 >> 2];
           $5 = $4 + 4 | 0;
           $4 = $5;
           if (!(($6 + -16843009 | $6) & -2139062144)) {
            continue;
           }
           break;
          }
          $4 = $5;
         }
         $5 = $6 & 255;
         if ($5 + -1 >>> 0 <= 126) {
          $3 = $3 + -1 | 0;
          $4 = $4 + 1 | 0;
          continue;
         }
         break;
        }
        $5 = $5 + -194 | 0;
        if ($5 >>> 0 > 50) {
         break label$5;
        }
        $4 = $4 + 1 | 0;
        $6 = HEAP32[($5 << 2) + 23232 >> 2];
        $5 = 0;
        continue;
       }
      }
      $4 = $4 + -1 | 0;
      if ($6) {
       break label$4;
      }
      $6 = HEAPU8[$4 | 0];
     }
     if ($6 & 255) {
      break label$4;
     }
     if ($0) {
      HEAP32[$0 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
     }
     return $2 - $3 | 0;
    }
    HEAP32[12002] = 25;
    if (!$0) {
     break label$2;
    }
   }
   HEAP32[$1 >> 2] = $4;
  }
  return -1;
 }
 HEAP32[$1 >> 2] = $4;
 return $2;
}
function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $21 = global$0 - 16 | 0;
 global$0 = $21;
 HEAP32[$2 >> 2] = $0;
 $23 = $3 & 512;
 label$1 : {
  while (1) {
   label$3 : {
    if (($22 | 0) == 4) {
     if (HEAP8[$13 + 11 | 0] < 0) {
      $4 = HEAP32[$13 + 4 >> 2];
     } else {
      $4 = HEAPU8[$13 + 11 | 0];
     }
     if ($4 >>> 0 > 1) {
      HEAP32[$21 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($13);
      HEAP32[$2 >> 2] = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2____wrap_iter_wchar_t____operator__28long_29_20const($21 + 8 | 0, 1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($13), HEAP32[$2 >> 2]);
     }
     $3 = $3 & 176;
     if (($3 | 0) == 16) {
      break label$1;
     }
     if (($3 | 0) != 32) {
      break label$3;
     }
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     break label$1;
    }
    $16 = HEAP8[$8 + $22 | 0];
    label$8 : {
     if ($16 >>> 0 > 4) {
      break label$8;
     }
     label$9 : {
      switch ($16 - 1 | 0) {
      default:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break label$8;
      case 0:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       $17 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 44 >> 2]]($6, 32) | 0;
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 4;
       HEAP32[$16 >> 2] = $17;
       break label$8;
      case 2:
       if (HEAP8[$13 + 11 | 0] < 0) {
        $15 = HEAP32[$13 + 4 >> 2];
       } else {
        $15 = HEAPU8[$13 + 11 | 0];
       }
       if (!$15) {
        break label$8;
       }
       if (HEAP8[$13 + 11 | 0] < 0) {
        $15 = HEAP32[$13 >> 2];
       } else {
        $15 = $13;
       }
       $17 = HEAP32[$15 >> 2];
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 4;
       HEAP32[$16 >> 2] = $17;
       break label$8;
      case 1:
       $15 = !$23;
       if (HEAP8[$12 + 11 | 0] < 0) {
        $16 = HEAP32[$12 + 4 >> 2];
       } else {
        $16 = HEAPU8[$12 + 11 | 0];
       }
       if ($15 | !$16) {
        break label$8;
       }
       HEAP32[$2 >> 2] = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($12), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($12), HEAP32[$2 >> 2]);
       break label$8;
      case 3:
       break label$9;
      }
     }
     $24 = HEAP32[$2 >> 2];
     $4 = $7 ? $4 + 4 | 0 : $4;
     $18 = $4;
     while (1) {
      label$21 : {
       if ($18 >>> 0 >= $5 >>> 0) {
        break label$21;
       }
       if (!FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, 2048, HEAP32[$18 >> 2])) {
        break label$21;
       }
       $18 = $18 + 4 | 0;
       continue;
      }
      break;
     }
     $16 = $14;
     if (($16 | 0) >= 1) {
      while (1) {
       $17 = ($16 | 0) < 1;
       if (!($17 | $18 >>> 0 <= $4 >>> 0)) {
        $18 = $18 + -4 | 0;
        $15 = HEAP32[$18 >> 2];
        $17 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $17 + 4;
        HEAP32[$17 >> 2] = $15;
        $16 = $16 + -1 | 0;
        continue;
       }
       break;
      }
      if ($17) {
       $19 = 0;
      } else {
       $19 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 44 >> 2]]($6, 48) | 0;
      }
      $17 = HEAP32[$2 >> 2];
      while (1) {
       $15 = $17 + 4 | 0;
       if (($16 | 0) >= 1) {
        HEAP32[$17 >> 2] = $19;
        $16 = $16 + -1 | 0;
        $17 = $15;
        continue;
       }
       break;
      }
      HEAP32[$2 >> 2] = $15;
      HEAP32[$17 >> 2] = $9;
     }
     label$29 : {
      if (($4 | 0) == ($18 | 0)) {
       $17 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 44 >> 2]]($6, 48) | 0;
       $16 = HEAP32[$2 >> 2];
       $18 = $16 + 4 | 0;
       HEAP32[$2 >> 2] = $18;
       HEAP32[$16 >> 2] = $17;
       break label$29;
      }
      if (HEAP8[$11 + 11 | 0] < 0) {
       $15 = HEAP32[$11 + 4 >> 2];
      } else {
       $15 = HEAPU8[$11 + 11 | 0];
      }
      if ($15) {
       if (HEAP8[$11 + 11 | 0] < 0) {
        $15 = HEAP32[$11 >> 2];
       } else {
        $15 = $11;
       }
       $15 = HEAP8[$15 | 0];
      } else {
       $15 = -1;
      }
      $16 = 0;
      $20 = 0;
      while (1) {
       if (($4 | 0) != ($18 | 0)) {
        label$38 : {
         if (($16 | 0) != ($15 | 0)) {
          $17 = $16;
          break label$38;
         }
         $17 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $17 + 4;
         HEAP32[$17 >> 2] = $10;
         $17 = 0;
         $20 = $20 + 1 | 0;
         $15 = $20;
         if (HEAP8[$11 + 11 | 0] < 0) {
          $19 = HEAP32[$11 + 4 >> 2];
         } else {
          $19 = HEAPU8[$11 + 11 | 0];
         }
         if ($15 >>> 0 >= $19 >>> 0) {
          $15 = $16;
          break label$38;
         }
         if (HEAP8[$11 + 11 | 0] < 0) {
          $15 = HEAP32[$11 >> 2];
         } else {
          $15 = $11;
         }
         if (HEAPU8[$15 + $20 | 0] == 127) {
          $15 = -1;
          break label$38;
         }
         if (HEAP8[$11 + 11 | 0] < 0) {
          $15 = HEAP32[$11 >> 2];
         } else {
          $15 = $11;
         }
         $15 = HEAP8[$15 + $20 | 0];
        }
        $18 = $18 + -4 | 0;
        $19 = HEAP32[$18 >> 2];
        $16 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $16 + 4;
        HEAP32[$16 >> 2] = $19;
        $16 = $17 + 1 | 0;
        continue;
       }
       break;
      }
      $18 = HEAP32[$2 >> 2];
     }
     void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($24, $18);
    }
    $22 = $22 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP32[$1 >> 2] = $0;
 }
 global$0 = $21 + 16 | 0;
}
function Shape__readAxis_28BuildWorld_20const__2c_20int_2c_20int_2c_20int_2c_20EPlane_2c_20std____2__list_Shape__FaceDef_2c_20std____2__allocator_Shape__FaceDef__20___2c_20int__2c_20SqrLimits__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $18 = global$0 + -64 | 0;
 global$0 = $18;
 if (($4 | 0) >= 1) {
  $13 = -1;
  $19 = ($2 | 0) < 1;
  $20 = Math_imul($5, 125e3) + $1 | 0;
  $1 = -1;
  $14 = -1;
  while (1) {
   if (!$19) {
    $15 = 0;
    while (1) {
     if (($3 | 0) >= 1) {
      $16 = 0;
      while (1) {
       $10 = $5 >>> 0 > 2;
       label$7 : {
        if ($10 | $17 >>> 0 > 49 | ($15 >>> 0 > 49 | $16 >>> 0 > 49)) {
         break label$7;
        }
        $9 = HEAPU8[(((Math_imul($17, 2500) + $20 | 0) + Math_imul($15, 50) | 0) + $16 | 0) + 136 | 0];
        if (($9 & 12) != 8) {
         break label$7;
        }
        label$8 : {
         if ($10) {
          break label$8;
         }
         label$9 : {
          switch ($5 - 1 | 0) {
          default:
           $14 = $17;
           $1 = $15;
           $13 = $16;
           break label$8;
          case 0:
           $14 = $15;
           $1 = $17;
           $13 = $16;
           break label$8;
          case 1:
           break label$9;
          }
         }
         $14 = $15;
         $1 = $16;
         $13 = $17;
        }
        $13 = $13 << 2;
        $1 = $1 << 2;
        $14 = $14 << 2;
        if (($9 & 15) == 10) {
         HEAP32[$7 >> 2] = HEAP32[$0 + 12 >> 2];
        }
        $10 = $18;
        HEAP16[$10 + 16 >> 1] = -1;
        HEAP16[$10 + 18 >> 1] = 65535;
        HEAP16[$10 + 20 >> 1] = -1;
        HEAP16[$10 + 22 >> 1] = 65535;
        HEAP16[$10 + 56 >> 1] = -1;
        HEAP16[$10 + 58 >> 1] = 65535;
        HEAP16[$10 + 60 >> 1] = -1;
        HEAP16[$10 + 62 >> 1] = 65535;
        HEAP16[$10 + 48 >> 1] = -1;
        HEAP16[$10 + 50 >> 1] = 65535;
        HEAP16[$10 + 52 >> 1] = -1;
        HEAP16[$10 + 54 >> 1] = 65535;
        HEAP16[$10 + 40 >> 1] = -1;
        HEAP16[$10 + 42 >> 1] = 65535;
        HEAP16[$10 + 44 >> 1] = -1;
        HEAP16[$10 + 46 >> 1] = 65535;
        HEAP16[$10 + 32 >> 1] = -1;
        HEAP16[$10 + 34 >> 1] = 65535;
        HEAP16[$10 + 36 >> 1] = -1;
        HEAP16[$10 + 38 >> 1] = 65535;
        HEAP16[$10 + 24 >> 1] = -1;
        HEAP16[$10 + 26 >> 1] = 65535;
        HEAP16[$10 + 28 >> 1] = -1;
        HEAP16[$10 + 30 >> 1] = 65535;
        $9 = operator_20new_28unsigned_20long_29(196);
        HEAP16[$9 + 32 >> 1] = 0;
        HEAP32[$9 + 24 >> 2] = 2;
        HEAP32[$9 + 28 >> 2] = -1;
        HEAP32[$9 + 20 >> 2] = $13;
        HEAP32[$9 + 16 >> 2] = $1;
        HEAP32[$9 + 12 >> 2] = $14;
        HEAP32[$9 + 8 >> 2] = $5;
        $11 = HEAPU16[$10 + 18 >> 1] | HEAPU16[$10 + 20 >> 1] << 16;
        $12 = HEAPU16[$10 + 14 >> 1] | HEAPU16[$10 + 16 >> 1] << 16;
        HEAP16[$9 + 34 >> 1] = $12;
        HEAP16[$9 + 36 >> 1] = $12 >>> 16;
        HEAP16[$9 + 38 >> 1] = $11;
        HEAP16[$9 + 40 >> 1] = $11 >>> 16;
        $11 = HEAPU16[$10 + 26 >> 1] | HEAPU16[$10 + 28 >> 1] << 16;
        $12 = HEAPU16[$10 + 22 >> 1] | HEAPU16[$10 + 24 >> 1] << 16;
        HEAP16[$9 + 42 >> 1] = $12;
        HEAP16[$9 + 44 >> 1] = $12 >>> 16;
        HEAP16[$9 + 46 >> 1] = $11;
        HEAP16[$9 + 48 >> 1] = $11 >>> 16;
        $11 = HEAPU16[$10 + 34 >> 1] | HEAPU16[$10 + 36 >> 1] << 16;
        $12 = HEAPU16[$10 + 30 >> 1] | HEAPU16[$10 + 32 >> 1] << 16;
        HEAP16[$9 + 50 >> 1] = $12;
        HEAP16[$9 + 52 >> 1] = $12 >>> 16;
        HEAP16[$9 + 54 >> 1] = $11;
        HEAP16[$9 + 56 >> 1] = $11 >>> 16;
        $11 = HEAPU16[$10 + 42 >> 1] | HEAPU16[$10 + 44 >> 1] << 16;
        $12 = HEAPU16[$10 + 38 >> 1] | HEAPU16[$10 + 40 >> 1] << 16;
        HEAP16[$9 + 58 >> 1] = $12;
        HEAP16[$9 + 60 >> 1] = $12 >>> 16;
        HEAP16[$9 + 62 >> 1] = $11;
        HEAP16[$9 + 64 >> 1] = $11 >>> 16;
        $11 = HEAPU16[$10 + 50 >> 1] | HEAPU16[$10 + 52 >> 1] << 16;
        $12 = HEAPU16[$10 + 46 >> 1] | HEAPU16[$10 + 48 >> 1] << 16;
        HEAP16[$9 + 66 >> 1] = $12;
        HEAP16[$9 + 68 >> 1] = $12 >>> 16;
        HEAP16[$9 + 70 >> 1] = $11;
        HEAP16[$9 + 72 >> 1] = $11 >>> 16;
        $11 = HEAPU16[$10 + 58 >> 1] | HEAPU16[$10 + 60 >> 1] << 16;
        $12 = HEAPU16[$10 + 54 >> 1] | HEAPU16[$10 + 56 >> 1] << 16;
        HEAP16[$9 + 74 >> 1] = $12;
        HEAP16[$9 + 76 >> 1] = $12 >>> 16;
        HEAP16[$9 + 78 >> 1] = $11;
        HEAP16[$9 + 80 >> 1] = $11 >>> 16;
        HEAP16[$9 + 82 >> 1] = HEAPU16[$10 + 62 >> 1];
        HEAP32[$9 + 84 >> 2] = 0;
        HEAP32[$9 + 88 >> 2] = 0;
        HEAP32[$9 + 92 >> 2] = 0;
        HEAP32[$9 + 96 >> 2] = 0;
        HEAP32[$9 + 100 >> 2] = 0;
        HEAP32[$9 + 104 >> 2] = 0;
        HEAP16[$9 + 108 >> 1] = 0;
        HEAP32[$9 + 112 >> 2] = 0;
        HEAP32[$9 + 116 >> 2] = 0;
        HEAP32[$9 + 120 >> 2] = 0;
        HEAP32[$9 + 124 >> 2] = 0;
        HEAP32[$9 + 128 >> 2] = 0;
        HEAP32[$9 + 132 >> 2] = 0;
        HEAP16[$9 + 136 >> 1] = 0;
        HEAP32[$9 + 140 >> 2] = 0;
        HEAP32[$9 + 144 >> 2] = 0;
        HEAP32[$9 + 148 >> 2] = 0;
        HEAP32[$9 + 152 >> 2] = 0;
        HEAP32[$9 + 156 >> 2] = 0;
        HEAP32[$9 + 160 >> 2] = 0;
        HEAP16[$9 + 164 >> 1] = 0;
        HEAP16[$9 + 192 >> 1] = 0;
        HEAP32[$9 + 184 >> 2] = 0;
        HEAP32[$9 + 188 >> 2] = 0;
        HEAP32[$9 + 176 >> 2] = 0;
        HEAP32[$9 + 180 >> 2] = 0;
        HEAP32[$9 + 168 >> 2] = 0;
        HEAP32[$9 + 172 >> 2] = 0;
        HEAP32[$9 >> 2] = $6;
        $10 = HEAP32[$6 + 4 >> 2];
        HEAP32[$9 + 4 >> 2] = $10;
        HEAP32[$10 >> 2] = $9;
        HEAP32[$6 + 4 >> 2] = $9;
        HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
        HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
        if (HEAP32[$8 + 4 >> 2] < ($13 | 0)) {
         HEAP32[$8 + 4 >> 2] = $13;
        }
        if (HEAP32[$8 >> 2] > ($13 | 0)) {
         HEAP32[$8 >> 2] = $13;
        }
        if (HEAP32[$8 + 12 >> 2] < ($14 | 0)) {
         HEAP32[$8 + 12 >> 2] = $14;
        }
        if (HEAP32[$8 + 8 >> 2] > ($14 | 0)) {
         HEAP32[$8 + 8 >> 2] = $14;
        }
        if (HEAP32[$8 + 20 >> 2] < ($1 | 0)) {
         HEAP32[$8 + 20 >> 2] = $1;
        }
        if (HEAP32[$8 + 16 >> 2] <= ($1 | 0)) {
         break label$7;
        }
        HEAP32[$8 + 16 >> 2] = $1;
       }
       $16 = $16 + 1 | 0;
       if (($16 | 0) != ($3 | 0)) {
        continue;
       }
       break;
      }
     }
     $15 = $15 + 1 | 0;
     if (($15 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $17 = $17 + 1 | 0;
   if (($17 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $18 - -64 | 0;
}
function Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0;
 $5 = global$0 - 128 | 0;
 global$0 = $5;
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$5 + 12 >> 2] = $6;
 $6 = HEAP32[$0 + 20 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$5 + 20 >> 2] = $6;
 $6 = HEAP32[$0 + 28 >> 2];
 HEAP32[$5 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$5 + 28 >> 2] = $6;
 $6 = HEAP32[$0 + 36 >> 2];
 HEAP32[$5 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$5 + 36 >> 2] = $6;
 $6 = HEAP32[$0 + 44 >> 2];
 HEAP32[$5 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$5 + 44 >> 2] = $6;
 $6 = HEAP32[$0 + 52 >> 2];
 HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$5 + 52 >> 2] = $6;
 $6 = HEAP32[$0 + 60 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$5 + 60 >> 2] = $6;
 $6 = HEAP32[$0 + 4 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$5 + 4 >> 2] = $6;
 HEAP32[$5 + 72 >> 2] = 0;
 HEAP32[$5 + 76 >> 2] = 0;
 HEAP32[$5 + 80 >> 2] = 0;
 HEAP32[$5 + 84 >> 2] = 0;
 HEAP32[$5 + 88 >> 2] = 0;
 HEAP32[$5 + 92 >> 2] = 0;
 HEAP32[$5 + 96 >> 2] = 0;
 HEAP32[$5 + 100 >> 2] = 0;
 HEAP32[$5 + 104 >> 2] = 0;
 HEAP32[$5 + 108 >> 2] = 0;
 HEAP32[$5 + 112 >> 2] = 0;
 HEAP32[$5 + 116 >> 2] = 0;
 HEAP32[$5 + 120 >> 2] = 0;
 HEAP32[$5 + 124 >> 2] = 0;
 $7 = HEAPF32[$5 + 48 >> 2];
 $11 = HEAPF32[$5 >> 2];
 $8 = HEAPF32[$5 + 16 >> 2];
 $10 = HEAPF32[$5 + 32 >> 2];
 HEAPF32[$5 + 112 >> 2] = $7 + Math_fround(Math_fround(Math_fround(Math_fround($11 * Math_fround(0)) + Math_fround(0)) + Math_fround($8 * Math_fround(0))) + Math_fround($10 * Math_fround(0)));
 $17 = +Math_fround($1 / Math_fround(180)) * 3.141592653589793;
 $23 = cos($17);
 $12 = Math_fround(sin($17));
 $13 = Math_fround($12 * $3);
 $9 = Math_fround($23);
 $1 = Math_fround(Math_fround(1) - $9);
 $18 = Math_fround(Math_fround($2 * $4) * $1);
 $14 = Math_fround($13 + $18);
 $19 = Math_fround(Math_fround($3 * $4) * $1);
 $20 = Math_fround($12 * $2);
 $15 = Math_fround($19 - $20);
 $16 = Math_fround(Math_fround(Math_fround($4 * $4) * $1) + $9);
 $7 = Math_fround($7 * Math_fround(0));
 HEAPF32[$5 + 96 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $14) + Math_fround(0)) + Math_fround($8 * $15)) + Math_fround($10 * $16)) + $7;
 $21 = Math_fround(Math_fround($2 * $3) * $1);
 $22 = Math_fround($12 * $4);
 $4 = Math_fround($21 - $22);
 $3 = Math_fround(Math_fround(Math_fround($3 * $3) * $1) + $9);
 $12 = Math_fround($20 + $19);
 HEAPF32[$5 + 80 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * $4) + Math_fround(0)) + Math_fround($8 * $3)) + Math_fround($10 * $12)) + $7;
 $1 = Math_fround(Math_fround(Math_fround($2 * $2) * $1) + $9);
 $2 = Math_fround($22 + $21);
 $9 = Math_fround(Math_fround(Math_fround($11 * $1) + Math_fround(0)) + Math_fround($8 * $2));
 $11 = Math_fround($18 - $13);
 HEAPF32[$5 + 64 >> 2] = Math_fround($9 + Math_fround($10 * $11)) + $7;
 $8 = HEAPF32[$5 + 4 >> 2];
 $10 = HEAPF32[$5 + 20 >> 2];
 $9 = HEAPF32[$5 + 36 >> 2];
 $13 = HEAPF32[$5 + 52 >> 2];
 $7 = Math_fround($13 * Math_fround(0));
 HEAPF32[$5 + 100 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround(0)) + Math_fround($15 * $10)) + Math_fround($16 * $9)) + $7;
 HEAPF32[$5 + 84 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4 * $8) + Math_fround(0)) + Math_fround($3 * $10)) + Math_fround($12 * $9)) + $7;
 HEAPF32[$5 + 68 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($1 * $8) + Math_fround(0)) + Math_fround($2 * $10)) + Math_fround($11 * $9)) + $7;
 HEAPF32[$5 + 116 >> 2] = $13 + Math_fround(Math_fround(Math_fround(Math_fround($8 * Math_fround(0)) + Math_fround(0)) + Math_fround($10 * Math_fround(0))) + Math_fround($9 * Math_fround(0)));
 $7 = HEAPF32[$5 + 56 >> 2];
 $8 = HEAPF32[$5 + 8 >> 2];
 $10 = HEAPF32[$5 + 24 >> 2];
 $9 = HEAPF32[$5 + 40 >> 2];
 HEAPF32[$5 + 120 >> 2] = $7 + Math_fround(Math_fround(Math_fround(Math_fround($8 * Math_fround(0)) + Math_fround(0)) + Math_fround($10 * Math_fround(0))) + Math_fround($9 * Math_fround(0)));
 $7 = Math_fround($7 * Math_fround(0));
 HEAPF32[$5 + 104 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround(0)) + Math_fround($15 * $10)) + Math_fround($16 * $9)) + $7;
 HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4 * $8) + Math_fround(0)) + Math_fround($3 * $10)) + Math_fround($12 * $9)) + $7;
 HEAPF32[$5 + 72 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($1 * $8) + Math_fround(0)) + Math_fround($2 * $10)) + Math_fround($11 * $9)) + $7;
 $7 = $1;
 $1 = HEAPF32[$5 + 12 >> 2];
 $9 = $2;
 $2 = HEAPF32[$5 + 28 >> 2];
 $13 = $11;
 $11 = HEAPF32[$5 + 44 >> 2];
 $10 = HEAPF32[$5 + 60 >> 2];
 $8 = Math_fround($10 * Math_fround(0));
 HEAPF32[$5 + 76 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7 * $1) + Math_fround(0)) + Math_fround($9 * $2)) + Math_fround($13 * $11)) + $8;
 HEAPF32[$5 + 92 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4 * $1) + Math_fround(0)) + Math_fround($3 * $2)) + Math_fround($12 * $11)) + $8;
 HEAPF32[$5 + 108 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14 * $1) + Math_fround(0)) + Math_fround($15 * $2)) + Math_fround($16 * $11)) + $8;
 HEAPF32[$5 + 124 >> 2] = $10 + Math_fround(Math_fround(Math_fround(Math_fround($1 * Math_fround(0)) + Math_fround(0)) + Math_fround($2 * Math_fround(0))) + Math_fround($11 * Math_fround(0)));
 $6 = HEAP32[$5 + 116 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$5 + 112 >> 2];
 HEAP32[$0 + 52 >> 2] = $6;
 $6 = HEAP32[$5 + 108 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$5 + 104 >> 2];
 HEAP32[$0 + 44 >> 2] = $6;
 $6 = HEAP32[$5 + 100 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$5 + 96 >> 2];
 HEAP32[$0 + 36 >> 2] = $6;
 $6 = HEAP32[$5 + 92 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$5 + 88 >> 2];
 HEAP32[$0 + 28 >> 2] = $6;
 $6 = HEAP32[$5 + 76 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 72 >> 2];
 HEAP32[$0 + 12 >> 2] = $6;
 $6 = HEAP32[$5 + 124 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$5 + 120 >> 2];
 HEAP32[$0 + 60 >> 2] = $6;
 $6 = HEAP32[$5 + 84 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$5 + 80 >> 2];
 HEAP32[$0 + 20 >> 2] = $6;
 $6 = HEAP32[$5 + 68 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$5 + 64 >> 2];
 HEAP32[$0 + 4 >> 2] = $6;
 global$0 = $5 + 128 | 0;
}
function readCubeFromSig_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $3 = global$0 - 240 | 0;
 global$0 = $3;
 HEAP16[$3 + 72 >> 1] = 0;
 $5 = $3 - -64 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$3 + 108 >> 2] = -1;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 96 >> 2] = 0;
 HEAP32[$3 + 100 >> 2] = 0;
 HEAP16[$3 + 104 >> 1] = 0;
 HEAP32[$3 + 140 >> 2] = -1;
 HEAP32[$3 + 120 >> 2] = 0;
 HEAP32[$3 + 124 >> 2] = 0;
 HEAP32[$3 + 128 >> 2] = 0;
 HEAP32[$3 + 132 >> 2] = 0;
 HEAP16[$3 + 136 >> 1] = 0;
 HEAP16[$3 + 168 >> 1] = 0;
 HEAP32[$3 + 172 >> 2] = -1;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 156 >> 2] = 0;
 HEAP32[$3 + 160 >> 2] = 0;
 HEAP32[$3 + 164 >> 2] = 0;
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 112 >> 2] = 0;
 HEAP32[$3 + 116 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 HEAP32[$3 + 204 >> 2] = -1;
 HEAP16[$3 + 200 >> 1] = 0;
 HEAP32[$3 + 184 >> 2] = 0;
 HEAP32[$3 + 188 >> 2] = 0;
 HEAP32[$3 + 192 >> 2] = 0;
 HEAP32[$3 + 196 >> 2] = 0;
 HEAP32[$3 + 236 >> 2] = -1;
 HEAP16[$3 + 232 >> 1] = 0;
 HEAP32[$3 + 216 >> 2] = 0;
 HEAP32[$3 + 220 >> 2] = 0;
 HEAP32[$3 + 224 >> 2] = 0;
 HEAP32[$3 + 228 >> 2] = 0;
 HEAP32[$3 + 176 >> 2] = 0;
 HEAP32[$3 + 180 >> 2] = 0;
 HEAP32[$3 + 208 >> 2] = 0;
 HEAP32[$3 + 212 >> 2] = 0;
 HEAP8[$3 + 66 | 0] = 1;
 HEAP8[$3 + 64 | 0] = 257;
 HEAP8[$3 + 65 | 0] = 1;
 HEAP8[$3 + 61 | 0] = 1;
 HEAP8[$3 + 59 | 0] = 257;
 HEAP8[$3 + 60 | 0] = 1;
 HEAP8[$3 + 56 | 0] = 1;
 HEAP8[$3 + 54 | 0] = 257;
 HEAP8[$3 + 55 | 0] = 1;
 HEAP8[$3 + 98 | 0] = 1;
 HEAP8[$3 + 96 | 0] = 257;
 HEAP8[$3 + 97 | 0] = 1;
 HEAP8[$3 + 93 | 0] = 1;
 HEAP8[$3 + 91 | 0] = 257;
 HEAP8[$3 + 92 | 0] = 1;
 HEAP8[$3 + 88 | 0] = 1;
 HEAP8[$3 + 86 | 0] = 257;
 HEAP8[$3 + 87 | 0] = 1;
 HEAP8[$3 + 130 | 0] = 1;
 HEAP8[$3 + 128 | 0] = 257;
 HEAP8[$3 + 129 | 0] = 1;
 HEAP8[$3 + 125 | 0] = 1;
 HEAP8[$3 + 123 | 0] = 257;
 HEAP8[$3 + 124 | 0] = 1;
 HEAP8[$3 + 120 | 0] = 1;
 HEAP8[$3 + 118 | 0] = 257;
 HEAP8[$3 + 119 | 0] = 1;
 HEAP8[$3 + 162 | 0] = 1;
 HEAP8[$3 + 160 | 0] = 257;
 HEAP8[$3 + 161 | 0] = 1;
 HEAP8[$3 + 157 | 0] = 1;
 HEAP8[$3 + 155 | 0] = 257;
 HEAP8[$3 + 156 | 0] = 1;
 HEAP8[$3 + 152 | 0] = 1;
 HEAP8[$3 + 150 | 0] = 257;
 HEAP8[$3 + 151 | 0] = 1;
 HEAP8[$3 + 194 | 0] = 1;
 HEAP8[$3 + 192 | 0] = 257;
 HEAP8[$3 + 193 | 0] = 1;
 HEAP8[$3 + 189 | 0] = 1;
 HEAP8[$3 + 187 | 0] = 257;
 HEAP8[$3 + 188 | 0] = 1;
 HEAP8[$3 + 184 | 0] = 1;
 HEAP8[$3 + 182 | 0] = 257;
 HEAP8[$3 + 183 | 0] = 1;
 HEAP8[$3 + 226 | 0] = 1;
 HEAP8[$3 + 224 | 0] = 257;
 HEAP8[$3 + 225 | 0] = 1;
 HEAP8[$3 + 221 | 0] = 1;
 HEAP8[$3 + 219 | 0] = 257;
 HEAP8[$3 + 220 | 0] = 1;
 HEAP8[$3 + 216 | 0] = 1;
 HEAP8[$3 + 214 | 0] = 257;
 HEAP8[$3 + 215 | 0] = 1;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP8[$3 + 24 | 0] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP8[$3 + 16 | 0] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = $3 + 32;
 BinWriter__unrepr_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($3 + 8 | 0, $1);
 $1 = HEAPU8[$3 + 43 | 0];
 if ((($1 << 24 >> 24 < 0 ? HEAP32[$3 + 36 >> 2] : $1) | 0) == 9) {
  $1 = HEAP32[$3 + 20 >> 2];
  $8 = HEAP32[$3 + 12 >> 2];
  $5 = HEAP32[$3 + 8 >> 2];
  $12 = $5;
  while (1) {
   $9 = Math_imul($10, 7);
   $14 = HEAPU8[$9 + 46897 | 0];
   $15 = HEAPU8[$9 + 46896 | 0];
   $13 = HEAPU8[$9 + 46898 | 0] == 2 ? 1 : 2;
   $7 = $13 + $8 | 0;
   label$3 : {
    label$4 : {
     if (($7 | 0) >= 9) {
      $6 = $3;
      $16 = $1;
      $4 = HEAP8[$5 + 11 | 0];
      $11 = HEAP32[$12 + 4 >> 2];
      label$6 : {
       if (($4 | 0) <= -1) {
        break label$6;
       }
       $11 = $4 & 255;
      }
      $4 = $16 >>> 0 >= $11 >>> 0;
      HEAP8[$6 + 24 | 0] = $4;
      $6 = 0;
      if ($4) {
       break label$3;
      }
      $4 = $1 + 1 | 0;
      HEAP32[$3 + 20 >> 2] = $4;
      $6 = HEAPU8[$3 + 16 | 0] >>> $8;
      $1 = HEAPU8[(HEAP8[$5 + 11 | 0] <= -1 ? HEAP32[$5 >> 2] : $5) + $1 | 0];
      HEAP8[$3 + 16 | 0] = $1;
      $7 = $7 + -8 | 0;
      $1 = $6 | $1 << 8 - $8;
      break label$4;
     }
     label$10 : {
      if ($1) {
       $6 = HEAPU8[$3 + 16 | 0];
       break label$10;
      }
      $1 = $3;
      $4 = HEAP8[$5 + 11 | 0];
      $6 = HEAP32[$12 + 4 >> 2];
      label$12 : {
       if (($4 | 0) <= -1) {
        break label$12;
       }
       $6 = $4 & 255;
      }
      $4 = $6;
      HEAP8[$1 + 24 | 0] = !$4;
      if (!$4) {
       $1 = 0;
       $6 = 0;
       break label$3;
      }
      HEAP32[$3 + 20 >> 2] = 1;
      $6 = HEAPU8[(HEAP8[$5 + 11 | 0] <= -1 ? HEAP32[$5 >> 2] : $5) | 0];
      HEAP8[$3 + 16 | 0] = $6;
      $1 = 1;
     }
     $4 = $1;
     $1 = $6 >>> $8;
    }
    HEAP32[$3 + 12 >> 2] = $7;
    $6 = $1 & HEAPU8[$13 + 6514 | 0];
    $1 = $4;
    $8 = $7;
   }
   $4 = HEAP8[($6 + $9 | 0) + 46899 | 0];
   if ($4) {
    $7 = ($4 << 5) + $3 | 0;
    $4 = $4 << 3;
    HEAP8[($7 + (($15 - HEAP32[$4 + 47344 >> 2] | 0) + Math_imul($14 - HEAP32[$4 + 47348 >> 2] | 0, 5) | 0) | 0) + 16 | 0] = 1;
   }
   $10 = $10 + 1 | 0;
   if (($10 | 0) != 63) {
    continue;
   }
   break;
  }
  $1 = HEAP32[11988];
  $5 = PicBucket__updateGrp_28int_2c_20PicArr__2c_20bool_29($1, $0, $3 + 48 | 0, 0);
  $0 = Math_imul($5, 152);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29(($0 + HEAP32[$1 + 4 >> 2] | 0) + 72 | 0, $3 + 32 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29(($0 + HEAP32[$1 + 4 >> 2] | 0) + 24 | 0, $2);
  if (HEAP8[$3 + 43 | 0] < 0) {
   dlfree(HEAP32[$3 + 32 >> 2]);
  }
  global$0 = $3 + 240 | 0;
  return $5 | 0;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 1597);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function CubeDocBase__generateFromFaces_28OrderTemplate__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $3 = global$0 - 208 | 0;
 global$0 = $3;
 $2 = $3;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP8[$2 + 29 | 0] = 0;
 HEAP8[$2 + 30 | 0] = 0;
 HEAP8[$2 + 31 | 0] = 0;
 HEAP8[$2 + 32 | 0] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 84 >> 2] = 0;
 HEAP32[$2 + 88 >> 2] = 50;
 HEAP32[$2 + 92 >> 2] = 0;
 HEAP32[$2 + 96 >> 2] = 50;
 HEAP32[$2 + 108 >> 2] = 0;
 HEAP32[$2 + 112 >> 2] = 0;
 HEAP32[$2 + 116 >> 2] = 0;
 HEAP32[$2 + 120 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 + 132 >> 2] = -1;
 HEAP32[$2 + 136 >> 2] = -1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = -1;
 HEAP32[$2 + 8 >> 2] = -1;
 HEAP32[$2 + 12 >> 2] = -1;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 0;
 HEAP32[$2 + 80 >> 2] = 50;
 HEAP32[$2 + 100 >> 2] = 0;
 HEAP32[$2 + 104 >> 2] = 0;
 HEAP32[$2 + 124 >> 2] = -1;
 HEAP32[$2 + 128 >> 2] = -1;
 HEAP32[$2 + 148 >> 2] = -1;
 HEAP32[$2 + 152 >> 2] = -1;
 HEAP32[$2 + 144 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = -1;
 HEAP32[$2 + 160 >> 2] = -1;
 HEAP32[$2 + 168 >> 2] = -1;
 HEAP32[$2 + 172 >> 2] = -1;
 HEAP32[$2 + 164 >> 2] = 0;
 HEAP32[$2 + 176 >> 2] = -1;
 HEAP32[$2 + 180 >> 2] = -1;
 HEAP32[$2 + 184 >> 2] = 0;
 HEAP32[$2 + 188 >> 2] = 0;
 HEAP32[$2 + 192 >> 2] = 0;
 $2 = HEAP32[$1 + 4 >> 2];
 $10 = HEAP32[$1 >> 2];
 $4 = $2 - $10 | 0;
 $5 = $4 >> 4;
 $7 = operator_20new_28unsigned_20long_29((wasm2js_i32$0 = -1, wasm2js_i32$1 = __wasm_i64_mul($5, 0, 188, 0), wasm2js_i32$2 = i64toi32_i32$HIGH_BITS, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 if ($4) {
  $4 = $7 + Math_imul($5, 188) | 0;
  $2 = $7;
  while (1) {
   HEAP32[$2 + 76 >> 2] = 0;
   HEAP32[$2 + 80 >> 2] = 0;
   HEAP16[$2 + 24 >> 1] = 0;
   HEAP32[$2 + 16 >> 2] = 2;
   HEAP32[$2 + 20 >> 2] = -1;
   HEAP32[$2 >> 2] = -1;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 84 >> 2] = 0;
   HEAP32[$2 + 88 >> 2] = 0;
   HEAP32[$2 + 92 >> 2] = 0;
   HEAP32[$2 + 96 >> 2] = 0;
   HEAP16[$2 + 100 >> 1] = 0;
   HEAP32[$2 + 104 >> 2] = 0;
   HEAP32[$2 + 108 >> 2] = 0;
   HEAP32[$2 + 112 >> 2] = 0;
   HEAP32[$2 + 116 >> 2] = 0;
   HEAP32[$2 + 120 >> 2] = 0;
   HEAP32[$2 + 124 >> 2] = 0;
   HEAP16[$2 + 128 >> 1] = 0;
   HEAP32[$2 + 132 >> 2] = 0;
   HEAP32[$2 + 136 >> 2] = 0;
   HEAP32[$2 + 140 >> 2] = 0;
   HEAP32[$2 + 144 >> 2] = 0;
   HEAP32[$2 + 148 >> 2] = 0;
   HEAP32[$2 + 152 >> 2] = 0;
   HEAP16[$2 + 156 >> 1] = 0;
   HEAP32[$2 + 160 >> 2] = 0;
   HEAP32[$2 + 164 >> 2] = 0;
   HEAP32[$2 + 168 >> 2] = 0;
   HEAP32[$2 + 172 >> 2] = 0;
   HEAP32[$2 + 176 >> 2] = 0;
   HEAP32[$2 + 180 >> 2] = 0;
   HEAP16[$2 + 184 >> 1] = 0;
   HEAP32[$2 + 68 >> 2] = -1;
   HEAP32[$2 + 72 >> 2] = -1;
   HEAP32[$2 + 60 >> 2] = -1;
   HEAP32[$2 + 64 >> 2] = -1;
   HEAP32[$2 + 52 >> 2] = -1;
   HEAP32[$2 + 56 >> 2] = -1;
   HEAP32[$2 + 44 >> 2] = -1;
   HEAP32[$2 + 48 >> 2] = -1;
   HEAP32[$2 + 36 >> 2] = -1;
   HEAP32[$2 + 40 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 32 >> 2] = -1;
   $2 = $2 + 188 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  $10 = HEAP32[$1 >> 2];
  $16 = $2 - $10 >> 4;
 }
 HEAP32[$3 + 20 >> 2] = $16;
 HEAP32[$3 + 36 >> 2] = $7;
 $5 = 200;
 $8 = 200;
 $9 = 200;
 if (($2 | 0) != ($10 | 0)) {
  $2 = 0;
  while (1) {
   $15 = ($2 << 4) + $10 | 0;
   $6 = HEAP32[$15 + 4 >> 2];
   $11 = $7 + Math_imul($2, 188) | 0;
   $4 = HEAP32[$15 >> 2];
   HEAP32[$11 + 4 >> 2] = $4;
   HEAP32[$11 + 8 >> 2] = $6;
   $6 = HEAP32[$15 + 8 >> 2];
   HEAP32[$11 + 12 >> 2] = $6;
   HEAP32[$11 >> 2] = HEAP32[$15 + 12 >> 2];
   $8 = ($8 | 0) > ($4 | 0) ? $4 : $8;
   $12 = ($12 | 0) < ($4 | 0) ? $4 : $12;
   $9 = ($9 | 0) > ($6 | 0) ? $6 : $9;
   $13 = ($13 | 0) < ($6 | 0) ? $6 : $13;
   $4 = HEAP32[$11 + 8 >> 2];
   $5 = ($5 | 0) > ($4 | 0) ? $4 : $5;
   $14 = ($14 | 0) < ($4 | 0) ? $4 : $14;
   $2 = $2 + 1 | 0;
   if ($2 >>> 0 < $16 >>> 0) {
    continue;
   }
   break;
  }
 }
 label$5 : {
  label$6 : {
   if ($14 | ($5 | 0) != 200 | ($12 | $13 | ($8 | 0) != 200)) {
    break label$6;
   }
   if (($9 | 0) != 200) {
    break label$6;
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6402, 26), HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 4);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$3 + 200 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 200 | 0, 51440);
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$3 + 200 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   if (($2 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $7);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$5;
  }
  HEAP32[$3 + 76 >> 2] = $9;
  HEAP32[$3 + 80 >> 2] = $13;
  HEAP32[$3 + 16 >> 2] = ($13 - $9 | 0) + 5;
  HEAP32[$3 + 92 >> 2] = $5;
  HEAP32[$3 + 96 >> 2] = $14;
  HEAP32[$3 + 12 >> 2] = ($14 - $5 | 0) + 5;
  HEAP32[$3 + 84 >> 2] = $8;
  HEAP32[$3 + 88 >> 2] = $12;
  HEAP32[$3 + 8 >> 2] = ($12 - $8 | 0) + 5;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 200;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 200;
  HEAP32[$1 + 32 >> 2] = 200;
  HEAP32[$1 + 36 >> 2] = 0;
  BuildWorld__unGenerate_28Shape_20const__2c_20SqrLimits__29(HEAP32[$0 + 128 >> 2], $3 + 8 | 0, $1 + 16 | 0);
  HEAP32[$1 + 12 >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 36 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 1, 0, $1) | 0;
 }
 Shape___Shape_28_29($3 + 8 | 0);
 global$0 = $3 + 208 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 90)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
  HEAP32[$2 + 12 >> 2] = $4;
  if (!$4) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 115)) {
   HEAP32[$0 >> 2] = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
   HEAP32[$2 >> 2] = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 40752);
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
   break label$1;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 100)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2, $0, 1);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
    HEAP32[$2 >> 2] = $1;
    if (!$1) {
     break label$3;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
   HEAP32[$2 >> 2] = $1;
   if (!$1) {
    break label$3;
   }
   HEAP32[$0 >> 2] = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
  }
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function Cube__generateConcreteSlv_28SlvCube__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $14 = global$0 - 32 | 0;
 global$0 = $14;
 $2 = HEAP32[$0 + 32 >> 2];
 $8 = std____2__vector_std____2__vector_int_2c_20std____2__allocator_int__20__2c_20std____2__allocator_std____2__vector_int_2c_20std____2__allocator_int__20__20__20___vector_28unsigned_20long_29($14 + 16 | 0, HEAP32[$2 + 28 >> 2] - HEAP32[$2 + 24 >> 2] >> 4);
 $2 = HEAP32[$8 >> 2];
 if (($2 | 0) != HEAP32[$8 + 4 >> 2]) {
  while (1) {
   $6 = Math_imul($3, 12);
   $5 = $6 + $2 | 0;
   $7 = $5;
   $4 = HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + ($3 << 4) | 0;
   $4 = HEAP32[$4 + 8 >> 2] - HEAP32[$4 + 4 >> 2] >> 3;
   $9 = HEAP32[$5 >> 2];
   $10 = HEAP32[$5 + 4 >> 2] - $9 >> 2;
   label$3 : {
    if ($4 >>> 0 > $10 >>> 0) {
     std____2__vector_int_2c_20std____2__allocator_int__20_____append_28unsigned_20long_29($5, $4 - $10 | 0);
     $2 = HEAP32[$8 >> 2];
     break label$3;
    }
    if ($4 >>> 0 >= $10 >>> 0) {
     break label$3;
    }
    HEAP32[$7 + 4 >> 2] = $9 + ($4 << 2);
   }
   $4 = $2 + $6 | 0;
   $5 = HEAP32[$4 >> 2];
   $4 = HEAP32[$4 + 4 >> 2] - $5 | 0;
   if (($4 | 0) >= 1) {
    $2 = $4 >>> 2;
    memset($5, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
    $2 = HEAP32[$8 >> 2];
   }
   $3 = $3 + 1 | 0;
   if ($3 >>> 0 < (HEAP32[$8 + 4 >> 2] - $2 | 0) / 12 >>> 0) {
    continue;
   }
   break;
  }
 }
 $3 = $0 - -64 | 0;
 $10 = std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20___vector_28unsigned_20long_29($14, (HEAP32[$3 >> 2] - HEAP32[$0 + 60 >> 2] | 0) / 52 | 0);
 label$6 : {
  label$7 : {
   if (!$1) {
    $3 = HEAP32[$3 >> 2];
    $5 = HEAP32[$0 + 60 >> 2];
    $4 = 0;
    break label$7;
   }
   $4 = 0;
   $3 = HEAP32[$3 >> 2];
   $5 = HEAP32[$0 + 60 >> 2];
   if (($3 | 0) == ($5 | 0)) {
    $1 = $3;
    break label$6;
   }
   $16 = ($3 - $5 | 0) / 52 | 0;
   $17 = HEAP32[$8 >> 2];
   $15 = HEAP32[$10 >> 2];
   while (1) {
    $12 = Math_imul($4, 52);
    $6 = $12 + $5 | 0;
    $7 = HEAP32[$6 >> 2];
    $2 = $7 + 2 | 0;
    label$11 : {
     label$12 : {
      if ($2 >>> 0 <= 1) {
       if (!($2 - 1)) {
        break label$11;
       }
       $2 = HEAP32[$6 + 24 >> 2];
       if (($2 | 0) != -1) {
        break label$12;
       }
       break label$7;
      }
      $2 = HEAP32[$6 + 32 >> 2];
      if (($2 | 0) == -1 | ($2 | 0) != ($7 | 0) | HEAP32[$6 + 4 >> 2] != HEAP32[$6 + 36 >> 2]) {
       break label$7;
      }
      $13 = HEAP32[HEAP32[$1 >> 2] + ($4 << 3) >> 2];
      if (($13 | 0) == -1) {
       break label$7;
      }
      $2 = 0;
      $9 = HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + ($7 << 4) | 0;
      $11 = HEAP32[$9 + 8 >> 2];
      $9 = HEAP32[$9 + 4 >> 2];
      label$14 : {
       if (($11 | 0) == ($9 | 0)) {
        break label$14;
       }
       $11 = $11 - $9 >> 3;
       while (1) {
        if (($13 | 0) == HEAP32[$9 + ($2 << 3) >> 2]) {
         break label$14;
        }
        $2 = $2 + 1 | 0;
        if ($2 >>> 0 < $11 >>> 0) {
         continue;
        }
        break;
       }
      }
      HEAP32[HEAP32[$17 + Math_imul($7, 12) >> 2] + ($2 << 2) >> 2] = 1;
      $2 = HEAP32[$6 + 24 >> 2];
     }
     $7 = $15 + $12 | 0;
     HEAP32[$7 >> 2] = $2;
     HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 28 >> 2];
    }
    $4 = $4 + 1 | 0;
    if ($4 >>> 0 < $16 >>> 0) {
     continue;
    }
    break;
   }
  }
  $1 = $5;
 }
 $7 = ($3 - $1 | 0) / 52 | 0;
 if ($4 >>> 0 < $7 >>> 0) {
  $9 = HEAP32[$10 >> 2];
  $16 = HEAP32[$8 >> 2];
  $17 = HEAP32[11988];
  while (1) {
   $15 = Math_imul($4, 52);
   $12 = $15 + $5 | 0;
   $1 = HEAP32[$12 >> 2];
   if (($1 | 0) != -1) {
    $13 = HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + ($1 << 4) | 0;
    $11 = HEAP32[$13 >> 2];
    $1 = $16 + Math_imul($1, 12) | 0;
    $18 = HEAP32[$17 + 76 >> 2];
    label$19 : {
     if (!HEAPU8[$0 | 0]) {
      $3 = HEAP32[$1 >> 2];
      $2 = 0;
      break label$19;
     }
     $3 = Math_imul(HEAP32[11536], 214013) + 2531011 | 0;
     HEAP32[11536] = $3;
     $2 = $3 >>> 16;
     $3 = HEAP32[$1 >> 2];
     $2 = ($2 >>> 0) % (HEAP32[$1 + 4 >> 2] - $3 >> 2 >>> 0) | 0;
    }
    $6 = ($2 << 2) + $3 | 0;
    if (HEAP32[$6 >> 2]) {
     $1 = HEAP32[$1 + 4 >> 2] - $3 >> 2;
     while (1) {
      $2 = ($2 + 1 >>> 0) % ($1 >>> 0) | 0;
      $6 = ($2 << 2) + $3 | 0;
      if (HEAP32[$6 >> 2]) {
       continue;
      }
      break;
     }
    }
    HEAP32[$6 >> 2] = 1;
    $1 = $9 + $15 | 0;
    $2 = HEAP32[$13 + 4 >> 2] + ($2 << 3) | 0;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $3 = HEAP32[((Math_imul($11, 324) + $18 | 0) + (HEAP32[$12 + 4 >> 2] << 5) | 0) + 32 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    label$23 : {
     if ((($3 | 0) < 4 | 0) != (($2 | 0) > 3 | 0)) {
      $3 = (($3 - $2 | 0) + 4 | 0) % 4 | 0;
      break label$23;
     }
     $3 = (($2 + $3 | 0) % 4 | 0) + 4 | 0;
    }
    HEAP32[$1 + 4 >> 2] = $3;
   }
   $4 = $4 + 1 | 0;
   if ($4 >>> 0 < $7 >>> 0) {
    continue;
   }
   break;
  }
 }
 $1 = $0 + 60 | 0;
 $5 = SlvCube__SlvCube_28std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20__20const__2c_20std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20__20const__2c_20PicsSet_20const__2c_20Shape_20const__29(operator_20new_28unsigned_20long_29(68), $1, $10, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
 $0 = HEAP32[$10 >> 2];
 if ($0) {
  $2 = HEAP32[$10 + 4 >> 2];
  $1 = $0;
  label$26 : {
   if (($0 | 0) == ($2 | 0)) {
    break label$26;
   }
   while (1) {
    $1 = HEAP32[$2 + -12 >> 2];
    if ($1) {
     HEAP32[$2 + -8 >> 2] = $1;
     dlfree($1);
    }
    $1 = HEAP32[$2 + -32 >> 2];
    if ($1) {
     dlfree($1);
    }
    $2 = $2 + -52 | 0;
    if (($0 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$10 >> 2];
  }
  HEAP32[$10 + 4 >> 2] = $0;
  dlfree($1);
 }
 $0 = HEAP32[$8 >> 2];
 if ($0) {
  $3 = HEAP32[$8 + 4 >> 2];
  $1 = $0;
  label$31 : {
   if (($0 | 0) == ($3 | 0)) {
    break label$31;
   }
   while (1) {
    $1 = $3 + -12 | 0;
    $2 = HEAP32[$1 >> 2];
    if ($2) {
     HEAP32[$3 + -8 >> 2] = $2;
     dlfree($2);
    }
    $3 = $1;
    if (($0 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$8 >> 2];
  }
  HEAP32[$8 + 4 >> 2] = $0;
  dlfree($1);
 }
 global$0 = $14 + 32 | 0;
 return $5;
}
function Shape__makePieceCheckBits_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  $9 = HEAP32[$0 + 12 >> 2];
  if (($9 | 0) < 1) {
   break label$1;
  }
  $6 = HEAP32[$0 + 28 >> 2];
  while (1) {
   HEAP32[($6 + Math_imul($1, 188) | 0) + 20 >> 2] = $1;
   $1 = $1 + 1 | 0;
   if (($1 | 0) < ($9 | 0)) {
    continue;
   }
   break;
  }
  if (($9 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 28 >> 2];
  $10 = $0;
  while (1) {
   $0 = 0;
   $7 = Math_imul($11, 188) + $4 | 0;
   $5 = $7;
   $1 = HEAP32[$5 + 60 >> 2];
   if (($1 | 0) != -1) {
    $0 = HEAP32[(Math_imul($1, 188) + $4 | 0) + 20 >> 2] < HEAP32[$5 + 20 >> 2] ? 14 : 0;
   }
   $1 = HEAP32[$7 - -64 >> 2];
   if (($1 | 0) != -1) {
    $0 = (HEAP32[(Math_imul($1, 188) + $4 | 0) + 20 >> 2] < HEAP32[$5 + 20 >> 2] ? 224 : 0) | $0;
   }
   $1 = HEAP32[$7 + 68 >> 2];
   if (($1 | 0) != -1) {
    $0 = (HEAP32[(Math_imul($1, 188) + $4 | 0) + 20 >> 2] < HEAP32[$5 + 20 >> 2] ? 3584 : 0) | $0;
   }
   $1 = HEAP32[$7 + 72 >> 2];
   if (($1 | 0) != -1) {
    $0 = (HEAP32[(Math_imul($1, 188) + $4 | 0) + 20 >> 2] < HEAP32[$5 + 20 >> 2] ? -8192 : 0) | $0;
   }
   $6 = HEAP32[$7 + 28 >> 2];
   label$8 : {
    if (($6 | 0) != -1) {
     $6 = HEAP32[$10 + 44 >> 2] + Math_imul($6, 40) | 0;
     $2 = HEAP32[$6 + 16 >> 2];
     $1 = 0;
     label$10 : {
      if (($2 | 0) == -1) {
       break label$10;
      }
      $1 = HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2];
     }
     $2 = HEAP32[$6 + 20 >> 2];
     if (($2 | 0) != -1) {
      $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
     }
     $2 = HEAP32[$6 + 24 >> 2];
     if (($2 | 0) != -1) {
      $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
     }
     $2 = HEAP32[$6 + 28 >> 2];
     if (($2 | 0) != -1) {
      $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
     }
     $2 = HEAP32[$6 + 32 >> 2];
     if (($2 | 0) != -1) {
      $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
     }
     $2 = HEAP32[$6 + 36 >> 2];
     if (($2 | 0) != -1) {
      $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
     }
     $0 = HEAP32[$6 + 12 >> 2] == ($1 | 0) | $0;
     $6 = 16;
     break label$8;
    }
    $6 = 1;
   }
   $1 = $6;
   $2 = HEAP32[$7 + 32 >> 2];
   if (($2 | 0) != -1) {
    $3 = HEAP32[$10 + 44 >> 2] + Math_imul($2, 40) | 0;
    $2 = HEAP32[$3 + 16 >> 2];
    $1 = 0;
    label$18 : {
     if (($2 | 0) == -1) {
      break label$18;
     }
     $1 = HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2];
    }
    $2 = HEAP32[$3 + 20 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 24 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 28 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 32 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = $6;
    $8 = HEAP32[$3 + 36 >> 2];
    if (($8 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($8, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $0 = (HEAP32[$3 + 12 >> 2] == ($1 | 0) ? $2 : 0) | $0;
    $1 = $6 << 4;
   }
   $6 = $1;
   $2 = HEAP32[$7 + 36 >> 2];
   label$25 : {
    if (($2 | 0) == -1) {
     break label$25;
    }
    $3 = HEAP32[$10 + 44 >> 2] + Math_imul($2, 40) | 0;
    $2 = HEAP32[$3 + 16 >> 2];
    $1 = 0;
    label$26 : {
     if (($2 | 0) == -1) {
      break label$26;
     }
     $1 = HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2];
    }
    $2 = HEAP32[$3 + 20 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 24 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 28 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = HEAP32[$3 + 32 >> 2];
    if (($2 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($2, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $2 = $6;
    $8 = HEAP32[$3 + 36 >> 2];
    if (($8 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($8, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $0 = (HEAP32[$3 + 12 >> 2] == ($1 | 0) ? $2 : 0) | $0;
    $1 = $6 << 4;
   }
   $6 = $1;
   $2 = $7;
   $7 = HEAP32[$2 + 40 >> 2];
   if (($7 | 0) != -1) {
    $7 = HEAP32[$10 + 44 >> 2] + Math_imul($7, 40) | 0;
    $3 = HEAP32[$7 + 16 >> 2];
    $1 = 0;
    label$34 : {
     if (($3 | 0) == -1) {
      break label$34;
     }
     $1 = HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2];
    }
    $3 = HEAP32[$7 + 20 >> 2];
    if (($3 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $3 = HEAP32[$7 + 24 >> 2];
    if (($3 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $3 = HEAP32[$7 + 28 >> 2];
    if (($3 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $3 = HEAP32[$7 + 32 >> 2];
    if (($3 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $3 = HEAP32[$7 + 36 >> 2];
    if (($3 | 0) != -1) {
     $1 = (HEAP32[(Math_imul($3, 188) + $4 | 0) + 20 >> 2] <= HEAP32[$5 + 20 >> 2]) + $1 | 0;
    }
    $0 = (HEAP32[$7 + 12 >> 2] == ($1 | 0) ? $6 : 0) | $0;
   }
   HEAP16[$2 + 24 >> 1] = $0;
   $11 = $11 + 1 | 0;
   if (($11 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
 }
}
function _GLOBAL__sub_I_js_main_cpp() {
 HEAP8[46900] = 1;
 HEAP32[11724] = 131329;
 HEAP8[46907] = 1;
 HEAP8[46903] = 131330;
 HEAP8[46904] = 513;
 HEAP8[46905] = 2;
 HEAP8[46906] = 0;
 HEAP8[46914] = 1;
 HEAP16[23455] = 131331;
 HEAP16[23456] = 2;
 HEAP8[46927] = 256;
 HEAP8[46928] = 1;
 HEAP16[23462] = 261;
 HEAP8[46921] = 1;
 HEAP8[46917] = 131332;
 HEAP8[46918] = 513;
 HEAP8[46919] = 2;
 HEAP8[46920] = 0;
 HEAP8[46931] = 262;
 HEAP8[46932] = 1;
 HEAP16[23467] = 768;
 HEAP8[46929] = 3;
 HEAP8[46926] = 3;
 HEAP8[46933] = 2;
 HEAP16[23469] = 263;
 HEAP8[46941] = 0;
 HEAP16[23474] = 768;
 HEAP8[46945] = 264;
 HEAP8[46946] = 1;
 HEAP8[46942] = 3;
 HEAP8[46940] = 2;
 HEAP16[23476] = 265;
 HEAP8[46955] = 768;
 HEAP8[46956] = 3;
 HEAP8[46947] = 2;
 HEAP8[46959] = 131338;
 HEAP8[46960] = 513;
 HEAP8[46961] = 2;
 HEAP8[46962] = 0;
 HEAP8[46957] = 5;
 HEAP8[46954] = 3;
 HEAP16[23483] = 267;
 HEAP8[46969] = 1280;
 HEAP8[46970] = 5;
 HEAP8[46963] = 5;
 HEAP8[46973] = 268;
 HEAP8[46974] = 1;
 HEAP16[23488] = 1280;
 HEAP8[46968] = 2;
 HEAP16[23490] = 269;
 HEAP8[46975] = 2;
 HEAP8[46983] = 0;
 HEAP16[23495] = 256;
 HEAP8[46987] = 1281;
 HEAP8[46988] = 5;
 HEAP8[46984] = 5;
 HEAP8[46982] = 2;
 HEAP8[46997] = 513;
 HEAP8[46998] = 2;
 HEAP8[46992] = 2;
 HEAP8[46989] = 3;
 HEAP16[23497] = 1282;
 HEAP8[47001] = 1283;
 HEAP8[47002] = 5;
 HEAP16[23502] = 513;
 HEAP8[46996] = 2;
 HEAP16[23504] = 1284;
 HEAP8[47011] = 513;
 HEAP8[47012] = 2;
 HEAP8[47003] = 2;
 HEAP8[47015] = 1285;
 HEAP8[47016] = 5;
 HEAP16[23509] = 513;
 HEAP8[47020] = 3;
 HEAP8[47010] = 2;
 HEAP8[47025] = 1027;
 HEAP8[47026] = 4;
 HEAP8[47021] = 33883652;
 HEAP8[47022] = 132358;
 HEAP8[47023] = 517;
 HEAP8[47024] = 2;
 HEAP8[47017] = 4;
 HEAP16[23516] = 1027;
 HEAP8[47029] = 1287;
 HEAP8[47030] = 5;
 HEAP16[23518] = 1288;
 HEAP8[47039] = 1027;
 HEAP8[47040] = 4;
 HEAP8[47031] = 2;
 HEAP8[47043] = 1289;
 HEAP8[47044] = 5;
 HEAP16[23523] = 1027;
 HEAP8[47048] = 5;
 HEAP8[47038] = 2;
 HEAP8[47049] = 2566;
 HEAP8[47050] = 10;
 HEAP8[47051] = 100991493;
 HEAP8[47052] = 394498;
 HEAP8[47053] = 1541;
 HEAP8[47054] = 6;
 HEAP8[47045] = 4;
 HEAP8[47057] = 1291;
 HEAP8[47058] = 5;
 HEAP16[23530] = 1541;
 HEAP8[47067] = 5;
 HEAP8[47059] = 2;
 HEAP16[23532] = 1292;
 HEAP8[47071] = 1293;
 HEAP8[47072] = 5;
 HEAP16[23537] = 1541;
 HEAP8[47068] = 6;
 HEAP8[47066] = 2;
 HEAP16[23539] = 2305;
 HEAP8[47081] = 512;
 HEAP8[47082] = 2;
 HEAP8[47073] = 3;
 HEAP8[47085] = 2306;
 HEAP8[47086] = 9;
 HEAP16[23544] = 512;
 HEAP8[47080] = 2;
 HEAP16[23546] = 2307;
 HEAP8[47095] = 512;
 HEAP8[47096] = 2;
 HEAP8[47087] = 2;
 HEAP8[47094] = 2;
 HEAP8[47076] = 0;
 HEAP8[47099] = 2308;
 HEAP8[47100] = 9;
 HEAP16[23553] = 2309;
 HEAP8[47109] = 512;
 HEAP8[47110] = 2;
 HEAP8[47103] = 2;
 HEAP8[47101] = 2;
 HEAP8[47113] = 2310;
 HEAP8[47114] = 9;
 HEAP16[23558] = 1024;
 HEAP8[47111] = 4;
 HEAP8[47108] = 3;
 HEAP16[23560] = 2311;
 HEAP8[47123] = 1024;
 HEAP8[47124] = 4;
 HEAP8[47115] = 2;
 HEAP8[47127] = 2312;
 HEAP8[47128] = 9;
 HEAP16[23565] = 1024;
 HEAP8[47122] = 2;
 HEAP8[47129] = 2;
 HEAP8[47102] = 0;
 HEAP8[47137] = 1024;
 HEAP8[47138] = 4;
 HEAP16[23567] = 2313;
 HEAP8[47141] = 2314;
 HEAP8[47142] = 9;
 HEAP16[23572] = 1536;
 HEAP8[47139] = 6;
 HEAP8[47136] = 3;
 HEAP16[23574] = 2315;
 HEAP8[47151] = 1536;
 HEAP8[47152] = 6;
 HEAP8[47143] = 2;
 HEAP8[47155] = 2316;
 HEAP8[47156] = 9;
 HEAP16[23579] = 1536;
 HEAP8[47150] = 2;
 HEAP16[23581] = 2317;
 HEAP8[47165] = 1536;
 HEAP8[47166] = 6;
 HEAP8[47157] = 2;
 HEAP8[47169] = 513;
 HEAP8[47170] = 2;
 HEAP8[47164] = 2;
 HEAP8[47172] = 0;
 HEAP32[11794] = 131841;
 HEAP8[47173] = 1;
 HEAP8[47171] = 2;
 HEAP16[23593] = 256;
 HEAP8[47180] = 1;
 HEAP8[47183] = 1025;
 HEAP8[47184] = 4;
 HEAP16[23595] = 1537;
 HEAP8[47193] = 512;
 HEAP8[47194] = 2;
 HEAP8[47185] = 2;
 HEAP8[47197] = 1793;
 HEAP8[47198] = 7;
 HEAP16[23600] = 512;
 HEAP8[47192] = 2;
 HEAP16[23602] = 2049;
 HEAP8[47207] = 512;
 HEAP8[47208] = 2;
 HEAP8[47199] = 2;
 HEAP8[47211] = 517;
 HEAP8[47212] = 2;
 HEAP8[47214] = 1;
 HEAP8[47206] = 2;
 HEAP16[23609] = 16909061;
 HEAP16[23610] = 258;
 HEAP8[47215] = 3;
 HEAP8[47213] = 2;
 HEAP16[23614] = 769;
 HEAP8[47222] = 3;
 HEAP8[47225] = 1029;
 HEAP8[47226] = 4;
 HEAP16[23616] = 1541;
 HEAP8[47235] = 1026;
 HEAP8[47236] = 4;
 HEAP8[47227] = 2;
 HEAP8[47239] = 1797;
 HEAP8[47240] = 7;
 HEAP16[23621] = 1026;
 HEAP8[47234] = 2;
 HEAP16[23623] = 2053;
 HEAP8[47249] = 1026;
 HEAP8[47250] = 4;
 HEAP8[47241] = 2;
 HEAP8[47253] = 521;
 HEAP8[47254] = 2;
 HEAP8[47256] = 3;
 HEAP8[47248] = 2;
 HEAP32[11815] = 50463497;
 HEAP8[47257] = 5;
 HEAP8[47255] = 2;
 HEAP16[23635] = 1283;
 HEAP8[47264] = 5;
 HEAP8[47267] = 1033;
 HEAP8[47268] = 4;
 HEAP16[23637] = 1545;
 HEAP8[47277] = 1540;
 HEAP8[47278] = 6;
 HEAP8[47269] = 2;
 HEAP8[47281] = 1801;
 HEAP8[47282] = 7;
 HEAP16[23642] = 1540;
 HEAP8[47276] = 2;
 HEAP16[23644] = 2057;
 HEAP8[47291] = 1540;
 HEAP8[47292] = 6;
 HEAP8[47283] = 2;
 HEAP8[47295] = 525;
 HEAP8[47296] = 2;
 HEAP8[47290] = 2;
 HEAP8[47298] = 0;
 HEAP16[23651] = 131853;
 HEAP16[23652] = 2;
 HEAP8[47299] = 5;
 HEAP8[47297] = 2;
 HEAP16[23656] = 1280;
 HEAP8[47306] = 5;
 HEAP8[47309] = 1037;
 HEAP8[47310] = 4;
 HEAP16[23658] = 1549;
 HEAP8[47319] = 1536;
 HEAP8[47320] = 6;
 HEAP8[47311] = 2;
 HEAP8[47323] = 1805;
 HEAP8[47324] = 7;
 HEAP16[23663] = 1536;
 HEAP8[47318] = 2;
 HEAP16[23665] = 2061;
 HEAP8[47333] = 1536;
 HEAP8[47334] = 6;
 HEAP8[47325] = 2;
 HEAP8[47332] = 2;
 HEAP32[11836] = -1;
 HEAP32[11837] = -1;
 HEAP32[11838] = 1;
 HEAP32[11839] = 1;
 HEAP32[11840] = 1;
 HEAP32[11841] = 5;
 HEAP32[11842] = 5;
 HEAP32[11843] = 1;
 HEAP32[11844] = 5;
 HEAP32[11845] = 5;
 HEAP32[11846] = 9;
 HEAP32[11847] = 1;
 HEAP32[11848] = 9;
 HEAP32[11849] = 5;
 HEAP32[11862] = 1091567616;
 HEAP32[11863] = 1084227584;
 HEAP32[11860] = 1091567616;
 HEAP32[11861] = 1065353216;
 HEAP32[11858] = 1084227584;
 HEAP32[11859] = 1084227584;
 HEAP32[11856] = 1084227584;
 HEAP32[11857] = 1065353216;
 HEAP32[11854] = 1065353216;
 HEAP32[11855] = 1084227584;
 HEAP32[11852] = 1065353216;
 HEAP32[11853] = 1065353216;
 EmscriptenBindingInitializer_my_module__EmscriptenBindingInitializer_my_module_28_29();
}
function BuildControlBase__drawErrorCyliders_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $9 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
 $14 = $9 + 375200 | 0;
 label$1 : {
  $1 = HEAP32[$9 + 375196 >> 2];
  if (($1 | 0) != HEAP32[$14 >> 2]) {
   $16 = $0 + 864 | 0;
   $8 = $2 - -64 | 0;
   $17 = $0 + 1244 | 0;
   $15 = $0 + 1144 | 0;
   while (1) {
    $7 = Math_imul($10, 24) + $1 | 0;
    $5 = HEAP32[$7 + 8 >> 2];
    $18 = HEAP32[$7 + 12 >> 2];
    $19 = HEAP32[$7 + 4 >> 2];
    $6 = HEAP32[$0 + 4 >> 2];
    $1 = $6;
    $3 = HEAP32[$1 + 168 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$1 + 164 >> 2];
    HEAP32[$8 + 4 >> 2] = $3;
    $3 = HEAP32[$1 + 160 >> 2];
    HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 156 >> 2];
    HEAP32[$2 + 60 >> 2] = $3;
    $3 = HEAP32[$1 + 152 >> 2];
    HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 148 >> 2];
    HEAP32[$2 + 52 >> 2] = $3;
    $3 = HEAP32[$1 + 144 >> 2];
    HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 140 >> 2];
    HEAP32[$2 + 44 >> 2] = $3;
    $3 = HEAP32[$1 + 136 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 132 >> 2];
    HEAP32[$2 + 36 >> 2] = $3;
    $3 = HEAP32[$1 + 128 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 124 >> 2];
    HEAP32[$2 + 28 >> 2] = $3;
    $3 = HEAP32[$1 + 120 >> 2];
    HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 116 >> 2];
    HEAP32[$2 + 20 >> 2] = $3;
    $3 = HEAP32[$1 + 112 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 108 >> 2];
    HEAP32[$2 + 12 >> 2] = $3;
    HEAP32[$2 + 72 >> 2] = 0;
    $3 = HEAP32[$1 + 180 >> 2];
    label$4 : {
     if ($3 >>> 0 < HEAPU32[$1 + 184 >> 2]) {
      $1 = HEAP32[$2 + 12 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 4 >> 2] = $1;
      $1 = HEAP32[$8 + 4 >> 2];
      HEAP32[$3 + 56 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$3 + 60 >> 2] = $1;
      $1 = HEAP32[$2 + 60 >> 2];
      HEAP32[$3 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
      HEAP32[$3 + 52 >> 2] = $1;
      $1 = HEAP32[$2 + 52 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$2 + 48 >> 2];
      HEAP32[$3 + 44 >> 2] = $1;
      $1 = HEAP32[$2 + 44 >> 2];
      HEAP32[$3 + 32 >> 2] = HEAP32[$2 + 40 >> 2];
      HEAP32[$3 + 36 >> 2] = $1;
      $1 = HEAP32[$2 + 36 >> 2];
      HEAP32[$3 + 24 >> 2] = HEAP32[$2 + 32 >> 2];
      HEAP32[$3 + 28 >> 2] = $1;
      $1 = HEAP32[$2 + 28 >> 2];
      HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
      HEAP32[$3 + 20 >> 2] = $1;
      $1 = HEAP32[$2 + 20 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$3 + 12 >> 2] = $1;
      HEAP32[$3 + 64 >> 2] = HEAP32[$2 + 72 >> 2];
      HEAP32[$6 + 180 >> 2] = HEAP32[$6 + 180 >> 2] + 68;
      break label$4;
     }
     void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($6 + 176 | 0, $2 + 8 | 0);
    }
    $4 = $6 + 108 | 0;
    $1 = HEAP32[$7 >> 2] + -1 | 0;
    label$6 : {
     if ($1 >>> 0 > 2) {
      break label$6;
     }
     $11 = Math_fround(+($19 | 0) * .25);
     $12 = Math_fround(+($18 | 0) * .25);
     $13 = Math_fround(+($5 | 0) * .25);
     label$7 : {
      switch ($1 - 1 | 0) {
      default:
       Mat4__translate_28float_2c_20float_2c_20float_29($4, Math_fround(+$11 + -.1), $13, $12);
       Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
       break label$6;
      case 0:
       Mat4__translate_28float_2c_20float_2c_20float_29($4, $11, Math_fround(+$13 + 1.1), $12);
       Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(90), Math_fround(1), Math_fround(0), Math_fround(0));
       break label$6;
      case 1:
       break label$7;
      }
     }
     Mat4__translate_28float_2c_20float_2c_20float_29($4, $11, $13, Math_fround(+$12 + -.1));
    }
    HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 40 >> 2];
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 1065353216;
    HEAP32[$2 + 12 >> 2] = 0;
    $1 = HEAP32[$17 >> 2];
    if (($1 | 0) != -1) {
     glVertexAttrib4fv($1 | 0, $2 + 8 | 0);
    }
    BaseGLWidget__transformMat_28_29($2 + 8 | 0, HEAP32[$0 + 4 >> 2]);
    $1 = HEAP32[$15 >> 2];
    if (($1 | 0) != -1) {
     glUniformMatrix4fv($1 | 0, 1, 0, $2 + 8 | 0);
    }
    Mesh__paint_28bool_29_20const($16, 0);
    $7 = HEAP32[$6 + 180 >> 2];
    if (($7 | 0) == HEAP32[$6 + 176 >> 2]) {
     break label$1;
    }
    $3 = $7 + -68 | 0;
    if (($3 | 0) != ($4 | 0)) {
     $1 = $3;
     $5 = HEAP32[$1 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $5 = HEAP32[$1 + 60 >> 2];
     HEAP32[$4 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$4 + 60 >> 2] = $5;
     $5 = HEAP32[$1 + 52 >> 2];
     HEAP32[$4 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$4 + 52 >> 2] = $5;
     $5 = HEAP32[$1 + 44 >> 2];
     HEAP32[$4 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$4 + 44 >> 2] = $5;
     $5 = HEAP32[$1 + 36 >> 2];
     HEAP32[$4 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$4 + 36 >> 2] = $5;
     $5 = HEAP32[$1 + 28 >> 2];
     HEAP32[$4 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$4 + 28 >> 2] = $5;
     $5 = HEAP32[$1 + 20 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$4 + 20 >> 2] = $5;
     $5 = HEAP32[$1 + 12 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$4 + 12 >> 2] = $5;
    }
    $1 = HEAP32[$7 + -4 >> 2];
    HEAP32[$6 + 180 >> 2] = $3;
    HEAP32[$6 + 172 >> 2] = $1;
    BaseGLWidget__transformMat_28_29($2 + 8 | 0, HEAP32[$0 + 4 >> 2]);
    $1 = HEAP32[$15 >> 2];
    if (($1 | 0) != -1) {
     glUniformMatrix4fv($1 | 0, 1, 0, $2 + 8 | 0);
    }
    $10 = $10 + 1 | 0;
    $1 = HEAP32[$9 + 375196 >> 2];
    if ($10 >>> 0 < (HEAP32[$14 >> 2] - $1 | 0) / 24 >>> 0) {
     continue;
    }
    break;
   }
  }
  global$0 = $2 + 80 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function getCubeTextureHandle_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 label$1 : {
  label$2 : {
   if (($0 | 0) >= 0) {
    $3 = HEAP32[11988];
    $7 = HEAP32[$3 + 4 >> 2];
    if ((HEAP32[$3 + 8 >> 2] - $7 | 0) / 152 >>> 0 > $0 >>> 0) {
     break label$2;
    }
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1785, 13), $0);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$5 + 8 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($5 + 8 | 0, 51440);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$5 + 8 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   if (($2 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $3);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  $9 = Math_imul($0, 152) + $7 | 0;
  $3 = HEAP32[$9 + 12 >> 2];
  if (!(!$3 | HEAP32[$3 + 4 >> 2] != ($1 | 0) | HEAP32[$3 + 8 >> 2] != ($2 | 0))) {
   $4 = HEAP32[$3 >> 2];
   break label$1;
  }
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28void_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1799, 17), $0), 1484, 1), HEAP32[$9 + 12 >> 2]), 1817, 10);
  $10 = Math_imul($0, 152) + $7 | 0;
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($3, HEAP32[$10 + 36 >> 2]), 1828, 4), $1), 1833, 1), $2);
  $4 = HEAP32[(HEAP32[HEAP32[$3 >> 2] + -12 >> 2] + $3 | 0) + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = $4;
  HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
  $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($5 + 8 | 0, 51440);
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
  $4 = HEAP32[$5 + 8 >> 2];
  $6 = HEAP32[$4 + 4 >> 2] + -1 | 0;
  HEAP32[$4 + 4 >> 2] = $6;
  if (($6 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $8);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
  $3 = operator_20new_28unsigned_20long_29(32);
  HEAP32[$3 >> 2] = 3496;
  HEAP32[$3 + 28 >> 2] = -1;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  $6 = $3 + 12 | 0;
  HEAP32[$6 >> 2] = -1;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[11850] = $6;
  $4 = HEAP32[11851];
  HEAP32[11851] = $3;
  label$9 : {
   if (!$4) {
    break label$9;
   }
   $8 = HEAP32[$4 + 4 >> 2];
   HEAP32[$4 + 4 >> 2] = $8 + -1;
   if ($8) {
    break label$9;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
   std____2____shared_weak_count____release_weak_28_29($4);
  }
  HEAP32[$5 + 12 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = $1;
  GlTexture__init_28unsigned_20int_2c_20Vec2i_20const__2c_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20void_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($6, $5 + 8 | 0);
  label$10 : {
   if (HEAP32[$10 + 36 >> 2] != 20) {
    break label$10;
   }
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   HEAP32[$9 + 12 >> 2] = $6;
   $1 = Math_imul($0, 152) + $7 | 0;
   $0 = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 16 >> 2] = $3;
   if (!$0) {
    break label$10;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = $1 + -1;
   if ($1) {
    break label$10;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
   std____2____shared_weak_count____release_weak_28_29($0);
  }
  $0 = HEAP32[11720];
  if (!HEAPU8[$0 + 2612 | 0]) {
   HEAP8[$0 + 2612 | 0] = 1;
   emscripten_asm_const_iii(2692, 1076, 0) | 0;
  }
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = $0 + -1;
  $4 = HEAP32[$3 + 12 >> 2];
  if ($0) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  std____2____shared_weak_count____release_weak_28_29($3);
 }
 global$0 = $5 + 16 | 0;
 return $4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
     $2 = HEAP8[$2 | 0];
    } else {
     $2 = 0;
    }
    $2 = $2 << 24 >> 24;
    if (($2 | 0) != 90) {
     $2 = $2 & 255;
     if (($2 | 0) == 83) {
      break label$3;
     }
     if (($2 | 0) != 78) {
      break label$2;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 1) {
    $2 = HEAPU8[$2 + 1 | 0];
   } else {
    $2 = 0;
   }
   if (($2 & 255) == 116) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
   HEAP32[$4 + 12 >> 2] = $3;
   $2 = 0;
   if (!$3) {
    break label$1;
   }
   $3 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
    $3 = HEAPU8[$3 | 0];
   } else {
    $3 = 0;
   }
   if (($3 & 255) != 73) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, ($1 | 0) != 0);
   HEAP32[$4 + 8 >> 2] = $3;
   if (!$3) {
    break label$1;
   }
   if ($1) {
    HEAP8[$1 + 1 | 0] = 1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 12 | 0, $4 + 8 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
  HEAP32[$4 + 12 >> 2] = $2;
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  $3 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
   $3 = HEAPU8[$3 | 0];
  } else {
   $3 = 0;
  }
  if (($3 & 255) != 73) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $4 + 12 | 0);
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, ($1 | 0) != 0);
  HEAP32[$4 + 8 >> 2] = $2;
  if ($2) {
   if ($1) {
    HEAP8[$1 + 1 | 0] = 1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 12 | 0, $4 + 8 | 0);
  } else {
   $2 = 0;
  }
 }
 global$0 = $4 + 16 | 0;
 return $2;
}
function BuildWorld__doTransparent_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 BuildWorld__clean_28BuildWorld__ECleanMethod_29($0, 1);
 while (1) {
  $6 = Math_imul($14, 24) + $0 | 0;
  $3 = HEAP32[$6 + 40 >> 2];
  $1 = HEAP32[$6 + 44 >> 2];
  if (($3 | 0) < ($1 | 0)) {
   $7 = HEAP32[$6 + 52 >> 2];
   while (1) {
    $4 = HEAP32[$6 + 48 >> 2];
    if (($4 | 0) < ($7 | 0)) {
     $1 = HEAP32[$6 + 60 >> 2];
     while (1) {
      $5 = HEAP32[$6 + 56 >> 2];
      if (($5 | 0) < ($1 | 0)) {
       while (1) {
        label$8 : {
         if ($3 >>> 0 > 49 | $4 >>> 0 > 49 | $5 >>> 0 > 49) {
          break label$8;
         }
         $16 = 0;
         if ((HEAPU8[((((Math_imul($14, 125e3) + $0 | 0) + Math_imul($3, 2500) | 0) + Math_imul($4, 50) | 0) + $5 | 0) + 136 | 0] & 12) != 8) {
          break label$8;
         }
         while (1) {
          $7 = 0;
          $1 = Math_imul($14, 336) + Math_imul($16, 84) | 0;
          $17 = HEAP32[$1 + 7536 >> 2];
          $2 = HEAP32[$1 + 7548 >> 2];
          $18 = ((HEAP32[$1 + 7552 >> 2] + (($2 | 0) == 1 ? $4 : 0) | 0) + ($2 ? 0 : $3) | 0) + (($2 | 0) == 2 ? $5 : 0) | 0;
          $2 = HEAP32[$1 + 7556 >> 2];
          $19 = ((HEAP32[$1 + 7560 >> 2] + (($2 | 0) == 1 ? $4 : 0) | 0) + ($2 ? 0 : $3) | 0) + (($2 | 0) == 2 ? $5 : 0) | 0;
          $2 = HEAP32[$1 + 7540 >> 2];
          $20 = ((HEAP32[$1 + 7544 >> 2] + (($2 | 0) == 1 ? $4 : 0) | 0) + ($2 ? 0 : $3) | 0) + (($2 | 0) == 2 ? $5 : 0) | 0;
          $22 = $17 >>> 0 < 3 & ($18 >>> 0 < 50 & $19 >>> 0 < 50 & $20 >>> 0 < 50);
          if (($22 | 0) == 1) {
           $7 = HEAPU8[((((Math_imul($17, 125e3) + $0 | 0) + Math_imul($20, 2500) | 0) + Math_imul($18, 50) | 0) + $19 | 0) + 136 | 0];
          }
          $2 = 0;
          $15 = 0;
          $8 = HEAP32[$1 + 7576 >> 2];
          $8 = ((HEAP32[$1 + 7580 >> 2] + (($8 | 0) == 1 ? $4 : 0) | 0) + ($8 ? 0 : $3) | 0) + (($8 | 0) == 2 ? $5 : 0) | 0;
          $9 = HEAP32[$1 + 7584 >> 2];
          $9 = ((HEAP32[$1 + 7588 >> 2] + (($9 | 0) == 1 ? $4 : 0) | 0) + ($9 ? 0 : $3) | 0) + (($9 | 0) == 2 ? $5 : 0) | 0;
          $10 = HEAP32[$1 + 7568 >> 2];
          $10 = ((HEAP32[$1 + 7572 >> 2] + (($10 | 0) == 1 ? $4 : 0) | 0) + ($10 ? 0 : $3) | 0) + (($10 | 0) == 2 ? $5 : 0) | 0;
          $21 = HEAP32[$1 + 7564 >> 2];
          $23 = $8 >>> 0 < 50 & $9 >>> 0 < 50 & $10 >>> 0 < 50 & $21 >>> 0 < 3;
          if ($23) {
           $15 = HEAPU8[($9 + (((Math_imul($21, 125e3) + $0 | 0) + Math_imul($10, 2500) | 0) + Math_imul($8, 50) | 0) | 0) + 136 | 0];
          }
          $11 = HEAP32[$1 + 7604 >> 2];
          $11 = ((HEAP32[$1 + 7608 >> 2] + (($11 | 0) == 1 ? $4 : 0) | 0) + ($11 ? 0 : $3) | 0) + (($11 | 0) == 2 ? $5 : 0) | 0;
          $12 = HEAP32[$1 + 7612 >> 2];
          $12 = ((HEAP32[$1 + 7616 >> 2] + (($12 | 0) == 1 ? $4 : 0) | 0) + ($12 ? 0 : $3) | 0) + (($12 | 0) == 2 ? $5 : 0) | 0;
          $13 = HEAP32[$1 + 7596 >> 2];
          $13 = ((HEAP32[$1 + 7600 >> 2] + (($13 | 0) == 1 ? $4 : 0) | 0) + ($13 ? 0 : $3) | 0) + (($13 | 0) == 2 ? $5 : 0) | 0;
          $1 = HEAP32[$1 + 7592 >> 2];
          $24 = $11 >>> 0 < 50 & $12 >>> 0 < 50 & $13 >>> 0 < 50 & $1 >>> 0 < 3;
          if (($24 | 0) == 1) {
           $2 = HEAPU8[($12 + (((Math_imul($1, 125e3) + $0 | 0) + Math_imul($13, 2500) | 0) + Math_imul($11, 50) | 0) | 0) + 136 | 0];
          }
          label$13 : {
           label$14 : {
            $25 = $7 & 15;
            $26 = $7 & 12;
            if (($26 | 0) != 4 ? $25 : 0) {
             break label$14;
            }
            $27 = $15 & 15;
            if (($15 & 12) != 4 ? $27 : 0) {
             break label$14;
            }
            $28 = $2 & 15;
            if (($2 & 12) != 4 ? $28 : 0) {
             break label$14;
            }
            if (!($22 ^ 1 | ($25 | 0) == 6)) {
             HEAP8[((((Math_imul($17, 125e3) + $0 | 0) + Math_imul($20, 2500) | 0) + Math_imul($18, 50) | 0) + $19 | 0) + 136 | 0] = $7 & 48 | 5;
            }
            if (!($23 ^ 1 | ($27 | 0) == 6)) {
             HEAP8[($9 + (((Math_imul($21, 125e3) + $0 | 0) + Math_imul($10, 2500) | 0) + Math_imul($8, 50) | 0) | 0) + 136 | 0] = $15 & 48 | 5;
            }
            if ($24 ^ 1 | ($28 | 0) == 6) {
             break label$13;
            }
            HEAP8[($12 + (((Math_imul($1, 125e3) + $0 | 0) + Math_imul($13, 2500) | 0) + Math_imul($11, 50) | 0) | 0) + 136 | 0] = $2 & 48 | 5;
            break label$13;
           }
           if (!($22 ^ 1 | ($26 | 0) == 8)) {
            HEAP8[((((Math_imul($17, 125e3) + $0 | 0) + Math_imul($20, 2500) | 0) + Math_imul($18, 50) | 0) + $19 | 0) + 136 | 0] = 6;
           }
           if (!($23 ^ 1 | ($15 & 12) == 8)) {
            HEAP8[($9 + (((Math_imul($21, 125e3) + $0 | 0) + Math_imul($10, 2500) | 0) + Math_imul($8, 50) | 0) | 0) + 136 | 0] = 6;
           }
           if ($24 ^ 1 | ($2 & 12) == 8) {
            break label$13;
           }
           HEAP8[($12 + (((Math_imul($1, 125e3) + $0 | 0) + Math_imul($13, 2500) | 0) + Math_imul($11, 50) | 0) | 0) + 136 | 0] = 6;
          }
          $16 = $16 + 1 | 0;
          if (($16 | 0) != 4) {
           continue;
          }
          break;
         }
         $1 = HEAP32[$6 + 60 >> 2];
        }
        $5 = $5 + 1 | 0;
        if (($5 | 0) < ($1 | 0)) {
         continue;
        }
        break;
       }
       $7 = HEAP32[$6 + 52 >> 2];
      }
      $4 = $4 + 1 | 0;
      if (($4 | 0) < ($7 | 0)) {
       continue;
      }
      break;
     }
     $1 = HEAP32[$6 + 44 >> 2];
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 3) {
   continue;
  }
  break;
 }
 BuildWorld__reClacLimits_28_29($0);
 HEAP8[$0 + 36 | 0] = BuildWorld__search_28int_2c_20int_2c_20bool_2c_20bool_29($0, 5, -1) ^ 1;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool___invoke_28void_20_28__29_28int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool_29_2c_20int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = Math_fround($6);
 $7 = Math_fround($7);
 $8 = Math_fround($8);
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $17 = global$0 + -64 | 0;
 global$0 = $17;
 $20 = HEAP32[$10 >> 2];
 HEAP32[$17 + 56 >> 2] = 0;
 HEAP32[$17 + 48 >> 2] = 0;
 HEAP32[$17 + 52 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($20 >>> 0 < 4294967280) {
     label$5 : {
      label$6 : {
       if ($20 >>> 0 >= 11) {
        $19 = $20 + 16 & -16;
        $18 = operator_20new_28unsigned_20long_29($19);
        HEAP32[$17 + 56 >> 2] = $19 | -2147483648;
        HEAP32[$17 + 48 >> 2] = $18;
        HEAP32[$17 + 52 >> 2] = $20;
        break label$6;
       }
       HEAP8[$17 + 59 | 0] = $20;
       $18 = $17 + 48 | 0;
       if (!$20) {
        break label$5;
       }
      }
      memcpy($18, $10 + 4 | 0, $20);
     }
     HEAP8[$18 + $20 | 0] = 0;
     $19 = HEAP32[$11 >> 2];
     HEAP32[$17 + 40 >> 2] = 0;
     HEAP32[$17 + 32 >> 2] = 0;
     HEAP32[$17 + 36 >> 2] = 0;
     if ($19 >>> 0 >= 4294967280) {
      break label$3;
     }
     label$8 : {
      label$9 : {
       if ($19 >>> 0 >= 11) {
        $10 = $19 + 16 & -16;
        $18 = operator_20new_28unsigned_20long_29($10);
        HEAP32[$17 + 40 >> 2] = $10 | -2147483648;
        HEAP32[$17 + 32 >> 2] = $18;
        HEAP32[$17 + 36 >> 2] = $19;
        break label$9;
       }
       HEAP8[$17 + 43 | 0] = $19;
       $18 = $17 + 32 | 0;
       if (!$19) {
        break label$8;
       }
      }
      memcpy($18, $11 + 4 | 0, $19);
     }
     HEAP8[$18 + $19 | 0] = 0;
     $11 = HEAP32[$12 >> 2];
     HEAP32[$17 + 24 >> 2] = 0;
     HEAP32[$17 + 16 >> 2] = 0;
     HEAP32[$17 + 20 >> 2] = 0;
     if ($11 >>> 0 >= 4294967280) {
      break label$2;
     }
     label$11 : {
      label$12 : {
       if ($11 >>> 0 >= 11) {
        $10 = $11 + 16 & -16;
        $18 = operator_20new_28unsigned_20long_29($10);
        HEAP32[$17 + 24 >> 2] = $10 | -2147483648;
        HEAP32[$17 + 16 >> 2] = $18;
        HEAP32[$17 + 20 >> 2] = $11;
        break label$12;
       }
       HEAP8[$17 + 27 | 0] = $11;
       $18 = $17 + 16 | 0;
       if (!$11) {
        break label$11;
       }
      }
      memcpy($18, $12 + 4 | 0, $11);
     }
     HEAP8[$11 + $18 | 0] = 0;
     $11 = HEAP32[$14 >> 2];
     HEAP32[$17 + 8 >> 2] = 0;
     HEAP32[$17 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     if ($11 >>> 0 >= 4294967280) {
      break label$1;
     }
     label$14 : {
      label$15 : {
       if ($11 >>> 0 >= 11) {
        $10 = $11 + 16 & -16;
        $18 = operator_20new_28unsigned_20long_29($10);
        HEAP32[$17 + 8 >> 2] = $10 | -2147483648;
        HEAP32[$17 >> 2] = $18;
        HEAP32[$17 + 4 >> 2] = $11;
        break label$15;
       }
       HEAP8[$17 + 11 | 0] = $11;
       $18 = $17;
       if (!$11) {
        break label$14;
       }
      }
      memcpy($18, $14 + 4 | 0, $11);
     }
     HEAP8[$11 + $18 | 0] = 0;
     FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $17 + 48 | 0, $17 + 32 | 0, $17 + 16 | 0, $13, $17, $15, $16);
     if (HEAP8[$17 + 11 | 0] <= -1) {
      dlfree(HEAP32[$17 >> 2]);
     }
     if (HEAP8[$17 + 27 | 0] <= -1) {
      dlfree(HEAP32[$17 + 16 >> 2]);
     }
     if (HEAP8[$17 + 43 | 0] <= -1) {
      dlfree(HEAP32[$17 + 32 >> 2]);
     }
     if (HEAP8[$17 + 59 | 0] <= -1) {
      dlfree(HEAP32[$17 + 48 >> 2]);
     }
     global$0 = $17 - -64 | 0;
     return;
    }
    std____2____basic_string_common_true_____throw_length_error_28_29_20const();
    abort();
   }
   std____2____basic_string_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 42952);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 4 >> 2] = $4;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
   break label$1;
  }
  label$2 : {
   $3 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
    $3 = HEAP8[$3 | 0];
   } else {
    $3 = 0;
   }
   if ((($3 << 24 >> 24) + -49 & 255) >>> 0 <= 8) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 16 | 0, $0, 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 16 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 12 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1 + 12 | 0, $1 + 16 | 0);
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$1 + 16 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 12 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 12 | 0, $1 + 16 | 0);
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 12 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   $2 = $1 + 16 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1 + 12 | 0, $2);
   break label$1;
  }
  $2 = 0;
 }
 global$0 = $1 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 72 | 0, 40385);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 28 >> 2] = $4;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 - -64 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 - -64 | 0);
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 56 | 0, 40388);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 20 >> 2] = $4;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   break label$1;
  }
  $4 = $1 - -64 | 0;
  $2 = $4;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($1 + 48 | 0, $0 + 362 | 0, 1);
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 40391);
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $5;
  label$3 : {
   label$4 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
     $2 = $0 + 8 | 0;
     $5 = HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 2;
     while (1) {
      $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$1 + 32 >> 2] = $6;
      if (!$6) {
       break label$4;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 32 | 0);
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 32 | 0, $0, $5);
     $2 = HEAP32[$1 + 36 >> 2];
     HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$1 + 68 >> 2] = $2;
    }
    $2 = 0;
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $4, $1 + 32 | 0);
    break label$3;
   }
   $2 = 0;
  }
  if (HEAPU8[$3 + 5 | 0]) {
   HEAP8[HEAP32[$3 >> 2]] = HEAPU8[$3 + 4 | 0];
  }
 }
 global$0 = $1 + 80 | 0;
 return $2;
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 496 | 0;
 global$0 = $0;
 $6 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 488 >> 2] = $6;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
 $12 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 488 | 0);
 $6 = $2;
 $2 = $5;
 $7 = HEAP32[$5 + 4 >> 2];
 label$2 : {
  if (HEAP8[$5 + 11 | 0] < 0) {
   break label$2;
  }
  $7 = HEAPU8[$2 + 11 | 0];
 }
 if ($7) {
  if (HEAP8[$2 + 11 | 0] < 0) {
   $7 = HEAP32[$2 >> 2];
  } else {
   $7 = $2;
  }
  $15 = HEAP32[$7 >> 2] == (FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 44 >> 2]]($12, 45) | 0);
 }
 $7 = $0 + 488 | 0;
 $10 = $0 + 480 | 0;
 $13 = $0 + 476 | 0;
 $8 = $0 + 472 | 0;
 $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 456 | 0);
 $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 440 | 0);
 $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 424 | 0);
 std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($6, $15, $7, $10, $13, $8, $14, $11, $9, $0 + 420 | 0);
 HEAP32[$0 + 16 >> 2] = 269;
 $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
 if (HEAP8[$2 + 11 | 0] < 0) {
  $2 = HEAP32[$5 + 4 >> 2];
 } else {
  $2 = HEAPU8[$5 + 11 | 0];
 }
 label$7 : {
  if (($2 | 0) > HEAP32[$0 + 420 >> 2]) {
   if (HEAP8[$5 + 11 | 0] < 0) {
    $2 = HEAP32[$5 + 4 >> 2];
   } else {
    $2 = HEAPU8[$5 + 11 | 0];
   }
   $6 = HEAP32[$0 + 420 >> 2];
   if (HEAP8[$9 + 11 | 0] < 0) {
    $7 = HEAP32[$9 + 4 >> 2];
   } else {
    $7 = HEAPU8[$9 + 11 | 0];
   }
   $6 = ($7 + ($2 - $6 << 1) | 0) + 1 | 0;
   break label$7;
  }
  if (HEAP8[$9 + 11 | 0] < 0) {
   $2 = HEAP32[$9 + 4 >> 2];
  } else {
   $2 = HEAPU8[$9 + 11 | 0];
  }
  $6 = $2 + 2 | 0;
 }
 $2 = $0 + 16 | 0;
 $7 = HEAP32[$0 + 420 >> 2];
 if (HEAP8[$11 + 11 | 0] < 0) {
  $10 = HEAP32[$11 + 4 >> 2];
 } else {
  $10 = HEAPU8[$11 + 11 | 0];
 }
 $6 = $7 + ($10 + $6 | 0) | 0;
 label$17 : {
  if ($6 >>> 0 < 101) {
   break label$17;
  }
  $2 = dlmalloc($6 << 2);
  $6 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = $2;
  if ($6) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($6);
  }
  $2 = HEAP32[$8 >> 2];
  if ($2) {
   break label$17;
  }
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 $7 = $2;
 $16 = $0 + 4 | 0;
 $10 = $0;
 $17 = HEAP32[$3 + 4 >> 2];
 if (HEAP8[$5 + 11 | 0] < 0) {
  $6 = HEAP32[$5 >> 2];
 } else {
  $6 = $5;
 }
 $13 = $6;
 if (HEAP8[$5 + 11 | 0] < 0) {
  $6 = HEAP32[$5 >> 2];
 } else {
  $6 = $5;
 }
 if (HEAP8[$5 + 11 | 0] < 0) {
  $5 = HEAP32[$5 + 4 >> 2];
 } else {
  $5 = HEAPU8[$5 + 11 | 0];
 }
 std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($7, $16, $10, $17, $13, $6 + ($5 << 2) | 0, $12, $15, $0 + 480 | 0, HEAP32[$0 + 476 >> 2], HEAP32[$0 + 472 >> 2], $14, $11, $9, HEAP32[$0 + 420 >> 2]);
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
 $2 = HEAP32[$8 >> 2];
 HEAP32[$8 >> 2] = 0;
 if ($2) {
  FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($2);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($11);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
 $3 = HEAP32[$0 + 488 >> 2];
 $2 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 global$0 = $0 + 496 | 0;
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    $1 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
     $1 = HEAPU8[$1 | 0];
    } else {
     $1 = 0;
    }
    if (($1 & 255) != 100) {
     break label$3;
    }
    $1 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
     $1 = HEAP8[$1 + 1 | 0];
    } else {
     $1 = 0;
    }
    $1 = $1 << 24 >> 24;
    if (($1 | 0) != 88) {
     if (($1 | 0) != 120) {
      if (($1 | 0) != 105) {
       break label$3;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
      HEAP32[$2 + 12 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
      HEAP32[$2 + 8 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      HEAP8[$2 + 4 | 0] = 0;
      $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$2 + 12 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
     HEAP32[$2 + 8 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     HEAP8[$2 + 4 | 0] = 1;
     $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$2 + 8 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
    HEAP32[$2 + 4 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $2 + 12 | 0;
    $3 = $2 + 8 | 0;
    $4 = $2 + 4 | 0;
    $0 = $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$3 >> 2], HEAP32[$4 >> 2]);
    break label$1;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function __floatscan($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 label$1 : {
  if ($2 >>> 0 <= 2) {
   $2 = $2 << 2;
   $7 = HEAP32[$2 + 23516 >> 2];
   $10 = HEAP32[$2 + 23504 >> 2];
   while (1) {
    $2 = HEAP32[$1 + 4 >> 2];
    label$4 : {
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$4;
     }
     $2 = __shgetc($1);
    }
    if (($2 | 0) == 32 | $2 + -9 >>> 0 < 5) {
     continue;
    }
    break;
   }
   $4 = $2 + -43 | 0;
   label$6 : {
    if ($4 >>> 0 > 2) {
     $6 = 1;
     break label$6;
    }
    $6 = 1;
    if (!($4 - 1)) {
     break label$6;
    }
    $6 = ($2 | 0) == 45 ? -1 : 1;
    $2 = HEAP32[$1 + 4 >> 2];
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$6;
    }
    $2 = __shgetc($1);
   }
   $4 = 0;
   label$9 : {
    label$10 : {
     while (1) {
      if (HEAP8[$4 + 23436 | 0] == ($2 | 32)) {
       label$13 : {
        if ($4 >>> 0 > 6) {
         break label$13;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$1 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$13;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 8) {
        continue;
       }
       break label$10;
      }
      break;
     }
     if (($4 | 0) != 3) {
      if (($4 | 0) == 8) {
       break label$10;
      }
      if (!$3 | $4 >>> 0 < 4) {
       break label$9;
      }
      if (($4 | 0) == 8) {
       break label$10;
      }
     }
     $2 = HEAP32[$1 + 104 >> 2];
     if ($2) {
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     if (!$3 | $4 >>> 0 < 4) {
      break label$10;
     }
     while (1) {
      if ($2) {
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
      }
      $4 = $4 + -1 | 0;
      if ($4 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    __extendsftf2($5, Math_fround(Math_fround($6 | 0) * Math_fround(infinity)));
    $6 = HEAP32[$5 + 8 >> 2];
    $7 = HEAP32[$5 + 12 >> 2];
    $8 = HEAP32[$5 >> 2];
    $9 = HEAP32[$5 + 4 >> 2];
    break label$1;
   }
   label$19 : {
    label$20 : {
     label$21 : {
      if ($4) {
       break label$21;
      }
      $4 = 0;
      while (1) {
       if (HEAP8[$4 + 23445 | 0] != ($2 | 32)) {
        break label$21;
       }
       label$23 : {
        if ($4 >>> 0 > 1) {
         break label$23;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$1 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$23;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$20;
     }
     label$25 : {
      label$26 : {
       if ($4 >>> 0 > 3) {
        break label$26;
       }
       switch ($4 - 1 | 0) {
       case 2:
        break label$20;
       case 0:
       case 1:
        break label$26;
       default:
        break label$25;
       }
      }
      if (HEAP32[$1 + 104 >> 2]) {
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
      }
      break label$19;
     }
     label$28 : {
      if (($2 | 0) != 48) {
       break label$28;
      }
      $4 = HEAP32[$1 + 4 >> 2];
      label$29 : {
       if ($4 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$1 + 4 >> 2] = $4 + 1;
        $4 = HEAPU8[$4 | 0];
        break label$29;
       }
       $4 = __shgetc($1);
      }
      if (($4 | 32) == 120) {
       hexfloat($5 + 16 | 0, $1, $10, $7, $6, $3);
       $6 = HEAP32[$5 + 24 >> 2];
       $7 = HEAP32[$5 + 28 >> 2];
       $8 = HEAP32[$5 + 16 >> 2];
       $9 = HEAP32[$5 + 20 >> 2];
       break label$1;
      }
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$28;
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     decfloat($5 + 32 | 0, $1, $2, $10, $7, $6, $3);
     $6 = HEAP32[$5 + 40 >> 2];
     $7 = HEAP32[$5 + 44 >> 2];
     $8 = HEAP32[$5 + 32 >> 2];
     $9 = HEAP32[$5 + 36 >> 2];
     break label$1;
    }
    label$32 : {
     $2 = HEAP32[$1 + 4 >> 2];
     label$33 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$33;
      }
      $2 = __shgetc($1);
     }
     if (($2 | 0) == 40) {
      $4 = 1;
      break label$32;
     }
     $6 = 0;
     $7 = 2147450880;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$1;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     break label$1;
    }
    while (1) {
     label$39 : {
      $2 = HEAP32[$1 + 4 >> 2];
      label$37 : {
       if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$1 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$37;
       }
       $2 = __shgetc($1);
      }
      if (!($2 + -48 >>> 0 < 10 | $2 + -65 >>> 0 < 26 | ($2 | 0) == 95)) {
       if ($2 + -97 >>> 0 >= 26) {
        break label$39;
       }
      }
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    $6 = 0;
    $7 = 2147450880;
    if (($2 | 0) == 41) {
     break label$1;
    }
    $2 = HEAP32[$1 + 104 >> 2];
    if ($2) {
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
    }
    if ($3) {
     if (!$4) {
      break label$1;
     }
     while (1) {
      $4 = $4 + -1 | 0;
      if ($2) {
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
      }
      if ($4) {
       continue;
      }
      break;
     }
     break label$1;
    }
   }
   HEAP32[12002] = 28;
   __shlim($1, 0, 0);
  }
  $6 = 0;
  $7 = 0;
 }
 HEAP32[$0 >> 2] = $8;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$0 + 12 >> 2] = $7;
 global$0 = $5 + 48 | 0;
}
function BuildWorld__clean_28BuildWorld__ECleanMethod_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1 : {
  label$2 : {
   if (!$1) {
    HEAP8[$0 + 36 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = 0;
    $3 = Math_imul(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
    if (($3 | 0) >= 1) {
     while (1) {
      HEAP8[HEAP32[$0 + 28 >> 2] + $2 | 0] = 0;
      $2 = $2 + 1 | 0;
      if (($3 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    HEAP32[$0 + 40 >> 2] = 0;
    $8 = 50;
    HEAP32[$0 + 52 >> 2] = 50;
    HEAP32[$0 + 44 >> 2] = 50;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 50;
    $2 = $0 - -64 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 50;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 50;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP32[$0 + 84 >> 2] = 50;
    HEAP32[$0 + 88 >> 2] = 0;
    HEAP32[$0 + 92 >> 2] = 50;
    HEAP32[$0 + 96 >> 2] = 0;
    HEAP32[$0 + 100 >> 2] = 50;
    HEAP32[$0 + 104 >> 2] = 0;
    HEAP32[$0 + 108 >> 2] = 50;
    $6 = 50;
    $9 = 50;
    $10 = 0;
    break label$2;
   }
   $4 = HEAP32[$0 + 40 >> 2];
   $8 = HEAP32[$0 + 44 >> 2];
   if (($4 | 0) >= ($8 | 0)) {
    break label$1;
   }
   $9 = HEAP32[$0 + 60 >> 2];
   $11 = HEAP32[$0 + 56 >> 2];
   $6 = HEAP32[$0 + 52 >> 2];
   $10 = HEAP32[$0 + 48 >> 2];
  }
  $12 = $1 + -1 | 0;
  while (1) {
   if (($10 | 0) < ($6 | 0)) {
    $13 = ($11 | 0) < ($9 | 0) & $4 >>> 0 < 50;
    $3 = $10;
    while (1) {
     $2 = $11;
     if (!($13 ^ 1 | $3 >>> 0 > 49)) {
      while (1) {
       label$11 : {
        if ($2 >>> 0 > 49) {
         break label$11;
        }
        $7 = ((Math_imul($4, 2500) + $0 | 0) + Math_imul($3, 50) | 0) + $2 | 0;
        $5 = HEAPU8[$7 + 136 | 0];
        if (!$5) {
         break label$11;
        }
        label$12 : {
         if (!$1) {
          break label$12;
         }
         if ($12 >>> 0 > 1) {
          break label$11;
         }
         if (!($12 - 1)) {
          if (($5 & 12) == 4) {
           break label$12;
          }
          HEAP8[$7 + 136 | 0] = $5 & 15;
          break label$11;
         }
         if (($5 & 12) != 4) {
          break label$11;
         }
         HEAP8[$7 + 136 | 0] = $5 & 48;
         break label$11;
        }
        HEAP8[$7 + 136 | 0] = 0;
       }
       $2 = $2 + 1 | 0;
       if (($9 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = $3 + 1 | 0;
     if (($6 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = $4 + 1 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $4 = HEAP32[$0 - -64 >> 2];
 $8 = HEAP32[$0 + 68 >> 2];
 if (($4 | 0) < ($8 | 0)) {
  $9 = HEAP32[$0 + 84 >> 2];
  $10 = HEAP32[$0 + 80 >> 2];
  $7 = HEAP32[$0 + 76 >> 2];
  $11 = HEAP32[$0 + 72 >> 2];
  $12 = $1 + -1 | 0;
  $13 = $12 >>> 0 > 1;
  while (1) {
   if (($11 | 0) < ($7 | 0)) {
    $3 = $11;
    while (1) {
     label$18 : {
      if ($4 >>> 0 > 49 | ($10 | 0) >= ($9 | 0)) {
       break label$18;
      }
      $2 = $10;
      if ($3 >>> 0 > 49) {
       break label$18;
      }
      while (1) {
       label$20 : {
        if ($2 >>> 0 > 49) {
         break label$20;
        }
        $6 = (((Math_imul($4, 2500) + $0 | 0) + Math_imul($3, 50) | 0) + $2 | 0) + 125136 | 0;
        $5 = HEAPU8[$6 | 0];
        if (!$5) {
         break label$20;
        }
        label$21 : {
         if (!$1) {
          break label$21;
         }
         if ($13) {
          break label$20;
         }
         if (!($12 - 1)) {
          if (($5 & 12) == 4) {
           break label$21;
          }
          HEAP8[$6 | 0] = $5 & 15;
          break label$20;
         }
         if (($5 & 12) != 4) {
          break label$20;
         }
         HEAP8[$6 | 0] = $5 & 48;
         break label$20;
        }
        HEAP8[$6 | 0] = 0;
       }
       $2 = $2 + 1 | 0;
       if (($9 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = $3 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = $4 + 1 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $4 = HEAP32[$0 + 88 >> 2];
 $8 = HEAP32[$0 + 92 >> 2];
 if (($4 | 0) < ($8 | 0)) {
  $9 = HEAP32[$0 + 108 >> 2];
  $10 = HEAP32[$0 + 104 >> 2];
  $7 = HEAP32[$0 + 100 >> 2];
  $11 = HEAP32[$0 + 96 >> 2];
  $12 = $1 + -1 | 0;
  $13 = $12 >>> 0 > 1;
  while (1) {
   if (($11 | 0) < ($7 | 0)) {
    $3 = $11;
    while (1) {
     label$27 : {
      if ($4 >>> 0 > 49 | ($10 | 0) >= ($9 | 0)) {
       break label$27;
      }
      $2 = $10;
      if ($3 >>> 0 > 49) {
       break label$27;
      }
      while (1) {
       label$29 : {
        if ($2 >>> 0 > 49) {
         break label$29;
        }
        $6 = (((Math_imul($4, 2500) + $0 | 0) + Math_imul($3, 50) | 0) + $2 | 0) + 250136 | 0;
        $5 = HEAPU8[$6 | 0];
        if (!$5) {
         break label$29;
        }
        label$30 : {
         if (!$1) {
          break label$30;
         }
         if ($13) {
          break label$29;
         }
         if (!($12 - 1)) {
          if (($5 & 12) == 4) {
           break label$30;
          }
          HEAP8[$6 | 0] = $5 & 15;
          break label$29;
         }
         if (($5 & 12) != 4) {
          break label$29;
         }
         HEAP8[$6 | 0] = $5 & 48;
         break label$29;
        }
        HEAP8[$6 | 0] = 0;
       }
       $2 = $2 + 1 | 0;
       if (($9 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = $3 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = $4 + 1 | 0;
   if (($8 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
}
function void_20Shape__runBFSTree_Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__28MatStack__2c_20BNode_20const__2c_20float_2c_20Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 $5 = HEAP32[HEAP32[$4 >> 2] >> 2] + (HEAP32[$2 >> 2] << 6) | 0;
 if (($5 | 0) != ($1 | 0)) {
  $8 = HEAP32[$1 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 4 >> 2] = $8;
  $8 = HEAP32[$1 + 60 >> 2];
  HEAP32[$5 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$5 + 60 >> 2] = $8;
  $8 = HEAP32[$1 + 52 >> 2];
  HEAP32[$5 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$5 + 52 >> 2] = $8;
  $8 = HEAP32[$1 + 44 >> 2];
  HEAP32[$5 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$5 + 44 >> 2] = $8;
  $8 = HEAP32[$1 + 36 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$5 + 36 >> 2] = $8;
  $8 = HEAP32[$1 + 28 >> 2];
  HEAP32[$5 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$5 + 28 >> 2] = $8;
  $8 = HEAP32[$1 + 20 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$5 + 20 >> 2] = $8;
  $8 = HEAP32[$1 + 12 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$5 + 12 >> 2] = $8;
 }
 label$2 : {
  $8 = HEAP32[$2 + 12 >> 2];
  $11 = $2 + 8 | 0;
  if (($8 | 0) != ($11 | 0)) {
   $12 = $1 + 68 | 0;
   $5 = HEAP32[$1 + 72 >> 2];
   while (1) {
    $10 = HEAP32[$1 + 60 >> 2];
    $9 = $6 - -64 | 0;
    $7 = $9;
    HEAP32[$7 >> 2] = HEAP32[$1 + 56 >> 2];
    HEAP32[$7 + 4 >> 2] = $10;
    $7 = HEAP32[$1 + 52 >> 2];
    HEAP32[$6 + 56 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$6 + 60 >> 2] = $7;
    $7 = HEAP32[$1 + 44 >> 2];
    HEAP32[$6 + 48 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$6 + 52 >> 2] = $7;
    $7 = HEAP32[$1 + 36 >> 2];
    HEAP32[$6 + 40 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$6 + 44 >> 2] = $7;
    $7 = HEAP32[$1 + 28 >> 2];
    HEAP32[$6 + 32 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$6 + 36 >> 2] = $7;
    $7 = HEAP32[$1 + 20 >> 2];
    HEAP32[$6 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$6 + 28 >> 2] = $7;
    $7 = HEAP32[$1 + 12 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$6 + 20 >> 2] = $7;
    $7 = HEAP32[$1 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$6 + 12 >> 2] = $7;
    HEAP32[$6 + 72 >> 2] = 0;
    $7 = $8 + 8 | 0;
    label$5 : {
     if ($5 >>> 0 < HEAPU32[$1 + 76 >> 2]) {
      $10 = HEAP32[$6 + 12 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$5 + 4 >> 2] = $10;
      $10 = HEAP32[$9 + 4 >> 2];
      HEAP32[$5 + 56 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$5 + 60 >> 2] = $10;
      $9 = HEAP32[$6 + 60 >> 2];
      HEAP32[$5 + 48 >> 2] = HEAP32[$6 + 56 >> 2];
      HEAP32[$5 + 52 >> 2] = $9;
      $9 = HEAP32[$6 + 52 >> 2];
      HEAP32[$5 + 40 >> 2] = HEAP32[$6 + 48 >> 2];
      HEAP32[$5 + 44 >> 2] = $9;
      $9 = HEAP32[$6 + 44 >> 2];
      HEAP32[$5 + 32 >> 2] = HEAP32[$6 + 40 >> 2];
      HEAP32[$5 + 36 >> 2] = $9;
      $9 = HEAP32[$6 + 36 >> 2];
      HEAP32[$5 + 24 >> 2] = HEAP32[$6 + 32 >> 2];
      HEAP32[$5 + 28 >> 2] = $9;
      $9 = HEAP32[$6 + 28 >> 2];
      HEAP32[$5 + 16 >> 2] = HEAP32[$6 + 24 >> 2];
      HEAP32[$5 + 20 >> 2] = $9;
      $9 = HEAP32[$6 + 20 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 16 >> 2];
      HEAP32[$5 + 12 >> 2] = $9;
      HEAP32[$5 + 64 >> 2] = HEAP32[$6 + 72 >> 2];
      HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] + 68;
      break label$5;
     }
     void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($12, $6 + 8 | 0);
    }
    Shape__transformFromFaceToNei_28MatStack__2c_20int_2c_20int_2c_20float_29_20const($0, $1, HEAP32[$2 >> 2], HEAP32[$8 + 12 >> 2], $3);
    void_20Shape__runBFSTree_Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__28MatStack__2c_20BNode_20const__2c_20float_2c_20Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const__$_0_20const__29_20const($0, $1, $7, $3, $4);
    $9 = HEAP32[$1 + 72 >> 2];
    if (($9 | 0) == HEAP32[$1 + 68 >> 2]) {
     break label$2;
    }
    $5 = $9 + -68 | 0;
    if (($5 | 0) != ($1 | 0)) {
     $7 = HEAP32[$5 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$1 + 4 >> 2] = $7;
     $7 = HEAP32[$5 + 60 >> 2];
     HEAP32[$1 + 56 >> 2] = HEAP32[$5 + 56 >> 2];
     HEAP32[$1 + 60 >> 2] = $7;
     $7 = HEAP32[$5 + 52 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$5 + 48 >> 2];
     HEAP32[$1 + 52 >> 2] = $7;
     $7 = HEAP32[$5 + 44 >> 2];
     HEAP32[$1 + 40 >> 2] = HEAP32[$5 + 40 >> 2];
     HEAP32[$1 + 44 >> 2] = $7;
     $7 = HEAP32[$5 + 36 >> 2];
     HEAP32[$1 + 32 >> 2] = HEAP32[$5 + 32 >> 2];
     HEAP32[$1 + 36 >> 2] = $7;
     $7 = HEAP32[$5 + 28 >> 2];
     HEAP32[$1 + 24 >> 2] = HEAP32[$5 + 24 >> 2];
     HEAP32[$1 + 28 >> 2] = $7;
     $7 = HEAP32[$5 + 20 >> 2];
     HEAP32[$1 + 16 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP32[$1 + 20 >> 2] = $7;
     $7 = HEAP32[$5 + 12 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$1 + 12 >> 2] = $7;
    }
    $9 = HEAP32[$9 + -4 >> 2];
    HEAP32[$1 + 72 >> 2] = $5;
    HEAP32[$1 + 64 >> 2] = $9;
    $8 = HEAP32[$8 + 4 >> 2];
    if (($11 | 0) != ($8 | 0)) {
     continue;
    }
    break;
   }
  }
  global$0 = $6 + 80 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 192 | 0;
 global$0 = $0;
 $6 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 184 >> 2] = $6;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
 $12 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 184 | 0);
 $6 = $2;
 $2 = $5;
 $7 = HEAP32[$5 + 4 >> 2];
 label$2 : {
  if (HEAP8[$5 + 11 | 0] < 0) {
   break label$2;
  }
  $7 = HEAPU8[$2 + 11 | 0];
 }
 if ($7) {
  if (HEAP8[$2 + 11 | 0] < 0) {
   $7 = HEAP32[$2 >> 2];
  } else {
   $7 = $2;
  }
  $15 = HEAPU8[$7 | 0] == (FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 28 >> 2]]($12, 45) & 255);
 }
 $7 = $0 + 184 | 0;
 $10 = $0 + 176 | 0;
 $13 = $0 + 175 | 0;
 $8 = $0 + 174 | 0;
 $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
 $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 144 | 0);
 $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 128 | 0);
 std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($6, $15, $7, $10, $13, $8, $14, $11, $9, $0 + 124 | 0);
 HEAP32[$0 + 16 >> 2] = 269;
 $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
 if (HEAP8[$2 + 11 | 0] < 0) {
  $2 = HEAP32[$5 + 4 >> 2];
 } else {
  $2 = HEAPU8[$5 + 11 | 0];
 }
 label$7 : {
  if (($2 | 0) > HEAP32[$0 + 124 >> 2]) {
   if (HEAP8[$5 + 11 | 0] < 0) {
    $2 = HEAP32[$5 + 4 >> 2];
   } else {
    $2 = HEAPU8[$5 + 11 | 0];
   }
   $6 = HEAP32[$0 + 124 >> 2];
   if (HEAP8[$9 + 11 | 0] < 0) {
    $7 = HEAP32[$9 + 4 >> 2];
   } else {
    $7 = HEAPU8[$9 + 11 | 0];
   }
   $6 = ($7 + ($2 - $6 << 1) | 0) + 1 | 0;
   break label$7;
  }
  if (HEAP8[$9 + 11 | 0] < 0) {
   $2 = HEAP32[$9 + 4 >> 2];
  } else {
   $2 = HEAPU8[$9 + 11 | 0];
  }
  $6 = $2 + 2 | 0;
 }
 $2 = $0 + 16 | 0;
 $7 = HEAP32[$0 + 124 >> 2];
 if (HEAP8[$11 + 11 | 0] < 0) {
  $10 = HEAP32[$11 + 4 >> 2];
 } else {
  $10 = HEAPU8[$11 + 11 | 0];
 }
 $6 = $7 + ($10 + $6 | 0) | 0;
 label$17 : {
  if ($6 >>> 0 < 101) {
   break label$17;
  }
  $2 = dlmalloc($6);
  $6 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = $2;
  if ($6) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($6);
  }
  $2 = HEAP32[$8 >> 2];
  if ($2) {
   break label$17;
  }
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 $7 = $2;
 $16 = $0 + 4 | 0;
 $10 = $0;
 $17 = HEAP32[$3 + 4 >> 2];
 if (HEAP8[$5 + 11 | 0] < 0) {
  $6 = HEAP32[$5 >> 2];
 } else {
  $6 = $5;
 }
 $13 = $6;
 if (HEAP8[$5 + 11 | 0] < 0) {
  $6 = HEAP32[$5 >> 2];
 } else {
  $6 = $5;
 }
 if (HEAP8[$5 + 11 | 0] < 0) {
  $5 = HEAP32[$5 + 4 >> 2];
 } else {
  $5 = HEAPU8[$5 + 11 | 0];
 }
 std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($7, $16, $10, $17, $13, $6 + $5 | 0, $12, $15, $0 + 176 | 0, HEAP8[$0 + 175 | 0], HEAP8[$0 + 174 | 0], $14, $11, $9, HEAP32[$0 + 124 >> 2]);
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
 $2 = HEAP32[$8 >> 2];
 HEAP32[$8 >> 2] = 0;
 if ($2) {
  FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($2);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($11);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
 $3 = HEAP32[$0 + 184 >> 2];
 $2 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 global$0 = $0 + 192 | 0;
 return $1 | 0;
}
function Shape__orderFacesInSequence_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 Shape__make_sides_facenei_28_29($0);
 $5 = HEAP32[$0 + 12 >> 2];
 $8 = operator_20new_28unsigned_20long_29((wasm2js_i32$0 = -1, wasm2js_i32$1 = __wasm_i64_mul($5, 0, 188, 0), wasm2js_i32$2 = i64toi32_i32$HIGH_BITS, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 if ($5) {
  $5 = Math_imul($5, 188) + $8 | 0;
  $2 = $8;
  while (1) {
   HEAP32[$2 + 76 >> 2] = 0;
   HEAP32[$2 + 80 >> 2] = 0;
   HEAP16[$2 + 24 >> 1] = 0;
   HEAP32[$2 + 16 >> 2] = 2;
   HEAP32[$2 + 20 >> 2] = -1;
   HEAP32[$2 >> 2] = -1;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 84 >> 2] = 0;
   HEAP32[$2 + 88 >> 2] = 0;
   HEAP32[$2 + 92 >> 2] = 0;
   HEAP32[$2 + 96 >> 2] = 0;
   HEAP16[$2 + 100 >> 1] = 0;
   HEAP32[$2 + 104 >> 2] = 0;
   HEAP32[$2 + 108 >> 2] = 0;
   HEAP32[$2 + 112 >> 2] = 0;
   HEAP32[$2 + 116 >> 2] = 0;
   HEAP32[$2 + 120 >> 2] = 0;
   HEAP32[$2 + 124 >> 2] = 0;
   HEAP16[$2 + 128 >> 1] = 0;
   HEAP32[$2 + 132 >> 2] = 0;
   HEAP32[$2 + 136 >> 2] = 0;
   HEAP32[$2 + 140 >> 2] = 0;
   HEAP32[$2 + 144 >> 2] = 0;
   HEAP32[$2 + 148 >> 2] = 0;
   HEAP32[$2 + 152 >> 2] = 0;
   HEAP16[$2 + 156 >> 1] = 0;
   HEAP32[$2 + 160 >> 2] = 0;
   HEAP32[$2 + 164 >> 2] = 0;
   HEAP32[$2 + 168 >> 2] = 0;
   HEAP32[$2 + 172 >> 2] = 0;
   HEAP32[$2 + 176 >> 2] = 0;
   HEAP32[$2 + 180 >> 2] = 0;
   HEAP16[$2 + 184 >> 1] = 0;
   HEAP32[$2 + 68 >> 2] = -1;
   HEAP32[$2 + 72 >> 2] = -1;
   HEAP32[$2 + 60 >> 2] = -1;
   HEAP32[$2 + 64 >> 2] = -1;
   HEAP32[$2 + 52 >> 2] = -1;
   HEAP32[$2 + 56 >> 2] = -1;
   HEAP32[$2 + 44 >> 2] = -1;
   HEAP32[$2 + 48 >> 2] = -1;
   HEAP32[$2 + 36 >> 2] = -1;
   HEAP32[$2 + 40 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 32 >> 2] = -1;
   $2 = $2 + 188 | 0;
   if (($5 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  $3 = HEAP32[$0 + 12 >> 2];
 }
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 label$3 : {
  if ($3) {
   if ($3 >>> 0 >= 536870912) {
    break label$3;
   }
   $2 = $3 << 3;
   $4 = operator_20new_28unsigned_20long_29($2);
   HEAP32[$7 >> 2] = $4;
   $5 = $2 + $4 | 0;
   HEAP32[$7 + 8 >> 2] = $5;
   memset($4, 255, $2);
   HEAP32[$7 + 4 >> 2] = $5;
  }
  $5 = HEAP32[$0 + 28 >> 2];
  $2 = $5 + Math_imul($1, 188) | 0;
  if (($2 | 0) != ($8 | 0)) {
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   $6 = HEAP32[$2 + 8 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = $6;
   HEAP32[$8 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP32[$8 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  HEAP32[($1 << 3) + $4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = $1;
  $2 = 0;
  $1 = 0;
  label$6 : {
   while (1) {
    $9 = Shape__faceNeiFirstOpt_28int_2c_20std____2__vector_Shape__TransType_2c_20std____2__allocator_Shape__TransType__20___29($0, HEAP32[(($2 << 3) + $4 | 0) + 4 >> 2], $7);
    label$8 : {
     if (($9 | 0) != -1) {
      $6 = $5 + Math_imul($9, 188) | 0;
      $2 = $1 + 1 | 0;
      $1 = Math_imul($2, 188) + $8 | 0;
      if (($6 | 0) != ($1 | 0)) {
       HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
       $10 = HEAP32[$6 + 8 >> 2];
       HEAP32[$1 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
       HEAP32[$1 + 8 >> 2] = $10;
       HEAP32[$1 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
       HEAP32[$1 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
      }
      HEAP32[($9 << 3) + $4 >> 2] = $2;
      HEAP32[(($2 << 3) + $4 | 0) + 4 >> 2] = $9;
      $1 = $2;
      break label$8;
     }
     $2 = $2 + -1 | 0;
    }
    if (($2 | 0) > 0) {
     continue;
    }
    if (($1 + 1 | 0) >= ($3 | 0)) {
     if (HEAP32[$0 + 16 >> 2] >= 1) {
      $6 = HEAP32[$0 + 32 >> 2];
      $2 = 0;
      while (1) {
       $1 = $6 + Math_imul($2, 24) | 0;
       HEAP32[$1 + 16 >> 2] = HEAP32[(HEAP32[$1 + 16 >> 2] << 3) + $4 >> 2];
       HEAP32[$1 + 20 >> 2] = HEAP32[(HEAP32[$1 + 20 >> 2] << 3) + $4 >> 2];
       $2 = $2 + 1 | 0;
       if (($2 | 0) < HEAP32[$0 + 16 >> 2]) {
        continue;
       }
       break;
      }
     }
     if (HEAP32[$0 + 20 >> 2] >= 1) {
      $6 = HEAP32[$0 + 44 >> 2];
      $2 = 0;
      while (1) {
       $1 = $6 + Math_imul($2, 40) | 0;
       $3 = HEAP32[$1 + 16 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 16 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $3 = HEAP32[$1 + 20 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 20 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $3 = HEAP32[$1 + 24 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 24 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $3 = HEAP32[$1 + 28 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 28 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $3 = HEAP32[$1 + 32 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 32 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $3 = HEAP32[$1 + 36 >> 2];
       if (($3 | 0) != -1) {
        HEAP32[$1 + 36 >> 2] = HEAP32[($3 << 3) + $4 >> 2];
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) < HEAP32[$0 + 20 >> 2]) {
        continue;
       }
       break;
      }
     }
     if ($5) {
      dlfree($5);
     }
     HEAP32[$0 + 28 >> 2] = $8;
     $0 = 0;
     break label$6;
    }
    if (HEAP32[$0 + 180 >> 2]) {
     HEAP32[$0 + 180 >> 2] = 0;
     $2 = $1;
     continue;
    }
    break;
   }
   if ($5) {
    dlfree($5);
   }
   HEAP32[$0 + 28 >> 2] = 0;
   $0 = 2;
  }
  if ($4) {
   HEAP32[$7 + 4 >> 2] = $4;
   dlfree($4);
  }
  global$0 = $7 + 16 | 0;
  return $0;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function textureParamToEditor_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   if (($1 | 0) >= 0) {
    $4 = HEAP32[11988];
    $3 = HEAP32[$4 + 4 >> 2];
    if ((HEAP32[$4 + 8 >> 2] - $3 | 0) / 152 >>> 0 > $1 >>> 0) {
     break label$2;
    }
   }
   $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1764, 18), $1);
   $3 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 28 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 24 | 0, 51440);
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   $3 = HEAP32[$2 + 24 >> 2];
   $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
   HEAP32[$3 + 4 >> 2] = $4;
   if (($4 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $5);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
   memset($0, 0, 72);
   break label$1;
  }
  memset($2 + 24 | 0, 0, 69);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28char_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 8 | 0, ($3 + Math_imul($1, 152) | 0) + 96 | 0);
  label$6 : {
   if (HEAP8[$2 + 35 | 0] >= 0) {
    HEAP8[$2 + 35 | 0] = 0;
    HEAP8[$2 + 24 | 0] = 0;
    break label$6;
   }
   HEAP8[HEAP32[$2 + 24 >> 2]] = 0;
   HEAP32[$2 + 28 >> 2] = 0;
   if (HEAP8[$2 + 35 | 0] > -1) {
    break label$6;
   }
   dlfree(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 32 >> 2] = 0;
  }
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 16 >> 2];
  $4 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 28 >> 2] = $4;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28char_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 8 | 0, ($3 + Math_imul($1, 152) | 0) + 108 | 0);
  label$8 : {
   if (HEAP8[$2 + 47 | 0] >= 0) {
    HEAP8[$2 + 47 | 0] = 0;
    HEAP8[$2 + 36 | 0] = 0;
    break label$8;
   }
   HEAP8[HEAP32[$2 + 36 >> 2]] = 0;
   HEAP32[$2 + 40 >> 2] = 0;
   if (HEAP8[$2 + 47 | 0] > -1) {
    break label$8;
   }
   dlfree(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
  }
  $4 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
  $1 = $3 + Math_imul($1, 152) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 48 | 0, $1 + 120 | 0);
  HEAP32[$2 + 72 >> 2] = HEAP32[$1 + 36 >> 2];
  HEAP32[$2 + 76 >> 2] = HEAP32[$1 + 132 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 60 | 0, $1 + 136 | 0);
  $3 = HEAP32[$1 + 88 >> 2];
  HEAP32[$2 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
  HEAP32[$2 + 88 >> 2] = $3;
  HEAP32[$2 + 80 >> 2] = HEAP32[$1 + 92 >> 2];
  HEAP8[$2 + 92 | 0] = HEAPU8[$1 + 68 | 0];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = HEAP32[$2 + 44 >> 2];
  $1 = HEAP32[$2 + 40 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 36 >> 2];
  HEAP32[$0 + 16 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 52 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 48 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$2 + 68 >> 2];
  $1 = HEAP32[$2 + 64 >> 2];
  HEAP32[$0 + 36 >> 2] = HEAP32[$2 + 60 >> 2];
  HEAP32[$0 + 40 >> 2] = $1;
  HEAP32[$2 + 68 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  $1 = HEAPU8[$2 + 89 | 0] | HEAPU8[$2 + 90 | 0] << 8 | (HEAPU8[$2 + 91 | 0] << 16 | HEAPU8[$2 + 92 | 0] << 24);
  $3 = HEAPU8[$2 + 85 | 0] | HEAPU8[$2 + 86 | 0] << 8 | (HEAPU8[$2 + 87 | 0] << 16 | HEAPU8[$2 + 88 | 0] << 24);
  HEAP8[$0 + 61 | 0] = $3;
  HEAP8[$0 + 62 | 0] = $3 >>> 8;
  HEAP8[$0 + 63 | 0] = $3 >>> 16;
  HEAP8[$0 + 64 | 0] = $3 >>> 24;
  HEAP8[$0 + 65 | 0] = $1;
  HEAP8[$0 + 66 | 0] = $1 >>> 8;
  HEAP8[$0 + 67 | 0] = $1 >>> 16;
  HEAP8[$0 + 68 | 0] = $1 >>> 24;
  $1 = HEAP32[$2 + 84 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$2 + 80 >> 2];
  HEAP32[$0 + 60 >> 2] = $1;
  $1 = HEAP32[$2 + 76 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$2 + 72 >> 2];
  HEAP32[$0 + 52 >> 2] = $1;
 }
 global$0 = $2 + 96 | 0;
}
function PicPainter__paint_28bool_2c_20Vec3_20const__2c_20BaseGLWidget__2c_20bool_2c_20int_2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0);
 $8 = global$0 - 128 | 0;
 global$0 = $8;
 glPolygonOffset(Math_fround(Math_fround(1)), Math_fround(Math_fround(1)));
 $11 = HEAP32[HEAP32[11988] + 4 >> 2];
 $12 = HEAP32[HEAP32[$0 >> 2] >> 2];
 $10 = HEAP32[11870];
 BaseGLWidget__transformMat_28_29($8 - -64 | 0, $3);
 BaseGLWidget__transformMat_28_29($8, $3);
 $9 = HEAP32[$10 + 76 >> 2];
 if (($9 | 0) != -1) {
  glUniformMatrix4fv($9 | 0, 1, 0, $8 | 0);
 }
 label$2 : {
  if (!$1) {
   $2 = NoiseSlvProgram__20ShaderProgram__currentt_NoiseSlvProgram__28_29();
   if (!$2) {
    break label$2;
   }
   $1 = Math_imul($12, 152) + $11 | 0;
   $10 = $1;
   $9 = HEAP32[$2 + 196 >> 2];
   if (($9 | 0) != -1) {
    glUniform1i($9 | 0, HEAP32[$10 + 36 >> 2]);
   }
   $1 = $1 + 40 | 0;
   $9 = HEAP32[$2 + 136 >> 2];
   if (($9 | 0) != -1) {
    glUniform3fv($9 | 0, 1, $1 | 0);
   }
   $9 = Math_imul($12, 152) + $11 | 0;
   if (!(HEAP32[$10 + 36 >> 2] == 20 ? !HEAPU8[$9 + 68 | 0] : 0)) {
    $1 = $9 + 52 | 0;
   }
   $9 = HEAP32[$2 + 176 >> 2];
   if (($9 | 0) != -1) {
    glUniform3fv($9 | 0, 1, $1 | 0);
   }
   $1 = HEAP32[$2 + 316 >> 2];
   if (($1 | 0) != -1) {
    glUniform1i($1 | 0, $5 | 0);
   }
   $1 = Math_imul($12, 152) + $11 | 0;
   label$10 : {
    if (!HEAP32[$1 + 12 >> 2]) {
     break label$10;
    }
    glActiveTexture(33984);
    glBindTexture(3553, HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
    $1 = HEAP32[$2 + 156 >> 2];
    if (($1 | 0) == -1) {
     break label$10;
    }
    glUniform1i($1 | 0, 0);
   }
   NoiseSlvProgram__setModelMat_28Mat4_20const__29($2, $3 + 108 | 0);
   label$11 : {
    if (!(HEAPU8[$10 + 36 | 0] & 16)) {
     break label$11;
    }
    $3 = HEAP32[$0 >> 2];
    $1 = HEAP32[$3 + 312 >> 2];
    $5 = HEAP32[$3 + 308 >> 2];
    HEAPF32[$8 + 8 >> 2] = $4 ? Math_fround(1) : Math_fround(0);
    HEAP32[$8 >> 2] = $5;
    HEAP32[$8 + 4 >> 2] = $1;
    $1 = HEAP32[$2 + 276 >> 2];
    if (($1 | 0) != -1) {
     glUniform3fv($1 | 0, 1, $8 | 0);
     $3 = HEAP32[$0 >> 2];
    }
    $13 = HEAPF32[$3 + 316 >> 2];
    HEAPF32[$8 + 4 >> 2] = HEAPF32[$3 + 320 >> 2] / Math_fround(5);
    HEAPF32[$8 >> 2] = $13 / Math_fround(5);
    $1 = HEAP32[$2 + 336 >> 2];
    if (($1 | 0) != -1) {
     glUniform2fv($1 | 0, 1, $8 | 0);
    }
    $1 = $6 + -1 | 0;
    if ($1 >>> 0 <= 6) {
     label$15 : {
      switch ($1 - 1 | 0) {
      default:
       HEAP32[$8 + 8 >> 2] = 1065353216;
       HEAP32[$8 + 12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = -1082130432;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 1:
       HEAP32[$8 + 8 >> 2] = -1082130432;
       HEAP32[$8 + 12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 1065353216;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 2:
       HEAP32[$8 + 8 >> 2] = 1065353216;
       HEAP32[$8 + 12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 1065353216;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 4:
       HEAP32[$8 + 8 >> 2] = -1082130432;
       HEAP32[$8 + 12 >> 2] = 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = -1082130432;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 0:
       HEAP32[$8 + 8 >> 2] = 0;
       HEAP32[$8 + 12 >> 2] = -1082130432;
       HEAP32[$8 >> 2] = -1082130432;
       HEAP32[$8 + 4 >> 2] = 0;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 3:
       HEAP32[$8 + 8 >> 2] = 0;
       HEAP32[$8 + 12 >> 2] = 1065353216;
       HEAP32[$8 >> 2] = -1082130432;
       HEAP32[$8 + 4 >> 2] = 0;
       $1 = HEAP32[$2 + 356 >> 2];
       if (($1 | 0) == -1) {
        break label$11;
       }
       glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
       break label$11;
      case 5:
       break label$15;
      }
     }
     HEAP32[$8 + 8 >> 2] = 0;
     HEAP32[$8 + 12 >> 2] = -1082130432;
     HEAP32[$8 >> 2] = 1065353216;
     HEAP32[$8 + 4 >> 2] = 0;
     $1 = HEAP32[$2 + 356 >> 2];
     if (($1 | 0) == -1) {
      break label$11;
     }
     glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
     break label$11;
    }
    HEAP32[$8 + 8 >> 2] = 0;
    HEAP32[$8 + 12 >> 2] = 1065353216;
    HEAP32[$8 >> 2] = 1065353216;
    HEAP32[$8 + 4 >> 2] = 0;
    $1 = HEAP32[$2 + 356 >> 2];
    if (($1 | 0) == -1) {
     break label$11;
    }
    glUniformMatrix2fv($1 | 0, 1, 0, $8 | 0);
   }
   $1 = HEAP32[$2 + 376 >> 2];
   if (($1 | 0) == -1) {
    break label$2;
   }
   glUniform1f($1 | 0, Math_fround(HEAP32[(Math_imul($12, 152) + $11 | 0) + 64 >> 2] > 0 ? $7 ? Math_fround(1) : Math_fround(-1) : Math_fround(0)));
   break label$2;
  }
  $1 = HEAP32[$10 + 136 >> 2];
  if (($1 | 0) == -1) {
   break label$2;
  }
  glUniform3fv($1 | 0, 1, $2 | 0);
 }
 Mesh__paint_28bool_29_20const(HEAP32[HEAP32[$0 >> 2] + 332 >> 2], 0);
 global$0 = $8 + 128 | 0;
}
function BaseGLWidget__transformMat_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0;
 $24 = HEAP32[$1 + 88 >> 2];
 $2 = global$0 + -64 | 0;
 $3 = $2 + 56 | 0;
 HEAP32[$3 >> 2] = HEAP32[$1 + 84 >> 2];
 HEAP32[$3 + 4 >> 2] = $24;
 $3 = HEAP32[$1 + 80 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$2 + 52 >> 2] = $3;
 $3 = HEAP32[$1 + 72 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$2 + 44 >> 2] = $3;
 $3 = HEAP32[$1 + 64 >> 2];
 HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$2 + 36 >> 2] = $3;
 $3 = HEAP32[$1 + 56 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 52 >> 2];
 HEAP32[$2 + 28 >> 2] = $3;
 $3 = HEAP32[$1 + 48 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$2 + 20 >> 2] = $3;
 $3 = HEAP32[$1 + 40 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$2 + 12 >> 2] = $3;
 $3 = HEAP32[$1 + 32 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $12 = HEAPF32[$1 + 120 >> 2];
 $13 = HEAPF32[$1 + 116 >> 2];
 $14 = HEAPF32[$1 + 112 >> 2];
 $15 = HEAPF32[$1 + 136 >> 2];
 $16 = HEAPF32[$1 + 132 >> 2];
 $17 = HEAPF32[$1 + 124 >> 2];
 $18 = HEAPF32[$1 + 128 >> 2];
 $19 = HEAPF32[$1 + 152 >> 2];
 $20 = HEAPF32[$1 + 148 >> 2];
 $21 = HEAPF32[$1 + 140 >> 2];
 $22 = HEAPF32[$1 + 144 >> 2];
 $8 = HEAPF32[$1 + 168 >> 2];
 $9 = HEAPF32[$1 + 164 >> 2];
 $10 = HEAPF32[$1 + 156 >> 2];
 $11 = HEAPF32[$1 + 160 >> 2];
 $23 = HEAPF32[$1 + 108 >> 2];
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = HEAPF32[$2 >> 2];
 $5 = HEAPF32[$2 + 16 >> 2];
 $6 = HEAPF32[$2 + 32 >> 2];
 $7 = HEAPF32[$2 + 48 >> 2];
 HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10 * $4) + Math_fround(0)) + Math_fround($11 * $5)) + Math_fround($9 * $6)) + Math_fround($8 * $7);
 HEAPF32[$0 + 32 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $4) + Math_fround(0)) + Math_fround($22 * $5)) + Math_fround($20 * $6)) + Math_fround($19 * $7);
 HEAPF32[$0 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $4) + Math_fround(0)) + Math_fround($18 * $5)) + Math_fround($16 * $6)) + Math_fround($15 * $7);
 HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $4) + Math_fround(0)) + Math_fround($14 * $5)) + Math_fround($13 * $6)) + Math_fround($12 * $7);
 $4 = HEAPF32[$2 + 4 >> 2];
 $5 = HEAPF32[$2 + 20 >> 2];
 $6 = HEAPF32[$2 + 36 >> 2];
 $7 = HEAPF32[$2 + 52 >> 2];
 HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10 * $4) + Math_fround(0)) + Math_fround($11 * $5)) + Math_fround($9 * $6)) + Math_fround($8 * $7);
 HEAPF32[$0 + 36 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $4) + Math_fround(0)) + Math_fround($22 * $5)) + Math_fround($20 * $6)) + Math_fround($19 * $7);
 HEAPF32[$0 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $4) + Math_fround(0)) + Math_fround($18 * $5)) + Math_fround($16 * $6)) + Math_fround($15 * $7);
 HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $4) + Math_fround(0)) + Math_fround($14 * $5)) + Math_fround($13 * $6)) + Math_fround($12 * $7);
 $4 = HEAPF32[$2 + 8 >> 2];
 $5 = HEAPF32[$2 + 24 >> 2];
 $6 = HEAPF32[$2 + 40 >> 2];
 $7 = HEAPF32[$2 + 56 >> 2];
 HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10 * $4) + Math_fround(0)) + Math_fround($11 * $5)) + Math_fround($9 * $6)) + Math_fround($8 * $7);
 HEAPF32[$0 + 40 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $4) + Math_fround(0)) + Math_fround($22 * $5)) + Math_fround($20 * $6)) + Math_fround($19 * $7);
 HEAPF32[$0 + 24 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $4) + Math_fround(0)) + Math_fround($18 * $5)) + Math_fround($16 * $6)) + Math_fround($15 * $7);
 HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $4) + Math_fround(0)) + Math_fround($14 * $5)) + Math_fround($13 * $6)) + Math_fround($12 * $7);
 $4 = $10;
 $10 = HEAPF32[$2 + 12 >> 2];
 $5 = $11;
 $11 = HEAPF32[$2 + 28 >> 2];
 $6 = $9;
 $9 = HEAPF32[$2 + 44 >> 2];
 $7 = $8;
 $8 = HEAPF32[$2 + 60 >> 2];
 HEAPF32[$0 + 60 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4 * $10) + Math_fround(0)) + Math_fround($5 * $11)) + Math_fround($6 * $9)) + Math_fround($7 * $8);
 HEAPF32[$0 + 44 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21 * $10) + Math_fround(0)) + Math_fround($22 * $11)) + Math_fround($20 * $9)) + Math_fround($19 * $8);
 HEAPF32[$0 + 28 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17 * $10) + Math_fround(0)) + Math_fround($18 * $11)) + Math_fround($16 * $9)) + Math_fround($15 * $8);
 HEAPF32[$0 + 12 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23 * $10) + Math_fround(0)) + Math_fround($14 * $11)) + Math_fround($13 * $9)) + Math_fround($12 * $8);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
     $2 = HEAP8[$2 | 0];
    } else {
     $2 = 0;
    }
    $2 = $2 << 24 >> 24;
    label$4 : {
     label$5 : {
      if (($2 | 0) == 85) {
       $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
       break label$5;
      }
      if (($2 + -49 & 255) >>> 0 <= 8) {
       $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
       break label$5;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 40382);
      $2 = HEAP32[$4 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 12 >> 2] = $2;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $3 + 8 | 0)) {
       $4 = $0 + 8 | 0;
       $2 = HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 2;
       $1 = $0;
       while (1) {
        $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($1);
        HEAP32[$3 + 16 >> 2] = $0;
        if (!$0) {
         break label$4;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $3 + 16 | 0);
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($1, 69)) {
         continue;
        }
        break;
       }
       $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($3 + 16 | 0, $1, $2);
       $2 = $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($1 + 368 | 0, $3 + 16 | 0);
       break label$2;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
     }
     if ($2) {
      break label$3;
     }
    }
    $0 = 0;
    break label$1;
   }
   $1 = $0;
  }
  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($1, $2);
 }
 global$0 = $3 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 34129);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
   HEAP32[$2 + 52 >> 2] = $3;
   if (!$3) {
    $3 = 0;
    break label$1;
   }
   $1 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
    $1 = HEAPU8[$1 | 0];
   } else {
    $1 = 0;
   }
   if (($1 & 255) == 46) {
    $1 = HEAP32[$0 >> 2];
    $3 = $2 + 40 | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$3 >> 2] = $1;
    $3 = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___29($0 + 368 | 0, $2 + 52 | 0, $3);
    HEAP32[$2 + 52 >> 2] = $3;
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0 ? 0 : $3;
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 34132);
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0)) {
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
   HEAP32[$2 + 52 >> 2] = $1;
   if (!$1) {
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 34137);
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2)) {
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 40 | 0, $0, 0);
   if (HEAP32[$2 + 40 >> 2] == HEAP32[$2 + 44 >> 2] ? $1 : 0) {
    break label$1;
   }
   $1 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
    $1 = HEAPU8[$1 | 0];
   } else {
    $1 = 0;
   }
   if (($1 & 255) == 46) {
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   if (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2]) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 34151, $2 + 52 | 0);
   break label$1;
  }
  $3 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0), wasm2js_i32$2 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
 }
 global$0 = $2 - -64 | 0;
 return $3;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = global$0 - 128 | 0;
 global$0 = $9;
 HEAP32[$9 + 120 >> 2] = $1;
 $11 = ($3 - $2 | 0) / 12 | 0;
 HEAP32[$9 + 16 >> 2] = 269;
 $13 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 8 | 0, 0, $9 + 16 | 0);
 $10 = $9 + 16 | 0;
 label$1 : {
  if ($11 >>> 0 >= 101) {
   $10 = dlmalloc($11);
   if (!$10) {
    break label$1;
   }
   $1 = HEAP32[$13 >> 2];
   HEAP32[$13 >> 2] = $10;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$13 + 4 >> 2]]($1);
   }
  }
  $7 = $10;
  $1 = $2;
  while (1) if (($1 | 0) == ($3 | 0)) {
   label$6 : while (1) {
    label$7 : {
     if (!(bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $9 + 120 | 0) ? $11 : 0)) {
      if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $9 + 120 | 0)) {
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
      }
      break label$7;
     }
     $7 = HEAP32[$0 >> 2];
     $1 = HEAP32[$7 + 12 >> 2];
     label$10 : {
      if (($1 | 0) == HEAP32[$7 + 16 >> 2]) {
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 36 >> 2]]($7) | 0;
       break label$10;
      }
      $1 = HEAP32[$1 >> 2];
     }
     $14 = $1;
     if (!$6) {
      $14 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, $14) | 0;
     }
     $16 = $15 + 1 | 0;
     $17 = 0;
     $7 = $10;
     $1 = $2;
     while (1) if (($1 | 0) == ($3 | 0)) {
      $15 = $16;
      if (!$17) {
       continue label$6;
      }
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
      $7 = $10;
      $1 = $2;
      if ($11 + $12 >>> 0 < 2) {
       continue label$6;
      }
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        continue label$6;
       }
       if (HEAP8[$1 + 11 | 0] < 0) {
        $8 = HEAP32[$1 + 4 >> 2];
       } else {
        $8 = HEAPU8[$1 + 11 | 0];
       }
       if (!(($8 | 0) == ($15 | 0) | HEAPU8[$7 | 0] != 2)) {
        HEAP8[$7 | 0] = 0;
        $12 = $12 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     } else {
      label$20 : {
       if (HEAPU8[$7 | 0] != 1) {
        break label$20;
       }
       if (HEAP8[$1 + 11 | 0] < 0) {
        $8 = HEAP32[$1 >> 2];
       } else {
        $8 = $1;
       }
       $8 = HEAP32[$8 + ($15 << 2) >> 2];
       if (!$6) {
        $8 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, $8) | 0;
       }
       label$23 : {
        if (($14 | 0) == ($8 | 0)) {
         $17 = 1;
         if (HEAP8[$1 + 11 | 0] < 0) {
          $8 = HEAP32[$1 + 4 >> 2];
         } else {
          $8 = HEAPU8[$1 + 11 | 0];
         }
         if (($8 | 0) != ($16 | 0)) {
          break label$20;
         }
         HEAP8[$7 | 0] = 2;
         $12 = $12 + 1 | 0;
         break label$23;
        }
        HEAP8[$7 | 0] = 0;
       }
       $11 = $11 + -1 | 0;
      }
      $7 = $7 + 1 | 0;
      $1 = $1 + 12 | 0;
      continue;
     }
    }
    break;
   }
   label$29 : {
    label$30 : {
     while (1) {
      if (($2 | 0) == ($3 | 0)) {
       break label$30;
      }
      if (HEAPU8[$10 | 0] != 2) {
       $10 = $10 + 1 | 0;
       $2 = $2 + 12 | 0;
       continue;
      }
      break;
     }
     $3 = $2;
     break label$29;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
   }
   $0 = $13;
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = 0;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]]($1);
   }
   global$0 = $9 + 128 | 0;
   return $3;
  } else {
   if (HEAP8[$1 + 11 | 0] < 0) {
    $8 = HEAP32[$1 + 4 >> 2];
   } else {
    $8 = HEAPU8[$1 + 11 | 0];
   }
   label$35 : {
    if ($8) {
     HEAP8[$7 | 0] = 1;
     break label$35;
    }
    HEAP8[$7 | 0] = 2;
    $12 = $12 + 1 | 0;
    $11 = $11 + -1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 label$1 : {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
   HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
   break label$1;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
  $1 = HEAP32[$10 >> 2];
  HEAP8[$2 | 0] = $1;
  HEAP8[$2 + 1 | 0] = $1 >>> 8;
  HEAP8[$2 + 2 | 0] = $1 >>> 16;
  HEAP8[$2 + 3 | 0] = $1 >>> 24;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 HEAP32[$9 >> 2] = $0;
 global$0 = $10 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 85)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 72 | 0, $0);
    if (HEAP32[$1 + 72 >> 2] == HEAP32[$1 + 76 >> 2]) {
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 - -64 | 0, 42620);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($1 + 72 | 0, $1)) {
     $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($1 + 56 | 0, $1 + 72 | 0, 9);
     $3 = $1 + 48 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $2 = $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 32 | 0, $0, HEAP32[$1 + 56 >> 2]);
     $4 = $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 16 | 0, $0 + 4 | 0, HEAP32[$1 + 60 >> 2]);
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 8 | 0, $0);
     $5 = HEAP32[$1 + 12 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 52 >> 2] = $5;
     if (HEAPU8[$4 + 8 | 0]) {
      HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$4 + 4 >> 2];
     }
     if (HEAPU8[$2 + 8 | 0]) {
      HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
     }
     $2 = 0;
     if (HEAP32[$3 >> 2] == HEAP32[$3 + 4 >> 2]) {
      break label$1;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
     HEAP32[$1 + 32 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 32 | 0, $3);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
    HEAP32[$1 + 32 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 32 | 0, $1 + 72 | 0);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   HEAP32[$1 + 32 >> 2] = $3;
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 16 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (!$3) {
    break label$1;
   }
   $2 = $1 + 16 | 0;
   $3 = $1 + 32 | 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$2 >> 2], HEAP32[$3 >> 2]);
   HEAP32[$1 + 16 >> 2] = $2;
   break label$1;
  }
  $2 = 0;
 }
 global$0 = $1 + 80 | 0;
 return $2;
}
function CubeDocBase__pushState_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 $3 = HEAP32[11988];
 $1 = HEAP32[$0 + 108 >> 2];
 label$1 : {
  if ($1 >>> 0 < HEAPU32[$0 + 112 >> 2]) {
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = -1;
   $5 = HEAP32[$0 + 108 >> 2] + 32 | 0;
   HEAP32[$0 + 108 >> 2] = $5;
   break label$1;
  }
  void_20std____2__vector_CubeDocBase__DocState_2c_20std____2__allocator_CubeDocBase__DocState__20_____emplace_back_slow_path___28_29($0 + 104 | 0);
  $5 = HEAP32[$0 + 108 >> 2];
 }
 $1 = $5 + -32 | 0;
 $10 = $1;
 label$3 : {
  label$4 : {
   $2 = HEAP32[$1 >> 2];
   $4 = (HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2] | 0) / 652 | 0;
   label$5 : {
    if (HEAP32[$1 + 8 >> 2] - $2 >> 2 >>> 0 >= $4 >>> 0) {
     break label$5;
    }
    if ($4 >>> 0 >= 1073741824) {
     break label$4;
    }
    $7 = $5 + -28 | 0;
    $6 = HEAP32[$7 >> 2];
    $9 = $4 << 2;
    $4 = operator_20new_28unsigned_20long_29($9);
    $9 = $4 + $9 | 0;
    $6 = $6 - $2 | 0;
    $11 = $6 + $4 | 0;
    if (($6 | 0) >= 1) {
     memcpy($4, $2, $6);
    }
    HEAP32[$1 >> 2] = $4;
    HEAP32[$7 >> 2] = $11;
    HEAP32[$10 + 8 >> 2] = $9;
    if (!$2) {
     break label$5;
    }
    dlfree($2);
   }
   $2 = HEAP32[$3 + 16 >> 2];
   $6 = HEAP32[$3 + 20 >> 2];
   if (($2 | 0) == ($6 | 0)) {
    break label$3;
   }
   $3 = $5 + -28 | 0;
   while (1) {
    $7 = HEAP32[$2 + 348 >> 2];
    HEAP32[$8 + 12 >> 2] = $7;
    $4 = HEAP32[$3 >> 2];
    label$8 : {
     if ($4 >>> 0 < HEAPU32[$10 + 8 >> 2]) {
      HEAP32[$4 >> 2] = $7;
      HEAP32[$3 >> 2] = $4 + 4;
      break label$8;
     }
     void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1, $8 + 12 | 0);
    }
    HEAP32[$2 + 348 >> 2] = 0;
    $2 = $2 + 652 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   break label$3;
  }
  std____2____throw_length_error_28char_20const__29(15792);
  abort();
 }
 $1 = HEAP32[$0 + 116 >> 2];
 $2 = HEAP32[$0 + 120 >> 2];
 if ($2) {
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
 }
 HEAP32[$5 + -20 >> 2] = $1;
 $3 = $5 + -16 | 0;
 $1 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $2;
 label$11 : {
  if (!$1) {
   break label$11;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$11;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 HEAP32[$0 + 116 >> 2] = 0;
 $1 = HEAP32[$0 + 120 >> 2];
 HEAP32[$0 + 120 >> 2] = 0;
 label$12 : {
  if (!$1) {
   break label$12;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$12;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $2 = HEAP32[$0 + 128 >> 2];
 HEAP32[$0 + 128 >> 2] = 0;
 $3 = $5 + -8 | 0;
 $1 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $2;
 if ($1) {
  Shape___Shape_28_29($1 + 375140 | 0);
  $2 = HEAP32[$1 + 28 >> 2];
  if ($2) {
   dlfree($2);
  }
  dlfree($1);
 }
 $3 = operator_20new_28unsigned_20long_29(375336);
 $1 = BuildWorld__BuildWorld_28_29($3);
 $2 = HEAP32[$0 + 128 >> 2];
 HEAP32[$0 + 128 >> 2] = $3;
 if ($2) {
  Shape___Shape_28_29($2 + 375140 | 0);
  $1 = HEAP32[$2 + 28 >> 2];
  if ($1) {
   dlfree($1);
  }
  dlfree($2);
  $1 = HEAP32[$0 + 128 >> 2];
 }
 HEAP8[$1 + 375332 | 0] = 0;
 HEAP16[$1 + 375136 >> 1] = 1;
 HEAP32[$1 + 8 >> 2] = 50;
 HEAP32[$1 >> 2] = 50;
 HEAP32[$1 + 4 >> 2] = 50;
 BuildWorld__clean_28BuildWorld__ECleanMethod_29($1, 0);
 $2 = HEAP32[$1 + 24 >> 2];
 $3 = Math_imul($2, HEAP32[$1 + 20 >> 2]);
 if (($3 | 0) >= 1) {
  $2 = 0;
  while (1) {
   HEAP8[HEAP32[$1 + 28 >> 2] + $2 | 0] = 0;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  $2 = HEAP32[$1 + 24 >> 2];
 }
 $2 = HEAP32[$1 + 28 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2] + $2 | 0, 24) | 0;
 HEAP8[$2 + 24 | 0] = HEAPU8[$2 + 24 | 0] | 1;
 HEAP8[$1 + 313860 | 0] = 9;
 HEAP8[$1 + 311360 | 0] = 10;
 HEAP8[$1 + 188860 | 0] = 9;
 HEAP8[$1 + 186360 | 0] = 9;
 HEAP8[$1 + 63860 | 0] = 9;
 HEAP8[$1 + 61360 | 0] = 9;
 HEAP8[$1 + 36 | 0] = 1;
 HEAP32[$1 + 32 >> 2] = 6;
 BuildWorld__reClacLimits_28_29($1);
 $2 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = 0;
 $3 = $5 + -12 | 0;
 $1 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $2;
 if ($1) {
  std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($1);
 }
 $1 = operator_20new_28unsigned_20long_29(24);
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP8[$1 + 20 | 0] = 0;
 $2 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = $1;
 if ($2) {
  std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($2);
 }
 HEAP32[$5 + -4 >> 2] = HEAP32[$0 + 132 >> 2];
 HEAP32[$0 + 132 >> 2] = -1;
 HEAP32[$0 + 136 >> 2] = -1;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 1, 0, 0) | 0;
 global$0 = $8 + 16 | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 384 | 0;
 global$0 = $5;
 HEAP32[$5 + 368 >> 2] = $1;
 HEAP32[$5 + 376 >> 2] = $0;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 216 | 0, $2, $5 + 240 | 0, $5 + 236 | 0, $5 + 232 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 200 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 196 >> 2] = $0;
 HEAP32[$5 + 28 >> 2] = $5 + 32;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP8[$5 + 23 | 0] = 1;
 HEAP8[$5 + 22 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 376 | 0, $5 + 368 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 196 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 196 >> 2] = $2 + $0;
   }
   $2 = HEAP32[$5 + 376 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($2, $5 + 23 | 0, $5 + 22 | 0, $0, $5 + 196 | 0, HEAP32[$5 + 236 >> 2], HEAP32[$5 + 232 >> 2], $5 + 216 | 0, $5 + 32 | 0, $5 + 28 | 0, $5 + 24 | 0, $5 + 240 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 376 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 227 | 0] < 0) {
  $2 = HEAP32[$5 + 220 >> 2];
 } else {
  $2 = HEAPU8[$5 + 227 | 0];
 }
 label$20 : {
  if (!$2 | !HEAPU8[$5 + 23 | 0]) {
   break label$20;
  }
  $2 = HEAP32[$5 + 28 >> 2];
  if (($2 - ($5 + 32 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 28 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 24 >> 2];
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($5, $0, HEAP32[$5 + 196 >> 2], $3);
 $0 = HEAP32[$5 >> 2];
 $2 = HEAP32[$5 + 4 >> 2];
 $6 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = $6;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $2;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 216 | 0, $5 + 32 | 0, HEAP32[$5 + 28 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 376 | 0, $5 + 368 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 376 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 216 | 0);
 global$0 = $5 + 384 | 0;
 return $0;
}
function std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 label$1 : {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP8[$3 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
   HEAP8[$4 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
   break label$1;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
  $1 = HEAP32[$10 >> 2];
  HEAP8[$2 | 0] = $1;
  HEAP8[$2 + 1 | 0] = $1 >>> 8;
  HEAP8[$2 + 2 | 0] = $1 >>> 16;
  HEAP8[$2 + 3 | 0] = $1 >>> 24;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  HEAP8[$3 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  HEAP8[$4 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 HEAP32[$9 >> 2] = $0;
 global$0 = $10 + 16 | 0;
}
function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $8 = wasm2js_scratch_load_i32(0) | 0;
 label$1 : {
  label$2 : {
   $4 = $3;
   $3 = $4;
   $6 = $4 & 2147483647;
   label$3 : {
    if ($6 >>> 0 <= 1074752122) {
     if (($3 & 1048575) == 598523) {
      break label$3;
     }
     if ($6 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $8 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6.077100506506192e-11;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $8 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
     $3 = -2;
     break label$1;
    }
    if ($6 >>> 0 <= 1075594811) {
     if ($6 >>> 0 <= 1075183036) {
      if (($6 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $8 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
      $3 = -3;
      break label$1;
     }
     if (($6 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $8 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
     $3 = -4;
     break label$1;
    }
    if ($6 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $9 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $2 = $0 + $9 * -1.5707963267341256;
   $7 = $9 * 6.077100506506192e-11;
   $0 = $2 - $7;
   HEAPF64[$1 >> 3] = $0;
   $4 = $6 >>> 20;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $8 = ($4 - ($3 >>> 20 & 2047) | 0) < 17;
   if (Math_abs($9) < 2147483648) {
    $3 = ~~$9;
   } else {
    $3 = -2147483648;
   }
   label$14 : {
    if ($8) {
     break label$14;
    }
    $7 = $2;
    $0 = $9 * 6.077100506303966e-11;
    $2 = $2 - $0;
    $7 = $9 * 2.0222662487959506e-21 - ($7 - $2 - $0);
    $0 = $2 - $7;
    HEAPF64[$1 >> 3] = $0;
    $10 = $4;
    wasm2js_scratch_store_f64(+$0);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($10 - ($4 >>> 20 & 2047) | 0) < 50) {
     break label$14;
    }
    $7 = $2;
    $0 = $9 * 2.0222662487111665e-21;
    $2 = $2 - $0;
    $7 = $9 * 8.4784276603689e-32 - ($7 - $2 - $0);
    $0 = $2 - $7;
    HEAPF64[$1 >> 3] = $0;
   }
   HEAPF64[$1 + 8 >> 3] = $2 - $0 - $7;
   break label$1;
  }
  if ($6 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = $0;
   $3 = 0;
   break label$1;
  }
  $3 = $4 & 1048575 | 1096810496;
  wasm2js_scratch_store_i32(0, $8 | 0);
  wasm2js_scratch_store_i32(1, $3 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $3 = 0;
  while (1) {
   $10 = $3;
   $3 = ($5 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $11 = ~~$0;
   } else {
    $11 = -2147483648;
   }
   $2 = +($11 | 0);
   HEAPF64[$3 >> 3] = $2;
   $0 = ($0 - $2) * 16777216;
   $3 = 1;
   if (!$10) {
    continue;
   }
   break;
  }
  HEAPF64[$5 + 32 >> 3] = $0;
  label$20 : {
   if ($0 != 0) {
    $3 = 2;
    break label$20;
   }
   $10 = 1;
   while (1) {
    $3 = $10;
    $10 = $3 + -1 | 0;
    if (HEAPF64[($5 + 16 | 0) + ($3 << 3) >> 3] == 0) {
     continue;
    }
    break;
   }
  }
  $3 = __rem_pio2_large($5 + 16 | 0, $5, ($6 >>> 20) + -1046 | 0, $3 + 1 | 0, 1);
  $0 = HEAPF64[$5 >> 3];
  if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1 ? $8 >>> 0 > 4294967295 ? 0 : 1 : 0) {
   HEAPF64[$1 >> 3] = -$0;
   HEAPF64[$1 + 8 >> 3] = -HEAPF64[$5 + 8 >> 3];
   $3 = 0 - $3 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $0;
  $4 = HEAP32[$5 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $4;
 }
 global$0 = $5 + 48 | 0;
 return $3;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $9 = global$0 - 128 | 0;
 global$0 = $9;
 HEAP32[$9 + 120 >> 2] = $1;
 $11 = ($3 - $2 | 0) / 12 | 0;
 HEAP32[$9 + 16 >> 2] = 269;
 $13 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 8 | 0, 0, $9 + 16 | 0);
 $10 = $9 + 16 | 0;
 label$1 : {
  if ($11 >>> 0 >= 101) {
   $10 = dlmalloc($11);
   if (!$10) {
    break label$1;
   }
   $1 = HEAP32[$13 >> 2];
   HEAP32[$13 >> 2] = $10;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$13 + 4 >> 2]]($1);
   }
  }
  $7 = $10;
  $1 = $2;
  while (1) if (($1 | 0) == ($3 | 0)) {
   label$6 : while (1) {
    label$7 : {
     if (!(bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $9 + 120 | 0) ? $11 : 0)) {
      if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $9 + 120 | 0)) {
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
      }
      break label$7;
     }
     $14 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
     if (!$6) {
      $14 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $14) | 0;
     }
     $17 = $15 + 1 | 0;
     $18 = 0;
     $7 = $10;
     $1 = $2;
     while (1) if (($1 | 0) == ($3 | 0)) {
      $15 = $17;
      if (!$18) {
       continue label$6;
      }
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
      $7 = $10;
      $1 = $2;
      if ($11 + $12 >>> 0 < 2) {
       continue label$6;
      }
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        continue label$6;
       }
       if (HEAP8[$1 + 11 | 0] < 0) {
        $8 = HEAP32[$1 + 4 >> 2];
       } else {
        $8 = HEAPU8[$1 + 11 | 0];
       }
       if (!(($8 | 0) == ($15 | 0) | HEAPU8[$7 | 0] != 2)) {
        HEAP8[$7 | 0] = 0;
        $12 = $12 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     } else {
      label$18 : {
       if (HEAPU8[$7 | 0] != 1) {
        break label$18;
       }
       if (HEAP8[$1 + 11 | 0] < 0) {
        $8 = HEAP32[$1 >> 2];
       } else {
        $8 = $1;
       }
       $16 = HEAP8[$8 + $15 | 0];
       $8 = $14 & 255;
       if (!$6) {
        $16 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $16) | 0;
       }
       label$21 : {
        if (($16 & 255) == ($8 | 0)) {
         $18 = 1;
         if (HEAP8[$1 + 11 | 0] < 0) {
          $8 = HEAP32[$1 + 4 >> 2];
         } else {
          $8 = HEAPU8[$1 + 11 | 0];
         }
         if (($8 | 0) != ($17 | 0)) {
          break label$18;
         }
         HEAP8[$7 | 0] = 2;
         $12 = $12 + 1 | 0;
         break label$21;
        }
        HEAP8[$7 | 0] = 0;
       }
       $11 = $11 + -1 | 0;
      }
      $7 = $7 + 1 | 0;
      $1 = $1 + 12 | 0;
      continue;
     }
    }
    break;
   }
   label$27 : {
    label$28 : {
     while (1) {
      if (($2 | 0) == ($3 | 0)) {
       break label$28;
      }
      if (HEAPU8[$10 | 0] != 2) {
       $10 = $10 + 1 | 0;
       $2 = $2 + 12 | 0;
       continue;
      }
      break;
     }
     $3 = $2;
     break label$27;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
   }
   $0 = $13;
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = 0;
   if ($1) {
    FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]]($1);
   }
   global$0 = $9 + 128 | 0;
   return $3;
  } else {
   if (HEAP8[$1 + 11 | 0] < 0) {
    $8 = HEAP32[$1 + 4 >> 2];
   } else {
    $8 = HEAPU8[$1 + 11 | 0];
   }
   label$33 : {
    if ($8) {
     HEAP8[$7 | 0] = 1;
     break label$33;
    }
    HEAP8[$7 | 0] = 2;
    $12 = $12 + 1 | 0;
    $11 = $11 + -1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function MyObject__vectorify_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $1 = HEAP32[$0 + 60 >> 2] + HEAP32[$0 + 80 >> 2] | 0;
 HEAP32[$0 + 20 >> 2] = $1;
 $2 = $0;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3) {
  dlfree($3);
  $1 = HEAP32[$0 + 20 >> 2];
 }
 $1 = operator_20new_28unsigned_20long_29(($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2);
 HEAP32[$2 + 8 >> 2] = $1;
 $2 = HEAP32[$0 + 76 >> 2];
 label$3 : {
  if (!$2) {
   $1 = 0;
   break label$3;
  }
  HEAP32[$1 >> 2] = HEAP32[$2 + 8 >> 2];
  $1 = 1;
  $2 = HEAP32[$2 >> 2];
  if (!$2) {
   break label$3;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 8 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 + 8 >> 2];
   $1 = $1 + 1 | 0;
   $2 = HEAP32[$2 >> 2];
   if ($2) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[$0 + 80 >> 2]) {
  $2 = HEAP32[$0 + 76 >> 2];
  if ($2) {
   while (1) {
    $3 = HEAP32[$2 >> 2];
    dlfree($2);
    $2 = $3;
    if ($2) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 76 >> 2] = 0;
  $3 = HEAP32[$0 + 72 >> 2];
  if ($3) {
   $2 = 0;
   while (1) {
    HEAP32[HEAP32[$0 + 68 >> 2] + ($2 << 2) >> 2] = 0;
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 80 >> 2] = 0;
 }
 $2 = HEAP32[$0 + 56 >> 2];
 $3 = $0 + 52 | 0;
 if (($2 | 0) != ($3 | 0)) {
  while (1) {
   HEAP32[HEAP32[$0 + 8 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 + 8 >> 2];
   $1 = $1 + 1 | 0;
   $2 = HEAP32[$2 + 4 >> 2];
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 label$13 : {
  if (!HEAP32[$0 + 60 >> 2]) {
   break label$13;
  }
  $1 = HEAP32[$0 + 56 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$0 + 52 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 60 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$13;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  dlfree($1);
 }
 $3 = HEAP32[$0 + 36 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 $2 = operator_20new_28unsigned_20long_29(($3 | 0) != ($3 & 1073741823) ? -1 : $3 << 2);
 HEAP32[$0 >> 2] = $2;
 $4 = $0 + 28 | 0;
 $1 = HEAP32[$0 + 32 >> 2];
 label$16 : {
  if (($4 | 0) == ($1 | 0)) {
   break label$16;
  }
  HEAP32[$2 >> 2] = HEAP32[$1 + 8 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  if (($4 | 0) == ($1 | 0)) {
   break label$16;
  }
  $2 = 0;
  while (1) {
   $2 = $2 + 1 | 0;
   HEAP32[HEAP32[$0 >> 2] + ($2 << 2) >> 2] = HEAP32[$1 + 8 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 label$18 : {
  if (!$3) {
   break label$18;
  }
  $1 = HEAP32[$0 + 32 >> 2];
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$0 + 28 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = 0;
  if (($1 | 0) == ($4 | 0)) {
   break label$18;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  dlfree($1);
 }
 $3 = HEAP32[$0 + 48 >> 2];
 HEAP32[$0 + 16 >> 2] = $3;
 $2 = operator_20new_28unsigned_20long_29((wasm2js_i32$0 = -1, wasm2js_i32$1 = __wasm_i64_mul($3, 0, 24, 0), wasm2js_i32$2 = i64toi32_i32$HIGH_BITS, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 if ($3) {
  $3 = $2 + Math_imul($3, 24) | 0;
  $1 = $2;
  while (1) {
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $1 = $1 + 24 | 0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 4 >> 2] = $2;
 $1 = HEAP32[$0 + 44 >> 2];
 $3 = $0 + 40 | 0;
 label$23 : {
  if (($1 | 0) == ($3 | 0)) {
   break label$23;
  }
  $4 = HEAP32[$1 + 12 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $4 = HEAP32[$1 + 28 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $4 = HEAP32[$1 + 20 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $1 = HEAP32[$1 + 4 >> 2];
  if (($3 | 0) == ($1 | 0)) {
   break label$23;
  }
  $2 = 0;
  while (1) {
   $5 = HEAP32[$1 + 12 >> 2];
   $2 = $2 + 1 | 0;
   $4 = HEAP32[$0 + 4 >> 2] + Math_imul($2, 24) | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $5 = HEAP32[$1 + 28 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$4 + 20 >> 2] = $5;
   $5 = HEAP32[$1 + 20 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 12 >> 2] = $5;
   $1 = HEAP32[$1 + 4 >> 2];
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 label$25 : {
  if (!HEAP32[$0 + 48 >> 2]) {
   break label$25;
  }
  $1 = HEAP32[$0 + 44 >> 2];
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$0 + 40 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 48 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$25;
  }
  while (1) {
   $0 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 37016);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 12 >> 2] = $3;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($1 + 24 | 0, $0 + 360 | 0, 0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 36 >> 2] = $3;
  if (HEAPU8[$2 + 5 | 0]) {
   HEAP8[HEAP32[$2 >> 2]] = HEAPU8[$2 + 4 | 0];
  }
  if (!$3) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   $2 = $0 + 8 | 0;
   $3 = HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 2;
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 24 >> 2] = $4;
     if (!$4) {
      break label$1;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 24 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 24 | 0, $0, $3);
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 36 | 0, $1 + 24 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 20 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($1 + 24 | 0, $0, $1 + 20 | 0, $1 + 24 | 0);
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 36 | 0, $1 + 24 | 0);
 }
 global$0 = $1 + 48 | 0;
 return $5;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 352 | 0;
 global$0 = $5;
 HEAP32[$5 + 336 >> 2] = $1;
 HEAP32[$5 + 344 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 $9 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 344 | 0, $5 + 336 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   $2 = HEAP32[$5 + 344 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($2, $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $9)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 344 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$20 : {
  if (!$2) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 344 | 0, $5 + 336 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 352 | 0;
 return $1;
}
function Mat4__translate_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
 $14 = HEAP32[$0 + 12 >> 2];
 $4 = global$0 - 128 | 0;
 $5 = $4 + 8 | 0;
 HEAP32[$5 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$5 + 4 >> 2] = $14;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$4 + 20 >> 2] = $5;
 $5 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$4 + 28 >> 2] = $5;
 $5 = HEAP32[$0 + 36 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$4 + 36 >> 2] = $5;
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$4 + 44 >> 2] = $5;
 $5 = HEAP32[$0 + 52 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$4 + 52 >> 2] = $5;
 $5 = HEAP32[$0 + 60 >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$4 + 60 >> 2] = $5;
 $5 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 HEAP32[$4 + 76 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 0;
 HEAP32[$4 + 84 >> 2] = 0;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP32[$4 + 92 >> 2] = 0;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 100 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 HEAP32[$4 + 108 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = 0;
 HEAP32[$4 + 116 >> 2] = 0;
 HEAP32[$4 + 120 >> 2] = 0;
 HEAP32[$4 + 124 >> 2] = 0;
 $6 = HEAPF32[$4 >> 2];
 $7 = HEAPF32[$4 + 16 >> 2];
 $10 = Math_fround($7 * Math_fround(0));
 $8 = HEAPF32[$4 + 32 >> 2];
 $11 = Math_fround($8 * Math_fround(0));
 $12 = HEAPF32[$4 + 48 >> 2];
 $9 = Math_fround($12 * Math_fround(0));
 HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround(Math_fround($6 + Math_fround(0)) + $10) + $11) + $9;
 HEAPF32[$4 + 112 >> 2] = $12 + Math_fround(Math_fround(Math_fround(Math_fround($6 * $1) + Math_fround(0)) + Math_fround($7 * $2)) + Math_fround($8 * $3));
 $6 = Math_fround(Math_fround($6 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$4 + 96 >> 2] = Math_fround($8 + Math_fround($6 + $10)) + $9;
 HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($7 + $6) + $11) + $9;
 $6 = HEAPF32[$4 + 4 >> 2];
 $7 = HEAPF32[$4 + 20 >> 2];
 $10 = Math_fround($7 * Math_fround(0));
 $8 = HEAPF32[$4 + 36 >> 2];
 $11 = Math_fround($8 * Math_fround(0));
 $12 = HEAPF32[$4 + 52 >> 2];
 $9 = Math_fround($12 * Math_fround(0));
 HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround(Math_fround($6 + Math_fround(0)) + $10) + $11) + $9;
 $13 = Math_fround(Math_fround($6 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$4 + 100 >> 2] = Math_fround($8 + Math_fround($13 + $10)) + $9;
 HEAPF32[$4 + 84 >> 2] = Math_fround(Math_fround($7 + $13) + $11) + $9;
 HEAPF32[$4 + 116 >> 2] = $12 + Math_fround(Math_fround(Math_fround(Math_fround($6 * $1) + Math_fround(0)) + Math_fround($7 * $2)) + Math_fround($8 * $3));
 $6 = HEAPF32[$4 + 8 >> 2];
 $7 = HEAPF32[$4 + 24 >> 2];
 $10 = Math_fround($7 * Math_fround(0));
 $8 = HEAPF32[$4 + 40 >> 2];
 $11 = Math_fround($8 * Math_fround(0));
 $12 = HEAPF32[$4 + 56 >> 2];
 $9 = Math_fround($12 * Math_fround(0));
 HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround(Math_fround($6 + Math_fround(0)) + $10) + $11) + $9;
 HEAPF32[$4 + 120 >> 2] = $12 + Math_fround(Math_fround(Math_fround(Math_fround($6 * $1) + Math_fround(0)) + Math_fround($7 * $2)) + Math_fround($8 * $3));
 $6 = Math_fround(Math_fround($6 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$4 + 104 >> 2] = Math_fround($8 + Math_fround($6 + $10)) + $9;
 HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($7 + $6) + $11) + $9;
 $6 = HEAPF32[$4 + 12 >> 2];
 $7 = HEAPF32[$4 + 28 >> 2];
 $10 = Math_fround($7 * Math_fround(0));
 $8 = HEAPF32[$4 + 44 >> 2];
 $11 = Math_fround($8 * Math_fround(0));
 $12 = HEAPF32[$4 + 60 >> 2];
 $9 = Math_fround($12 * Math_fround(0));
 HEAPF32[$4 + 76 >> 2] = Math_fround(Math_fround(Math_fround($6 + Math_fround(0)) + $10) + $11) + $9;
 $13 = Math_fround(Math_fround($6 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$4 + 92 >> 2] = Math_fround(Math_fround($7 + $13) + $11) + $9;
 HEAPF32[$4 + 108 >> 2] = Math_fround($8 + Math_fround($13 + $10)) + $9;
 HEAPF32[$4 + 124 >> 2] = $12 + Math_fround(Math_fround(Math_fround(Math_fround($6 * $1) + Math_fround(0)) + Math_fround($7 * $2)) + Math_fround($8 * $3));
 $5 = HEAP32[$4 + 116 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$4 + 112 >> 2];
 HEAP32[$0 + 52 >> 2] = $5;
 $5 = HEAP32[$4 + 108 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$4 + 104 >> 2];
 HEAP32[$0 + 44 >> 2] = $5;
 $5 = HEAP32[$4 + 100 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$4 + 96 >> 2];
 HEAP32[$0 + 36 >> 2] = $5;
 $5 = HEAP32[$4 + 92 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 88 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 $5 = HEAP32[$4 + 76 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 72 >> 2];
 HEAP32[$0 + 12 >> 2] = $5;
 $5 = HEAP32[$4 + 124 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$4 + 120 >> 2];
 HEAP32[$0 + 60 >> 2] = $5;
 $5 = HEAP32[$4 + 84 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 80 >> 2];
 HEAP32[$0 + 20 >> 2] = $5;
 $5 = HEAP32[$4 + 68 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 + 64 >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
}
function pow($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 wasm2js_scratch_store_f64(+$0);
 $4 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 $7 = $4;
 label$1 : {
  label$2 : {
   label$3 : {
    $5 = $4 & 2147483647;
    if ($2 | $5) {
     if (!(!$2 | ($5 | 0) != 2146435072 ? $5 >>> 0 <= 2146435072 : 0)) {
      return 3 + $0;
     }
     label$7 : {
      if ($2) {
       break label$7;
      }
      if (($5 | 0) == 2146435072) {
       return ($4 | 0) > -1 ? $0 : 0;
      }
      if (($5 | 0) == 1072693248) {
       if (($4 | 0) > -1) {
        return 3;
       }
       return .3333333333333333;
      }
      if (($4 | 0) == 1073741824) {
       return 9;
      }
      if (($4 | 0) != 1071644672) {
       break label$7;
      }
      return 1.7320508075688772;
     }
     if ($5 >>> 0 >= 1105199105) {
      break label$1;
     }
     $9 = HEAPF64[2611];
     $6 = HEAPF64[2607];
     $8 = 1.5 - $6;
     $10 = 1 / ($6 + 1.5);
     $3 = $8 * $10;
     wasm2js_scratch_store_f64(+$3);
     $2 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $2 | 0);
     $1 = +wasm2js_scratch_load_f64();
     $11 = $1;
     $12 = $1 * $1;
     $6 = $10 * ($8 - $1 * 3 - $1 * (1.5 - (3 - $6)));
     $8 = ($3 + $1) * $6;
     $1 = $3 * $3;
     $8 = $8 + $1 * $1 * ($1 * ($1 * ($1 * ($1 * ($1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
     wasm2js_scratch_store_f64(+($12 + 3 + $8));
     $2 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $2 | 0);
     $1 = +wasm2js_scratch_load_f64();
     $10 = $11 * $1;
     $3 = $6 * $1 + $3 * ($8 - ($1 + -3 - $12));
     wasm2js_scratch_store_f64(+($10 + $3));
     $2 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $2 | 0);
     $1 = +wasm2js_scratch_load_f64();
     $6 = $1 * .9617967009544373;
     $8 = HEAPF64[2609] + (($3 - ($1 - $10)) * .9617966939259756 + $1 * -7.028461650952758e-9);
     wasm2js_scratch_store_f64(+($9 + ($6 + $8) + 1));
     $2 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $2 | 0);
     $3 = +wasm2js_scratch_load_f64();
     $6 = $3 - 1 - $9 - $6;
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $7 | 0);
     $9 = +wasm2js_scratch_load_f64();
     $1 = $3 * $9;
     $0 = ($8 - $6) * $0 + ($0 - $9) * $3;
     $3 = $1 + $0;
     wasm2js_scratch_store_f64(+$3);
     $7 = wasm2js_scratch_load_i32(1) | 0;
     $5 = wasm2js_scratch_load_i32(0) | 0;
     label$12 : {
      $4 = $7;
      $7 = $4;
      if (($4 | 0) >= 1083179008) {
       if ($5 | $7 + -1083179008) {
        break label$3;
       }
       if (!($0 + 8.008566259537294e-17 > $3 - $1)) {
        break label$12;
       }
       break label$3;
      }
      if (($7 & 2147482624) >>> 0 < 1083231232) {
       break label$12;
      }
      if ($5 | $7 + 1064252416) {
       break label$2;
      }
      if (!($0 <= $3 - $1)) {
       break label$12;
      }
      break label$2;
     }
     $5 = 0;
     $2 = $7 & 2147483647;
     if ($2 >>> 0 >= 1071644673) {
      $2 = $7 + (1048576 >>> ($2 >>> 20) + -1022) | 0;
      $4 = $2 >>> 20 & 2047;
      $5 = ($2 & 1048575 | 1048576) >>> 1043 - $4;
      $5 = ($7 | 0) < 0 ? 0 - $5 | 0 : $5;
      $2 = $2 & -1048576 >> $4 + -1023;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $2 | 0);
      $1 = $1 - +wasm2js_scratch_load_f64();
      wasm2js_scratch_store_f64(+($0 + $1));
      $2 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
     } else {
      $2 = $4;
     }
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $2 | 0);
     $3 = +wasm2js_scratch_load_f64();
     $6 = $3 * .6931471824645996;
     $3 = ($0 - ($3 - $1)) * .6931471805599453 + $3 * -1.904654299957768e-9;
     $0 = $6 + $3;
     $1 = $0 * $0;
     $1 = $0 - $1 * ($1 * ($1 * ($1 * ($1 * 4.1381367970572385e-8 + -16533902205465252e-22) + 6613756321437934e-20) + -.0027777777777015593) + .16666666666666602);
     $11 = $0 * $1 / ($1 + -2);
     $1 = $3 - ($0 - $6);
     $0 = $0 - ($11 - ($1 + $0 * $1)) + 1;
     wasm2js_scratch_store_f64(+$0);
     $4 = wasm2js_scratch_load_i32(1) | 0;
     $2 = wasm2js_scratch_load_i32(0) | 0;
     $4 = ($5 << 20) + $4 | 0;
     label$14 : {
      if (($4 | 0) <= 1048575) {
       $0 = scalbn($0, $5);
       break label$14;
      }
      $7 = $2;
      $2 = $4;
      $4 = 0;
      wasm2js_scratch_store_i32(0, $4 | $7);
      wasm2js_scratch_store_i32(1, $2 | 0);
      $0 = +wasm2js_scratch_load_f64();
     }
     $0 = 1 * $0;
    } else {
     $0 = 1;
    }
    return $0;
   }
   return infinity;
  }
  return 0;
 }
 return ($4 | 0) > 0 ? infinity : 0;
}
function Cube__initPuttgr_28SolveContext__2c_20SlvCube__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0;
 $14 = global$0 - 656 | 0;
 global$0 = $14;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP8[$1 + 68 | 0] = 0;
 $8 = $1;
 $9 = HEAP32[$0 + 8 >> 2];
 $4 = HEAP32[$0 + 36 >> 2];
 $16 = Math_fround(Math_floor(+Math_fround(+(Math_imul($9, HEAP32[$4 + 12 >> 2]) | 0) / 100) + .5));
 label$1 : {
  if (Math_fround(Math_abs($16)) < Math_fround(2147483648)) {
   $3 = ~~$16;
   break label$1;
  }
  $3 = -2147483648;
 }
 HEAP32[$8 + 80 >> 2] = $3;
 $5 = HEAP32[$4 + 12 >> 2];
 HEAP32[$1 + 40 >> 2] = 1;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP8[$1 + 48 | 0] = 0;
 $3 = ($5 | 0) < ($3 | 0) ? $5 : $3;
 HEAP32[$1 + 80 >> 2] = ($9 | 0) > 0 ? ($3 | 0) > 1 ? $3 : 1 : $3;
 HEAP32[$1 + 88 >> 2] = std____2__chrono__steady_clock__now_28_29();
 HEAP32[$1 + 92 >> 2] = i64toi32_i32$HIGH_BITS;
 Cube__clear_28int_29($0);
 HEAP32[11536] = time(0);
 label$3 : {
  if (!$2) {
   break label$3;
  }
  while (1) {
   $3 = HEAP32[$2 >> 2] + ($11 << 3) | 0;
   $13 = HEAP32[$3 >> 2];
   if (($13 | 0) == -1) {
    break label$3;
   }
   $9 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$0 + 60 >> 2];
   $3 = HEAP32[11988];
   $8 = $3;
   $17 = Math_imul($13, 652);
   $12 = memcpy($14, $17 + HEAP32[$3 + 16 >> 2] | 0, 652);
   $18 = Math_imul($11, 52);
   $5 = $5 + $18 | 0;
   label$5 : {
    label$6 : {
     $4 = HEAP32[$0 + 32 >> 2];
     $10 = HEAP32[$4 + 28 >> 2];
     $4 = HEAP32[$4 + 24 >> 2];
     if (($10 | 0) == ($4 | 0)) {
      break label$6;
     }
     $15 = $10 - $4 >> 4;
     $10 = 0;
     $7 = HEAP32[$12 + 340 >> 2];
     while (1) {
      $6 = $4 + ($10 << 4) | 0;
      if (($7 | 0) != HEAP32[$6 >> 2]) {
       $10 = $10 + 1 | 0;
       if ($10 >>> 0 < $15 >>> 0) {
        continue;
       }
       break label$6;
      }
      break;
     }
     $4 = HEAP32[$6 + 8 >> 2];
     $6 = HEAP32[$6 + 4 >> 2];
     if (($4 | 0) == ($6 | 0)) {
      break label$6;
     }
     $15 = $4 - $6 >> 3;
     $4 = 0;
     while (1) {
      if (HEAP32[$6 + ($4 << 3) >> 2] != ($13 | 0)) {
       $4 = $4 + 1 | 0;
       if ($4 >>> 0 < $15 >>> 0) {
        continue;
       }
       break label$6;
      }
      break;
     }
     $6 = HEAP32[$3 + 76 >> 2];
     $3 = HEAP32[($17 + HEAP32[$8 + 16 >> 2] | 0) + 344 >> 2];
     label$11 : {
      if (($3 | 0) <= 3) {
       $8 = (($3 + $9 | 0) + 4 | 0) % 4 | 0;
       if (($9 | 0) <= 3) {
        break label$11;
       }
       $8 = (($9 - $3 | 0) % 4 | 0) + 4 | 0;
       break label$11;
      }
      $8 = (($3 + $9 | 0) % 4 | 0) + 4 | 0;
      if (($9 | 0) <= 3) {
       break label$11;
      }
      $8 = (($9 - $3 | 0) + 4 | 0) % 4 | 0;
     }
     $3 = $8;
     $4 = 0;
     $7 = $6 + Math_imul($7, 324) | 0;
     $6 = HEAP32[$7 >> 2];
     label$15 : {
      if (($6 | 0) < 1) {
       break label$15;
      }
      while (1) {
       if (($3 | 0) == HEAP32[($7 + ($4 << 5) | 0) + 32 >> 2]) {
        break label$15;
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) < ($6 | 0)) {
        continue;
       }
       break;
      }
     }
     if (!Cube__makePossibilities2_28int_2c_20ShapePlace__29($0, $11, $5)) {
      break label$6;
     }
     $3 = HEAP32[$5 + 44 >> 2];
     $7 = HEAP32[$5 + 40 >> 2];
     if (($3 | 0) == ($7 | 0)) {
      break label$6;
     }
     $6 = $3 - $7 >> 3;
     $3 = 0;
     while (1) {
      $8 = $7 + ($3 << 3) | 0;
      if (!(HEAP32[$8 + 4 >> 2] == ($4 | 0) ? HEAP32[$8 >> 2] == ($10 | 0) : 0)) {
       $3 = $3 + 1 | 0;
       if ($3 >>> 0 < $6 >>> 0) {
        continue;
       }
       break label$6;
      }
      break;
     }
     $12 = HEAP32[$5 + 20 >> 2] + ($3 >>> 3 & 536870908) | 0;
     $7 = HEAP32[$12 >> 2];
     $3 = 1 << ($3 & 31);
     if (!($7 & $3)) {
      HEAP32[$12 >> 2] = $3 | $7;
      HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     }
     HEAP32[$5 >> 2] = $10;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = HEAP32[$0 + 72 >> 2] + ($10 << 3) | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
     $3 = HEAP32[$0 + 60 >> 2] + $18 | 0;
     $12 = HEAP32[HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + (HEAP32[$3 >> 2] << 4) >> 2];
     $7 = HEAP32[$3 + 4 >> 2];
     $6 = HEAP32[HEAP32[11988] + 76 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     HEAP32[$3 >> 2] = $10;
     Cube__putPicArr_28PicArr_20const__2c_20int_29($0, (($6 + Math_imul($12, 324) | 0) + ($7 << 5) | 0) + 4 | 0, $11);
     HEAP32[$5 + 36 >> 2] = $4;
     HEAP32[$5 + 32 >> 2] = $10;
     HEAP32[$5 + 28 >> 2] = $9;
     HEAP32[$5 + 24 >> 2] = $13;
     break label$5;
    }
    HEAP32[$5 >> 2] = -2;
    HEAP32[$5 + 32 >> 2] = -1;
    HEAP32[$5 + 36 >> 2] = -1;
    HEAP32[$5 + 28 >> 2] = $9;
    HEAP32[$5 + 24 >> 2] = $13;
    HEAP32[$5 + 4 >> 2] = -2;
    Cube__putPicArr_28PicArr_20const__2c_20int_29($0, ($12 + ($9 << 5) | 0) + 40 | 0, $11);
   }
   $11 = $11 + 1 | 0;
   if (($11 | 0) != HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 84 >> 2] = $11;
 global$0 = $14 + 656 | 0;
}
function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 label$1 : {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($2);
   label$3 : {
    if ($1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
   HEAP32[$5 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
   break label$1;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($2);
  label$5 : {
   if ($1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$3 | 0] = $1;
   HEAP8[$3 + 1 | 0] = $1 >>> 8;
   HEAP8[$3 + 2 | 0] = $1 >>> 16;
   HEAP8[$3 + 3 | 0] = $1 >>> 24;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  HEAP32[$5 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 HEAP32[$9 >> 2] = $0;
 global$0 = $10 + 16 | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 352 | 0;
 global$0 = $5;
 HEAP32[$5 + 336 >> 2] = $1;
 HEAP32[$5 + 344 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 $9 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 344 | 0, $5 + 336 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   $2 = HEAP32[$5 + 344 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($2, $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $9)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 344 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$20 : {
  if (!$2) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 344 | 0, $5 + 336 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 352 | 0;
 return $1;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 352 | 0;
 global$0 = $5;
 HEAP32[$5 + 336 >> 2] = $1;
 HEAP32[$5 + 344 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 $9 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 344 | 0, $5 + 336 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   $2 = HEAP32[$5 + 344 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($2, $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $9)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 344 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$20 : {
  if (!$2) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP16[$4 >> 1] = unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 344 | 0, $5 + 336 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 352 | 0;
 return $1;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 352 | 0;
 global$0 = $5;
 HEAP32[$5 + 336 >> 2] = $1;
 HEAP32[$5 + 344 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 $9 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 344 | 0, $5 + 336 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   $2 = HEAP32[$5 + 344 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($2, $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $9)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 344 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$20 : {
  if (!$2) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 344 | 0, $5 + 336 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 352 | 0;
 return $1;
}
function EmscriptenBindingInitializer_my_module__EmscriptenBindingInitializer_my_module_28_29() {
 var $0 = 0, $1 = 0;
 _embind_register_function(2024, 1, 3728, 3732, 3, 4);
 _embind_register_function(2039, 2, 3736, 3744, 5, 6);
 _embind_register_function(2048, 2, 3748, 3756, 7, 8);
 _embind_register_function(2039, 2, 3736, 3744, 5, 6);
 _embind_register_function(2058, 3, 3760, 3772, 9, 10);
 _embind_register_function(2067, 4, 3792, 3808, 11, 12);
 _embind_register_function(2077, 4, 3792, 3808, 11, 13);
 _embind_register_function(2085, 5, 3824, 3844, 14, 15);
 _embind_register_function(2095, 4, 3792, 3808, 11, 16);
 _embind_register_function(2109, 2, 3748, 3756, 7, 17);
 _embind_register_function(2120, 1, 3852, 3856, 18, 19);
 _embind_register_function(2127, 2, 3860, 3756, 20, 21);
 _embind_register_function(2132, 1, 3728, 3732, 3, 22);
 _embind_register_function(2143, 3, 3760, 3772, 9, 23);
 _embind_register_function(2155, 4, 3792, 3808, 11, 24);
 _embind_register_function(2167, 2, 3748, 3756, 7, 25);
 _embind_register_function(2178, 2, 3748, 3756, 7, 26);
 _embind_register_function(2192, 1, 3868, 3872, 27, 28);
 _embind_register_function(2207, 2, 3748, 3756, 7, 29);
 _embind_register_function(2218, 1, 3868, 3872, 27, 30);
 _embind_register_function(2229, 1, 3876, 3732, 31, 32);
 _embind_register_function(2246, 3, 3908, 3772, 33, 34);
 _embind_register_value_object(3928, 2265, 3936, 35, 3872, 36);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 0;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 0;
 _embind_register_value_object_field(3928, 1833, 44476, 3938, 37, $0 | 0, 44476, 3772, 38, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 4;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 4;
 _embind_register_value_object_field(3928, 2271, 44476, 3938, 37, $0 | 0, 44476, 3772, 38, $1 | 0);
 _embind_finalize_value_object(3928);
 _embind_register_value_object(3952, 2273, 3936, 39, 3872, 40);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 0;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 0;
 _embind_register_value_object_field(3952, 2279, 3704, 3938, 41, $0 | 0, 3704, 3772, 42, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 12;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 12;
 _embind_register_value_object_field(3952, 2292, 3704, 3938, 41, $0 | 0, 3704, 3772, 42, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 24;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 24;
 _embind_register_value_object_field(3952, 2306, 3704, 3938, 41, $0 | 0, 3704, 3772, 42, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 36;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 36;
 _embind_register_value_object_field(3952, 2315, 3704, 3938, 41, $0 | 0, 3704, 3772, 42, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 48;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 48;
 _embind_register_value_object_field(3952, 2323, 44476, 3938, 43, $0 | 0, 44476, 3772, 44, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 52;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 52;
 _embind_register_value_object_field(3952, 2332, 44476, 3938, 43, $0 | 0, 44476, 3772, 44, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 56;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 56;
 _embind_register_value_object_field(3952, 2341, 44524, 3960, 45, $0 | 0, 44524, 3964, 46, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 60;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 60;
 _embind_register_value_object_field(3952, 2349, 3928, 3938, 47, $0 | 0, 3928, 3772, 48, $1 | 0);
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 68;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = 68;
 _embind_register_value_object_field(3952, 2359, 44404, 3938, 49, $0 | 0, 44404, 3772, 50, $1 | 0);
 _embind_finalize_value_object(3952);
 _embind_register_function(2368, 4, 3984, 3808, 51, 52);
 _embind_register_function(2390, 3, 4e3, 3772, 53, 54);
 _embind_register_function(2407, 2, 3748, 3756, 7, 55);
 _embind_register_function(2426, 4, 4016, 4032, 56, 57);
 _embind_register_function(2442, 1, 3868, 3872, 27, 58);
 _embind_register_function(2458, 6, 4048, 4072, 59, 60);
 _embind_register_function(2471, 1, 3868, 3872, 27, 61);
 _embind_register_function(2489, 17, 4080, 4160, 62, 63);
 _embind_register_function(2506, 2, 4180, 3938, 64, 65);
 _embind_register_function(2527, 4, 4192, 4032, 66, 67);
 _embind_register_function(2548, 8, 4208, 4240, 68, 69);
 _embind_register_function(2565, 2, 3748, 3756, 7, 70);
 _embind_register_function(2573, 4, 4256, 3808, 71, 72);
 _embind_register_function(2584, 2, 4272, 3756, 73, 74);
 _embind_register_function(2598, 2, 4280, 3938, 75, 76);
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 352 | 0;
 global$0 = $5;
 HEAP32[$5 + 336 >> 2] = $1;
 HEAP32[$5 + 344 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 $9 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 344 | 0, $5 + 336 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   $2 = HEAP32[$5 + 344 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($2, $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $9)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 344 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$20 : {
  if (!$2) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 344 | 0, $5 + 336 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 352 | 0;
 return $1;
}
function Shape__checkCorner_28int_2c_20int_2c_20int_2c_20std____2__vector_Shape__CornerDef_2c_20std____2__allocator_Shape__CornerDef__20___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $5 = global$0 - 288 | 0;
 global$0 = $5;
 HEAP32[$5 + 280 >> 2] = -1;
 HEAP32[$5 + 284 >> 2] = -1;
 HEAP32[$5 + 272 >> 2] = -1;
 HEAP32[$5 + 276 >> 2] = -1;
 HEAP32[$5 + 264 >> 2] = -1;
 HEAP32[$5 + 268 >> 2] = -1;
 HEAP32[$5 + 256 >> 2] = -1;
 HEAP32[$5 + 260 >> 2] = -1;
 HEAP32[$5 + 248 >> 2] = -1;
 HEAP32[$5 + 252 >> 2] = -1;
 HEAP32[$5 + 240 >> 2] = -1;
 HEAP32[$5 + 244 >> 2] = -1;
 HEAP32[$5 + 68 >> 2] = $3;
 HEAP32[$5 - -64 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 $6 = $2 + -4 | 0;
 HEAP32[$5 + 76 >> 2] = $6;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $6;
 HEAP32[$5 + 104 >> 2] = $3;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = 2;
 HEAP32[$5 + 196 >> 2] = 2;
 HEAP32[$5 + 200 >> 2] = 2;
 HEAP32[$5 + 204 >> 2] = 2;
 HEAP32[$5 + 208 >> 2] = 1;
 HEAP32[$5 + 56 >> 2] = $3;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $1;
 $8 = $1 + -4 | 0;
 HEAP32[$5 + 60 >> 2] = $8;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $8;
 HEAP32[$5 + 96 >> 2] = $1;
 $7 = $3 + -4 | 0;
 HEAP32[$5 + 116 >> 2] = $7;
 HEAP32[$5 + 112 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $2;
 HEAP32[$5 + 140 >> 2] = $7;
 HEAP32[$5 + 136 >> 2] = $2;
 HEAP32[$5 + 152 >> 2] = $3;
 HEAP32[$5 + 148 >> 2] = $2;
 HEAP32[$5 + 160 >> 2] = $2;
 HEAP32[$5 + 164 >> 2] = $7;
 HEAP32[$5 + 212 >> 2] = 1;
 HEAP32[$5 + 216 >> 2] = 1;
 HEAP32[$5 + 108 >> 2] = $1;
 HEAP32[$5 + 120 >> 2] = $8;
 HEAP32[$5 + 220 >> 2] = 1;
 HEAP32[$5 + 132 >> 2] = $8;
 HEAP32[$5 + 144 >> 2] = $1;
 HEAP32[$5 + 224 >> 2] = 0;
 HEAP32[$5 + 228 >> 2] = 0;
 HEAP32[$5 + 156 >> 2] = $1;
 HEAP32[$5 + 232 >> 2] = 0;
 HEAP32[$5 + 176 >> 2] = $3;
 HEAP32[$5 + 172 >> 2] = $6;
 HEAP32[$5 + 168 >> 2] = $1;
 HEAP32[$5 + 236 >> 2] = 0;
 HEAP32[$5 + 188 >> 2] = $7;
 HEAP32[$5 + 184 >> 2] = $6;
 HEAP32[$5 + 180 >> 2] = $1;
 $6 = $3;
 $8 = $2;
 $7 = 0;
 while (1) {
  $10 = HEAP32[($5 + 48 | 0) + Math_imul($7, 12) >> 2];
  label$2 : {
   if (($10 | $8 | $6) < 0 | ($10 | 0) >= HEAP32[$0 >> 2] | (($8 | 0) >= HEAP32[$0 + 4 >> 2] | ($6 | 0) >= HEAP32[$0 + 8 >> 2])) {
    break label$2;
   }
   $11 = Math_imul(HEAP32[($5 + 192 | 0) + ($7 << 2) >> 2], 20) + $0 | 0;
   $6 = HEAP16[HEAP32[$11 + 136 >> 2] + ((Math_imul(HEAP32[$11 + 120 >> 2], $8 >>> 2) + ($10 >>> 2) | 0) + Math_imul(HEAP32[$11 + 132 >> 2], $6 >>> 2) << 1) >> 1];
   if (($6 | 0) == -1) {
    break label$2;
   }
   HEAP32[($5 + 240 | 0) + ($9 << 2) >> 2] = $6;
   $9 = $9 + 1 | 0;
  }
  $7 = $7 + 1 | 0;
  if (($7 | 0) != 12) {
   $8 = ($5 + 48 | 0) + Math_imul($7, 12) | 0;
   $6 = HEAP32[$8 + 8 >> 2];
   $8 = HEAP32[$8 + 4 >> 2];
   continue;
  }
  break;
 }
 label$4 : {
  label$5 : {
   if ($9 + -3 >>> 0 <= 3) {
    $6 = $9 << 2;
    memset($6 + ($5 + 240 | 0) | 0, 255, 48 - $6 | 0);
    $7 = 0;
    HEAP32[$5 + 20 >> 2] = 0;
    HEAP32[$5 + 16 >> 2] = $3;
    HEAP32[$5 + 12 >> 2] = $2;
    HEAP32[$5 + 8 >> 2] = $1;
    $6 = HEAP32[$5 + 240 >> 2];
    HEAP32[$5 + 24 >> 2] = $6;
    if (($6 | 0) != -1) {
     HEAP32[$5 + 20 >> 2] = 1;
     $7 = 1;
    }
    $6 = HEAP32[$5 + 244 >> 2];
    HEAP32[$5 + 28 >> 2] = $6;
    if (($6 | 0) != -1) {
     $7 = $7 + 1 | 0;
     HEAP32[$5 + 20 >> 2] = $7;
    }
    $6 = HEAP32[$5 + 248 >> 2];
    HEAP32[$5 + 32 >> 2] = $6;
    if (($6 | 0) != -1) {
     $7 = $7 + 1 | 0;
     HEAP32[$5 + 20 >> 2] = $7;
    }
    $6 = HEAP32[$5 + 252 >> 2];
    HEAP32[$5 + 36 >> 2] = $6;
    if (($6 | 0) != -1) {
     $7 = $7 + 1 | 0;
     HEAP32[$5 + 20 >> 2] = $7;
    }
    $6 = HEAP32[$5 + 256 >> 2];
    HEAP32[$5 + 40 >> 2] = $6;
    if (($6 | 0) != -1) {
     $7 = $7 + 1 | 0;
     HEAP32[$5 + 20 >> 2] = $7;
    }
    $6 = HEAP32[$5 + 260 >> 2];
    HEAP32[$5 + 44 >> 2] = $6;
    if (($6 | 0) != -1) {
     HEAP32[$5 + 20 >> 2] = $7 + 1;
    }
    $6 = HEAP32[$4 + 4 >> 2];
    label$13 : {
     if ($6 >>> 0 < HEAPU32[$4 + 8 >> 2]) {
      HEAP32[$6 + 8 >> 2] = $3;
      HEAP32[$6 + 4 >> 2] = $2;
      HEAP32[$6 >> 2] = $1;
      $1 = HEAP32[$5 + 24 >> 2];
      HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 20 >> 2];
      HEAP32[$6 + 16 >> 2] = $1;
      $1 = HEAP32[$5 + 32 >> 2];
      HEAP32[$6 + 20 >> 2] = HEAP32[$5 + 28 >> 2];
      HEAP32[$6 + 24 >> 2] = $1;
      $1 = HEAP32[$5 + 40 >> 2];
      HEAP32[$6 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
      HEAP32[$6 + 32 >> 2] = $1;
      HEAP32[$6 + 36 >> 2] = HEAP32[$5 + 44 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 40;
      break label$13;
     }
     void_20std____2__vector_Shape__CornerDef_2c_20std____2__allocator_Shape__CornerDef__20_____push_back_slow_path_Shape__CornerDef__28Shape__CornerDef___29($4, $5 + 8 | 0);
    }
    HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 1;
    break label$5;
   }
   $0 = 0;
   if (($9 | 0) > 6) {
    break label$4;
   }
  }
  $0 = 1;
 }
 global$0 = $5 + 288 | 0;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 368 | 0;
 global$0 = $5;
 HEAP32[$5 + 352 >> 2] = $1;
 HEAP32[$5 + 360 >> 2] = $0;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 200 | 0, $2, $5 + 224 | 0, $5 + 220 | 0, $5 + 216 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 180 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP8[$5 + 7 | 0] = 1;
 HEAP8[$5 + 6 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 360 | 0, $5 + 352 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 180 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 180 >> 2] = $2 + $0;
   }
   $2 = HEAP32[$5 + 360 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($2, $5 + 7 | 0, $5 + 6 | 0, $0, $5 + 180 | 0, HEAP32[$5 + 220 >> 2], HEAP32[$5 + 216 >> 2], $5 + 200 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 360 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 211 | 0] < 0) {
  $2 = HEAP32[$5 + 204 >> 2];
 } else {
  $2 = HEAPU8[$5 + 211 | 0];
 }
 label$20 : {
  if (!$2 | !HEAPU8[$5 + 7 | 0]) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAPF64[$4 >> 3] = double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, HEAP32[$5 + 180 >> 2], $3);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 200 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 360 | 0, $5 + 352 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 360 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
 global$0 = $5 + 368 | 0;
 return $0;
}
function MatStack__scale_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
 $14 = HEAP32[$0 + 12 >> 2];
 $4 = global$0 - 128 | 0;
 $5 = $4 + 8 | 0;
 HEAP32[$5 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$5 + 4 >> 2] = $14;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$4 + 20 >> 2] = $5;
 $5 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$4 + 28 >> 2] = $5;
 $5 = HEAP32[$0 + 36 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$4 + 36 >> 2] = $5;
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$4 + 44 >> 2] = $5;
 $5 = HEAP32[$0 + 52 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$4 + 52 >> 2] = $5;
 $5 = HEAP32[$0 + 60 >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$4 + 60 >> 2] = $5;
 $5 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 HEAP32[$4 + 76 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 0;
 HEAP32[$4 + 84 >> 2] = 0;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP32[$4 + 92 >> 2] = 0;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 100 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 HEAP32[$4 + 108 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = 0;
 HEAP32[$4 + 116 >> 2] = 0;
 HEAP32[$4 + 120 >> 2] = 0;
 HEAP32[$4 + 124 >> 2] = 0;
 $6 = HEAPF32[$4 + 48 >> 2];
 $9 = HEAPF32[$4 >> 2];
 $8 = Math_fround(Math_fround($9 * Math_fround(0)) + Math_fround(0));
 $10 = HEAPF32[$4 + 16 >> 2];
 $11 = Math_fround($10 * Math_fround(0));
 $12 = Math_fround($8 + $11);
 $13 = HEAPF32[$4 + 32 >> 2];
 $7 = Math_fround($13 * Math_fround(0));
 HEAPF32[$4 + 112 >> 2] = $6 + Math_fround($12 + $7);
 $6 = Math_fround($6 * Math_fround(0));
 HEAPF32[$4 + 96 >> 2] = Math_fround($12 + Math_fround($13 * $3)) + $6;
 HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($8 + Math_fround($10 * $2)) + $7) + $6;
 HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $1) + Math_fround(0)) + $11) + $7) + $6;
 $9 = HEAPF32[$4 + 4 >> 2];
 $6 = Math_fround(Math_fround($9 * Math_fround(0)) + Math_fround(0));
 $8 = HEAPF32[$4 + 20 >> 2];
 $10 = Math_fround($8 * Math_fround(0));
 $11 = Math_fround($6 + $10);
 $12 = HEAPF32[$4 + 36 >> 2];
 $13 = HEAPF32[$4 + 52 >> 2];
 $7 = Math_fround($13 * Math_fround(0));
 HEAPF32[$4 + 100 >> 2] = Math_fround($11 + Math_fround($12 * $3)) + $7;
 $8 = Math_fround($6 + Math_fround($8 * $2));
 $6 = Math_fround($12 * Math_fround(0));
 HEAPF32[$4 + 84 >> 2] = Math_fround($8 + $6) + $7;
 HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $1) + Math_fround(0)) + $10) + $6) + $7;
 HEAPF32[$4 + 116 >> 2] = $13 + Math_fround($11 + $6);
 $6 = HEAPF32[$4 + 56 >> 2];
 $9 = HEAPF32[$4 + 8 >> 2];
 $8 = Math_fround(Math_fround($9 * Math_fround(0)) + Math_fround(0));
 $10 = HEAPF32[$4 + 24 >> 2];
 $11 = Math_fround($10 * Math_fround(0));
 $12 = Math_fround($8 + $11);
 $13 = HEAPF32[$4 + 40 >> 2];
 $7 = Math_fround($13 * Math_fround(0));
 HEAPF32[$4 + 120 >> 2] = $6 + Math_fround($12 + $7);
 $6 = Math_fround($6 * Math_fround(0));
 HEAPF32[$4 + 104 >> 2] = Math_fround($12 + Math_fround($13 * $3)) + $6;
 HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($8 + Math_fround($10 * $2)) + $7) + $6;
 HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $1) + Math_fround(0)) + $11) + $7) + $6;
 $6 = HEAPF32[$4 + 12 >> 2];
 $9 = HEAPF32[$4 + 28 >> 2];
 $8 = Math_fround($9 * Math_fround(0));
 $12 = Math_fround(Math_fround(Math_fround($6 * $1) + Math_fround(0)) + $8);
 $10 = HEAPF32[$4 + 44 >> 2];
 $1 = Math_fround($10 * Math_fround(0));
 $11 = HEAPF32[$4 + 60 >> 2];
 $7 = Math_fround($11 * Math_fround(0));
 HEAPF32[$4 + 76 >> 2] = Math_fround($12 + $1) + $7;
 $6 = Math_fround(Math_fround($6 * Math_fround(0)) + Math_fround(0));
 HEAPF32[$4 + 92 >> 2] = Math_fround(Math_fround($6 + Math_fround($9 * $2)) + $1) + $7;
 $2 = Math_fround($6 + $8);
 HEAPF32[$4 + 108 >> 2] = Math_fround($2 + Math_fround($10 * $3)) + $7;
 HEAPF32[$4 + 124 >> 2] = $11 + Math_fround($2 + $1);
 $5 = HEAP32[$4 + 116 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$4 + 112 >> 2];
 HEAP32[$0 + 52 >> 2] = $5;
 $5 = HEAP32[$4 + 108 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$4 + 104 >> 2];
 HEAP32[$0 + 44 >> 2] = $5;
 $5 = HEAP32[$4 + 100 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$4 + 96 >> 2];
 HEAP32[$0 + 36 >> 2] = $5;
 $5 = HEAP32[$4 + 92 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 88 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 $5 = HEAP32[$4 + 76 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 72 >> 2];
 HEAP32[$0 + 12 >> 2] = $5;
 $5 = HEAP32[$4 + 124 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$4 + 120 >> 2];
 HEAP32[$0 + 60 >> 2] = $5;
 $5 = HEAP32[$4 + 84 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 80 >> 2];
 HEAP32[$0 + 20 >> 2] = $5;
 $5 = HEAP32[$4 + 68 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 + 64 >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 368 | 0;
 global$0 = $5;
 HEAP32[$5 + 352 >> 2] = $1;
 HEAP32[$5 + 360 >> 2] = $0;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 200 | 0, $2, $5 + 224 | 0, $5 + 220 | 0, $5 + 216 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 180 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP8[$5 + 7 | 0] = 1;
 HEAP8[$5 + 6 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($5 + 360 | 0, $5 + 352 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 180 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 180 >> 2] = $2 + $0;
   }
   $2 = HEAP32[$5 + 360 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   label$18 : {
    if (($6 | 0) == HEAP32[$2 + 16 >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
     break label$18;
    }
    $2 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($2, $5 + 7 | 0, $5 + 6 | 0, $0, $5 + 180 | 0, HEAP32[$5 + 220 >> 2], HEAP32[$5 + 216 >> 2], $5 + 200 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 360 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 211 | 0] < 0) {
  $2 = HEAP32[$5 + 204 >> 2];
 } else {
  $2 = HEAPU8[$5 + 211 | 0];
 }
 label$20 : {
  if (!$2 | !HEAPU8[$5 + 7 | 0]) {
   break label$20;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$20;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAPF32[$4 >> 2] = float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, HEAP32[$5 + 180 >> 2], $3);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 200 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($5 + 360 | 0, $5 + 352 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 360 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
 global$0 = $5 + 368 | 0;
 return $0;
}
function VecRep__add_28Vec3_20const__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0;
 label$1 : {
  $9 = $0 + 4 | 0;
  $3 = HEAP32[$9 >> 2];
  if (!$3) {
   break label$1;
  }
  $8 = HEAPF32[$1 + 8 >> 2];
  $6 = HEAPF32[$1 + 4 >> 2];
  $7 = HEAPF32[$1 >> 2];
  $5 = $9;
  while (1) {
   label$3 : {
    label$4 : {
     $4 = HEAPF32[$3 + 16 >> 2];
     if (!!(+Math_fround(Math_abs(Math_fround($4 - $7))) < 1e-5)) {
      $4 = HEAPF32[$3 + 20 >> 2];
      if (!!(+Math_fround(Math_abs(Math_fround($4 - $6))) < 1e-5)) {
       $4 = HEAPF32[$3 + 24 >> 2];
       if (+Math_fround(Math_abs(Math_fround($4 - $8))) < 1e-5 | !($4 < $8)) {
        break label$4;
       }
       $3 = $3 + 4 | 0;
       break label$3;
      }
      if (!($4 < $6)) {
       break label$4;
      }
      $3 = $3 + 4 | 0;
      break label$3;
     }
     if (!($4 < $7)) {
      break label$4;
     }
     $3 = $3 + 4 | 0;
     break label$3;
    }
    $5 = $3;
   }
   $3 = HEAP32[$3 >> 2];
   if ($3) {
    continue;
   }
   break;
  }
  if (($5 | 0) == ($9 | 0)) {
   break label$1;
  }
  label$7 : {
   label$8 : {
    $4 = HEAPF32[$5 + 16 >> 2];
    if (!!(+Math_fround(Math_abs(Math_fround($7 - $4))) < 1e-5)) {
     $7 = HEAPF32[$5 + 20 >> 2];
     if (!(+Math_fround(Math_abs(Math_fround($6 - $7))) < 1e-5)) {
      break label$8;
     }
     $6 = HEAPF32[$5 + 24 >> 2];
     if (!($8 < $6)) {
      break label$7;
     }
     if (!(+Math_fround(Math_abs(Math_fround($8 - $6))) < 1e-5)) {
      break label$1;
     }
     break label$7;
    }
    if (!($7 < $4)) {
     break label$7;
    }
    break label$1;
   }
   if ($6 < $7) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$5 + 28 >> 2];
  return 0;
 }
 $3 = HEAP32[$0 + 12 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 label$10 : {
  if (($5 | 0) != HEAP32[$3 + 8 >> 2]) {
   $11 = HEAP32[$1 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 4 >> 2] = $11;
   HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 12;
   break label$10;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($3, $1);
 }
 $3 = $2;
 $2 = HEAP32[$0 + 12 >> 2];
 $2 = ((HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 12 | 0) + -1 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = HEAPF32[$1 + 8 >> 2];
 $6 = HEAPF32[$1 + 4 >> 2];
 $7 = HEAPF32[$1 >> 2];
 $5 = $0 + 4 | 0;
 $3 = HEAP32[$5 >> 2];
 label$12 : {
  if ($3) {
   while (1) {
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        $4 = HEAPF32[$3 + 16 >> 2];
        if (!!(+Math_fround(Math_abs(Math_fround($7 - $4))) < 1e-5)) {
         $10 = HEAPF32[$3 + 20 >> 2];
         if (!(+Math_fround(Math_abs(Math_fround($6 - $10))) < 1e-5)) {
          break label$18;
         }
         $10 = HEAPF32[$3 + 24 >> 2];
         if (!($8 < $10)) {
          break label$17;
         }
         if (!(+Math_fround(Math_abs(Math_fround($8 - $10))) < 1e-5)) {
          break label$16;
         }
         break label$17;
        }
        if (!($7 < $4)) {
         break label$17;
        }
        break label$16;
       }
       if ($6 < $10) {
        break label$16;
       }
      }
      label$20 : {
       label$21 : {
        if (!!(+Math_fround(Math_abs(Math_fround($4 - $7))) < 1e-5)) {
         $4 = HEAPF32[$3 + 20 >> 2];
         if (!(+Math_fround(Math_abs(Math_fround($4 - $6))) < 1e-5)) {
          break label$21;
         }
         $4 = HEAPF32[$3 + 24 >> 2];
         if (!($4 < $8)) {
          break label$12;
         }
         if (!(+Math_fround(Math_abs(Math_fround($4 - $8))) < 1e-5)) {
          break label$20;
         }
         break label$12;
        }
        if (!($4 < $7)) {
         break label$12;
        }
        break label$20;
       }
       if (!($4 < $6)) {
        break label$12;
       }
      }
      $5 = $3 + 4 | 0;
      $1 = HEAP32[$3 + 4 >> 2];
      if (!$1) {
       break label$12;
      }
      $3 = $5;
      break label$15;
     }
     $1 = HEAP32[$3 >> 2];
     if ($1) {
      break label$15;
     }
     $5 = $3;
     break label$12;
    }
    $5 = $3;
    $3 = $1;
    continue;
   }
  }
  $3 = $9;
  $5 = $3;
 }
 $1 = HEAP32[$5 >> 2];
 if (!$1) {
  $1 = operator_20new_28unsigned_20long_29(32);
  HEAP32[$1 + 28 >> 2] = 0;
  HEAPF32[$1 + 24 >> 2] = $8;
  HEAPF32[$1 + 20 >> 2] = $6;
  HEAPF32[$1 + 16 >> 2] = $7;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$5 >> 2] = $1;
  $3 = $1;
  $9 = HEAP32[HEAP32[$0 >> 2] >> 2];
  if ($9) {
   HEAP32[$0 >> 2] = $9;
   $3 = HEAP32[$5 >> 2];
  }
  void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$0 + 4 >> 2], $3);
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
 }
 HEAP32[$1 + 28 >> 2] = $2;
 return 1;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 352 | 0;
 global$0 = $0;
 HEAP32[$0 + 336 >> 2] = $2;
 HEAP32[$0 + 344 >> 2] = $1;
 $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, 27632, 27658, $0 + 224 | 0) | 0;
 $1 = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($2, HEAP8[$2 + 11 | 0] < 0 ? (HEAP32[$2 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $3 = $0;
 if (HEAP8[$2 + 11 | 0] < 0) {
  $1 = HEAP32[$2 >> 2];
 } else {
  $1 = $2;
 }
 HEAP32[$3 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  label$8 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 344 | 0, $0 + 336 | 0)) {
    break label$8;
   }
   $3 = HEAP32[$0 + 188 >> 2];
   if (HEAP8[$2 + 11 | 0] < 0) {
    $6 = HEAP32[$2 + 4 >> 2];
   } else {
    $6 = HEAPU8[$2 + 11 | 0];
   }
   if (($3 | 0) == ($6 + $1 | 0)) {
    $1 = $2;
    label$12 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $3 = HEAP32[$1 + 4 >> 2];
      break label$12;
     }
     $3 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $0;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$2 >> 2];
    } else {
     $1 = $2;
    }
    HEAP32[$6 + 188 >> 2] = $3 + $1;
   }
   $3 = HEAP32[$0 + 344 >> 2];
   $6 = HEAP32[$3 + 12 >> 2];
   label$20 : {
    if (($6 | 0) == HEAP32[$3 + 16 >> 2]) {
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
     break label$20;
    }
    $3 = HEAP32[$6 >> 2];
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($3, 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $7, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$8;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 344 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($2, HEAP32[$0 + 188 >> 2] - $1 | 0);
 if (HEAP8[$2 + 11 | 0] < 0) {
  $1 = HEAP32[$2 >> 2];
 } else {
  $1 = $2;
 }
 $3 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $5;
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $3, $0) | 0) != 1) {
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 344 | 0, $0 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
 global$0 = $0 + 352 | 0;
 return $1 | 0;
}
function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 label$1 : {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($2);
   label$3 : {
    if ($1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP8[$4 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
   HEAP8[$5 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
   break label$1;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($2);
  label$5 : {
   if ($1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($10, $0);
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$3 | 0] = $1;
   HEAP8[$3 + 1 | 0] = $1 >>> 8;
   HEAP8[$3 + 2 | 0] = $1 >>> 16;
   HEAP8[$3 + 3 | 0] = $1 >>> 24;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($10, $0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  HEAP8[$4 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  HEAP8[$5 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 HEAP32[$9 >> 2] = $0;
 global$0 = $10 + 16 | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 288 | 0;
 global$0 = $5;
 HEAP32[$5 + 272 >> 2] = $1;
 HEAP32[$5 + 280 >> 2] = $0;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 224 | 0, $2, $5 + 240 | 0, $5 + 239 | 0, $5 + 238 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 208 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$5 + 28 >> 2] = $5 + 32;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP8[$5 + 23 | 0] = 1;
 HEAP8[$5 + 22 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 280 | 0, $5 + 272 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 204 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 204 >> 2] = $2 + $0;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 280 | 0), $5 + 23 | 0, $5 + 22 | 0, $0, $5 + 204 | 0, HEAP8[$5 + 239 | 0], HEAP8[$5 + 238 | 0], $5 + 224 | 0, $5 + 32 | 0, $5 + 28 | 0, $5 + 24 | 0, $5 + 240 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 280 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 235 | 0] < 0) {
  $2 = HEAP32[$5 + 228 >> 2];
 } else {
  $2 = HEAPU8[$5 + 235 | 0];
 }
 label$18 : {
  if (!$2 | !HEAPU8[$5 + 23 | 0]) {
   break label$18;
  }
  $2 = HEAP32[$5 + 28 >> 2];
  if (($2 - ($5 + 32 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 28 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 24 >> 2];
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($5, $0, HEAP32[$5 + 204 >> 2], $3);
 $0 = HEAP32[$5 >> 2];
 $2 = HEAP32[$5 + 4 >> 2];
 $6 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = $6;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $2;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 224 | 0, $5 + 32 | 0, HEAP32[$5 + 28 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 280 | 0, $5 + 272 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 280 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 224 | 0);
 global$0 = $5 + 288 | 0;
 return $0;
}
function setPicCount_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   if (($0 | 0) >= 0) {
    $5 = HEAP32[11988];
    $4 = HEAP32[$5 + 4 >> 2];
    if ((HEAP32[$5 + 8 >> 2] - $4 | 0) / 152 >>> 0 > $0 >>> 0) {
     break label$2;
    }
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1440, 21), $0);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$3 + 16 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 16 | 0, 51440);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$3 + 16 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   if (($2 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  $4 = $4 + Math_imul($0, 152) | 0;
  if (HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 2 >>> 0 < $1 >>> 0) {
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1462, 21), $1), 1484, 1), $0);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$3 + 24 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 24 | 0, 51440);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$3 + 24 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   if (($2 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1486, 12), $0), 1499, 6);
  $6 = $1 << 2;
  $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, HEAP32[$6 + HEAP32[$4 >> 2] >> 2]), 1506, 3), $2);
  $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
  $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 51440);
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
  $1 = HEAP32[$3 + 8 >> 2];
  $7 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $7;
  if (($7 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $8);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
  HEAP32[(HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[HEAP32[$4 >> 2] + $6 >> 2], 652) | 0) + 348 >> 2] = $2;
 }
 global$0 = $3 + 32 | 0;
}
function Shape__checkSide_28EAxis_2c_20int_2c_20int_2c_20int_2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $8 = global$0 - 48 | 0;
 global$0 = $8;
 $14 = $1 + -1 | 0;
 $7 = $14 << 6;
 $10 = HEAP32[$7 + 8632 >> 2] + $3 | 0;
 $11 = HEAP32[$7 + 8628 >> 2] + $2 | 0;
 $12 = HEAP32[$7 + 8636 >> 2] + $4 | 0;
 $9 = 0;
 label$1 : {
  if (($10 | $11 | $12) < 0) {
   break label$1;
  }
  $9 = 0;
  if (($11 | 0) >= HEAP32[$0 >> 2]) {
   break label$1;
  }
  $9 = 0;
  if (($10 | 0) >= HEAP32[$0 + 4 >> 2]) {
   break label$1;
  }
  $9 = 0;
  if (($12 | 0) >= HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  $13 = Math_imul(HEAP32[$7 + 8624 >> 2], 20) + $0 | 0;
  $10 = HEAP16[HEAP32[$13 + 136 >> 2] + ((Math_imul(HEAP32[$13 + 120 >> 2], $10 >>> 2) + ($11 >>> 2) | 0) + Math_imul(HEAP32[$13 + 132 >> 2], $12 >>> 2) << 1) >> 1];
  $9 = 0;
  if (($10 | 0) == -1) {
   break label$1;
  }
  HEAP32[$8 + 32 >> 2] = $10;
  $9 = 1;
 }
 $12 = HEAP32[$7 + 8652 >> 2] + $4 | 0;
 $10 = HEAP32[$7 + 8648 >> 2] + $3 | 0;
 $11 = HEAP32[$7 + 8644 >> 2] + $2 | 0;
 label$2 : {
  if (($12 | ($10 | $11)) < 0 | ($11 | 0) >= HEAP32[$0 >> 2] | (($10 | 0) >= HEAP32[$0 + 4 >> 2] | ($12 | 0) >= HEAP32[$0 + 8 >> 2])) {
   break label$2;
  }
  $7 = Math_imul(HEAP32[$7 + 8640 >> 2], 20) + $0 | 0;
  $7 = HEAP16[HEAP32[$7 + 136 >> 2] + ((Math_imul(HEAP32[$7 + 120 >> 2], $10 >>> 2) + ($11 >>> 2) | 0) + Math_imul(HEAP32[$7 + 132 >> 2], $12 >>> 2) << 1) >> 1];
  if (($7 | 0) == -1) {
   break label$2;
  }
  HEAP32[($8 + 32 | $9 << 2) >> 2] = $7;
  $9 = $9 + 1 | 0;
 }
 $7 = $14 << 6;
 $10 = HEAP32[$7 + 8664 >> 2] + $3 | 0;
 $11 = HEAP32[$7 + 8660 >> 2] + $2 | 0;
 $12 = HEAP32[$7 + 8668 >> 2] + $4 | 0;
 label$3 : {
  if (($10 | $11 | $12) < 0 | ($11 | 0) >= HEAP32[$0 >> 2] | (($10 | 0) >= HEAP32[$0 + 4 >> 2] | ($12 | 0) >= HEAP32[$0 + 8 >> 2])) {
   break label$3;
  }
  $13 = Math_imul(HEAP32[$7 + 8656 >> 2], 20) + $0 | 0;
  $10 = HEAP16[HEAP32[$13 + 136 >> 2] + ((Math_imul(HEAP32[$13 + 120 >> 2], $10 >>> 2) + ($11 >>> 2) | 0) + Math_imul(HEAP32[$13 + 132 >> 2], $12 >>> 2) << 1) >> 1];
  if (($10 | 0) == -1) {
   break label$3;
  }
  HEAP32[($8 + 32 | $9 << 2) >> 2] = $10;
  $9 = $9 + 1 | 0;
 }
 $12 = HEAP32[$7 + 8684 >> 2] + $4 | 0;
 $10 = HEAP32[$7 + 8680 >> 2] + $3 | 0;
 $11 = HEAP32[$7 + 8676 >> 2] + $2 | 0;
 label$4 : {
  if (($12 | ($10 | $11)) < 0 | ($11 | 0) >= HEAP32[$0 >> 2] | (($10 | 0) >= HEAP32[$0 + 4 >> 2] | ($12 | 0) >= HEAP32[$0 + 8 >> 2])) {
   break label$4;
  }
  $7 = Math_imul(HEAP32[$7 + 8672 >> 2], 20) + $0 | 0;
  $7 = HEAP16[HEAP32[$7 + 136 >> 2] + ((Math_imul(HEAP32[$7 + 120 >> 2], $10 >>> 2) + ($11 >>> 2) | 0) + Math_imul(HEAP32[$7 + 132 >> 2], $12 >>> 2) << 1) >> 1];
  if (($7 | 0) == -1) {
   break label$4;
  }
  HEAP32[($8 + 32 | 0) + ($9 << 2) >> 2] = $7;
  $9 = $9 + 1 | 0;
 }
 label$5 : {
  if (($9 | 0) == 2) {
   HEAP32[$8 + 20 >> 2] = $4;
   HEAP32[$8 + 16 >> 2] = $3;
   HEAP32[$8 + 12 >> 2] = $2;
   HEAP32[$8 + 8 >> 2] = $1;
   $6 = HEAP32[$8 + 36 >> 2];
   HEAP32[$8 + 24 >> 2] = HEAP32[$8 + 32 >> 2];
   HEAP32[$8 + 28 >> 2] = $6;
   $6 = HEAP32[$5 + 4 >> 2];
   label$7 : {
    if ($6 >>> 0 < HEAPU32[$5 + 8 >> 2]) {
     HEAP32[$6 + 4 >> 2] = $2;
     HEAP32[$6 >> 2] = $1;
     HEAP32[$6 + 12 >> 2] = $4;
     HEAP32[$6 + 8 >> 2] = $3;
     $1 = HEAP32[$8 + 28 >> 2];
     HEAP32[$6 + 16 >> 2] = HEAP32[$8 + 24 >> 2];
     HEAP32[$6 + 20 >> 2] = $1;
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 24;
     break label$7;
    }
    void_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20_____push_back_slow_path_Shape__SideDef__28Shape__SideDef___29($5, $8 + 8 | 0);
   }
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
   $5 = 1;
   break label$5;
  }
  $5 = 1;
  if (($9 | 0) < 3) {
   break label$5;
  }
  $5 = HEAP32[$0 + 76 >> 2];
  $9 = HEAP32[$0 + 84 >> 2];
  $4 = HEAP32[$0 + 68 >> 2] + $4 | 0;
  HEAP32[$8 + 20 >> 2] = $4;
  $3 = $3 + $9 | 0;
  HEAP32[$8 + 16 >> 2] = $3;
  HEAP32[$8 + 8 >> 2] = $1;
  $0 = HEAP32[$8 + 36 >> 2];
  HEAP32[$8 + 24 >> 2] = HEAP32[$8 + 32 >> 2];
  HEAP32[$8 + 28 >> 2] = $0;
  $2 = $2 + $5 | 0;
  HEAP32[$8 + 12 >> 2] = $2;
  $0 = HEAP32[$6 + 4 >> 2];
  label$9 : {
   if ($0 >>> 0 < HEAPU32[$6 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $2;
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = $3;
    $1 = HEAP32[$8 + 28 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[$8 + 24 >> 2];
    HEAP32[$0 + 20 >> 2] = $1;
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 24;
    break label$9;
   }
   void_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20_____push_back_slow_path_Shape__SideDef__28Shape__SideDef___29($6, $8 + 8 | 0);
  }
  $5 = 0;
 }
 global$0 = $8 + 48 | 0;
 return $5;
}
function QuadAdder__add_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec4_20const__2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 $9 = HEAP32[$0 >> 2];
 $11 = $9;
 $8 = HEAP32[$9 + 12 >> 2];
 label$1 : {
  if (($8 | 0) != HEAP32[$9 + 16 >> 2]) {
   $9 = HEAP32[$1 + 4 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$8 + 4 >> 2] = $9;
   HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 12 >> 2] + 12;
   break label$1;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9 + 8 | 0, $1);
 }
 $9 = HEAP32[$0 >> 2];
 $11 = $9;
 $8 = HEAP32[$9 + 12 >> 2];
 label$3 : {
  if (($8 | 0) != HEAP32[$9 + 16 >> 2]) {
   $9 = HEAP32[$2 + 4 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$8 + 4 >> 2] = $9;
   HEAP32[$8 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 12 >> 2] + 12;
   break label$3;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($9 + 8 | 0, $2);
 }
 $8 = HEAP32[$0 >> 2];
 $9 = $8;
 $2 = HEAP32[$8 + 12 >> 2];
 label$5 : {
  if (($2 | 0) != HEAP32[$8 + 16 >> 2]) {
   $8 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 4 >> 2] = $8;
   HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 12;
   break label$5;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8 + 8 | 0, $3);
 }
 $8 = HEAP32[$0 >> 2];
 $9 = $8;
 $2 = HEAP32[$8 + 12 >> 2];
 label$7 : {
  if (($2 | 0) != HEAP32[$8 + 16 >> 2]) {
   $8 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $8;
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 12;
   break label$7;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($8 + 8 | 0, $1);
 }
 $2 = HEAP32[$0 >> 2];
 $8 = $2;
 $1 = HEAP32[$2 + 12 >> 2];
 label$9 : {
  if (($1 | 0) != HEAP32[$2 + 16 >> 2]) {
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$8 + 12 >> 2] = HEAP32[$8 + 12 >> 2] + 12;
   break label$9;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($2 + 8 | 0, $3);
 }
 $1 = HEAP32[$0 >> 2];
 $3 = $1;
 $2 = HEAP32[$1 + 12 >> 2];
 label$11 : {
  if (($2 | 0) != HEAP32[$1 + 16 >> 2]) {
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$2 + 4 >> 2] = $1;
   HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 12;
   break label$11;
  }
  void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($1 + 8 | 0, $4);
 }
 HEAP8[$10 + 11 | 0] = 255;
 HEAP8[$10 + 8 | 0] = $6;
 HEAP8[$10 + 10 | 0] = $6 >>> 16;
 HEAP8[$10 + 9 | 0] = $6 >>> 8;
 HEAPF32[$10 + 4 >> 2] = $7 >>> 0;
 $2 = 0;
 while (1) {
  $3 = HEAP32[$0 >> 2];
  $4 = $3;
  $1 = HEAP32[$3 + 48 >> 2];
  label$14 : {
   if (($1 | 0) != HEAP32[$3 + 52 >> 2]) {
    HEAP8[$1 | 0] = HEAPU8[$10 + 8 | 0];
    HEAP8[$1 + 1 | 0] = HEAPU8[$10 + 9 | 0];
    HEAP8[$1 + 2 | 0] = HEAPU8[$10 + 10 | 0];
    HEAP8[$1 + 3 | 0] = HEAPU8[$10 + 11 | 0];
    HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] + 4;
    break label$14;
   }
   void_20std____2__vector_Vec4b_2c_20std____2__allocator_Vec4b__20_____push_back_slow_path_Vec4b_20const___28Vec4b_20const__29($3 + 44 | 0, $10 + 8 | 0);
  }
  $1 = HEAP32[$0 >> 2];
  $4 = $1;
  $3 = HEAP32[$1 + 60 >> 2];
  label$16 : {
   if (($3 | 0) != HEAP32[$1 - -64 >> 2]) {
    HEAP32[$3 >> 2] = HEAP32[$10 + 4 >> 2];
    HEAP32[$4 + 60 >> 2] = $3 + 4;
    break label$16;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 56 | 0, $10 + 4 | 0);
   $1 = HEAP32[$0 >> 2];
  }
  $4 = HEAP32[$1 + 36 >> 2];
  label$18 : {
   if (($4 | 0) != HEAP32[$1 + 40 >> 2]) {
    $3 = $5;
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = $6;
    $6 = HEAP32[$3 + 12 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$4 + 12 >> 2] = $6;
    HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 16;
    break label$18;
   }
   void_20std____2__vector_Vec4_2c_20std____2__allocator_Vec4__20_____push_back_slow_path_Vec4_20const___28Vec4_20const__29($1 + 32 | 0, $5);
  }
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 6) {
   continue;
  }
  break;
 }
 global$0 = $10 + 16 | 0;
}
function Solutions__toNewShape_28Shape_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $5 = HEAP32[$0 + 8 >> 2];
 $10 = HEAP32[$0 + 12 >> 2];
 $11 = ($5 | 0) == ($10 | 0);
 label$1 : {
  if ($11) {
   break label$1;
  }
  $6 = HEAP32[HEAP32[$5 >> 2] + 52 >> 2];
  $0 = HEAP32[$6 + 12 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$0) {
      $0 = 0;
      break label$4;
     }
     if ($0 >>> 0 >= 1073741824) {
      break label$3;
     }
     $4 = $0 << 2;
     $2 = operator_20new_28unsigned_20long_29($4);
     HEAP32[$3 + 16 >> 2] = $2;
     $0 = $2 + $4 | 0;
     HEAP32[$3 + 24 >> 2] = $0;
     memset($2, 0, $4);
     HEAP32[$3 + 20 >> 2] = $0;
    }
    $0 = $0 - $2 | 0;
    if (($0 | 0) >= 1) {
     $0 = $0 >>> 2;
     memset($2, 255, ($0 - (($0 | 0) != 0) << 2) + 4 | 0);
    }
    $9 = HEAP32[$6 + 12 >> 2];
    if (($9 | 0) < 1) {
     break label$2;
    }
    $13 = HEAP32[$6 + 84 >> 2] - HEAP32[$1 + 84 >> 2] | 0;
    $14 = HEAP32[$6 + 76 >> 2] - HEAP32[$1 + 76 >> 2] | 0;
    $15 = HEAP32[$6 + 68 >> 2] - HEAP32[$1 + 68 >> 2] | 0;
    $16 = HEAP32[$6 + 28 >> 2];
    $4 = 0;
    $12 = HEAP32[$1 + 12 >> 2];
    $17 = ($12 | 0) < 1;
    while (1) {
     label$8 : {
      if ($17) {
       break label$8;
      }
      $7 = Math_imul($4, 188) + $16 | 0;
      $18 = $7;
      $19 = HEAP32[$7 + 4 >> 2] + $14 | 0;
      $20 = HEAP32[$7 + 12 >> 2] + $15 | 0;
      $21 = HEAP32[$1 + 28 >> 2];
      $0 = 0;
      while (1) {
       label$10 : {
        $8 = Math_imul($0, 188) + $21 | 0;
        if (HEAP32[$8 + 4 >> 2] != ($19 | 0) | HEAP32[$8 + 8 >> 2] != (HEAP32[$7 + 8 >> 2] + $13 | 0) | (HEAP32[$8 + 12 >> 2] != ($20 | 0) | HEAP32[$7 >> 2] != HEAP32[$8 >> 2])) {
         break label$10;
        }
        if (HEAP32[$18 + 16 >> 2] != HEAP32[$8 + 16 >> 2]) {
         break label$10;
        }
        HEAP32[($4 << 2) + $2 >> 2] = $0;
        $9 = HEAP32[$6 + 12 >> 2];
        break label$8;
       }
       $0 = $0 + 1 | 0;
       if (($0 | 0) < ($12 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($9 | 0)) {
      continue;
     }
     break;
    }
    break label$2;
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  if (!$11) {
   while (1) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    label$13 : {
     label$14 : {
      if ($0) {
       if ($0 >>> 0 >= 536870912) {
        break label$14;
       }
       $0 = $0 << 3;
       $2 = operator_20new_28unsigned_20long_29($0);
       HEAP32[$3 >> 2] = $2;
       $4 = $0 + $2 | 0;
       HEAP32[$3 + 8 >> 2] = $4;
       memset($2, 255, $0);
       HEAP32[$3 + 4 >> 2] = $4;
      }
      $0 = 0;
      $2 = HEAP32[$6 + 12 >> 2];
      if (($2 | 0) <= 0) {
       break label$13;
      }
      while (1) {
       $4 = HEAP32[HEAP32[$3 + 16 >> 2] + ($0 << 2) >> 2];
       if (($4 | 0) != -1) {
        $2 = HEAP32[$3 >> 2] + ($4 << 3) | 0;
        $4 = HEAP32[HEAP32[$5 >> 2] >> 2] + ($0 << 3) | 0;
        $7 = HEAP32[$4 + 4 >> 2];
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $7;
        $2 = HEAP32[$6 + 12 >> 2];
       }
       $0 = $0 + 1 | 0;
       if (($0 | 0) < ($2 | 0)) {
        continue;
       }
       break;
      }
      break label$13;
     }
     std____2____vector_base_common_true_____throw_length_error_28_29_20const();
     abort();
    }
    $0 = HEAP32[$5 >> 2];
    if (($0 | 0) != ($3 | 0)) {
     std____2__enable_if__28__is_forward_iterator_SlvCube__SlvPiece____value_29_20___20_28is_constructible_SlvCube__SlvPiece_2c_20std____2__iterator_traits_SlvCube__SlvPiece____reference___value_29_2c_20void___type_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20___assign_SlvCube__SlvPiece___28SlvCube__SlvPiece__2c_20SlvCube__SlvPiece__29($0, HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
     $0 = HEAP32[$5 >> 2];
    }
    HEAP32[$0 + 52 >> 2] = $1;
    $0 = HEAP32[$5 >> 2];
    $2 = HEAP32[$0 + 36 >> 2];
    if ($2) {
     Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const(HEAP32[$2 + 52 >> 2], Math_fround(HEAP32[11537]), $0 + 40 | 0);
    }
    $0 = HEAP32[$3 >> 2];
    if ($0) {
     HEAP32[$3 + 4 >> 2] = $0;
     dlfree($0);
    }
    $5 = $5 + 4 | 0;
    if (($10 | 0) != ($5 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$3 + 16 >> 2];
  }
  if (!$2) {
   break label$1;
  }
  HEAP32[$3 + 20 >> 2] = $2;
  dlfree($2);
 }
 global$0 = $3 + 32 | 0;
}
function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $9 = global$0 - 128 | 0;
 global$0 = $9;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!__letf2($5, $6, $7, $8, 0, 0, 0, 0)) {
     break label$3;
    }
    $12 = __fpclassifyl($5, $6, $7, $8);
    $19 = $4 >>> 16;
    $15 = $19 & 32767;
    if (($15 | 0) == 32767) {
     break label$3;
    }
    if ($12) {
     break label$2;
    }
   }
   __multf3($9 + 16 | 0, $1, $2, $3, $4, $5, $6, $7, $8);
   $4 = HEAP32[$9 + 16 >> 2];
   $3 = HEAP32[$9 + 20 >> 2];
   $2 = HEAP32[$9 + 24 >> 2];
   $1 = HEAP32[$9 + 28 >> 2];
   __divtf3($9, $4, $3, $2, $1, $4, $3, $2, $1);
   $3 = HEAP32[$9 + 8 >> 2];
   $4 = HEAP32[$9 + 12 >> 2];
   $7 = HEAP32[$9 >> 2];
   $8 = HEAP32[$9 + 4 >> 2];
   break label$1;
  }
  $13 = $4 & 65535 | $15 << 16;
  $11 = $13;
  $10 = $3;
  $13 = $7;
  $18 = $8 >>> 16 & 32767;
  $16 = $8 & 65535 | $18 << 16;
  if ((__letf2($1, $2, $10, $11, $5, $6, $7, $16) | 0) <= 0) {
   if (__letf2($1, $2, $10, $11, $5, $6, $13, $16)) {
    $7 = $1;
    $8 = $2;
    break label$1;
   }
   __multf3($9 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
   $3 = HEAP32[$9 + 120 >> 2];
   $4 = HEAP32[$9 + 124 >> 2];
   $7 = HEAP32[$9 + 112 >> 2];
   $8 = HEAP32[$9 + 116 >> 2];
   break label$1;
  }
  if ($15) {
   $8 = $2;
   $7 = $1;
  } else {
   __multf3($9 + 96 | 0, $1, $2, $10, $11, 0, 0, 0, 1081540608);
   $7 = HEAP32[$9 + 108 >> 2];
   $11 = $7;
   $10 = HEAP32[$9 + 104 >> 2];
   $15 = ($7 >>> 16) + -120 | 0;
   $8 = HEAP32[$9 + 100 >> 2];
   $7 = HEAP32[$9 + 96 >> 2];
  }
  if (!$18) {
   __multf3($9 + 80 | 0, $5, $6, $13, $16, 0, 0, 0, 1081540608);
   $5 = HEAP32[$9 + 92 >> 2];
   $16 = $5;
   $13 = HEAP32[$9 + 88 >> 2];
   $18 = ($5 >>> 16) + -120 | 0;
   $6 = HEAP32[$9 + 84 >> 2];
   $5 = HEAP32[$9 + 80 >> 2];
  }
  $21 = $13;
  $12 = $13;
  $13 = $10 - $12 | 0;
  $11 = $11 & 65535 | 65536;
  $20 = $16 & 65535 | 65536;
  $14 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
  $12 = ($11 - ($20 + ($10 >>> 0 < $12 >>> 0) | 0) | 0) - ($13 >>> 0 < $14 >>> 0) | 0;
  $17 = $13 - $14 | 0;
  $14 = ($12 | 0) > -1 ? 1 : ($12 | 0) >= -1 ? $17 >>> 0 <= 4294967295 ? 0 : 1 : 0;
  $13 = $7 - $5 | 0;
  $16 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
  if (($15 | 0) > ($18 | 0)) {
   while (1) {
    label$11 : {
     if ($14) {
      if (!($13 | $17 | ($12 | $16))) {
       __multf3($9 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
       $3 = HEAP32[$9 + 40 >> 2];
       $4 = HEAP32[$9 + 44 >> 2];
       $7 = HEAP32[$9 + 32 >> 2];
       $8 = HEAP32[$9 + 36 >> 2];
       break label$1;
      }
      $10 = $16 >>> 31;
      $11 = 0;
      $7 = $17;
      $14 = $12 << 1 | $7 >>> 31;
      $7 = $7 << 1;
      break label$11;
     }
     $12 = $11 << 1 | $10 >>> 31;
     $10 = $10 << 1;
     $11 = $12;
     $13 = $7;
     $16 = $8;
     $14 = 0;
     $7 = $8 >>> 31;
    }
    $10 = $7 | $10;
    $8 = $10;
    $7 = $21;
    $17 = $8 - $7 | 0;
    $11 = $11 | $14;
    $12 = $11 - (($8 >>> 0 < $7 >>> 0) + $20 | 0) | 0;
    $7 = $13;
    $14 = $16 << 1 | $7 >>> 31;
    $7 = $7 << 1;
    $8 = $14;
    $14 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
    $12 = $12 - ($17 >>> 0 < $14 >>> 0) | 0;
    $17 = $17 - $14 | 0;
    $14 = ($12 | 0) > -1 ? 1 : ($12 | 0) >= -1 ? $17 >>> 0 <= 4294967295 ? 0 : 1 : 0;
    $13 = $7 - $5 | 0;
    $16 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
    $15 = $15 + -1 | 0;
    if (($15 | 0) > ($18 | 0)) {
     continue;
    }
    break;
   }
   $15 = $18;
  }
  label$14 : {
   if (!$14) {
    break label$14;
   }
   $7 = $13;
   $10 = $17;
   $8 = $16;
   $11 = $12;
   if ($7 | $10 | ($8 | $11)) {
    break label$14;
   }
   __multf3($9 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
   $3 = HEAP32[$9 + 56 >> 2];
   $4 = HEAP32[$9 + 60 >> 2];
   $7 = HEAP32[$9 + 48 >> 2];
   $8 = HEAP32[$9 + 52 >> 2];
   break label$1;
  }
  if (($11 | 0) == 65535 & $10 >>> 0 <= 4294967295 | $11 >>> 0 < 65535) {
   while (1) {
    $3 = $8 >>> 31;
    $1 = 0;
    $15 = $15 + -1 | 0;
    $12 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1;
    $8 = $12;
    $14 = $11 << 1 | $10 >>> 31;
    $10 = $10 << 1 | $3;
    $1 = $1 | $14;
    $11 = $1;
    if (($1 | 0) == 65536 & $10 >>> 0 < 0 | $1 >>> 0 < 65536) {
     continue;
    }
    break;
   }
  }
  $1 = $19 & 32768;
  if (($15 | 0) <= 0) {
   __multf3($9 - -64 | 0, $7, $8, $10, $11 & 65535 | ($1 | $15 + 120) << 16, 0, 0, 0, 1065811968);
   $3 = HEAP32[$9 + 72 >> 2];
   $4 = HEAP32[$9 + 76 >> 2];
   $7 = HEAP32[$9 + 64 >> 2];
   $8 = HEAP32[$9 + 68 >> 2];
   break label$1;
  }
  $3 = $10;
  $4 = $11 & 65535 | ($1 | $15) << 16;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
 global$0 = $9 + 128 | 0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 432 | 0;
 global$0 = $0;
 HEAP32[$0 + 424 >> 2] = 37;
 HEAP32[$0 + 428 >> 2] = 0;
 $10 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 424 | 1, 27674, HEAP32[$2 + 4 >> 2]);
 HEAP32[$0 + 380 >> 2] = $0 + 384;
 $8 = std____2____cloc_28_29();
 label$1 : {
  if ($10) {
   $9 = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 + 72 >> 2] = $6;
   HEAP32[$0 + 76 >> 2] = $7;
   $11 = $0 - -64 | 0;
   HEAP32[$11 >> 2] = $4;
   HEAP32[$11 + 4 >> 2] = $5;
   HEAP32[$0 + 48 >> 2] = $9;
   $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 48 | 0);
   break label$1;
  }
  HEAP32[$0 + 80 >> 2] = $4;
  HEAP32[$0 + 84 >> 2] = $5;
  HEAP32[$0 + 88 >> 2] = $6;
  HEAP32[$0 + 92 >> 2] = $7;
  $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 80 | 0);
 }
 HEAP32[$0 + 128 >> 2] = 269;
 $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 368 | 0, 0, $0 + 128 | 0);
 label$3 : {
  if (($8 | 0) >= 30) {
   $8 = std____2____cloc_28_29();
   label$5 : {
    if ($10) {
     $10 = HEAP32[$2 + 8 >> 2];
     HEAP32[$0 + 24 >> 2] = $6;
     HEAP32[$0 + 28 >> 2] = $7;
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $5;
     HEAP32[$0 >> 2] = $10;
     $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 380 | 0, $8, $0 + 424 | 0, $0);
     break label$5;
    }
    HEAP32[$0 + 32 >> 2] = $4;
    HEAP32[$0 + 36 >> 2] = $5;
    HEAP32[$0 + 40 >> 2] = $6;
    HEAP32[$0 + 44 >> 2] = $7;
    $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 380 | 0, $8, $0 + 424 | 0, $0 + 32 | 0);
   }
   $5 = HEAP32[$0 + 380 >> 2];
   if (!$5) {
    break label$3;
   }
   $4 = HEAP32[$9 >> 2];
   HEAP32[$9 >> 2] = $5;
   if ($4) {
    FUNCTION_TABLE[HEAP32[$9 + 4 >> 2]]($4);
   }
  }
  $4 = HEAP32[$0 + 380 >> 2];
  $5 = $4 + $8 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
  HEAP32[$0 + 128 >> 2] = 269;
  $4 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
  label$8 : {
   if (HEAP32[$0 + 380 >> 2] == ($0 + 384 | 0)) {
    $8 = $0 + 128 | 0;
    $6 = $0 + 384 | 0;
    break label$8;
   }
   $8 = dlmalloc($8 << 3);
   if (!$8) {
    break label$3;
   }
   $6 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $8;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($6);
   }
   $6 = HEAP32[$0 + 380 >> 2];
  }
  $7 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 104 >> 2] = $7;
  HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($6, $10, $5, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
  $5 = HEAP32[$0 + 104 >> 2];
  $6 = HEAP32[$5 + 4 >> 2] + -1 | 0;
  HEAP32[$5 + 4 >> 2] = $6;
  if (($6 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5);
  }
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2, $3);
  $1 = HEAP32[$4 >> 2];
  HEAP32[$4 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($1);
  }
  $1 = HEAP32[$9 >> 2];
  HEAP32[$9 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$9 + 4 >> 2]]($1);
  }
  global$0 = $0 + 432 | 0;
  return $2 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 27632)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $1;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 272 | 0;
 global$0 = $0;
 HEAP32[$0 + 256 >> 2] = $2;
 HEAP32[$0 + 264 >> 2] = $1;
 $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1, 27632, 27658, $0 + 224 | 0) | 0;
 $1 = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($2, HEAP8[$2 + 11 | 0] < 0 ? (HEAP32[$2 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $3 = $0;
 if (HEAP8[$2 + 11 | 0] < 0) {
  $1 = HEAP32[$2 >> 2];
 } else {
  $1 = $2;
 }
 HEAP32[$3 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  label$8 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
    break label$8;
   }
   $3 = HEAP32[$0 + 188 >> 2];
   if (HEAP8[$2 + 11 | 0] < 0) {
    $6 = HEAP32[$2 + 4 >> 2];
   } else {
    $6 = HEAPU8[$2 + 11 | 0];
   }
   if (($3 | 0) == ($6 + $1 | 0)) {
    $1 = $2;
    label$12 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $3 = HEAP32[$1 + 4 >> 2];
      break label$12;
     }
     $3 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $0;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$2 >> 2];
    } else {
     $1 = $2;
    }
    HEAP32[$6 + 188 >> 2] = $3 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $7, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$8;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($2, HEAP32[$0 + 188 >> 2] - $1 | 0);
 if (HEAP8[$2 + 11 | 0] < 0) {
  $1 = HEAP32[$2 >> 2];
 } else {
  $1 = $2;
 }
 $3 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $5;
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $3, $0) | 0) != 1) {
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
 global$0 = $0 + 272 | 0;
 return $1 | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 208 | 0, $2, $5 + 224 | 0, $5 + 223 | 0, $5 + 222 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP8[$5 + 7 | 0] = 1;
 HEAP8[$5 + 6 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $0;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $5 + 7 | 0, $5 + 6 | 0, $0, $5 + 188 | 0, HEAP8[$5 + 223 | 0], HEAP8[$5 + 222 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2 | !HEAPU8[$5 + 7 | 0]) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAPF64[$4 >> 3] = double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, HEAP32[$5 + 188 >> 2], $3);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 208 | 0, $2, $5 + 224 | 0, $5 + 223 | 0, $5 + 222 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP8[$5 + 7 | 0] = 1;
 HEAP8[$5 + 6 | 0] = 69;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$1 + 11 | 0] < 0) {
    $6 = HEAP32[$1 + 4 >> 2];
   } else {
    $6 = HEAPU8[$1 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $0 | 0)) {
    $0 = $1;
    label$10 : {
     if (HEAP8[$0 + 11 | 0] < 0) {
      $2 = HEAP32[$0 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$0 + 11 | 0];
    }
    $6 = $0;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $7 = HEAP32[$0 + 4 >> 2];
    } else {
     $7 = HEAPU8[$0 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $7 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$0 + 11 | 0] < 0) {
     $0 = HEAP32[$1 >> 2];
    } else {
     $0 = $1;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $0;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $5 + 7 | 0, $5 + 6 | 0, $0, $5 + 188 | 0, HEAP8[$5 + 223 | 0], HEAP8[$5 + 222 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2 | !HEAPU8[$5 + 7 | 0]) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAPF32[$4 >> 2] = float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, HEAP32[$5 + 188 >> 2], $3);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $0;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = global$0 - 624 | 0;
 global$0 = $0;
 HEAP32[$0 + 616 >> 2] = $1;
 HEAP32[$0 + 608 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = 270;
 $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
 $1 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 192 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 192 | 0);
 HEAP8[$0 + 191 | 0] = 0;
 label$1 : {
  if (!std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 616 | 0, $2, $3, $0 + 192 | 0, HEAP32[$4 + 4 >> 2], $5, $0 + 191 | 0, $1, $7, $0 + 196 | 0, $0 + 608 | 0)) {
   break label$1;
  }
  $2 = HEAPU8[27899] | HEAPU8[27900] << 8 | (HEAPU8[27901] << 16 | HEAPU8[27902] << 24);
  HEAP8[$0 + 183 | 0] = $2;
  HEAP8[$0 + 184 | 0] = $2 >>> 8;
  HEAP8[$0 + 185 | 0] = $2 >>> 16;
  HEAP8[$0 + 186 | 0] = $2 >>> 24;
  $2 = HEAPU8[27896] | HEAPU8[27897] << 8 | (HEAPU8[27898] << 16 | HEAPU8[27899] << 24);
  HEAP32[$0 + 176 >> 2] = HEAPU8[27892] | HEAPU8[27893] << 8 | (HEAPU8[27894] << 16 | HEAPU8[27895] << 24);
  HEAP32[$0 + 180 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0) | 0;
  HEAP32[$0 + 16 >> 2] = 269;
  $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$2 : {
   if ((HEAP32[$0 + 196 >> 2] - HEAP32[$7 >> 2] | 0) >= 393) {
    $3 = dlmalloc((HEAP32[$0 + 196 >> 2] - HEAP32[$7 >> 2] >> 2) + 2 | 0);
    $2 = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $3;
    if ($2) {
     FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
    }
    if (!HEAP32[$1 >> 2]) {
     break label$2;
    }
    $2 = HEAP32[$1 >> 2];
   }
   if (HEAPU8[$0 + 191 | 0]) {
    HEAP8[$2 | 0] = 45;
    $2 = $2 + 1 | 0;
   }
   $4 = HEAP32[$7 >> 2];
   while (1) {
    label$7 : {
     if ($4 >>> 0 >= HEAPU32[$0 + 196 >> 2]) {
      HEAP8[$2 | 0] = 0;
      HEAP32[$0 >> 2] = $6;
      if ((sscanf($0 + 16 | 0, $0) | 0) != 1) {
       break label$7;
      }
      $2 = HEAP32[$1 >> 2];
      HEAP32[$1 >> 2] = 0;
      if ($2) {
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
      }
      break label$1;
     }
     HEAP8[$2 | 0] = HEAPU8[($0 + 176 | 0) + (wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0 + 128 | 0, $0 + 168 | 0, $4) - ($0 + 128 | 0) >> 2) | 0];
     $2 = $2 + 1 | 0;
     $4 = $4 + 4 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29();
   abort();
  }
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 616 | 0, $0 + 608 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $3 = HEAP32[$0 + 616 >> 2];
 $1 = HEAP32[$0 + 192 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 $1 = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = 0;
 if ($1) {
  FUNCTION_TABLE[HEAP32[$7 + 4 >> 2]]($1);
 }
 global$0 = $0 + 624 | 0;
 return $3 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73)) {
   break label$1;
  }
  if ($1) {
   HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 288 >> 2];
  }
  $4 = $0 + 288 | 0;
  $5 = $0 + 8 | 0;
  $3 = $5;
  $7 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 2;
  while (1) {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
    if ($1) {
     $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($2 + 16 | 0, $4);
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
     HEAP32[$2 + 12 >> 2] = $3;
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($4, $6);
     if ($3) {
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 12 | 0);
      HEAP32[$2 + 8 >> 2] = $3;
      if (HEAPU8[$3 + 4 | 0] == 28) {
       $8 = HEAP32[$3 + 12 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$3 + 8 >> 2];
       HEAP32[$2 + 4 >> 2] = $8;
       HEAP32[$2 + 8 >> 2] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2);
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $2 + 8 | 0);
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($6);
      continue;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($6);
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
    HEAP32[$2 + 16 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 16 | 0);
    continue;
   }
   break;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 16 | 0, $0, $7);
  $9 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 16 | 0);
 }
 global$0 = $2 - -64 | 0;
 return $9;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 27632)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 HEAP32[$4 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $1;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 256 | 0;
 global$0 = $0;
 HEAP32[$0 + 248 >> 2] = 37;
 HEAP32[$0 + 252 >> 2] = 0;
 $10 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 248 | 1, 27674, HEAP32[$2 + 4 >> 2]);
 HEAP32[$0 + 204 >> 2] = $0 + 208;
 $8 = std____2____cloc_28_29();
 label$1 : {
  if ($10) {
   $9 = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 + 72 >> 2] = $6;
   HEAP32[$0 + 76 >> 2] = $7;
   $11 = $0 - -64 | 0;
   HEAP32[$11 >> 2] = $4;
   HEAP32[$11 + 4 >> 2] = $5;
   HEAP32[$0 + 48 >> 2] = $9;
   $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 48 | 0);
   break label$1;
  }
  HEAP32[$0 + 80 >> 2] = $4;
  HEAP32[$0 + 84 >> 2] = $5;
  HEAP32[$0 + 88 >> 2] = $6;
  HEAP32[$0 + 92 >> 2] = $7;
  $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 80 | 0);
 }
 HEAP32[$0 + 128 >> 2] = 269;
 $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 192 | 0, 0, $0 + 128 | 0);
 label$3 : {
  if (($8 | 0) >= 30) {
   $8 = std____2____cloc_28_29();
   label$5 : {
    if ($10) {
     $10 = HEAP32[$2 + 8 >> 2];
     HEAP32[$0 + 24 >> 2] = $6;
     HEAP32[$0 + 28 >> 2] = $7;
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $5;
     HEAP32[$0 >> 2] = $10;
     $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 204 | 0, $8, $0 + 248 | 0, $0);
     break label$5;
    }
    HEAP32[$0 + 32 >> 2] = $4;
    HEAP32[$0 + 36 >> 2] = $5;
    HEAP32[$0 + 40 >> 2] = $6;
    HEAP32[$0 + 44 >> 2] = $7;
    $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 204 | 0, $8, $0 + 248 | 0, $0 + 32 | 0);
   }
   $5 = HEAP32[$0 + 204 >> 2];
   if (!$5) {
    break label$3;
   }
   $4 = HEAP32[$9 >> 2];
   HEAP32[$9 >> 2] = $5;
   if ($4) {
    FUNCTION_TABLE[HEAP32[$9 + 4 >> 2]]($4);
   }
  }
  $4 = HEAP32[$0 + 204 >> 2];
  $5 = $4 + $8 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
  HEAP32[$0 + 128 >> 2] = 269;
  $4 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
  label$8 : {
   if (HEAP32[$0 + 204 >> 2] == ($0 + 208 | 0)) {
    $8 = $0 + 128 | 0;
    $6 = $0 + 208 | 0;
    break label$8;
   }
   $8 = dlmalloc($8 << 1);
   if (!$8) {
    break label$3;
   }
   $6 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $8;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($6);
   }
   $6 = HEAP32[$0 + 204 >> 2];
  }
  $7 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 104 >> 2] = $7;
  HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($6, $10, $5, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
  $5 = HEAP32[$0 + 104 >> 2];
  $6 = HEAP32[$5 + 4 >> 2] + -1 | 0;
  HEAP32[$5 + 4 >> 2] = $6;
  if (($6 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5);
  }
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2, $3);
  $1 = HEAP32[$4 >> 2];
  HEAP32[$4 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($1);
  }
  $1 = HEAP32[$9 >> 2];
  HEAP32[$9 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$9 + 4 >> 2]]($1);
  }
  global$0 = $0 + 256 | 0;
  return $2 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 36148);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $3;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1 + 32 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 36151);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if (HEAP32[$1 + 32 >> 2] == HEAP32[$1 + 36 >> 2]) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1 + 32 | 0);
 }
 global$0 = $1 + 48 | 0;
 return $4;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 27632)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP16[$4 >> 1] = unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $1;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 27632)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $1 = HEAP32[$0 >> 2];
      if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
       $1 = HEAP8[$1 | 0];
      } else {
       $1 = 0;
      }
      $1 = $1 << 24 >> 24;
      $3 = $1 + -74 | 0;
      if ($3 >>> 0 > 2) {
       if (($1 | 0) != 88) {
        break label$5;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
       if (!$1) {
        break label$2;
       }
       $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69);
       global$0 = $2 + 16 | 0;
       return $0 ? $1 : 0;
      }
      switch ($3 - 1 | 0) {
      case 1:
       break label$4;
      case 0:
       break label$5;
      default:
       break label$3;
      }
     }
     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
     break label$1;
    }
    $1 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 1) {
     $1 = HEAPU8[$1 + 1 | 0];
    } else {
     $1 = 0;
    }
    if (($1 & 255) == 90) {
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
     if (!$1) {
      break label$2;
     }
     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69) ? $1 : 0;
     break label$1;
    }
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   $1 = $0 + 8 | 0;
   $3 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2;
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
     HEAP32[$2 + 12 >> 2] = $4;
     if (!$4) {
      break label$2;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 12 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2, $0, $3);
   $0 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 368 | 0, $2);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 HEAP32[$5 + 256 >> 2] = $1;
 HEAP32[$5 + 264 >> 2] = $0;
 $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
 $2 = $5;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $1 = HEAP32[$0 >> 2];
 } else {
  $1 = $0;
 }
 HEAP32[$2 + 188 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $5 + 16;
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  label$6 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5 + 264 | 0, $5 + 256 | 0)) {
    break label$6;
   }
   $2 = HEAP32[$5 + 188 >> 2];
   if (HEAP8[$0 + 11 | 0] < 0) {
    $6 = HEAP32[$0 + 4 >> 2];
   } else {
    $6 = HEAPU8[$0 + 11 | 0];
   }
   if (($2 | 0) == ($6 + $1 | 0)) {
    $1 = $0;
    label$10 : {
     if (HEAP8[$1 + 11 | 0] < 0) {
      $2 = HEAP32[$1 + 4 >> 2];
      break label$10;
     }
     $2 = HEAPU8[$1 + 11 | 0];
    }
    $6 = $1;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $8 = HEAP32[$1 + 4 >> 2];
    } else {
     $8 = HEAPU8[$1 + 11 | 0];
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($6, $8 << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($1, HEAP8[$1 + 11 | 0] < 0 ? (HEAP32[$1 + 8 >> 2] & 2147483647) + -1 | 0 : 10);
    $6 = $5;
    if (HEAP8[$1 + 11 | 0] < 0) {
     $1 = HEAP32[$0 >> 2];
    } else {
     $1 = $0;
    }
    HEAP32[$6 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5 + 264 | 0), $7, $1, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 27632)) {
    break label$6;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 264 | 0);
   continue;
  }
  break;
 }
 if (HEAP8[$5 + 219 | 0] < 0) {
  $2 = HEAP32[$5 + 212 >> 2];
 } else {
  $2 = HEAPU8[$5 + 219 | 0];
 }
 label$18 : {
  if (!$2) {
   break label$18;
  }
  $2 = HEAP32[$5 + 12 >> 2];
  if (($2 - ($5 + 16 | 0) | 0) > 159) {
   break label$18;
  }
  HEAP32[$5 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
 }
 HEAP32[$4 >> 2] = long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($1, HEAP32[$5 + 188 >> 2], $3, $7);
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5 + 264 | 0, $5 + 256 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $1 = HEAP32[$5 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
 global$0 = $5 + 272 | 0;
 return $1;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0;
 $9 = global$0 - 32 | 0;
 global$0 = $9;
 HEAP32[$9 + 16 >> 2] = $2;
 HEAP32[$9 + 24 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$9 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($9 + 8 | 0);
 $2 = HEAP32[$9 + 8 >> 2];
 $8 = HEAP32[$2 + 4 >> 2] + -1 | 0;
 HEAP32[$2 + 4 >> 2] = $8;
 if (($8 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
 }
 HEAP32[$4 >> 2] = 0;
 $2 = 0;
 label$3 : {
  while (1) {
   if ($2 | ($6 | 0) == ($7 | 0)) {
    break label$3;
   }
   label$5 : {
    if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($9 + 24 | 0, $9 + 16 | 0)) {
     break label$5;
    }
    label$6 : {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($1, HEAP32[$6 >> 2], 0) | 0) == 37) {
      $2 = $6 + 4 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$5;
      }
      $10 = 0;
      $8 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($1, HEAP32[$2 >> 2], 0) | 0;
      label$8 : {
       if (!(($8 | 0) == 69 | ($8 & 255) == 48)) {
        $2 = $6;
        break label$8;
       }
       if (($6 + 8 | 0) == ($7 | 0)) {
        break label$5;
       }
       $10 = $8;
       $8 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($1, HEAP32[$6 + 8 >> 2], 0) | 0;
      }
      HEAP32[$9 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$9 + 24 >> 2], HEAP32[$9 + 16 >> 2], $3, $4, $5, $8, $10);
      $6 = $2 + 8 | 0;
      break label$6;
     }
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, 8192, HEAP32[$6 >> 2])) {
      while (1) {
       label$12 : {
        $6 = $6 + 4 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$12;
        }
        if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, 8192, HEAP32[$6 >> 2])) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($9 + 24 | 0, $9 + 16 | 0)) {
        break label$6;
       }
       $2 = $1;
       $8 = HEAP32[$9 + 24 >> 2];
       $10 = HEAP32[$8 + 12 >> 2];
       label$15 : {
        if (($10 | 0) == HEAP32[$8 + 16 >> 2]) {
         $8 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 36 >> 2]]($8) | 0;
         break label$15;
        }
        $8 = HEAP32[$10 >> 2];
       }
       if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($2, 8192, $8)) {
        break label$6;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($9 + 24 | 0);
       continue;
      }
     }
     $2 = $1;
     $8 = HEAP32[$9 + 24 >> 2];
     $10 = HEAP32[$8 + 12 >> 2];
     label$17 : {
      if (($10 | 0) == HEAP32[$8 + 16 >> 2]) {
       $8 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 36 >> 2]]($8) | 0;
       break label$17;
      }
      $8 = HEAP32[$10 >> 2];
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($2, $8) | 0) == (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, HEAP32[$6 >> 2]) | 0)) {
      $6 = $6 + 4 | 0;
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($9 + 24 | 0);
      break label$6;
     }
     HEAP32[$4 >> 2] = 4;
    }
    $2 = HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($9 + 24 | 0, $9 + 16 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 global$0 = $9 + 32 | 0;
 return HEAP32[$9 + 24 >> 2];
}
function BuildControlBase__myPaintGL_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, wasm2js_f64$0 = 0, wasm2js_f64$1 = 0, wasm2js_i32$0 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 glClearColor(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(1)));
 glClear(16640);
 $5 = HEAP32[$0 + 4 >> 2];
 $2 = $5;
 $9 = HEAP32[$2 + 168 >> 2];
 $6 = $4 - -64 | 0;
 $3 = $6;
 HEAP32[$3 >> 2] = HEAP32[$2 + 164 >> 2];
 HEAP32[$3 + 4 >> 2] = $9;
 $3 = HEAP32[$2 + 160 >> 2];
 HEAP32[$4 + 56 >> 2] = HEAP32[$2 + 156 >> 2];
 HEAP32[$4 + 60 >> 2] = $3;
 $3 = HEAP32[$2 + 152 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$2 + 148 >> 2];
 HEAP32[$4 + 52 >> 2] = $3;
 $3 = HEAP32[$2 + 144 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[$2 + 140 >> 2];
 HEAP32[$4 + 44 >> 2] = $3;
 $3 = HEAP32[$2 + 136 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 132 >> 2];
 HEAP32[$4 + 36 >> 2] = $3;
 $3 = HEAP32[$2 + 128 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$2 + 124 >> 2];
 HEAP32[$4 + 28 >> 2] = $3;
 $3 = HEAP32[$2 + 120 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$2 + 116 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 $3 = HEAP32[$2 + 112 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 108 >> 2];
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 72 >> 2] = 0;
 $3 = HEAP32[$2 + 180 >> 2];
 label$1 : {
  if ($3 >>> 0 < HEAPU32[$2 + 184 >> 2]) {
   $2 = HEAP32[$4 + 12 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $2 = HEAP32[$6 + 4 >> 2];
   HEAP32[$3 + 56 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$3 + 60 >> 2] = $2;
   $2 = HEAP32[$4 + 60 >> 2];
   HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 56 >> 2];
   HEAP32[$3 + 52 >> 2] = $2;
   $2 = HEAP32[$4 + 52 >> 2];
   HEAP32[$3 + 40 >> 2] = HEAP32[$4 + 48 >> 2];
   HEAP32[$3 + 44 >> 2] = $2;
   $2 = HEAP32[$4 + 44 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 40 >> 2];
   HEAP32[$3 + 36 >> 2] = $2;
   $2 = HEAP32[$4 + 36 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$3 + 28 >> 2] = $2;
   $2 = HEAP32[$4 + 28 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = $2;
   $2 = HEAP32[$4 + 20 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$3 + 12 >> 2] = $2;
   HEAP32[$3 + 64 >> 2] = HEAP32[$4 + 72 >> 2];
   HEAP32[$5 + 180 >> 2] = HEAP32[$5 + 180 >> 2] + 68;
   break label$1;
  }
  void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($5 + 176 | 0, $4 + 8 | 0);
 }
 $2 = HEAP32[$0 + 4 >> 2];
 $6 = $2 + 108 | 0;
 $7 = +HEAP32[$2 + 312 >> 2] / 100;
 $8 = Math_fround((wasm2js_f64$0 = $7 * $7, wasm2js_f64$1 = pow($7) + -2, wasm2js_i32$0 = $7 <= 1, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1) * +HEAPF32[$0 + 1284 >> 2]);
 MatStack__scale_28float_2c_20float_2c_20float_29($6, $8, $8, $8);
 Mat4__translate_28float_2c_20float_2c_20float_29(HEAP32[$0 + 4 >> 2] + 108 | 0, Math_fround(Math_fround(HEAPF32[$0 + 1272 >> 2] + HEAPF32[$0 + 1260 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 1276 >> 2] + HEAPF32[$0 + 1264 >> 2]) * Math_fround(-.5)), Math_fround(Math_fround(HEAPF32[$0 + 1280 >> 2] + HEAPF32[$0 + 1268 >> 2]) * Math_fround(-.5)));
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1);
 $2 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$2 + 180 >> 2];
 if (($3 | 0) != HEAP32[$2 + 176 >> 2]) {
  $1 = $3 + -68 | 0;
  if (($1 | 0) != ($2 + 108 | 0)) {
   $0 = $1;
   $5 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 108 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 112 >> 2] = $5;
   $5 = HEAP32[$0 + 60 >> 2];
   HEAP32[$2 + 164 >> 2] = HEAP32[$0 + 56 >> 2];
   HEAP32[$2 + 168 >> 2] = $5;
   $5 = HEAP32[$0 + 52 >> 2];
   HEAP32[$2 + 156 >> 2] = HEAP32[$0 + 48 >> 2];
   HEAP32[$2 + 160 >> 2] = $5;
   $5 = HEAP32[$0 + 44 >> 2];
   HEAP32[$2 + 148 >> 2] = HEAP32[$0 + 40 >> 2];
   HEAP32[$2 + 152 >> 2] = $5;
   $5 = HEAP32[$0 + 36 >> 2];
   HEAP32[$2 + 140 >> 2] = HEAP32[$0 + 32 >> 2];
   HEAP32[$2 + 144 >> 2] = $5;
   $5 = HEAP32[$0 + 28 >> 2];
   HEAP32[$2 + 132 >> 2] = HEAP32[$0 + 24 >> 2];
   HEAP32[$2 + 136 >> 2] = $5;
   $5 = HEAP32[$0 + 20 >> 2];
   HEAP32[$2 + 124 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$2 + 128 >> 2] = $5;
   $5 = HEAP32[$0 + 12 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$2 + 120 >> 2] = $5;
  }
  $0 = HEAP32[$3 + -4 >> 2];
  HEAP32[$2 + 180 >> 2] = $1;
  HEAP32[$2 + 172 >> 2] = $0;
  global$0 = $4 + 80 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16353);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function BuildControlBase__BuildControlBase_28BaseGLWidget__2c_20CubeDocBase__29($0, $1, $2) {
 HEAP32[$0 + 20 >> 2] = -1;
 HEAP8[$0 + 18 | 0] = 0;
 HEAP16[$0 + 16 >> 1] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = 14800;
 $2 = $0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 164 >> 2] = 0;
 HEAP32[$2 + 168 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 14864;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 + 172 >> 2] = 0;
 HEAP32[$2 + 176 >> 2] = 0;
 HEAP32[$2 + 180 >> 2] = 0;
 HEAP8[$2 + 29 | 0] = 0;
 HEAP8[$2 + 30 | 0] = 0;
 HEAP8[$2 + 31 | 0] = 0;
 HEAP8[$2 + 32 | 0] = 0;
 HEAP8[$2 + 33 | 0] = 0;
 HEAP8[$2 + 34 | 0] = 0;
 HEAP8[$2 + 35 | 0] = 0;
 HEAP8[$2 + 36 | 0] = 0;
 memset($2 + 40 | 0, 0, 123);
 HEAP32[$2 + 368 >> 2] = 0;
 HEAP32[$2 + 372 >> 2] = 0;
 HEAP32[$2 + 240 >> 2] = 0;
 HEAP32[$2 + 244 >> 2] = 34963;
 HEAP32[$2 + 232 >> 2] = 34962;
 HEAP32[$2 + 236 >> 2] = 0;
 HEAP32[$2 + 224 >> 2] = 0;
 HEAP32[$2 + 228 >> 2] = 0;
 HEAP32[$2 + 216 >> 2] = 0;
 HEAP32[$2 + 220 >> 2] = 34962;
 HEAP32[$2 + 208 >> 2] = 34962;
 HEAP32[$2 + 212 >> 2] = 0;
 HEAP32[$2 + 200 >> 2] = 0;
 HEAP32[$2 + 204 >> 2] = 0;
 HEAP32[$2 + 192 >> 2] = 0;
 HEAP32[$2 + 196 >> 2] = 34962;
 HEAP32[$2 + 184 >> 2] = 34962;
 HEAP32[$2 + 188 >> 2] = 0;
 HEAP32[$2 + 376 >> 2] = 0;
 HEAP32[$2 + 380 >> 2] = 0;
 HEAP32[$2 + 384 >> 2] = 0;
 memset($2 + 248 | 0, 0, 119);
 HEAP32[$2 + 572 >> 2] = 0;
 HEAP32[$2 + 576 >> 2] = 0;
 HEAP32[$2 + 444 >> 2] = 0;
 HEAP32[$2 + 448 >> 2] = 34963;
 HEAP32[$2 + 436 >> 2] = 34962;
 HEAP32[$2 + 440 >> 2] = 0;
 HEAP32[$2 + 428 >> 2] = 0;
 HEAP32[$2 + 432 >> 2] = 0;
 HEAP32[$2 + 420 >> 2] = 0;
 HEAP32[$2 + 424 >> 2] = 34962;
 HEAP32[$2 + 412 >> 2] = 34962;
 HEAP32[$2 + 416 >> 2] = 0;
 HEAP32[$2 + 404 >> 2] = 0;
 HEAP32[$2 + 408 >> 2] = 0;
 HEAP32[$2 + 396 >> 2] = 0;
 HEAP32[$2 + 400 >> 2] = 34962;
 HEAP32[$2 + 388 >> 2] = 34962;
 HEAP32[$2 + 392 >> 2] = 0;
 HEAP32[$2 + 580 >> 2] = 0;
 HEAP32[$2 + 584 >> 2] = 0;
 HEAP32[$2 + 588 >> 2] = 0;
 memset($2 + 452 | 0, 0, 119);
 HEAP32[$2 + 776 >> 2] = 0;
 HEAP32[$2 + 780 >> 2] = 0;
 HEAP32[$2 + 648 >> 2] = 0;
 HEAP32[$2 + 652 >> 2] = 34963;
 HEAP32[$2 + 640 >> 2] = 34962;
 HEAP32[$2 + 644 >> 2] = 0;
 HEAP32[$2 + 632 >> 2] = 0;
 HEAP32[$2 + 636 >> 2] = 0;
 HEAP32[$2 + 624 >> 2] = 0;
 HEAP32[$2 + 628 >> 2] = 34962;
 HEAP32[$2 + 616 >> 2] = 34962;
 HEAP32[$2 + 620 >> 2] = 0;
 HEAP32[$2 + 608 >> 2] = 0;
 HEAP32[$2 + 612 >> 2] = 0;
 HEAP32[$2 + 600 >> 2] = 0;
 HEAP32[$2 + 604 >> 2] = 34962;
 HEAP32[$2 + 592 >> 2] = 34962;
 HEAP32[$2 + 596 >> 2] = 0;
 HEAP32[$2 + 784 >> 2] = 0;
 HEAP32[$2 + 788 >> 2] = 0;
 HEAP32[$2 + 792 >> 2] = 0;
 memset($2 + 656 | 0, 0, 119);
 HEAP32[$2 + 980 >> 2] = 0;
 HEAP32[$2 + 984 >> 2] = 0;
 HEAP32[$2 + 852 >> 2] = 0;
 HEAP32[$2 + 856 >> 2] = 34963;
 HEAP32[$2 + 844 >> 2] = 34962;
 HEAP32[$2 + 848 >> 2] = 0;
 HEAP32[$2 + 836 >> 2] = 0;
 HEAP32[$2 + 840 >> 2] = 0;
 HEAP32[$2 + 828 >> 2] = 0;
 HEAP32[$2 + 832 >> 2] = 34962;
 HEAP32[$2 + 820 >> 2] = 34962;
 HEAP32[$2 + 824 >> 2] = 0;
 HEAP32[$2 + 812 >> 2] = 0;
 HEAP32[$2 + 816 >> 2] = 0;
 HEAP32[$2 + 804 >> 2] = 0;
 HEAP32[$2 + 808 >> 2] = 34962;
 HEAP32[$2 + 796 >> 2] = 34962;
 HEAP32[$2 + 800 >> 2] = 0;
 HEAP32[$2 + 988 >> 2] = 0;
 HEAP32[$2 + 992 >> 2] = 0;
 HEAP32[$2 + 996 >> 2] = 0;
 memset($2 + 860 | 0, 0, 119);
 HEAP32[$2 + 1064 >> 2] = 0;
 $1 = $2 + 1056 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 34963;
 $1 = $2 + 1048 | 0;
 HEAP32[$1 >> 2] = 34962;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $2 + 1040 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $2 + 1032 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 34962;
 $1 = $2 + 1024 | 0;
 HEAP32[$1 >> 2] = 34962;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$2 + 1016 >> 2] = 0;
 HEAP32[$2 + 1020 >> 2] = 0;
 HEAP32[$2 + 1008 >> 2] = 0;
 HEAP32[$2 + 1012 >> 2] = 34962;
 HEAP32[$2 + 1e3 >> 2] = 34962;
 HEAP32[$2 + 1004 >> 2] = 0;
 BuildProgram__BuildProgram_28_29($2 + 1068 | 0);
 $1 = $2 + 1276 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $2 + 1268 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $2 + 1260 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP16[$2 + 1292 >> 1] = 256;
 HEAP32[$2 + 1284 >> 2] = 1065353216;
 HEAP32[$2 + 1288 >> 2] = 0;
 BuildControlBase__reCalcBldMinMax_28_29($2);
 $1 = HEAP32[HEAP32[$2 + 12 >> 2] + 128 >> 2];
 label$1 : {
  if (HEAPU8[$1 + 375332 | 0]) {
   $2 = HEAP32[$1 + 375328 >> 2];
   break label$1;
  }
  $2 = Shape__generate_28BuildWorld_20const__29($1 + 375140 | 0, $1);
  HEAP8[$1 + 375332 | 0] = 1;
  HEAP32[$1 + 375328 >> 2] = $2;
 }
 if (($2 | 0) == 3) {
  HEAP32[$0 + 40 >> 2] = 1065353216;
  HEAP32[$0 + 44 >> 2] = -1110651699;
 }
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $8 = global$0 - 32 | 0;
 global$0 = $8;
 HEAP32[$8 + 16 >> 2] = $2;
 HEAP32[$8 + 24 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$8 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $9 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($8 + 8 | 0);
 $1 = HEAP32[$8 + 8 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 HEAP32[$4 >> 2] = 0;
 $2 = 0;
 label$3 : {
  while (1) {
   if ($2 | ($6 | 0) == ($7 | 0)) {
    break label$3;
   }
   label$5 : {
    if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
     break label$5;
    }
    label$6 : {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 36 >> 2]]($9, HEAP8[$6 | 0], 0) | 0) == 37) {
      $2 = $6 + 1 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$5;
      }
      $10 = 0;
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 36 >> 2]]($9, HEAP8[$2 | 0], 0) | 0;
      label$8 : {
       if (!(($1 | 0) == 69 | ($1 & 255) == 48)) {
        $2 = $6;
        break label$8;
       }
       if (($6 + 2 | 0) == ($7 | 0)) {
        break label$5;
       }
       $10 = $1;
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 36 >> 2]]($9, HEAP8[$6 + 2 | 0], 0) | 0;
      }
      HEAP32[$8 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3, $4, $5, $1, $10);
      $6 = $2 + 2 | 0;
      break label$6;
     }
     $1 = HEAP8[$6 | 0];
     if (($1 | 0) >= 0) {
      $1 = HEAPU16[HEAP32[$9 + 8 >> 2] + (($1 & 255) << 1) >> 1] & 8192;
     } else {
      $1 = 0;
     }
     if ($1) {
      while (1) {
       label$14 : {
        $6 = $6 + 1 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$14;
        }
        $1 = HEAP8[$6 | 0];
        if (($1 | 0) >= 0) {
         $1 = HEAPU16[HEAP32[$9 + 8 >> 2] + (($1 & 255) << 1) >> 1] & 8192;
        } else {
         $1 = 0;
        }
        if ($1) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
        break label$6;
       }
       $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0);
       if (($1 | 0) >= 0) {
        $1 = (HEAPU16[HEAP32[$9 + 8 >> 2] + (($1 & 255) << 1) >> 1] & 8192) != 0;
       } else {
        $1 = 0;
       }
       if (!$1) {
        break label$6;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
       continue;
      }
     }
     if (((wasm2js_i32$1 = $9, wasm2js_i32$2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0), wasm2js_i32$0 = HEAP32[HEAP32[$9 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == (FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 12 >> 2]]($9, HEAP8[$6 | 0]) | 0)) {
      $6 = $6 + 1 | 0;
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
      break label$6;
     }
     HEAP32[$4 >> 2] = 4;
    }
    $2 = HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 global$0 = $8 + 32 | 0;
 return HEAP32[$8 + 24 >> 2];
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = global$0 - 288 | 0;
 global$0 = $0;
 HEAP32[$0 + 280 >> 2] = $1;
 HEAP32[$0 + 272 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = 270;
 $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
 $1 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 144 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 144 | 0);
 HEAP8[$0 + 143 | 0] = 0;
 label$1 : {
  if (!std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 280 | 0, $2, $3, $0 + 144 | 0, HEAP32[$4 + 4 >> 2], $5, $0 + 143 | 0, $1, $7, $0 + 148 | 0, $0 + 260 | 0)) {
   break label$1;
  }
  $2 = HEAPU8[27899] | HEAPU8[27900] << 8 | (HEAPU8[27901] << 16 | HEAPU8[27902] << 24);
  HEAP8[$0 + 135 | 0] = $2;
  HEAP8[$0 + 136 | 0] = $2 >>> 8;
  HEAP8[$0 + 137 | 0] = $2 >>> 16;
  HEAP8[$0 + 138 | 0] = $2 >>> 24;
  $2 = HEAPU8[27896] | HEAPU8[27897] << 8 | (HEAPU8[27898] << 16 | HEAPU8[27899] << 24);
  HEAP32[$0 + 128 >> 2] = HEAPU8[27892] | HEAPU8[27893] << 8 | (HEAPU8[27894] << 16 | HEAPU8[27895] << 24);
  HEAP32[$0 + 132 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0) | 0;
  HEAP32[$0 + 16 >> 2] = 269;
  $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$2 : {
   if ((HEAP32[$0 + 148 >> 2] - HEAP32[$7 >> 2] | 0) >= 99) {
    $3 = dlmalloc((HEAP32[$0 + 148 >> 2] - HEAP32[$7 >> 2] | 0) + 2 | 0);
    $2 = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $3;
    if ($2) {
     FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
    }
    if (!HEAP32[$1 >> 2]) {
     break label$2;
    }
    $2 = HEAP32[$1 >> 2];
   }
   if (HEAPU8[$0 + 143 | 0]) {
    HEAP8[$2 | 0] = 45;
    $2 = $2 + 1 | 0;
   }
   $4 = HEAP32[$7 >> 2];
   while (1) {
    label$7 : {
     if ($4 >>> 0 >= HEAPU32[$0 + 148 >> 2]) {
      HEAP8[$2 | 0] = 0;
      HEAP32[$0 >> 2] = $6;
      if ((sscanf($0 + 16 | 0, $0) | 0) != 1) {
       break label$7;
      }
      $2 = HEAP32[$1 >> 2];
      HEAP32[$1 >> 2] = 0;
      if ($2) {
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
      }
      break label$1;
     }
     HEAP8[$2 | 0] = HEAPU8[((char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0 + 118 | 0, $0 + 128 | 0, $4) - $0 | 0) + $0 | 0) + 10 | 0];
     $2 = $2 + 1 | 0;
     $4 = $4 + 1 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29();
   abort();
  }
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 280 | 0, $0 + 272 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $3 = HEAP32[$0 + 280 >> 2];
 $1 = HEAP32[$0 + 144 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 $1 = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = 0;
 if ($1) {
  FUNCTION_TABLE[HEAP32[$7 + 4 >> 2]]($1);
 }
 global$0 = $0 + 288 | 0;
 return $3 | 0;
}
function Shape__makeVolumeAndFacing_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 $1 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$0 + 4 >> 2];
 $2 = (HEAP32[$0 >> 2] / 4 | 0) + 2 | 0;
 HEAP32[$4 + 32 >> 2] = $2;
 $6 = (($6 | 0) / 4 | 0) + 2 | 0;
 HEAP32[$4 + 36 >> 2] = $6;
 $6 = Math_imul($2, $6);
 HEAP32[$4 + 44 >> 2] = $6;
 $1 = (($1 | 0) / 4 | 0) + 2 | 0;
 HEAP32[$4 + 40 >> 2] = $1;
 $1 = Math_imul($1, $6);
 $6 = operator_20new_28unsigned_20long_29(($1 | 0) > -1 ? $1 : -1);
 if ($1) {
  $2 = $1 + $6 | 0;
  $1 = $6;
  while (1) {
   HEAP8[$1 | 0] = HEAPU8[$1 | 0] & 128;
   $1 = $1 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$4 + 48 >> 2] = $6;
 if (HEAP32[$0 + 12 >> 2] >= 1) {
  $2 = 0;
  while (1) {
   $3 = HEAP32[$0 + 28 >> 2] + Math_imul($2, 188) | 0;
   $5 = HEAP32[$3 + 8 >> 2];
   $7 = HEAP32[$3 + 12 >> 2];
   $1 = HEAP32[$3 >> 2];
   $3 = HEAP32[$3 + 4 >> 2] / 4 | 0;
   $8 = $3 + 1 | 0;
   HEAP32[$4 + 16 >> 2] = $8;
   HEAP32[$4 >> 2] = $1 ? $8 : $3;
   $3 = ($7 | 0) / 4 | 0;
   $7 = $3 + 1 | 0;
   HEAP32[$4 + 24 >> 2] = $7;
   HEAP32[$4 + 8 >> 2] = ($1 | 0) == 2 ? $3 : $7;
   $3 = ($5 | 0) / 4 | 0;
   $5 = $3 + 1 | 0;
   HEAP32[$4 + 20 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = ($1 | 0) == 1 ? $3 : $5;
   BoundedBlockSpace3D__erectWalls_28int_2c_20Vec3i_2c_20Vec3i_29($4 + 32 | 0, $1, $4 + 16 | 0, $4);
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 $7 = HEAP32[$4 + 32 >> 2];
 label$5 : {
  if (($7 | 0) < 1) {
   $3 = 0;
   break label$5;
  }
  $3 = 0;
  $12 = HEAP32[$4 + 36 >> 2];
  if (($12 | 0) < 1) {
   break label$5;
  }
  $13 = HEAP32[$4 + 44 >> 2];
  $14 = HEAP32[$4 + 40 >> 2];
  $8 = 0;
  while (1) {
   $9 = 0;
   if (($14 | 0) > 0) {
    while (1) {
     $15 = Math_imul($7, $9) + $8 | 0;
     $2 = -1;
     $11 = 1;
     $5 = 0;
     while (1) {
      $1 = $2;
      $2 = HEAPU8[$6 + (Math_imul($5, $13) + $15 | 0) | 0];
      $1 = $2 & 64 ? $5 : $1;
      label$11 : {
       if (!($2 & 32)) {
        $2 = $1;
        break label$11;
       }
       $2 = -1;
       if (($1 | 0) == -1) {
        break label$11;
       }
       if (!(($11 | 0) != 1 | ($1 | 0) > ($5 | 0))) {
        while (1) {
         $10 = $6 + (Math_imul($1, $13) + $15 | 0) | 0;
         HEAP8[$10 | 0] = HEAPU8[$10 | 0] | 1;
         $3 = $3 + 1 | 0;
         $10 = ($1 | 0) < ($5 | 0);
         $1 = $1 + 1 | 0;
         if ($10) {
          continue;
         }
         break;
        }
       }
       $11 = 1 - $11 | 0;
      }
      $5 = $5 + 1 | 0;
      if (($14 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
     $9 = $9 + 1 | 0;
     if (($12 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $8 = $8 + 1 | 0;
   if (($7 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 116 >> 2] = $3;
 $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 8816, 5), HEAP32[$0 + 116 >> 2]);
 $2 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 28 >> 2];
 HEAP32[$4 + 56 >> 2] = $2;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
 $2 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 56 | 0, 51440);
 $5 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, 10) | 0;
 $2 = HEAP32[$4 + 56 >> 2];
 $3 = HEAP32[$2 + 4 >> 2] + -1 | 0;
 HEAP32[$2 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $5);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
 $2 = HEAP32[$0 + 12 >> 2];
 if (($2 | 0) >= 1) {
  $5 = HEAP32[$0 + 28 >> 2];
  $3 = 0;
  $8 = HEAP32[$4 + 44 >> 2];
  while (1) {
   $0 = $5 + Math_imul($3, 188) | 0;
   $1 = HEAP8[($6 + ((Math_imul($7, (HEAP32[$0 + 8 >> 2] / 4 | 0) + 1 | 0) + (HEAP32[$0 + 4 >> 2] / 4 | 0) | 0) + Math_imul($8, (HEAP32[$0 + 12 >> 2] / 4 | 0) + 1 | 0) | 0) | 0) + 1 | 0] & 1;
   HEAP32[$0 + 16 >> 2] = $1;
   if (HEAP32[$0 >> 2] == 2) {
    HEAP32[$0 + 16 >> 2] = $1 ^ 1;
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 dlfree($6);
 global$0 = $4 - -64 | 0;
}
function SHA1__getDigest_28unsigned_20char__2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $7 = global$0 + -64 | 0;
 global$0 = $7;
 $3 = 1;
 $6 = HEAP32[$0 + 88 >> 2];
 HEAP32[$0 + 88 >> 2] = $6 + 1;
 $8 = $6 >>> 29;
 $2 = 15182;
 label$1 : {
  label$2 : {
   while (1) {
    $4 = HEAP32[$0 + 84 >> 2];
    if (($4 | 0) >= 64) {
     break label$2;
    }
    $5 = ($0 + $4 | 0) + 20 | 0;
    $4 = 64 - $4 | 0;
    $4 = ($3 | 0) < ($4 | 0) ? $3 : $4;
    memcpy($5, $2, $4);
    $5 = $4 + HEAP32[$0 + 84 >> 2] | 0;
    HEAP32[$0 + 84 >> 2] = $5;
    $3 = $3 - $4 | 0;
    if (($5 | 0) == 64) {
     SHA1__process_28_29($0);
    }
    $2 = $2 + $4 | 0;
    if (($3 | 0) > 0) {
     continue;
    }
    break;
   }
   $2 = $7;
   HEAP32[$2 + 56 >> 2] = 0;
   HEAP32[$2 + 60 >> 2] = 0;
   HEAP32[$2 + 48 >> 2] = 0;
   HEAP32[$2 + 52 >> 2] = 0;
   HEAP32[$2 + 40 >> 2] = 0;
   HEAP32[$2 + 44 >> 2] = 0;
   HEAP32[$2 + 32 >> 2] = 0;
   HEAP32[$2 + 36 >> 2] = 0;
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 28 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   label$5 : {
    label$6 : {
     $3 = HEAP32[$0 + 84 >> 2];
     if (($3 | 0) >= 57) {
      if (($3 | 0) >= 64) {
       break label$1;
      }
      $4 = 64 - $3 | 0;
      HEAP32[$0 + 88 >> 2] = $4 + HEAP32[$0 + 88 >> 2];
      while (1) {
       if (($3 | 0) >= 64) {
        break label$2;
       }
       $5 = ($0 + $3 | 0) + 20 | 0;
       $3 = 64 - $3 | 0;
       $3 = ($4 | 0) < ($3 | 0) ? $4 : $3;
       memcpy($5, $2, $3);
       $5 = $3 + HEAP32[$0 + 84 >> 2] | 0;
       HEAP32[$0 + 84 >> 2] = $5;
       $4 = $4 - $3 | 0;
       if (($5 | 0) == 64) {
        SHA1__process_28_29($0);
       }
       $2 = $2 + $3 | 0;
       $3 = HEAP32[$0 + 84 >> 2];
       if (($4 | 0) > 0) {
        continue;
       }
       break;
      }
      if (($3 | 0) >= 57) {
       break label$6;
      }
     }
     $2 = $7 - $3 | 0;
     HEAP8[$2 + 63 | 0] = $6 << 3;
     HEAP8[$2 + 62 | 0] = $6 >>> 5;
     HEAP8[$2 + 61 | 0] = $6 >>> 13;
     HEAP8[$2 + 60 | 0] = $6 >>> 21;
     HEAP8[$2 + 59 | 0] = $8;
     HEAP8[$2 + 58 | 0] = 0;
     HEAP8[$2 + 56 | 0] = 0;
     HEAP8[$2 + 57 | 0] = 0;
     $4 = 64 - $3 | 0;
     if (($4 | 0) <= 0) {
      break label$1;
     }
     HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + $4;
     label$10 : {
      if (($3 | 0) < 64) {
       $2 = $7;
       while (1) {
        $5 = ($0 + $3 | 0) + 20 | 0;
        $3 = 64 - $3 | 0;
        $3 = ($4 | 0) < ($3 | 0) ? $4 : $3;
        memcpy($5, $2, $3);
        $6 = $3 + HEAP32[$0 + 84 >> 2] | 0;
        HEAP32[$0 + 84 >> 2] = $6;
        $4 = $4 - $3 | 0;
        if (($6 | 0) == 64) {
         SHA1__process_28_29($0);
        }
        if (($4 | 0) < 1) {
         break label$10;
        }
        $2 = $2 + $3 | 0;
        $3 = HEAP32[$0 + 84 >> 2];
        if (($3 | 0) < 64) {
         continue;
        }
        break;
       }
      }
      break label$2;
     }
     if (!$1) {
      break label$5;
     }
     $2 = HEAP32[$0 >> 2];
     $2 = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
     HEAP8[$1 | 0] = $2;
     HEAP8[$1 + 1 | 0] = $2 >>> 8;
     HEAP8[$1 + 2 | 0] = $2 >>> 16;
     HEAP8[$1 + 3 | 0] = $2 >>> 24;
     $2 = HEAP32[$0 + 4 >> 2];
     $2 = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
     HEAP8[$1 + 4 | 0] = $2;
     HEAP8[$1 + 5 | 0] = $2 >>> 8;
     HEAP8[$1 + 6 | 0] = $2 >>> 16;
     HEAP8[$1 + 7 | 0] = $2 >>> 24;
     $2 = HEAP32[$0 + 8 >> 2];
     $2 = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
     HEAP8[$1 + 8 | 0] = $2;
     HEAP8[$1 + 9 | 0] = $2 >>> 8;
     HEAP8[$1 + 10 | 0] = $2 >>> 16;
     HEAP8[$1 + 11 | 0] = $2 >>> 24;
     $2 = HEAP32[$0 + 12 >> 2];
     $2 = $2 << 24 | $2 << 8 & 16711680 | ($2 >>> 8 & 65280 | $2 >>> 24);
     HEAP8[$1 + 12 | 0] = $2;
     HEAP8[$1 + 13 | 0] = $2 >>> 8;
     HEAP8[$1 + 14 | 0] = $2 >>> 16;
     HEAP8[$1 + 15 | 0] = $2 >>> 24;
     $0 = HEAP32[$0 + 16 >> 2];
     $0 = $0 << 24 | $0 << 8 & 16711680 | ($0 >>> 8 & 65280 | $0 >>> 24);
     HEAP8[$1 + 16 | 0] = $0;
     HEAP8[$1 + 17 | 0] = $0 >>> 8;
     HEAP8[$1 + 18 | 0] = $0 >>> 16;
     HEAP8[$1 + 19 | 0] = $0 >>> 24;
     global$0 = $7 - -64 | 0;
     return;
    }
    __assert_fail(15184, 15027, 176, 15172);
    abort();
   }
   __assert_fail(15072, 15027, 42, 15077);
   abort();
  }
  __assert_fail(15151, 15027, 143, 15134);
  abort();
 }
 __assert_fail(15143, 15027, 135, 15134);
 abort();
}
function Mesh__paint_28bool_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $6 = HEAP32[$0 >> 2];
  $7 = $6 ? $6 + 24 | 0 : $0 + 132 | 0;
  if (HEAP32[$7 + 8 >> 2]) {
   $4 = HEAP32[11870];
   $2 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4) | 0;
    $3 = HEAP32[11870];
    $5 = ($2 | 0) == 3 ? $3 : 0;
    $2 = 0;
    if (!$3) {
     break label$3;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3) | 0;
    $2 = ($2 | 0) == 1 ? HEAP32[11870] : 0;
   }
   if (HEAP32[$4 + 96 >> 2] != -1) {
    glBindBuffer(34962, HEAP32[$7 >> 2]);
    glEnableVertexAttribArray(HEAP32[$4 + 96 >> 2]);
    glVertexAttribPointer(HEAP32[$4 + 96 >> 2], 3, 5126, 0, 0, 0);
   }
   label$5 : {
    if (!$5) {
     break label$5;
    }
    $3 = HEAP32[$5 + 256 >> 2];
    if (HEAPU8[$0 + 108 | 0]) {
     if (($3 | 0) == -1) {
      break label$5;
     }
     glBindBuffer(34962, HEAP32[($6 ? $6 + 36 | 0 : $0 + 144 | 0) >> 2]);
     glEnableVertexAttribArray(HEAP32[$5 + 256 >> 2]);
     glVertexAttribPointer(HEAP32[$5 + 256 >> 2], 3, 5126, 0, 0, 0);
     break label$5;
    }
    if (($3 | 0) == -1) {
     break label$5;
    }
    glDisableVertexAttribArray($3 | 0);
    glVertexAttribPointer(HEAP32[$5 + 256 >> 2], 1, 5121, 0, 0, 0);
   }
   label$7 : {
    if ($1) {
     if (!$2) {
      break label$7;
     }
     $1 = HEAP32[$2 + 176 >> 2];
     label$9 : {
      if (HEAPU8[$0 + 110 | 0]) {
       if (($1 | 0) == -1) {
        break label$9;
       }
       glBindBuffer(34962, HEAP32[$0 + 168 >> 2]);
       glEnableVertexAttribArray(HEAP32[$2 + 176 >> 2]);
       glVertexAttribPointer(HEAP32[$2 + 176 >> 2], 4, 5121, 1, 0, 0);
       break label$9;
      }
      if (($1 | 0) == -1) {
       break label$9;
      }
      glDisableVertexAttribArray($1 | 0);
      glVertexAttribPointer(HEAP32[$2 + 176 >> 2], 1, 5121, 0, 0, 0);
     }
     $1 = HEAP32[$2 + 156 >> 2];
     if (($1 | 0) == -1) {
      break label$7;
     }
     glVertexAttrib1f($1 | 0, Math_fround(Math_fround(0)));
     $1 = HEAP32[$2 + 156 >> 2];
     if (($1 | 0) == -1) {
      break label$7;
     }
     glDisableVertexAttribArray($1 | 0);
     glVertexAttribPointer(HEAP32[$2 + 156 >> 2], 1, 5121, 0, 0, 0);
     break label$7;
    }
    label$11 : {
     if (HEAPU8[$0 + 109 | 0]) {
      if (!$2) {
       break label$7;
      }
      if (HEAP32[$2 + 176 >> 2] == -1) {
       break label$11;
      }
      glBindBuffer(34962, HEAP32[$0 + 156 >> 2]);
      glEnableVertexAttribArray(HEAP32[$2 + 176 >> 2]);
      glVertexAttribPointer(HEAP32[$2 + 176 >> 2], 4, 5126, 0, 0, 0);
      break label$11;
     }
     label$13 : {
      if (HEAPU8[$0 + 112 | 0]) {
       $1 = HEAP32[$4 + 136 >> 2];
       if (($1 | 0) == -1) {
        break label$13;
       }
       glUniform3fv($1 | 0, 1, $0 + 80 | 0);
       break label$13;
      }
      if (!$2 | !HEAPU8[$0 + 114 | 0]) {
       break label$13;
      }
      $1 = HEAP32[$2 + 176 >> 2];
      if (($1 | 0) == -1) {
       break label$11;
      }
      glDisableVertexAttribArray($1 | 0);
      glVertexAttribPointer(HEAP32[$2 + 176 >> 2], 1, 5121, 0, 0, 0);
      $1 = HEAP32[$2 + 176 >> 2];
      if (($1 | 0) == -1) {
       break label$11;
      }
      glVertexAttrib4fv($1 | 0, $0 + 92 | 0);
      break label$11;
     }
     if (!$2) {
      break label$7;
     }
    }
    $1 = HEAP32[$2 + 156 >> 2];
    if (HEAPU8[$0 + 113 | 0]) {
     if (($1 | 0) == -1) {
      break label$7;
     }
     glBindBuffer(34962, HEAP32[$0 + 180 >> 2]);
     glEnableVertexAttribArray(HEAP32[$2 + 156 >> 2]);
     glVertexAttribPointer(HEAP32[$2 + 156 >> 2], 1, 5126, 0, 0, 0);
     break label$7;
    }
    if (($1 | 0) == -1) {
     break label$7;
    }
    glVertexAttrib1f($1 | 0, Math_fround(Math_fround(0)));
    $1 = HEAP32[$2 + 156 >> 2];
    if (($1 | 0) == -1) {
     break label$7;
    }
    glDisableVertexAttribArray($1 | 0);
    glVertexAttribPointer(HEAP32[$2 + 156 >> 2], 1, 5121, 0, 0, 0);
   }
   $1 = HEAP32[$0 + 116 >> 2] + -1 | 0;
   if ($1 >>> 0 >= 5 | !(27 >>> ($1 & 255) & 1)) {
    break label$1;
   }
   $1 = HEAP32[($1 << 2) + 17180 >> 2];
   if (HEAPU8[$0 + 111 | 0]) {
    glBindBuffer(34963, HEAP32[$0 + 192 >> 2]);
    glDrawElements($1 | 0, HEAP32[$0 + 200 >> 2], 5123, 0);
    return;
   }
   glDrawArrays($1 | 0, 0, HEAP32[$7 + 8 >> 2]);
  }
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 4518);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $5 = HEAP32[$1 >> 2];
 label$1 : {
  if (HEAPU8[$5 + 4 | 0] != 36) {
   break label$1;
  }
  $5 = HEAP32[$5 + 8 >> 2];
  HEAP32[$4 + 28 >> 2] = $5;
  if ($5 + -2 >>> 0 > 3) {
   break label$1;
  }
  HEAP32[$1 >> 2] = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0 + 368 | 0, $4 + 28 | 0);
 }
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 67)) {
   $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73);
   $5 = 0;
   $3 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
    $3 = HEAP8[$3 | 0];
   } else {
    $3 = 0;
   }
   $3 = $3 << 24 >> 24;
   $7 = ($3 & 255) + -49 | 0;
   if ($7 >>> 0 > 4 | ($7 | 0) == 3) {
    break label$2;
   }
   HEAP32[$4 + 24 >> 2] = ($3 & 255) + -48;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   if ($2) {
    HEAP8[$2 | 0] = 1;
   }
   label$7 : {
    if (!$6) {
     break label$7;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $2)) {
     break label$7;
    }
    break label$2;
   }
   HEAP8[$4 + 23 | 0] = 0;
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $4 + 23 | 0, $4 + 24 | 0);
   break label$2;
  }
  $5 = 0;
  $3 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
   $3 = HEAPU8[$3 | 0];
  } else {
   $3 = 0;
  }
  if (($3 & 255) != 68) {
   break label$2;
  }
  $3 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 1) {
   $3 = HEAP8[$3 + 1 | 0];
  } else {
   $3 = 0;
  }
  $3 = $3 << 24 >> 24;
  $6 = ($3 & 255) + -48 | 0;
  if ($6 >>> 0 > 5 | !(1 << $6 & 39)) {
   break label$2;
  }
  HEAP32[$4 + 16 >> 2] = ($3 & 255) + -48;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
  if ($2) {
   HEAP8[$2 | 0] = 1;
  }
  HEAP8[$4 + 15 | 0] = 1;
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $4 + 15 | 0, $4 + 16 | 0);
 }
 global$0 = $4 + 32 | 0;
 return $5;
}
function PicBucket__makeAllComp_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP8[$2 + 48 | 0] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 16 >> 2]) {
  while (1) {
   PicsSet__add_28int_2c_20bool_29($2 + 8 | 0, $3, 1);
   $3 = $3 + 1 | 0;
   if ($3 >>> 0 < (HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 16 >> 2] | 0) / 652 >>> 0) {
    continue;
   }
   break;
  }
 }
 $1 = $0 + 76 | 0;
 if (($1 | 0) != ($2 + 8 | 0)) {
  std____2__enable_if__28__is_forward_iterator_PicType____value_29_20___20_28is_constructible_PicType_2c_20std____2__iterator_traits_PicType____reference___value_29_2c_20void___type_20std____2__vector_PicType_2c_20std____2__allocator_PicType__20___assign_PicType___28PicType__2c_20PicType__29($1, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 }
 $3 = HEAP32[$0 + 80 >> 2];
 $4 = HEAP32[$1 >> 2];
 if (($3 | 0) != ($4 | 0)) {
  $7 = ($3 - $4 | 0) / 324 | 0;
  $1 = 0;
  while (1) {
   $5 = $4 + Math_imul($1, 324) | 0;
   $3 = HEAP32[$5 + 312 >> 2];
   $5 = HEAP32[$5 + 316 >> 2];
   if (($3 | 0) != ($5 | 0)) {
    $8 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $6 = Math_imul(HEAP32[$3 >> 2], 652) + $8 | 0;
     HEAP32[$6 + 340 >> 2] = $1;
     HEAP32[$6 + 344 >> 2] = HEAP32[$3 + 4 >> 2];
     $3 = $3 + 8 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $1 = $1 + 1 | 0;
   if ($1 >>> 0 < $7 >>> 0) {
    continue;
   }
   break;
  }
 }
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 7057, 11), (HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 16 >> 2] | 0) / 652 | 0), 7069, 6), (HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0) / 324 | 0), 7076, 7);
 $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 56 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$2 + 56 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $0 = HEAP32[$2 + 32 >> 2];
 if ($0) {
  $3 = HEAP32[$2 + 36 >> 2];
  $1 = $0;
  label$11 : {
   if (($0 | 0) == ($3 | 0)) {
    break label$11;
   }
   while (1) {
    $1 = HEAP32[$3 + -12 >> 2];
    if ($1) {
     HEAP32[$3 + -8 >> 2] = $1;
     dlfree($1);
    }
    $3 = $3 + -16 | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$2 + 32 >> 2];
  }
  HEAP32[$2 + 36 >> 2] = $0;
  dlfree($1);
 }
 $0 = HEAP32[$2 + 20 >> 2];
 if ($0) {
  HEAP32[$2 + 24 >> 2] = $0;
  dlfree($0);
 }
 $0 = HEAP32[$2 + 8 >> 2];
 if ($0) {
  $3 = HEAP32[$2 + 12 >> 2];
  $1 = $0;
  label$16 : {
   if (($0 | 0) == ($3 | 0)) {
    break label$16;
   }
   while (1) {
    $1 = HEAP32[$3 + -12 >> 2];
    if ($1) {
     HEAP32[$3 + -8 >> 2] = $1;
     dlfree($1);
    }
    $3 = $3 + -324 | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$2 + 8 >> 2];
  }
  HEAP32[$2 + 12 >> 2] = $0;
  dlfree($1);
 }
 global$0 = $2 - -64 | 0;
}
function BuildWorld__search_28int_2c_20int_2c_20bool_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 label$1 : {
  $4 = HEAP32[$0 + 40 >> 2];
  $7 = HEAP32[$0 + 44 >> 2];
  if (($4 | 0) < ($7 | 0)) {
   $6 = HEAP32[$0 + 60 >> 2];
   $8 = HEAP32[$0 + 56 >> 2];
   $9 = HEAP32[$0 + 52 >> 2];
   $10 = HEAP32[$0 + 48 >> 2];
   $11 = ($1 | 0) != 0;
   $12 = ($2 | 0) == -1;
   while (1) {
    if (($10 | 0) < ($9 | 0)) {
     $5 = $10;
     while (1) {
      label$6 : {
       if (($8 | 0) >= ($6 | 0)) {
        break label$6;
       }
       $3 = $8;
       if ($4 >>> 0 <= 49) {
        while (1) {
         if (((($5 >>> 0 < 50 & $3 >>> 0 < 50) == 1 ? HEAPU8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 136 | 0] : 0) & 15) == ($1 | 0)) {
          if ($5 >>> 0 > 49 | $12 | $3 >>> 0 > 49) {
           break label$1;
          }
          HEAP8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 136 | 0] = $2;
          break label$1;
         }
         $3 = $3 + 1 | 0;
         if (($6 | 0) != ($3 | 0)) {
          continue;
         }
         break label$6;
        }
       }
       while (1) {
        if (!$11) {
         break label$1;
        }
        $3 = $3 + 1 | 0;
        if (($6 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $5 = $5 + 1 | 0;
      if (($9 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = $4 + 1 | 0;
    if (($7 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  $4 = HEAP32[$0 - -64 >> 2];
  $7 = HEAP32[$0 + 68 >> 2];
  if (($4 | 0) < ($7 | 0)) {
   $6 = HEAP32[$0 + 84 >> 2];
   $8 = HEAP32[$0 + 80 >> 2];
   $9 = HEAP32[$0 + 76 >> 2];
   $10 = HEAP32[$0 + 72 >> 2];
   $11 = ($1 | 0) != 0;
   $12 = ($2 | 0) == -1;
   while (1) {
    if (($10 | 0) < ($9 | 0)) {
     $5 = $10;
     while (1) {
      label$18 : {
       if (($8 | 0) >= ($6 | 0)) {
        break label$18;
       }
       $3 = $8;
       if ($4 >>> 0 >= 50) {
        while (1) {
         if (!$11) {
          break label$1;
         }
         $3 = $3 + 1 | 0;
         if (($6 | 0) != ($3 | 0)) {
          continue;
         }
         break label$18;
        }
       }
       while (1) {
        if (((($5 >>> 0 < 50 & $3 >>> 0 < 50) == 1 ? HEAPU8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 125136 | 0] : 0) & 15) == ($1 | 0)) {
         if ($5 >>> 0 > 49 | $12 | $3 >>> 0 > 49) {
          break label$1;
         }
         HEAP8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 125136 | 0] = $2;
         break label$1;
        }
        $3 = $3 + 1 | 0;
        if (($6 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $5 = $5 + 1 | 0;
      if (($9 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = $4 + 1 | 0;
    if (($7 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  $4 = HEAP32[$0 + 88 >> 2];
  $7 = HEAP32[$0 + 92 >> 2];
  if (($4 | 0) < ($7 | 0)) {
   $6 = HEAP32[$0 + 108 >> 2];
   $8 = HEAP32[$0 + 104 >> 2];
   $9 = HEAP32[$0 + 100 >> 2];
   $10 = HEAP32[$0 + 96 >> 2];
   $11 = ($1 | 0) != 0;
   $12 = ($2 | 0) == -1;
   while (1) {
    if (($10 | 0) < ($9 | 0)) {
     $5 = $10;
     while (1) {
      label$30 : {
       if (($8 | 0) >= ($6 | 0)) {
        break label$30;
       }
       $3 = $8;
       if ($4 >>> 0 >= 50) {
        while (1) {
         if (!$11) {
          break label$1;
         }
         $3 = $3 + 1 | 0;
         if (($6 | 0) != ($3 | 0)) {
          continue;
         }
         break label$30;
        }
       }
       while (1) {
        if (((($5 >>> 0 < 50 & $3 >>> 0 < 50) == 1 ? HEAPU8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 250136 | 0] : 0) & 15) == ($1 | 0)) {
         if ($5 >>> 0 > 49 | $12 | $3 >>> 0 > 49) {
          break label$1;
         }
         HEAP8[(((Math_imul($4, 2500) + $0 | 0) + Math_imul($5, 50) | 0) + $3 | 0) + 250136 | 0] = $2;
         break label$1;
        }
        $3 = $3 + 1 | 0;
        if (($6 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $5 = $5 + 1 | 0;
      if (($9 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = $4 + 1 | 0;
    if (($7 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return 1;
}
function CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda0__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, Math_fround(HEAP32[$0 >> 2]), Math_fround(HEAP32[$0 + 4 >> 2]), Math_fround(.125), Math_fround(.875), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(.125), Math_fround(0), Math_fround(.125), Math_fround(0), Math_fround(0), !HEAPU8[$0 + 8 | 0], $2, 1);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, Math_fround(HEAP32[$0 >> 2]), Math_fround(HEAP32[$0 + 4 >> 2]), Math_fround(.125), Math_fround(.875), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(-.125), Math_fround(0), Math_fround(-.125), Math_fround(0), Math_fround(0), HEAPU8[$0 + 8 | 0], $2, 1);
 $4 = Math_fround(HEAP32[$0 >> 2]);
 $5 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $6 = HEAPU8[$0 + 8 | 0];
 $3 = $6 ? Math_fround(-.03125) : Math_fround(.03125);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $4, $5, Math_fround(.125), Math_fround(.03125), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(.125), $3, Math_fround(.125), $3, Math_fround(0), $6, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $4, $5, Math_fround(.875), Math_fround(.96875), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(.125), $3, Math_fround(.125), $3, Math_fround(0), !$6, $2, 0);
 $5 = Math_fround(HEAP32[$0 >> 2]);
 $7 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $4 = $6 ? Math_fround(-.125) : Math_fround(.125);
 $6 = HEAPU8[$0 + 8 | 0];
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(0), Math_fround(.03125), $4, Math_fround(0), $4, Math_fround(.125), $3, Math_fround(.125), $3, Math_fround(0), !$6, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(1), Math_fround(.96875), $4, Math_fround(0), $4, Math_fround(.125), $3, Math_fround(.125), $3, Math_fround(0), $6, $2, 0);
 $5 = Math_fround(HEAP32[$0 >> 2]);
 $7 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $6 = HEAPU8[$0 + 8 | 0];
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(.125), Math_fround(.03125), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(-.125), $3, Math_fround(-.125), $3, Math_fround(0), !$6, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(.875), Math_fround(.96875), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(-.125), $3, Math_fround(-.125), $3, Math_fround(0), $6, $2, 0);
 $5 = Math_fround(HEAP32[$0 >> 2]);
 $7 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $0 = HEAPU8[$0 + 8 | 0];
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(0), Math_fround(.03125), $4, Math_fround(0), $4, Math_fround(-.125), $3, Math_fround(-.125), $3, Math_fround(0), $0, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(1), Math_fround(.96875), $4, Math_fround(0), $4, Math_fround(-.125), $3, Math_fround(-.125), $3, Math_fround(0), !$0, $2, 0);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 384 | 0;
 global$0 = $0;
 HEAP32[$0 + 376 >> 2] = 37;
 HEAP32[$0 + 380 >> 2] = 0;
 $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 376 | 1, 27673, HEAP32[$2 + 4 >> 2]);
 HEAP32[$0 + 332 >> 2] = $0 + 336;
 $5 = std____2____cloc_28_29();
 label$1 : {
  if ($6) {
   $8 = HEAP32[$2 + 8 >> 2];
   HEAPF64[$0 + 40 >> 3] = $4;
   HEAP32[$0 + 32 >> 2] = $8;
   $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 336 | 0, 30, $5, $0 + 376 | 0, $0 + 32 | 0);
   break label$1;
  }
  HEAPF64[$0 + 48 >> 3] = $4;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 336 | 0, 30, $5, $0 + 376 | 0, $0 + 48 | 0);
 }
 HEAP32[$0 + 80 >> 2] = 269;
 $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 320 | 0, 0, $0 + 80 | 0);
 label$3 : {
  if (($5 | 0) >= 30) {
   $5 = std____2____cloc_28_29();
   label$5 : {
    if ($6) {
     $6 = HEAP32[$2 + 8 >> 2];
     HEAPF64[$0 + 8 >> 3] = $4;
     HEAP32[$0 >> 2] = $6;
     $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 332 | 0, $5, $0 + 376 | 0, $0);
     break label$5;
    }
    HEAPF64[$0 + 16 >> 3] = $4;
    $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 332 | 0, $5, $0 + 376 | 0, $0 + 16 | 0);
   }
   $7 = HEAP32[$0 + 332 >> 2];
   if (!$7) {
    break label$3;
   }
   $6 = HEAP32[$8 >> 2];
   HEAP32[$8 >> 2] = $7;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($6);
   }
  }
  $6 = HEAP32[$0 + 332 >> 2];
  $7 = $6 + $5 | 0;
  $11 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
  HEAP32[$0 + 80 >> 2] = 269;
  $6 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 72 | 0, 0, $0 + 80 | 0);
  label$8 : {
   if (HEAP32[$0 + 332 >> 2] == ($0 + 336 | 0)) {
    $5 = $0 + 80 | 0;
    $9 = $0 + 336 | 0;
    break label$8;
   }
   $5 = dlmalloc($5 << 3);
   if (!$5) {
    break label$3;
   }
   $9 = HEAP32[$6 >> 2];
   HEAP32[$6 >> 2] = $5;
   if ($9) {
    FUNCTION_TABLE[HEAP32[$6 + 4 >> 2]]($9);
   }
   $9 = HEAP32[$0 + 332 >> 2];
  }
  $10 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 56 >> 2] = $10;
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + 1;
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($9, $11, $7, $5, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
  $7 = HEAP32[$0 + 56 >> 2];
  $9 = HEAP32[$7 + 4 >> 2] + -1 | 0;
  HEAP32[$7 + 4 >> 2] = $9;
  if (($9 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7);
  }
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $5, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2, $3);
  $1 = HEAP32[$6 >> 2];
  HEAP32[$6 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$6 + 4 >> 2]]($1);
  }
  $1 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($1);
  }
  global$0 = $0 + 384 | 0;
  return $2 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $9 = global$0 - 16 | 0;
 global$0 = $9;
 $10 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $14 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 $6 = $14;
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($9, $6);
 HEAP32[$5 >> 2] = $3;
 label$2 : {
  $8 = $0;
  $6 = HEAPU8[$8 | 0];
  $7 = $6 + -43 | 0;
  if (!($7 >>> 0 > 2 | !($7 - 1))) {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 44 >> 2]]($10, $6 << 24 >> 24) | 0;
   $8 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $8 + 4;
   HEAP32[$8 >> 2] = $6;
   $8 = $0 + 1 | 0;
  }
  $6 = $8;
  if (!(HEAPU8[$6 | 0] != 48 | ($2 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 44 >> 2]]($10, 48) | 0;
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 44 >> 2]]($10, HEAP8[$8 + 1 | 0]) | 0;
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$2;
    }
    $7 = HEAP8[$6 | 0];
    std____2____cloc_28_29();
    if (!(($7 + -48 >>> 0 < 10 | 0) != 0 | ($7 | 32) + -97 >>> 0 < 6)) {
     break label$2;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    break label$2;
   }
   $7 = HEAP8[$6 | 0];
   std____2____cloc_28_29();
   if ($7 + -48 >>> 0 >= 10) {
    break label$2;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 if (HEAP8[$9 + 11 | 0] < 0) {
  $7 = HEAP32[$9 + 4 >> 2];
 } else {
  $7 = HEAPU8[$9 + 11 | 0];
 }
 label$6 : {
  if (!$7) {
   FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 48 >> 2]]($10, $8, $6, HEAP32[$5 >> 2]) | 0;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 << 2);
   break label$6;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $16 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 16 >> 2]]($14) | 0;
  $7 = $8;
  while (1) {
   if ($7 >>> 0 >= $6 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($8 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2]);
   } else {
    if (HEAP8[$9 + 11 | 0] < 0) {
     $12 = HEAP32[$9 >> 2];
    } else {
     $12 = $9;
    }
    $15 = HEAP8[$12 + $11 | 0] != ($13 | 0);
    if (HEAP8[$9 + 11 | 0] < 0) {
     $12 = HEAP32[$9 >> 2];
    } else {
     $12 = $9;
    }
    if (!($15 | HEAP8[$12 + $11 | 0] < 1)) {
     $13 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $16;
     $12 = $11;
     if (HEAP8[$9 + 11 | 0] < 0) {
      $13 = HEAP32[$9 + 4 >> 2];
     } else {
      $13 = HEAPU8[$9 + 11 | 0];
     }
     $11 = ($12 >>> 0 < $13 + -1 >>> 0) + $11 | 0;
     $13 = 0;
    }
    $12 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 44 >> 2]]($10, HEAP8[$7 | 0]) | 0;
    $15 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $15 + 4;
    HEAP32[$15 >> 2] = $12;
    $7 = $7 + 1 | 0;
    $13 = $13 + 1 | 0;
    continue;
   }
   break;
  }
 }
 label$20 : {
  label$21 : {
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$21;
    }
    $8 = HEAPU8[$6 | 0];
    if (($8 | 0) != 46) {
     $8 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 44 >> 2]]($10, $8 << 24 >> 24) | 0;
     $11 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $11 + 4;
     HEAP32[$11 >> 2] = $8;
     $6 = $6 + 1 | 0;
     continue;
    }
    break;
   }
   $8 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 12 >> 2]]($14) | 0;
   $11 = HEAP32[$5 >> 2];
   $7 = $11 + 4 | 0;
   HEAP32[$5 >> 2] = $7;
   HEAP32[$11 >> 2] = $8;
   $6 = $6 + 1 | 0;
   break label$20;
  }
  $7 = HEAP32[$5 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 48 >> 2]]($10, $6, $2, $7) | 0;
 $8 = $5;
 $5 = HEAP32[$5 >> 2] + ($2 - $6 << 2) | 0;
 HEAP32[$8 >> 2] = $5;
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 << 2) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
 global$0 = $9 + 16 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 208 | 0;
 global$0 = $0;
 HEAP32[$0 + 200 >> 2] = 37;
 HEAP32[$0 + 204 >> 2] = 0;
 $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 200 | 1, 27673, HEAP32[$2 + 4 >> 2]);
 HEAP32[$0 + 156 >> 2] = $0 + 160;
 $5 = std____2____cloc_28_29();
 label$1 : {
  if ($6) {
   $8 = HEAP32[$2 + 8 >> 2];
   HEAPF64[$0 + 40 >> 3] = $4;
   HEAP32[$0 + 32 >> 2] = $8;
   $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 160 | 0, 30, $5, $0 + 200 | 0, $0 + 32 | 0);
   break label$1;
  }
  HEAPF64[$0 + 48 >> 3] = $4;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 160 | 0, 30, $5, $0 + 200 | 0, $0 + 48 | 0);
 }
 HEAP32[$0 + 80 >> 2] = 269;
 $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 144 | 0, 0, $0 + 80 | 0);
 label$3 : {
  if (($5 | 0) >= 30) {
   $5 = std____2____cloc_28_29();
   label$5 : {
    if ($6) {
     $6 = HEAP32[$2 + 8 >> 2];
     HEAPF64[$0 + 8 >> 3] = $4;
     HEAP32[$0 >> 2] = $6;
     $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 156 | 0, $5, $0 + 200 | 0, $0);
     break label$5;
    }
    HEAPF64[$0 + 16 >> 3] = $4;
    $5 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 156 | 0, $5, $0 + 200 | 0, $0 + 16 | 0);
   }
   $7 = HEAP32[$0 + 156 >> 2];
   if (!$7) {
    break label$3;
   }
   $6 = HEAP32[$8 >> 2];
   HEAP32[$8 >> 2] = $7;
   if ($6) {
    FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($6);
   }
  }
  $6 = HEAP32[$0 + 156 >> 2];
  $7 = $6 + $5 | 0;
  $11 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
  HEAP32[$0 + 80 >> 2] = 269;
  $6 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 72 | 0, 0, $0 + 80 | 0);
  label$8 : {
   if (HEAP32[$0 + 156 >> 2] == ($0 + 160 | 0)) {
    $5 = $0 + 80 | 0;
    $9 = $0 + 160 | 0;
    break label$8;
   }
   $5 = dlmalloc($5 << 1);
   if (!$5) {
    break label$3;
   }
   $9 = HEAP32[$6 >> 2];
   HEAP32[$6 >> 2] = $5;
   if ($9) {
    FUNCTION_TABLE[HEAP32[$6 + 4 >> 2]]($9);
   }
   $9 = HEAP32[$0 + 156 >> 2];
  }
  $10 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 56 >> 2] = $10;
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + 1;
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($9, $11, $7, $5, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
  $7 = HEAP32[$0 + 56 >> 2];
  $9 = HEAP32[$7 + 4 >> 2] + -1 | 0;
  HEAP32[$7 + 4 >> 2] = $9;
  if (($9 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7);
  }
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $5, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2, $3);
  $1 = HEAP32[$6 >> 2];
  HEAP32[$6 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$6 + 4 >> 2]]($1);
  }
  $1 = HEAP32[$8 >> 2];
  HEAP32[$8 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$8 + 4 >> 2]]($1);
  }
  global$0 = $0 + 208 | 0;
  return $2 | 0;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $9 = global$0 - 16 | 0;
 global$0 = $9;
 $10 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $14 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 $6 = $14;
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($9, $6);
 HEAP32[$5 >> 2] = $3;
 label$2 : {
  $8 = $0;
  $6 = HEAPU8[$8 | 0];
  $7 = $6 + -43 | 0;
  if (!($7 >>> 0 > 2 | !($7 - 1))) {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10, $6 << 24 >> 24) | 0;
   $8 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $8 + 1;
   HEAP8[$8 | 0] = $6;
   $8 = $0 + 1 | 0;
  }
  $6 = $8;
  if (!(HEAPU8[$6 | 0] != 48 | ($2 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10, 48) | 0;
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10, HEAP8[$8 + 1 | 0]) | 0;
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$2;
    }
    $7 = HEAP8[$6 | 0];
    std____2____cloc_28_29();
    if (!(($7 + -48 >>> 0 < 10 | 0) != 0 | ($7 | 32) + -97 >>> 0 < 6)) {
     break label$2;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    break label$2;
   }
   $7 = HEAP8[$6 | 0];
   std____2____cloc_28_29();
   if ($7 + -48 >>> 0 >= 10) {
    break label$2;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 if (HEAP8[$9 + 11 | 0] < 0) {
  $7 = HEAP32[$9 + 4 >> 2];
 } else {
  $7 = HEAPU8[$9 + 11 | 0];
 }
 label$6 : {
  if (!$7) {
   FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 32 >> 2]]($10, $8, $6, HEAP32[$5 >> 2]) | 0;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 | 0);
   break label$6;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $16 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 16 >> 2]]($14) | 0;
  $7 = $8;
  while (1) {
   if ($7 >>> 0 >= $6 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($8 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2]);
   } else {
    if (HEAP8[$9 + 11 | 0] < 0) {
     $12 = HEAP32[$9 >> 2];
    } else {
     $12 = $9;
    }
    $15 = HEAP8[$12 + $11 | 0] != ($13 | 0);
    if (HEAP8[$9 + 11 | 0] < 0) {
     $12 = HEAP32[$9 >> 2];
    } else {
     $12 = $9;
    }
    if (!($15 | HEAP8[$12 + $11 | 0] < 1)) {
     $13 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $13 + 1;
     HEAP8[$13 | 0] = $16;
     $12 = $11;
     if (HEAP8[$9 + 11 | 0] < 0) {
      $13 = HEAP32[$9 + 4 >> 2];
     } else {
      $13 = HEAPU8[$9 + 11 | 0];
     }
     $11 = ($12 >>> 0 < $13 + -1 >>> 0) + $11 | 0;
     $13 = 0;
    }
    $12 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10, HEAP8[$7 | 0]) | 0;
    $15 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $15 + 1;
    HEAP8[$15 | 0] = $12;
    $7 = $7 + 1 | 0;
    $13 = $13 + 1 | 0;
    continue;
   }
   break;
  }
 }
 while (1) {
  label$21 : {
   $8 = $10;
   if ($6 >>> 0 < $2 >>> 0) {
    $11 = HEAPU8[$6 | 0];
    if (($11 | 0) != 46) {
     break label$21;
    }
    $11 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 12 >> 2]]($14) | 0;
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $11;
    $6 = $6 + 1 | 0;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 32 >> 2]]($8, $6, $2, HEAP32[$5 >> 2]) | 0;
   $8 = $5;
   $5 = HEAP32[$5 >> 2] + ($2 - $6 | 0) | 0;
   HEAP32[$8 >> 2] = $5;
   HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 | 0) + $3 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
   global$0 = $9 + 16 | 0;
   return;
  }
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10, $11 << 24 >> 24) | 0;
  $11 = HEAP32[$5 >> 2];
  HEAP32[$5 >> 2] = $11 + 1;
  HEAP8[$11 | 0] = $8;
  $6 = $6 + 1 | 0;
  continue;
 }
}
function try_realloc_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $3 = $6 & -8;
 $5 = $3 + $0 | 0;
 $2 = $6 & 3;
 label$2 : {
  if (!$2) {
   $2 = 0;
   if ($1 >>> 0 < 256) {
    break label$2;
   }
   if ($3 >>> 0 >= $1 + 4 >>> 0) {
    $2 = $0;
    if ($3 - $1 >>> 0 <= HEAP32[13447] << 1 >>> 0) {
     break label$2;
    }
   }
   return 0;
  }
  label$5 : {
   if ($3 >>> 0 >= $1 >>> 0) {
    $2 = $3 - $1 | 0;
    if ($2 >>> 0 < 16) {
     break label$5;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $1 = $0 + $1 | 0;
    HEAP32[$1 + 4 >> 2] = $2 | 3;
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
    dispose_chunk($1, $2);
    break label$5;
   }
   $2 = 0;
   if (HEAP32[13333] == ($5 | 0)) {
    $3 = $3 + HEAP32[13330] | 0;
    if ($3 >>> 0 <= $1 >>> 0) {
     break label$2;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $2 = $0 + $1 | 0;
    $1 = $3 - $1 | 0;
    HEAP32[$2 + 4 >> 2] = $1 | 1;
    HEAP32[13330] = $1;
    HEAP32[13333] = $2;
    break label$5;
   }
   if (HEAP32[13332] == ($5 | 0)) {
    $3 = $3 + HEAP32[13329] | 0;
    if ($3 >>> 0 < $1 >>> 0) {
     break label$2;
    }
    $4 = $3 - $1 | 0;
    label$9 : {
     if ($4 >>> 0 >= 16) {
      HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = $4 | 1;
      $2 = $0 + $3 | 0;
      HEAP32[$2 >> 2] = $4;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
      break label$9;
     }
     HEAP32[$0 + 4 >> 2] = $3 | $6 & 1 | 2;
     $1 = $0 + $3 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     $4 = 0;
     $1 = 0;
    }
    HEAP32[13332] = $1;
    HEAP32[13329] = $4;
    break label$5;
   }
   $4 = HEAP32[$5 + 4 >> 2];
   if ($4 & 2) {
    break label$2;
   }
   $7 = $3 + ($4 & -8) | 0;
   if ($7 >>> 0 < $1 >>> 0) {
    break label$2;
   }
   $9 = $7 - $1 | 0;
   label$11 : {
    if ($4 >>> 0 <= 255) {
     $2 = HEAP32[$5 + 8 >> 2];
     $4 = $4 >>> 3;
     $3 = HEAP32[$5 + 12 >> 2];
     if (($3 | 0) == ($2 | 0)) {
      HEAP32[13327] = HEAP32[13327] & __wasm_rotl_i32(-2, $4);
      break label$11;
     }
     HEAP32[$2 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $2;
     break label$11;
    }
    $8 = HEAP32[$5 + 24 >> 2];
    $3 = HEAP32[$5 + 12 >> 2];
    label$14 : {
     if (($5 | 0) != ($3 | 0)) {
      $2 = HEAP32[$5 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$14;
     }
     label$17 : {
      $4 = $5 + 20 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       break label$17;
      }
      $4 = $5 + 16 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       break label$17;
      }
      $3 = 0;
      break label$14;
     }
     while (1) {
      $10 = $4;
      $3 = $2;
      $4 = $3 + 20 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       continue;
      }
      $4 = $3 + 16 | 0;
      $2 = HEAP32[$3 + 16 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     HEAP32[$10 >> 2] = 0;
    }
    if (!$8) {
     break label$11;
    }
    $2 = HEAP32[$5 + 28 >> 2];
    $4 = ($2 << 2) + 53612 | 0;
    label$19 : {
     if (HEAP32[$4 >> 2] == ($5 | 0)) {
      HEAP32[$4 >> 2] = $3;
      if ($3) {
       break label$19;
      }
      HEAP32[13328] = HEAP32[13328] & __wasm_rotl_i32(-2, $2);
      break label$11;
     }
     HEAP32[(HEAP32[$8 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $8 >> 2] = $3;
     if (!$3) {
      break label$11;
     }
    }
    HEAP32[$3 + 24 >> 2] = $8;
    $2 = HEAP32[$5 + 16 >> 2];
    if ($2) {
     HEAP32[$3 + 16 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    $2 = HEAP32[$5 + 20 >> 2];
    if (!$2) {
     break label$11;
    }
    HEAP32[$3 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $3;
   }
   if ($9 >>> 0 <= 15) {
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $7 | 2;
    $1 = $0 + $7 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
    break label$5;
   }
   HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
   $1 = $0 + $1 | 0;
   HEAP32[$1 + 4 >> 2] = $9 | 3;
   $2 = $0 + $7 | 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
   dispose_chunk($1, $9);
  }
  $2 = $0;
 }
 return $2;
}
function std____2__vector_PicFamily_2c_20std____2__allocator_PicFamily__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $3 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  if (($3 - $2 | 0) / 56 >>> 0 >= $1 >>> 0) {
   while (1) {
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 16 >> 2] = -1;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = -1;
    HEAP32[$2 + 28 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = 0;
    HEAP32[$2 + 36 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 48 >> 2] = 0;
    HEAP32[$2 + 52 >> 2] = 0;
    $2 = HEAP32[$0 + 4 >> 2] + 56 | 0;
    HEAP32[$0 + 4 >> 2] = $2;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue;
    }
    break label$1;
   }
  }
  $5 = HEAP32[$0 >> 2];
  $6 = ($2 - $5 | 0) / 56 | 0;
  $4 = $6 + $1 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     if ($4 >>> 0 < 76695845) {
      $2 = 0;
      $3 = ($3 - $5 | 0) / 56 | 0;
      $5 = $3 << 1;
      $4 = $3 >>> 0 < 38347922 ? $5 >>> 0 < $4 >>> 0 ? $4 : $5 : 76695844;
      if ($4) {
       if ($4 >>> 0 >= 76695845) {
        break label$6;
       }
       $2 = operator_20new_28unsigned_20long_29(Math_imul($4, 56));
      }
      $7 = Math_imul($4, 56) + $2 | 0;
      $3 = Math_imul($6, 56) + $2 | 0;
      $2 = $3;
      while (1) {
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 20 >> 2] = 0;
       HEAP32[$2 + 24 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = -1;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 12 >> 2] = -1;
       HEAP32[$2 + 28 >> 2] = 0;
       HEAP32[$2 + 32 >> 2] = 0;
       HEAP32[$2 + 36 >> 2] = 0;
       HEAP32[$2 + 40 >> 2] = 0;
       HEAP32[$2 + 44 >> 2] = 0;
       HEAP32[$2 + 48 >> 2] = 0;
       HEAP32[$2 + 52 >> 2] = 0;
       $2 = $2 + 56 | 0;
       $1 = $1 + -1 | 0;
       if ($1) {
        continue;
       }
       break;
      }
      $1 = HEAP32[$0 + 4 >> 2];
      $4 = HEAP32[$0 >> 2];
      if (($1 | 0) == ($4 | 0)) {
       break label$5;
      }
      while (1) {
       $1 = $1 + -56 | 0;
       $6 = HEAP32[$1 + 4 >> 2];
       $3 = $3 + -56 | 0;
       HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$3 + 4 >> 2] = $6;
       HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = 0;
       HEAP32[$3 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
       $5 = HEAP32[$1 + 16 >> 2];
       HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
       HEAP32[$3 + 16 >> 2] = $5;
       HEAP32[$3 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
       $5 = HEAP32[$1 + 28 >> 2];
       HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
       HEAP32[$3 + 28 >> 2] = $5;
       HEAP32[$1 + 32 >> 2] = 0;
       HEAP32[$1 + 24 >> 2] = 0;
       HEAP32[$1 + 28 >> 2] = 0;
       HEAP32[$3 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
       $5 = HEAP32[$1 + 40 >> 2];
       HEAP32[$3 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
       HEAP32[$3 + 40 >> 2] = $5;
       HEAP32[$1 + 36 >> 2] = 0;
       HEAP32[$1 + 40 >> 2] = 0;
       HEAP32[$1 + 44 >> 2] = 0;
       $5 = HEAP32[$1 + 52 >> 2];
       HEAP32[$3 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
       HEAP32[$3 + 52 >> 2] = $5;
       if (($1 | 0) != ($4 | 0)) {
        continue;
       }
       break;
      }
      $4 = HEAP32[$0 + 4 >> 2];
      $1 = HEAP32[$0 >> 2];
      break label$4;
     }
     std____2____vector_base_common_true_____throw_length_error_28_29_20const();
     abort();
    }
    std____2____throw_length_error_28char_20const__29(2740);
    abort();
   }
   $1 = $4;
  }
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $2;
  if (($1 | 0) != ($4 | 0)) {
   while (1) {
    if (HEAP8[$4 + -9 | 0] <= -1) {
     dlfree(HEAP32[$4 + -20 >> 2]);
    }
    if (HEAP8[$4 + -21 | 0] <= -1) {
     dlfree(HEAP32[$4 + -32 >> 2]);
    }
    $4 = $4 + -56 | 0;
    if (HEAP8[$4 + 11 | 0] <= -1) {
     dlfree(HEAP32[$4 >> 2]);
    }
    if (($1 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  if (!$1) {
   break label$1;
  }
  dlfree($1);
 }
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_MyObject__MyPointWrapper_2c_20void_____2c_20bool__20std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20_____emplace_unique_key_args_MyObject__MyPointWrapper_2c_20MyObject__MyPointWrapper__28MyObject__MyPointWrapper_20const__2c_20MyObject__MyPointWrapper___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0;
 $4 = HEAP32[$2 >> 2];
 $2 = $4;
 $11 = HEAPF32[$2 + 4 >> 2];
 $9 = HEAPF32[$2 >> 2];
 $8 = HEAPF32[$2 + 8 >> 2];
 $4 = HEAP32[$2 >> 2] ^ HEAP32[$2 + 4 >> 2] >>> 8 ^ HEAP32[$2 + 8 >> 2] >>> 16;
 $12 = $0;
 $5 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  label$2 : {
   if (!$5) {
    break label$2;
   }
   $7 = HEAP32[$1 >> 2];
   $2 = $5 + -1 & $4;
   $6 = __wasm_popcnt_i32($5);
   label$3 : {
    if ($6 >>> 0 <= 1) {
     break label$3;
    }
    $2 = $4;
    if ($2 >>> 0 < $5 >>> 0) {
     break label$3;
    }
    $2 = ($4 >>> 0) % ($5 >>> 0) | 0;
   }
   $10 = $7;
   $7 = $2;
   $2 = HEAP32[$10 + ($2 << 2) >> 2];
   if (!$2) {
    break label$2;
   }
   $2 = HEAP32[$2 >> 2];
   if (!$2) {
    break label$2;
   }
   if ($6 >>> 0 >= 2) {
    while (1) {
     $6 = HEAP32[$2 + 4 >> 2];
     if (($6 | 0) != ($4 | 0)) {
      if ($6 >>> 0 >= $5 >>> 0) {
       $6 = ($6 >>> 0) % ($5 >>> 0) | 0;
      }
      if (($6 | 0) != ($7 | 0)) {
       break label$2;
      }
     }
     $6 = HEAP32[$2 + 8 >> 2];
     if (!(HEAPF32[$6 >> 2] != $9 | HEAPF32[$6 + 4 >> 2] != $11 | HEAPF32[$6 + 8 >> 2] != $8)) {
      $1 = 0;
      break label$1;
     }
     $2 = HEAP32[$2 >> 2];
     if ($2) {
      continue;
     }
     break label$2;
    }
   }
   $10 = $5 + -1 | 0;
   while (1) {
    $6 = HEAP32[$2 + 4 >> 2];
    if (($6 & $10) != ($7 | 0) ? ($6 | 0) != ($4 | 0) : 0) {
     break label$2;
    }
    $6 = HEAP32[$2 + 8 >> 2];
    if (!(HEAPF32[$6 >> 2] != $9 | HEAPF32[$6 + 4 >> 2] != $11 | HEAPF32[$6 + 8 >> 2] != $8)) {
     $1 = 0;
     break label$1;
    }
    $2 = HEAP32[$2 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  $2 = operator_20new_28unsigned_20long_29(12);
  $3 = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 >> 2] = 0;
  $9 = HEAPF32[$1 + 16 >> 2];
  $8 = Math_fround(HEAP32[$1 + 12 >> 2] + 1 >>> 0);
  label$12 : {
   if (!(!$5 | !!(Math_fround($9 * Math_fround($5 >>> 0)) < $8))) {
    $4 = $7;
    break label$12;
   }
   $7 = ($5 + -1 & $5) != 0 | $5 >>> 0 < 3 | $5 << 1;
   $3 = $1;
   $8 = Math_fround(Math_ceil(Math_fround($8 / $9)));
   label$14 : {
    if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
     $6 = ~~$8 >>> 0;
     break label$14;
    }
    $6 = 0;
   }
   std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20___rehash_28unsigned_20long_29($3, $7 >>> 0 < $6 >>> 0 ? $6 : $7);
   $5 = HEAP32[$1 + 4 >> 2];
   if (!($5 & $5 + -1)) {
    $4 = $5 + -1 & $4;
    break label$12;
   }
   if ($4 >>> 0 < $5 >>> 0) {
    break label$12;
   }
   $4 = ($4 >>> 0) % ($5 >>> 0) | 0;
  }
  $7 = HEAP32[$1 >> 2] + ($4 << 2) | 0;
  $4 = HEAP32[$7 >> 2];
  label$17 : {
   label$18 : {
    if (!$4) {
     $3 = $1 + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$7 >> 2] = $3;
     $3 = HEAP32[$2 >> 2];
     if (!$3) {
      break label$17;
     }
     $4 = HEAP32[$3 + 4 >> 2];
     $3 = $5 + -1 | 0;
     label$20 : {
      if (!($3 & $5)) {
       $4 = $3 & $4;
       break label$20;
      }
      if ($4 >>> 0 < $5 >>> 0) {
       break label$20;
      }
      $4 = ($4 >>> 0) % ($5 >>> 0) | 0;
     }
     $4 = HEAP32[$1 >> 2] + ($4 << 2) | 0;
     break label$18;
    }
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   }
   HEAP32[$4 >> 2] = $2;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
  $1 = 1;
 }
 HEAP8[$12 + 4 | 0] = $1;
 HEAP32[$0 >> 2] = $2;
}
function std____2__init_wmonths_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[52624] != 0) | HEAP8[52624] & 1)) {
  $0 = 52336;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 52624) {
    continue;
   }
   break;
  }
  HEAP32[13156] = 0;
  HEAP32[13156] = HEAP32[13156] | 1;
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52336, 33160);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52348, 33192);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52360, 33228);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52372, 33252);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52384, 33276);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52396, 33292);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52408, 33312);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52420, 33332);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52432, 33360);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52444, 33400);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52456, 33432);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52468, 33468);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52480, 33504);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52492, 33520);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52504, 33536);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52516, 33552);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52528, 33276);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52540, 33568);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52552, 33584);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52564, 33600);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52576, 33616);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52588, 33632);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52600, 33648);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52612, 33664);
}
function CubeDocBase__onGenShape_28bool_2c_20GenTemplate_20const__2c_20OrderTemplate_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $5 = operator_20new_28unsigned_20long_29(188);
 $4 = $5;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = -1;
 HEAP32[$4 >> 2] = -1;
 HEAP32[$4 + 4 >> 2] = -1;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 68 >> 2] = 0;
 HEAP32[$4 + 72 >> 2] = 50;
 HEAP32[$4 + 76 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 50;
 HEAP32[$4 + 84 >> 2] = 0;
 HEAP32[$4 + 88 >> 2] = 50;
 HEAP32[$4 + 116 >> 2] = -1;
 HEAP32[$4 + 120 >> 2] = -1;
 HEAP8[$4 + 17 | 0] = 0;
 HEAP8[$4 + 18 | 0] = 0;
 HEAP8[$4 + 19 | 0] = 0;
 HEAP8[$4 + 20 | 0] = 0;
 HEAP8[$4 + 21 | 0] = 0;
 HEAP8[$4 + 22 | 0] = 0;
 HEAP8[$4 + 23 | 0] = 0;
 HEAP8[$4 + 24 | 0] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 48 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 HEAP32[$4 + 56 >> 2] = 0;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 64 >> 2] = 0;
 HEAP32[$4 + 92 >> 2] = 0;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 100 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 HEAP32[$4 + 108 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = 0;
 HEAP32[$4 + 132 >> 2] = -1;
 HEAP32[$4 + 124 >> 2] = -1;
 HEAP32[$4 + 128 >> 2] = -1;
 HEAP32[$4 + 140 >> 2] = -1;
 HEAP32[$4 + 144 >> 2] = -1;
 HEAP32[$4 + 136 >> 2] = 0;
 HEAP32[$4 + 148 >> 2] = -1;
 HEAP32[$4 + 152 >> 2] = -1;
 HEAP32[$4 + 160 >> 2] = -1;
 HEAP32[$4 + 164 >> 2] = -1;
 HEAP32[$4 + 156 >> 2] = 0;
 HEAP32[$4 + 168 >> 2] = -1;
 HEAP32[$4 + 172 >> 2] = -1;
 HEAP32[$4 + 176 >> 2] = 0;
 HEAP32[$4 + 180 >> 2] = $2;
 HEAP32[$4 + 184 >> 2] = $3;
 $6 = CubeDocBase__callGenerate_28Shape__2c_20bool_29($0, $4);
 HEAP32[$4 + 180 >> 2] = 0;
 HEAP32[$4 + 184 >> 2] = 0;
 label$1 : {
  if ($6) {
   HEAP8[HEAP32[$0 + 128 >> 2] + 375136 | 0] = 0;
   $3 = operator_20new_28unsigned_20long_29(16);
   HEAP32[$3 + 12 >> 2] = $5;
   HEAP32[$3 >> 2] = 16840;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$0 + 116 >> 2] = $5;
   $2 = HEAP32[$0 + 120 >> 2];
   HEAP32[$0 + 120 >> 2] = $3;
   label$3 : {
    if (!$2) {
     break label$3;
    }
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $3 + -1;
    if ($3) {
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
    std____2____shared_weak_count____release_weak_28_29($2);
   }
   $2 = HEAP32[$0 + 88 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[HEAP32[$0 + 116 >> 2] + 12 >> 2]);
   $3 = HEAP32[$0 + 92 >> 2];
   $2 = HEAP32[$0 + 96 >> 2] - $3 | 0;
   if (($2 | 0) >= 1) {
    $2 = $2 >>> 2;
    memset($3, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
    $3 = HEAP32[$0 + 92 >> 2];
    $2 = HEAP32[$0 + 96 >> 2] - $3 | 0;
   }
   $4 = HEAP32[HEAP32[$0 + 116 >> 2] + 12 >> 2];
   $2 = $2 >> 2;
   label$5 : {
    if ($4 >>> 0 > $2 >>> 0) {
     std____2__vector_int_2c_20std____2__allocator_int__20_____append_28unsigned_20long_29($0 + 92 | 0, $4 - $2 | 0);
     break label$5;
    }
    if ($4 >>> 0 >= $2 >>> 0) {
     break label$5;
    }
    HEAP32[$0 + 96 >> 2] = ($4 << 2) + $3;
   }
   if (!$1) {
    break label$1;
   }
   $4 = HEAP32[HEAP32[$0 + 116 >> 2] + 12 >> 2];
   $1 = HEAP32[$0 + 124 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   if (($2 | 0) != ($3 | 0)) {
    while (1) {
     $5 = HEAP32[$2 >> 2];
     if ($5) {
      dlfree(SlvCube___SlvCube_28_29($5));
      $3 = HEAP32[$1 + 12 >> 2];
     }
     $2 = $2 + 4 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
    $2 = HEAP32[$1 + 8 >> 2];
   }
   HEAP32[$1 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $2;
   label$10 : {
    if (!HEAPU8[$1 + 20 | 0]) {
     break label$10;
    }
    HEAP8[$1 + 20 | 0] = 0;
    $1 = HEAP32[$1 + 4 >> 2];
    if (!$1) {
     break label$10;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1, 0);
   }
   HEAP32[$0 + 132 >> 2] = -1;
   return $6 | 0;
  }
  Shape___Shape_28_29($5);
  dlfree($5);
 }
 return $6 | 0;
}
function populatePicsSide_28PicBucket__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 label$1 : {
  $4 = HEAP32[$0 + 52 >> 2];
  $7 = HEAP32[$0 + 56 >> 2];
  label$2 : {
   if (($4 | 0) == ($7 | 0)) {
    break label$2;
   }
   while (1) {
    HEAP32[$1 + 72 >> 2] = 0;
    HEAP32[$1 + 64 >> 2] = 0;
    HEAP32[$1 + 68 >> 2] = 0;
    $3 = HEAP8[$4 + 11 | 0];
    label$4 : {
     if (($3 | 0) <= -1) {
      $6 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      break label$4;
     }
     $6 = $4;
     $3 = $3 & 255;
    }
    if ($3) {
     $2 = $3 + $6 | 0;
     $3 = 0;
     while (1) {
      $5 = HEAPU8[$6 | 0];
      if (!(($5 + -65 & 255) >>> 0 > 25 ? ($3 + -65 & 255) >>> 0 >= 26 : 0)) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($1 - -64 | 0, $5 << 24 >> 24);
      }
      $3 = $5;
      $6 = $6 + 1 | 0;
      if (($2 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($4 + 36 | 0, $1 - -64 | 0);
    $5 = $1;
    if (HEAP8[$4 + 11 | 0] < 0) {
     $2 = HEAP32[$4 >> 2];
    } else {
     $2 = $4;
    }
    HEAP32[$5 + 32 >> 2] = $2;
    HEAP32[$1 + 36 >> 2] = HEAP8[$1 + 75 | 0] < 0 ? HEAP32[$1 + 64 >> 2] : $1 - -64 | 0;
    emscripten_asm_const_iii(1178, 1243, $1 + 32 | 0) | 0;
    if (HEAP32[$4 + 16 >> 2] >= 1) {
     $6 = 0;
     while (1) {
      $10 = $1 + 48 | 0;
      $8 = HEAP32[$4 + 12 >> 2] + $6 | 0;
      $9 = HEAP32[$0 + 4 >> 2] + Math_imul($8, 152) | 0;
      $2 = $9 + 24 | 0;
      $11 = $2;
      $5 = $2;
      $3 = HEAP32[$2 >> 2];
      label$14 : {
       if (HEAP8[$2 + 11 | 0] < 0) {
        break label$14;
       }
       $3 = $5;
      }
      if (HEAP8[$5 + 11 | 0] < 0) {
       $5 = HEAP32[$2 + 4 >> 2];
      } else {
       $5 = HEAPU8[$2 + 11 | 0];
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_char__20const__29($10, $11, unsigned_20long_20std____2____str_find_char_2c_20unsigned_20long_2c_20std____2__char_traits_char__2c_204294967295ul__28char_20const__2c_20unsigned_20long_2c_20char_2c_20unsigned_20long_29($3, $5) + 1 | 0);
      $3 = HEAP8[$1 + 59 | 0] < 0 ? HEAP32[$1 + 48 >> 2] : $1 + 48 | 0;
      $2 = HEAP8[$9 + 35 | 0] <= -1 ? HEAP32[$2 >> 2] : $2;
      HEAP32[$1 + 24 >> 2] = $8;
      HEAP32[$1 + 20 >> 2] = $2;
      HEAP32[$1 + 16 >> 2] = $3;
      emscripten_asm_const_iii(1246, 1319, $1 + 16 | 0) | 0;
      if (HEAP8[$1 + 59 | 0] <= -1) {
       dlfree(HEAP32[$1 + 48 >> 2]);
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) < HEAP32[$4 + 16 >> 2]) {
       continue;
      }
      break;
     }
    }
    if (HEAP8[$1 + 75 | 0] <= -1) {
     dlfree(HEAP32[$1 + 64 >> 2]);
    }
    $4 = $4 + 56 | 0;
    if (($7 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 52 >> 2];
   $5 = HEAP32[$0 + 56 >> 2];
   if (($2 | 0) == ($5 | 0)) {
    break label$2;
   }
   while (1) {
    $0 = HEAP32[$2 + 20 >> 2];
    if (($0 | 0) >= 1) {
     if (($0 | 0) != 1) {
      break label$1;
     }
     $3 = $2 + 36 | 0;
     $0 = $1;
     if (HEAP8[$2 + 47 | 0] <= -1) {
      $3 = HEAP32[$2 + 36 >> 2];
     }
     HEAP32[$0 >> 2] = $3;
     emscripten_asm_const_iii(1376, 1062, $1 | 0) | 0;
    }
    $2 = $2 + 56 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  global$0 = $1 + 80 | 0;
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 1323);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function readCubeTexCoord_28int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $14 = global$0 - 16 | 0;
 global$0 = $14;
 label$1 : {
  label$2 : {
   if (($0 | 0) >= 0) {
    $15 = HEAP32[11988];
    $7 = HEAP32[$15 + 4 >> 2];
    if ((HEAP32[$15 + 8 >> 2] - $7 | 0) / 152 >>> 0 > $0 >>> 0) {
     break label$2;
    }
   }
   $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1835, 18), $0);
   $0 = HEAP32[(HEAP32[HEAP32[$4 >> 2] + -12 >> 2] + $4 | 0) + 28 >> 2];
   HEAP32[$14 + 8 >> 2] = $0;
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   $0 = std____2__locale__use_facet_28std____2__locale__id__29_20const($14 + 8 | 0, 51440);
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, 10) | 0;
   $2 = HEAP32[$14 + 8 >> 2];
   $1 = HEAP32[$2 + 4 >> 2] + -1 | 0;
   HEAP32[$2 + 4 >> 2] = $1;
   if (($1 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($4, $0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($4);
   break label$1;
  }
  $7 = $7 + Math_imul($0, 152) | 0;
  HEAPF32[$7 + 92 >> 2] = $3;
  HEAP32[$7 + 84 >> 2] = $1;
  HEAP32[$7 + 88 >> 2] = $2;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2], 652) | 0;
  $9 = $3 * 15;
  $16 = +($6 | 0);
  $11 = +($1 | 0) / ($16 * 15 * $3);
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11852] / $9 - $11;
  $8 = HEAPF32[11853];
  $17 = +($5 | 0) / +($4 | 0) / .7333333333333333;
  $10 = $17 * 11 * $3;
  $12 = Math_fround(5 / $10);
  HEAPF32[$0 + 320 >> 2] = $12;
  $13 = Math_fround(5 / $9);
  HEAPF32[$0 + 316 >> 2] = $13;
  $3 = +($2 | 0) / ($16 * 11 * $17 * $3);
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] + 4 >> 2], 652) | 0;
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11854] / $9 - $11;
  $8 = HEAPF32[11855];
  HEAPF32[$0 + 320 >> 2] = $12;
  HEAPF32[$0 + 316 >> 2] = $13;
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] + 8 >> 2], 652) | 0;
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11856] / $9 - $11;
  $8 = HEAPF32[11857];
  HEAPF32[$0 + 320 >> 2] = $12;
  HEAPF32[$0 + 316 >> 2] = $13;
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] + 12 >> 2], 652) | 0;
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11858] / $9 - $11;
  $8 = HEAPF32[11859];
  HEAPF32[$0 + 320 >> 2] = $12;
  HEAPF32[$0 + 316 >> 2] = $13;
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] + 16 >> 2], 652) | 0;
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11860] / $9 - $11;
  $8 = HEAPF32[11861];
  HEAPF32[$0 + 320 >> 2] = $12;
  HEAPF32[$0 + 316 >> 2] = $13;
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[HEAP32[$7 >> 2] + 20 >> 2], 652) | 0;
  HEAPF32[$0 + 308 >> 2] = +HEAPF32[11862] / $9 - $11;
  $8 = HEAPF32[11863];
  HEAPF32[$0 + 320 >> 2] = $12;
  HEAPF32[$0 + 316 >> 2] = $13;
  HEAPF32[$0 + 312 >> 2] = +$8 / $10 - $3;
  $0 = HEAP32[11720];
  if (HEAPU8[$0 + 2612 | 0]) {
   break label$1;
  }
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $14 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $1 = HEAP32[$0 >> 2];
 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
  $1 = HEAP8[$1 | 0];
 } else {
  $1 = 0;
 }
 label$1 : {
  if (($1 << 24 >> 24) + -48 >>> 0 <= 9) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 37396);
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 37399);
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0);
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
  HEAP32[$2 + 28 >> 2] = $1;
  if (!$1) {
   break label$1;
  }
  $3 = $1;
  $1 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
   $1 = HEAPU8[$1 | 0];
  } else {
   $1 = 0;
  }
  if (($1 & 255) != 73) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
  HEAP32[$2 + 24 >> 2] = $3;
  if ($3) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 28 | 0, $2 + 24 | 0);
  } else {
   $3 = 0;
  }
 }
 global$0 = $2 + 48 | 0;
 return $3;
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
   HEAP32[$1 + 28 >> 2] = $3;
  }
  return;
 }
 label$3 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$3;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $8 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $9 = $1;
    label$8 : {
     label$9 : {
      while (1) {
       label$11 : {
        if ($5 >>> 0 >= $8 >>> 0) {
         break label$11;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$11;
        }
        label$12 : {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$12;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $3 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$9;
          }
          $7 = 1;
          $6 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$12;
          }
          break label$9;
         }
         $7 = 1;
         $3 = $6;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$9;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $3 = $6;
      $0 = 4;
      if (!$7) {
       break label$8;
      }
     }
     $0 = 3;
    }
    HEAP32[$9 + 44 >> 2] = $0;
    if ($3 & 1) {
     break label$3;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$3;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $6 = HEAP32[$0 + 12 >> 2];
  $5 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
  if (($6 | 0) < 2) {
   break label$3;
  }
  $6 = $5 + ($6 << 3) | 0;
  $5 = $0 + 24 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$3;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break;
   }
   break label$3;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$3;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break label$3;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
    break label$3;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function Mesh__makeSelfBos_28bool_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$0 + 140 >> 2] = ($2 | 0) / 12;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + 132 | 0;
  $2 = HEAP32[$3 >> 2];
  if (!$2) {
   glGenBuffers(1, $3 | 0);
   $2 = HEAP32[$3 >> 2];
  }
  glBindBuffer(HEAP32[$0 + 136 >> 2], $2 | 0);
  $2 = HEAP32[$0 + 8 >> 2];
  glBufferData(HEAP32[$0 + 136 >> 2], HEAP32[$0 + 12 >> 2] - $2 | 0, $2 | 0, 35044);
  label$3 : {
   if (!HEAPU8[$0 + 108 | 0]) {
    break label$3;
   }
   $2 = HEAP32[$0 + 24 >> 2] - HEAP32[$0 + 20 >> 2] | 0;
   HEAP32[$0 + 152 >> 2] = ($2 | 0) / 12;
   if (!$2) {
    break label$3;
   }
   $3 = $0 + 144 | 0;
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    glGenBuffers(1, $3 | 0);
    $2 = HEAP32[$3 >> 2];
   }
   glBindBuffer(HEAP32[$0 + 148 >> 2], $2 | 0);
   $2 = HEAP32[$0 + 20 >> 2];
   glBufferData(HEAP32[$0 + 148 >> 2], HEAP32[$0 + 24 >> 2] - $2 | 0, $2 | 0, 35044);
  }
  label$5 : {
   if (!HEAPU8[$0 + 110 | 0]) {
    break label$5;
   }
   $2 = HEAP32[$0 + 48 >> 2] - HEAP32[$0 + 44 >> 2] | 0;
   HEAP32[$0 + 176 >> 2] = $2 >> 2;
   if (!$2) {
    break label$5;
   }
   $3 = $0 + 168 | 0;
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    glGenBuffers(1, $3 | 0);
    $2 = HEAP32[$3 >> 2];
   }
   glBindBuffer(HEAP32[$0 + 172 >> 2], $2 | 0);
   $2 = HEAP32[$0 + 44 >> 2];
   glBufferData(HEAP32[$0 + 172 >> 2], HEAP32[$0 + 48 >> 2] - $2 | 0, $2 | 0, 35044);
  }
  label$7 : {
   if (!HEAPU8[$0 + 109 | 0]) {
    break label$7;
   }
   $2 = HEAP32[$0 + 36 >> 2] - HEAP32[$0 + 32 >> 2] | 0;
   HEAP32[$0 + 164 >> 2] = $2 >> 4;
   if (!$2) {
    break label$7;
   }
   $3 = $0 + 156 | 0;
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    glGenBuffers(1, $3 | 0);
    $2 = HEAP32[$3 >> 2];
   }
   glBindBuffer(HEAP32[$0 + 160 >> 2], $2 | 0);
   $2 = HEAP32[$0 + 32 >> 2];
   glBufferData(HEAP32[$0 + 160 >> 2], HEAP32[$0 + 36 >> 2] - $2 | 0, $2 | 0, 35044);
  }
  label$9 : {
   if (!HEAPU8[$0 + 113 | 0]) {
    break label$9;
   }
   $2 = HEAP32[$0 + 60 >> 2] - HEAP32[$0 + 56 >> 2] | 0;
   HEAP32[$0 + 188 >> 2] = $2 >> 2;
   if (!$2) {
    break label$9;
   }
   $3 = $0 + 180 | 0;
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    glGenBuffers(1, $3 | 0);
    $2 = HEAP32[$3 >> 2];
   }
   glBindBuffer(HEAP32[$0 + 184 >> 2], $2 | 0);
   $2 = HEAP32[$0 + 56 >> 2];
   glBufferData(HEAP32[$0 + 184 >> 2], HEAP32[$0 + 60 >> 2] - $2 | 0, $2 | 0, 35044);
  }
  label$11 : {
   if (!HEAPU8[$0 + 111 | 0]) {
    break label$11;
   }
   $2 = HEAP32[$0 + 72 >> 2] - HEAP32[$0 + 68 >> 2] | 0;
   HEAP32[$0 + 200 >> 2] = $2 >> 1;
   if (!$2) {
    break label$11;
   }
   $3 = $0 + 192 | 0;
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    glGenBuffers(1, $3 | 0);
    $2 = HEAP32[$3 >> 2];
   }
   glBindBuffer(HEAP32[$0 + 196 >> 2], $2 | 0);
   $2 = HEAP32[$0 + 68 >> 2];
   glBufferData(HEAP32[$0 + 196 >> 2], HEAP32[$0 + 72 >> 2] - $2 | 0, $2 | 0, 35044);
  }
  if (!$1) {
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20___shrink_to_fit_28_29($0 + 8 | 0);
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
  std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20___shrink_to_fit_28_29($0 + 20 | 0);
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 68 >> 2];
  std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20___shrink_to_fit_28_29($0 + 68 | 0);
  HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 44 >> 2];
  std____2__vector_Vec4b_2c_20std____2__allocator_Vec4b__20___shrink_to_fit_28_29($0 + 44 | 0);
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
  std____2__vector_Vec4_2c_20std____2__allocator_Vec4__20___shrink_to_fit_28_29($0 + 32 | 0);
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
  std____2__vector_float_2c_20std____2__allocator_float__20___shrink_to_fit_28_29($0 + 56 | 0);
 }
}
function std____2__init_months_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[52320] != 0) | HEAP8[52320] & 1)) {
  $0 = 52032;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 52320) {
    continue;
   }
   break;
  }
  HEAP32[13080] = 0;
  HEAP32[13080] = HEAP32[13080] | 1;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52032, 33028);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52044, 33036);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52056, 33045);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52068, 33051);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52080, 33057);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52092, 33061);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52104, 33066);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52116, 33071);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52128, 33078);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52140, 33088);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52152, 33096);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52164, 33105);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52176, 33114);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52188, 33118);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52200, 33122);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52212, 33126);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52224, 33057);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52236, 33130);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52248, 33134);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52260, 33138);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52272, 33142);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52284, 33146);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52296, 33150);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52308, 33154);
}
function BuildWorld__unGenerate_28Shape_20const__2c_20SqrLimits__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 BuildWorld__clean_28BuildWorld__ECleanMethod_29($0, 0);
 $8 = (HEAP32[$0 + 8 >> 2] - (HEAP32[$1 + 8 >> 2] / 4 | 0) | 0) / 2 | 0;
 $9 = (HEAP32[$0 + 4 >> 2] - (HEAP32[$1 + 4 >> 2] / 4 | 0) | 0) / 2 | 0;
 $10 = (HEAP32[$0 >> 2] - (HEAP32[$1 >> 2] / 4 | 0) | 0) / 2 | 0;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2] < 1) {
   break label$1;
  }
  $6 = HEAP32[$1 + 28 >> 2];
  $3 = (HEAP32[$6 + 4 >> 2] / 4 | 0) + $10 | 0;
  $4 = (HEAP32[$6 + 12 >> 2] / 4 | 0) + $8 | 0;
  $5 = (HEAP32[$6 + 8 >> 2] / 4 | 0) + $9 | 0;
  $6 = HEAP32[$6 >> 2];
  label$2 : {
   if ($6 >>> 0 > 2) {
    break label$2;
   }
   label$3 : {
    switch ($6 - 1 | 0) {
    case 1:
     if ($4 >>> 0 > 49 | $3 >>> 0 > 49 | $5 >>> 0 > 49) {
      break label$2;
     }
     HEAP8[($5 + ((Math_imul($4, 2500) + $0 | 0) + Math_imul($3, 50) | 0) | 0) + 250136 | 0] = 10;
     break label$2;
    case 0:
     if ($5 >>> 0 > 49 | $3 >>> 0 > 49 | $4 >>> 0 > 49) {
      break label$2;
     }
     HEAP8[($4 + ((Math_imul($5, 2500) + $0 | 0) + Math_imul($3, 50) | 0) | 0) + 125136 | 0] = 10;
     break label$2;
    default:
     break label$3;
    }
   }
   if ($3 >>> 0 > 49 | $5 >>> 0 > 49 | $4 >>> 0 > 49) {
    break label$2;
   }
   HEAP8[($4 + ((Math_imul($3, 2500) + $0 | 0) + Math_imul($5, 50) | 0) | 0) + 136 | 0] = 10;
  }
  $4 = $4 << 2;
  if (HEAP32[$2 + 4 >> 2] < ($4 | 0)) {
   HEAP32[$2 + 4 >> 2] = $4;
  }
  if (HEAP32[$2 >> 2] > ($4 | 0)) {
   HEAP32[$2 >> 2] = $4;
  }
  $3 = $3 << 2;
  if (HEAP32[$2 + 12 >> 2] < ($3 | 0)) {
   HEAP32[$2 + 12 >> 2] = $3;
  }
  if (HEAP32[$2 + 8 >> 2] > ($3 | 0)) {
   HEAP32[$2 + 8 >> 2] = $3;
  }
  $3 = $5 << 2;
  if (HEAP32[$2 + 20 >> 2] < ($3 | 0)) {
   HEAP32[$2 + 20 >> 2] = $3;
  }
  if (HEAP32[$2 + 16 >> 2] > ($3 | 0)) {
   HEAP32[$2 + 16 >> 2] = $3;
  }
  $6 = 1;
  if (HEAP32[$1 + 12 >> 2] <= 1) {
   break label$1;
  }
  while (1) {
   $7 = HEAP32[$1 + 28 >> 2] + Math_imul($6, 188) | 0;
   $3 = (HEAP32[$7 + 4 >> 2] / 4 | 0) + $10 | 0;
   $4 = (HEAP32[$7 + 12 >> 2] / 4 | 0) + $8 | 0;
   $5 = (HEAP32[$7 + 8 >> 2] / 4 | 0) + $9 | 0;
   $7 = HEAP32[$7 >> 2];
   label$13 : {
    if ($7 >>> 0 > 2) {
     break label$13;
    }
    label$14 : {
     switch ($7 - 1 | 0) {
     default:
      if ($3 >>> 0 > 49 | $5 >>> 0 > 49 | $4 >>> 0 > 49) {
       break label$13;
      }
      HEAP8[($4 + ((Math_imul($3, 2500) + $0 | 0) + Math_imul($5, 50) | 0) | 0) + 136 | 0] = 9;
      break label$13;
     case 0:
      if ($5 >>> 0 > 49 | $3 >>> 0 > 49 | $4 >>> 0 > 49) {
       break label$13;
      }
      HEAP8[($4 + ((Math_imul($5, 2500) + $0 | 0) + Math_imul($3, 50) | 0) | 0) + 125136 | 0] = 9;
      break label$13;
     case 1:
      break label$14;
     }
    }
    if ($4 >>> 0 > 49 | $3 >>> 0 > 49 | $5 >>> 0 > 49) {
     break label$13;
    }
    HEAP8[($5 + ((Math_imul($4, 2500) + $0 | 0) + Math_imul($3, 50) | 0) | 0) + 250136 | 0] = 9;
   }
   $4 = $4 << 2;
   if (HEAP32[$2 + 4 >> 2] < ($4 | 0)) {
    HEAP32[$2 + 4 >> 2] = $4;
   }
   if (HEAP32[$2 >> 2] > ($4 | 0)) {
    HEAP32[$2 >> 2] = $4;
   }
   $3 = $3 << 2;
   if (HEAP32[$2 + 12 >> 2] < ($3 | 0)) {
    HEAP32[$2 + 12 >> 2] = $3;
   }
   if (HEAP32[$2 + 8 >> 2] > ($3 | 0)) {
    HEAP32[$2 + 8 >> 2] = $3;
   }
   $3 = $5 << 2;
   if (HEAP32[$2 + 20 >> 2] < ($3 | 0)) {
    HEAP32[$2 + 20 >> 2] = $3;
   }
   if (HEAP32[$2 + 16 >> 2] > ($3 | 0)) {
    HEAP32[$2 + 16 >> 2] = $3;
   }
   $6 = $6 + 1 | 0;
   if (($6 | 0) < HEAP32[$1 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 BuildWorld__reClacLimits_28_29($0);
 BuildWorld__bootstrapSpace_28_29($0);
 $1 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 375136 | 0] = 0;
 HEAP32[$0 + 32 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $4 = $1 + 56 | 0;
 $2 = $4;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 43420);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $3;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 43423);
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 60 >> 2] = $2;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 43430);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 43433);
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 60 >> 2] = $2;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 43439);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
   break label$1;
  }
  $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 43442);
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 60 >> 2] = $2;
 }
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
 HEAP32[$1 + 40 >> 2] = $2;
 label$4 : {
  if (!$2) {
   break label$4;
  }
  $5 = $2;
  if (HEAP32[$4 >> 2] == HEAP32[$4 + 4 >> 2]) {
   break label$4;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $4, $1 + 40 | 0);
 }
 global$0 = $1 - -64 | 0;
 return $5;
}
function MyAllocator__checkMaxAlloc_28_29_20const() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!(HEAP32[11886] <= HEAP32[11883] ? !(HEAP32[11876] > HEAP32[11873] | HEAP32[11881] > HEAP32[11878]) : 0)) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 16556, 40);
   break label$1;
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 16597, 12);
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 16610, 5), HEAP32[11873]), 7528, 1), HEAP32[11876]), 16616, 7), HEAP32[11878]), 7528, 1), HEAP32[11881]), 16624, 4), HEAP32[11883]), 7528, 1), HEAP32[11886]);
 $0 = HEAP32[($2 + HEAP32[HEAP32[$2 >> 2] + -12 >> 2] | 0) + 28 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 8 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, 10) | 0;
 $0 = HEAP32[$1 + 8 >> 2];
 $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 global$0 = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 65)) {
   break label$1;
  }
  $3 = $1 + 24 | 0;
  $2 = $3;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
   $2 = HEAP8[$2 | 0];
  } else {
   $2 = 0;
  }
  label$2 : {
   if (($2 << 24 >> 24) + -48 >>> 0 <= 9) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 0);
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($1 + 16 | 0, $1);
    $2 = HEAP32[$1 + 20 >> 2];
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$1 + 28 >> 2] = $2;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$2;
    }
    break label$1;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$2;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   if (!$2) {
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = $2;
   $2 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 28 >> 2] = $2;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 16 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString__29($0 + 368 | 0, $1 + 16 | 0, $3);
 }
 global$0 = $1 + 32 | 0;
 return $4;
}
function std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20_____rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  label$2 : {
   if ($1) {
    if ($1 >>> 0 >= 1073741824) {
     break label$1;
    }
    $3 = operator_20new_28unsigned_20long_29($1 << 2);
    $2 = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $3;
    if ($2) {
     dlfree($2);
    }
    HEAP32[$0 + 4 >> 2] = $1;
    $2 = 0;
    while (1) {
     HEAP32[HEAP32[$0 >> 2] + ($2 << 2) >> 2] = 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 < $1 >>> 0) {
      continue;
     }
     break;
    }
    $2 = $0 + 8 | 0;
    $3 = HEAP32[$2 >> 2];
    if (!$3) {
     break label$2;
    }
    $6 = HEAP32[$3 + 4 >> 2];
    $4 = __wasm_popcnt_i32($1);
    label$6 : {
     if ($4 >>> 0 <= 1) {
      $6 = $1 + -1 & $6;
      break label$6;
     }
     if ($6 >>> 0 < $1 >>> 0) {
      break label$6;
     }
     $6 = ($6 >>> 0) % ($1 >>> 0) | 0;
    }
    HEAP32[HEAP32[$0 >> 2] + ($6 << 2) >> 2] = $2;
    $2 = HEAP32[$3 >> 2];
    if (!$2) {
     break label$2;
    }
    if ($4 >>> 0 >= 2) {
     while (1) {
      $5 = HEAP32[$2 + 4 >> 2];
      if ($5 >>> 0 >= $1 >>> 0) {
       $5 = ($5 >>> 0) % ($1 >>> 0) | 0;
      }
      label$10 : {
       if (($6 | 0) == ($5 | 0)) {
        $3 = $2;
        break label$10;
       }
       $4 = $2;
       $7 = $5 << 2;
       $8 = $7 + HEAP32[$0 >> 2] | 0;
       if (HEAP32[$8 >> 2]) {
        while (1) {
         label$16 : {
          $5 = $4;
          $4 = HEAP32[$4 >> 2];
          if (!$4) {
           break label$16;
          }
          $8 = HEAP32[$2 + 8 >> 2];
          $9 = HEAP32[$4 + 8 >> 2];
          if (HEAPF32[$8 >> 2] != HEAPF32[$9 >> 2] | HEAPF32[$8 + 4 >> 2] != HEAPF32[$9 + 4 >> 2]) {
           break label$16;
          }
          if (HEAPF32[$8 + 8 >> 2] == HEAPF32[$9 + 8 >> 2]) {
           continue;
          }
         }
         break;
        }
        HEAP32[$3 >> 2] = $4;
        HEAP32[$5 >> 2] = HEAP32[HEAP32[$7 + HEAP32[$0 >> 2] >> 2] >> 2];
        HEAP32[HEAP32[$7 + HEAP32[$0 >> 2] >> 2] >> 2] = $2;
        break label$10;
       }
       HEAP32[$8 >> 2] = $3;
       $3 = $2;
       $6 = $5;
      }
      $2 = HEAP32[$3 >> 2];
      if ($2) {
       continue;
      }
      break label$2;
     }
    }
    $9 = $1 + -1 | 0;
    while (1) {
     $1 = $9 & HEAP32[$2 + 4 >> 2];
     label$18 : {
      if (($1 | 0) == ($6 | 0)) {
       $3 = $2;
       break label$18;
      }
      $4 = $2;
      $5 = $1 << 2;
      $7 = $5 + HEAP32[$0 >> 2] | 0;
      if (!HEAP32[$7 >> 2]) {
       HEAP32[$7 >> 2] = $3;
       $3 = $2;
       $6 = $1;
       break label$18;
      }
      while (1) {
       label$22 : {
        $1 = $4;
        $4 = HEAP32[$1 >> 2];
        if (!$4) {
         break label$22;
        }
        $7 = HEAP32[$2 + 8 >> 2];
        $8 = HEAP32[$4 + 8 >> 2];
        if (HEAPF32[$7 >> 2] != HEAPF32[$8 >> 2] | HEAPF32[$7 + 4 >> 2] != HEAPF32[$8 + 4 >> 2]) {
         break label$22;
        }
        if (HEAPF32[$7 + 8 >> 2] == HEAPF32[$8 + 8 >> 2]) {
         continue;
        }
       }
       break;
      }
      HEAP32[$3 >> 2] = $4;
      HEAP32[$1 >> 2] = HEAP32[HEAP32[$5 + HEAP32[$0 >> 2] >> 2] >> 2];
      HEAP32[HEAP32[$5 + HEAP32[$0 >> 2] >> 2] >> 2] = $2;
     }
     $2 = HEAP32[$3 >> 2];
     if ($2) {
      continue;
     }
     break;
    }
    break label$2;
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = 0;
   if ($1) {
    dlfree($1);
   }
   HEAP32[$0 + 4 >> 2] = 0;
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function Shape__faceNeiFirstOpt_28int_2c_20std____2__vector_Shape__TransType_2c_20std____2__allocator_Shape__TransType__20___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $14 = HEAP32[$0 + 180 >> 2];
 $10 = $14 + 4 | 0;
 $6 = HEAP32[$2 >> 2];
 $11 = HEAP32[$0 + 28 >> 2];
 $17 = $11 + Math_imul($1, 188) | 0;
 $12 = -1;
 while (1) {
  $5 = HEAP32[(($13 << 2) + $17 | 0) + 60 >> 2];
  label$2 : {
   label$3 : {
    if ($14) {
     $1 = HEAP32[$10 >> 2];
     if (!$1) {
      break label$2;
     }
     $2 = Math_imul($5, 188) + $11 | 0;
     $3 = HEAP32[$2 + 4 >> 2] + HEAP32[$0 + 76 >> 2] | 0;
     $7 = HEAP32[$2 + 12 >> 2] + HEAP32[$0 + 68 >> 2] | 0;
     $8 = HEAP32[$2 + 8 >> 2] + HEAP32[$0 + 84 >> 2] | 0;
     $15 = HEAP32[$2 + 16 >> 2];
     $9 = HEAP32[$2 >> 2];
     $2 = $10;
     while (1) {
      label$6 : {
       label$7 : {
        $4 = HEAP32[$1 + 16 >> 2];
        if (($4 | 0) < ($3 | 0)) {
         break label$7;
        }
        label$8 : {
         if (($3 | 0) < ($4 | 0)) {
          break label$8;
         }
         $4 = HEAP32[$1 + 20 >> 2];
         if (($4 | 0) < ($8 | 0)) {
          break label$7;
         }
         if (($8 | 0) < ($4 | 0)) {
          break label$8;
         }
         $4 = HEAP32[$1 + 24 >> 2];
         if (($4 | 0) < ($7 | 0)) {
          break label$7;
         }
         if (($7 | 0) < ($4 | 0)) {
          break label$8;
         }
         $4 = HEAP32[$1 + 28 >> 2];
         if (($4 | 0) < ($9 | 0)) {
          break label$7;
         }
         if (($4 | 0) > ($9 | 0) | HEAP32[$1 + 32 >> 2] >= ($15 | 0)) {
          break label$8;
         }
         $1 = $1 + 4 | 0;
         break label$6;
        }
        $2 = $1;
        break label$6;
       }
       $1 = $1 + 4 | 0;
      }
      $1 = HEAP32[$1 >> 2];
      if ($1) {
       continue;
      }
      break;
     }
     if (($2 | 0) == ($10 | 0)) {
      break label$2;
     }
     $1 = HEAP32[$2 + 16 >> 2];
     if (($3 | 0) < ($1 | 0)) {
      break label$2;
     }
     label$9 : {
      if (($1 | 0) < ($3 | 0)) {
       break label$9;
      }
      $1 = HEAP32[$2 + 20 >> 2];
      if (($8 | 0) < ($1 | 0)) {
       break label$2;
      }
      if (($1 | 0) < ($8 | 0)) {
       break label$9;
      }
      $1 = HEAP32[$2 + 24 >> 2];
      if (($7 | 0) < ($1 | 0)) {
       break label$2;
      }
      if (($1 | 0) < ($7 | 0)) {
       break label$9;
      }
      $1 = HEAP32[$2 + 28 >> 2];
      if (($1 | 0) > ($9 | 0)) {
       break label$2;
      }
      if (($1 | 0) < ($9 | 0)) {
       break label$9;
      }
      if (HEAP32[$2 + 32 >> 2] > ($15 | 0)) {
       break label$2;
      }
      if (($5 | 0) != -1) {
       break label$3;
      }
      break label$2;
     }
     if (($5 | 0) == -1) {
      break label$2;
     }
     break label$3;
    }
    if (($5 | 0) == -1) {
     break label$2;
    }
   }
   if (HEAP32[($5 << 3) + $6 >> 2] != -1) {
    break label$2;
   }
   $2 = Math_imul($5, 188) + $11 | 0;
   $3 = HEAP32[$2 + 60 >> 2];
   $1 = 0;
   label$10 : {
    if (($3 | 0) == -1) {
     break label$10;
    }
    $1 = HEAP32[($3 << 3) + $6 >> 2] != -1;
   }
   $3 = HEAP32[$2 - -64 >> 2];
   if (($3 | 0) != -1) {
    $1 = (HEAP32[($3 << 3) + $6 >> 2] != -1) + $1 | 0;
   }
   $3 = HEAP32[$2 + 68 >> 2];
   if (($3 | 0) != -1) {
    $1 = (HEAP32[($3 << 3) + $6 >> 2] != -1) + $1 | 0;
   }
   $2 = HEAP32[$2 + 72 >> 2];
   if (($2 | 0) != -1) {
    $1 = (HEAP32[($2 << 3) + $6 >> 2] != -1) + $1 | 0;
   }
   $2 = ($1 | 0) > ($16 | 0);
   $12 = $2 ? $5 : $12;
   $16 = $2 ? $1 : $16;
  }
  $13 = $13 + 1 | 0;
  if (($13 | 0) != 4) {
   continue;
  }
  break;
 }
 return $12;
}
function BuildWorld__reClacLimits_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $7 = global$0 - 80 | 0;
 global$0 = $7;
 memcpy($7 + 8 | 0, $0 + 40 | 0, 72);
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 50;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 50;
 HEAP32[$0 + 56 >> 2] = 50;
 HEAP32[$0 + 60 >> 2] = 0;
 $1 = $0 - -64 | 0;
 HEAP32[$1 >> 2] = 50;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 50;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = 50;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 50;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 50;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 50;
 HEAP32[$0 + 108 >> 2] = 0;
 while (1) {
  $1 = Math_imul($8, 24);
  $5 = $1 + ($7 + 8 | 0) | 0;
  $3 = HEAP32[$5 >> 2];
  $17 = HEAP32[$5 + 4 >> 2];
  if (($3 | 0) < ($17 | 0)) {
   $2 = $0 + $1 | 0;
   $12 = $2;
   $18 = HEAP32[$5 + 12 >> 2];
   $19 = HEAP32[$5 + 8 >> 2];
   while (1) {
    if (($19 | 0) >= ($18 | 0)) {
     $6 = $3 + 1 | 0;
    } else {
     $24 = $3 + 2 | 0;
     $20 = $3 + -1 | 0;
     $6 = $3 + 1 | 0;
     $21 = HEAP32[$5 + 20 >> 2];
     $22 = HEAP32[$5 + 16 >> 2];
     $1 = $19;
     while (1) {
      if (($22 | 0) >= ($21 | 0)) {
       $1 = $1 + 1 | 0;
      } else {
       $9 = $1 + 1 | 0;
       if ($3 >>> 0 <= 49) {
        $25 = $1 + 2 | 0;
        $23 = $1 + -1 | 0;
        $4 = $22;
        while (1) {
         label$11 : {
          if (!HEAPU8[((((Math_imul($8, 125e3) + $0 | 0) + Math_imul($3, 2500) | 0) + Math_imul($1, 50) | 0) + $4 | 0) + 136 | 0] | ($1 >>> 0 > 49 | $4 >>> 0 > 49)) {
           break label$11;
          }
          $13 = HEAP32[$2 + 44 >> 2];
          if (($13 | 0) <= ($3 | 0)) {
           HEAP32[$2 + 44 >> 2] = $6;
           $13 = $6;
          }
          $14 = HEAP32[$2 + 40 >> 2];
          if (($14 | 0) >= ($3 | 0)) {
           HEAP32[$2 + 40 >> 2] = $20;
           $14 = $20;
          }
          $15 = HEAP32[$2 + 52 >> 2];
          if (($15 | 0) <= ($1 | 0)) {
           HEAP32[$2 + 52 >> 2] = $9;
           $15 = $9;
          }
          $16 = HEAP32[$2 + 48 >> 2];
          if (($16 | 0) >= ($1 | 0)) {
           HEAP32[$2 + 48 >> 2] = $23;
           $16 = $23;
          }
          $10 = HEAP32[$2 + 60 >> 2];
          if (($10 | 0) <= ($4 | 0)) {
           $10 = $4 + 1 | 0;
           HEAP32[$2 + 60 >> 2] = $10;
          }
          $11 = HEAP32[$12 + 56 >> 2];
          if (($11 | 0) >= ($4 | 0)) {
           $11 = $4 + -1 | 0;
           HEAP32[$12 + 56 >> 2] = $11;
          }
          if (($13 | 0) <= ($6 | 0)) {
           HEAP32[$2 + 44 >> 2] = $24;
          }
          if (($14 | 0) > ($3 | 0)) {
           HEAP32[$2 + 40 >> 2] = $3;
          }
          if (($15 | 0) <= ($9 | 0)) {
           HEAP32[$2 + 52 >> 2] = $25;
          }
          if (($16 | 0) > ($1 | 0)) {
           HEAP32[$2 + 48 >> 2] = $1;
          }
          if (($10 | 0) <= ($4 + 1 | 0)) {
           HEAP32[$2 + 60 >> 2] = $4 + 2;
          }
          if (($11 | 0) <= ($4 | 0)) {
           break label$11;
          }
          HEAP32[$12 + 56 >> 2] = $4;
         }
         $4 = $4 + 1 | 0;
         if (($4 | 0) < ($21 | 0)) {
          continue;
         }
         break;
        }
       }
       $1 = $9;
      }
      if (($1 | 0) < ($18 | 0)) {
       continue;
      }
      break;
     }
    }
    $3 = $6;
    if (($3 | 0) < ($17 | 0)) {
     continue;
    }
    break;
   }
  }
  $8 = $8 + 1 | 0;
  if (($8 | 0) != 3) {
   continue;
  }
  break;
 }
 global$0 = $7 + 80 | 0;
}
function Shape__generate_28BuildWorld_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 label$1 : {
  if (HEAP32[$0 + 120 >> 2] != -1) {
   $3 = HEAP32[$0 + 128 >> 2];
   $2 = HEAP32[$0 + 132 >> 2];
   break label$1;
  }
  HEAP32[$0 + 120 >> 2] = 50;
  HEAP32[$0 + 124 >> 2] = 50;
  HEAP32[$0 + 128 >> 2] = 50;
  HEAP32[$0 + 132 >> 2] = 2500;
  HEAP32[$0 + 136 >> 2] = operator_20new_28unsigned_20long_29(25e4);
  $3 = 50;
  $2 = 2500;
 }
 $2 = Math_imul($2, $3);
 if (($2 | 0) >= 1) {
  memset(HEAP32[$0 + 136 >> 2], 255, $2 << 1);
 }
 label$4 : {
  if (HEAP32[$0 + 140 >> 2] != -1) {
   $3 = HEAP32[$0 + 148 >> 2];
   $2 = HEAP32[$0 + 152 >> 2];
   break label$4;
  }
  HEAP32[$0 + 140 >> 2] = 50;
  HEAP32[$0 + 144 >> 2] = 50;
  HEAP32[$0 + 148 >> 2] = 50;
  HEAP32[$0 + 152 >> 2] = 2500;
  HEAP32[$0 + 156 >> 2] = operator_20new_28unsigned_20long_29(25e4);
  $3 = 50;
  $2 = 2500;
 }
 $2 = Math_imul($2, $3);
 if (($2 | 0) >= 1) {
  memset(HEAP32[$0 + 156 >> 2], 255, $2 << 1);
 }
 label$7 : {
  if (HEAP32[$0 + 160 >> 2] != -1) {
   $3 = HEAP32[$0 + 168 >> 2];
   $2 = HEAP32[$0 + 172 >> 2];
   break label$7;
  }
  HEAP32[$0 + 160 >> 2] = 50;
  HEAP32[$0 + 164 >> 2] = 50;
  HEAP32[$0 + 168 >> 2] = 50;
  HEAP32[$0 + 172 >> 2] = 2500;
  HEAP32[$0 + 176 >> 2] = operator_20new_28unsigned_20long_29(25e4);
  $3 = 50;
  $2 = 2500;
 }
 $2 = Math_imul($2, $3);
 if (($2 | 0) >= 1) {
  memset(HEAP32[$0 + 176 >> 2], 255, $2 << 1);
 }
 $2 = HEAP32[$0 + 28 >> 2];
 if ($2) {
  dlfree($2);
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP8[$0 + 17 | 0] = 0;
 HEAP8[$0 + 18 | 0] = 0;
 HEAP8[$0 + 19 | 0] = 0;
 HEAP8[$0 + 20 | 0] = 0;
 HEAP8[$0 + 21 | 0] = 0;
 HEAP8[$0 + 22 | 0] = 0;
 HEAP8[$0 + 23 | 0] = 0;
 HEAP8[$0 + 24 | 0] = 0;
 HEAP32[$6 + 12 >> 2] = -1;
 $1 = Shape__readWorld_28BuildWorld_20const__2c_20int__29($0, $1, $6 + 12 | 0);
 label$11 : {
  if ($1) {
   break label$11;
  }
  $1 = Shape__buildSidesAndCorners_28_29($0);
  if ($1) {
   break label$11;
  }
  Shape__makeVolumeAndFacing_28_29($0);
  if (!HEAP32[$0 + 184 >> 2]) {
   $1 = Shape__orderFacesInSequence_28int_29($0, HEAP32[$6 + 12 >> 2]);
   if ($1) {
    break label$11;
   }
  }
  Shape__makeReverseNei_28_29($0);
  Shape__makePieceCheckBits_28_29($0);
  Shape__makeNeiTransforms_28_29($0);
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  $1 = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  $8 = HEAP32[$0 + 12 >> 2];
  if (($8 | 0) < 1) {
   break label$11;
  }
  $11 = HEAP32[$0 + 28 >> 2];
  while (1) {
   $2 = -1;
   $9 = -1;
   $10 = -1;
   $3 = Math_imul($1, 188) + $11 | 0;
   $7 = HEAP32[$3 >> 2];
   if ($7 >>> 0 <= 2) {
    $2 = $7 << 2;
    $10 = HEAP32[$2 + 17224 >> 2];
    $9 = HEAP32[$2 + 17212 >> 2];
    $2 = HEAP32[$2 + 17200 >> 2];
   }
   $7 = HEAP32[$3 + 12 >> 2];
   $12 = HEAP32[$3 + 8 >> 2];
   $4 = Math_fround(HEAP32[$3 + 4 >> 2] + $10 | 0);
   $5 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 104 >> 2] = $5 < $4 ? $4 : $5;
   $4 = Math_fround($9 + $12 | 0);
   $5 = HEAPF32[$0 + 108 >> 2];
   HEAPF32[$0 + 108 >> 2] = $5 < $4 ? $4 : $5;
   $4 = Math_fround($2 + $7 | 0);
   $5 = HEAPF32[$0 + 112 >> 2];
   HEAPF32[$0 + 112 >> 2] = $5 < $4 ? $4 : $5;
   $1 = $1 + 1 | 0;
   if (($1 | 0) < ($8 | 0)) {
    continue;
   }
   break;
  }
  $1 = 0;
 }
 global$0 = $6 + 16 | 0;
 return $1;
}
function PicDisp__generateStraightShape_28DisplayConf_20const__2c_20MyObject__29_20const($0, $1, $2) {
 var $3 = 0;
 HEAP32[11874] = 0;
 $3 = HEAP32[11875];
 if (($3 | 0) > HEAP32[11876]) {
  HEAP32[11876] = $3;
 }
 HEAP32[11879] = 0;
 HEAP32[11875] = 0;
 $3 = HEAP32[11880];
 if (($3 | 0) > HEAP32[11881]) {
  HEAP32[11881] = $3;
 }
 HEAP32[11884] = 0;
 HEAP32[11880] = 0;
 $3 = HEAP32[11885];
 if (($3 | 0) > HEAP32[11886]) {
  HEAP32[11886] = $3;
 }
 HEAP32[11885] = 0;
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 1, 1);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 1, 2);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 1, 3);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 2, 1);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 2, 2);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 2, 3);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 3, 1);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 3, 2);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, -1, 1, 3, 3);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 0, HEAPU8[$0 + 204 | 0] != 0, 0, 0);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 1, HEAPU8[$0 + 205 | 0] != 0, 1, 0);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 2, HEAPU8[$0 + 206 | 0] != 0, 2, 0);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 3, HEAPU8[$0 + 207 | 0] != 0, 3, 0);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 4, HEAPU8[$0 + 208 | 0] != 0, 4, 0);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 5, HEAPU8[$0 + 213 | 0] != 0, 4, 1);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 6, HEAPU8[$0 + 218 | 0] != 0, 4, 2);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 7, HEAPU8[$0 + 223 | 0] != 0, 4, 3);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 8, HEAPU8[$0 + 228 | 0] != 0, 4, 4);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 9, HEAPU8[$0 + 227 | 0] != 0, 3, 4);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 10, HEAPU8[$0 + 226 | 0] != 0, 2, 4);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 11, HEAPU8[$0 + 225 | 0] != 0, 1, 4);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 12, HEAPU8[$0 + 224 | 0] != 0, 0, 4);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 13, HEAPU8[$0 + 219 | 0] != 0, 0, 3);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 14, HEAPU8[$0 + 214 | 0] != 0, 0, 2);
 PicDisp__placeSidePolygon_28MyObject__2c_20int_2c_20bool_2c_20int_2c_20int_29_20const($0, $2, 15, HEAPU8[$0 + 209 | 0] != 0, 0, 1);
 MyObject__vectorify_28_29($2);
 MyObject__clacNormals_28bool_29($2, HEAPU8[$1 + 12 | 0]);
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 40);
 label$1 : {
  if (HEAPU8[$0 + 24 | 0]) {
   $3 = HEAP32[$0 + 12 >> 2];
   if ($3) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
    if (HEAPU8[$3 + 5 | 0] != 1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
    }
    $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
    $3 = HEAP32[$0 + 20 >> 2];
    $4 = HEAP32[$0 + 16 >> 2];
    HEAP32[$2 + 48 >> 2] = $4;
    HEAP32[$2 + 52 >> 2] = $3;
    HEAP32[$2 + 96 >> 2] = $4;
    HEAP32[$2 + 100 >> 2] = $3;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
    $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 36460);
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 44 >> 2] = $4;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
   $3 = HEAP32[$0 + 20 >> 2];
   $0 = HEAP32[$0 + 16 >> 2];
   HEAP32[$2 + 32 >> 2] = $0;
   HEAP32[$2 + 36 >> 2] = $3;
   HEAP32[$2 + 80 >> 2] = $0;
   HEAP32[$2 + 84 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
   $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($2 + 104 | 0);
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($2 + 104 | 0);
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $3 = HEAP32[$0 + 20 >> 2];
  $4 = HEAP32[$0 + 16 >> 2];
  HEAP32[$2 + 24 >> 2] = $4;
  HEAP32[$2 + 28 >> 2] = $3;
  HEAP32[$2 + 72 >> 2] = $4;
  HEAP32[$2 + 76 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 36465);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  if (!HEAP32[$0 + 12 >> 2]) {
   break label$1;
  }
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $3 = HEAP32[$0 + 20 >> 2];
  $4 = HEAP32[$0 + 16 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $3;
  HEAP32[$2 + 56 >> 2] = $4;
  HEAP32[$2 + 60 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if (HEAPU8[$0 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  }
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 41);
 global$0 = $2 + 112 | 0;
}
function CubeDocBase__serializeMinBin_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $2 = 8;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $4 = HEAP32[HEAP32[$1 + 116 >> 2] + 12 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, 1);
 $3 = HEAP32[$1 + 116 >> 2];
 $5 = HEAP32[$3 + 12 >> 2];
 if (($5 | 0) > 0) {
  while (1) {
   $3 = HEAP32[$3 + 28 >> 2] + Math_imul($7, 188) | 0;
   $5 = HEAP32[$3 + 4 >> 2] / 4 & 255;
   $4 = $5 << $2 | $4;
   if (($2 | 0) < 3) {
    $2 = $2 + 6 | 0;
   } else {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
    $4 = $5 >>> 8 - $2;
    $2 = $2 + -2 | 0;
   }
   $5 = HEAP32[$3 + 8 >> 2] / 4 & 255;
   $4 = $5 << $2 | $4;
   if (($2 | 0) < 3) {
    $2 = $2 + 6 | 0;
   } else {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
    $4 = $5 >>> 8 - $2;
    $2 = $2 + -2 | 0;
   }
   $5 = HEAP32[$3 + 12 >> 2] / 4 & 255;
   $4 = $5 << $2 | $4;
   if (($2 | 0) < 3) {
    $2 = $2 + 6 | 0;
   } else {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
    $4 = $5 >>> 8 - $2;
    $2 = $2 + -2 | 0;
   }
   $3 = HEAPU8[$3 | 0];
   $4 = $3 << $2 | $4;
   if (($2 | 0) < 7) {
    $2 = $2 + 2 | 0;
   } else {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
    $4 = $3 >>> 8 - $2;
    $2 = $2 + -6 | 0;
   }
   $7 = $7 + 1 | 0;
   $3 = HEAP32[$1 + 116 >> 2];
   $5 = HEAP32[$3 + 12 >> 2];
   if (($7 | 0) < ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$1 + 124 >> 2];
 label$11 : {
  if (!$3) {
   break label$11;
  }
  $8 = HEAP32[$3 + 12 >> 2];
  $3 = HEAP32[$3 + 8 >> 2];
  if (($8 | 0) == ($3 | 0)) {
   break label$11;
  }
  $7 = HEAP32[$1 + 132 >> 2];
  if (($7 | 0) == -1) {
   break label$11;
  }
  $9 = HEAP32[$3 + ($7 << 2) >> 2];
  if (!$9 | ($5 | 0) < 1) {
   break label$11;
  }
  $5 = 0;
  while (1) {
   $3 = $4;
   $7 = HEAP32[$9 >> 2];
   $4 = $5 << 3;
   $8 = HEAPU8[$7 + $4 | 0];
   $3 = $3 | $8 << $2;
   label$13 : {
    if (($2 | 0) < 1) {
     $2 = $2 + 8 | 0;
     break label$13;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $3 << 24 >> 24);
    $3 = $8 >>> 8 - $2;
    $7 = HEAP32[$9 >> 2];
   }
   $8 = $3;
   $3 = HEAPU8[($4 + $7 | 0) + 4 | 0];
   $4 = $8 | $3 << $2;
   if (($2 | 0) < 6) {
    $2 = $2 + 3 | 0;
   } else {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
    $4 = $3 >>> 8 - $2;
    $2 = $2 + -5 | 0;
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) < HEAP32[HEAP32[$1 + 116 >> 2] + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, $4 << 24 >> 24);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $6);
 if (HEAP8[$6 + 11 | 0] <= -1) {
  dlfree(HEAP32[$6 >> 2]);
 }
 global$0 = $6 + 16 | 0;
}
function ModelControlBase__initTex_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = HEAP32[11988];
 $3 = operator_20new_28unsigned_20long_29(32);
 HEAP32[$3 >> 2] = 16732;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = -1;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 $0 = $3 + 12 | 0;
 HEAP32[$0 >> 2] = -1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 1024;
 HEAP32[$1 + 12 >> 2] = 512;
 GlTexture__init_28unsigned_20int_2c_20Vec2i_20const__2c_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20void_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1 + 8 | 0);
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 >> 2] = 6043;
 emscripten_asm_const_iii(16312, 16350, $1 | 0) | 0;
 HEAP32[$1 + 12 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
 $5 = $2 + 40 | 0;
 $4 = HEAP32[$2 + 44 >> 2];
 label$1 : {
  if ($4 >>> 0 < HEAPU32[$2 + 48 >> 2]) {
   HEAP32[$4 + 4 >> 2] = $3;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$2 + 44 >> 2] = $4 + 8;
   break label$1;
  }
  void_20std____2__vector_std____2__shared_ptr_GlTexture__2c_20std____2__allocator_std____2__shared_ptr_GlTexture__20__20_____push_back_slow_path_std____2__shared_ptr_GlTexture__20__28std____2__shared_ptr_GlTexture____29($5, $1 + 8 | 0);
  $0 = HEAP32[$1 + 12 >> 2];
  if (!$0) {
   break label$1;
  }
  $4 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $4 + -1;
  if ($4) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  std____2____shared_weak_count____release_weak_28_29($0);
 }
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 $0 = HEAP32[$2 + 44 >> 2];
 label$3 : {
  if ($0 >>> 0 < HEAPU32[$2 + 48 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$2 + 44 >> 2] = $0 + 8;
   break label$3;
  }
  void_20std____2__vector_std____2__shared_ptr_GlTexture__2c_20std____2__allocator_std____2__shared_ptr_GlTexture__20__20_____push_back_slow_path_std____2__shared_ptr_GlTexture__20__28std____2__shared_ptr_GlTexture____29($5, $1 + 8 | 0);
  $0 = HEAP32[$1 + 12 >> 2];
  if (!$0) {
   break label$3;
  }
  $4 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $4 + -1;
  if ($4) {
   break label$3;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  std____2____shared_weak_count____release_weak_28_29($0);
 }
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 $0 = HEAP32[$2 + 44 >> 2];
 label$5 : {
  if ($0 >>> 0 < HEAPU32[$2 + 48 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$2 + 44 >> 2] = $0 + 8;
   break label$5;
  }
  void_20std____2__vector_std____2__shared_ptr_GlTexture__2c_20std____2__allocator_std____2__shared_ptr_GlTexture__20__20_____push_back_slow_path_std____2__shared_ptr_GlTexture__20__28std____2__shared_ptr_GlTexture____29($5, $1 + 8 | 0);
  $2 = HEAP32[$1 + 12 >> 2];
  if (!$2) {
   break label$5;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $0 + -1;
  if ($0) {
   break label$5;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  std____2____shared_weak_count____release_weak_28_29($2);
 }
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$3 + 4 >> 2] = $2 + -1;
 if (!$2) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  std____2____shared_weak_count____release_weak_28_29($3);
 }
 global$0 = $1 + 16 | 0;
}
function std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 label$1 : {
  while (1) {
   $3 = HEAP32[$2 >> 2];
   if ($3 >>> 0 >= $1 >>> 0) {
    $9 = 0;
    break label$1;
   }
   $9 = 1;
   $7 = HEAP32[$5 >> 2];
   if ($7 >>> 0 >= $4 >>> 0) {
    break label$1;
   }
   label$4 : {
    $0 = HEAPU8[$3 | 0];
    if ($0 >>> 0 > 1114111) {
     break label$4;
    }
    $11 = $2;
    label$5 : {
     if ($0 << 24 >> 24 >= 0) {
      HEAP16[$7 >> 1] = $0;
      $0 = $3 + 1 | 0;
      break label$5;
     }
     if ($0 >>> 0 < 194) {
      break label$4;
     }
     if ($0 >>> 0 <= 223) {
      if (($1 - $3 | 0) < 2) {
       break label$1;
      }
      $6 = HEAPU8[$3 + 1 | 0];
      if (($6 & 192) != 128) {
       break label$4;
      }
      $9 = 2;
      $0 = $6 & 63 | $0 << 6 & 1984;
      if ($0 >>> 0 > 1114111) {
       break label$1;
      }
      HEAP16[$7 >> 1] = $0;
      $0 = $3 + 2 | 0;
      break label$5;
     }
     if ($0 >>> 0 <= 239) {
      if (($1 - $3 | 0) < 3) {
       break label$1;
      }
      $8 = HEAPU8[$3 + 2 | 0];
      $6 = HEAPU8[$3 + 1 | 0];
      label$9 : {
       label$10 : {
        if (($0 | 0) != 237) {
         if (($0 | 0) != 224) {
          break label$10;
         }
         if (($6 & 224) != 160) {
          break label$4;
         }
         break label$9;
        }
        if (($6 & 224) != 128) {
         break label$4;
        }
        break label$9;
       }
       if (($6 & 192) != 128) {
        break label$4;
       }
      }
      if (($8 & 192) != 128) {
       break label$4;
      }
      $9 = 2;
      $0 = $8 & 63 | (($6 & 63) << 6 | $0 << 12);
      if (($0 & 65535) >>> 0 > 1114111) {
       break label$1;
      }
      HEAP16[$7 >> 1] = $0;
      $0 = $3 + 3 | 0;
      break label$5;
     }
     if ($0 >>> 0 > 244) {
      break label$4;
     }
     if (($1 - $3 | 0) < 4) {
      break label$1;
     }
     $8 = HEAPU8[$3 + 3 | 0];
     $6 = HEAPU8[$3 + 2 | 0];
     $3 = HEAPU8[$3 + 1 | 0];
     label$12 : {
      label$13 : {
       $10 = $0 + -240 | 0;
       if ($10 >>> 0 > 4) {
        break label$13;
       }
       label$14 : {
        switch ($10 - 1 | 0) {
        default:
         if (($3 + 112 & 255) >>> 0 >= 48) {
          break label$4;
         }
         break label$12;
        case 0:
        case 1:
        case 2:
         break label$13;
        case 3:
         break label$14;
        }
       }
       if (($3 & 240) != 128) {
        break label$4;
       }
       break label$12;
      }
      if (($3 & 192) != 128) {
       break label$4;
      }
     }
     if (($6 & 192) != 128 | ($8 & 192) != 128) {
      break label$4;
     }
     if (($4 - $7 | 0) < 4) {
      break label$1;
     }
     $9 = 2;
     $8 = $8 & 63;
     $10 = $6 << 6;
     $0 = $0 & 7;
     if (($8 | ($10 & 4032 | ($3 << 12 & 258048 | $0 << 18))) >>> 0 > 1114111) {
      break label$1;
     }
     $3 = $3 << 2;
     HEAP16[$7 >> 1] = ($3 & 192 | $0 << 8 | ($6 >>> 4 & 3 | $3 & 60)) + 16320 | 55296;
     HEAP32[$5 >> 2] = $7 + 2;
     HEAP16[$7 + 2 >> 1] = $8 | $10 & 960 | 56320;
     $0 = HEAP32[$2 >> 2] + 4 | 0;
    }
    HEAP32[$11 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 2;
    continue;
   }
   break;
  }
  return 2;
 }
 return $9;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = global$0 - 448 | 0;
 global$0 = $0;
 HEAP32[$0 + 440 >> 2] = $1;
 HEAP32[$0 + 432 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = 270;
 $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 $7 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $7;
 HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 HEAP8[$0 + 15 | 0] = 0;
 if (std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 440 | 0, $2, $3, $0 + 16 | 0, HEAP32[$4 + 4 >> 2], $5, $0 + 15 | 0, $7, $1, $0 + 20 | 0, $0 + 432 | 0)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($6);
  if (HEAPU8[$0 + 15 | 0]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($6, FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 44 >> 2]]($7, 45) | 0);
  }
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 44 >> 2]]($7, 48) | 0;
  $4 = HEAP32[$1 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  $7 = $3 + -4 | 0;
  while (1) {
   if (!(($2 | 0) != HEAP32[$4 >> 2] | $4 >>> 0 >= $7 >>> 0)) {
    $4 = $4 + 4 | 0;
    continue;
   }
   break;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($6, $4, $3);
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 440 | 0, $0 + 432 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 440 >> 2];
 $2 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$2 + 4 >> 2] + -1 | 0;
 HEAP32[$2 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
 }
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 if ($2) {
  FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
 }
 global$0 = $0 + 448 | 0;
 return $4 | 0;
}
function addPolyMirrorCorner_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec3_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0);
 $11 = global$0 + -64 | 0;
 global$0 = $11;
 label$1 : {
  if (!$10) {
   $12 = HEAPF32[$5 >> 2];
   $13 = HEAPF32[$5 + 4 >> 2];
   HEAPF32[$11 + 56 >> 2] = $3;
   HEAPF32[$11 + 52 >> 2] = $13 + $2;
   HEAPF32[$11 + 48 >> 2] = $12 + $1;
   $12 = HEAPF32[$6 >> 2];
   $13 = HEAPF32[$6 + 4 >> 2];
   HEAPF32[$11 + 40 >> 2] = $3;
   HEAPF32[$11 + 36 >> 2] = $13 + $2;
   HEAPF32[$11 + 32 >> 2] = $12 + $1;
   $12 = HEAPF32[$8 >> 2];
   HEAPF32[$11 + 20 >> 2] = HEAPF32[$8 + 4 >> 2] + $2;
   HEAPF32[$11 + 16 >> 2] = $12 + $1;
   HEAPF32[$11 + 24 >> 2] = $4;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $11 + 48 | 0, $11 + 32 | 0, $7, $11 + 16 | 0, $9 ^ 1, 0);
   $12 = HEAPF32[$5 >> 2];
   $13 = HEAPF32[$5 + 4 >> 2];
   $3 = Math_fround(Math_fround(1) - $3);
   HEAPF32[$11 + 56 >> 2] = $3;
   HEAPF32[$11 + 52 >> 2] = $13 + $2;
   HEAPF32[$11 + 48 >> 2] = $12 + $1;
   $12 = HEAPF32[$6 >> 2];
   $13 = HEAPF32[$6 + 4 >> 2];
   HEAPF32[$11 + 40 >> 2] = $3;
   HEAPF32[$11 + 36 >> 2] = $13 + $2;
   HEAPF32[$11 + 32 >> 2] = $12 + $1;
   $3 = HEAPF32[$7 + 8 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   HEAP32[$11 + 16 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$11 + 20 >> 2] = $5;
   HEAPF32[$11 + 24 >> 2] = Math_fround(1) - $3;
   $3 = HEAPF32[$8 >> 2];
   $12 = HEAPF32[$8 + 4 >> 2];
   HEAPF32[$11 + 8 >> 2] = Math_fround(1) - $4;
   HEAPF32[$11 + 4 >> 2] = $12 + $2;
   HEAPF32[$11 >> 2] = $3 + $1;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $11 + 48 | 0, $11 + 32 | 0, $11 + 16 | 0, $11, $9, 0);
   break label$1;
  }
  $12 = HEAPF32[$5 + 4 >> 2];
  $13 = HEAPF32[$5 >> 2];
  HEAPF32[$11 + 56 >> 2] = $3;
  HEAPF32[$11 + 52 >> 2] = $13 + $2;
  HEAPF32[$11 + 48 >> 2] = $12 + $1;
  $12 = HEAPF32[$6 + 4 >> 2];
  $13 = HEAPF32[$6 >> 2];
  HEAPF32[$11 + 40 >> 2] = $3;
  HEAPF32[$11 + 36 >> 2] = $13 + $2;
  HEAPF32[$11 + 32 >> 2] = $12 + $1;
  $12 = HEAPF32[$8 + 4 >> 2];
  HEAPF32[$11 + 20 >> 2] = HEAPF32[$8 >> 2] + $2;
  HEAPF32[$11 + 16 >> 2] = $12 + $1;
  HEAPF32[$11 + 24 >> 2] = $4;
  MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $11 + 48 | 0, $11 + 32 | 0, $7, $11 + 16 | 0, $9, 0);
  $12 = HEAPF32[$5 + 4 >> 2];
  $13 = HEAPF32[$5 >> 2];
  $3 = Math_fround(Math_fround(1) - $3);
  HEAPF32[$11 + 56 >> 2] = $3;
  HEAPF32[$11 + 52 >> 2] = $13 + $2;
  HEAPF32[$11 + 48 >> 2] = $12 + $1;
  $12 = HEAPF32[$6 + 4 >> 2];
  $13 = HEAPF32[$6 >> 2];
  HEAPF32[$11 + 40 >> 2] = $3;
  HEAPF32[$11 + 36 >> 2] = $13 + $2;
  HEAPF32[$11 + 32 >> 2] = $12 + $1;
  $3 = HEAPF32[$7 + 8 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  HEAP32[$11 + 16 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$11 + 20 >> 2] = $5;
  HEAPF32[$11 + 24 >> 2] = Math_fround(1) - $3;
  $3 = HEAPF32[$8 + 4 >> 2];
  $12 = HEAPF32[$8 >> 2];
  HEAPF32[$11 + 8 >> 2] = Math_fround(1) - $4;
  HEAPF32[$11 + 4 >> 2] = $12 + $2;
  HEAPF32[$11 >> 2] = $3 + $1;
  MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $11 + 48 | 0, $11 + 32 | 0, $11 + 16 | 0, $11, $9 ^ 1, 0);
 }
 global$0 = $11 - -64 | 0;
}
function Cube__getCurrentCirc_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $2 = HEAP32[HEAP32[$0 + 36 >> 2] + 28 >> 2] + Math_imul($1, 188) | 0;
 $11 = HEAP32[$2 >> 2];
 label$1 : {
  if ($11 >>> 0 <= 2) {
   $1 = HEAP32[$0 + 40 >> 2];
   $3 = HEAP32[$2 + 4 >> 2] + Math_imul($1, HEAP32[$2 + 8 >> 2]) | 0;
   $4 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$0 + 52 >> 2];
   $3 = $3 + Math_imul($4, $2) | 0;
   label$3 : {
    label$4 : {
     switch ($11 - 1 | 0) {
     case 1:
      $4 = $1 << 2;
      $7 = $3 + 1 | 0;
      $12 = $4 + $7 | 0;
      $0 = HEAP32[$0 + 56 >> 2];
      $5 = $3 + 2 | 0;
      $13 = $0 + ($5 + $4 << 2) | 0;
      $6 = $3 + 3 | 0;
      $14 = ($6 + $4 << 2) + $0 | 0;
      $2 = $3 + 4 | 0;
      $15 = ($2 + $4 << 2) + $0 | 0;
      $8 = Math_imul($1, 3);
      $11 = ($2 + $8 << 2) + $0 | 0;
      $9 = $1 << 1;
      $17 = ($2 + $9 << 2) + $0 | 0;
      $10 = ($2 << 2) + $0 | 0;
      $6 = ($6 << 2) + $0 | 0;
      $5 = ($5 << 2) + $0 | 0;
      $7 = ($7 << 2) + $0 | 0;
      $16 = ($1 + $2 << 2) + $0 | 0;
      $2 = ($3 << 2) + $0 | 0;
      break label$3;
     case 0:
      $4 = $2 << 2;
      $7 = $3 + 1 | 0;
      $12 = $4 + $7 | 0;
      $0 = HEAP32[$0 + 56 >> 2];
      $5 = $3 + 2 | 0;
      $13 = $0 + ($5 + $4 << 2) | 0;
      $6 = $3 + 3 | 0;
      $14 = ($6 + $4 << 2) + $0 | 0;
      $1 = $3 + 4 | 0;
      $15 = ($1 + $4 << 2) + $0 | 0;
      $8 = Math_imul($2, 3);
      $11 = ($1 + $8 << 2) + $0 | 0;
      $9 = $2 << 1;
      $17 = ($1 + $9 << 2) + $0 | 0;
      $10 = ($1 << 2) + $0 | 0;
      $6 = ($6 << 2) + $0 | 0;
      $5 = ($5 << 2) + $0 | 0;
      $7 = ($7 << 2) + $0 | 0;
      $16 = ($1 + $2 << 2) + $0 | 0;
      $1 = $2;
      $2 = ($3 << 2) + $0 | 0;
      break label$3;
     default:
      break label$4;
     }
    }
    $4 = $1 << 2;
    $10 = $2 + $3 | 0;
    $12 = $4 + $10 | 0;
    $0 = HEAP32[$0 + 56 >> 2];
    $5 = $3 + ($2 << 1) | 0;
    $13 = $0 + ($5 + $4 << 2) | 0;
    $6 = $3 + Math_imul($2, 3) | 0;
    $14 = ($6 + $4 << 2) + $0 | 0;
    $2 = $3 + ($2 << 2) | 0;
    $15 = ($2 + $4 << 2) + $0 | 0;
    $8 = Math_imul($1, 3);
    $11 = ($2 + $8 << 2) + $0 | 0;
    $9 = $1 << 1;
    $17 = ($2 + $9 << 2) + $0 | 0;
    $7 = ($10 << 2) + $0 | 0;
    $10 = ($2 << 2) + $0 | 0;
    $6 = ($6 << 2) + $0 | 0;
    $5 = ($5 << 2) + $0 | 0;
    $16 = ($1 + $2 << 2) + $0 | 0;
    $2 = ($3 << 2) + $0 | 0;
   }
   $18 = HEAP32[($12 << 2) + $0 >> 2];
   $12 = HEAP32[($3 + $4 << 2) + $0 >> 2];
   $19 = HEAP32[($3 + $8 << 2) + $0 >> 2];
   $4 = HEAP32[($3 + $9 << 2) + $0 >> 2];
   $20 = HEAP32[$2 >> 2];
   $7 = HEAP32[$7 >> 2];
   $5 = HEAP32[$5 >> 2];
   $6 = HEAP32[$6 >> 2];
   $10 = HEAP32[$10 >> 2];
   $16 = HEAP32[$16 >> 2];
   $9 = HEAP32[$17 >> 2];
   $8 = HEAP32[$11 >> 2];
   $15 = HEAP32[$15 >> 2];
   $14 = HEAP32[$14 >> 2];
   $13 = HEAP32[$13 >> 2];
   $2 = 2;
   if (HEAPU8[($1 + $3 << 2) + $0 | 0]) {
    break label$1;
   }
  }
  $2 = 0;
 }
 return (($7 & 255) != 0) << 1 | ($20 & 255) != 0 | (((($16 & 255) != 0) << 1 | ($10 & 255) != 0 | (((($14 & 255) != 0) << 1 | ($15 & 255) != 0 | ((($2 | ($4 & 255) != 0) << 2 | (($19 & 255) != 0) << 1 | ($12 & 255) != 0) << 4 | ((($18 & 255) != 0) << 1 | ($13 & 255) != 0) << 2)) << 4 | ((($8 & 255) != 0) << 1 | ($9 & 255) != 0) << 2)) << 4 | ((($6 & 255) != 0) << 1 | ($5 & 255) != 0) << 2);
}
function std____2__pair_std____2____tree_iterator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20_____emplace_unique_key_args_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__28std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20const__2c_20std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing____29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = $1 + 4 | 0;
 $4 = HEAP32[$5 >> 2];
 label$1 : {
  if ($4) {
   $5 = $1 + 4 | 0;
   $7 = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   $8 = HEAP32[$2 + 8 >> 2];
   $9 = HEAP32[$2 + 4 >> 2];
   $10 = HEAP32[$2 >> 2];
   while (1) {
    label$4 : {
     label$5 : {
      label$6 : {
       $2 = HEAP32[$4 + 16 >> 2];
       label$7 : {
        if (($10 | 0) < ($2 | 0)) {
         break label$7;
        }
        if (($2 | 0) < ($10 | 0)) {
         break label$5;
        }
        $2 = HEAP32[$4 + 20 >> 2];
        if (($9 | 0) < ($2 | 0)) {
         break label$7;
        }
        if (($2 | 0) < ($9 | 0)) {
         break label$5;
        }
        $2 = HEAP32[$4 + 24 >> 2];
        if (($8 | 0) < ($2 | 0)) {
         break label$7;
        }
        if (($2 | 0) < ($8 | 0)) {
         break label$5;
        }
        $2 = HEAP32[$4 + 28 >> 2];
        if (($6 | 0) < ($2 | 0)) {
         break label$7;
        }
        if (($2 | 0) < ($6 | 0) | ($7 | 0) >= HEAP32[$4 + 32 >> 2]) {
         break label$6;
        }
       }
       $2 = HEAP32[$4 >> 2];
       if ($2) {
        break label$4;
       }
       $5 = $4;
       break label$1;
      }
      $2 = HEAP32[$4 + 28 >> 2];
      if (($2 | 0) < ($6 | 0)) {
       break label$5;
      }
      if (($6 | 0) < ($2 | 0) | HEAP32[$4 + 32 >> 2] >= ($7 | 0)) {
       break label$1;
      }
     }
     $5 = $4 + 4 | 0;
     $2 = HEAP32[$4 + 4 >> 2];
     if (!$2) {
      break label$1;
     }
     $4 = $5;
    }
    $5 = $4;
    $4 = $2;
    continue;
   }
  }
  $4 = $5;
 }
 $6 = $0;
 $2 = HEAP32[$5 >> 2];
 if ($2) {
  $1 = 0;
 } else {
  $2 = operator_20new_28unsigned_20long_29(36);
  $7 = HEAP32[$3 + 8 >> 2];
  $8 = HEAP32[$3 + 12 >> 2];
  $9 = HEAP32[$3 + 16 >> 2];
  $10 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = $9;
  HEAP32[$2 + 24 >> 2] = $7;
  HEAP32[$2 + 28 >> 2] = $8;
  HEAP32[$2 + 16 >> 2] = $10;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[$5 >> 2] = $2;
  $4 = $2;
  $3 = HEAP32[HEAP32[$1 >> 2] >> 2];
  if ($3) {
   HEAP32[$1 >> 2] = $3;
   $4 = HEAP32[$5 >> 2];
  }
  void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$1 + 4 >> 2], $4);
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
  $1 = 1;
 }
 HEAP8[$6 + 4 | 0] = $1;
 HEAP32[$0 >> 2] = $2;
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = global$0 - 160 | 0;
 global$0 = $0;
 HEAP32[$0 + 152 >> 2] = $1;
 HEAP32[$0 + 144 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = 270;
 $1 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 $7 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $7;
 HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 HEAP8[$0 + 15 | 0] = 0;
 if (std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 152 | 0, $2, $3, $0 + 16 | 0, HEAP32[$4 + 4 >> 2], $5, $0 + 15 | 0, $7, $1, $0 + 20 | 0, $0 + 132 | 0)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($6);
  if (HEAPU8[$0 + 15 | 0]) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 28 >> 2]]($7, 45) | 0);
  }
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 28 >> 2]]($7, 48) | 0;
  $4 = HEAP32[$1 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  $7 = $3 + -1 | 0;
  $2 = $2 & 255;
  while (1) {
   if (!(($2 | 0) != HEAPU8[$4 | 0] | $4 >>> 0 >= $7 >>> 0)) {
    $4 = $4 + 1 | 0;
    continue;
   }
   break;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($6, $4, $3);
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 152 | 0, $0 + 144 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 152 >> 2];
 $2 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$2 + 4 >> 2] + -1 | 0;
 HEAP32[$2 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
 }
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 if ($2) {
  FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($2);
 }
 global$0 = $0 + 160 | 0;
 return $4 | 0;
}
function Cube__maskAssemble_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = global$0 - 656 | 0;
 global$0 = $9;
 $3 = HEAP32[$0 + 60 >> 2];
 $4 = $3 + Math_imul($1, 52) | 0;
 $2 = HEAP32[$4 >> 2];
 label$1 : {
  label$2 : {
   if (($2 | 0) <= -1) {
    if (($2 | 0) == -2) {
     $2 = $3 + Math_imul($1, 52) | 0;
     Cube__rmvPicArr_28PicArr_20const__2c_20int_29($0, (memcpy($9, HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[$2 + 24 >> 2], 652) | 0, 652) + (HEAP32[$2 + 28 >> 2] << 5) | 0) + 40 | 0, $1);
     HEAP32[$2 + 24 >> 2] = -1;
     HEAP32[$2 + 28 >> 2] = -1;
    }
    if (!Cube__makePossibilities2_28int_2c_20ShapePlace__29($0, $1, $4)) {
     HEAP32[$4 >> 2] = -1;
     $0 = $3 + Math_imul($1, 52) | 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     if (!HEAP32[$0 + 16 >> 2]) {
      break label$1;
     }
     memset(HEAP32[$0 + 20 >> 2], 0, HEAP32[$0 + 12 >> 2] << 2);
     break label$1;
    }
    if (!HEAPU8[$0 | 0]) {
     $5 = HEAP32[($3 + Math_imul($1, 52) | 0) + 40 >> 2];
     $2 = 0;
     break label$2;
    }
    $2 = Math_imul(HEAP32[11536], 214013) + 2531011 | 0;
    HEAP32[11536] = $2;
    $6 = $3 + Math_imul($1, 52) | 0;
    $5 = HEAP32[$6 + 40 >> 2];
    $2 = ($2 >>> 16 >>> 0) % (HEAP32[$6 + 44 >> 2] - $5 >> 3 >>> 0) | 0;
    break label$2;
   }
   Cube__rmvPicArr_28PicArr_20const__2c_20int_29($0, ((HEAP32[HEAP32[11988] + 76 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + ($2 << 4) >> 2], 324) | 0) + (HEAP32[$4 + 4 >> 2] << 5) | 0) + 4 | 0, $1);
   $2 = HEAP32[$0 + 72 >> 2] + (HEAP32[$4 >> 2] << 3) | 0;
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + -1;
   $5 = HEAP32[$4 + 40 >> 2];
   $6 = HEAP32[$4 + 44 >> 2] - $5 >> 3;
   if (($6 | 0) == HEAP32[$4 + 8 >> 2]) {
    HEAP32[$4 >> 2] = -1;
    $0 = $3 + Math_imul($1, 52) | 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    if (!HEAP32[$0 + 16 >> 2]) {
     break label$1;
    }
    memset(HEAP32[$0 + 20 >> 2], 0, HEAP32[$0 + 12 >> 2] << 2);
    break label$1;
   }
   $2 = 1;
   if (HEAPU8[$0 | 0]) {
    $2 = Math_imul(HEAP32[11536], 214013) + 2531011 | 0;
    HEAP32[11536] = $2;
    $2 = ($2 >>> 16 >>> 0) % ($6 >>> 0) | 0;
   }
   $7 = HEAP32[($3 + Math_imul($1, 52) | 0) + 20 >> 2];
   if (!(HEAP32[$7 + ($2 >>> 3 & 8188) >> 2] >>> ($2 & 31) & 1)) {
    break label$2;
   }
   while (1) {
    $2 = ($2 + 1 | 0) % ($6 | 0) | 0;
    if (HEAP32[$7 + (($2 | 0) / 32 << 2) >> 2] >>> ($2 & 31) & 1) {
     continue;
    }
    break;
   }
  }
  $7 = 1;
  $5 = ($2 << 3) + $5 | 0;
  $6 = HEAP32[$5 + 4 >> 2];
  $5 = HEAP32[$5 >> 2];
  $8 = Math_imul($1, 52);
  $3 = $8 + $3 | 0;
  $10 = HEAP32[$3 + 20 >> 2] + (($2 | 0) / 32 << 2) | 0;
  $11 = HEAP32[$10 >> 2];
  $2 = 1 << ($2 & 31);
  if (!($11 & $2)) {
   HEAP32[$10 >> 2] = $2 | $11;
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
  }
  HEAP32[$4 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $6;
  $2 = HEAP32[$0 + 72 >> 2] + ($5 << 3) | 0;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
  $2 = $8 + HEAP32[$0 + 60 >> 2] | 0;
  $4 = HEAP32[HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + (HEAP32[$2 >> 2] << 4) >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $8 = HEAP32[HEAP32[11988] + 76 >> 2];
  HEAP32[$2 + 4 >> 2] = $6;
  HEAP32[$2 >> 2] = $5;
  Cube__putPicArr_28PicArr_20const__2c_20int_29($0, (($8 + Math_imul($4, 324) | 0) + ($3 << 5) | 0) + 4 | 0, $1);
 }
 global$0 = $9 + 656 | 0;
 return $7;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0;
 $9 = global$0 - 16 | 0;
 global$0 = $9;
 $8 = $2;
 while (1) {
  label$2 : {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$2;
   }
   if (!HEAPU8[$8 | 0]) {
    break label$2;
   }
   $8 = $8 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 while (1) {
  label$5 : {
   label$6 : {
    label$7 : {
     if (($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0)) {
      break label$7;
     }
     $10 = HEAP32[$1 + 4 >> 2];
     HEAP32[$9 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$9 + 12 >> 2] = $10;
     label$8 : {
      label$9 : {
       label$10 : {
        $10 = std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 | 0, $6 - $5 >> 2, $1, HEAP32[$0 + 8 >> 2]);
        label$11 : {
         if (($10 | 0) == -1) {
          while (1) {
           label$14 : {
            HEAP32[$7 >> 2] = $5;
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break label$14;
            }
            label$15 : {
             $5 = std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $8 - $2 | 0, $9 + 8 | 0, HEAP32[$0 + 8 >> 2]);
             $1 = $5 + 2 | 0;
             if ($1 >>> 0 > 2) {
              break label$15;
             }
             $5 = 1;
             label$16 : {
              switch ($1 - 1 | 0) {
              case 1:
               break label$15;
              case 0:
               break label$16;
              default:
               break label$9;
              }
             }
             HEAP32[$4 >> 2] = $2;
             break label$11;
            }
            $2 = $2 + $5 | 0;
            $5 = HEAP32[$7 >> 2] + 4 | 0;
            continue;
           }
           break;
          }
          HEAP32[$4 >> 2] = $2;
          break label$7;
         }
         $5 = HEAP32[$7 >> 2] + ($10 << 2) | 0;
         HEAP32[$7 >> 2] = $5;
         if (($5 | 0) == ($6 | 0)) {
          break label$8;
         }
         $2 = HEAP32[$4 >> 2];
         if (($3 | 0) == ($8 | 0)) {
          $8 = $3;
          continue;
         }
         if (!std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, HEAP32[$0 + 8 >> 2])) {
          break label$10;
         }
        }
        $0 = 2;
        break label$6;
       }
       HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 4;
       $2 = HEAP32[$4 >> 2] + 1 | 0;
       HEAP32[$4 >> 2] = $2;
       $8 = $2;
       while (1) {
        if (($3 | 0) == ($8 | 0)) {
         $8 = $3;
         break label$5;
        }
        if (!HEAPU8[$8 | 0]) {
         break label$5;
        }
        $8 = $8 + 1 | 0;
        continue;
       }
      }
      HEAP32[$4 >> 2] = $2;
      $0 = 1;
      break label$6;
     }
     $2 = HEAP32[$4 >> 2];
    }
    $0 = ($2 | 0) != ($3 | 0);
   }
   global$0 = $9 + 16 | 0;
   return $0 | 0;
  }
  $5 = HEAP32[$7 >> 2];
  continue;
 }
}
function Solutions__filterDup_28SlvCube__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = HEAP32[$1 >> 2];
 $9 = HEAP32[$1 + 4 >> 2];
 if (($5 | 0) != ($9 | 0)) {
  $6 = $1 + 60 | 0;
  $8 = $1 - -64 | 0;
  while (1) {
   label$3 : {
    $2 = HEAP32[$6 >> 2];
    if (!$2) {
     $2 = $6;
     $4 = $2;
     break label$3;
    }
    $7 = HEAP32[$5 >> 2];
    $4 = $6;
    while (1) {
     $3 = HEAP32[$2 + 16 >> 2];
     label$6 : {
      if (($7 | 0) < ($3 | 0)) {
       $3 = HEAP32[$2 >> 2];
       if ($3) {
        break label$6;
       }
       $4 = $2;
       break label$3;
      }
      if (($3 | 0) >= ($7 | 0)) {
       break label$3;
      }
      $4 = $2 + 4 | 0;
      $3 = HEAP32[$2 + 4 >> 2];
      if (!$3) {
       break label$3;
      }
      $2 = $4;
     }
     $4 = $2;
     $2 = $3;
     continue;
    }
   }
   if (!HEAP32[$4 >> 2]) {
    $3 = operator_20new_28unsigned_20long_29(20);
    $7 = HEAP32[$5 >> 2];
    HEAP32[$3 + 8 >> 2] = $2;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = $7;
    HEAP32[$4 >> 2] = $3;
    $2 = HEAP32[HEAP32[$1 + 56 >> 2] >> 2];
    if ($2) {
     HEAP32[$1 + 56 >> 2] = $2;
     $3 = HEAP32[$4 >> 2];
    }
    void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$1 + 60 >> 2], $3);
    HEAP32[$8 >> 2] = HEAP32[$8 >> 2] + 1;
   }
   $5 = $5 + 8 | 0;
   if (($9 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $5 = HEAP32[$0 + 8 >> 2];
 $7 = HEAP32[$0 + 12 >> 2];
 if (($5 | 0) != ($7 | 0)) {
  $8 = $1 + 60 | 0;
  $9 = HEAP32[$1 - -64 >> 2];
  while (1) {
   label$12 : {
    $0 = HEAP32[$5 >> 2];
    if (($9 | 0) != HEAP32[$0 - -64 >> 2]) {
     break label$12;
    }
    $4 = HEAP32[$1 + 56 >> 2];
    if (($8 | 0) == ($4 | 0)) {
     return 0;
    }
    $3 = HEAP32[$0 + 56 >> 2];
    while (1) {
     $0 = $4;
     if (HEAP32[$0 + 16 >> 2] != HEAP32[$3 + 16 >> 2]) {
      break label$12;
     }
     $6 = $3;
     $2 = HEAP32[$0 + 4 >> 2];
     label$15 : {
      if (!$2) {
       $4 = HEAP32[$0 + 8 >> 2];
       if (($0 | 0) == HEAP32[$4 >> 2]) {
        break label$15;
       }
       $3 = $0 + 8 | 0;
       while (1) {
        $0 = HEAP32[$3 >> 2];
        $3 = $0 + 8 | 0;
        $4 = HEAP32[$0 + 8 >> 2];
        if (($0 | 0) != HEAP32[$4 >> 2]) {
         continue;
        }
        break;
       }
       break label$15;
      }
      while (1) {
       $4 = $2;
       $2 = HEAP32[$2 >> 2];
       if ($2) {
        continue;
       }
       break;
      }
     }
     $2 = HEAP32[$6 + 4 >> 2];
     label$19 : {
      if (!$2) {
       $3 = HEAP32[$6 + 8 >> 2];
       if (($6 | 0) == HEAP32[$3 >> 2]) {
        break label$19;
       }
       $0 = $6 + 8 | 0;
       while (1) {
        $2 = HEAP32[$0 >> 2];
        $0 = $2 + 8 | 0;
        $3 = HEAP32[$2 + 8 >> 2];
        if (($2 | 0) != HEAP32[$3 >> 2]) {
         continue;
        }
        break;
       }
       break label$19;
      }
      while (1) {
       $3 = $2;
       $2 = HEAP32[$2 >> 2];
       if ($2) {
        continue;
       }
       break;
      }
     }
     if (($4 | 0) != ($8 | 0)) {
      continue;
     }
     break;
    }
    return 0;
   }
   $5 = $5 + 4 | 0;
   if (($7 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 return 1;
}
function ModelControlBase__scrRelease_28bool_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 144 | 0;
 global$0 = $4;
 if ($1) {
  HEAP32[$0 + 12 >> 2] = -1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, -1);
 }
 label$2 : {
  if (!HEAPU8[$0 + 636 | 0] | HEAP32[$0 + 620 >> 2] > ($2 | 0) | (HEAP32[$0 + 628 >> 2] < ($2 | 0) | HEAP32[$0 + 624 >> 2] > ($3 | 0))) {
   break label$2;
  }
  if (HEAP32[$0 + 632 >> 2] < ($3 | 0)) {
   break label$2;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$1 + 168 >> 2];
  HEAP32[$4 + 120 >> 2] = HEAP32[$1 + 164 >> 2];
  HEAP32[$4 + 124 >> 2] = $2;
  $2 = HEAP32[$1 + 160 >> 2];
  HEAP32[$4 + 112 >> 2] = HEAP32[$1 + 156 >> 2];
  HEAP32[$4 + 116 >> 2] = $2;
  $2 = HEAP32[$1 + 152 >> 2];
  HEAP32[$4 + 104 >> 2] = HEAP32[$1 + 148 >> 2];
  HEAP32[$4 + 108 >> 2] = $2;
  $2 = HEAP32[$1 + 144 >> 2];
  HEAP32[$4 + 96 >> 2] = HEAP32[$1 + 140 >> 2];
  HEAP32[$4 + 100 >> 2] = $2;
  $2 = HEAP32[$1 + 136 >> 2];
  HEAP32[$4 + 88 >> 2] = HEAP32[$1 + 132 >> 2];
  HEAP32[$4 + 92 >> 2] = $2;
  $2 = HEAP32[$1 + 128 >> 2];
  HEAP32[$4 + 80 >> 2] = HEAP32[$1 + 124 >> 2];
  HEAP32[$4 + 84 >> 2] = $2;
  $2 = HEAP32[$1 + 120 >> 2];
  HEAP32[$4 + 72 >> 2] = HEAP32[$1 + 116 >> 2];
  HEAP32[$4 + 76 >> 2] = $2;
  $2 = HEAP32[$1 + 112 >> 2];
  HEAP32[$4 + 64 >> 2] = HEAP32[$1 + 108 >> 2];
  HEAP32[$4 + 68 >> 2] = $2;
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 40 >> 2] = 1065353216;
  HEAP32[$4 + 20 >> 2] = 1065353216;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 52 >> 2] = 0;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 44 >> 2] = 0;
  HEAP32[$4 + 48 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 1065353216;
  HEAP32[$4 >> 2] = 1065353216;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  if (HEAPU8[$1 + 317 | 0]) {
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(-20), Math_fround(0), Math_fround(1), Math_fround(0));
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(20), Math_fround(1), Math_fround(0), Math_fround(0));
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(-5), Math_fround(0), Math_fround(0), Math_fround(1));
  }
  Quaternion__fromMat_28Mat4_20const__29($4 + 128 | 0, $4 - -64 | 0);
  $1 = HEAP32[$4 + 140 >> 2];
  HEAP32[$0 + 672 >> 2] = HEAP32[$4 + 136 >> 2];
  HEAP32[$0 + 676 >> 2] = $1;
  $1 = HEAP32[$4 + 132 >> 2];
  HEAP32[$0 + 664 >> 2] = HEAP32[$4 + 128 >> 2];
  HEAP32[$0 + 668 >> 2] = $1;
  Quaternion__fromMat_28Mat4_20const__29($4 + 128 | 0, $4);
  $1 = HEAP32[$4 + 140 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$4 + 136 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  $1 = HEAP32[$4 + 132 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$4 + 128 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  HEAP32[$0 + 656 >> 2] = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  $2 = $0 + 652 | 0;
  HEAP32[$4 >> 2] = $2;
  $3 = HEAP32[$1 + 328 >> 2];
  if (($3 | 0) != HEAP32[$1 + 332 >> 2]) {
   HEAP32[$3 >> 2] = $2;
   HEAP32[$1 + 328 >> 2] = HEAP32[$1 + 328 >> 2] + 4;
   break label$2;
  }
  void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 324 | 0, $4);
 }
 HEAP8[$0 + 636 | 0] = 0;
 global$0 = $4 + 144 | 0;
}
function NoiseSlvProgram__getCodes_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  $5 = HEAP32[11544];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$2 : {
   label$3 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$3;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$2;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 12 >> 2];
  label$5 : {
   if ($3 >>> 0 < HEAPU32[$0 + 16 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 12;
    break label$5;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 8 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$5;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = HEAP32[11545];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$7 : {
   label$8 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$8;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$7;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 36 >> 2];
  label$10 : {
   if ($3 >>> 0 < HEAPU32[$0 + 40 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 12;
    break label$10;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 32 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$10;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  global$0 = $1 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function BuildProgram__getCodes_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  $5 = HEAP32[11540];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$2 : {
   label$3 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$3;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$2;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 12 >> 2];
  label$5 : {
   if ($3 >>> 0 < HEAPU32[$0 + 16 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 12;
    break label$5;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 8 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$5;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = HEAP32[11541];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$7 : {
   label$8 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$8;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$7;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 36 >> 2];
  label$10 : {
   if ($3 >>> 0 < HEAPU32[$0 + 40 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 12;
    break label$10;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 32 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$10;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  global$0 = $1 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function FlatProgram__getCodes_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  $5 = HEAP32[11542];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$2 : {
   label$3 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$3;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$2;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 12 >> 2];
  label$5 : {
   if ($3 >>> 0 < HEAPU32[$0 + 16 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 12;
    break label$5;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 8 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$5;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = HEAP32[11543];
  $2 = strlen($5);
  if ($2 >>> 0 >= 4294967280) {
   break label$1;
  }
  label$7 : {
   label$8 : {
    if ($2 >>> 0 >= 11) {
     $3 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$1 + 8 >> 2] = $3 | -2147483648;
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $2;
     break label$8;
    }
    HEAP8[$1 + 11 | 0] = $2;
    $4 = $1;
    if (!$2) {
     break label$7;
    }
   }
   memcpy($4, $5, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  $3 = HEAP32[$0 + 36 >> 2];
  label$10 : {
   if ($3 >>> 0 < HEAPU32[$0 + 40 >> 2]) {
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 12;
    break label$10;
   }
   void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 + 32 | 0, $1);
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$10;
   }
   dlfree(HEAP32[$1 >> 2]);
  }
  global$0 = $1 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 $5 = $0 + 12 | 0;
 if ($28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($5, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 120 | 0, 35210))) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 112 | 0, 35572);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 60 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 56 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 52 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 36700);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 44 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $3;
 HEAP32[$2 + 88 >> 2] = $4;
 HEAP32[$2 + 92 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 36703);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $0 = HEAP32[$0 + 20 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 if ($28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($5, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 120 | 0, 35210))) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 35134);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 128 | 0;
}
function std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 while (1) {
  $6 = HEAP32[$2 >> 2];
  if ($6 >>> 0 >= $1 >>> 0) {
   return 0;
  }
  $9 = 1;
  label$3 : {
   label$4 : {
    $10 = HEAP32[$5 >> 2];
    label$5 : {
     if ($10 >>> 0 >= $4 >>> 0) {
      break label$5;
     }
     $0 = HEAP8[$6 | 0];
     $3 = $0 & 255;
     if (($0 | 0) >= 0) {
      if ($3 >>> 0 > 1114111) {
       break label$3;
      }
      $0 = 1;
      break label$4;
     }
     if ($3 >>> 0 < 194) {
      break label$3;
     }
     if ($3 >>> 0 <= 223) {
      if (($1 - $6 | 0) < 2) {
       break label$5;
      }
      $9 = 2;
      $7 = HEAPU8[$6 + 1 | 0];
      if (($7 & 192) != 128) {
       break label$5;
      }
      $0 = 2;
      $3 = $7 & 63 | $3 << 6 & 1984;
      if ($3 >>> 0 <= 1114111) {
       break label$4;
      }
      break label$5;
     }
     label$8 : {
      if ($3 >>> 0 <= 239) {
       if (($1 - $6 | 0) < 3) {
        break label$5;
       }
       $8 = HEAPU8[$6 + 2 | 0];
       $7 = HEAPU8[$6 + 1 | 0];
       label$10 : {
        label$11 : {
         if (($3 | 0) != 237) {
          if (($3 | 0) != 224) {
           break label$11;
          }
          if (($7 & 224) == 160) {
           break label$10;
          }
          break label$3;
         }
         if (($7 & 224) == 128) {
          break label$10;
         }
         break label$3;
        }
        if (($7 & 192) != 128) {
         break label$3;
        }
       }
       if (($8 & 192) == 128) {
        break label$8;
       }
       break label$3;
      }
      if ($3 >>> 0 > 244) {
       break label$3;
      }
      if (($1 - $6 | 0) < 4) {
       break label$5;
      }
      $8 = HEAPU8[$6 + 3 | 0];
      $11 = HEAPU8[$6 + 2 | 0];
      $7 = HEAPU8[$6 + 1 | 0];
      label$13 : {
       label$14 : {
        $0 = $3 + -240 | 0;
        if ($0 >>> 0 > 4) {
         break label$14;
        }
        label$15 : {
         switch ($0 - 1 | 0) {
         default:
          if (($7 + 112 & 255) >>> 0 >= 48) {
           break label$3;
          }
          break label$13;
         case 0:
         case 1:
         case 2:
          break label$14;
         case 3:
          break label$15;
         }
        }
        if (($7 & 240) != 128) {
         break label$3;
        }
        break label$13;
       }
       if (($7 & 192) != 128) {
        break label$3;
       }
      }
      if (($11 & 192) != 128 | ($8 & 192) != 128) {
       break label$3;
      }
      $0 = 4;
      $9 = 2;
      $3 = $8 & 63 | ($11 << 6 & 4032 | ($3 << 18 & 1835008 | ($7 & 63) << 12));
      if ($3 >>> 0 > 1114111) {
       break label$5;
      }
      break label$4;
     }
     $0 = 3;
     $9 = 2;
     $3 = $8 & 63 | ($3 << 12 & 61440 | ($7 & 63) << 6);
     if ($3 >>> 0 <= 1114111) {
      break label$4;
     }
    }
    return $9;
   }
   HEAP32[$10 >> 2] = $3;
   HEAP32[$2 >> 2] = $0 + $6;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
   continue;
  }
  break;
 }
 return 2;
}
function __get_locale($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = global$0 - 272 | 0;
 global$0 = $4;
 label$1 : {
  if (HEAPU8[$1 | 0]) {
   break label$1;
  }
  $1 = getenv(23632);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$1;
  }
  $1 = getenv(Math_imul($0, 12) + 23648 | 0);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$1;
  }
  $1 = getenv(23720);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$1;
  }
  $1 = 23725;
 }
 label$5 : {
  while (1) {
   $3 = HEAPU8[$1 + $2 | 0];
   if (!(!$3 | ($3 | 0) == 47)) {
    $5 = 15;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 15) {
     continue;
    }
    break label$5;
   }
   break;
  }
  $5 = $2;
 }
 $3 = 23725;
 label$8 : {
  label$9 : {
   $2 = HEAPU8[$1 | 0];
   label$10 : {
    label$11 : {
     if (!(HEAPU8[$1 + $5 | 0] | ($2 | 0) == 46)) {
      $3 = $1;
      if (($2 | 0) != 67) {
       break label$11;
      }
     }
     if (!HEAPU8[$3 + 1 | 0]) {
      break label$10;
     }
    }
    if (!strcmp($3, 23725)) {
     break label$10;
    }
    if (strcmp($3, 23733)) {
     break label$9;
    }
   }
   if (!$0) {
    $2 = 23556;
    if (HEAPU8[$3 + 1 | 0] == 46) {
     break label$8;
    }
   }
   $2 = 0;
   break label$8;
  }
  $2 = HEAP32[12807];
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     break label$8;
    }
    $2 = HEAP32[$2 + 24 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  __lock(51220);
  $2 = HEAP32[12807];
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     __unlock(51220);
     break label$8;
    }
    $2 = HEAP32[$2 + 24 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  $1 = 0;
  label$19 : {
   label$20 : {
    label$21 : {
     if (HEAP32[12008]) {
      break label$21;
     }
     $2 = getenv(23739);
     if (!$2 | !HEAPU8[$2 | 0]) {
      break label$21;
     }
     $9 = $5 + 1 | 0;
     $10 = 254 - $5 | 0;
     while (1) {
      $7 = __strchrnul($2, 58);
      $6 = HEAPU8[$7 | 0];
      $8 = ($7 - $2 | 0) - (($6 | 0) != 0) | 0;
      if ($8 >>> 0 < $10 >>> 0) {
       memcpy($4 + 16 | 0, $2, $8);
       $2 = $8 + ($4 + 16 | 0) | 0;
       HEAP8[$2 | 0] = 47;
       memcpy($2 + 1 | 0, $3, $5);
       HEAP8[$4 + 16 + ($8 + $9) | 0] = 0;
       $6 = __map_file($4 + 16 | 0, $4 + 12 | 0) | 0;
       if ($6) {
        $2 = dlmalloc(28);
        if ($2) {
         break label$20;
        }
        __munmap($6, HEAP32[$4 + 12 >> 2]);
        break label$21;
       }
       $6 = HEAPU8[$7 | 0];
      }
      $2 = (($6 | 0) != 0) + $7 | 0;
      if (HEAPU8[$2 | 0]) {
       continue;
      }
      break;
     }
    }
    $2 = dlmalloc(28);
    if (!$2) {
     break label$19;
    }
    $1 = HEAP32[5890];
    HEAP32[$2 >> 2] = HEAP32[5889];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = $2 + 8 | 0;
    memcpy($1, $3, $5);
    HEAP8[$1 + $5 | 0] = 0;
    HEAP32[$2 + 24 >> 2] = HEAP32[12807];
    HEAP32[12807] = $2;
    $1 = $2;
    break label$19;
   }
   HEAP32[$2 >> 2] = $6;
   HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
   $1 = $2 + 8 | 0;
   memcpy($1, $3, $5);
   HEAP8[$1 + $5 | 0] = 0;
   HEAP32[$2 + 24 >> 2] = HEAP32[12807];
   HEAP32[12807] = $2;
   $1 = $2;
  }
  __unlock(51220);
  $2 = $0 | $1 ? $1 : 23556;
 }
 global$0 = $4 + 272 | 0;
 return $2;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 $8 = $2;
 while (1) {
  label$2 : {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$2;
   }
   if (!HEAP32[$8 >> 2]) {
    break label$2;
   }
   $8 = $8 + 4 | 0;
   continue;
  }
  break;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $11 = 1;
 while (1) {
  label$5 : {
   label$6 : {
    if (!(($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0))) {
     $9 = HEAP32[$1 + 4 >> 2];
     HEAP32[$10 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$10 + 12 >> 2] = $9;
     label$8 : {
      label$9 : {
       $9 = std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 >> 2, $6 - $5 | 0, HEAP32[$0 + 8 >> 2]);
       $12 = $9 + 1 | 0;
       label$10 : {
        if ($12 >>> 0 <= 1) {
         if (!($12 - 1)) {
          break label$6;
         }
         HEAP32[$7 >> 2] = $5;
         while (1) {
          label$13 : {
           if (HEAP32[$4 >> 2] == ($2 | 0)) {
            break label$13;
           }
           $1 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, HEAP32[$2 >> 2], HEAP32[$0 + 8 >> 2]);
           if (($1 | 0) == -1) {
            break label$13;
           }
           $5 = $1 + HEAP32[$7 >> 2] | 0;
           HEAP32[$7 >> 2] = $5;
           $2 = $2 + 4 | 0;
           continue;
          }
          break;
         }
         HEAP32[$4 >> 2] = $2;
         break label$10;
        }
        $5 = $9 + HEAP32[$7 >> 2] | 0;
        HEAP32[$7 >> 2] = $5;
        if (($5 | 0) == ($6 | 0)) {
         break label$8;
        }
        if (($3 | 0) == ($8 | 0)) {
         $2 = HEAP32[$4 >> 2];
         $8 = $3;
         continue;
        }
        $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($10 + 4 | 0, 0, HEAP32[$0 + 8 >> 2]);
        if (($8 | 0) != -1) {
         break label$9;
        }
       }
       $11 = 2;
       break label$6;
      }
      $5 = $10 + 4 | 0;
      if ($8 >>> 0 > $6 - HEAP32[$7 >> 2] >>> 0) {
       break label$6;
      }
      while (1) {
       if ($8) {
        $2 = HEAPU8[$5 | 0];
        $9 = HEAP32[$7 >> 2];
        HEAP32[$7 >> 2] = $9 + 1;
        HEAP8[$9 | 0] = $2;
        $8 = $8 + -1 | 0;
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      }
      $2 = HEAP32[$4 >> 2] + 4 | 0;
      HEAP32[$4 >> 2] = $2;
      $8 = $2;
      while (1) {
       if (($3 | 0) == ($8 | 0)) {
        $8 = $3;
        break label$5;
       }
       if (!HEAP32[$8 >> 2]) {
        break label$5;
       }
       $8 = $8 + 4 | 0;
       continue;
      }
     }
     $2 = HEAP32[$4 >> 2];
    }
    $11 = ($2 | 0) != ($3 | 0);
   }
   global$0 = $10 + 16 | 0;
   return $11 | 0;
  }
  $5 = HEAP32[$7 >> 2];
  continue;
 }
}
function CubeDocBase__addSlvMin_28std____2__vector_std____2__pair_int_2c_20int__2c_20std____2__allocator_std____2__pair_int_2c_20int__20__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6429, 9), HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 3);
 $4 = HEAP32[(HEAP32[HEAP32[$3 >> 2] + -12 >> 2] + $3 | 0) + 28 >> 2];
 HEAP32[$8 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($8 + 8 | 0, 51440);
 $5 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
 $4 = HEAP32[$8 + 8 >> 2];
 $2 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $5);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $4 = operator_20new_28unsigned_20long_29(24);
 $2 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 $3 = $4;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP8[$3 + 20 | 0] = 0;
 HEAP32[$3 >> 2] = $2 - $5 >> 3;
 $2 = operator_20new_28unsigned_20long_29(68);
 $6 = HEAP32[$0 + 116 >> 2];
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $5 = $2 + 60 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = $6;
 HEAP32[$2 + 56 >> 2] = $5;
 Solutions__addBackCommon_28SlvCube__2c_20bool_29($3, $2, 0);
 $5 = HEAP32[$1 + 4 >> 2];
 $3 = HEAP32[$1 >> 2];
 $6 = $5 - $3 >> 3;
 $9 = HEAP32[$2 >> 2];
 $7 = HEAP32[$2 + 4 >> 2] - $9 >> 3;
 label$3 : {
  if ($6 >>> 0 > $7 >>> 0) {
   std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____append_28unsigned_20long_29($2, $6 - $7 | 0);
   $5 = HEAP32[$1 + 4 >> 2];
   $3 = HEAP32[$1 >> 2];
   break label$3;
  }
  if ($6 >>> 0 >= $7 >>> 0) {
   break label$3;
  }
  HEAP32[$2 + 4 >> 2] = ($6 << 3) + $9;
 }
 if (($3 | 0) != ($5 | 0)) {
  $5 = $5 - $3 >> 3;
  $2 = HEAP32[$2 >> 2];
  $1 = 0;
  while (1) {
   $6 = $1 << 3;
   $7 = $6 + $2 | 0;
   $6 = $3 + $6 | 0;
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   $1 = $1 + 1 | 0;
   if ($1 >>> 0 < $5 >>> 0) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = $4;
 if ($1) {
  std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($1);
 }
 HEAP32[$0 + 132 >> 2] = 0;
 global$0 = $8 + 16 | 0;
}
function BuildControlBase__reCalcBldMinMax_28_29($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $1 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
 BuildWorld__clean_28BuildWorld__ECleanMethod_29($1, 2);
 BuildWorld__reClacLimits_28_29($1);
 $6 = HEAP32[$1 + 40 >> 2];
 $11 = HEAP32[$1 + 48 >> 2];
 $12 = $0 + 1268 | 0;
 $3 = Math_fround(HEAP32[$1 + 56 >> 2]);
 HEAPF32[$12 >> 2] = $3;
 $13 = $0 + 1264 | 0;
 $4 = Math_fround($11 | 0);
 HEAPF32[$13 >> 2] = $4;
 $11 = $0 + 1260 | 0;
 $5 = Math_fround($6 | 0);
 HEAPF32[$11 >> 2] = $5;
 $7 = HEAP32[$1 + 44 >> 2];
 $6 = HEAP32[$1 + 52 >> 2];
 $15 = $0 + 1280 | 0;
 $8 = Math_fround(HEAP32[$1 + 60 >> 2]);
 HEAPF32[$15 >> 2] = $8;
 $16 = $0 + 1276 | 0;
 $9 = Math_fround($6 | 0);
 HEAPF32[$16 >> 2] = $9;
 $6 = $0 + 1272 | 0;
 $10 = Math_fround($7 | 0);
 HEAPF32[$6 >> 2] = $10;
 $7 = HEAP32[$1 + 72 >> 2];
 $14 = HEAP32[$1 - -64 >> 2];
 $2 = Math_fround(HEAP32[$1 + 80 >> 2]);
 $3 = $3 < $2 ? $3 : $2;
 HEAPF32[$12 >> 2] = $3;
 $2 = Math_fround($14 | 0);
 $4 = $4 < $2 ? $4 : $2;
 HEAPF32[$13 >> 2] = $4;
 $2 = Math_fround($7 | 0);
 $5 = $5 < $2 ? $5 : $2;
 HEAPF32[$11 >> 2] = $5;
 $7 = HEAP32[$1 + 76 >> 2];
 $14 = HEAP32[$1 + 68 >> 2];
 $2 = Math_fround(HEAP32[$1 + 84 >> 2]);
 $8 = $8 < $2 ? $2 : $8;
 HEAPF32[$15 >> 2] = $8;
 $2 = Math_fround($14 | 0);
 $9 = $9 < $2 ? $2 : $9;
 HEAPF32[$16 >> 2] = $9;
 $2 = Math_fround($7 | 0);
 $10 = $10 < $2 ? $2 : $10;
 HEAPF32[$6 >> 2] = $10;
 $7 = HEAP32[$1 + 96 >> 2];
 $14 = HEAP32[$1 + 104 >> 2];
 $2 = Math_fround(HEAP32[$1 + 88 >> 2]);
 HEAPF32[$12 >> 2] = $3 < $2 ? $3 : $2;
 $3 = Math_fround($14 | 0);
 HEAPF32[$13 >> 2] = $4 < $3 ? $4 : $3;
 $3 = Math_fround($7 | 0);
 HEAPF32[$11 >> 2] = $5 < $3 ? $5 : $3;
 $12 = HEAP32[$1 + 100 >> 2];
 $13 = HEAP32[$1 + 108 >> 2];
 $3 = Math_fround(HEAP32[$1 + 92 >> 2]);
 $3 = $8 < $3 ? $3 : $8;
 HEAPF32[$15 >> 2] = $3;
 $4 = Math_fround($13 | 0);
 $4 = $9 < $4 ? $4 : $9;
 HEAPF32[$16 >> 2] = $4;
 $5 = Math_fround($12 | 0);
 $5 = $10 < $5 ? $5 : $10;
 HEAPF32[$6 >> 2] = $5;
 label$1 : {
  label$2 : {
   if (HEAP32[$1 + 44 >> 2] | HEAP32[$1 + 40 >> 2] != 50 | (HEAP32[$1 + 52 >> 2] | HEAP32[$1 + 48 >> 2] != 50)) {
    break label$2;
   }
   if (HEAP32[$1 + 60 >> 2]) {
    break label$2;
   }
   if (HEAP32[$1 + 56 >> 2] == 50) {
    break label$1;
   }
  }
  HEAPF32[$6 >> 2] = $5 + Math_fround(-1);
 }
 label$3 : {
  label$4 : {
   if (HEAP32[$1 + 68 >> 2] | HEAP32[$1 + 64 >> 2] != 50 | (HEAP32[$1 + 76 >> 2] | HEAP32[$1 + 72 >> 2] != 50)) {
    break label$4;
   }
   if (HEAP32[$1 + 84 >> 2]) {
    break label$4;
   }
   if (HEAP32[$1 + 80 >> 2] == 50) {
    break label$3;
   }
  }
  HEAPF32[$0 + 1276 >> 2] = $4 + Math_fround(-1);
 }
 label$5 : {
  label$6 : {
   if (HEAP32[$1 + 92 >> 2] | HEAP32[$1 + 88 >> 2] != 50 | (HEAP32[$1 + 100 >> 2] | HEAP32[$1 + 96 >> 2] != 50)) {
    break label$6;
   }
   if (HEAP32[$1 + 108 >> 2]) {
    break label$6;
   }
   if (HEAP32[$1 + 104 >> 2] == 50) {
    break label$5;
   }
  }
  HEAPF32[$0 + 1280 >> 2] = $3 + Math_fround(-1);
 }
}
function ShaderProgram__printProgramInfoLog_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 glGetProgramiv($0 | 0, 35716, $1 + 36 | 0);
 $2 = HEAP32[$1 + 36 >> 2];
 if (($2 | 0) >= 2) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($1 + 16 | 0, $2);
  glGetProgramInfoLog($0 | 0, HEAP32[$1 + 36 >> 2], $1 + 32 | 0, (HEAP8[$1 + 27 | 0] < 0 ? HEAP32[$1 + 16 >> 2] : $1 + 16 | 0) | 0);
  $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4328, 18);
  $2 = HEAPU8[$1 + 27 | 0];
  $3 = $2 << 24 >> 24 < 0;
  $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($4, $3 ? HEAP32[$1 + 16 >> 2] : $1 + 16 | 0, $3 ? HEAP32[$1 + 20 >> 2] : $2);
  $3 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
  HEAP32[$1 + 40 >> 2] = $3;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
  $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 40 | 0, 51440);
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
  $3 = HEAP32[$1 + 40 >> 2];
  $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $5);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 }
 glGetProgramiv($0 | 0, 35714, $1 + 12 | 0);
 $0 = HEAP32[$1 + 12 >> 2];
 if (!$0) {
  $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4347, 22);
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $2 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 40 | 0, 51440);
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, 10) | 0;
  $2 = HEAP32[$1 + 40 >> 2];
  $3 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $3;
  if (($3 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
  $0 = HEAP32[$1 + 12 >> 2];
 }
 if (HEAP8[$1 + 27 | 0] <= -1) {
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 global$0 = $1 + 48 | 0;
 return ($0 | 0) != 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 41404);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0)) {
    $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 34782);
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 12 >> 2] = $4;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0)) {
     break label$2;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
   HEAP32[$2 + 28 >> 2] = $3;
   $1 = 0;
   if (!$3) {
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 28 | 0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
 }
 global$0 = $2 + 48 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 28 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 39128);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 52 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 39140);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 44 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 if (HEAPU8[$0 + 29 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 39144);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 36 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
 $3 = $0 + 8 | 0;
 if (HEAP32[$3 + 4 >> 2]) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 35572);
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($3, $1);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 35134);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $3 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $0 = $0 + 20 | 0;
 if (HEAP32[$0 + 4 >> 2]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 35572);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 35134);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 global$0 = $2 + 112 | 0;
}
function void_20std____2__vector_MatStack__MatEntry_2c_20std____2__allocator_MatStack__MatEntry__20_____push_back_slow_path_MatStack__MatEntry__28MatStack__MatEntry___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $7 = HEAP32[$0 >> 2];
 $4 = ($5 - $7 | 0) / 68 | 0;
 $2 = $4 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 < 63161284) {
   $6 = (HEAP32[$0 + 8 >> 2] - $7 | 0) / 68 | 0;
   $3 = $6 << 1;
   $6 = $6 >>> 0 < 31580641 ? $3 >>> 0 < $2 >>> 0 ? $2 : $3 : 63161283;
   $2 = 0;
   label$3 : {
    if (!$6) {
     break label$3;
    }
    if ($6 >>> 0 >= 63161284) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29(Math_imul($6, 68));
   }
   $8 = $2;
   $2 = $2 + Math_imul($4, 68) | 0;
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $4 = HEAP32[$1 + 60 >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$2 + 60 >> 2] = $4;
   $4 = HEAP32[$1 + 52 >> 2];
   HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$2 + 52 >> 2] = $4;
   $4 = HEAP32[$1 + 44 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$2 + 44 >> 2] = $4;
   $4 = HEAP32[$1 + 36 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$2 + 36 >> 2] = $4;
   $4 = HEAP32[$1 + 28 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$2 + 28 >> 2] = $4;
   $4 = HEAP32[$1 + 20 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$2 + 20 >> 2] = $4;
   $4 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = $4;
   HEAP32[$2 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
   $4 = $2 + 68 | 0;
   if (($5 | 0) != ($7 | 0)) {
    while (1) {
     $5 = $5 + -68 | 0;
     $1 = $5;
     $3 = HEAP32[$1 + 4 >> 2];
     $2 = $2 + -68 | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = $3;
     $3 = HEAP32[$1 + 60 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = $3;
     $3 = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = $3;
     $3 = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = $3;
     $3 = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = $3;
     $3 = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = $3;
     $3 = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = $3;
     $3 = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = $3;
     HEAP32[$2 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
     if (($1 | 0) != ($7 | 0)) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $8 + Math_imul($6, 68);
   HEAP32[$0 + 4 >> 2] = $4;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 24 >> 2] = $1;
 label$1 : {
  if (!(HEAP32[$3 + 4 >> 2] & 1)) {
   HEAP32[$6 >> 2] = -1;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
   HEAP32[$6 + 24 >> 2] = $1;
   $0 = HEAP32[$6 >> 2];
   if ($0 >>> 0 <= 1) {
    if ($0 - 1) {
     HEAP8[$5 | 0] = 0;
     break label$1;
    }
    HEAP8[$5 | 0] = 1;
    break label$1;
   }
   HEAP8[$5 | 0] = 1;
   HEAP32[$4 >> 2] = 4;
   break label$1;
  }
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
  $0 = HEAP32[$6 >> 2];
  $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
  if (($1 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  }
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
  $1 = HEAP32[$6 >> 2];
  $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $3;
  if (($3 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($6, $0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6 | 12, $0);
  $3 = $6 + 24 | 0;
  HEAP8[$5 | 0] = (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $7, $4, 1) | 0) == ($6 | 0);
  $1 = HEAP32[$6 + 24 >> 2];
  while (1) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $6 + 32 | 0;
 return $1 | 0;
}
function ShaderProgram__printShaderInfoLog_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 glGetShaderiv($0 | 0, 35716, $1 + 36 | 0);
 $2 = HEAP32[$1 + 36 >> 2];
 if (($2 | 0) >= 2) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($1 + 16 | 0, $2);
  glGetShaderInfoLog($0 | 0, HEAP32[$1 + 36 >> 2], $1 + 32 | 0, (HEAP8[$1 + 27 | 0] < 0 ? HEAP32[$1 + 16 >> 2] : $1 + 16 | 0) | 0);
  $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4288, 17);
  $2 = HEAPU8[$1 + 27 | 0];
  $3 = $2 << 24 >> 24 < 0;
  $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($4, $3 ? HEAP32[$1 + 16 >> 2] : $1 + 16 | 0, $3 ? HEAP32[$1 + 20 >> 2] : $2);
  $3 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
  HEAP32[$1 + 40 >> 2] = $3;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
  $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 40 | 0, 51440);
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
  $3 = HEAP32[$1 + 40 >> 2];
  $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $5);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 }
 glGetShaderiv($0 | 0, 35713, $1 + 12 | 0);
 if (!HEAP32[$1 + 12 >> 2]) {
  $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4306, 21);
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $2 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 40 | 0, 51440);
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, 10) | 0;
  $2 = HEAP32[$1 + 40 >> 2];
  $3 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $3;
  if (($3 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 }
 if (HEAP8[$1 + 27 | 0] <= -1) {
  dlfree(HEAP32[$1 + 16 >> 2]);
 }
 global$0 = $1 + 48 | 0;
}
function SlvCube__SlvCube_28std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20__20const__2c_20std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20__20const__2c_20PicsSet_20const__2c_20Shape_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = $4;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = $0 + 60 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = $4;
 $4 = HEAP32[$1 + 4 >> 2];
 $7 = HEAP32[$1 >> 2];
 $10 = $4 - $7 | 0;
 $8 = ($10 | 0) / 52 | 0;
 label$1 : {
  label$2 : {
   if ($10) {
    if ($8 >>> 0 >= 536870912) {
     break label$2;
    }
    $4 = $8 << 3;
    $5 = operator_20new_28unsigned_20long_29($4);
    HEAP32[$0 + 4 >> 2] = $5;
    HEAP32[$0 >> 2] = $5;
    $9 = $4 + $5 | 0;
    HEAP32[$0 + 8 >> 2] = $9;
    $7 = HEAP32[$1 >> 2];
    $4 = HEAP32[$1 + 4 >> 2];
   }
   if (($4 | 0) == ($7 | 0)) {
    break label$1;
   }
   $4 = 0;
   while (1) {
    $7 = HEAP32[$2 >> 2] + Math_imul($4, 52) | 0;
    $8 = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 12 >> 2] = $8;
    label$6 : {
     if ($5 >>> 0 < $9 >>> 0) {
      $7 = HEAP32[$6 + 12 >> 2];
      HEAP32[$5 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$5 + 4 >> 2] = $7;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 8;
      break label$6;
     }
     void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($0, $6 + 8 | 0);
    }
    $4 = $4 + 1 | 0;
    if ($4 >>> 0 >= (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0) / 52 >>> 0) {
     break label$1;
    }
    $9 = HEAP32[$0 + 8 >> 2];
    $5 = HEAP32[$0 + 4 >> 2];
    continue;
   }
  }
  std____2____throw_length_error_28char_20const__29(15792);
  abort();
 }
 $5 = HEAP32[$3 + 12 >> 2];
 if (($5 | 0) != HEAP32[$3 + 16 >> 2]) {
  $2 = $0 + 12 | 0;
  $4 = 0;
  while (1) {
   $1 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[($4 << 3) + $5 >> 2], 652) | 0;
   $5 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 12 >> 2] = $5;
   $1 = HEAP32[$0 + 16 >> 2];
   label$10 : {
    if ($1 >>> 0 < HEAPU32[$0 + 20 >> 2]) {
     $5 = HEAP32[$6 + 12 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$1 + 4 >> 2] = $5;
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 8;
     break label$10;
    }
    void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($2, $6 + 8 | 0);
   }
   $4 = $4 + 1 | 0;
   $5 = HEAP32[$3 + 12 >> 2];
   if ($4 >>> 0 < HEAP32[$3 + 16 >> 2] - $5 >> 3 >>> 0) {
    continue;
   }
   break;
  }
 }
 global$0 = $6 + 16 | 0;
 return $0;
}
function std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   $4 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   label$3 : {
    if (($4 - $2 | 0) / 52 >>> 0 >= $1 >>> 0) {
     while (1) {
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$2 >> 2] = -1;
      HEAP32[$2 + 24 >> 2] = -1;
      HEAP32[$2 + 28 >> 2] = -1;
      HEAP32[$2 + 12 >> 2] = 0;
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 20 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = -1;
      HEAP32[$2 + 36 >> 2] = -1;
      HEAP32[$2 + 48 >> 2] = 0;
      HEAP32[$2 + 40 >> 2] = 0;
      HEAP32[$2 + 44 >> 2] = 0;
      $2 = HEAP32[$0 + 4 >> 2] + 52 | 0;
      HEAP32[$0 + 4 >> 2] = $2;
      $1 = $1 + -1 | 0;
      if ($1) {
       continue;
      }
      break label$3;
     }
    }
    $5 = HEAP32[$0 >> 2];
    $7 = ($2 - $5 | 0) / 52 | 0;
    $2 = $7 + $1 | 0;
    if ($2 >>> 0 >= 82595525) {
     break label$2;
    }
    HEAP32[$3 + 24 >> 2] = $0 + 8;
    HEAP32[$3 + 20 >> 2] = 0;
    $4 = ($4 - $5 | 0) / 52 | 0;
    $5 = $4 << 1;
    $4 = $4 >>> 0 < 41297762 ? $5 >>> 0 < $2 >>> 0 ? $2 : $5 : 82595524;
    if ($4) {
     if ($4 >>> 0 >= 82595525) {
      break label$1;
     }
     $6 = operator_20new_28unsigned_20long_29(Math_imul($4, 52));
    }
    HEAP32[$3 + 8 >> 2] = $6;
    $2 = Math_imul($7, 52) + $6 | 0;
    HEAP32[$3 + 16 >> 2] = $2;
    HEAP32[$3 + 20 >> 2] = Math_imul($4, 52) + $6;
    HEAP32[$3 + 12 >> 2] = $2;
    while (1) {
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$2 >> 2] = -1;
     HEAP32[$2 + 24 >> 2] = -1;
     HEAP32[$2 + 28 >> 2] = -1;
     HEAP32[$2 + 12 >> 2] = 0;
     HEAP32[$2 + 16 >> 2] = 0;
     HEAP32[$2 + 20 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = -1;
     HEAP32[$2 + 36 >> 2] = -1;
     HEAP32[$2 + 48 >> 2] = 0;
     HEAP32[$2 + 40 >> 2] = 0;
     HEAP32[$2 + 44 >> 2] = 0;
     $2 = $2 + 52 | 0;
     HEAP32[$3 + 16 >> 2] = $2;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue;
     }
     break;
    }
    std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20_____swap_out_circular_buffer_28std____2____split_buffer_ShapePlace_2c_20std____2__allocator_ShapePlace_____29($0, $3 + 8 | 0);
    $2 = HEAP32[$3 + 16 >> 2];
    $1 = HEAP32[$3 + 12 >> 2];
    if (($2 | 0) != ($1 | 0)) {
     while (1) {
      $0 = $2 + -52 | 0;
      HEAP32[$3 + 16 >> 2] = $0;
      $0 = HEAP32[$0 + 40 >> 2];
      if ($0) {
       HEAP32[$2 + -8 >> 2] = $0;
       dlfree($0);
      }
      $0 = HEAP32[$2 + -32 >> 2];
      if ($0) {
       dlfree($0);
      }
      $2 = HEAP32[$3 + 16 >> 2];
      if (($1 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (!$0) {
     break label$3;
    }
    dlfree($0);
   }
   global$0 = $3 + 32 | 0;
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 $6 = $3;
 $7 = $3;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 8 >> 2];
   if (HEAPU8[$2 + 4 | 0] == 10) {
    if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($2)) {
     break label$2;
    }
    $2 = HEAP32[$0 + 8 >> 2];
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   $2 = $1;
   $4 = HEAP32[$0 + 8 >> 2];
   $5 = HEAPU8[$4 + 6 | 0];
   label$5 : {
    if (($5 | 0) != 2) {
     $4 = !$5;
     break label$5;
    }
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4, $2) | 0;
   }
   if ($4) {
    $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 88 | 0, 41284);
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 44 >> 2] = $5;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($2, $3 + 40 | 0);
   }
   $2 = HEAP32[$0 + 8 >> 2];
   $4 = HEAPU8[$2 + 6 | 0];
   label$9 : {
    if (($4 | 0) != 2) {
     $2 = !$4;
     break label$9;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2, $1) | 0;
   }
   label$8 : {
    if (!$2) {
     $0 = HEAP32[$0 + 8 >> 2];
     $2 = HEAPU8[$0 + 7 | 0];
     label$12 : {
      if (($2 | 0) != 2) {
       $0 = !$2;
       break label$12;
      }
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
     }
     if (!$0) {
      break label$8;
     }
    }
    $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 80 | 0, 35572);
    $2 = HEAP32[$0 + 4 >> 2];
    HEAP32[$3 + 32 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$3 + 36 >> 2] = $2;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 32 | 0);
   }
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 72 | 0, 35187);
   break label$1;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 - -64 | 0, 43668);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 24 | 0);
  $2 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 20 >> 2] = $2;
  HEAP32[$3 + 56 >> 2] = $0;
  HEAP32[$3 + 60 >> 2] = $2;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 16 | 0);
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 48 | 0, 35210);
 }
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 12 >> 2] = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 global$0 = $3 + 96 | 0;
}
function std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $6 = HEAP32[$2 >> 2];
 label$1 : {
  label$2 : {
   while (1) {
    if ($6 >>> 0 >= $1 >>> 0) {
     $0 = 0;
     break label$1;
    }
    $0 = 2;
    $3 = HEAPU16[$6 >> 1];
    if ($3 >>> 0 > 1114111) {
     break label$1;
    }
    label$5 : {
     label$6 : {
      if ($3 >>> 0 <= 127) {
       $0 = 1;
       $6 = HEAP32[$5 >> 2];
       if (($4 - $6 | 0) < 1) {
        break label$1;
       }
       HEAP32[$5 >> 2] = $6 + 1;
       HEAP8[$6 | 0] = $3;
       break label$6;
      }
      if ($3 >>> 0 <= 2047) {
       $0 = HEAP32[$5 >> 2];
       if (($4 - $0 | 0) < 2) {
        break label$2;
       }
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 6 | 192;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 & 63 | 128;
       break label$6;
      }
      if ($3 >>> 0 <= 55295) {
       $0 = HEAP32[$5 >> 2];
       if (($4 - $0 | 0) < 3) {
        break label$2;
       }
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 12 | 224;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 & 63 | 128;
       break label$6;
      }
      if ($3 >>> 0 <= 56319) {
       $0 = 1;
       if (($1 - $6 | 0) < 4) {
        break label$1;
       }
       $7 = HEAPU16[$6 + 2 >> 1];
       if (($7 & 64512) != 56320) {
        break label$5;
       }
       if (($4 - HEAP32[$5 >> 2] | 0) < 4) {
        break label$1;
       }
       $0 = $3 & 960;
       if (($7 & 1023 | ($3 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > 1114111) {
        break label$5;
       }
       HEAP32[$2 >> 2] = $6 + 2;
       $6 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $6 + 1;
       $0 = ($0 >>> 6) + 1 | 0;
       HEAP8[$6 | 0] = $0 >>> 2 | 240;
       $6 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $6 + 1;
       HEAP8[$6 | 0] = $0 << 4 & 48 | $3 >>> 2 & 15 | 128;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $7 >>> 6 & 15 | $3 << 4 & 48 | 128;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $7 & 63 | 128;
       break label$6;
      }
      if ($3 >>> 0 < 57344) {
       break label$1;
      }
      $0 = HEAP32[$5 >> 2];
      if (($4 - $0 | 0) < 3) {
       break label$2;
      }
      HEAP32[$5 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $3 >>> 12 | 224;
      $0 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
      $0 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $3 & 63 | 128;
     }
     $6 = HEAP32[$2 >> 2] + 2 | 0;
     HEAP32[$2 >> 2] = $6;
     continue;
    }
    break;
   }
   return 2;
  }
  return 1;
 }
 return $0;
}
function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = global$0 - 16 | 0;
 global$0 = $12;
 HEAP8[$12 + 15 | 0] = $0;
 label$1 : {
  label$2 : {
   if (($0 | 0) == ($5 | 0)) {
    if (!HEAPU8[$1 | 0]) {
     break label$2;
    }
    $0 = 0;
    HEAP8[$1 | 0] = 0;
    $1 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 46;
    if (HEAP8[$7 + 11 | 0] < 0) {
     $1 = HEAP32[$7 + 4 >> 2];
    } else {
     $1 = HEAPU8[$7 + 11 | 0];
    }
    if (!$1) {
     break label$1;
    }
    $1 = HEAP32[$9 >> 2];
    if (($1 - $8 | 0) > 159) {
     break label$1;
    }
    $2 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $2;
    break label$1;
   }
   if (HEAP8[$7 + 11 | 0] < 0) {
    $5 = HEAP32[$7 + 4 >> 2];
   } else {
    $5 = HEAPU8[$7 + 11 | 0];
   }
   if (!(!$5 | ($0 | 0) != ($6 | 0))) {
    if (!HEAPU8[$1 | 0]) {
     break label$2;
    }
    $0 = 0;
    $1 = HEAP32[$9 >> 2];
    if (($1 - $8 | 0) > 159) {
     break label$1;
    }
    $0 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $0;
    $0 = 0;
    HEAP32[$10 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $6 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($11, $11 + 32 | 0, $12 + 15 | 0) - $11 | 0;
   if (($6 | 0) > 31) {
    break label$1;
   }
   $5 = HEAPU8[$6 + 27632 | 0];
   $0 = $6 + -22 | 0;
   if ($0 >>> 0 <= 3) {
    label$10 : {
     switch ($0 - 2 | 0) {
     case 0:
     case 1:
      $1 = HEAP32[$4 >> 2];
      if (($1 | 0) != ($3 | 0)) {
       $0 = -1;
       if ((HEAPU8[$1 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
        break label$1;
       }
      }
      HEAP32[$4 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $5;
      $0 = 0;
      break label$1;
     default:
      break label$10;
     }
    }
    HEAP8[$2 | 0] = 80;
    $0 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $5;
    $0 = 0;
    break label$1;
   }
   $0 = HEAP8[$2 | 0];
   label$13 : {
    if (($0 | 0) != ($5 & 95)) {
     break label$13;
    }
    HEAP8[$2 | 0] = $0 | 128;
    if (!HEAPU8[$1 | 0]) {
     break label$13;
    }
    HEAP8[$1 | 0] = 0;
    if (HEAP8[$7 + 11 | 0] < 0) {
     $0 = HEAP32[$7 + 4 >> 2];
    } else {
     $0 = HEAPU8[$7 + 11 | 0];
    }
    if (!$0) {
     break label$13;
    }
    $0 = HEAP32[$9 >> 2];
    if (($0 - $8 | 0) > 159) {
     break label$13;
    }
    $1 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $0 + 4;
    HEAP32[$0 >> 2] = $1;
   }
   $0 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $5;
   $0 = 0;
   if (($6 | 0) > 21) {
    break label$1;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
   break label$1;
  }
  $0 = -1;
 }
 global$0 = $12 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 35572);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 35134);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 20 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 41880);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 41887);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 41897);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $4 = HEAPU8[$0 + 24 | 0] + -1 | 0;
 if ($4 >>> 0 <= 1) {
  $3 = $2;
  $6 = $2;
  label$7 : {
   if ($4 - 1) {
    $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 41907);
    break label$7;
   }
   $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 41910);
  }
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 if (HEAP32[$0 + 28 >> 2]) {
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $0 = HEAP32[$0 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if (HEAPU8[$0 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  }
 }
 global$0 = $2 + 112 | 0;
}
function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = global$0 - 16 | 0;
 global$0 = $12;
 HEAP32[$12 + 12 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (($0 | 0) == ($5 | 0)) {
    if (!HEAPU8[$1 | 0]) {
     break label$2;
    }
    $0 = 0;
    HEAP8[$1 | 0] = 0;
    $1 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 46;
    if (HEAP8[$7 + 11 | 0] < 0) {
     $1 = HEAP32[$7 + 4 >> 2];
    } else {
     $1 = HEAPU8[$7 + 11 | 0];
    }
    if (!$1) {
     break label$1;
    }
    $1 = HEAP32[$9 >> 2];
    if (($1 - $8 | 0) > 159) {
     break label$1;
    }
    $2 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $2;
    break label$1;
   }
   if (HEAP8[$7 + 11 | 0] < 0) {
    $5 = HEAP32[$7 + 4 >> 2];
   } else {
    $5 = HEAPU8[$7 + 11 | 0];
   }
   if (!(!$5 | ($0 | 0) != ($6 | 0))) {
    if (!HEAPU8[$1 | 0]) {
     break label$2;
    }
    $0 = 0;
    $1 = HEAP32[$9 >> 2];
    if (($1 - $8 | 0) > 159) {
     break label$1;
    }
    $0 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $0;
    $0 = 0;
    HEAP32[$10 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $5 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($11, $11 + 128 | 0, $12 + 12 | 0) - $11 | 0;
   if (($5 | 0) > 124) {
    break label$1;
   }
   $6 = HEAPU8[($5 >> 2) + 27632 | 0];
   $0 = __wasm_rotl_i32($5 + -88 | 0, 30);
   label$9 : {
    if ($0 >>> 0 <= 3) {
     label$11 : {
      switch ($0 - 2 | 0) {
      case 0:
      case 1:
       $1 = HEAP32[$4 >> 2];
       if (($1 | 0) != ($3 | 0)) {
        $0 = -1;
        if ((HEAPU8[$1 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
         break label$1;
        }
       }
       HEAP32[$4 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = $6;
       $0 = 0;
       break label$1;
      default:
       break label$11;
      }
     }
     HEAP8[$2 | 0] = 80;
     break label$9;
    }
    $0 = HEAP8[$2 | 0];
    if (($0 | 0) != ($6 & 95)) {
     break label$9;
    }
    HEAP8[$2 | 0] = $0 | 128;
    if (!HEAPU8[$1 | 0]) {
     break label$9;
    }
    HEAP8[$1 | 0] = 0;
    if (HEAP8[$7 + 11 | 0] < 0) {
     $0 = HEAP32[$7 + 4 >> 2];
    } else {
     $0 = HEAPU8[$7 + 11 | 0];
    }
    if (!$0) {
     break label$9;
    }
    $0 = HEAP32[$9 >> 2];
    if (($0 - $8 | 0) > 159) {
     break label$9;
    }
    $1 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $0 + 4;
    HEAP32[$0 >> 2] = $1;
   }
   $0 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $6;
   $0 = 0;
   if (($5 | 0) > 84) {
    break label$1;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
   break label$1;
  }
  $0 = -1;
 }
 global$0 = $12 + 16 | 0;
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 24 >> 2] = $1;
 label$1 : {
  if (!(HEAP32[$3 + 4 >> 2] & 1)) {
   HEAP32[$6 >> 2] = -1;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
   HEAP32[$6 + 24 >> 2] = $1;
   $0 = HEAP32[$6 >> 2];
   if ($0 >>> 0 <= 1) {
    if ($0 - 1) {
     HEAP8[$5 | 0] = 0;
     break label$1;
    }
    HEAP8[$5 | 0] = 1;
    break label$1;
   }
   HEAP8[$5 | 0] = 1;
   HEAP32[$4 >> 2] = 4;
   break label$1;
  }
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
  $0 = HEAP32[$6 >> 2];
  $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
  if (($1 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  }
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
  $1 = HEAP32[$6 >> 2];
  $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $3;
  if (($3 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($6, $0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6 | 12, $0);
  $3 = $6 + 24 | 0;
  HEAP8[$5 | 0] = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $7, $4, 1) | 0) == ($6 | 0);
  $1 = HEAP32[$6 + 24 >> 2];
  while (1) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $6 + 32 | 0;
 return $1 | 0;
}
function BuildDimension__BuildDimension_28_29($0) {
 BuildDimension__BuildPage__BuildPage_28_29($0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 2500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 5e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 7500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 1e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 12500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 15e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 17500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 2e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 22500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 25e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 27500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 3e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 32500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 35e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 37500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 4e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 42500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 45e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 47500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 5e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 52500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 55e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 57500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 6e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 62500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 65e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 67500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 7e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 72500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 75e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 77500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 8e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 82500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 85e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 87500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 9e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 92500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 95e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 97500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 1e5 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 102500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 105e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 107500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 11e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 112500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 115e3 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 117500 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 12e4 | 0);
 BuildDimension__BuildPage__BuildPage_28_29($0 + 122500 | 0);
}
function std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  label$2 : {
   $5 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   label$3 : {
    if ($5 - $2 >> 6 >>> 0 >= $1 >>> 0) {
     while (1) {
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAP32[$2 + 48 >> 2] = 0;
      HEAP32[$2 + 52 >> 2] = 0;
      HEAP32[$2 + 40 >> 2] = 0;
      HEAP32[$2 + 44 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      HEAP32[$2 + 24 >> 2] = 0;
      HEAP32[$2 + 28 >> 2] = 0;
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 20 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = 0;
      $2 = HEAP32[$0 + 4 >> 2] - -64 | 0;
      HEAP32[$0 + 4 >> 2] = $2;
      $1 = $1 + -1 | 0;
      if ($1) {
       continue;
      }
      break label$3;
     }
    }
    $6 = HEAP32[$0 >> 2];
    $7 = $2 - $6 >> 6;
    $4 = $7 + $1 | 0;
    if ($4 >>> 0 >= 67108864) {
     break label$2;
    }
    $5 = $5 - $6 | 0;
    $8 = $5 >> 5;
    $4 = $5 >> 6 >>> 0 < 33554431 ? $8 >>> 0 < $4 >>> 0 ? $4 : $8 : 67108863;
    if ($4) {
     if ($4 >>> 0 >= 67108864) {
      break label$1;
     }
     $3 = operator_20new_28unsigned_20long_29($4 << 6);
    }
    $5 = ($4 << 6) + $3 | 0;
    $3 = ($7 << 6) + $3 | 0;
    $4 = memset($3, 0, $1 << 6);
    while (1) {
     $4 = $4 - -64 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue;
     }
     break;
    }
    if (($2 | 0) != ($6 | 0)) {
     while (1) {
      $2 = $2 + -64 | 0;
      $7 = HEAP32[$2 + 4 >> 2];
      $3 = $3 + -64 | 0;
      HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$3 + 4 >> 2] = $7;
      $1 = HEAP32[$2 + 60 >> 2];
      HEAP32[$3 + 56 >> 2] = HEAP32[$2 + 56 >> 2];
      HEAP32[$3 + 60 >> 2] = $1;
      $1 = HEAP32[$2 + 52 >> 2];
      HEAP32[$3 + 48 >> 2] = HEAP32[$2 + 48 >> 2];
      HEAP32[$3 + 52 >> 2] = $1;
      $1 = HEAP32[$2 + 44 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$2 + 40 >> 2];
      HEAP32[$3 + 44 >> 2] = $1;
      $1 = HEAP32[$2 + 36 >> 2];
      HEAP32[$3 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
      HEAP32[$3 + 36 >> 2] = $1;
      $1 = HEAP32[$2 + 28 >> 2];
      HEAP32[$3 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
      HEAP32[$3 + 28 >> 2] = $1;
      $1 = HEAP32[$2 + 20 >> 2];
      HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$3 + 20 >> 2] = $1;
      $1 = HEAP32[$2 + 12 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 12 >> 2] = $1;
      if (($2 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
     $2 = HEAP32[$0 >> 2];
    }
    HEAP32[$0 >> 2] = $3;
    HEAP32[$0 + 8 >> 2] = $5;
    HEAP32[$0 + 4 >> 2] = $4;
    if (!$2) {
     break label$3;
    }
    dlfree($2);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2__enable_if__28__is_forward_iterator_PicType____value_29_20___20_28is_constructible_PicType_2c_20std____2__iterator_traits_PicType____reference___value_29_2c_20void___type_20std____2__vector_PicType_2c_20std____2__allocator_PicType__20___assign_PicType___28PicType__2c_20PicType__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = ($2 - $1 | 0) / 324 | 0;
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$0 >> 2];
 if ($6 >>> 0 <= ($4 - $5 | 0) / 324 >>> 0) {
  $7 = $0 + 4 | 0;
  $4 = (HEAP32[$7 >> 2] - $5 | 0) / 324 | 0;
  $3 = $6 >>> 0 > $4 >>> 0 ? Math_imul($4, 324) + $1 | 0 : $2;
  if (($3 | 0) != ($1 | 0)) {
   while (1) {
    $0 = memcpy($5, $1, 309);
    if (($0 | 0) != ($1 | 0)) {
     std____2__enable_if__28__is_forward_iterator_SlvCube__SlvPiece____value_29_20___20_28is_constructible_SlvCube__SlvPiece_2c_20std____2__iterator_traits_SlvCube__SlvPiece____reference___value_29_2c_20void___type_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20___assign_SlvCube__SlvPiece___28SlvCube__SlvPiece__2c_20SlvCube__SlvPiece__29($0 + 312 | 0, HEAP32[$1 + 312 >> 2], HEAP32[$1 + 316 >> 2]);
    }
    $5 = $0 + 324 | 0;
    $1 = $1 + 324 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  if ($6 >>> 0 > $4 >>> 0) {
   void_20std____2__allocator_traits_std____2__allocator_PicType__20_____construct_range_forward_PicType__2c_20PicType___28std____2__allocator_PicType___2c_20PicType__2c_20PicType__2c_20PicType___29($3, $2, $7);
   return;
  }
  $1 = HEAP32[$7 >> 2];
  if (($5 | 0) != ($1 | 0)) {
   while (1) {
    $0 = HEAP32[$1 + -12 >> 2];
    if ($0) {
     HEAP32[$1 + -8 >> 2] = $0;
     dlfree($0);
    }
    $1 = $1 + -324 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$7 >> 2] = $5;
  return;
 }
 if ($5) {
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = $5;
  label$10 : {
   if (($4 | 0) == ($5 | 0)) {
    break label$10;
   }
   while (1) {
    $3 = HEAP32[$4 + -12 >> 2];
    if ($3) {
     HEAP32[$4 + -8 >> 2] = $3;
     dlfree($3);
    }
    $4 = $4 + -324 | 0;
    if (($4 | 0) != ($5 | 0)) {
     continue;
    }
    break;
   }
   $3 = HEAP32[$0 >> 2];
  }
  HEAP32[$0 + 4 >> 2] = $5;
  dlfree($3);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $4 = 0;
 }
 label$13 : {
  if ($6 >>> 0 >= 13256072) {
   break label$13;
  }
  $5 = ($4 | 0) / 324 | 0;
  $3 = $5 << 1;
  $3 = $5 >>> 0 < 6628035 ? $3 >>> 0 < $6 >>> 0 ? $6 : $3 : 13256071;
  if ($3 >>> 0 >= 13256072) {
   break label$13;
  }
  $5 = Math_imul($3, 324);
  $4 = operator_20new_28unsigned_20long_29($5);
  HEAP32[$0 >> 2] = $4;
  $3 = $0 + 4 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $5 + $4;
  void_20std____2__allocator_traits_std____2__allocator_PicType__20_____construct_range_forward_PicType__2c_20PicType___28std____2__allocator_PicType___2c_20PicType__2c_20PicType__2c_20PicType___29($1, $2, $3);
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $7 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 $6 = $7;
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($8, $6);
 if (HEAP8[$8 + 11 | 0] < 0) {
  $6 = HEAP32[$8 + 4 >> 2];
 } else {
  $6 = HEAPU8[$8 + 11 | 0];
 }
 label$1 : {
  if (!$6) {
   FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 48 >> 2]]($11, $0, $2, $3) | 0;
   $6 = ($2 - $0 << 2) + $3 | 0;
   HEAP32[$5 >> 2] = $6;
   break label$1;
  }
  HEAP32[$5 >> 2] = $3;
  $10 = $0;
  $9 = HEAPU8[$10 | 0];
  $6 = $9 + -43 | 0;
  if (!($6 >>> 0 > 2 | !($6 - 1))) {
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 44 >> 2]]($11, $9 << 24 >> 24) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 4;
   HEAP32[$6 >> 2] = $9;
   $10 = $0 + 1 | 0;
  }
  if (!(HEAPU8[$10 | 0] != 48 | ($2 - $10 | 0) < 2 | (HEAPU8[$10 + 1 | 0] | 32) != 120)) {
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 44 >> 2]]($11, 48) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 4;
   HEAP32[$6 >> 2] = $9;
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 44 >> 2]]($11, HEAP8[$10 + 1 | 0]) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 4;
   HEAP32[$6 >> 2] = $9;
   $10 = $10 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($10, $2);
  $14 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7) | 0;
  $9 = 0;
  $6 = $10;
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($10 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2]);
    $6 = HEAP32[$5 >> 2];
   } else {
    if (HEAP8[$8 + 11 | 0] < 0) {
     $7 = HEAP32[$8 >> 2];
    } else {
     $7 = $8;
    }
    $13 = !HEAPU8[$7 + $9 | 0];
    if (HEAP8[$8 + 11 | 0] < 0) {
     $7 = HEAP32[$8 >> 2];
    } else {
     $7 = $8;
    }
    if (!($13 | HEAP8[$7 + $9 | 0] != ($12 | 0))) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 4;
     HEAP32[$7 >> 2] = $14;
     $7 = $9;
     if (HEAP8[$8 + 11 | 0] < 0) {
      $12 = HEAP32[$8 + 4 >> 2];
     } else {
      $12 = HEAPU8[$8 + 11 | 0];
     }
     $9 = ($7 >>> 0 < $12 + -1 >>> 0) + $9 | 0;
     $12 = 0;
    }
    $13 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 44 >> 2]]($11, HEAP8[$6 | 0]) | 0;
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 4;
    HEAP32[$7 >> 2] = $13;
    $6 = $6 + 1 | 0;
    $12 = $12 + 1 | 0;
    continue;
   }
   break;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
 global$0 = $8 + 16 | 0;
}
function LineAdder__addPair_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 $3 = ($2 | 0) < ($1 | 0);
 $9 = $3 ? $1 : $2;
 $6 = $3 ? $2 : $1;
 $5 = $0 + 24 | 0;
 $3 = HEAP32[$5 >> 2];
 label$1 : {
  label$2 : {
   if (!$3) {
    break label$2;
   }
   $4 = $5;
   while (1) {
    $10 = $4;
    $4 = HEAP32[$3 + 16 >> 2];
    $8 = ($4 | 0) == ($6 | 0) ? HEAP32[$3 + 20 >> 2] < ($9 | 0) : ($4 | 0) < ($6 | 0);
    $4 = $8 ? $10 : $3;
    $3 = HEAP32[($8 ? 4 : 0) + $3 >> 2];
    if ($3) {
     continue;
    }
    break;
   }
   if (($4 | 0) == ($5 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$4 + 16 >> 2];
   if (((($3 | 0) == ($6 | 0) ? ($9 | 0) < HEAP32[$4 + 20 >> 2] : ($6 | 0) < ($3 | 0)) | 0) != 1) {
    break label$1;
   }
  }
  $3 = HEAP32[$0 >> 2];
  HEAP16[$7 + 14 >> 1] = $1;
  $4 = HEAP32[$3 + 72 >> 2];
  $8 = HEAP32[$3 + 76 >> 2];
  label$4 : {
   if ($4 >>> 0 < $8 >>> 0) {
    HEAP16[$4 >> 1] = $1;
    $4 = $4 + 2 | 0;
    HEAP32[$3 + 72 >> 2] = $4;
    break label$4;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($3 + 68 | 0, $7 + 14 | 0);
   $3 = HEAP32[$0 >> 2];
   $8 = HEAP32[$3 + 76 >> 2];
   $4 = HEAP32[$3 + 72 >> 2];
  }
  HEAP16[$7 + 12 >> 1] = $2;
  label$6 : {
   if ($4 >>> 0 < $8 >>> 0) {
    HEAP16[$4 >> 1] = $2;
    HEAP32[$3 + 72 >> 2] = $4 + 2;
    break label$6;
   }
   void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($3 + 68 | 0, $7 + 12 | 0);
  }
  $3 = HEAP32[$5 >> 2];
  label$8 : {
   if ($3) {
    $5 = $0 + 24 | 0;
    while (1) {
     $1 = HEAP32[$3 + 16 >> 2];
     $2 = ($1 | 0) == ($6 | 0);
     $4 = HEAP32[$3 + 20 >> 2];
     label$11 : {
      if ((($2 ? ($9 | 0) < ($4 | 0) : ($6 | 0) < ($1 | 0)) | 0) == 1) {
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$11;
       }
       $5 = $3;
       break label$8;
      }
      if ((($2 ? ($4 | 0) < ($9 | 0) : ($1 | 0) < ($6 | 0)) | 0) != 1) {
       break label$8;
      }
      $5 = $3 + 4 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      if (!$4) {
       break label$8;
      }
      $3 = $5;
     }
     $5 = $3;
     $3 = $4;
     continue;
    }
   }
   $3 = $5;
  }
  if (HEAP32[$5 >> 2]) {
   break label$1;
  }
  $4 = operator_20new_28unsigned_20long_29(24);
  HEAP32[$4 + 8 >> 2] = $3;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = $6;
  HEAP32[$4 + 20 >> 2] = $9;
  HEAP32[$5 >> 2] = $4;
  $1 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2];
  if ($1) {
   HEAP32[$0 + 20 >> 2] = $1;
   $4 = HEAP32[$5 >> 2];
  }
  void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$0 + 24 >> 2], $4);
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
 }
 global$0 = $7 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 35572);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 16 | 0, $1);
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 35134);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = HEAP32[$0 + 28 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 41880);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 41887);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 41897);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $4 = HEAPU8[$0 + 32 | 0] + -1 | 0;
 if ($4 >>> 0 <= 1) {
  $3 = $2;
  $6 = $2;
  label$8 : {
   if ($4 - 1) {
    $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 41907);
    break label$8;
   }
   $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 41910);
  }
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 24 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if (HEAPU8[$0 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  }
 }
 global$0 = $2 + 112 | 0;
}
function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $7 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 $6 = $7;
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($8, $6);
 if (HEAP8[$8 + 11 | 0] < 0) {
  $6 = HEAP32[$8 + 4 >> 2];
 } else {
  $6 = HEAPU8[$8 + 11 | 0];
 }
 label$1 : {
  if (!$6) {
   FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 32 >> 2]]($11, $0, $2, $3) | 0;
   $6 = ($2 - $0 | 0) + $3 | 0;
   HEAP32[$5 >> 2] = $6;
   break label$1;
  }
  HEAP32[$5 >> 2] = $3;
  $10 = $0;
  $9 = HEAPU8[$10 | 0];
  $6 = $9 + -43 | 0;
  if (!($6 >>> 0 > 2 | !($6 - 1))) {
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 28 >> 2]]($11, $9 << 24 >> 24) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 1;
   HEAP8[$6 | 0] = $9;
   $10 = $0 + 1 | 0;
  }
  if (!(HEAPU8[$10 | 0] != 48 | ($2 - $10 | 0) < 2 | (HEAPU8[$10 + 1 | 0] | 32) != 120)) {
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 28 >> 2]]($11, 48) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 1;
   HEAP8[$6 | 0] = $9;
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 28 >> 2]]($11, HEAP8[$10 + 1 | 0]) | 0;
   $6 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $6 + 1;
   HEAP8[$6 | 0] = $9;
   $10 = $10 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($10, $2);
  $14 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7) | 0;
  $9 = 0;
  $6 = $10;
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($10 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2]);
    $6 = HEAP32[$5 >> 2];
   } else {
    if (HEAP8[$8 + 11 | 0] < 0) {
     $7 = HEAP32[$8 >> 2];
    } else {
     $7 = $8;
    }
    $13 = !HEAPU8[$7 + $9 | 0];
    if (HEAP8[$8 + 11 | 0] < 0) {
     $7 = HEAP32[$8 >> 2];
    } else {
     $7 = $8;
    }
    if (!($13 | HEAP8[$7 + $9 | 0] != ($12 | 0))) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $14;
     $7 = $9;
     if (HEAP8[$8 + 11 | 0] < 0) {
      $12 = HEAP32[$8 + 4 >> 2];
     } else {
      $12 = HEAPU8[$8 + 11 | 0];
     }
     $9 = ($7 >>> 0 < $12 + -1 >>> 0) + $9 | 0;
     $12 = 0;
    }
    $13 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 28 >> 2]]($11, HEAP8[$6 | 0]) | 0;
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $13;
    $6 = $6 + 1 | 0;
    $12 = $12 + 1 | 0;
    continue;
   }
   break;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
 global$0 = $8 + 16 | 0;
}
function Cube__Cube_28Shape_20const__2c_20PicsSet_20const__2c_20EngineConf_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = 1;
 HEAP32[$0 + 28 >> 2] = 1;
 HEAP8[$0 + 20 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = 3;
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = 2e3;
 HEAP32[$0 + 8 >> 2] = 8;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP16[$0 >> 1] = 256;
 $4 = HEAP32[$1 >> 2];
 HEAP32[$0 + 40 >> 2] = $4;
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 44 >> 2] = $5;
 $1 = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = Math_imul($4, $5);
 HEAP32[$0 + 48 >> 2] = $1;
 UsedPieces__UsedPieces_28PicsSet_20const__29($0 + 72 | 0, $2);
 if ($3) {
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  $1 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  $1 = HEAP32[$3 + 20 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  $1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
 }
 $1 = Math_imul(HEAP32[$0 + 48 >> 2], Math_imul(HEAP32[$0 + 44 >> 2], HEAP32[$0 + 40 >> 2]));
 $4 = $1 << 2;
 $3 = operator_20new_28unsigned_20long_29(($1 | 0) != ($1 & 1073741823) ? -1 : $4);
 if ($1) {
  memset($3, 0, $4);
 }
 HEAP32[$0 + 56 >> 2] = $3;
 $3 = HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2];
 $1 = HEAP32[$0 - -64 >> 2];
 $5 = HEAP32[$0 + 60 >> 2];
 $4 = ($1 - $5 | 0) / 52 | 0;
 label$3 : {
  if ($3 >>> 0 > $4 >>> 0) {
   std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20_____append_28unsigned_20long_29($0 + 60 | 0, $3 - $4 | 0);
   break label$3;
  }
  if ($3 >>> 0 >= $4 >>> 0) {
   break label$3;
  }
  $3 = $5 + Math_imul($3, 52) | 0;
  if (($3 | 0) != ($1 | 0)) {
   while (1) {
    $4 = HEAP32[$1 + -12 >> 2];
    if ($4) {
     HEAP32[$1 + -8 >> 2] = $4;
     dlfree($4);
    }
    $4 = HEAP32[$1 + -32 >> 2];
    if ($4) {
     dlfree($4);
    }
    $4 = $1 + -52 | 0;
    $1 = $4;
    if (($3 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 - -64 >> 2] = $3;
 }
 if (!(!$2 | HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2] < 1)) {
  $2 = 0;
  while (1) {
   $3 = HEAP32[HEAP32[$0 + 32 >> 2] + 36 >> 2];
   $1 = HEAP32[$0 + 60 >> 2] + Math_imul($2, 52) | 0;
   $5 = $1;
   $4 = HEAP32[$1 + 20 >> 2];
   if ($4) {
    dlfree($4);
   }
   $4 = ($3 + 31 | 0) / 32 | 0;
   HEAP32[$1 + 12 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $3;
   $6 = $5;
   $5 = $4 << 2;
   $4 = operator_20new_28unsigned_20long_29(($4 | 0) != ($4 & 1073741823) ? -1 : $5);
   HEAP32[$6 + 20 >> 2] = $4;
   $4 = memset($4, 0, $5);
   HEAP32[$1 + 8 >> 2] = 0;
   if ($3) {
    memset($4, 0, $5);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[HEAP32[$0 + 36 >> 2] + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 Cube__clear_28int_29($0);
 return $0;
}
function CubeDocBase__transferShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 $2 = HEAP32[$0 + 116 >> 2];
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = HEAP32[$0 + 120 >> 2];
  if ($3) {
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   $2 = HEAP32[$0 + 116 >> 2];
  }
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = $1 | 4;
  if (HEAP32[$2 + 12 >> 2] >= 1) {
   while (1) {
    $6 = HEAP32[$2 + 76 >> 2];
    $4 = HEAP32[$2 + 28 >> 2] + Math_imul($5, 188) | 0;
    $7 = HEAP32[$4 + 4 >> 2];
    $8 = HEAP32[$2 + 84 >> 2];
    $9 = HEAP32[$4 + 8 >> 2];
    $10 = HEAP32[$4 + 12 >> 2];
    $11 = HEAP32[$4 >> 2];
    $2 = HEAP32[$2 + 68 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$1 + 28 >> 2] = $11;
    HEAP32[$1 + 24 >> 2] = $2 + $10;
    HEAP32[$1 + 20 >> 2] = $8 + $9;
    HEAP32[$1 + 16 >> 2] = $6 + $7;
    std____2__pair_std____2____tree_iterator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20_____emplace_unique_key_args_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__28std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20const__2c_20std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing____29($1 + 40 | 0, $1, $1 + 16 | 0, $1 + 16 | 0);
    $5 = $5 + 1 | 0;
    $2 = HEAP32[$0 + 116 >> 2];
    if (($5 | 0) < HEAP32[$2 + 12 >> 2]) {
     continue;
    }
    break;
   }
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 0, $1, 0)) {
   Solutions__toNewShape_28Shape_20const__29(HEAP32[$0 + 124 >> 2], HEAP32[$0 + 116 >> 2]);
  }
  std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20___destroy_28std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____29($1, HEAP32[$1 + 4 >> 2]);
  if (!$3) {
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = $0 + -1;
  if ($0) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  std____2____shared_weak_count____release_weak_28_29($3);
 }
 global$0 = $1 + 48 | 0;
}
function MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (!(!!(HEAPU8[48004] != 0) | HEAP8[48004] & 1)) {
  HEAP8[47993] = 0;
  HEAP8[47994] = 0;
  HEAP8[47995] = 0;
  HEAP8[47996] = 0;
  HEAP8[47997] = 0;
  HEAP8[47998] = 0;
  HEAP8[47999] = 0;
  HEAP8[48e3] = 0;
  HEAP32[11997] = 0;
  HEAP32[11998] = 0;
  HEAP32[11995] = 0;
  HEAP32[11996] = 0;
  HEAP32[11993] = 0;
  HEAP32[11994] = 0;
  HEAP32[11989] = HEAP32[11989] + 1;
  HEAP32[12001] = 0;
  HEAP32[12001] = HEAP32[12001] | 1;
 }
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[11993] = HEAP32[$1 >> 2];
 HEAP32[11994] = $2;
 HEAP32[11995] = HEAP32[$1 + 8 >> 2];
 HEAP32[$3 >> 2] = 47972;
 std____2__pair_std____2____hash_iterator_std____2____hash_node_MyObject__MyPointWrapper_2c_20void_____2c_20bool__20std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20_____emplace_unique_key_args_MyObject__MyPointWrapper_2c_20MyObject__MyPointWrapper__28MyObject__MyPointWrapper_20const__2c_20MyObject__MyPointWrapper___29($3 + 8 | 0, $0 + 68 | 0, $3, $3);
 $4 = HEAP32[$3 + 8 >> 2];
 $2 = HEAP32[$4 + 8 >> 2];
 if (($2 | 0) == 47972) {
  $0 = HEAP32[$0 + 64 >> 2];
  label$3 : {
   if ($0) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    $1 = HEAP32[$0 + 8 >> 2];
    if (($1 | 0) < HEAP32[$0 + 4 >> 2]) {
     HEAP32[$0 + 8 >> 2] = $1 + 1;
     $1 = HEAP32[$0 >> 2] + ($1 << 5) | 0;
     break label$3;
    }
    $1 = operator_20new_28unsigned_20long_29(32);
    $0 = $1;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP8[$0 + 21 | 0] = 0;
    HEAP8[$0 + 22 | 0] = 0;
    HEAP8[$0 + 23 | 0] = 0;
    HEAP8[$0 + 24 | 0] = 0;
    HEAP8[$0 + 25 | 0] = 0;
    HEAP8[$0 + 26 | 0] = 0;
    HEAP8[$0 + 27 | 0] = 0;
    HEAP8[$0 + 28 | 0] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[11989] = HEAP32[11989] + 1;
    break label$3;
   }
   $1 = operator_20new_28unsigned_20long_29(32);
   $0 = $1;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP8[$0 + 21 | 0] = 0;
   HEAP8[$0 + 22 | 0] = 0;
   HEAP8[$0 + 23 | 0] = 0;
   HEAP8[$0 + 24 | 0] = 0;
   HEAP8[$0 + 25 | 0] = 0;
   HEAP8[$0 + 26 | 0] = 0;
   HEAP8[$0 + 27 | 0] = 0;
   HEAP8[$0 + 28 | 0] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[11989] = HEAP32[11989] + 1;
  }
  HEAP32[$4 + 8 >> 2] = $1;
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP8[$1 + 28 | 0] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = $0;
  $2 = HEAP32[$4 + 8 >> 2];
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 12 | 0)) {
    break label$1;
   }
   $3 = HEAP32[$1 + 12 >> 2] + 1 | 0;
   HEAP32[$1 + 12 >> 2] = $3;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
  }
  if (HEAPU8[$0 + 362 | 0]) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 34999);
   break label$1;
  }
  if (HEAPU8[$0 + 361 | 0]) {
   $2 = $1 + 12 | 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$2 >> 2]);
   HEAP32[$1 + 8 >> 2] = $2;
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 332 | 0, $1 + 8 | 0);
   break label$1;
  }
  $0 = $0 + 288 | 0;
  if ($3 >>> 0 >= HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2 >>> 0) {
   break label$1;
  }
  $2 = HEAP32[HEAP32[$0 >> 2] + ($3 << 2) >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$9 : {
         label$11 : {
          $4 = $1;
          if ($4) {
           $3 = $2;
           if (!$3) {
            break label$11;
           }
           break label$9;
          }
          $1 = $0;
          $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
          legalfunc$wasm2js_scratch_store_i64($1 - Math_imul($0, $2) | 0, 0);
          i64toi32_i32$HIGH_BITS = 0;
          return $0;
         }
         if (!$0) {
          break label$7;
         }
         break label$6;
        }
        $5 = $3 + -1 | 0;
        if (!($5 & $3)) {
         break label$5;
        }
        $8 = (Math_clz32($3) + 33 | 0) - Math_clz32($4) | 0;
        $7 = 0 - $8 | 0;
        break label$3;
       }
       $0 = ($4 >>> 0) / 0 | 0;
       legalfunc$wasm2js_scratch_store_i64(0, $4 - Math_imul($0, 0) | 0);
       i64toi32_i32$HIGH_BITS = 0;
       return $0;
      }
      $3 = 32 - Math_clz32($4) | 0;
      if ($3 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     legalfunc$wasm2js_scratch_store_i64($0 & $5, 0);
     if (($3 | 0) == 1) {
      break label$1;
     }
     if ($3) {
      $3 = 31 - Math_clz32($3 + -1 ^ $3) | 0;
     } else {
      $3 = 32;
     }
     $2 = $3 & 31;
     if (32 <= ($3 & 63) >>> 0) {
      $3 = 0;
      $0 = $1 >>> $2;
     } else {
      $3 = $1 >>> $2;
      $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
     }
     i64toi32_i32$HIGH_BITS = $3;
     return $0;
    }
    $8 = $3 + 1 | 0;
    $7 = 63 - $3 | 0;
   }
   $5 = $0;
   $3 = $8 & 63;
   $6 = $3 & 31;
   if (32 <= $3 >>> 0) {
    $3 = 0;
    $6 = $4 >>> $6;
   } else {
    $3 = $4 >>> $6;
    $6 = ((1 << $6) - 1 & $4) << 32 - $6 | $5 >>> $6;
   }
   $4 = $3;
   $3 = $7 & 63;
   $5 = $3 & 31;
   if (32 <= $3 >>> 0) {
    $3 = $0 << $5;
    $0 = 0;
   } else {
    $3 = (1 << $5) - 1 & $0 >>> 32 - $5 | $1 << $5;
    $0 = $0 << $5;
   }
   $1 = $3;
   if ($8) {
    $3 = -1;
    $5 = $2 + -1 | 0;
    if ($5 >>> 0 < 4294967295) {
     $3 = 0;
    }
    while (1) {
     $7 = $6 << 1 | $1 >>> 31;
     $9 = $7;
     $4 = $4 << 1 | $6 >>> 31;
     $7 = $3 - ($4 + ($5 >>> 0 < $7 >>> 0) | 0) >> 31;
     $10 = $2 & $7;
     $6 = $9 - $10 | 0;
     $4 = $4 - ($9 >>> 0 < $10 >>> 0) | 0;
     $1 = $1 << 1 | $0 >>> 31;
     $0 = $11 | $0 << 1;
     $9 = $7 & 1;
     $11 = $9;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   legalfunc$wasm2js_scratch_store_i64($6, $4);
   i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
   return $9 | $0 << 1;
  }
  legalfunc$wasm2js_scratch_store_i64($0, $1);
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}
function __embind_register_native_and_builtin_types() {
 _embind_register_void(44392, 44768);
 _embind_register_bool(44404, 44773, 1, 1, 0);
 void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29();
 _embind_register_std_string(3704, 44879);
 _embind_register_std_string(45592, 44891);
 _embind_register_std_wstring(45680, 4, 44924);
 _embind_register_emval(3900, 44937);
 void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(44983);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(45020);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(45059);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(45090);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(45130);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(45159);
 void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(45266);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(45298);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(45331);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(45364);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(45398);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(45431);
 void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 104)) {
   $2 = 1;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
   if (HEAP32[$1 + 8 >> 2] == HEAP32[$1 + 12 >> 2]) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
   break label$1;
  }
  $2 = 1;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
  if (HEAP32[$1 + 8 >> 2] == HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1, $0, 1);
  if (HEAP32[$1 >> 2] == HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function SlerpProgress__progress_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0;
 $12 = global$0 - 80 | 0;
 global$0 = $12;
 $1 = Math_fround(HEAPF32[$0 + 4 >> 2] + Math_fround($1 / HEAPF32[$0 + 8 >> 2]));
 $14 = $1 >= Math_fround(1);
 $1 = $14 ? Math_fround(1) : $1;
 HEAPF32[$0 + 4 >> 2] = $1;
 Quaternion__slerp_28Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($12 - -64 | 0, $0 + 12 | 0, $0 + 28 | 0, $1);
 $2 = $12;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 1065353216;
 $9 = HEAPF32[$2 + 68 >> 2];
 $13 = +Math_fround($9 * $9);
 $10 = HEAPF32[$2 + 72 >> 2];
 $6 = +Math_fround($10 * $10);
 $11 = HEAPF32[$2 + 76 >> 2];
 $7 = +Math_fround($11 * $11);
 $1 = HEAPF32[$2 + 64 >> 2];
 $3 = +Math_fround($1 * $1);
 $8 = 1 / ($13 + $6 + $7 + $3);
 HEAPF32[$2 + 40 >> 2] = (-$13 - $6 + $7 + $3) * $8;
 HEAPF32[$2 + 20 >> 2] = ($6 - $13 - $7 + $3) * $8;
 HEAPF32[$2 >> 2] = ($13 - $6 - $7 + $3) * $8;
 $6 = +Math_fround($9 * $10);
 $7 = +Math_fround($1 * $11);
 $3 = $6 + $7;
 HEAPF32[$2 + 16 >> 2] = ($3 + $3) * $8;
 $3 = $6 - $7;
 HEAPF32[$2 + 4 >> 2] = ($3 + $3) * $8;
 $6 = +Math_fround($9 * $11);
 $7 = +Math_fround($1 * $10);
 $3 = $6 - $7;
 HEAPF32[$2 + 32 >> 2] = ($3 + $3) * $8;
 $3 = $7 + $6;
 HEAPF32[$2 + 8 >> 2] = ($3 + $3) * $8;
 $6 = +Math_fround($1 * $9);
 $7 = +Math_fround($10 * $11);
 $3 = $6 + $7;
 HEAPF32[$2 + 36 >> 2] = ($3 + $3) * $8;
 $3 = $7 - $6;
 HEAPF32[$2 + 24 >> 2] = ($3 + $3) * $8;
 $5 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$0 + 44 >> 2];
 HEAP32[$4 + 108 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 112 >> 2] = $5;
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$4 + 116 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$4 + 120 >> 2] = $5;
 $5 = HEAP32[$2 + 20 >> 2];
 HEAP32[$4 + 124 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$4 + 128 >> 2] = $5;
 $5 = HEAP32[$2 + 28 >> 2];
 HEAP32[$4 + 132 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$4 + 136 >> 2] = $5;
 $5 = HEAP32[$2 + 36 >> 2];
 HEAP32[$4 + 140 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$4 + 144 >> 2] = $5;
 $5 = HEAP32[$2 + 44 >> 2];
 HEAP32[$4 + 148 >> 2] = HEAP32[$2 + 40 >> 2];
 HEAP32[$4 + 152 >> 2] = $5;
 $5 = HEAP32[$2 + 52 >> 2];
 HEAP32[$4 + 156 >> 2] = HEAP32[$2 + 48 >> 2];
 HEAP32[$4 + 160 >> 2] = $5;
 $5 = HEAP32[$2 + 60 >> 2];
 HEAP32[$4 + 164 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$4 + 168 >> 2] = $5;
 $2 = 1;
 global$0 = $12 + 80 | 0;
 if (!!$14) {
  HEAP8[HEAP32[$0 + 44 >> 2] + 360 | 0] = 0;
  $2 = 0;
 }
 return $2 | 0;
}
function SlvPainter__exportPieceToObj_28ObjExport__2c_20int_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 12 >> 2];
 $6 = HEAP32[$4 >> 2] + ($2 << 3) | 0;
 $0 = HEAP32[$6 + 4 >> 2];
 $7 = HEAP32[HEAP32[$4 + 52 >> 2] + 28 >> 2];
 $6 = HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[$6 >> 2], 652) | 0;
 $4 = HEAP32[$6 + 336 >> 2];
 label$1 : {
  if (($4 | 0) <= 3) {
   $5 = (($0 + $4 | 0) + 4 | 0) % 4 | 0;
   if (($0 | 0) <= 3) {
    break label$1;
   }
   $5 = (($0 - $4 | 0) % 4 | 0) + 4 | 0;
   break label$1;
  }
  $5 = (($0 + $4 | 0) % 4 | 0) + 4 | 0;
  if (($0 | 0) <= 3) {
   break label$1;
  }
  $5 = (($0 - $4 | 0) + 4 | 0) % 4 | 0;
 }
 $0 = $5;
 $2 = $7 + Math_imul($2, 188) | 0;
 $4 = HEAP32[$2 + 12 >> 2];
 $7 = HEAP32[$2 + 8 >> 2];
 HEAPF32[$3 + 64 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 16 >> 2] = 1065353216;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 1065353216;
 HEAP32[$3 + 76 >> 2] = 1065353216;
 HEAP32[$3 + 56 >> 2] = 1065353216;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAPF32[$3 + 68 >> 2] = $7 | 0;
 HEAPF32[$3 + 72 >> 2] = $4 | 0;
 $2 = HEAP32[$2 >> 2] + -1 | 0;
 label$5 : {
  if ($2 >>> 0 > 1) {
   break label$5;
  }
  if (!($2 - 1)) {
   Mat4__translate_28float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(0), Math_fround(0), Math_fround(1));
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
   break label$5;
  }
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(90), Math_fround(0), Math_fround(0), Math_fround(1));
 }
 Mat4__translate_28float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(.5), Math_fround(2.5), Math_fround(2.5));
 Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(Math_imul($0, -90) | 0), Math_fround(1), Math_fround(0), Math_fround(0));
 if (($0 | 0) >= 4) {
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(180), Math_fround(0), Math_fround(0), Math_fround(1));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(90), Math_fround(1), Math_fround(0), Math_fround(0));
 }
 Mat4__translate_28float_2c_20float_2c_20float_29($3 + 16 | 0, Math_fround(-.5), Math_fround(-2.5), Math_fround(-2.5));
 HEAP32[$3 + 8 >> 2] = $6;
 PicPainter__exportToObj_28ObjExport__2c_20Mat4_20const__29_20const($3 + 8 | 0, $1, $3 + 16 | 0);
 global$0 = $3 + 80 | 0;
}
function ModelControlBase__initialized_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 ShaderProgram__init_28ProgCompileConf_20const__29($0 + 416 | 0);
 $2 = $0 + 24 | 0;
 ShaderProgram__init_28ProgCompileConf_20const__29($2);
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $1 = HEAP32[11869];
  HEAP32[11869] = $1 + 1;
  if (!HEAPU8[$0 + 68 | 0] | $1) {
   break label$1;
  }
  glUseProgram(HEAP32[$0 + 28 >> 2]);
  HEAP32[11870] = $2;
 }
 HEAP32[$3 + 8 >> 2] = 1148846080;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $2 = HEAP32[$0 + 320 >> 2];
 if (($2 | 0) != -1) {
  glUniform3fv($2 | 0, 1, $3 | 0);
 }
 $2 = HEAP32[11869] + -1 | 0;
 HEAP32[11869] = $2;
 if (!$2) {
  glUseProgram(0);
  HEAP32[11870] = 0;
 }
 BuildControlBase__initialized_28_29($0 + 700 | 0);
 if (HEAPU8[$0 + 1996 | 0]) {
  $2 = operator_20new_28unsigned_20long_29(204);
  $1 = memset($2, 0, 115);
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP32[$1 + 116 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 196 >> 2] = 34963;
  HEAP32[$1 + 200 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP32[$1 + 192 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 34962;
  HEAP32[$1 + 172 >> 2] = 34962;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 156 >> 2] = 0;
  HEAP32[$1 + 160 >> 2] = 34962;
  HEAP32[$1 + 148 >> 2] = 34962;
  HEAP32[$1 + 152 >> 2] = 0;
  HEAP32[$1 + 140 >> 2] = 0;
  HEAP32[$1 + 144 >> 2] = 0;
  HEAP32[$1 + 132 >> 2] = 0;
  HEAP32[$1 + 136 >> 2] = 34962;
  $4 = HEAP32[$0 + 612 >> 2];
  HEAP32[$0 + 612 >> 2] = $1;
  if ($4) {
   dlfree(Mesh___Mesh_28_29($4));
   $2 = HEAP32[$0 + 612 >> 2];
  }
  Mesh__load_28char_20const__29($2, 6020);
  HEAP8[HEAP32[$0 + 612 >> 2] + 112 | 0] = 1;
  $2 = operator_20new_28unsigned_20long_29(204);
  $1 = memset($2, 0, 115);
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP32[$1 + 116 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 196 >> 2] = 34963;
  HEAP32[$1 + 200 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP32[$1 + 192 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 34962;
  HEAP32[$1 + 172 >> 2] = 34962;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 156 >> 2] = 0;
  HEAP32[$1 + 160 >> 2] = 34962;
  HEAP32[$1 + 148 >> 2] = 34962;
  HEAP32[$1 + 152 >> 2] = 0;
  HEAP32[$1 + 140 >> 2] = 0;
  HEAP32[$1 + 144 >> 2] = 0;
  HEAP32[$1 + 132 >> 2] = 0;
  HEAP32[$1 + 136 >> 2] = 34962;
  $4 = HEAP32[$0 + 616 >> 2];
  HEAP32[$0 + 616 >> 2] = $1;
  if ($4) {
   dlfree(Mesh___Mesh_28_29($4));
   $2 = HEAP32[$0 + 616 >> 2];
  }
  Mesh__load_28char_20const__29($2, 6031);
  HEAP8[HEAP32[$0 + 616 >> 2] + 112 | 0] = 1;
 }
 global$0 = $3 + 16 | 0;
}
function scanexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 label$2 : {
  if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $3 + 1;
   $3 = HEAPU8[$3 | 0];
   break label$2;
  }
  $3 = __shgetc($0);
 }
 $2 = $3 + -43 | 0;
 label$1 : {
  if (!($2 - 1 | 0 ? $2 >>> 0 <= 2 : 0)) {
   $2 = $3 + -48 | 0;
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  label$5 : {
   if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $2 + 1;
    $2 = HEAPU8[$2 | 0];
    break label$5;
   }
   $2 = __shgetc($0);
  }
  $5 = ($3 | 0) == 45;
  $3 = $2;
  $2 = $2 + -48 | 0;
  if (!(!HEAP32[$0 + 104 >> 2] | (!$1 | $2 >>> 0 < 10))) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  }
 }
 label$8 : {
  if ($2 >>> 0 < 10) {
   $2 = 0;
   while (1) {
    $2 = Math_imul($2, 10) + $3 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    label$11 : {
     if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $1 + 1;
      $3 = HEAPU8[$1 | 0];
      break label$11;
     }
     $3 = __shgetc($0);
    }
    $4 = $3 + -48 | 0;
    $2 = $2 + -48 | 0;
    if (($2 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
     continue;
    }
    break;
   }
   $1 = $2;
   $2 = $2 >> 31;
   label$13 : {
    if ($4 >>> 0 >= 10) {
     break label$13;
    }
    while (1) {
     $2 = __wasm_i64_mul($1, $2, 10, 0);
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $2 + $3 | 0;
     if ($3 >>> 0 < $2 >>> 0) {
      $1 = $1 + 1 | 0;
     }
     $4 = $3;
     $3 = HEAP32[$0 + 4 >> 2];
     label$15 : {
      if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $3 + 1;
       $3 = HEAPU8[$3 | 0];
       break label$15;
      }
      $3 = __shgetc($0);
     }
     $2 = $1 + -1 | 0;
     $1 = $4 + -48 | 0;
     if ($1 >>> 0 < 4294967248) {
      $2 = $2 + 1 | 0;
     }
     $4 = $3 + -48 | 0;
     if ($4 >>> 0 > 9) {
      break label$13;
     }
     if (($2 | 0) < 21474836 ? 1 : ($2 | 0) <= 21474836 ? $1 >>> 0 >= 2061584302 ? 0 : 1 : 0) {
      continue;
     }
     break;
    }
   }
   if ($4 >>> 0 < 10) {
    while (1) {
     $3 = HEAP32[$0 + 4 >> 2];
     label$19 : {
      if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $3 + 1;
       $3 = HEAPU8[$3 | 0];
       break label$19;
      }
      $3 = __shgetc($0);
     }
     if ($3 + -48 >>> 0 < 10) {
      continue;
     }
     break;
    }
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   }
   $0 = $1;
   $1 = $5 ? 0 - $0 | 0 : $0;
   $2 = $5 ? 0 - ($2 + (0 < $0 >>> 0) | 0) | 0 : $2;
   break label$8;
  }
  $1 = 0;
  $2 = -2147483648;
  if (!HEAP32[$0 + 104 >> 2]) {
   break label$8;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 i64toi32_i32$HIGH_BITS = $2;
 return $1;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP8[$0 | 0] = 0;
 $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0;
 label$1 : {
  if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 16 >> 2]) {
   if (HEAP32[$2 + 72 >> 2]) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]);
   }
   label$4 : {
    if (!(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 4 >> 2] & 4096)) {
     break label$4;
    }
    $2 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 28 >> 2];
    HEAP32[$3 + 24 >> 2] = $2;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    $6 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($3 + 24 | 0);
    $2 = HEAP32[$3 + 24 >> 2];
    $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
    HEAP32[$2 + 4 >> 2] = $4;
    if (($4 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
    }
    $2 = $3 + 16 | 0;
    HEAP32[$2 >> 2] = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 24 >> 2];
    $4 = $3 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    while (1) {
     label$8 : {
      if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($2, $4)) {
       break label$8;
      }
      $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($2);
      if (($5 | 0) >= 0) {
       $5 = (HEAPU16[HEAP32[$6 + 8 >> 2] + (($5 & 255) << 1) >> 1] & 8192) != 0;
      } else {
       $5 = 0;
      }
      if (!$5) {
       break label$8;
      }
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($2);
      continue;
     }
     break;
    }
    if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($2, $4)) {
     break label$4;
    }
    $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0;
    HEAP32[$2 + 16 >> 2] = !HEAP32[$2 + 24 >> 2] | (HEAP32[$2 + 16 >> 2] | 6);
   }
   HEAP8[$0 | 0] = !HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 16 >> 2];
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = !HEAP32[$2 + 24 >> 2] | (HEAP32[$2 + 16 >> 2] | 4);
 }
 global$0 = $3 + 32 | 0;
 return $0;
}
function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($1 + 16 | 0);
 $3 = $1 + 8 | 0;
 $2 = $3;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = 33860;
 HEAP32[$2 >> 2] = 28444;
 HEAP32[$2 >> 2] = 28912;
 HEAP32[$2 >> 2] = 29028;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $4;
 global$0 = $2 + 16 | 0;
 $6 = HEAP32[$2 + 8 >> 2];
 if (HEAP8[$5 + 11 | 0] < 0) {
  $2 = HEAP32[$5 >> 2];
 } else {
  $2 = $5;
 }
 $7 = $2;
 if (HEAP8[$5 + 11 | 0] < 0) {
  $2 = HEAP32[$5 >> 2];
 } else {
  $2 = $5;
 }
 if (HEAP8[$5 + 11 | 0] < 0) {
  $5 = HEAP32[$5 + 4 >> 2];
 } else {
  $5 = HEAPU8[$5 + 11 | 0];
 }
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($3, $6, $7, $2 + ($5 << 2) | 0);
 if (HEAP8[$4 + 11 | 0] < 0) {
  $2 = HEAP32[$4 >> 2];
 } else {
  $2 = $4;
 }
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
 $0 = $1 + 8 | 0;
 $5 = $0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 >> 2] = 33860;
 HEAP32[$5 >> 2] = 28444;
 HEAP32[$5 >> 2] = 28912;
 HEAP32[$5 >> 2] = 29124;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 8 >> 2] = $3;
 global$0 = $5 + 16 | 0;
 std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$5 + 8 >> 2], $2, strlen($2) + $2 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($4);
 global$0 = $1 + 32 | 0;
}
function void_20std____2__vector_PicType_2c_20std____2__allocator_PicType__20_____push_back_slow_path_PicType_20const___28PicType_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 $5 = HEAP32[$0 >> 2];
 $9 = ($3 - $5 | 0) / 324 | 0;
 $2 = $9 + 1 | 0;
 label$1 : {
  label$2 : {
   if ($2 >>> 0 < 13256072) {
    $4 = (HEAP32[$0 + 8 >> 2] - $5 | 0) / 324 | 0;
    $6 = $4 << 1;
    $10 = $4 >>> 0 < 6628035 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 13256071;
    if ($10) {
     if ($10 >>> 0 >= 13256072) {
      break label$2;
     }
     $11 = operator_20new_28unsigned_20long_29(Math_imul($10, 324));
    }
    $4 = Math_imul($9, 324) + $11 | 0;
    $7 = memcpy($4, $1, 309);
    $9 = $7;
    HEAP32[$7 + 320 >> 2] = 0;
    HEAP32[$7 + 312 >> 2] = 0;
    HEAP32[$7 + 316 >> 2] = 0;
    $6 = HEAP32[$1 + 312 >> 2];
    $8 = HEAP32[$1 + 316 >> 2] - $6 | 0;
    label$6 : {
     if (!$8) {
      break label$6;
     }
     $1 = $8 >> 3;
     if ($1 >>> 0 >= 536870912) {
      break label$1;
     }
     $2 = operator_20new_28unsigned_20long_29($8);
     HEAP32[$7 + 316 >> 2] = $2;
     HEAP32[$7 + 312 >> 2] = $2;
     HEAP32[$9 + 320 >> 2] = $2 + ($1 << 3);
     if (($8 | 0) < 1) {
      break label$6;
     }
     HEAP32[$7 + 316 >> 2] = memcpy($2, $6, $8) + $8;
    }
    if (($3 | 0) != ($5 | 0)) {
     while (1) {
      $6 = $3 + -324 | 0;
      $1 = memcpy($4 + -324 | 0, $6, 309);
      $9 = $4 + -4 | 0;
      HEAP32[$9 >> 2] = 0;
      $2 = $4 + -12 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $8 = $2;
      $2 = $3 + -12 | 0;
      HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$4 + -8 >> 2] = HEAP32[$3 + -8 >> 2];
      $4 = $3 + -4 | 0;
      HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$4 >> 2] = 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $4 = $1;
      $3 = $6;
      if (($5 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
     $5 = HEAP32[$0 + 4 >> 2];
     $3 = HEAP32[$0 >> 2];
    }
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = Math_imul($10, 324) + $11;
    HEAP32[$0 + 4 >> 2] = $7 + 324;
    if (($3 | 0) != ($5 | 0)) {
     while (1) {
      $0 = HEAP32[$5 + -12 >> 2];
      if ($0) {
       HEAP32[$5 + -8 >> 2] = $0;
       dlfree($0);
      }
      $0 = $5 + -324 | 0;
      $5 = $0;
      if (($0 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    if ($3) {
     dlfree($3);
    }
    return;
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  std____2____throw_length_error_28char_20const__29(15792);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = $1;
 label$1 : {
  if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $6 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
   $1 = 0;
   break label$1;
  }
  $7 = $3;
  $1 = HEAP32[$0 >> 2];
  $5 = HEAP32[$1 + 12 >> 2];
  label$3 : {
   if (($5 | 0) == HEAP32[$1 + 16 >> 2]) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
    break label$3;
   }
   $1 = HEAP32[$5 >> 2];
  }
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($7, 2048, $1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $1 = 0;
   break label$1;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $1, 0) | 0;
  while (1) {
   label$7 : {
    $1 = $1 + -48 | 0;
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
    if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $6 + 8 | 0) | ($4 | 0) < 2) {
     break label$7;
    }
    $7 = $3;
    $5 = HEAP32[$0 >> 2];
    $8 = HEAP32[$5 + 12 >> 2];
    label$8 : {
     if (($8 | 0) == HEAP32[$5 + 16 >> 2]) {
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 36 >> 2]]($5) | 0;
      break label$8;
     }
     $5 = HEAP32[$8 >> 2];
    }
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($7, 2048, $5)) {
     break label$1;
    }
    $4 = $4 + -1 | 0;
    $1 = (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $5, 0) | 0) + Math_imul($1, 10) | 0;
    continue;
   }
   break;
  }
  if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $6 + 8 | 0)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 global$0 = $6 + 16 | 0;
 return $1;
}
function void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = ($0 | 0) == ($1 | 0);
 HEAP8[$1 + 12 | 0] = $2;
 label$1 : {
  if ($2) {
   break label$1;
  }
  while (1) {
   $3 = HEAP32[$1 + 8 >> 2];
   if (HEAPU8[$3 + 12 | 0]) {
    break label$1;
   }
   label$3 : {
    $2 = HEAP32[$3 + 8 >> 2];
    $4 = HEAP32[$2 >> 2];
    if (($3 | 0) == ($4 | 0)) {
     $4 = HEAP32[$2 + 4 >> 2];
     if (!(!$4 | HEAPU8[$4 + 12 | 0])) {
      break label$3;
     }
     label$6 : {
      if (HEAP32[$3 >> 2] == ($1 | 0)) {
       $1 = $3;
       break label$6;
      }
      $1 = HEAP32[$3 + 4 >> 2];
      $4 = HEAP32[$1 >> 2];
      HEAP32[$3 + 4 >> 2] = $4;
      $0 = $1;
      if ($4) {
       HEAP32[$4 + 8 >> 2] = $3;
       $2 = HEAP32[$3 + 8 >> 2];
      }
      HEAP32[$0 + 8 >> 2] = $2;
      $0 = HEAP32[$3 + 8 >> 2];
      HEAP32[(($3 | 0) == HEAP32[$0 >> 2] ? $0 : $0 + 4 | 0) >> 2] = $1;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $1;
      $2 = HEAP32[$1 + 8 >> 2];
     }
     HEAP8[$1 + 12 | 0] = 1;
     HEAP8[$2 + 12 | 0] = 0;
     $0 = HEAP32[$2 >> 2];
     $1 = HEAP32[$0 + 4 >> 2];
     HEAP32[$2 >> 2] = $1;
     if ($1) {
      HEAP32[$1 + 8 >> 2] = $2;
     }
     HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     $1 = HEAP32[$2 + 8 >> 2];
     HEAP32[(HEAP32[$1 >> 2] == ($2 | 0) ? $1 : $1 + 4 | 0) >> 2] = $0;
     HEAP32[$0 + 4 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $0;
     return;
    }
    if (!(HEAPU8[$4 + 12 | 0] | !$4)) {
     break label$3;
    }
    label$12 : {
     if (HEAP32[$3 >> 2] != ($1 | 0)) {
      $1 = $3;
      break label$12;
     }
     $4 = HEAP32[$1 + 4 >> 2];
     HEAP32[$3 >> 2] = $4;
     $0 = $1;
     if ($4) {
      HEAP32[$4 + 8 >> 2] = $3;
      $2 = HEAP32[$3 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2;
     $0 = HEAP32[$3 + 8 >> 2];
     HEAP32[(($3 | 0) == HEAP32[$0 >> 2] ? $0 : $0 + 4 | 0) >> 2] = $1;
     HEAP32[$1 + 4 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $1;
     $2 = HEAP32[$1 + 8 >> 2];
    }
    HEAP8[$1 + 12 | 0] = 1;
    HEAP8[$2 + 12 | 0] = 0;
    $0 = HEAP32[$2 + 4 >> 2];
    $1 = HEAP32[$0 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    if ($1) {
     HEAP32[$1 + 8 >> 2] = $2;
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    $1 = HEAP32[$2 + 8 >> 2];
    HEAP32[(HEAP32[$1 >> 2] == ($2 | 0) ? $1 : $1 + 4 | 0) >> 2] = $0;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$2 + 8 >> 2] = $0;
    break label$1;
   }
   HEAP8[$3 + 12 | 0] = 1;
   HEAP8[$2 + 12 | 0] = ($0 | 0) == ($2 | 0);
   HEAP8[$4 + 12 | 0] = 1;
   $1 = $2;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
}
function std____2__ios_base__Init__Init_28_29() {
 var $0 = 0;
 $0 = HEAP32[5623];
 std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29();
 std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0);
 std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29();
 $0 = HEAP32[5624];
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(50988, $0, 51036);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(50352, 50988);
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(51044, $0, 51092);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(50436, 51044);
 $0 = HEAP32[5625];
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(51100, $0, 51148);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(50520, 51100);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(50688, HEAP32[(HEAP32[HEAP32[12630] + -12 >> 2] + 50520 | 0) + 24 >> 2]);
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(51156, $0, 51204);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(50604, 51156);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(50772, HEAP32[(HEAP32[HEAP32[12651] + -12 >> 2] + 50604 | 0) + 24 >> 2]);
 $0 = HEAP32[HEAP32[12544] + -12 >> 2] + 50176 | 0;
 $0;
 HEAP32[$0 + 72 >> 2] = 50352;
 $0 = HEAP32[HEAP32[12566] + -12 >> 2] + 50264 | 0;
 $0;
 HEAP32[$0 + 72 >> 2] = 50436;
 $0 = HEAP32[HEAP32[12630] + -12 >> 2] + 50520 | 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 $0 = HEAP32[HEAP32[12651] + -12 >> 2] + 50604 | 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 $0 = HEAP32[HEAP32[12630] + -12 >> 2] + 50520 | 0;
 $0;
 HEAP32[$0 + 72 >> 2] = 50352;
 $0 = HEAP32[HEAP32[12651] + -12 >> 2] + 50604 | 0;
 $0;
 HEAP32[$0 + 72 >> 2] = 50436;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $5 = HEAP32[$0 + 4 >> 2];
 } else {
  $5 = HEAPU8[$0 + 11 | 0];
 }
 $4 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 1;
 $7 = $2 - $1 >> 2;
 label$5 : {
  if (!$7) {
   break label$5;
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $6 = HEAP32[$0 >> 2];
  } else {
   $6 = $0;
  }
  $9 = $6;
  $10 = $1;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $6 = HEAP32[$0 >> 2];
  } else {
   $6 = $0;
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $8 = HEAP32[$0 + 4 >> 2];
  } else {
   $8 = HEAPU8[$0 + 11 | 0];
  }
  if ($10 >>> 0 < $6 + ($8 << 2) >>> 0 & $9 >>> 0 <= $1 >>> 0) {
   $4 = $0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($3, $1, $2);
   $0 = $3;
   if (HEAP8[$0 + 11 | 0] < 0) {
    $0 = HEAP32[$0 >> 2];
   }
   if (HEAP8[$3 + 11 | 0] < 0) {
    $1 = HEAP32[$3 + 4 >> 2];
   } else {
    $1 = HEAPU8[$3 + 11 | 0];
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($4, $0, $1);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
   break label$5;
  }
  if ($4 - $5 >>> 0 < $7 >>> 0) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $4, ($5 + $7 | 0) - $4 | 0, $5, $5);
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $4 = HEAP32[$0 >> 2];
  } else {
   $4 = $0;
  }
  $4 = $4 + ($5 << 2) | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $4 = $4 + 4 | 0;
    continue;
   }
   break;
  }
  HEAP32[$3 >> 2] = 0;
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  $1 = $5 + $7 | 0;
  label$24 : {
   if (HEAP8[$0 + 11 | 0] < 0) {
    HEAP32[$0 + 4 >> 2] = $1;
    break label$24;
   }
   HEAP8[$0 + 11 | 0] = $1;
  }
 }
 global$0 = $3 + 16 | 0;
}
function MyObject__clacNormals_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 if (HEAP32[$0 + 20 >> 2] >= 1) {
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 8 >> 2] + ($3 << 2) >> 2];
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 20 >> 2]) {
    continue;
   }
   break;
  }
 }
 label$3 : {
  if (HEAP32[$0 + 12 >> 2] < 1) {
   break label$3;
  }
  $3 = 0;
  if ($1) {
   while (1) {
    $5 = $3 << 2;
    MyPolygon__calcNorm_28_29(HEAP32[$5 + HEAP32[$0 >> 2] >> 2]);
    $4 = HEAP32[$5 + HEAP32[$0 >> 2] >> 2];
    $2 = HEAP32[$4 >> 2];
    HEAPF32[$2 + 12 >> 2] = HEAPF32[$4 + 16 >> 2] + HEAPF32[$2 + 12 >> 2];
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$4 + 20 >> 2] + HEAPF32[$2 + 16 >> 2];
    HEAPF32[$2 + 20 >> 2] = HEAPF32[$4 + 24 >> 2] + HEAPF32[$2 + 20 >> 2];
    $4 = HEAP32[$5 + HEAP32[$0 >> 2] >> 2];
    $2 = HEAP32[$4 + 4 >> 2];
    HEAPF32[$2 + 12 >> 2] = HEAPF32[$4 + 16 >> 2] + HEAPF32[$2 + 12 >> 2];
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$4 + 20 >> 2] + HEAPF32[$2 + 16 >> 2];
    HEAPF32[$2 + 20 >> 2] = HEAPF32[$4 + 24 >> 2] + HEAPF32[$2 + 20 >> 2];
    $4 = HEAP32[$5 + HEAP32[$0 >> 2] >> 2];
    $2 = HEAP32[$4 + 8 >> 2];
    HEAPF32[$2 + 12 >> 2] = HEAPF32[$4 + 16 >> 2] + HEAPF32[$2 + 12 >> 2];
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$4 + 20 >> 2] + HEAPF32[$2 + 16 >> 2];
    HEAPF32[$2 + 20 >> 2] = HEAPF32[$4 + 24 >> 2] + HEAPF32[$2 + 20 >> 2];
    $5 = HEAP32[$5 + HEAP32[$0 >> 2] >> 2];
    $2 = HEAP32[$5 + 12 >> 2];
    HEAPF32[$2 + 12 >> 2] = HEAPF32[$5 + 16 >> 2] + HEAPF32[$2 + 12 >> 2];
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$5 + 20 >> 2] + HEAPF32[$2 + 16 >> 2];
    HEAPF32[$2 + 20 >> 2] = HEAPF32[$5 + 24 >> 2] + HEAPF32[$2 + 20 >> 2];
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 12 >> 2]) {
     continue;
    }
    break label$3;
   }
  }
  while (1) {
   MyPolygon__calcNorm_28_29(HEAP32[HEAP32[$0 >> 2] + ($3 << 2) >> 2]);
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 if (!(!$1 | HEAP32[$0 + 20 >> 2] < 1)) {
  $3 = 0;
  while (1) {
   $1 = HEAP32[HEAP32[$0 + 8 >> 2] + ($3 << 2) >> 2];
   $6 = HEAPF32[$1 + 20 >> 2];
   $9 = $6;
   $7 = HEAPF32[$1 + 12 >> 2];
   $8 = HEAPF32[$1 + 16 >> 2];
   $6 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($6 * $6))));
   HEAPF32[$1 + 20 >> 2] = $9 / $6;
   HEAPF32[$1 + 16 >> 2] = $8 / $6;
   HEAPF32[$1 + 12 >> 2] = $7 / $6;
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 20 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 27;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 41076;
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP8[$0 + 5 | 0] = 514;
 HEAP8[$0 + 6 | 0] = 2;
 $1 = $0 + 8 | 0;
 HEAP8[$0 + 6 | 0] = bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], HEAP32[$1 >> 2] + (HEAP32[$1 + 4 >> 2] << 2) | 0) ? 1 : 2;
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], HEAP32[$1 >> 2] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
  HEAP8[$0 + 7 | 0] = 1;
 }
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], HEAP32[$1 >> 2] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
  HEAP8[$0 + 5 | 0] = 1;
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $4 = HEAP32[$0 + 4 >> 2];
 } else {
  $4 = HEAPU8[$0 + 11 | 0];
 }
 $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10;
 $7 = $2 - $1 | 0;
 label$5 : {
  if (!$7) {
   break label$5;
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $5 = HEAP32[$0 >> 2];
  } else {
   $5 = $0;
  }
  $9 = $5;
  $10 = $1;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $5 = HEAP32[$0 >> 2];
  } else {
   $5 = $0;
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $8 = HEAP32[$0 + 4 >> 2];
  } else {
   $8 = HEAPU8[$0 + 11 | 0];
  }
  if ($10 >>> 0 < $5 + $8 >>> 0 & $9 >>> 0 <= $1 >>> 0) {
   $4 = $0;
   $3 = $6 + 16 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($3, $1, $2);
   $0 = $3;
   if (HEAP8[$0 + 11 | 0] < 0) {
    $0 = HEAP32[$0 >> 2];
   }
   if (HEAP8[$3 + 11 | 0] < 0) {
    $1 = HEAP32[$3 + 4 >> 2];
   } else {
    $1 = HEAPU8[$3 + 11 | 0];
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($4, $0, $1);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
   break label$5;
  }
  if ($3 - $4 >>> 0 < $7 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, ($4 + $7 | 0) - $3 | 0, $4, $4);
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $5 = HEAP32[$0 >> 2];
  } else {
   $5 = $0;
  }
  $3 = $5 + $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP8[$6 + 15 | 0] = 0;
  HEAP8[$3 | 0] = HEAPU8[$6 + 15 | 0];
  $1 = $4 + $7 | 0;
  label$24 : {
   if (HEAP8[$0 + 11 | 0] < 0) {
    HEAP32[$0 + 4 >> 2] = $1;
    break label$24;
   }
   HEAP8[$0 + 11 | 0] = $1;
  }
 }
 global$0 = $6 + 32 | 0;
}
function std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $0;
 while (1) {
  label$2 : {
   if ($6 >>> 0 >= $2 >>> 0 | $4 >>> 0 >= $1 >>> 0) {
    break label$2;
   }
   $5 = HEAPU8[$4 | 0];
   if ($5 >>> 0 > 1114111) {
    break label$2;
   }
   $3 = $4 + 1 | 0;
   label$3 : {
    if ($5 << 24 >> 24 >= 0) {
     break label$3;
    }
    if ($5 >>> 0 < 194) {
     break label$2;
    }
    if ($5 >>> 0 <= 223) {
     if (($1 - $4 | 0) < 2) {
      break label$2;
     }
     $3 = HEAPU8[$4 + 1 | 0];
     if (($3 & 192) != 128 | ($3 & 63 | $5 << 6 & 1984) >>> 0 > 1114111) {
      break label$2;
     }
     $3 = $4 + 2 | 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if ($5 >>> 0 <= 239) {
       if (($1 - $4 | 0) < 3) {
        break label$2;
       }
       $7 = HEAPU8[$4 + 2 | 0];
       $3 = HEAPU8[$4 + 1 | 0];
       if (($5 | 0) == 237) {
        break label$6;
       }
       if (($5 | 0) == 224) {
        if (($3 & 224) == 160) {
         break label$5;
        }
        break label$2;
       }
       if (($3 & 192) != 128) {
        break label$2;
       }
       break label$5;
      }
      if ($2 - $6 >>> 0 < 2 | $5 >>> 0 > 244 | ($1 - $4 | 0) < 4) {
       break label$2;
      }
      $7 = HEAPU8[$4 + 3 | 0];
      $8 = HEAPU8[$4 + 2 | 0];
      $3 = HEAPU8[$4 + 1 | 0];
      label$9 : {
       label$10 : {
        $9 = $5 + -240 | 0;
        if ($9 >>> 0 > 4) {
         break label$10;
        }
        label$11 : {
         switch ($9 - 1 | 0) {
         default:
          if (($3 + 112 & 255) >>> 0 < 48) {
           break label$9;
          }
          break label$2;
         case 0:
         case 1:
         case 2:
          break label$10;
         case 3:
          break label$11;
         }
        }
        if (($3 & 240) == 128) {
         break label$9;
        }
        break label$2;
       }
       if (($3 & 192) != 128) {
        break label$2;
       }
      }
      if (($8 & 192) != 128 | ($7 & 192) != 128 | ($7 & 63 | ($8 << 6 & 4032 | ($5 << 18 & 1835008 | ($3 & 63) << 12))) >>> 0 > 1114111) {
       break label$2;
      }
      $6 = $6 + 1 | 0;
      $3 = $4 + 4 | 0;
      break label$3;
     }
     if (($3 & 224) != 128) {
      break label$2;
     }
    }
    if (($7 & 192) != 128 | ($7 & 63 | ($5 << 12 & 61440 | ($3 & 63) << 6)) >>> 0 > 1114111) {
     break label$2;
    }
    $3 = $4 + 3 | 0;
   }
   $4 = $3;
   $6 = $6 + 1 | 0;
   continue;
  }
  break;
 }
 return $4 - $0 | 0;
}
function MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 64 >> 2];
 HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 32 >> 2] + 1;
 $8 = HEAP32[$7 + 28 >> 2];
 label$1 : {
  if (($8 | 0) < HEAP32[$7 + 24 >> 2]) {
   HEAP32[$7 + 28 >> 2] = $8 + 1;
   $7 = HEAP32[$7 + 20 >> 2] + Math_imul($8, 68) | 0;
   break label$1;
  }
  $7 = operator_20new_28unsigned_20long_29(68);
  HEAP32[$7 + 56 >> 2] = 0;
  HEAP32[$7 + 48 >> 2] = 0;
  HEAP32[$7 + 52 >> 2] = 0;
  HEAP32[$7 + 40 >> 2] = 0;
  HEAP32[$7 + 44 >> 2] = 0;
  HEAP32[$7 + 32 >> 2] = 0;
  HEAP32[$7 + 36 >> 2] = 0;
  HEAP32[$7 + 24 >> 2] = 0;
  HEAP32[$7 + 28 >> 2] = 0;
  HEAP32[$7 + 16 >> 2] = 0;
  HEAP32[$7 + 20 >> 2] = 0;
  HEAP32[11991] = HEAP32[11991] + 1;
 }
 $1 = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1);
 label$3 : {
  if ($5) {
   HEAP32[$7 + 12 >> 2] = $1;
   HEAP32[$7 + 8 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $2);
   HEAP32[$7 + 4 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $3);
   HEAP32[$7 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $4);
   break label$3;
  }
  HEAP32[$7 >> 2] = $1;
  HEAP32[$7 + 4 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $2);
  HEAP32[$7 + 8 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $3);
  HEAP32[$7 + 12 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $4);
 }
 if ($6) {
  MyPolygon__calcNorm_28_29($7);
  $2 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = HEAP32[$7 + 24 >> 2];
  HEAP8[HEAP32[$7 >> 2] + 28 | 0] = 1;
  $2 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = HEAP32[$7 + 24 >> 2];
  HEAP8[HEAP32[$7 + 4 >> 2] + 28 | 0] = 1;
  $2 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = HEAP32[$7 + 24 >> 2];
  HEAP8[HEAP32[$7 + 8 >> 2] + 28 | 0] = 1;
  $2 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = HEAP32[$7 + 24 >> 2];
  HEAP8[HEAP32[$7 + 12 >> 2] + 28 | 0] = 1;
 }
 $1 = operator_20new_28unsigned_20long_29(12);
 HEAP32[$1 + 4 >> 2] = $0 + 28;
 HEAP32[$1 + 8 >> 2] = $7;
 $2 = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
}
function PicArr__makeRtns_28PicArr__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 $7 = HEAPU8[$0 + 24 | 0];
 $8 = HEAPU8[$0 + 23 | 0];
 $9 = HEAPU8[$0 + 22 | 0];
 $10 = HEAPU8[$0 + 21 | 0];
 $27 = HEAPU8[$0 + 20 | 0];
 $11 = HEAPU8[$0 + 19 | 0];
 $12 = HEAPU8[$0 + 18 | 0];
 $13 = HEAPU8[$0 + 17 | 0];
 $28 = HEAPU8[$0 + 16 | 0];
 $14 = HEAPU8[$0 + 15 | 0];
 $15 = HEAPU8[$0 + 14 | 0];
 $16 = HEAPU8[$0 + 13 | 0];
 $31 = HEAPU8[$0 + 12 | 0];
 $17 = HEAPU8[$0 + 11 | 0];
 $18 = HEAPU8[$0 + 10 | 0];
 $19 = HEAPU8[$0 + 9 | 0];
 $25 = HEAPU8[$0 + 8 | 0];
 $20 = HEAPU8[$0 + 7 | 0];
 $4 = HEAPU8[$0 + 6 | 0];
 $21 = HEAPU8[$0 + 5 | 0];
 $26 = HEAPU8[$0 + 4 | 0];
 $22 = HEAPU8[$0 + 3 | 0];
 $23 = HEAPU8[$0 + 2 | 0];
 $24 = HEAPU8[$0 + 1 | 0];
 $5 = HEAPU8[$0 | 0];
 while (1) {
  $2 = ($6 << 5) + $1 | 0;
  HEAP32[$2 + 28 >> 2] = $6;
  HEAP8[$2 + 25 | 0] = $29;
  HEAP8[$2 + 24 | 0] = $7;
  HEAP8[$2 + 23 | 0] = $8;
  HEAP8[$2 + 22 | 0] = $9;
  HEAP8[$2 + 21 | 0] = $10;
  $0 = $27;
  HEAP8[$2 + 20 | 0] = $0;
  HEAP8[$2 + 19 | 0] = $11;
  HEAP8[$2 + 18 | 0] = $12;
  HEAP8[$2 + 17 | 0] = $13;
  $30 = $28;
  HEAP8[$2 + 16 | 0] = $30;
  HEAP8[$2 + 15 | 0] = $14;
  HEAP8[$2 + 14 | 0] = $15;
  HEAP8[$2 + 13 | 0] = $16;
  HEAP8[$2 + 12 | 0] = $31;
  HEAP8[$2 + 11 | 0] = $17;
  HEAP8[$2 + 10 | 0] = $18;
  HEAP8[$2 + 9 | 0] = $19;
  HEAP8[$2 + 8 | 0] = $25;
  HEAP8[$2 + 7 | 0] = $20;
  HEAP8[$2 + 6 | 0] = $4;
  HEAP8[$2 + 5 | 0] = $21;
  HEAP8[$2 + 4 | 0] = $26;
  HEAP8[$2 + 3 | 0] = $22;
  HEAP8[$2 + 2 | 0] = $23;
  HEAP8[$2 + 1 | 0] = $24;
  HEAP8[$2 | 0] = $5;
  $3 = ($6 | 0) == 3;
  $29 = $3 ? 1 : $29;
  $2 = $3 ? $22 : $19;
  $32 = $3 ? $23 : $15;
  $33 = $3 ? $24 : $11;
  $27 = $3 ? $5 : $7;
  $34 = $3 ? $19 : $22;
  $35 = $3 ? $20 : $16;
  $28 = $3 ? $4 : $12;
  $36 = $3 ? $21 : $8;
  $15 = $3 ? $15 : $23;
  $16 = $3 ? $16 : $20;
  $37 = $3 ? $17 : $13;
  $38 = $3 ? $18 : $9;
  $19 = $3 ? $11 : $24;
  $4 = $3 ? $12 : $4;
  $20 = $3 ? $13 : $17;
  $39 = $3 ? $14 : $10;
  $5 = $3 ? $7 : $5;
  $22 = $3 ? $8 : $21;
  $23 = $3 ? $9 : $18;
  $24 = $3 ? $10 : $14;
  $7 = $26;
  $8 = $2;
  $9 = $32;
  $10 = $33;
  $11 = $34;
  $12 = $25;
  $13 = $35;
  $14 = $36;
  $17 = $37;
  $18 = $38;
  $25 = $4;
  $4 = $30;
  $21 = $39;
  $26 = $5;
  $5 = $0;
  $6 = $6 + 1 | 0;
  if (($6 | 0) != 8) {
   continue;
  }
  break;
 }
}
function std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0;
 while (1) {
  label$2 : {
   if ($7 >>> 0 >= $2 >>> 0 | $3 >>> 0 >= $1 >>> 0) {
    break label$2;
   }
   $4 = HEAP8[$3 | 0];
   $5 = $4 & 255;
   label$3 : {
    if (($4 | 0) >= 0) {
     if ($5 >>> 0 > 1114111) {
      break label$2;
     }
     $3 = $3 + 1 | 0;
     break label$3;
    }
    if ($5 >>> 0 < 194) {
     break label$2;
    }
    if ($5 >>> 0 <= 223) {
     if (($1 - $3 | 0) < 2) {
      break label$2;
     }
     $4 = HEAPU8[$3 + 1 | 0];
     if (($4 & 192) != 128 | ($4 & 63 | $5 << 6 & 1984) >>> 0 > 1114111) {
      break label$2;
     }
     $3 = $3 + 2 | 0;
     break label$3;
    }
    label$6 : {
     label$7 : {
      if ($5 >>> 0 <= 239) {
       if (($1 - $3 | 0) < 3) {
        break label$2;
       }
       $6 = HEAPU8[$3 + 2 | 0];
       $4 = HEAPU8[$3 + 1 | 0];
       if (($5 | 0) == 237) {
        break label$7;
       }
       if (($5 | 0) == 224) {
        if (($4 & 224) == 160) {
         break label$6;
        }
        break label$2;
       }
       if (($4 & 192) != 128) {
        break label$2;
       }
       break label$6;
      }
      if (($1 - $3 | 0) < 4 | $5 >>> 0 > 244) {
       break label$2;
      }
      $6 = HEAPU8[$3 + 3 | 0];
      $8 = HEAPU8[$3 + 2 | 0];
      $4 = HEAPU8[$3 + 1 | 0];
      label$10 : {
       label$11 : {
        $9 = $5 + -240 | 0;
        if ($9 >>> 0 > 4) {
         break label$11;
        }
        label$12 : {
         switch ($9 - 1 | 0) {
         default:
          if (($4 + 112 & 255) >>> 0 < 48) {
           break label$10;
          }
          break label$2;
         case 0:
         case 1:
         case 2:
          break label$11;
         case 3:
          break label$12;
         }
        }
        if (($4 & 240) == 128) {
         break label$10;
        }
        break label$2;
       }
       if (($4 & 192) != 128) {
        break label$2;
       }
      }
      if (($8 & 192) != 128 | ($6 & 192) != 128 | ($6 & 63 | ($8 << 6 & 4032 | ($5 << 18 & 1835008 | ($4 & 63) << 12))) >>> 0 > 1114111) {
       break label$2;
      }
      $3 = $3 + 4 | 0;
      break label$3;
     }
     if (($4 & 224) != 128) {
      break label$2;
     }
    }
    if (($6 & 192) != 128 | ($6 & 63 | ($5 << 12 & 61440 | ($4 & 63) << 6)) >>> 0 > 1114111) {
     break label$2;
    }
    $3 = $3 + 3 | 0;
   }
   $7 = $7 + 1 | 0;
   continue;
  }
  break;
 }
 return $3 - $0 | 0;
}
function BaseGLWidget__init_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6656);
 glClearColor(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(1)));
 glClearDepthf(Math_fround(Math_fround(1)));
 glEnable(2929);
 if (HEAPU8[$0 + 256 | 0]) {
  glEnable(2884);
 }
 HEAP32[$0 + 312 >> 2] = 100;
 BaseGLWidget__reCalcProj_28_29($0);
 $1 = $4;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAP32[$1 + 20 >> 2] = 1065353216;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 1065353216;
 HEAP32[$1 >> 2] = 1065353216;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 if (HEAPU8[$0 + 317 | 0]) {
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(-20), Math_fround(0), Math_fround(1), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(20), Math_fround(1), Math_fround(0), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($4, Math_fround(-5), Math_fround(0), Math_fround(0), Math_fround(1));
 }
 $2 = $0 + 108 | 0;
 if (($2 | 0) != ($4 | 0)) {
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$2 + 60 >> 2] = $3;
  $3 = HEAP32[$1 + 52 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$2 + 52 >> 2] = $3;
  $3 = HEAP32[$1 + 44 >> 2];
  HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$2 + 44 >> 2] = $3;
  $3 = HEAP32[$1 + 36 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $3 = HEAP32[$1 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6667);
 $1 = $0 + 16 | 0;
 $0 = HEAP32[$0 + 20 >> 2];
 if (($1 | 0) != ($0 | 0)) {
  while (1) {
   $2 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
   $0 = HEAP32[$0 + 4 >> 2];
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $4 - -64 | 0;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $7 = HEAP32[$2 >> 2];
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 label$1 : {
  if ($7 >>> 0 < 4294967280) {
   label$3 : {
    label$4 : {
     if ($7 >>> 0 >= 11) {
      $5 = $7 + 16 & -16;
      $6 = operator_20new_28unsigned_20long_29($5);
      HEAP32[$4 + 24 >> 2] = $5 | -2147483648;
      HEAP32[$4 + 16 >> 2] = $6;
      HEAP32[$4 + 20 >> 2] = $7;
      break label$4;
     }
     HEAP8[$4 + 27 | 0] = $7;
     $6 = $4 + 16 | 0;
     if (!$7) {
      break label$3;
     }
    }
    memcpy($6, $2 + 4 | 0, $7);
   }
   HEAP8[$6 + $7 | 0] = 0;
   $5 = HEAP32[$3 >> 2];
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   if ($5 >>> 0 >= 4294967280) {
    break label$1;
   }
   label$6 : {
    label$7 : {
     if ($5 >>> 0 >= 11) {
      $2 = $5 + 16 & -16;
      $6 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$4 + 8 >> 2] = $2 | -2147483648;
      HEAP32[$4 >> 2] = $6;
      HEAP32[$4 + 4 >> 2] = $5;
      break label$7;
     }
     HEAP8[$4 + 11 | 0] = $5;
     $6 = $4;
     if (!$5) {
      break label$6;
     }
    }
    memcpy($6, $3 + 4 | 0, $5);
   }
   HEAP8[$5 + $6 | 0] = 0;
   $0 = FUNCTION_TABLE[$0]($1, $4 + 16 | 0, $4) | 0;
   if (HEAP8[$4 + 11 | 0] <= -1) {
    dlfree(HEAP32[$4 >> 2]);
   }
   if (HEAP8[$4 + 27 | 0] <= -1) {
    dlfree(HEAP32[$4 + 16 >> 2]);
   }
   global$0 = $4 + 32 | 0;
   return $0 | 0;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function PicPainter__exportToObj_28ObjExport__2c_20Mat4_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 336 | 0;
 global$0 = $3;
 HEAP32[$3 + 328 >> 2] = 1060320051;
 HEAP32[$3 + 320 >> 2] = 1060320051;
 HEAP32[$3 + 324 >> 2] = 1060320051;
 HEAP32[$3 + 312 >> 2] = 0;
 HEAP32[$3 + 316 >> 2] = -1;
 HEAP16[$3 + 308 >> 1] = 0;
 HEAP32[$3 + 300 >> 2] = 0;
 HEAP32[$3 + 304 >> 2] = 0;
 HEAP32[$3 + 232 >> 2] = 0;
 HEAP32[$3 + 224 >> 2] = 0;
 HEAP32[$3 + 228 >> 2] = 0;
 HEAP32[$3 + 216 >> 2] = 0;
 HEAP32[$3 + 220 >> 2] = 0;
 HEAP32[$3 + 268 >> 2] = 0;
 $4 = $3 + 260 | 0;
 HEAP32[$3 + 264 >> 2] = $4;
 HEAP32[$3 + 256 >> 2] = 0;
 $5 = $3 + 248 | 0;
 HEAP32[$3 + 252 >> 2] = $5;
 HEAP32[$3 + 244 >> 2] = 0;
 $6 = $3 + 236 | 0;
 HEAP32[$3 + 240 >> 2] = $6;
 HEAP32[$3 + 284 >> 2] = 0;
 HEAP32[$3 + 288 >> 2] = 0;
 HEAP32[$3 + 292 >> 2] = 1065353216;
 HEAP32[$3 + 208 >> 2] = 0;
 HEAP32[$3 + 212 >> 2] = 0;
 HEAP32[$3 + 276 >> 2] = 0;
 HEAP32[$3 + 280 >> 2] = 0;
 HEAP32[$3 + 272 >> 2] = 47488;
 HEAP32[$3 + 260 >> 2] = $4;
 HEAP32[$3 + 248 >> 2] = $5;
 HEAP32[$3 + 236 >> 2] = $6;
 PicDisp__generateStraightShape_28DisplayConf_20const__2c_20MyObject__29_20const(HEAP32[HEAP32[$0 >> 2] + 332 >> 2], $3 + 296 | 0, $3 + 208 | 0);
 HEAP32[11874] = 0;
 $4 = HEAP32[11875];
 if (($4 | 0) > HEAP32[11876]) {
  HEAP32[11876] = $4;
 }
 HEAP32[11879] = 0;
 HEAP32[11875] = 0;
 $4 = HEAP32[11880];
 if (($4 | 0) > HEAP32[11881]) {
  HEAP32[11881] = $4;
 }
 HEAP32[11884] = 0;
 HEAP32[11880] = 0;
 $4 = HEAP32[11885];
 if (($4 | 0) > HEAP32[11886]) {
  HEAP32[11886] = $4;
 }
 HEAP32[11885] = 0;
 $3 = memset($3, 0, 115);
 HEAP32[$3 + 124 >> 2] = 0;
 HEAP32[$3 + 128 >> 2] = 0;
 HEAP32[$3 + 196 >> 2] = 34963;
 HEAP32[$3 + 200 >> 2] = 0;
 HEAP32[$3 + 188 >> 2] = 0;
 HEAP32[$3 + 192 >> 2] = 0;
 HEAP32[$3 + 172 >> 2] = 34962;
 HEAP32[$3 + 176 >> 2] = 0;
 HEAP32[$3 + 164 >> 2] = 0;
 HEAP32[$3 + 168 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 34962;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 132 >> 2] = 0;
 HEAP32[$3 + 136 >> 2] = 34962;
 HEAP32[$3 + 116 >> 2] = 0;
 HEAP32[$3 + 120 >> 2] = 0;
 HEAP32[$3 + 180 >> 2] = 0;
 HEAP32[$3 + 184 >> 2] = 34962;
 HEAP32[$3 + 156 >> 2] = 0;
 HEAP32[$3 + 160 >> 2] = 34962;
 MyObject__toMesh_28Mesh__2c_20bool_29($3 + 208 | 0, $3, 1);
 ObjExport__addMesh_28PicGroupDef_20const__2c_20Mesh__2c_20Mat4_20const__29($1, HEAP32[HEAP32[11988] + 4 >> 2] + Math_imul(HEAP32[HEAP32[$0 >> 2] >> 2], 152) | 0, $3, $2);
 Mesh___Mesh_28_29($3);
 MyObject___MyObject_28_29($3 + 208 | 0);
 global$0 = $3 + 336 | 0;
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 8192) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8 : {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($2 >>> 0 > $5 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($2 >>> 0 <= $5 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 + -4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($2 >>> 0 <= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__init_wweeks_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[52024] != 0) | HEAP8[52024] & 1)) {
  $0 = 51856;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 52024) {
    continue;
   }
   break;
  }
  HEAP32[13006] = 0;
  HEAP32[13006] = HEAP32[13006] | 1;
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51856, 32688);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51868, 32716);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51880, 32744);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51892, 32776);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51904, 32816);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51916, 32852);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51928, 32880);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51940, 32916);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51952, 32932);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51964, 32948);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51976, 32964);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(51988, 32980);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52e3, 32996);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52012, 33012);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 if (HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] >>> 0 >= 4) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 35572);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 52 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
  $3 = HEAP32[$0 + 12 >> 2];
  $4 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = $3;
  HEAP32[$2 + 96 >> 2] = $4;
  HEAP32[$2 + 100 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 35134);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 36 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 }
 $4 = $2;
 $7 = $2;
 $6 = $0 + 16 | 0;
 label$2 : {
  if (HEAPU8[HEAP32[$6 >> 2]] == 110) {
   $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 35224);
   $3 = HEAP32[$5 + 4 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$2 + 28 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
   $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($2 + 72 | 0, $6, 1);
   $5 = $2 + 72 | 0;
   break label$2;
  }
  $3 = HEAP32[$6 + 4 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$2 + 68 >> 2] = $3;
  $5 = $2 - -64 | 0;
 }
 $3 = HEAP32[$5 + 4 >> 2];
 HEAP32[$7 + 16 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 if (HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] >>> 0 <= 3) {
  $4 = HEAP32[$0 + 12 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 60 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 112 | 0;
}
function ModelControlBase__scrDblClick_28bool_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $5 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], $2, $3);
 $4 = HEAP32[HEAP32[$0 + 8 >> 2] + 116 >> 2];
 label$1 : {
  label$2 : {
   if (($5 | 0) <= HEAP32[$4 + 12 >> 2]) {
    $2 = (HEAP32[$4 + 28 >> 2] + Math_imul($5, 188) | 0) + -188 | 0;
    $3 = (HEAP32[$4 + 76 >> 2] + HEAP32[$2 + 4 >> 2] | 0) / 4 | 0;
    $5 = (HEAP32[$4 + 84 >> 2] + HEAP32[$2 + 8 >> 2] | 0) / 4 | 0;
    $1 = (HEAP32[$4 + 68 >> 2] + HEAP32[$2 + 12 >> 2] | 0) / 4 | 0;
    $4 = HEAP32[$2 >> 2];
    label$4 : {
     if ($4 >>> 0 > 2) {
      $2 = -1;
      $3 = -1;
      $1 = -1;
      break label$4;
     }
     label$6 : {
      switch ($4 - 1 | 0) {
      default:
       $2 = $5;
       break label$4;
      case 0:
       $2 = $3;
       $3 = $5;
       break label$4;
      case 1:
       break label$6;
      }
     }
     $2 = $3;
     $3 = $1;
     $1 = $5;
    }
    $3 = $3 << 16 & 16711680 | ($1 << 9 & 65024 | ($2 << 2 & 508 | $4 & 3));
    $2 = $0 + 700 | 0;
    if (HEAPU8[$0 + 716 | 0]) {
     $1 = 0;
     if (BuildControlBase__tiledDblClick_28int_29($2, $3)) {
      break label$2;
     }
     break label$1;
    }
    $1 = 0;
    if (BuildControlBase__boxedDblClick_28int_2c_20int_2c_20int_29($2, $3)) {
     break label$2;
    }
    break label$1;
   }
   HEAP8[$0 + 717 | 0] = $1;
   $3 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 704 >> 2], $2, $3);
   $2 = $0 + 700 | 0;
   if (HEAPU8[$0 + 716 | 0]) {
    $1 = 0;
    if (BuildControlBase__tiledDblClick_28int_29($2, $3)) {
     break label$2;
    }
    break label$1;
   }
   $1 = 0;
   if (!BuildControlBase__boxedDblClick_28int_2c_20int_2c_20int_29($2, $3)) {
    break label$1;
   }
  }
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$1 + 88 >> 2];
  if (!(!$2 | !HEAPU8[$2 + 32 | 0])) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1);
   $1 = HEAP32[$0 + 8 >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  $2 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$2 + 124 >> 2];
  $3 = 0;
  label$12 : {
   if (!$0) {
    break label$12;
   }
   $1 = HEAP32[$0 + 8 >> 2];
   $3 = 0;
   if (($1 | 0) == HEAP32[$0 + 12 >> 2]) {
    break label$12;
   }
   $0 = HEAP32[$2 + 132 >> 2];
   $3 = 0;
   if (($0 | 0) == -1) {
    break label$12;
   }
   $3 = HEAP32[$1 + ($0 << 2) >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3, 0);
  $1 = 1;
 }
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 68)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 116)) {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
    break label$1;
   }
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 12 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 35124, $1 + 12 | 0);
 }
 global$0 = $1 + 16 | 0;
 return $3;
}
function BuildWorld__getAllNei_28CoordBuild_20const__2c_20CoordBuild__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $8 = HEAP32[$0 + 8 >> 2];
 $4 = HEAP32[$0 + 4 >> 2];
 $6 = HEAP32[$0 >> 2];
 while (1) {
  $5 = ($10 << 4) + $1 | 0;
  $7 = Math_imul($9, 84);
  HEAP32[$5 >> 2] = HEAP32[($7 + Math_imul($6, 336) | 0) + 7536 >> 2];
  $2 = $7 + Math_imul(HEAP32[$0 >> 2], 336) | 0;
  $6 = HEAP32[$2 + 7540 >> 2];
  $3 = (($6 | 0) == 1 ? $8 : 0) + ($6 ? 0 : $4) | 0;
  $4 = HEAP32[$0 + 12 >> 2];
  HEAP32[$5 + 4 >> 2] = ($3 + (($6 | 0) == 2 ? $4 : 0) | 0) + HEAP32[$2 + 7544 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 + 7548 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$2 + 7552 >> 2] + ((($3 ? 0 : $6) + (($3 | 0) == 1 ? $8 : 0) | 0) + (($3 | 0) == 2 ? $4 : 0) | 0);
  $8 = HEAP32[$0 + 8 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$2 + 7564 >> 2];
  $3 = HEAP32[$2 + 7560 >> 2];
  $2 = HEAP32[$2 + 7556 >> 2];
  HEAP32[$5 + 12 >> 2] = $3 + ((($2 ? 0 : $6) + (($2 | 0) == 1 ? $8 : 0) | 0) + (($2 | 0) == 2 ? $4 : 0) | 0);
  $2 = $7 + Math_imul(HEAP32[$0 >> 2], 336) | 0;
  $4 = HEAP32[$2 + 7568 >> 2];
  $3 = (($4 | 0) == 1 ? $8 : 0) + ($4 ? 0 : $6) | 0;
  $6 = HEAP32[$0 + 12 >> 2];
  HEAP32[$5 + 20 >> 2] = ($3 + (($4 | 0) == 2 ? $6 : 0) | 0) + HEAP32[$2 + 7572 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 + 7576 >> 2];
  HEAP32[$5 + 24 >> 2] = HEAP32[$2 + 7580 >> 2] + ((($3 ? 0 : $4) + (($3 | 0) == 1 ? $8 : 0) | 0) + (($3 | 0) == 2 ? $6 : 0) | 0);
  $8 = HEAP32[$0 + 8 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 7592 >> 2];
  $3 = HEAP32[$2 + 7588 >> 2];
  $2 = HEAP32[$2 + 7584 >> 2];
  HEAP32[$5 + 28 >> 2] = $3 + ((($2 ? 0 : $4) + (($2 | 0) == 1 ? $8 : 0) | 0) + (($2 | 0) == 2 ? $6 : 0) | 0);
  $6 = HEAP32[$0 >> 2];
  $2 = $7 + Math_imul($6, 336) | 0;
  $7 = HEAP32[$2 + 7596 >> 2];
  $3 = HEAP32[$0 + 12 >> 2];
  HEAP32[$5 + 36 >> 2] = (((($7 | 0) == 1 ? $8 : 0) + ($7 ? 0 : $4) | 0) + (($7 | 0) == 2 ? $3 : 0) | 0) + HEAP32[$2 + 7600 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $7 = HEAP32[$2 + 7604 >> 2];
  HEAP32[$5 + 40 >> 2] = HEAP32[$2 + 7608 >> 2] + ((($7 ? 0 : $4) + (($7 | 0) == 1 ? $8 : 0) | 0) + (($7 | 0) == 2 ? $3 : 0) | 0);
  $7 = $5;
  $5 = HEAP32[$2 + 7612 >> 2];
  $8 = HEAP32[$0 + 8 >> 2];
  HEAP32[$7 + 44 >> 2] = HEAP32[$2 + 7616 >> 2] + ((($5 ? 0 : $4) + (($5 | 0) == 1 ? $8 : 0) | 0) + (($5 | 0) == 2 ? $3 : 0) | 0);
  $10 = $10 + 3 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 4) {
   continue;
  }
  break;
 }
}
function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAPU8[$0 + 52 | 0]) {
   $4 = HEAP32[$0 + 48 >> 2];
   if (!$1) {
    break label$1;
   }
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = 1;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  global$0 = $3 + 16 | 0;
  $3 = $0 + 44 | 0;
  $6 = $2 + 24 | 0;
  $3 = HEAP32[(HEAP32[$6 >> 2] < HEAP32[$3 >> 2] ? $3 : $6) >> 2];
  label$3 : {
   label$4 : {
    label$5 : {
     while (1) {
      if (($4 | 0) < ($3 | 0)) {
       $6 = getc(HEAP32[$0 + 32 >> 2]);
       if (($6 | 0) == -1) {
        break label$5;
       }
       HEAP8[($2 + 24 | 0) + $4 | 0] = $6;
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     }
     label$8 : {
      if (HEAPU8[$0 + 53 | 0]) {
       HEAP32[$2 + 20 >> 2] = HEAP8[$2 + 24 | 0];
       break label$8;
      }
      $6 = $2 + 24 | 0;
      while (1) {
       $4 = HEAP32[$0 + 40 >> 2];
       $7 = HEAP32[$4 >> 2];
       $8 = HEAP32[$4 + 4 >> 2];
       $5 = HEAP32[$0 + 36 >> 2];
       $9 = $4;
       $4 = ($2 + 24 | 0) + $3 | 0;
       $5 = (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $9, $2 + 24 | 0, $4, $2 + 16 | 0, $2 + 20 | 0, $6, $2 + 12 | 0) | 0) + -1 | 0;
       if ($5 >>> 0 > 2) {
        break label$8;
       }
       label$11 : {
        switch ($5 - 1 | 0) {
        default:
         $5 = HEAP32[$0 + 40 >> 2];
         HEAP32[$5 >> 2] = $7;
         HEAP32[$5 + 4 >> 2] = $8;
         if (($3 | 0) == 8) {
          break label$5;
         }
         $7 = getc(HEAP32[$0 + 32 >> 2]);
         if (($7 | 0) == -1) {
          break label$5;
         }
         HEAP8[$4 | 0] = $7;
         $3 = $3 + 1 | 0;
         continue;
        case 1:
         break label$11;
        case 0:
         break label$5;
        }
       }
       break;
      }
      HEAP32[$2 + 20 >> 2] = HEAP8[$2 + 24 | 0];
     }
     if ($1) {
      break label$4;
     }
     while (1) {
      if (($3 | 0) < 1) {
       break label$3;
      }
      $3 = $3 + -1 | 0;
      if ((ungetc(HEAP8[$3 + ($2 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $4 = -1;
    break label$1;
   }
   HEAP32[$0 + 48 >> 2] = HEAP32[$2 + 20 >> 2];
  }
  $4 = HEAP32[$2 + 20 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return $4;
}
function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAPU8[$0 + 52 | 0]) {
   $4 = HEAP32[$0 + 48 >> 2];
   if (!$1) {
    break label$1;
   }
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = 1;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  global$0 = $3 + 16 | 0;
  $3 = $0 + 44 | 0;
  $6 = $2 + 24 | 0;
  $3 = HEAP32[(HEAP32[$6 >> 2] < HEAP32[$3 >> 2] ? $3 : $6) >> 2];
  label$3 : {
   label$4 : {
    label$5 : {
     while (1) {
      if (($4 | 0) < ($3 | 0)) {
       $6 = getc(HEAP32[$0 + 32 >> 2]);
       if (($6 | 0) == -1) {
        break label$5;
       }
       HEAP8[($2 + 24 | 0) + $4 | 0] = $6;
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     }
     label$8 : {
      if (HEAPU8[$0 + 53 | 0]) {
       HEAP8[$2 + 23 | 0] = HEAPU8[$2 + 24 | 0];
       break label$8;
      }
      $6 = $2 + 24 | 0;
      while (1) {
       $4 = HEAP32[$0 + 40 >> 2];
       $7 = HEAP32[$4 >> 2];
       $8 = HEAP32[$4 + 4 >> 2];
       $5 = HEAP32[$0 + 36 >> 2];
       $9 = $4;
       $4 = ($2 + 24 | 0) + $3 | 0;
       $5 = (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $9, $2 + 24 | 0, $4, $2 + 16 | 0, $2 + 23 | 0, $6, $2 + 12 | 0) | 0) + -1 | 0;
       if ($5 >>> 0 > 2) {
        break label$8;
       }
       label$11 : {
        switch ($5 - 1 | 0) {
        default:
         $5 = HEAP32[$0 + 40 >> 2];
         HEAP32[$5 >> 2] = $7;
         HEAP32[$5 + 4 >> 2] = $8;
         if (($3 | 0) == 8) {
          break label$5;
         }
         $7 = getc(HEAP32[$0 + 32 >> 2]);
         if (($7 | 0) == -1) {
          break label$5;
         }
         HEAP8[$4 | 0] = $7;
         $3 = $3 + 1 | 0;
         continue;
        case 1:
         break label$11;
        case 0:
         break label$5;
        }
       }
       break;
      }
      HEAP8[$2 + 23 | 0] = HEAPU8[$2 + 24 | 0];
     }
     if ($1) {
      break label$4;
     }
     while (1) {
      if (($3 | 0) < 1) {
       break label$3;
      }
      $3 = $3 + -1 | 0;
      if ((ungetc(HEAPU8[$3 + ($2 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $4 = -1;
    break label$1;
   }
   HEAP32[$0 + 48 >> 2] = HEAPU8[$2 + 23 | 0];
  }
  $4 = HEAPU8[$2 + 23 | 0];
 }
 global$0 = $2 + 32 | 0;
 return $4;
}
function MyAllocator__init_28int_2c_20int_2c_20int_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 if (HEAP32[11873] < 640) {
  $0 = HEAP32[11872];
  if ($0) {
   $0 = $0 + -4 | 0;
   $1 = HEAP32[$0 >> 2];
   if ($1) {
    HEAP32[11990] = (HEAP32[11990] + (($1 << 5) + -32 >>> 5) | 0) + 1;
   }
   dlfree($0);
  }
  HEAP32[11873] = 640;
  $0 = operator_20new_28unsigned_20long_29(20484);
  HEAP32[$0 >> 2] = 640;
  $1 = $0 + 4 | 0;
  $2 = $1 + 20480 | 0;
  $3 = HEAP32[11989] + 639 | 0;
  $0 = $1;
  while (1) {
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP8[$0 + 21 | 0] = 0;
   HEAP8[$0 + 22 | 0] = 0;
   HEAP8[$0 + 23 | 0] = 0;
   HEAP8[$0 + 24 | 0] = 0;
   HEAP8[$0 + 25 | 0] = 0;
   HEAP8[$0 + 26 | 0] = 0;
   HEAP8[$0 + 27 | 0] = 0;
   HEAP8[$0 + 28 | 0] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $0 = $0 + 32 | 0;
   if (($2 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  HEAP32[11989] = $3 + 1;
  HEAP32[11872] = $1;
  HEAP32[11874] = 0;
  $0 = HEAP32[11875];
  if (($0 | 0) > HEAP32[11876]) {
   HEAP32[11876] = $0;
  }
  HEAP32[11875] = 0;
  HEAP32[11876] = 0;
 }
 if (HEAP32[11878] < 640) {
  $0 = HEAP32[11877];
  if ($0) {
   $0 = $0 + -4 | 0;
   $1 = HEAP32[$0 >> 2];
   if ($1) {
    HEAP32[11992] = (HEAP32[11992] + ((Math_imul($1, 68) + -68 >>> 0) / 68 | 0) | 0) + 1;
   }
   dlfree($0);
  }
  HEAP32[11878] = 640;
  $0 = operator_20new_28unsigned_20long_29(43524);
  HEAP32[$0 >> 2] = 640;
  $1 = $0 + 4 | 0;
  $3 = $1 + 43520 | 0;
  $2 = HEAP32[11991];
  $0 = $1;
  while (1) {
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = 0;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $2 = $2 + 1 | 0;
   $0 = $0 + 68 | 0;
   if (($3 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  HEAP32[11991] = $2;
  HEAP32[11877] = $1;
  HEAP32[11879] = 0;
  $0 = HEAP32[11880];
  if (($0 | 0) > HEAP32[11881]) {
   HEAP32[11881] = $0;
  }
  HEAP32[11880] = 0;
  HEAP32[11881] = 0;
 }
 if (HEAP32[11883] < 0) {
  $0 = HEAP32[11882];
  if ($0) {
   dlfree($0);
  }
  HEAP32[11883] = 0;
  HEAP32[11884] = 0;
  $0 = HEAP32[11885];
  if (($0 | 0) > HEAP32[11886]) {
   HEAP32[11886] = $0;
  }
  HEAP32[11885] = 0;
  HEAP32[11886] = 0;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 56 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($2 + 48 | 0, $0, $1);
  $0 = HEAP32[$2 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  $0 = HEAP32[$2 + 52 >> 2];
  $3 = HEAPU8[$0 + 6 | 0];
  label$2 : {
   if (($3 | 0) != 2) {
    $0 = !$3;
    break label$2;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
  }
  if ($0) {
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 41284);
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 20 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  }
  $0 = HEAP32[$2 + 52 >> 2];
  $3 = HEAPU8[$0 + 6 | 0];
  label$6 : {
   if (($3 | 0) != 2) {
    $0 = !$3;
    break label$6;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
  }
  label$5 : {
   if (!$0) {
    $0 = HEAP32[$2 + 52 >> 2];
    $3 = HEAPU8[$0 + 7 | 0];
    label$9 : {
     if (($3 | 0) != 2) {
      $0 = !$3;
      break label$9;
     }
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
    }
    if (!$0) {
     break label$5;
    }
   }
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 35572);
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  }
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, HEAP32[$2 + 48 >> 2] ? 35139 : 35142);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  if (HEAPU8[$4 + 5 | 0]) {
   HEAP8[HEAP32[$4 >> 2]] = HEAPU8[$4 + 4 | 0];
  }
 }
 global$0 = $2 - -64 | 0;
}
function void_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20_____push_back_slow_path_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2];
 $5 = (HEAP32[$0 + 4 >> 2] - $3 | 0) / 12 | 0;
 $2 = $5 + 1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($2 >>> 0 < 357913942) {
     $3 = (HEAP32[$0 + 8 >> 2] - $3 | 0) / 12 | 0;
     $6 = $3 << 1;
     $3 = $3 >>> 0 < 178956970 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 357913941;
     if ($3) {
      if ($3 >>> 0 >= 357913942) {
       break label$3;
      }
      $4 = operator_20new_28unsigned_20long_29(Math_imul($3, 12));
     }
     $2 = Math_imul($5, 12) + $4 | 0;
     $5 = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = $5;
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $3 = Math_imul($3, 12) + $4 | 0;
     $5 = $2 + 12 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     $4 = HEAP32[$0 >> 2];
     if (($1 | 0) == ($4 | 0)) {
      break label$2;
     }
     while (1) {
      $1 = $1 + -12 | 0;
      $6 = HEAP32[$1 + 4 >> 2];
      $2 = $2 + -12 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = $6;
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      if (($1 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
     $4 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[$0 >> 2];
     break label$1;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const();
    abort();
   }
   std____2____throw_length_error_28char_20const__29(15792);
   abort();
  }
  $1 = $4;
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $5;
 if (($1 | 0) != ($4 | 0)) {
  while (1) {
   $0 = $4 + -12 | 0;
   if (HEAP8[$4 + -1 | 0] <= -1) {
    dlfree(HEAP32[$0 >> 2]);
   }
   $4 = $0;
   if (($0 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($1) {
  dlfree($1);
 }
}
function void_20std____2__vector_CubeDocBase__DocState_2c_20std____2__allocator_CubeDocBase__DocState__20_____emplace_back_slow_path___28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$0 >> 2];
 $6 = $2 - $3 >> 5;
 $1 = $6 + 1 | 0;
 label$1 : {
  if ($1 >>> 0 < 134217728) {
   $4 = HEAP32[$0 + 8 >> 2] - $3 | 0;
   $5 = $4 >> 4;
   $4 = $4 >> 5 >>> 0 < 67108863 ? $5 >>> 0 < $1 >>> 0 ? $1 : $5 : 134217727;
   $1 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    if ($4 >>> 0 >= 134217728) {
     break label$1;
    }
    $1 = operator_20new_28unsigned_20long_29($4 << 5);
   }
   $7 = $1;
   $1 = $1 + ($6 << 5) | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = -1;
   $6 = $1 + 32 | 0;
   if (($2 | 0) != ($3 | 0)) {
    while (1) {
     $1 = $1 + -32 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $2 = $2 + -32 | 0;
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
     HEAP32[$2 + 12 >> 2] = 0;
     HEAP32[$2 + 16 >> 2] = 0;
     $5 = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 + 20 >> 2] = 0;
     HEAP32[$1 + 20 >> 2] = $5;
     $5 = HEAP32[$2 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = $5;
     HEAP32[$1 + 28 >> 2] = HEAP32[$2 + 28 >> 2];
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
    $3 = HEAP32[$0 + 4 >> 2];
    $2 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $7 + ($4 << 5);
   HEAP32[$0 + 4 >> 2] = $6;
   if (($2 | 0) != ($3 | 0)) {
    while (1) {
     $3 = $3 + -32 | 0;
     std____2__allocator_CubeDocBase__DocState___destroy_28CubeDocBase__DocState__29($3);
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   if ($2) {
    dlfree($2);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20_____swap_out_circular_buffer_28std____2____split_buffer_ShapePlace_2c_20std____2__allocator_ShapePlace_____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  $3 = HEAP32[$0 + 4 >> 2];
  $6 = HEAP32[$0 >> 2];
  label$2 : {
   if (($3 | 0) == ($6 | 0)) {
    $2 = HEAP32[$1 + 4 >> 2];
    break label$2;
   }
   $2 = HEAP32[$1 + 4 >> 2];
   while (1) {
    $3 = $3 + -52 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    $2 = $2 + -52 | 0;
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $4;
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $4 = HEAP32[$3 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $4;
    $5 = HEAP32[$3 + 16 >> 2];
    HEAP32[$2 + 20 >> 2] = 0;
    HEAP32[$2 + 16 >> 2] = $5;
    $5 = operator_20new_28unsigned_20long_29(($4 | 0) != ($4 & 1073741823) ? -1 : $4 << 2);
    HEAP32[$2 + 20 >> 2] = $5;
    memcpy($5, HEAP32[$3 + 20 >> 2], $4 << 5);
    $4 = HEAP32[$3 + 24 >> 2];
    $5 = HEAP32[$3 + 28 >> 2];
    $7 = HEAP32[$3 + 32 >> 2];
    $8 = HEAP32[$3 + 36 >> 2];
    HEAP32[$2 + 48 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = $7;
    HEAP32[$2 + 36 >> 2] = $8;
    HEAP32[$2 + 24 >> 2] = $4;
    HEAP32[$2 + 28 >> 2] = $5;
    $4 = HEAP32[$3 + 44 >> 2] - HEAP32[$3 + 40 >> 2] | 0;
    label$5 : {
     if (!$4) {
      break label$5;
     }
     $5 = $4 >> 3;
     if ($5 >>> 0 >= 536870912) {
      break label$1;
     }
     $4 = operator_20new_28unsigned_20long_29($4);
     HEAP32[$2 + 44 >> 2] = $4;
     HEAP32[$2 + 40 >> 2] = $4;
     HEAP32[$2 + 48 >> 2] = $4 + ($5 << 3);
     $7 = HEAP32[$3 + 40 >> 2];
     $5 = HEAP32[$3 + 44 >> 2] - $7 | 0;
     if (($5 | 0) < 1) {
      break label$5;
     }
     HEAP32[$2 + 44 >> 2] = memcpy($4, $7, $5) + $5;
    }
    $2 = HEAP32[$1 + 4 >> 2] + -52 | 0;
    HEAP32[$1 + 4 >> 2] = $2;
    if (($3 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
   $6 = HEAP32[$0 >> 2];
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $6;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 8 >> 2] = $1;
 label$1 : {
  if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $5 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
   $1 = 0;
   break label$1;
  }
  $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
  if (!(($1 | 0) >= 0 ? (HEAPU16[HEAP32[$3 + 8 >> 2] + (($1 & 255) << 1) >> 1] & 2048) != 0 : 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $1 = 0;
   break label$1;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3, $1, 0) | 0;
  while (1) {
   label$7 : {
    $1 = $1 + -48 | 0;
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
    if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0) | ($4 | 0) < 2) {
     break label$7;
    }
    $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
    if (!(($6 | 0) >= 0 ? (HEAPU16[HEAP32[$3 + 8 >> 2] + (($6 & 255) << 1) >> 1] & 2048) != 0 : 0)) {
     break label$1;
    }
    $4 = $4 + -1 | 0;
    $1 = (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3, $6, 0) | 0) + Math_imul($1, 10) | 0;
    continue;
   }
   break;
  }
  if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $5 + 8 | 0)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 global$0 = $5 + 16 | 0;
 return $1;
}
function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($1 + 16 | 0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $3;
 global$0 = $2 + 16 | 0;
 $6 = HEAP32[$2 + 8 >> 2];
 if (HEAP8[$5 + 11 | 0] < 0) {
  $2 = HEAP32[$5 >> 2];
 } else {
  $2 = $5;
 }
 $4 = $2;
 if (HEAP8[$5 + 11 | 0] < 0) {
  $2 = HEAP32[$5 >> 2];
 } else {
  $2 = $5;
 }
 if (HEAP8[$5 + 11 | 0] < 0) {
  $5 = HEAP32[$5 + 4 >> 2];
 } else {
  $5 = HEAPU8[$5 + 11 | 0];
 }
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($6, $4, $2 + $5 | 0);
 if (HEAP8[$3 + 11 | 0] < 0) {
  $2 = HEAP32[$3 >> 2];
 } else {
  $2 = $3;
 }
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = $4;
 global$0 = $0 + 16 | 0;
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const(HEAP32[$0 + 8 >> 2], $2, strlen($2) + $2 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 global$0 = $1 + 32 | 0;
}
function CubeMesher_5_2c_205_2c_20PicArr___create_28MyAllocator__29___lambda__28MyObject__2c_20bool_29__operator_28_29_28MyObject__2c_20bool_29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, Math_fround(HEAP32[$0 >> 2]), Math_fround(HEAP32[$0 + 4 >> 2]), Math_fround(.125), Math_fround(.875), Math_fround(0), Math_fround(.125), Math_fround(0), Math_fround(.875), Math_fround(0), Math_fround(.875), Math_fround(0), Math_fround(.125), HEAPU8[$0 + 8 | 0], $2, 1);
 $4 = Math_fround(HEAP32[$0 >> 2]);
 $5 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $6 = HEAPU8[$0 + 8 | 0];
 $3 = $6 ? Math_fround(.03125) : Math_fround(-.03125);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $4, $5, Math_fround(.125), Math_fround(.03125), Math_fround(0), Math_fround(.125), Math_fround(0), Math_fround(.875), $3, Math_fround(.875), $3, Math_fround(.125), !$6, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $4, $5, Math_fround(.875), Math_fround(.96875), Math_fround(0), Math_fround(.125), Math_fround(0), Math_fround(.875), $3, Math_fround(.875), $3, Math_fround(.125), $6, $2, 0);
 $5 = Math_fround(HEAP32[$0 >> 2]);
 $7 = Math_fround(HEAP32[$0 + 4 >> 2]);
 $4 = $6 ? Math_fround(.125) : Math_fround(-.125);
 $0 = HEAPU8[$0 + 8 | 0];
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(0), Math_fround(.03125), $4, Math_fround(.125), $4, Math_fround(.875), $3, Math_fround(.875), $3, Math_fround(.125), $0, $2, 0);
 addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($1, $5, $7, Math_fround(1), Math_fround(.96875), $4, Math_fround(.125), $4, Math_fround(.875), $3, Math_fround(.875), $3, Math_fround(.125), !$0, $2, 0);
}
function std____2__init_weeks_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[51848] != 0) | HEAP8[51848] & 1)) {
  $0 = 51680;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 51848) {
    continue;
   }
   break;
  }
  HEAP32[12962] = 0;
  HEAP32[12962] = HEAP32[12962] | 1;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51680, 32600);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51692, 32607);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51704, 32614);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51716, 32622);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51728, 32632);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51740, 32641);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51752, 32648);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51764, 32657);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51776, 32661);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51788, 32665);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51800, 32669);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51812, 32673);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51824, 32677);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(51836, 32681);
}
function void_20std____2__vector_Mesh__IdxBuf_2c_20std____2__allocator_Mesh__IdxBuf__20_____push_back_slow_path_Mesh__IdxBuf__28Mesh__IdxBuf___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2];
 $5 = (HEAP32[$0 + 4 >> 2] - $3 | 0) / 20 | 0;
 $2 = $5 + 1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($2 >>> 0 < 214748365) {
     $3 = (HEAP32[$0 + 8 >> 2] - $3 | 0) / 20 | 0;
     $6 = $3 << 1;
     $3 = $3 >>> 0 < 107374182 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 214748364;
     if ($3) {
      if ($3 >>> 0 >= 214748365) {
       break label$3;
      }
      $4 = operator_20new_28unsigned_20long_29(Math_imul($3, 20));
     }
     $2 = Math_imul($5, 20) + $4 | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP8[$2 + 16 | 0] = HEAPU8[$1 + 16 | 0];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     $3 = Math_imul($3, 20) + $4 | 0;
     $5 = $2 + 20 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     $4 = HEAP32[$0 >> 2];
     if (($1 | 0) == ($4 | 0)) {
      break label$2;
     }
     while (1) {
      $2 = $2 + -20 | 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      $1 = $1 + -20 | 0;
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP8[$2 + 16 | 0] = HEAPU8[$1 + 16 | 0];
      if (($1 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
     $4 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[$0 >> 2];
     break label$1;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const();
    abort();
   }
   std____2____throw_length_error_28char_20const__29(15792);
   abort();
  }
  $1 = $4;
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $5;
 if (($1 | 0) != ($4 | 0)) {
  while (1) {
   $0 = $4 + -20 | 0;
   $2 = HEAP32[$0 >> 2];
   if ($2) {
    HEAP32[$4 + -16 >> 2] = $2;
    dlfree($2);
   }
   $4 = $0;
   if (($0 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($1) {
  dlfree($1);
 }
}
function MyObject__clacNormalsExceptTouched_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 if (HEAP32[$0 + 12 >> 2] >= 1) {
  while (1) {
   $3 = $4 << 2;
   MyPolygon__calcNorm_28_29(HEAP32[$3 + HEAP32[$0 >> 2] >> 2]);
   $2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
   $1 = HEAP32[$2 >> 2];
   if (!HEAPU8[$1 + 28 | 0]) {
    HEAPF32[$1 + 12 >> 2] = HEAPF32[$2 + 16 >> 2] + HEAPF32[$1 + 12 >> 2];
    HEAPF32[$1 + 16 >> 2] = HEAPF32[$2 + 20 >> 2] + HEAPF32[$1 + 16 >> 2];
    HEAPF32[$1 + 20 >> 2] = HEAPF32[$2 + 24 >> 2] + HEAPF32[$1 + 20 >> 2];
    $2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
   }
   $1 = HEAP32[$2 + 4 >> 2];
   if (!HEAPU8[$1 + 28 | 0]) {
    HEAPF32[$1 + 12 >> 2] = HEAPF32[$2 + 16 >> 2] + HEAPF32[$1 + 12 >> 2];
    HEAPF32[$1 + 16 >> 2] = HEAPF32[$2 + 20 >> 2] + HEAPF32[$1 + 16 >> 2];
    HEAPF32[$1 + 20 >> 2] = HEAPF32[$2 + 24 >> 2] + HEAPF32[$1 + 20 >> 2];
    $2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
   }
   $1 = HEAP32[$2 + 8 >> 2];
   if (!HEAPU8[$1 + 28 | 0]) {
    HEAPF32[$1 + 12 >> 2] = HEAPF32[$2 + 16 >> 2] + HEAPF32[$1 + 12 >> 2];
    HEAPF32[$1 + 16 >> 2] = HEAPF32[$2 + 20 >> 2] + HEAPF32[$1 + 16 >> 2];
    HEAPF32[$1 + 20 >> 2] = HEAPF32[$2 + 24 >> 2] + HEAPF32[$1 + 20 >> 2];
    $2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
   }
   $1 = HEAP32[$2 + 12 >> 2];
   if (!HEAPU8[$1 + 28 | 0]) {
    HEAPF32[$1 + 12 >> 2] = HEAPF32[$2 + 16 >> 2] + HEAPF32[$1 + 12 >> 2];
    HEAPF32[$1 + 16 >> 2] = HEAPF32[$2 + 20 >> 2] + HEAPF32[$1 + 16 >> 2];
    HEAPF32[$1 + 20 >> 2] = HEAPF32[$2 + 24 >> 2] + HEAPF32[$1 + 20 >> 2];
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < HEAP32[$0 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[$0 + 20 >> 2] >= 1) {
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = 0;
  while (1) {
   $3 = $2 << 2;
   $1 = HEAP32[$3 + $1 >> 2];
   $5 = HEAPF32[$1 + 12 >> 2];
   $6 = HEAPF32[$1 + 16 >> 2];
   $7 = HEAPF32[$1 + 20 >> 2];
   $8 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($7 * $7))));
   HEAPF32[$1 + 20 >> 2] = $7 / $8;
   HEAPF32[$1 + 16 >> 2] = $6 / $8;
   HEAPF32[$1 + 12 >> 2] = $5 / $8;
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP8[HEAP32[$3 + $1 >> 2] + 28 | 0] = 0;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 20 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $4 = $3 & 2147483647;
 $8 = $4;
 $4 = $4 + -1006698496 | 0;
 $7 = $2;
 $5 = $2;
 if ($2 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $9 = $5;
 $5 = $4;
 $4 = $8 + -1140785152 | 0;
 $10 = $7;
 if ($7 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 label$1 : {
  if (($4 | 0) == ($5 | 0) & $9 >>> 0 < $10 >>> 0 | $5 >>> 0 < $4 >>> 0) {
   $4 = $3 << 4 | $2 >>> 28;
   $2 = $2 << 4 | $1 >>> 28;
   $1 = $1 & 268435455;
   $7 = $1;
   if (($1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1 >>> 0 > 134217728) {
    $4 = $4 + 1073741824 | 0;
    $0 = $2 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4 = $4 + 1 | 0;
    }
    $5 = $0;
    break label$1;
   }
   $5 = $2;
   $4 = $4 - (($2 >>> 0 < 0) + -1073741824 | 0) | 0;
   if ($0 | $7 ^ 134217728) {
    break label$1;
   }
   $0 = $5 + ($5 & 1) | 0;
   if ($0 >>> 0 < $5 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if (!(!$7 & ($8 | 0) == 2147418112 ? !($0 | $1) : ($8 | 0) == 2147418112 & $7 >>> 0 < 0 | $8 >>> 0 < 2147418112)) {
   $4 = $3 << 4 | $2 >>> 28;
   $5 = $2 << 4 | $1 >>> 28;
   $4 = $4 & 524287 | 2146959360;
   break label$1;
  }
  $5 = 0;
  $4 = 2146435072;
  if (($8 | 0) == 1140785151 & $7 >>> 0 > 4294967295 | $8 >>> 0 > 1140785151) {
   break label$1;
  }
  $4 = 0;
  $7 = $8 >>> 16;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $4 = $3 & 65535 | 65536;
  __lshrti3($6, $0, $1, $2, $4, 15361 - $7 | 0);
  __ashlti3($6 + 16 | 0, $0, $1, $2, $4, $7 + -15233 | 0);
  $2 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$6 + 8 >> 2];
  $4 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
  $5 = $0 << 4 | $2 >>> 28;
  $0 = $2 & 268435455;
  $2 = $0;
  $1 = HEAP32[$6 >> 2] | ((HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2]) != 0 | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2]) != 0);
  if (($0 | 0) == 134217728 & $1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
   $0 = $5 + 1 | 0;
   if ($0 >>> 0 < 1) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if ($1 | $2 ^ 134217728) {
   break label$1;
  }
  $0 = $5 + ($5 & 1) | 0;
  if ($0 >>> 0 < $5 >>> 0) {
   $4 = $4 + 1 | 0;
  }
  $5 = $0;
 }
 global$0 = $6 + 32 | 0;
 $0 = $3 & -2147483648 | $4;
 wasm2js_scratch_store_i32(0, $5 | 0);
 wasm2js_scratch_store_i32(1, $0 | 0);
 return +wasm2js_scratch_load_f64();
}
function void_20std____2__vector_Shape__CornerDef_2c_20std____2__allocator_Shape__CornerDef__20_____push_back_slow_path_Shape__CornerDef__28Shape__CornerDef___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 $6 = HEAP32[$0 >> 2];
 $4 = ($3 - $6 | 0) / 40 | 0;
 $2 = $4 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 < 107374183) {
   $7 = Math_imul($4, 40);
   $5 = (HEAP32[$0 + 8 >> 2] - $6 | 0) / 40 | 0;
   $4 = $5 << 1;
   $5 = $5 >>> 0 < 53687091 ? $4 >>> 0 < $2 >>> 0 ? $2 : $4 : 107374182;
   $2 = 0;
   label$3 : {
    if (!$5) {
     break label$3;
    }
    if ($5 >>> 0 >= 107374183) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29(Math_imul($5, 40));
   }
   $8 = $2;
   $2 = $7 + $2 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 16 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 16 >> 2] = $4;
   $4 = HEAP32[$1 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
   HEAP32[$2 + 24 >> 2] = $4;
   $4 = HEAP32[$1 + 32 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
   HEAP32[$2 + 32 >> 2] = $4;
   HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
   $1 = $2 + 40 | 0;
   if (($3 | 0) != ($6 | 0)) {
    while (1) {
     $2 = $2 + -40 | 0;
     $3 = $3 + -40 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $4 = HEAP32[$3 + 16 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = $4;
     $4 = HEAP32[$3 + 24 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = $4;
     $4 = HEAP32[$3 + 32 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = $4;
     HEAP32[$2 + 36 >> 2] = HEAP32[$3 + 36 >> 2];
     if (($3 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    $3 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $8 + Math_imul($5, 40);
   HEAP32[$0 + 4 >> 2] = $1;
   if ($3) {
    dlfree($3);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 28 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$1 + 28 >> 2];
  if ($3 + -1 >>> 0 >= HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0) {
   break label$1;
  }
  $2 = $1 + 16 | 0;
  $4 = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $4 + $3;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $3;
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 8 | 0, 37254);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($2, $1)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 37265);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $2);
 }
 global$0 = $1 + 32 | 0;
 return $2;
}
function BaseGLWidget__reCalcProj_28_29($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $5 = HEAP32[$0 + 288 >> 2];
 $2 = +($5 | 0);
 $9 = HEAP32[$0 + 292 >> 2];
 $3 = +($9 | 0);
 HEAPF64[$0 + 296 >> 3] = $2 / $3;
 $1 = Math_fround(HEAP32[$0 + 252 >> 2]);
 $4 = Math_fround(HEAPF32[$0 + 272 >> 2] - HEAPF32[$0 + 260 >> 2]);
 $6 = +($4 < $1 ? $1 : $4);
 $7 = 4 / $6;
 $4 = Math_fround(HEAPF32[$0 + 276 >> 2] - HEAPF32[$0 + 264 >> 2]);
 $10 = +($4 < $1 ? $1 : $4);
 $8 = 4 / $10;
 $7 = $7 < $8 ? $7 : $8;
 $4 = Math_fround(HEAPF32[$0 + 280 >> 2] - HEAPF32[$0 + 268 >> 2]);
 $8 = +($4 < $1 ? $1 : $4);
 $11 = 4 / $8;
 HEAPF64[$0 + 344 >> 3] = ($7 < $11 ? $7 : $11) * .7;
 $6 = $2 / $6;
 $3 = $3 / $10;
 $3 = $6 < $3 ? $6 : $3;
 $2 = $2 / $8;
 HEAPF64[$0 + 352 >> 3] = ($3 < $2 ? $3 : $2) * .7;
 glViewport(0, 0, $5 | 0, $9 | 0);
 $2 = HEAPF64[$0 + 296 >> 3];
 if ($2 != 0) {
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 1071494103;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = -1072809756;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = -1080266297;
  HEAP32[$0 + 72 >> 2] = -1082130432;
  HEAPF32[$0 + 28 >> 2] = 1.7320508075688776 / $2;
 }
 $5 = $0 + 28 | 0;
 Mat4__translate_28float_2c_20float_2c_20float_29($5, Math_fround(0), Math_fround(0), Math_fround(-4));
 $1 = Math_fround(HEAPF64[$0 + 344 >> 3]);
 MatStack__scale_28float_2c_20float_2c_20float_29($5, $1, $1, $1);
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 188 >> 2] = 1071494103;
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 212 >> 2] = 0;
 HEAP32[$0 + 216 >> 2] = 0;
 HEAP32[$0 + 208 >> 2] = 1071494103;
 HEAP32[$0 + 220 >> 2] = 0;
 HEAP32[$0 + 224 >> 2] = 0;
 HEAP32[$0 + 244 >> 2] = -1072809756;
 HEAP32[$0 + 248 >> 2] = 0;
 HEAP32[$0 + 236 >> 2] = 0;
 HEAP32[$0 + 240 >> 2] = 0;
 HEAP32[$0 + 228 >> 2] = -1080266297;
 HEAP32[$0 + 232 >> 2] = -1082130432;
 Mat4__translate_28float_2c_20float_2c_20float_29($0 + 188 | 0, Math_fround(0), Math_fround(0), Math_fround(-4));
}
function std____2____tree_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2____map_value_compare_unsigned_20short_2c_20std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2__less_unsigned_20short__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2____map_value_compare_unsigned_20short_2c_20std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2__less_unsigned_20short__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2____map_value_compare_unsigned_20short_2c_20std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20std____2__less_unsigned_20short__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20short_2c_20std____2__unique_ptr_PicDisp_2c_20std____2__default_delete_PicDisp__20__20__2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  $0 = HEAP32[$1 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = 0;
  if ($0) {
   Mesh___Mesh_28_29($0);
   dlfree($0);
  }
  dlfree($1);
 }
}
function wcsrtombs($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($0) {
      if ($2 >>> 0 >= 4) {
       break label$4;
      }
      $3 = $2;
      break label$3;
     }
     $2 = 0;
     $0 = HEAP32[$1 >> 2];
     $3 = HEAP32[$0 >> 2];
     if (!$3) {
      break label$1;
     }
     while (1) {
      $5 = 1;
      if ($3 >>> 0 >= 128) {
       $6 = -1;
       $5 = wcrtomb($7 + 12 | 0, $3);
       if (($5 | 0) == -1) {
        break label$1;
       }
      }
      $3 = HEAP32[$0 + 4 >> 2];
      $0 = $0 + 4 | 0;
      $2 = $2 + $5 | 0;
      $6 = $2;
      if ($3) {
       continue;
      }
      break;
     }
     break label$1;
    }
    $5 = HEAP32[$1 >> 2];
    $3 = $2;
    while (1) {
     $4 = HEAP32[$5 >> 2];
     label$9 : {
      if ($4 + -1 >>> 0 >= 127) {
       if (!$4) {
        HEAP8[$0 | 0] = 0;
        HEAP32[$1 >> 2] = 0;
        break label$2;
       }
       $6 = -1;
       $4 = wcrtomb($0, $4);
       if (($4 | 0) == -1) {
        break label$1;
       }
       $3 = $3 - $4 | 0;
       $0 = $0 + $4 | 0;
       break label$9;
      }
      HEAP8[$0 | 0] = $4;
      $3 = $3 + -1 | 0;
      $5 = HEAP32[$1 >> 2];
      $0 = $0 + 1 | 0;
     }
     $5 = $5 + 4 | 0;
     HEAP32[$1 >> 2] = $5;
     if ($3 >>> 0 > 3) {
      continue;
     }
     break;
    }
   }
   if ($3) {
    $5 = HEAP32[$1 >> 2];
    while (1) {
     $4 = HEAP32[$5 >> 2];
     label$14 : {
      if ($4 + -1 >>> 0 >= 127) {
       if (!$4) {
        HEAP8[$0 | 0] = 0;
        HEAP32[$1 >> 2] = 0;
        break label$2;
       }
       $6 = -1;
       $4 = wcrtomb($7 + 12 | 0, $4);
       if (($4 | 0) == -1) {
        break label$1;
       }
       if ($3 >>> 0 < $4 >>> 0) {
        break label$2;
       }
       wcrtomb($0, HEAP32[$5 >> 2]);
       $3 = $3 - $4 | 0;
       $0 = $0 + $4 | 0;
       break label$14;
      }
      HEAP8[$0 | 0] = $4;
      $3 = $3 + -1 | 0;
      $5 = HEAP32[$1 >> 2];
      $0 = $0 + 1 | 0;
     }
     $5 = $5 + 4 | 0;
     HEAP32[$1 >> 2] = $5;
     if ($3) {
      continue;
     }
     break;
    }
   }
   $6 = $2;
   break label$1;
  }
  $6 = $2 - $3 | 0;
 }
 global$0 = $7 + 16 | 0;
 return $6;
}
function void_20std____2__vector_CompRef_2c_20std____2__allocator_CompRef__20_____push_back_slow_path_CompRef__28CompRef___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2];
 $5 = HEAP32[$0 + 4 >> 2] - $3 >> 4;
 $2 = $5 + 1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($2 >>> 0 < 268435456) {
     $3 = HEAP32[$0 + 8 >> 2] - $3 | 0;
     $6 = $3 >> 3;
     $3 = $3 >> 4 >>> 0 < 134217727 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 268435455;
     if ($3) {
      if ($3 >>> 0 >= 268435456) {
       break label$3;
      }
      $4 = operator_20new_28unsigned_20long_29($3 << 4);
     }
     $2 = ($5 << 4) + $4 | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$1 + 12 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     HEAP32[$1 + 8 >> 2] = 0;
     $3 = ($3 << 4) + $4 | 0;
     $5 = $2 + 16 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     $4 = HEAP32[$0 >> 2];
     if (($1 | 0) == ($4 | 0)) {
      break label$2;
     }
     while (1) {
      $1 = $1 + -16 | 0;
      $6 = HEAP32[$1 >> 2];
      $2 = $2 + -16 | 0;
      HEAP32[$2 + 12 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$2 >> 2] = $6;
      HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[$1 + 12 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP32[$1 + 8 >> 2] = 0;
      if (($1 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
     $4 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[$0 >> 2];
     break label$1;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const();
    abort();
   }
   std____2____throw_length_error_28char_20const__29(15792);
   abort();
  }
  $1 = $4;
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $5;
 if (($1 | 0) != ($4 | 0)) {
  while (1) {
   $0 = HEAP32[$4 + -12 >> 2];
   if ($0) {
    HEAP32[$4 + -8 >> 2] = $0;
    dlfree($0);
   }
   $0 = $4 + -16 | 0;
   $4 = $0;
   if (($0 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($1) {
  dlfree($1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 $4 = HEAP32[$1 + 4 >> 2];
 $2 = 0;
 label$1 : {
  if (!$4) {
   break label$1;
  }
  $2 = HEAPU8[($4 + HEAP32[$1 >> 2] | 0) + -1 | 0];
 }
 if (($2 | 0) != 93) {
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 56 | 0, 41284);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 24 | 0);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 48 | 0, 43300);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 16 | 0);
 $2 = $0 + 12 | 0;
 $4 = 0;
 label$4 : {
  if (!HEAP32[$2 + 4 >> 2]) {
   break label$4;
  }
  $4 = HEAP32[$2 >> 2];
 }
 label$3 : {
  if ($4) {
   $4 = HEAP32[$2 >> 2];
   HEAP32[$3 + 44 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 + 40 >> 2] = $4;
   $2 = HEAP32[$3 + 44 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 12 >> 2] = $2;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
   break label$3;
  }
  if (HEAP32[$2 >> 2]) {
   $4 = !HEAP32[$2 + 4 >> 2];
  } else {
   $4 = 0;
  }
  if (!$4) {
   break label$3;
  }
  $2 = HEAP32[$2 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  if (HEAPU8[$2 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
  }
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 32 | 0, 38575);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 global$0 = $3 - -64 | 0;
}
function aboutContinue_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 176 | 0;
 global$0 = $3;
 $5 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 >> 2];
 $4 = HEAPU8[$0 + 11 | 0];
 HEAP8[$3 + 136 | 0] = 0;
 $1 = $3;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = -1009589776;
 HEAP32[$1 + 8 >> 2] = -1732584194;
 HEAP32[$1 + 12 >> 2] = 271733878;
 HEAP32[$1 >> 2] = 1732584193;
 HEAP32[$1 + 4 >> 2] = -271733879;
 $6 = $0;
 $0 = $4 << 24 >> 24 < 0;
 SHA1__addBytes_28char_20const__2c_20int_29($1, $0 ? $2 : $6, $0 ? $5 : $4);
 SHA1__getDigest_28unsigned_20char__2c_20int_29($1, $1 + 144 | 0);
 SHA1__hexPrinter_28unsigned_20char__2c_20int_2c_20char__29($1 + 144 | 0, $1 + 96 | 0);
 $0 = SHA1___SHA1_28_29($1);
 $2 = $0;
 HEAP32[$2 + 84 >> 2] = 0;
 HEAP32[$2 + 88 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = -1009589776;
 HEAP32[$2 + 8 >> 2] = -1732584194;
 HEAP32[$2 + 12 >> 2] = 271733878;
 HEAP32[$2 >> 2] = 1732584193;
 HEAP32[$2 + 4 >> 2] = -271733879;
 SHA1__addBytes_28char_20const__2c_20int_29($2, $1 + 144 | 0, 20);
 SHA1__getDigest_28unsigned_20char__2c_20int_29($2, $1 + 144 | 0);
 SHA1__hexPrinter_28unsigned_20char__2c_20int_2c_20char__29($1 + 144 | 0, $1 + 96 | 0);
 $0 = SHA1___SHA1_28_29($2);
 $2 = $0;
 HEAP32[$2 + 84 >> 2] = 0;
 HEAP32[$2 + 88 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = -1009589776;
 HEAP32[$2 + 8 >> 2] = -1732584194;
 HEAP32[$2 + 12 >> 2] = 271733878;
 HEAP32[$2 >> 2] = 1732584193;
 HEAP32[$2 + 4 >> 2] = -271733879;
 SHA1__addBytes_28char_20const__2c_20int_29($2, $1 + 144 | 0, 20);
 SHA1__getDigest_28unsigned_20char__2c_20int_29($2, $1 + 144 | 0);
 SHA1__hexPrinter_28unsigned_20char__2c_20int_2c_20char__29($1 + 144 | 0, $1 + 96 | 0);
 SHA1___SHA1_28_29($2);
 if (!memcmp($1 + 96 | 0)) {
  emscripten_asm_const_iii(1895, 1076, 0) | 0;
 }
 global$0 = $3 + 176 | 0;
}
function Shape__make_sides_facenei_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $2 = HEAP32[$0 + 12 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!$2) {
    $2 = 0;
    break label$2;
   }
   if ($2 >>> 0 >= 1073741824) {
    break label$1;
   }
   $3 = $2 << 2;
   $5 = operator_20new_28unsigned_20long_29($3);
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $5;
   HEAP32[$4 + 8 >> 2] = $3 + $5;
   $1 = memset($5, 0, $3);
   $3 = $2;
   while (1) {
    $1 = $1 + 4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue;
    }
    break;
   }
   HEAP32[$4 + 4 >> 2] = $1;
   if (($2 | 0) < 1) {
    break label$2;
   }
   $3 = HEAP32[$0 + 28 >> 2];
   $1 = 0;
   while (1) {
    $2 = $3 + Math_imul($1, 188) | 0;
    HEAP32[$2 + 52 >> 2] = -1;
    HEAP32[$2 + 56 >> 2] = -1;
    HEAP32[$2 + 44 >> 2] = -1;
    HEAP32[$2 + 48 >> 2] = -1;
    $1 = $1 + 1 | 0;
    $2 = HEAP32[$0 + 12 >> 2];
    if (($1 | 0) < ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  if (HEAP32[$0 + 16 >> 2] >= 1) {
   $9 = HEAP32[$0 + 32 >> 2];
   $2 = HEAP32[$0 + 28 >> 2];
   $1 = 0;
   while (1) {
    $6 = $9 + Math_imul($1, 24) | 0;
    $7 = HEAP32[$6 + 16 >> 2];
    $8 = ($7 << 2) + $5 | 0;
    $3 = HEAP32[$8 >> 2];
    HEAP32[$8 >> 2] = $3 + 1;
    HEAP32[(($2 + Math_imul($7, 188) | 0) + ($3 << 2) | 0) + 44 >> 2] = $1;
    $6 = HEAP32[$6 + 20 >> 2];
    $7 = ($6 << 2) + $5 | 0;
    $3 = HEAP32[$7 >> 2];
    HEAP32[$7 >> 2] = $3 + 1;
    HEAP32[(($2 + Math_imul($6, 188) | 0) + ($3 << 2) | 0) + 44 >> 2] = $1;
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 16 >> 2]) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 12 >> 2];
  }
  if (($2 | 0) >= 1) {
   $1 = 0;
   while (1) {
    Shape__faceNei_28int_2c_20int__29($0, $1, (HEAP32[$0 + 28 >> 2] + Math_imul($1, 188) | 0) + 60 | 0);
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 12 >> 2]) {
     continue;
    }
    break;
   }
  }
  if ($5) {
   HEAP32[$4 + 4 >> 2] = $5;
   dlfree($5);
  }
  global$0 = $4 + 16 | 0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function filterOnlySinglePiecePerFam_28SlvCube__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $4 = $3 | 4;
 HEAP32[$3 >> 2] = $4;
 $5 = HEAP32[$0 >> 2];
 $7 = HEAP32[$0 + 4 >> 2];
 $0 = 1;
 label$1 : {
  if (($5 | 0) == ($7 | 0)) {
   break label$1;
  }
  while (1) {
   $6 = HEAP32[HEAP32[HEAP32[11988] + 16 >> 2] + Math_imul(HEAP32[$5 >> 2], 652) >> 2];
   $1 = $4;
   $0 = $2;
   label$4 : {
    if (!$2) {
     $2 = $4;
     $0 = $2;
     break label$4;
    }
    while (1) {
     $8 = HEAP32[$0 + 16 >> 2] < ($6 | 0);
     $1 = $8 ? $1 : $0;
     $0 = HEAP32[($8 << 2) + $0 >> 2];
     if ($0) {
      continue;
     }
     break;
    }
    $0 = 0;
    if (!(($1 | 0) == ($4 | 0) | ($6 | 0) < HEAP32[$1 + 16 >> 2])) {
     break label$1;
    }
    $0 = $4;
    while (1) {
     $1 = HEAP32[$2 + 16 >> 2];
     label$9 : {
      if (($6 | 0) < ($1 | 0)) {
       $1 = HEAP32[$2 >> 2];
       if ($1) {
        break label$9;
       }
       $0 = $2;
       break label$4;
      }
      if (($1 | 0) >= ($6 | 0)) {
       break label$4;
      }
      $0 = $2 + 4 | 0;
      $1 = HEAP32[$2 + 4 >> 2];
      if (!$1) {
       break label$4;
      }
      $2 = $0;
     }
     $0 = $2;
     $2 = $1;
     continue;
    }
   }
   if (!HEAP32[$0 >> 2]) {
    $1 = operator_20new_28unsigned_20long_29(20);
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 16 >> 2] = $6;
    HEAP32[$0 >> 2] = $1;
    $2 = HEAP32[HEAP32[$3 >> 2] >> 2];
    if ($2) {
     HEAP32[$3 >> 2] = $2;
     $1 = HEAP32[$0 >> 2];
    }
    void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$3 + 4 >> 2], $1);
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
   }
   $2 = HEAP32[$3 + 4 >> 2];
   $5 = $5 + 8 | 0;
   if (($7 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
  $0 = 1;
 }
 std____2____tree_int_2c_20std____2__less_int__2c_20std____2__allocator_int__20___destroy_28std____2____tree_node_int_2c_20void____29($3, $2);
 global$0 = $3 + 16 | 0;
 return $0;
}
function UniformParam__getLocation_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $2 = HEAPU8[$0 + 19 | 0];
 $3 = $2 << 24 >> 24;
 if (($3 | 0) <= -1) {
  $2 = HEAP32[$0 + 12 >> 2];
 }
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $2 = $0 + 8 | 0;
  $5 = $0;
  if (($3 | 0) <= -1) {
   $3 = HEAP32[$2 >> 2];
  } else {
   $3 = $2;
  }
  $1 = glGetUniformLocation($1 | 0, $3 | 0) | 0;
  HEAP32[$5 + 4 >> 2] = $1;
  if (($1 | 0) != -1) {
   break label$1;
  }
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4460, 18);
  $5 = $2;
  $2 = HEAPU8[$0 + 19 | 0];
  $1 = $2 << 24 >> 24 < 0;
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($3, $1 ? HEAP32[$0 + 8 >> 2] : $5, $1 ? HEAP32[$0 + 12 >> 2] : $2), 4479, 17);
  $0 = HEAP32[(HEAP32[HEAP32[$3 >> 2] + -12 >> 2] + $3 | 0) + 28 >> 2];
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 51440);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, 10) | 0;
  $2 = HEAP32[$4 + 8 >> 2];
  $1 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $1;
  if (($1 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $0);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 }
 global$0 = $4 + 16 | 0;
}
function AttribParam__getLocation_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $2 = HEAPU8[$0 + 19 | 0];
 $3 = $2 << 24 >> 24;
 if (($3 | 0) <= -1) {
  $2 = HEAP32[$0 + 12 >> 2];
 }
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $2 = $0 + 8 | 0;
  $5 = $0;
  if (($3 | 0) <= -1) {
   $3 = HEAP32[$2 >> 2];
  } else {
   $3 = $2;
  }
  $1 = glGetAttribLocation($1 | 0, $3 | 0) | 0;
  HEAP32[$5 + 4 >> 2] = $1;
  if (($1 | 0) != -1) {
   break label$1;
  }
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 4497, 20);
  $5 = $2;
  $2 = HEAPU8[$0 + 19 | 0];
  $1 = $2 << 24 >> 24 < 0;
  $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($3, $1 ? HEAP32[$0 + 8 >> 2] : $5, $1 ? HEAP32[$0 + 12 >> 2] : $2), 4479, 17);
  $0 = HEAP32[(HEAP32[HEAP32[$3 >> 2] + -12 >> 2] + $3 | 0) + 28 >> 2];
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 51440);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, 10) | 0;
  $2 = HEAP32[$4 + 8 >> 2];
  $1 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $1;
  if (($1 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $0);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 }
 global$0 = $4 + 16 | 0;
}
function Cube__makePossibilities2_28int_2c_20ShapePlace__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $7 = Cube__getCurrentCirc_28int_29($0, $1);
 $8 = Math_imul($1, 188);
 $9 = HEAPU16[($8 + HEAP32[HEAP32[$0 + 36 >> 2] + 28 >> 2] | 0) + 24 >> 1];
 $1 = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 44 >> 2] = $1;
 $4 = $1;
 $3 = HEAP32[$0 + 32 >> 2];
 $3 = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 24 >> 2] | 0;
 if (($3 | 0) >= 1) {
  $11 = $2 + 40 | 0;
  $12 = $3 >> 4;
  $4 = 0;
  while (1) {
   $1 = HEAP32[$0 + 72 >> 2] + ($4 << 3) | 0;
   label$3 : {
    if (HEAP32[$1 >> 2] >= HEAP32[$1 + 4 >> 2]) {
     break label$3;
    }
    $3 = HEAP32[HEAP32[11988] + 76 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$0 + 32 >> 2] + 24 >> 2] + ($4 << 4) >> 2], 324) | 0;
    $10 = HEAP32[$3 >> 2];
    if (($10 | 0) < 1) {
     break label$3;
    }
    $1 = 0;
    while (1) {
     $6 = HEAPU16[($3 + ($1 << 1) | 0) + 260 >> 1];
     label$5 : {
      if ($6 & $7 | (($6 | $7) & $9) != ($9 | 0) | (HEAPU8[($3 + ($1 << 5) | 0) + 29 | 0] == (HEAP32[(HEAP32[HEAP32[$0 + 36 >> 2] + 28 >> 2] + $8 | 0) + 16 >> 2] == (HEAP32[$0 + 28 >> 2] != 1 | 0) | 0) ? !(!HEAPU8[HEAP32[$0 + 32 >> 2] + 40 | 0] | !HEAPU8[$3 + 308 | 0]) : 0)) {
       break label$5;
      }
      HEAP32[$5 + 12 >> 2] = $1;
      HEAP32[$5 + 8 >> 2] = $4;
      $6 = HEAP32[$2 + 44 >> 2];
      if ($6 >>> 0 < HEAPU32[$2 + 48 >> 2]) {
       $13 = HEAP32[$5 + 12 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$5 + 8 >> 2];
       HEAP32[$6 + 4 >> 2] = $13;
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 8;
       break label$5;
      }
      void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($11, $5 + 8 | 0);
     }
     $1 = $1 + 1 | 0;
     if (($10 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($12 | 0)) {
    continue;
   }
   break;
  }
  $4 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$2 + 44 >> 2];
 }
 global$0 = $5 + 16 | 0;
 return ($1 | 0) != ($4 | 0);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP16[$0 + 28 >> 1] = HEAPU8[27680] | HEAPU8[27681] << 8;
 HEAP32[$0 + 24 >> 2] = HEAPU8[27676] | HEAPU8[27677] << 8 | (HEAPU8[27678] << 16 | HEAPU8[27679] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27668, 1, HEAP32[$2 + 4 >> 2]);
 $6 = HEAP32[$2 + 4 >> 2];
 $5 = $0 + -16 | 0;
 global$0 = $5;
 $7 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $4 = $6 >>> 9 & 1;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $4 + 13 | 0, $7, $0 + 24 | 0, $0) + $5 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $7, $2);
 $6 = $5 - (($4 << 3 | 96) + 11 & 112) | 0;
 global$0 = $6;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($5, $8, $7, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function Quaternion__slerp_28Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
 $10 = HEAPF32[$1 + 4 >> 2];
 $5 = HEAPF32[$2 + 4 >> 2];
 $11 = HEAPF32[$1 + 8 >> 2];
 $9 = HEAPF32[$2 + 8 >> 2];
 $8 = HEAPF32[$1 + 12 >> 2];
 $6 = HEAPF32[$2 + 12 >> 2];
 $12 = HEAPF32[$1 >> 2];
 $7 = HEAPF32[$2 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $5) + Math_fround($11 * $9)) + Math_fround($8 * $6)) + Math_fround($12 * $7));
 if (!!($4 < Math_fround(0))) {
  $6 = Math_fround(-$6);
  $9 = Math_fround(-$9);
  $5 = Math_fround(-$5);
  $7 = Math_fround(-$7);
  $4 = Math_fround(-$4);
 }
 if (!!(+Math_fround(Math_abs($4)) < .999)) {
  $13 = Math_fround(Math_sqrt(Math_fround(Math_fround(1) - Math_fround($4 * $4))));
  $4 = atan2f($13, $4);
  $14 = sinf(Math_fround($4 * $3));
  $15 = $8;
  $8 = Math_fround(Math_fround(1) / $13);
  $3 = Math_fround($8 * sinf(Math_fround($4 * Math_fround(Math_fround(1) - $3))));
  $4 = Math_fround($8 * $14);
  HEAPF32[$0 + 12 >> 2] = Math_fround($15 * $3) + Math_fround($6 * $4);
  HEAPF32[$0 + 8 >> 2] = Math_fround($11 * $3) + Math_fround($9 * $4);
  HEAPF32[$0 + 4 >> 2] = Math_fround($10 * $3) + Math_fround($5 * $4);
  HEAPF32[$0 >> 2] = Math_fround($12 * $3) + Math_fround($7 * $4);
  return;
 }
 $4 = Math_fround(Math_fround(1) - $3);
 $6 = Math_fround(Math_fround($4 * $8) + Math_fround($6 * $3));
 $7 = Math_fround(Math_fround($4 * $12) + Math_fround($7 * $3));
 $5 = Math_fround(Math_fround($4 * $10) + Math_fround($5 * $3));
 $4 = Math_fround(Math_fround($4 * $11) + Math_fround($9 * $3));
 $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5)) + Math_fround($4 * $4)) + Math_fround($6 * $6)))));
 HEAPF32[$0 + 12 >> 2] = $6 * $3;
 HEAPF32[$0 + 8 >> 2] = $4 * $3;
 HEAPF32[$0 + 4 >> 2] = $5 * $3;
 HEAPF32[$0 >> 2] = $7 * $3;
}
function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 HEAP32[$10 + 12 >> 2] = $0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (HEAP32[$3 >> 2] != ($2 | 0)) {
      break label$4;
     }
     $11 = HEAP32[$9 + 96 >> 2] == ($0 | 0);
     if (HEAP32[$9 + 100 >> 2] != ($0 | 0) ? !$11 : 0) {
      break label$4;
     }
     HEAP32[$3 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $11 ? 43 : 45;
     break label$3;
    }
    if (HEAP8[$6 + 11 | 0] < 0) {
     $6 = HEAP32[$6 + 4 >> 2];
    } else {
     $6 = HEAPU8[$6 + 11 | 0];
    }
    if (!$6 | ($0 | 0) != ($5 | 0)) {
     break label$2;
    }
    $0 = 0;
    $1 = HEAP32[$8 >> 2];
    if (($1 - $7 | 0) > 159) {
     break label$1;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$8 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $0;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
   break label$1;
  }
  $0 = -1;
  $6 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0) - $9 | 0;
  if (($6 | 0) > 92) {
   break label$1;
  }
  $5 = $6 >> 2;
  $7 = $1 + -8 | 0;
  label$8 : {
   if ($7 >>> 0 > 2) {
    if (($1 | 0) != 16 | ($6 | 0) < 88) {
     break label$8;
    }
    $1 = HEAP32[$3 >> 2];
    if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 + -1 | 0] != 48) {
     break label$1;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$3 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = HEAPU8[$5 + 27632 | 0];
    break label$1;
   }
   if (!($7 - 1)) {
    break label$8;
   }
   if (($5 | 0) >= ($1 | 0)) {
    break label$1;
   }
  }
  $0 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = HEAPU8[$5 + 27632 | 0];
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
  $0 = 0;
 }
 global$0 = $10 + 16 | 0;
 return $0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP16[$0 + 28 >> 1] = HEAPU8[27680] | HEAPU8[27681] << 8;
 HEAP32[$0 + 24 >> 2] = HEAPU8[27676] | HEAPU8[27677] << 8 | (HEAPU8[27678] << 16 | HEAPU8[27679] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27668, 0, HEAP32[$2 + 4 >> 2]);
 $6 = HEAP32[$2 + 4 >> 2];
 $5 = $0 + -16 | 0;
 global$0 = $5;
 $7 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $7, $2);
 $6 = $5 + -96 | 0;
 global$0 = $6;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($5, $8, $7, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, $12 = 0;
 $10 = global$0 - 16 | 0;
 global$0 = $10;
 HEAP8[$10 + 15 | 0] = $0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (HEAP32[$3 >> 2] != ($2 | 0)) {
      break label$4;
     }
     $11 = $0 & 255;
     $12 = ($11 | 0) == HEAPU8[$9 + 24 | 0];
     if (HEAPU8[$9 + 25 | 0] != ($11 | 0) ? !$12 : 0) {
      break label$4;
     }
     HEAP32[$3 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $12 ? 43 : 45;
     break label$3;
    }
    if (HEAP8[$6 + 11 | 0] < 0) {
     $6 = HEAP32[$6 + 4 >> 2];
    } else {
     $6 = HEAPU8[$6 + 11 | 0];
    }
    if (!$6 | ($0 | 0) != ($5 | 0)) {
     break label$2;
    }
    $0 = 0;
    $1 = HEAP32[$8 >> 2];
    if (($1 - $7 | 0) > 159) {
     break label$1;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$8 >> 2] = $1 + 4;
    HEAP32[$1 >> 2] = $0;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
   break label$1;
  }
  $0 = -1;
  $5 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0) - $9 | 0;
  if (($5 | 0) > 23) {
   break label$1;
  }
  $6 = $1 + -8 | 0;
  label$8 : {
   if ($6 >>> 0 > 2) {
    if (($1 | 0) != 16 | ($5 | 0) < 22) {
     break label$8;
    }
    $1 = HEAP32[$3 >> 2];
    if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 + -1 | 0] != 48) {
     break label$1;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$3 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = HEAPU8[$5 + 27632 | 0];
    break label$1;
   }
   if (!($6 - 1)) {
    break label$8;
   }
   if (($5 | 0) >= ($1 | 0)) {
    break label$1;
   }
  }
  $0 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = HEAPU8[$5 + 27632 | 0];
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
  $0 = 0;
 }
 global$0 = $10 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $6 = $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 48 | 0, $1 + 12 | 0);
 $7 = $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 32 | 0, $1 + 16 | 0);
 $4 = HEAP32[$1 + 4 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = 1;
 $8 = HEAP32[$1 + 16 >> 2];
 $5 = $8 + 1 | 0;
 label$2 : {
  if ($5 >>> 0 > 1) {
   while (1) {
    if ($3 >>> 0 >= $8 >>> 0) {
     break label$2;
    }
    $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 36592);
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
    HEAP32[$1 + 12 >> 2] = $3;
    $4 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
    if (HEAPU8[$4 + 5 | 0] != 1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, $1);
    }
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  if (!($5 - 1)) {
   HEAP32[$1 + 4 >> 2] = $4;
   break label$2;
  }
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 36588);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 if (HEAPU8[$7 + 8 | 0]) {
  HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$7 + 4 >> 2];
 }
 if (HEAPU8[$6 + 8 | 0]) {
  HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$6 + 4 >> 2];
 }
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0 + 368 | 0, $1, $2, $3, $4, $5, $6);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 37;
 HEAP32[$0 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27670, 0, HEAP32[$2 + 4 >> 2]);
 $7 = HEAP32[$2 + 4 >> 2];
 $6 = $0 + -32 | 0;
 global$0 = $6;
 $8 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $5;
 $4 = $7 >>> 9 & 1 | 22;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, $4 + 1 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
 $5 = $6 - (($4 << 3) + 11 & 240) | 0;
 global$0 = $5;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($6, $8, $7, $5, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $6;
 if (($6 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $5, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function void_20std____2__vector_std____2__shared_ptr_GlTexture__2c_20std____2__allocator_std____2__shared_ptr_GlTexture__20__20_____push_back_slow_path_std____2__shared_ptr_GlTexture__20__28std____2__shared_ptr_GlTexture____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $5 = HEAP32[$0 >> 2];
 $4 = $2 - $5 >> 3;
 $3 = $4 + 1 | 0;
 label$1 : {
  if ($3 >>> 0 < 536870912) {
   $7 = $4 << 3;
   $4 = HEAP32[$0 + 8 >> 2] - $5 | 0;
   $6 = $4 >> 2;
   $4 = $4 >> 3 >>> 0 < 268435455 ? $6 >>> 0 < $3 >>> 0 ? $3 : $6 : 536870911;
   $6 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    if ($4 >>> 0 >= 536870912) {
     break label$1;
    }
    $6 = operator_20new_28unsigned_20long_29($4 << 3);
   }
   $3 = $7 + $6 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = $3 + 8 | 0;
   if (($2 | 0) != ($5 | 0)) {
    while (1) {
     $3 = $3 + -8 | 0;
     $2 = $2 + -8 | 0;
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     if (($2 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $6 + ($4 << 3);
   $2 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   if (($2 | 0) != ($5 | 0)) {
    while (1) {
     $0 = $2;
     $2 = $0 + -8 | 0;
     $0 = HEAP32[$0 + -4 >> 2];
     label$8 : {
      if (!$0) {
       break label$8;
      }
      $1 = HEAP32[$0 + 4 >> 2];
      HEAP32[$0 + 4 >> 2] = $1 + -1;
      if ($1) {
       break label$8;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
      std____2____shared_weak_count____release_weak_28_29($0);
     }
     if (($2 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  $3 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $3 >>> 0 > 0) {
   $3 = HEAPU8[$3 | 0];
  } else {
   $3 = 0;
  }
  if (($3 & 255) != 73) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
  HEAP32[$2 + 8 >> 2] = $1;
  if ($1) {
   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2 + 8 | 0);
  } else {
   $1 = 0;
  }
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 37;
 HEAP32[$0 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27670, 1, HEAP32[$2 + 4 >> 2]);
 $7 = HEAP32[$2 + 4 >> 2];
 $6 = $0 + -32 | 0;
 global$0 = $6;
 $8 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $5;
 $4 = $7 >>> 9 & 1;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, $4 + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
 $5 = $6 - (($4 << 3 | 176) + 11 & 240) | 0;
 global$0 = $5;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($6, $8, $7, $5, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $6;
 if (($6 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $5, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function PicsSet__addRef_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 28 >> 2];
 $4 = HEAP32[$0 + 24 >> 2];
 $7 = $3 - $4 | 0;
 $5 = $7 >> 4;
 $8 = HEAP32[HEAP32[11988] + 16 >> 2];
 label$1 : {
  if (!$7) {
   break label$1;
  }
  $7 = HEAP32[(Math_imul($1, 652) + $8 | 0) + 340 >> 2];
  while (1) {
   if (($7 | 0) == HEAP32[($6 << 4) + $4 >> 2]) {
    break label$1;
   }
   $6 = $6 + 1 | 0;
   if ($6 >>> 0 < $5 >>> 0) {
    continue;
   }
   break;
  }
 }
 if (($5 | 0) == ($6 | 0)) {
  $4 = $0 + 24 | 0;
  $5 = HEAP32[(Math_imul($1, 652) + $8 | 0) + 340 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 >> 2] = $5;
  label$4 : {
   if (HEAPU32[$0 + 32 >> 2] > $3 >>> 0) {
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 16;
    break label$4;
   }
   void_20std____2__vector_CompRef_2c_20std____2__allocator_CompRef__20_____push_back_slow_path_CompRef__28CompRef___29($4, $2);
   $0 = HEAP32[$2 + 4 >> 2];
   if (!$0) {
    break label$4;
   }
   HEAP32[$2 + 8 >> 2] = $0;
   dlfree($0);
  }
  $4 = HEAP32[$4 >> 2];
 }
 HEAP32[$2 + 4 >> 2] = HEAP32[(Math_imul($1, 652) + $8 | 0) + 344 >> 2];
 HEAP32[$2 >> 2] = $1;
 $0 = ($6 << 4) + $4 | 0;
 $1 = $0;
 $3 = HEAP32[$0 + 8 >> 2];
 label$6 : {
  if ($3 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 8;
   break label$6;
  }
  void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($0 + 4 | 0, $2);
 }
 global$0 = $2 + 16 | 0;
}
function std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $3 = HEAP32[$2 >> 2];
 label$1 : {
  while (1) {
   if ($3 >>> 0 >= $1 >>> 0) {
    $6 = 0;
    break label$1;
   }
   $6 = 2;
   $0 = HEAP32[$3 >> 2];
   if ($0 >>> 0 > 1114111 | ($0 & -2048) == 55296) {
    break label$1;
   }
   label$4 : {
    label$5 : {
     if ($0 >>> 0 <= 127) {
      $6 = 1;
      $3 = HEAP32[$5 >> 2];
      if (($4 - $3 | 0) < 1) {
       break label$1;
      }
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0;
      break label$5;
     }
     if ($0 >>> 0 <= 2047) {
      $3 = HEAP32[$5 >> 2];
      if (($4 - $3 | 0) < 2) {
       break label$4;
      }
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 6 | 192;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 & 63 | 128;
      break label$5;
     }
     $3 = HEAP32[$5 >> 2];
     $6 = $4 - $3 | 0;
     if ($0 >>> 0 <= 65535) {
      if (($6 | 0) < 3) {
       break label$4;
      }
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 12 | 224;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 & 63 | 128;
      break label$5;
     }
     if (($6 | 0) < 4) {
      break label$4;
     }
     HEAP32[$5 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0 >>> 18 | 240;
     $3 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0 >>> 12 & 63 | 128;
     $3 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
     $3 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0 & 63 | 128;
    }
    $3 = HEAP32[$2 >> 2] + 4 | 0;
    HEAP32[$2 >> 2] = $3;
    continue;
   }
   break;
  }
  return 1;
 }
 return $6;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP16[$0 + 28 >> 1] = HEAPU8[27680] | HEAPU8[27681] << 8;
 HEAP32[$0 + 24 >> 2] = HEAPU8[27676] | HEAPU8[27677] << 8 | (HEAPU8[27678] << 16 | HEAPU8[27679] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27668, 0, HEAP32[$2 + 4 >> 2]);
 $6 = HEAP32[$2 + 4 >> 2];
 $5 = $0 + -16 | 0;
 global$0 = $5;
 $7 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $7, $2);
 $6 = $5 + -32 | 0;
 global$0 = $6;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($5, $8, $7, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $7 = HEAP32[$1 + 44 >> 2];
 $8 = HEAP32[$1 + 24 >> 2];
 if ($7 >>> 0 < $8 >>> 0) {
  HEAP32[$1 + 44 >> 2] = $8;
  $7 = $8;
 }
 $12 = -1;
 $13 = -1;
 $14 = $5 & 24;
 label$2 : {
  if (!$14 | (($14 | 0) == 24 ? ($4 | 0) == 1 : 0)) {
   break label$2;
  }
  if ($7) {
   $6 = $1 + 32 | 0;
   $9 = $7;
   if (HEAP8[$1 + 43 | 0] <= -1) {
    $6 = HEAP32[$6 >> 2];
   }
   $6 = $9 - $6 | 0;
   $9 = $6;
   $6 = $6 >> 31;
  }
  if ($4 >>> 0 > 2) {
   break label$2;
  }
  label$6 : {
   label$7 : {
    switch ($4 - 1 | 0) {
    case 0:
     if ($5 & 8) {
      $4 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] | 0;
      $10 = $4;
      $11 = $4 >> 31;
      break label$6;
     }
     $4 = $8 - HEAP32[$1 + 20 >> 2] | 0;
     $10 = $4;
     $11 = $4 >> 31;
     break label$6;
    case 1:
     break label$7;
    default:
     break label$6;
    }
   }
   $10 = $9;
   $11 = $6;
  }
  $4 = $3 + $11 | 0;
  $2 = $2 + $10 | 0;
  if ($2 >>> 0 < $10 >>> 0) {
   $4 = $4 + 1 | 0;
  }
  $3 = $2;
  $2 = $4;
  if ((($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $3 >>> 0 >= 0 ? 0 : 1 : 0) | (($6 | 0) < ($4 | 0) ? 1 : ($6 | 0) <= ($4 | 0) ? $9 >>> 0 >= $3 >>> 0 ? 0 : 1 : 0)) {
   break label$2;
  }
  $4 = $5 & 8;
  label$10 : {
   if (!($2 | $3)) {
    break label$10;
   }
   if (HEAP32[$1 + 12 >> 2] ? 0 : $4) {
    break label$2;
   }
   if (!($5 & 16)) {
    break label$10;
   }
   if (!$8) {
    break label$2;
   }
  }
  if ($4) {
   HEAP32[$1 + 16 >> 2] = $7;
   HEAP32[$1 + 12 >> 2] = $3 + HEAP32[$1 + 8 >> 2];
  }
  if ($5 & 16) {
   HEAP32[$1 + 24 >> 2] = $3 + HEAP32[$1 + 20 >> 2];
  }
  $12 = $3;
  $13 = $2;
 }
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 12 >> 2] = $13;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   $1 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
    $1 = HEAP8[$1 | 0];
   } else {
    $1 = 0;
   }
   $1 = $1 << 24 >> 24;
   if (($1 | 0) != 68) {
    if (($1 & 255) != 84) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 12 | 0);
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0);
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 8 | 0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $2 = 0;
 label$1 : {
  if (($1 | 0) == -1) {
   break label$1;
  }
  $8 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$0 + 12 >> 2];
  $4 = HEAP32[$0 + 24 >> 2];
  $5 = HEAP32[$0 + 28 >> 2];
  label$2 : {
   if (($4 | 0) != ($5 | 0)) {
    $3 = HEAP32[$0 + 44 >> 2];
    break label$2;
   }
   $2 = -1;
   if (!(HEAPU8[$0 + 48 | 0] & 16)) {
    break label$1;
   }
   $3 = HEAP32[$0 + 20 >> 2];
   $5 = HEAP32[$0 + 44 >> 2];
   $2 = $0 + 32 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($2, 0);
   $7 = $5 - $3 | 0;
   $4 = $4 - $3 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($2, HEAP8[$0 + 43 | 0] <= -1 ? (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0 : 10);
   $3 = HEAP8[$2 + 11 | 0];
   label$6 : {
    if (($3 | 0) <= -1) {
     $2 = HEAP32[$0 + 32 >> 2];
     $3 = HEAP32[$0 + 36 >> 2];
     break label$6;
    }
    $3 = $3 & 255;
   }
   $5 = $3 + $2 | 0;
   HEAP32[$0 + 28 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $2;
   $3 = $2 + $7 | 0;
   HEAP32[$0 + 44 >> 2] = $3;
   $4 = $2 + $4 | 0;
   HEAP32[$0 + 24 >> 2] = $4;
  }
  $2 = $4 + 1 | 0;
  HEAP32[$6 + 12 >> 2] = $2;
  $7 = HEAP32[($2 >>> 0 < $3 >>> 0 ? $0 + 44 | 0 : $6 + 12 | 0) >> 2];
  HEAP32[$0 + 44 >> 2] = $7;
  if (HEAPU8[$0 + 48 | 0] & 8) {
   $3 = $0 + 32 | 0;
   $3 = HEAP8[$0 + 43 | 0] <= -1 ? HEAP32[$3 >> 2] : $3;
   HEAP32[$0 + 16 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = ($9 - $8 | 0) + $3;
   HEAP32[$0 + 8 >> 2] = $3;
  }
  if (($4 | 0) == ($5 | 0)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1 & 255) | 0;
   break label$1;
  }
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP8[$4 | 0] = $1;
  $2 = $1 & 255;
 }
 global$0 = $6 + 16 | 0;
 return $2 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP16[$0 + 28 >> 1] = HEAPU8[27680] | HEAPU8[27681] << 8;
 HEAP32[$0 + 24 >> 2] = HEAPU8[27676] | HEAPU8[27677] << 8 | (HEAPU8[27678] << 16 | HEAPU8[27679] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27668, 1, HEAP32[$2 + 4 >> 2]);
 $6 = HEAP32[$2 + 4 >> 2];
 $5 = $0 + -16 | 0;
 global$0 = $5;
 $7 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, ($6 >>> 9 & 1) + 13 | 0, $7, $0 + 24 | 0, $0) + $5 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $7, $2);
 $6 = $5 + -32 | 0;
 global$0 = $6;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($5, $8, $7, $6, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function BinWriter__repr_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $2 = global$0 - 144 | 0;
 global$0 = $2;
 HEAP32[$2 + 64 >> 2] = 3156;
 HEAP32[$2 >> 2] = 3136;
 HEAP32[$2 + 8 >> 2] = 2996;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $2 - -64 | 0;
 $5 = $2 + 12 | 0;
 std____2__ios_base__init_28void__29($7, $5);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 + 64 >> 2] = 3016;
 HEAP32[$2 >> 2] = 2976;
 HEAP32[$2 + 8 >> 2] = 2996;
 $9 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($5);
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 HEAP32[$2 + 12 >> 2] = 3296;
 $8 = $2 + 8 | 0;
 $4 = $8 + HEAP32[HEAP32[$2 + 8 >> 2] + -12 >> 2] | 0;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] & -75 | 8;
 $10 = $2 + 20 | 0;
 $11 = $2 + 84 | 0;
 while (1) {
  $12 = $6;
  $4 = HEAP32[$1 >> 2];
  $3 = HEAP8[$4 + 11 | 0];
  label$2 : {
   if (($3 | 0) <= -1) {
    $3 = HEAP32[$4 + 4 >> 2];
    break label$2;
   }
   $3 = $3 & 255;
  }
  if ($12 >>> 0 >= $3 >>> 0) {
   std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $5);
   HEAP32[$2 + 64 >> 2] = 3016;
   HEAP32[$2 >> 2] = 2976;
   HEAP32[$2 + 12 >> 2] = 3296;
   HEAP32[$2 + 8 >> 2] = 2996;
   if (HEAP8[$2 + 55 | 0] < 0) {
    dlfree(HEAP32[$2 + 44 >> 2]);
   }
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($9);
   std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($7);
   global$0 = $2 + 144 | 0;
   return;
  }
  $3 = HEAP32[$2 + 8 >> 2] + -12 | 0;
  HEAP32[HEAP32[$3 >> 2] + $11 >> 2] = 48;
  HEAP32[HEAP32[$3 >> 2] + $10 >> 2] = 2;
  $3 = $8;
  if (HEAP8[$4 + 11 | 0] <= -1) {
   $4 = HEAP32[$4 >> 2];
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($3, HEAPU8[$4 + $6 | 0]);
  $6 = $6 + 1 | 0;
  continue;
 }
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 40 >> 2] = $1;
 label$1 : {
  if (!(HEAP32[$2 + 4 >> 2] & 1)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
   break label$1;
  }
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP32[$5 + 24 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 24 | 0);
  $1 = HEAP32[$5 + 24 >> 2];
  $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $2;
  if (($2 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
  label$5 : {
   if ($4) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($5 + 24 | 0, $0);
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($5 + 24 | 0, $0);
  }
  HEAP32[$5 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0);
  while (1) {
   HEAP32[$5 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($5 + 24 | 0);
   if (!!(HEAP32[$5 + 16 >> 2] == HEAP32[$5 + 8 >> 2])) {
    $2 = HEAP32[$5 + 40 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
    break label$1;
   }
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($5 + 40 | 0, HEAP32[HEAP32[$5 + 16 >> 2] >> 2]);
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 4;
   continue;
  }
 }
 global$0 = $5 + 48 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 56 | 0, 35572);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 24 | 0);
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 48 | 0, 39364);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 16 | 0);
 $2 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 40 | 0, 39370);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 $0 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 32 | 0, 35134);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 global$0 = $3 - -64 | 0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 + 32 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $1);
 HEAP32[$0 + 44 >> 2] = 0;
 $3 = HEAP32[$0 + 48 >> 2];
 if ($3 & 8) {
  $5 = $0;
  $4 = HEAP8[$2 + 11 | 0];
  label$2 : {
   if (($4 | 0) <= -1) {
    $1 = HEAP32[$0 + 32 >> 2];
    $4 = $1 + HEAP32[$0 + 36 >> 2] | 0;
    break label$2;
   }
   $1 = $2;
   $4 = ($4 & 255) + $2 | 0;
  }
  HEAP32[$5 + 44 >> 2] = $4;
  HEAP32[$0 + 16 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $1;
 }
 label$4 : {
  if (!($3 & 16)) {
   break label$4;
  }
  $3 = $2;
  $1 = HEAP8[$2 + 11 | 0];
  label$5 : {
   if (($1 | 0) >= 0) {
    $1 = $1 & 255;
    HEAP32[$0 + 44 >> 2] = $2 + $1;
    $4 = 10;
    break label$5;
   }
   $1 = HEAP32[$0 + 36 >> 2];
   HEAP32[$0 + 44 >> 2] = $1 + HEAP32[$0 + 32 >> 2];
   $4 = (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($3, $4);
  $3 = HEAP8[$2 + 11 | 0];
  label$7 : {
   if (($3 | 0) <= -1) {
    $2 = HEAP32[$0 + 32 >> 2];
    $3 = HEAP32[$0 + 36 >> 2];
    break label$7;
   }
   $3 = $3 & 255;
  }
  HEAP32[$0 + 28 >> 2] = $2 + $3;
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 24 >> 2] = $2;
  if (!(HEAPU8[$0 + 48 | 0] & 3)) {
   break label$4;
  }
  label$9 : {
   if (($1 | 0) <= -1) {
    $1 = $1 + -2147483647 | 0;
    $3 = ($1 | 0) < 0;
    $2 = $3 ? $2 + -2 | 0 : $2 + 2147483647 | 0;
    HEAP32[$0 + 24 >> 2] = $2;
    $1 = $3 ? 1 : $1;
    break label$9;
   }
   if (!$1) {
    break label$4;
   }
  }
  HEAP32[$0 + 24 >> 2] = $1 + $2;
 }
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 208 | 0;
 global$0 = $0;
 HEAP16[$0 + 204 >> 1] = HEAPU8[27686] | HEAPU8[27687] << 8;
 HEAP32[$0 + 200 >> 2] = HEAPU8[27682] | HEAPU8[27683] << 8 | (HEAPU8[27684] << 16 | HEAPU8[27685] << 24);
 $5 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $4 = $0 + 176 | 0;
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 176 | 0, 20, $5, $0 + 200 | 0, $0);
 $5 = $6 + ($0 + 176 | 0) | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 $4 = HEAP32[$0 + 16 >> 2];
 $9 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $9;
 if (($9 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 48 >> 2]]($8, $0 + 176 | 0, $5, $0 + 16 | 0) | 0;
 $4 = $1;
 $1 = ($0 + 16 | 0) + ($6 << 2) | 0;
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($4, $0 + 16 | 0, ($5 | 0) == ($7 | 0) ? $1 : (($7 - $0 << 2) + $0 | 0) + -688 | 0, $1, $2, $3);
 global$0 = $0 + 208 | 0;
 return $1 | 0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  $3 = HEAP32[$1 + 48 >> 2];
  if ($3 & 16) {
   $3 = HEAP32[$1 + 44 >> 2];
   $2 = HEAP32[$1 + 24 >> 2];
   if ($3 >>> 0 < $2 >>> 0) {
    HEAP32[$1 + 44 >> 2] = $2;
    $3 = $2;
   }
   $1 = HEAP32[$1 + 20 >> 2];
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $4 = $3 - $1 | 0;
   if ($4 >>> 0 >= 4294967280) {
    break label$1;
   }
   label$4 : {
    if ($4 >>> 0 <= 10) {
     HEAP8[$0 + 11 | 0] = $4;
     break label$4;
    }
    $5 = $4 + 16 & -16;
    $2 = operator_20new_28unsigned_20long_29($5);
    HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $4;
    $0 = $2;
   }
   if (($1 | 0) != ($3 | 0)) {
    while (1) {
     HEAP8[$0 | 0] = HEAPU8[$1 | 0];
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP8[$0 | 0] = 0;
   return;
  }
  if ($3 & 8) {
   $4 = HEAP32[$1 + 16 >> 2];
   $1 = HEAP32[$1 + 8 >> 2];
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $2 = $4 - $1 | 0;
   if ($2 >>> 0 >= 4294967280) {
    break label$1;
   }
   label$9 : {
    if ($2 >>> 0 <= 10) {
     HEAP8[$0 + 11 | 0] = $2;
     break label$9;
    }
    $5 = $2 + 16 & -16;
    $3 = operator_20new_28unsigned_20long_29($5);
    HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
    HEAP32[$0 >> 2] = $3;
    HEAP32[$0 + 4 >> 2] = $2;
    $0 = $3;
   }
   if (($1 | 0) != ($4 | 0)) {
    while (1) {
     HEAP8[$0 | 0] = HEAPU8[$1 | 0];
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP8[$0 | 0] = 0;
   return;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 37;
 HEAP32[$0 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27670, 0, HEAP32[$2 + 4 >> 2]);
 $7 = HEAP32[$2 + 4 >> 2];
 $6 = $0 + -32 | 0;
 global$0 = $6;
 $8 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $5;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1 | 22) + 1 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
 $5 = $6 + -48 | 0;
 global$0 = $5;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($6, $8, $7, $5, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $6;
 if (($6 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $5, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 37;
 HEAP32[$0 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 27670, 1, HEAP32[$2 + 4 >> 2]);
 $7 = HEAP32[$2 + 4 >> 2];
 $6 = $0 + -32 | 0;
 global$0 = $6;
 $8 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $5;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1) + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
 $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $7, $2);
 $5 = $6 + -48 | 0;
 global$0 = $5;
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($6, $8, $7, $5, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
 $4 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $6;
 if (($6 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $5, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
 global$0 = $0 + 32 | 0;
 return $1 | 0;
}
function __trunctfsf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 32 | 0;
 global$0 = $7;
 $5 = $3 & 2147483647;
 $6 = $5;
 $4 = $5 + -1065418752 | 0;
 $5 = $2;
 $8 = $5;
 if ($5 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $10 = $8;
 $9 = $6 + -1082064896 | 0;
 $8 = $5;
 if ($5 >>> 0 < 0) {
  $9 = $9 + 1 | 0;
 }
 label$1 : {
  if (($4 | 0) == ($9 | 0) & $10 >>> 0 < $8 >>> 0 | $4 >>> 0 < $9 >>> 0) {
   $6 = ($3 & 33554431) << 7 | $2 >>> 25;
   $5 = 0;
   $9 = $5;
   $8 = $2 & 33554431;
   if (!(!$5 & ($8 | 0) == 16777216 ? !($0 | $1) : !$5 & $8 >>> 0 < 16777216 | $5 >>> 0 < 0)) {
    $4 = $6 + 1073741825 | 0;
    break label$1;
   }
   $4 = $6 + 1073741824 | 0;
   if ($8 ^ 16777216 | $0 | ($1 | $9)) {
    break label$1;
   }
   $4 = ($4 & 1) + $4 | 0;
   break label$1;
  }
  if (!(!$5 & ($6 | 0) == 2147418112 ? !($0 | $1) : ($6 | 0) == 2147418112 & $5 >>> 0 < 0 | $6 >>> 0 < 2147418112)) {
   $4 = (($3 & 33554431) << 7 | $2 >>> 25) & 4194303 | 2143289344;
   break label$1;
  }
  $4 = 2139095040;
  if (($6 | 0) == 1082064895 & $5 >>> 0 > 4294967295 | $6 >>> 0 > 1082064895) {
   break label$1;
  }
  $4 = 0;
  $6 = $6 >>> 16;
  if ($6 >>> 0 < 16145) {
   break label$1;
  }
  $4 = $3 & 65535 | 65536;
  __lshrti3($7, $0, $1, $2, $4, 16257 - $6 | 0);
  __ashlti3($7 + 16 | 0, $0, $1, $5, $4, $6 + -16129 | 0);
  $1 = HEAP32[$7 + 8 >> 2];
  $4 = (HEAP32[$7 + 12 >> 2] & 33554431) << 7 | $1 >>> 25;
  $5 = HEAP32[$7 + 4 >> 2];
  $6 = $5;
  $0 = 0;
  $8 = $0;
  $9 = HEAP32[$7 >> 2] | ((HEAP32[$7 + 16 >> 2] | HEAP32[$7 + 24 >> 2]) != 0 | (HEAP32[$7 + 20 >> 2] | HEAP32[$7 + 28 >> 2]) != 0);
  $1 = $1 & 33554431;
  if (!(!$0 & ($1 | 0) == 16777216 ? !($5 | $9) : !$0 & $1 >>> 0 < 16777216 | $0 >>> 0 < 0)) {
   $4 = $4 + 1 | 0;
   break label$1;
  }
  if ($1 ^ 16777216 | $9 | ($6 | $8)) {
   break label$1;
  }
  $4 = ($4 & 1) + $4 | 0;
 }
 global$0 = $7 + 32 | 0;
 return wasm2js_scratch_store_i32(0, $3 & -2147483648 | $4), wasm2js_scratch_load_f32();
}
function CubeDocBase__solveGo_28SlvCube__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $4 = HEAP32[$0 + 88 >> 2];
 label$1 : {
  if (!(!$4 | !HEAPU8[$4 + 32 | 0])) {
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 6393, 8);
  $3 = HEAP32[(HEAP32[HEAP32[$4 >> 2] + -12 >> 2] + $4 | 0) + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = $3;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
  $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($5 + 8 | 0, 51440);
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
  $3 = HEAP32[$5 + 8 >> 2];
  $6 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $6;
  if (($6 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($4, $7);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($4);
  HEAP8[HEAP32[$0 + 88 >> 2] + 4 | 0] = $2;
  emscripten_asm_const_iii(1064, 1076, 0) | 0;
  if (!(HEAPU8[HEAP32[$0 + 128 >> 2] + 375136 | 0] ? 0 : HEAP32[$0 + 116 >> 2])) {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 1, 0, 0)) {
    break label$1;
   }
  }
  $4 = operator_20new_28unsigned_20long_29(48);
  PicsSet__PicsSet_28bool_29($4, HEAP32[$0 + 32 >> 2] != 0);
  $2 = HEAP32[$0 + 88 >> 2];
  HEAP32[$2 + 28 >> 2] = 0;
  $3 = HEAP32[$0 + 124 >> 2];
  $6 = HEAP32[$0 + 116 >> 2];
  HEAP32[$2 + 20 >> 2] = $0 + 4;
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = $6;
  HEAP32[$2 + 12 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2);
 }
 global$0 = $5 + 16 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 40 >> 2] = $1;
 label$1 : {
  if (!(HEAP32[$2 + 4 >> 2] & 1)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
   break label$1;
  }
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP32[$5 + 24 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $0 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 24 | 0);
  $1 = HEAP32[$5 + 24 >> 2];
  $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $2;
  if (($2 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
  label$5 : {
   if ($4) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($5 + 24 | 0, $0);
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($5 + 24 | 0, $0);
  }
  HEAP32[$5 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0);
  while (1) {
   HEAP32[$5 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($5 + 24 | 0);
   if (!!(HEAP32[$5 + 16 >> 2] == HEAP32[$5 + 8 >> 2])) {
    $2 = HEAP32[$5 + 40 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
    break label$1;
   }
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($5 + 40 | 0, HEAP8[HEAP32[$5 + 16 >> 2]]);
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
   continue;
  }
 }
 global$0 = $5 + 48 | 0;
 return $2 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 if (($1 ^ -1) + 1073741807 >>> 0 >= $2 >>> 0) {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $10 = HEAP32[$0 >> 2];
  } else {
   $10 = $0;
  }
  label$4 : {
   if (536870887 > $1 >>> 0) {
    HEAP32[$8 + 8 >> 2] = $1 << 1;
    HEAP32[$8 + 12 >> 2] = $1 + $2;
    $2 = global$0 - 16 | 0;
    global$0 = $2;
    global$0 = $2 + 16 | 0;
    $2 = $8 + 8 | 0;
    $9 = $8 + 12 | 0;
    $2 = HEAP32[(HEAPU32[$9 >> 2] < HEAPU32[$2 >> 2] ? $2 : $9) >> 2];
    if ($2 >>> 0 >= 2) {
     $9 = $2 + 4 & -4;
     $2 = $9 + -1 | 0;
     $2 = ($2 | 0) == 2 ? $9 : $2;
    } else {
     $2 = 1;
    }
    break label$4;
   }
   $2 = 1073741806;
  }
  $9 = $2 + 1 | 0;
  $2 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($9);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $10, $4);
  }
  if ($6) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2 + ($4 << 2) | 0, $7, $6);
  }
  $3 = $3 - $5 | 0;
  $7 = $3 - $4 | 0;
  if ($7) {
   $4 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($4 + $2 | 0) + ($6 << 2) | 0, ($4 + $10 | 0) + ($5 << 2) | 0, $7);
  }
  if (($1 | 0) != 1) {
   dlfree($10);
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  $1 = $0;
  $0 = $3 + $6 | 0;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$2 + ($0 << 2) >> 2] = HEAP32[$8 + 4 >> 2];
  global$0 = $8 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function atan2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
 label$1 : {
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $4 = $2 & 2147483647;
  if ($4 >>> 0 <= 2139095040) {
   $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $3 = $5 & 2147483647;
   if ($3 >>> 0 < 2139095041) {
    break label$1;
   }
  }
  return Math_fround($0 + $1);
 }
 if (($2 | 0) == 1065353216) {
  return atanf($0);
 }
 $7 = $2 >>> 30 & 2;
 $2 = $7 | $5 >>> 31;
 label$4 : {
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$3) {
      label$9 : {
       switch ($2 - 2 | 0) {
       case 0:
        break label$7;
       case 1:
        break label$9;
       default:
        break label$6;
       }
      }
      return Math_fround(-3.1415927410125732);
     }
     if (($4 | 0) != 2139095040) {
      if (!$4 | !($4 + 218103808 >>> 0 >= $3 >>> 0 ? ($3 | 0) != 2139095040 : 0)) {
       break label$4;
      }
      label$11 : {
       if ($3 + 218103808 >>> 0 < $4 >>> 0) {
        $6 = Math_fround(0);
        if ($7) {
         break label$11;
        }
       }
       $6 = atanf(Math_fround(Math_abs(Math_fround($0 / $1))));
      }
      $0 = $6;
      if ($2 >>> 0 <= 2) {
       label$14 : {
        switch ($2 - 1 | 0) {
        case 0:
         return Math_fround(-$0);
        case 1:
         break label$14;
        default:
         break label$6;
        }
       }
       return Math_fround(Math_fround(3.1415927410125732) - Math_fround($0 + Math_fround(8.742277657347586e-8)));
      }
      return Math_fround(Math_fround($0 + Math_fround(8.742277657347586e-8)) + Math_fround(-3.1415927410125732));
     }
     if (($3 | 0) == 2139095040) {
      break label$5;
     }
     return HEAPF32[($2 << 2) + 20832 >> 2];
    }
    $0 = Math_fround(3.1415927410125732);
   }
   return $0;
  }
  return HEAPF32[($2 << 2) + 20816 >> 2];
 }
 return ($5 | 0) < 0 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866);
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
  return;
 }
 $7 = HEAPU8[$1 + 53 | 0];
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $8 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = HEAPU8[$1 + 53 | 0];
 $7 = $7 | $10;
 $11 = HEAPU8[$1 + 52 | 0];
 $8 = $8 | $11;
 label$2 : {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = $9 + ($6 << 3) | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4 : {
    if ($11) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$10) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = HEAPU8[$1 + 53 | 0];
   $7 = $10 | $7;
   $11 = HEAPU8[$1 + 52 | 0];
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($6 >>> 0 < $9 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
}
function __cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 4512 | 0;
 global$0 = $5;
 label$1 : {
  if (!($2 | !$1 ? $0 : 0)) {
   $0 = 0;
   if (!$3) {
    break label$1;
   }
   HEAP32[$3 >> 2] = -3;
   break label$1;
  }
  $7 = $5 + 32 | 0;
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($7, $0, strlen($0) + $0 | 0);
  $0 = $5 + 8 | 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 16 >> 2] = -1;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($7);
  label$4 : {
   if (!$4) {
    $6 = -2;
    break label$4;
   }
   $6 = -1;
   if (!$28anonymous_20namespace_29__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__OutputStream__2c_20unsigned_20long_29($1, $2, $0)) {
    break label$4;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $0);
   if (HEAPU8[$4 + 5 | 0] != 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, $0);
   }
   $6 = 0;
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($0, 0);
   if ($2) {
    HEAP32[$2 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   $1 = HEAP32[$0 >> 2];
  }
  if ($3) {
   HEAP32[$3 >> 2] = $6;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($7);
  $0 = $6 ? 0 : $1;
 }
 global$0 = $5 + 4512 | 0;
 return $0 | 0;
}
function BaseGLWidget__reset_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$0 + 312 >> 2] = 100;
 BaseGLWidget__reCalcProj_28_29($0);
 $1 = $3;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAP32[$1 + 20 >> 2] = 1065353216;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 1065353216;
 HEAP32[$1 >> 2] = 1065353216;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 if (HEAPU8[$0 + 317 | 0]) {
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3, Math_fround(-20), Math_fround(0), Math_fround(1), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3, Math_fround(20), Math_fround(1), Math_fround(0), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($3, Math_fround(-5), Math_fround(0), Math_fround(0), Math_fround(1));
 }
 $1 = $0 + 108 | 0;
 if (($1 | 0) != ($3 | 0)) {
  $0 = $3;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 60 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 60 >> 2] = $2;
  $2 = HEAP32[$0 + 52 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$1 + 52 >> 2] = $2;
  $2 = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 44 >> 2] = $2;
  $2 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 36 >> 2] = $2;
  $2 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = $2;
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 20 >> 2] = $2;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
 }
 global$0 = $3 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 36);
 $1 = HEAP32[$1 >> 2];
 $2 = HEAP32[$2 >> 2];
 $8 = HEAP32[$3 + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$7 + 12 >> 2] = $8;
 $3 = HEAP32[$4 >> 2];
 $4 = HEAP32[$5 >> 2];
 $5 = HEAPU8[$6 | 0];
 $6 = HEAP32[$7 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $7, $3, $4, $5);
 global$0 = $7 + 16 | 0;
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 96 | 0;
 global$0 = $0;
 HEAP16[$0 + 92 >> 1] = HEAPU8[27686] | HEAPU8[27687] << 8;
 HEAP32[$0 + 88 >> 2] = HEAPU8[27682] | HEAPU8[27683] << 8 | (HEAPU8[27684] << 16 | HEAPU8[27685] << 24);
 $5 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $4 = $0 - -64 | 0;
 $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 - -64 | 0, 20, $5, $0 + 88 | 0, $0);
 $5 = $6 + ($0 - -64 | 0) | 0;
 $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
 $8 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 $4 = HEAP32[$0 + 16 >> 2];
 $9 = HEAP32[$4 + 4 >> 2] + -1 | 0;
 HEAP32[$4 + 4 >> 2] = $9;
 if (($9 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 32 >> 2]]($8, $0 - -64 | 0, $5, $0 + 16 | 0) | 0;
 $4 = $1;
 $1 = ($0 + 16 | 0) + $6 | 0;
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($4, $0 + 16 | 0, ($5 | 0) == ($7 | 0) ? $1 : (($7 - $0 | 0) + $0 | 0) + -48 | 0, $1, $2, $3);
 global$0 = $0 + 96 | 0;
 return $1 | 0;
}
function SHA1__process_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $8 = global$0 - 320 | 0;
 global$0 = $8;
 if (HEAP32[$0 + 84 >> 2] == 64) {
  $9 = HEAP32[$0 + 16 >> 2];
  $10 = HEAP32[$0 + 12 >> 2];
  $11 = HEAP32[$0 + 8 >> 2];
  $12 = HEAP32[$0 + 4 >> 2];
  $13 = HEAP32[$0 >> 2];
  $1 = $0 + 20 | 0;
  while (1) {
   $3 = 16;
   $2 = $5 << 2;
   HEAP32[$2 + $8 >> 2] = HEAPU8[$1 + ($2 | 3) | 0] | (HEAPU8[$1 + ($2 | 1) | 0] << 16 | HEAPU8[$1 + $2 | 0] << 24 | HEAPU8[$1 + ($2 | 2) | 0] << 8);
   $5 = $5 + 1 | 0;
   if (($5 | 0) != 16) {
    continue;
   }
   break;
  }
  while (1) {
   $1 = ($3 << 2) + $8 | 0;
   HEAP32[$1 >> 2] = __wasm_rotl_i32(HEAP32[$1 + -64 >> 2] ^ (HEAP32[$1 + -56 >> 2] ^ (HEAP32[$1 + -32 >> 2] ^ HEAP32[$1 + -12 >> 2])), 1);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 80) {
    continue;
   }
   break;
  }
  $5 = $9;
  $3 = $10;
  $1 = $11;
  $2 = $12;
  $4 = $13;
  while (1) {
   $14 = $4;
   $6 = $1;
   $15 = HEAP32[($7 << 2) + $8 >> 2];
   label$5 : {
    if ($7 >>> 0 <= 19) {
     $4 = 1518500249;
     $1 = ($2 ^ -1) & $3 | $2 & $6;
     break label$5;
    }
    if ($7 >>> 0 <= 39) {
     $4 = 1859775393;
     $1 = $2 ^ $6 ^ $3;
     break label$5;
    }
    if ($7 >>> 0 <= 59) {
     $4 = -1894007588;
     $1 = ($3 | $6) & $2 | $3 & $6;
     break label$5;
    }
    $4 = -899497514;
    $1 = $2 ^ $6 ^ $3;
   }
   $4 = $15 + ($1 + ($4 + (__wasm_rotl_i32($14, 5) + $5 | 0) | 0) | 0) | 0;
   $1 = __wasm_rotl_i32($2, 30);
   $5 = $3;
   $3 = $6;
   $2 = $14;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != 80) {
    continue;
   }
   break;
  }
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $5 + $9;
  HEAP32[$0 + 12 >> 2] = $3 + $10;
  HEAP32[$0 + 8 >> 2] = $1 + $11;
  HEAP32[$0 + 4 >> 2] = $2 + $12;
  HEAP32[$0 >> 2] = $4 + $13;
  global$0 = $8 + 320 | 0;
  return;
 }
 __assert_fail(15098, 15027, 78, 15121);
 abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $8 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($4, $0);
 label$1 : {
  if (!HEAPU8[$4 | 0]) {
   break label$1;
  }
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $9 = HEAP32[$5 + 4 >> 2];
  $10 = HEAP32[$5 + 24 >> 2];
  $3 = HEAP32[$5 + 76 >> 2];
  if (($3 | 0) == -1) {
   $3 = HEAP32[$5 + 28 >> 2];
   HEAP32[$4 + 8 >> 2] = $3;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 51440);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 32) | 0;
   $6 = HEAP32[$4 + 8 >> 2];
   $7 = HEAP32[$6 + 4 >> 2] + -1 | 0;
   HEAP32[$6 + 4 >> 2] = $7;
   if (($7 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
   }
   HEAP32[$5 + 76 >> 2] = $3;
  }
  $2 = $1 + $2 | 0;
  if (std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($10, $1, ($9 & 176) == 32 ? $2 : $1, $2, $5, $3 << 24 >> 24)) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$1 + 16 >> 2] = !HEAP32[$1 + 24 >> 2] | (HEAP32[$1 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($8);
 global$0 = $4 + 16 | 0;
 return $0;
}
function ModelControlBase__drawTargets_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $3 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$3 + 124 >> 2];
  if (!$2) {
   break label$1;
  }
  $4 = HEAP32[$2 + 12 >> 2];
  $2 = HEAP32[$2 + 8 >> 2];
  if (($4 | 0) == ($2 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$3 + 132 >> 2];
  if (($3 | 0) == -1) {
   break label$1;
  }
  $2 = HEAP32[$2 + ($3 << 2) >> 2];
  if (!$2) {
   break label$1;
  }
  if (!HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 36 >> 2] = $2;
   Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const(HEAP32[$2 + 52 >> 2], Math_fround(HEAP32[11537]), $2 + 40 | 0);
  }
  $3 = $1 ? $0 + 416 | 0 : $0 + 24 | 0;
  label$3 : {
   if (!$3) {
    break label$3;
   }
   $4 = HEAP32[11869];
   HEAP32[11869] = $4 + 1;
   if (!HEAPU8[$3 + 44 | 0] | $4) {
    break label$3;
   }
   glUseProgram(HEAP32[$3 + 4 >> 2]);
   HEAP32[11870] = $3;
  }
  label$4 : {
   if ($1) {
    break label$4;
   }
   $4 = HEAP32[$0 + 140 >> 2];
   if (($4 | 0) == -1) {
    break label$4;
   }
   glUniform1f($4 | 0, Math_fround(HEAPF32[$0 + 1988 >> 2]));
  }
  $7 = $2 + 24 | 0;
  $6 = HEAP32[$0 + 8 >> 2];
  $4 = HEAP32[$6 + 136 >> 2];
  label$5 : {
   if (!(($2 | 0) != HEAP32[$0 + 604 >> 2] | ($4 | 0) != HEAP32[$0 + 608 >> 2])) {
    $5 = HEAP32[$0 + 4 >> 2];
    break label$5;
   }
   $5 = HEAP32[$0 + 4 >> 2];
   HEAP8[$5 + 360 | 0] = 0;
   HEAP32[$0 + 608 >> 2] = $4;
   HEAP32[$0 + 604 >> 2] = $2;
  }
  $0 = HEAP32[$0 + 12 >> 2];
  SlvPainter__paint_28BaseGLWidget__2c_20bool_2c_20int_2c_20int_2c_20ELinesDraw_29_20const($7, $5, $1, HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 3 < ($0 | 0) ? 0 : $0, $4, HEAP32[$6 + 52 >> 2]);
  if (!$3) {
   break label$1;
  }
  $0 = HEAP32[11869] + -1 | 0;
  HEAP32[11869] = $0;
  if ($0) {
   break label$1;
  }
  glUseProgram(0);
  HEAP32[11870] = 0;
 }
}
function BinWriter__unrepr_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  $3 = HEAPU8[$1 + 11 | 0];
  $3 = $3 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] : $3;
  label$2 : {
   if (!($3 & 1)) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29(HEAP32[$0 >> 2], $3 >>> 1);
    while (1) {
     $4 = $5;
     $3 = HEAP32[$0 >> 2];
     $2 = HEAPU8[$3 + 11 | 0];
     $6 = $2 << 24 >> 24 > -1;
     if (!$6) {
      $2 = HEAP32[$3 + 4 >> 2];
     }
     if ($4 >>> 0 >= $2 >>> 0) {
      break label$2;
     }
     $7 = HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 >> 2] : $1;
     $8 = $5 << 1;
     $2 = HEAPU8[$7 + $8 | 0];
     label$7 : {
      if (($2 + -97 & 255) >>> 0 <= 5) {
       $4 = $2 + -87 | 0;
       break label$7;
      }
      if (($2 + -65 & 255) >>> 0 <= 5) {
       $4 = $2 + -55 | 0;
       break label$7;
      }
      $4 = $2 + -48 | 0;
      if (($4 & 255) >>> 0 >= 10) {
       break label$1;
      }
     }
     $2 = HEAPU8[($8 | 1) + $7 | 0];
     label$10 : {
      if (($2 + -97 & 255) >>> 0 <= 5) {
       $2 = $2 + -87 | 0;
       break label$10;
      }
      if (($2 + -65 & 255) >>> 0 <= 5) {
       $2 = $2 + -55 | 0;
       break label$10;
      }
      $2 = $2 + -48 | 0;
      if (($2 & 255) >>> 0 >= 10) {
       break label$1;
      }
     }
     if (!$6) {
      $3 = HEAP32[$3 >> 2];
     }
     HEAP8[$3 + $5 | 0] = ($4 << 4) + $2;
     $5 = $5 + 1 | 0;
     continue;
    }
   }
   $0 = __cxa_allocate_exception(8) | 0;
   HCException__HCException_28char_20const__29($0, 2904);
   __cxa_throw($0 | 0, 1364, 1);
   abort();
  }
  return;
 }
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 2925);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAP32[13264] - HEAP32[13261] >> 2 >>> 0 >= $0 >>> 0) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0);
   break label$1;
  }
  $1 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($2 + 8 | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const((HEAP32[13261] - HEAP32[13260] >> 2) + $0 | 0), HEAP32[13261] - HEAP32[13260] >> 2);
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($1, $0);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29($1);
  $0 = $1;
  $3 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (HEAP32[$0 + 8 >> 2] != ($3 | 0)) {
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    continue;
   }
   break;
  }
  if (HEAP32[$1 >> 2]) {
   std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(HEAP32[$1 + 16 >> 2], HEAP32[$1 >> 2]);
  }
 }
 global$0 = $2 + 32 | 0;
}
function goToSlv_28int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($0 | 0) >= 0) {
     $3 = HEAP32[11720];
     $1 = HEAP32[$3 + 124 >> 2];
     if (HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2 > ($0 | 0)) {
      break label$3;
     }
    }
    $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 2946, 16), $0);
    $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
    HEAP32[$2 + 8 >> 2] = $1;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 51440);
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
    $1 = HEAP32[$2 + 8 >> 2];
    $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
    HEAP32[$1 + 4 >> 2] = $3;
    if (($3 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
    $1 = HEAP32[11720];
    $0 = HEAP32[$1 + 132 >> 2];
    $1 = HEAP32[$1 + 124 >> 2];
    if ($1) {
     break label$2;
    }
    break label$1;
   }
   HEAP32[$3 + 132 >> 2] = $0;
  }
  $5 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2;
 }
 HEAP32[$2 + 4 >> 2] = $5;
 HEAP32[$2 >> 2] = $0;
 emscripten_asm_const_iii(1077, 1093, $2 | 0) | 0;
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $2 + 16 | 0;
}
function memmove($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  label$2 : {
   if ($1 + $2 >>> 0 > $0 >>> 0) {
    $4 = $0 + $2 | 0;
    if ($4 >>> 0 > $1 >>> 0) {
     break label$2;
    }
   }
   memcpy($0, $1, $2);
   return;
  }
  $3 = ($0 ^ $1) & 3;
  label$4 : {
   label$5 : {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($3) {
      break label$4;
     }
     if (!($0 & 3)) {
      break label$5;
     }
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$0 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue;
      }
      break;
     }
     break label$5;
    }
    label$8 : {
     if ($3) {
      break label$8;
     }
     if ($4 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 + -1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$8;
     }
     while (1) {
      $2 = $2 + -4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 + -1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$4;
   }
   $3 = $2;
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $0 = $0 + 4 | 0;
    $3 = $3 + -4 | 0;
    if ($3 >>> 0 > 3) {
     continue;
    }
    break;
   }
   $2 = $2 & 3;
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$0 | 0] = HEAPU8[$1 | 0];
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function emscripten__internal__Invoker_JsGrp_2c_20int___invoke_28JsGrp_20_28__29_28int_29_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 FUNCTION_TABLE[$0]($2 + 8 | 0, $1);
 $0 = operator_20new_28unsigned_20long_29(72);
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 16 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 20 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = HEAP32[$2 + 40 >> 2];
 $1 = HEAP32[$2 + 36 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = HEAP32[$2 + 52 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 HEAP32[$0 + 36 >> 2] = HEAP32[$2 + 44 >> 2];
 HEAP32[$0 + 40 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 $1 = HEAPU8[$2 + 73 | 0] | HEAPU8[$2 + 74 | 0] << 8 | (HEAPU8[$2 + 75 | 0] << 16 | HEAPU8[$2 + 76 | 0] << 24);
 $3 = HEAPU8[$2 + 69 | 0] | HEAPU8[$2 + 70 | 0] << 8 | (HEAPU8[$2 + 71 | 0] << 16 | HEAPU8[$2 + 72 | 0] << 24);
 HEAP8[$0 + 61 | 0] = $3;
 HEAP8[$0 + 62 | 0] = $3 >>> 8;
 HEAP8[$0 + 63 | 0] = $3 >>> 16;
 HEAP8[$0 + 64 | 0] = $3 >>> 24;
 HEAP8[$0 + 65 | 0] = $1;
 HEAP8[$0 + 66 | 0] = $1 >>> 8;
 HEAP8[$0 + 67 | 0] = $1 >>> 16;
 HEAP8[$0 + 68 | 0] = $1 >>> 24;
 $1 = $2 - -64 | 0;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 60 >> 2] = $3;
 $1 = HEAP32[$2 + 60 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$0 + 52 >> 2] = $1;
 global$0 = $2 + 80 | 0;
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 if (($1 ^ -1) + -17 >>> 0 >= $2 >>> 0) {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $10 = HEAP32[$0 >> 2];
  } else {
   $10 = $0;
  }
  label$4 : {
   if (2147483623 > $1 >>> 0) {
    HEAP32[$8 + 8 >> 2] = $1 << 1;
    HEAP32[$8 + 12 >> 2] = $1 + $2;
    $2 = global$0 - 16 | 0;
    global$0 = $2;
    global$0 = $2 + 16 | 0;
    $2 = $8 + 8 | 0;
    $9 = $8 + 12 | 0;
    $2 = HEAP32[(HEAPU32[$9 >> 2] < HEAPU32[$2 >> 2] ? $2 : $9) >> 2];
    if ($2 >>> 0 >= 11) {
     $9 = $2 + 16 & -16;
     $2 = $9 + -1 | 0;
     $2 = ($2 | 0) == 11 ? $9 : $2;
    } else {
     $2 = 10;
    }
    break label$4;
   }
   $2 = -18;
  }
  $9 = $2 + 1 | 0;
  $2 = std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($9);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $10, $4);
  }
  if ($6) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 + $4 | 0, $7, $6);
  }
  $3 = $3 - $5 | 0;
  $7 = $3 - $4 | 0;
  if ($7) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(($2 + $4 | 0) + $6 | 0, ($4 + $10 | 0) + $5 | 0, $7);
  }
  if (($1 | 0) != 10) {
   dlfree($10);
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  $1 = $0;
  $0 = $3 + $6 | 0;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP8[$8 + 7 | 0] = 0;
  HEAP8[$0 + $2 | 0] = HEAPU8[$8 + 7 | 0];
  global$0 = $8 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Shape__transformFromFaceToNei_28MatStack__2c_20int_2c_20int_2c_20float_29_20const($0, $1, $2, $3, $4) {
 var $5 = Math_fround(0), $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 28 >> 2];
 $0 = ($6 + Math_imul($2, 188) | 0) + Math_imul($3, 28) | 0;
 Mat4__translate_28float_2c_20float_2c_20float_29($1, Math_fround(HEAP32[$0 + 76 >> 2]), Math_fround(HEAP32[$0 + 80 >> 2]), Math_fround(0));
 $7 = HEAP32[$0 + 84 >> 2];
 label$1 : {
  label$2 : {
   if ($7 >>> 0 > 4) {
    break label$2;
   }
   label$3 : {
    switch ($7 - 1 | 0) {
    case 0:
     $5 = $4;
     break label$2;
    case 1:
     $5 = Math_fround(-$4);
     break label$2;
    case 2:
     $5 = Math_fround(Math_fround(180) - $4);
     break label$2;
    case 3:
     break label$3;
    default:
     break label$1;
    }
   }
   $5 = Math_fround($4 + Math_fround(180));
  }
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($1, $5, Math_fround(HEAP32[$0 + 88 >> 2]), Math_fround(HEAP32[$0 + 92 >> 2]), Math_fround(HEAP32[$0 + 96 >> 2]));
 }
 $0 = (Math_imul($2, 188) + $6 | 0) + Math_imul($3, 28) | 0;
 if (HEAPU8[$0 + 100 | 0]) {
  Mat4__translate_28float_2c_20float_2c_20float_29($1, Math_fround(2), Math_fround(2), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(180), Math_fround(HEAP32[$0 + 88 >> 2]), Math_fround(HEAP32[$0 + 92 >> 2]), Math_fround(HEAP32[$0 + 96 >> 2]));
  Mat4__translate_28float_2c_20float_2c_20float_29($1, Math_fround(-2), Math_fround(-2), Math_fround(0));
 }
 if (HEAPU8[$0 + 101 | 0]) {
  Mat4__translate_28float_2c_20float_2c_20float_29($1, Math_fround(2), Math_fround(2), Math_fround(0));
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(180), Math_fround(.7071067690849304), Math_fround(.7071067690849304), Math_fround(0));
  Mat4__translate_28float_2c_20float_2c_20float_29($1, Math_fround(-2), Math_fround(-2), Math_fround(0));
 }
}
function BuildControlBase__tiledDblClick_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (($1 | 0) == -1) {
  return 0;
 }
 $2 = $1 & 3;
 label$2 : {
  if (($2 | 0) == 3) {
   break label$2;
  }
  $3 = $1 >>> 16 & 255;
  if ($3 >>> 0 > 49) {
   break label$2;
  }
  $4 = $1 >>> 2 & 127;
  if ($4 >>> 0 > 49) {
   break label$2;
  }
  $1 = $1 >>> 9 & 127;
  if ($1 >>> 0 > 49) {
   break label$2;
  }
  $5 = $1;
  $1 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
  $2 = $5 + ((($1 + Math_imul($2, 125e3) | 0) + Math_imul($3, 2500) | 0) + Math_imul($4, 50) | 0) | 0;
  $3 = HEAPU8[$2 + 136 | 0];
  if (($3 & 15) == 5) {
   HEAP8[$2 + 136 | 0] = 9;
   HEAP8[$1 + 375332 | 0] = 0;
   HEAP16[$1 + 375136 >> 1] = 257;
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
   BuildWorld__doTransparent_28_29($1);
   break label$2;
  }
  if (($3 & 12) != 8) {
   break label$2;
  }
  if (!HEAPU8[$0 + 16 | 0]) {
   $3 = HEAP32[$1 + 32 >> 2];
   if (($3 | 0) < 2) {
    break label$2;
   }
   HEAP8[$2 + 136 | 0] = 0;
   HEAP8[$1 + 375332 | 0] = 0;
   HEAP16[$1 + 375136 >> 1] = 257;
   HEAP32[$1 + 32 >> 2] = $3 + -1;
   BuildWorld__doTransparent_28_29($1);
   break label$2;
  }
  if (($3 | 0) == 10) {
   break label$2;
  }
  BuildWorld__search_28int_2c_20int_2c_20bool_2c_20bool_29($1, 10, 9);
  HEAP8[$2 + 136 | 0] = 10;
  HEAP8[$1 + 375332 | 0] = 0;
  HEAP16[$1 + 375136 >> 1] = 257;
  $1 = HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2];
  label$5 : {
   if (HEAPU8[$1 + 375332 | 0]) {
    $2 = HEAP32[$1 + 375328 >> 2];
    break label$5;
   }
   $2 = Shape__generate_28BuildWorld_20const__29($1 + 375140 | 0, $1);
   HEAP8[$1 + 375332 | 0] = 1;
   HEAP32[$1 + 375328 >> 2] = $2;
  }
  if (($2 | 0) != 3) {
   break label$2;
  }
  HEAP32[$0 + 40 >> 2] = 1065353216;
  HEAP32[$0 + 44 >> 2] = -1110651699;
 }
 BuildControlBase__makeBuffers_28_29($0);
 HEAP8[HEAP32[$0 + 4 >> 2] + 360 | 0] = 0;
 return 1;
}
function NoiseSlvProgram__setModelMat_28Mat4_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $13 = HEAP32[$0 + 216 >> 2];
 if (($13 | 0) != -1) {
  glUniformMatrix4fv($13 | 0, 1, 0, $1 | 0);
 }
 $4 = HEAPF32[$1 + 8 >> 2];
 $7 = HEAPF32[$1 + 16 >> 2];
 $8 = HEAPF32[$1 + 36 >> 2];
 $9 = HEAPF32[$1 + 32 >> 2];
 $10 = HEAPF32[$1 + 20 >> 2];
 $14 = Math_fround(Math_fround($7 * $8) - Math_fround($9 * $10));
 $5 = HEAPF32[$1 >> 2];
 $11 = HEAPF32[$1 + 40 >> 2];
 $12 = HEAPF32[$1 + 24 >> 2];
 $15 = Math_fround(Math_fround($10 * $11) - Math_fround($8 * $12));
 $6 = HEAPF32[$1 + 4 >> 2];
 $16 = Math_fround(Math_fround($7 * $11) - Math_fround($9 * $12));
 $3 = 1 / +Math_fround(Math_fround($4 * $14) + Math_fround(Math_fround($5 * $15) - Math_fround($6 * $16)));
 HEAPF32[$2 + 40 >> 2] = $3 * +Math_fround(Math_fround($5 * $10) - Math_fround($7 * $6));
 HEAPF32[$2 + 24 >> 2] = $3 * +Math_fround(Math_fround($5 * $11) - Math_fround($9 * $4));
 HEAPF32[$2 + 8 >> 2] = $3 * +$15;
 HEAPF32[$2 + 32 >> 2] = $3 * +Math_fround(Math_fround($6 * $12) - Math_fround($10 * $4));
 HEAPF32[$2 + 16 >> 2] = $3 * +$14;
 HEAPF32[$2 + 36 >> 2] = $3 * +Math_fround(-Math_fround(Math_fround($5 * $12) - Math_fround($7 * $4)));
 HEAPF32[$2 + 28 >> 2] = $3 * +Math_fround(-Math_fround(Math_fround($5 * $8) - Math_fround($9 * $6)));
 HEAPF32[$2 + 20 >> 2] = $3 * +Math_fround(-Math_fround(Math_fround($6 * $11) - Math_fround($8 * $4)));
 HEAPF32[$2 + 12 >> 2] = $3 * +Math_fround(-$16);
 $0 = HEAP32[$0 + 236 >> 2];
 if (($0 | 0) != -1) {
  glUniformMatrix3fv($0 | 0, 1, 0, $2 + 8 | 0);
 }
 global$0 = $2 + 48 | 0;
}
function Quaternion__fromMat_28Mat4_20const__29($0, $1) {
 var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
 $6 = HEAPF32[$1 + 24 >> 2];
 $7 = HEAPF32[$1 + 36 >> 2];
 $8 = HEAPF32[$1 + 32 >> 2];
 $9 = HEAPF32[$1 + 8 >> 2];
 $10 = HEAPF32[$1 + 16 >> 2];
 $11 = HEAPF32[$1 + 4 >> 2];
 $2 = HEAPF32[$1 + 40 >> 2];
 $4 = HEAPF32[$1 + 20 >> 2];
 $5 = HEAPF32[$1 >> 2];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 >> 2] = 1065353216;
 HEAP32[$0 + 4 >> 2] = 0;
 $12 = Math_fround($2 + Math_fround($5 + $4));
 if (!!($12 > Math_fround(0))) {
  $3 = Math_sqrt(+$12 + 1);
  $2 = Math_fround($3 + $3);
  HEAPF32[$0 + 8 >> 2] = Math_fround($9 - $8) / $2;
  HEAPF32[$0 + 4 >> 2] = Math_fround($7 - $6) / $2;
  HEAPF32[$0 >> 2] = $2 * Math_fround(.25);
  HEAPF32[$0 + 12 >> 2] = Math_fround($10 - $11) / $2;
  return;
 }
 if (!($5 > $4 ^ 1 | $5 > $2 ^ 1)) {
  $3 = Math_sqrt(+$5 + 1 - +$4 - +$2);
  $2 = Math_fround($3 + $3);
  HEAPF32[$0 + 8 >> 2] = Math_fround($11 + $10) / $2;
  HEAPF32[$0 + 4 >> 2] = $2 * Math_fround(.25);
  HEAPF32[$0 >> 2] = Math_fround($7 - $6) / $2;
  HEAPF32[$0 + 12 >> 2] = Math_fround($9 + $8) / $2;
  return;
 }
 if (!!($4 > $2)) {
  $3 = Math_sqrt(+$4 + 1 - +$5 - +$2);
  $2 = Math_fround($3 + $3);
  HEAPF32[$0 + 8 >> 2] = $2 * Math_fround(.25);
  HEAPF32[$0 + 4 >> 2] = Math_fround($11 + $10) / $2;
  HEAPF32[$0 >> 2] = Math_fround($9 - $8) / $2;
  HEAPF32[$0 + 12 >> 2] = Math_fround($7 + $6) / $2;
  return;
 }
 $3 = Math_sqrt(+$2 + 1 - +$5 - +$4);
 $2 = Math_fround($3 + $3);
 HEAPF32[$0 + 8 >> 2] = Math_fround($7 + $6) / $2;
 HEAPF32[$0 + 4 >> 2] = Math_fround($9 + $8) / $2;
 HEAPF32[$0 >> 2] = Math_fround($10 - $11) / $2;
 HEAPF32[$0 + 12 >> 2] = $2 * Math_fround(.25);
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
 $0 = $6;
 $7 = HEAP32[$6 + 4 >> 2];
 label$1 : {
  if (HEAP8[$6 + 11 | 0] < 0) {
   break label$1;
  }
  $7 = HEAPU8[$0 + 11 | 0];
 }
 if (HEAP8[$6 + 23 | 0] < 0) {
  $0 = HEAP32[$6 + 16 >> 2];
 } else {
  $0 = HEAPU8[$6 + 23 | 0];
 }
 if (($7 | 0) == (0 - $0 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  return;
 }
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $6, $6 + 24 | 0, $5, $4, 0) - $6 | 0;
 $2 = HEAP32[$1 >> 2];
 if (!($0 | ($2 | 0) != 12)) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 if (!(($0 | 0) != 12 | ($2 | 0) > 11)) {
  HEAP32[$1 >> 2] = $2 + 12;
 }
}
function void_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20_____push_back_slow_path_Shape__SideDef__28Shape__SideDef___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 $6 = HEAP32[$0 >> 2];
 $4 = ($3 - $6 | 0) / 24 | 0;
 $2 = $4 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 < 178956971) {
   $7 = Math_imul($4, 24);
   $5 = (HEAP32[$0 + 8 >> 2] - $6 | 0) / 24 | 0;
   $4 = $5 << 1;
   $5 = $5 >>> 0 < 89478485 ? $4 >>> 0 < $2 >>> 0 ? $2 : $4 : 178956970;
   $2 = 0;
   label$3 : {
    if (!$5) {
     break label$3;
    }
    if ($5 >>> 0 >= 178956971) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29(Math_imul($5, 24));
   }
   $8 = $2;
   $2 = $7 + $2 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 20 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$2 + 20 >> 2] = $4;
   $1 = $2 + 24 | 0;
   if (($3 | 0) != ($6 | 0)) {
    while (1) {
     $2 = $2 + -24 | 0;
     $3 = $3 + -24 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     $4 = HEAP32[$3 + 20 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = $4;
     if (($3 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    $3 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $8 + Math_imul($5, 24);
   HEAP32[$0 + 4 >> 2] = $1;
   if ($3) {
    dlfree($3);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function MyObject___MyObject_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 8 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 76 >> 2];
 if ($1) {
  while (1) {
   $2 = HEAP32[$1 >> 2];
   dlfree($1);
   $1 = $2;
   if ($1) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 68 >> 2];
 HEAP32[$0 + 68 >> 2] = 0;
 if ($1) {
  dlfree($1);
 }
 label$7 : {
  if (!HEAP32[$0 + 60 >> 2]) {
   break label$7;
  }
  $1 = HEAP32[$0 + 56 >> 2];
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 52 | 0;
  $4 = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 60 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$7;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 label$9 : {
  if (!HEAP32[$0 + 48 >> 2]) {
   break label$9;
  }
  $1 = HEAP32[$0 + 44 >> 2];
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 40 | 0;
  $4 = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 48 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$9;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 label$11 : {
  if (!HEAP32[$0 + 36 >> 2]) {
   break label$11;
  }
  $1 = HEAP32[$0 + 32 >> 2];
  $3 = HEAP32[$1 >> 2];
  $2 = $0 + 28 | 0;
  $4 = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $3;
  HEAP32[$0 + 36 >> 2] = 0;
  if (($1 | 0) == ($2 | 0)) {
   break label$11;
  }
  while (1) {
   $0 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function atanf($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $1 = $4 & 2147483647;
 label$1 : {
  if ($1 >>> 0 >= 1283457024) {
   if ($1 >>> 0 > 2139095040) {
    break label$1;
   }
   return ($4 | 0) < 0 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997);
  }
  label$3 : {
   if ($1 >>> 0 <= 1054867455) {
    $3 = -1;
    if ($1 >>> 0 >= 964689920) {
     break label$3;
    }
    break label$1;
   }
   $0 = Math_fround(Math_abs($0));
   if ($1 >>> 0 <= 1066926079) {
    if ($1 >>> 0 <= 1060110335) {
     $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1)) / Math_fround($0 + Math_fround(2)));
     $3 = 0;
     break label$3;
    }
    $0 = Math_fround(Math_fround($0 + Math_fround(-1)) / Math_fround($0 + Math_fround(1)));
    $3 = 1;
    break label$3;
   }
   if ($1 >>> 0 <= 1075576831) {
    $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1)));
    $3 = 2;
    break label$3;
   }
   $0 = Math_fround(Math_fround(-1) / $0);
   $3 = 3;
  }
  $1 = $3;
  $5 = Math_fround($0 * $0);
  $2 = Math_fround($5 * $5);
  $6 = Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
  $2 = Math_fround($5 * Math_fround(Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
  if (($1 | 0) <= -1) {
   return Math_fround($0 - Math_fround($0 * Math_fround($6 + $2)));
  }
  $1 = $1 << 2;
  $0 = Math_fround(HEAPF32[$1 + 20784 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $2)) - HEAPF32[$1 + 20800 >> 2]) - $0));
  $0 = ($4 | 0) < 0 ? Math_fround(-$0) : $0;
 }
 return $0;
}
function Shape__buildSidesAndCorners_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = HEAP32[$0 >> 2];
 if (($1 | 0) < 1) {
  return 0;
 }
 $10 = $0 + 44 | 0;
 $4 = $0 + 56 | 0;
 $5 = $0 + 32 | 0;
 $6 = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (($6 | 0) >= 1) {
   $7 = HEAP32[$0 + 8 >> 2];
   $2 = 0;
   while (1) {
    $1 = 0;
    if (($7 | 0) > 0) {
     while (1) {
      $8 = Shape__checkSide_28EAxis_2c_20int_2c_20int_2c_20int_2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___29($0, 1, $3, $2, $1, $5, $4) ^ 1 | $8 | Shape__checkSide_28EAxis_2c_20int_2c_20int_2c_20int_2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___29($0, 2, $3, $2, $1, $5, $4) ^ 1 | Shape__checkSide_28EAxis_2c_20int_2c_20int_2c_20int_2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___2c_20std____2__vector_Shape__SideDef_2c_20std____2__allocator_Shape__SideDef__20___29($0, 3, $3, $2, $1, $5, $4) ^ 1;
      $9 = Shape__checkCorner_28int_2c_20int_2c_20int_2c_20std____2__vector_Shape__CornerDef_2c_20std____2__allocator_Shape__CornerDef__20___29($0, $3, $2, $1, $10) ^ 1 | $9;
      $1 = $1 + 4 | 0;
      $7 = HEAP32[$0 + 8 >> 2];
      if (($1 | 0) < ($7 | 0)) {
       continue;
      }
      break;
     }
     $6 = HEAP32[$0 + 4 >> 2];
    }
    $2 = $2 + 4 | 0;
    if (($2 | 0) < ($6 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$0 >> 2];
  }
  $3 = $3 + 4 | 0;
  if (($3 | 0) < ($1 | 0)) {
   continue;
  }
  break;
 }
 $1 = $8 & 1;
 if (!$1) {
  return $9 & 1 ? $1 ? 0 : 255 : 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return 3;
}
function serializeCurrent_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 CubeDocBase__serializeMinBin_28_29($1 + 24 | 0, HEAP32[11720]);
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 label$1 : {
  $2 = HEAP8[$1 + 35 | 0];
  $2 = ($2 | 0) < 0 ? HEAP32[$1 + 28 >> 2] : $2 & 255;
  if ($2) {
   if ($2 >>> 0 >= 1073741824) {
    break label$1;
   }
   $2 = $2 << 2;
   $3 = operator_20new_28unsigned_20long_29($2);
   HEAP32[$1 + 8 >> 2] = $3;
   $4 = $2 + $3 | 0;
   HEAP32[$1 + 16 >> 2] = $4;
   memset($3, 0, $2);
   HEAP32[$1 + 12 >> 2] = $4;
  }
  $2 = _emval_get_global(1510) | 0;
  $5 = _emval_new($2 | 0, 0, 3472, $1 + 40 | 0) | 0;
  HEAP32[$0 >> 2] = $5;
  _emval_decref($2 | 0);
  $4 = HEAPU8[$1 + 35 | 0];
  $2 = $4 << 24 >> 24;
  $3 = ($2 | 0) < 0;
  label$3 : {
   if (!($3 ? HEAP32[$1 + 28 >> 2] : $4)) {
    break label$3;
   }
   $4 = 0;
   while (1) {
    $2 = HEAPU8[($3 ? HEAP32[$1 + 24 >> 2] : $1 + 24 | 0) + $4 | 0];
    if (!(!!(HEAPU8[47464] != 0) | HEAP8[47464] & 1)) {
     HEAP32[11865] = _emval_get_method_caller(2, 3472);
     HEAP32[11866] = 0;
     HEAP32[11866] = HEAP32[11866] | 1;
    }
    $3 = HEAP32[11865];
    HEAP32[$1 + 40 >> 2] = $2;
    _emval_call_void_method($3 | 0, $5 | 0, 1516, $1 + 40 | 0);
    $2 = HEAP8[$1 + 35 | 0];
    $3 = ($2 | 0) < 0;
    $4 = $4 + 1 | 0;
    if ($4 >>> 0 >= ($3 ? HEAP32[$1 + 28 >> 2] : $2 & 255) >>> 0) {
     break label$3;
    }
    $5 = HEAP32[$0 >> 2];
    continue;
   }
  }
  $0 = HEAP32[$1 + 8 >> 2];
  if ($0) {
   HEAP32[$1 + 12 >> 2] = $0;
   dlfree($0);
   $2 = HEAPU8[$1 + 35 | 0];
  }
  if ($2 << 24 >> 24 <= -1) {
   dlfree(HEAP32[$1 + 24 >> 2]);
  }
  global$0 = $1 + 48 | 0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 40 | 0, 43184);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 16 | 0);
 $0 = $0 + 12 | 0;
 $2 = 0;
 label$3 : {
  if (!HEAP32[$0 >> 2]) {
   break label$3;
  }
  $2 = !HEAP32[$0 + 4 >> 2];
 }
 label$2 : {
  if ($2) {
   $0 = HEAP32[$0 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
   if (HEAPU8[$0 + 5 | 0] != 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
   }
   break label$2;
  }
  if (HEAP32[$0 + 4 >> 2]) {
   $2 = HEAP32[$0 >> 2] != 0;
  } else {
   $2 = 0;
  }
  if (!$2) {
   break label$2;
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$3 + 36 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 32 >> 2] = $2;
  $0 = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 12 >> 2] = $0;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 38575);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 global$0 = $3 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
 $4 = $3;
 $6 = $3;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 12 >> 2];
   $5 = HEAPU8[$2 + 6 | 0];
   label$3 : {
    if (($5 | 0) != 2) {
     $2 = !$5;
     break label$3;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2, $1) | 0;
   }
   if (!$2) {
    $2 = HEAP32[$0 + 12 >> 2];
    $5 = HEAPU8[$2 + 7 | 0];
    label$6 : {
     if (($5 | 0) != 2) {
      $2 = !$5;
      break label$6;
     }
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1) | 0;
    }
    if (!$2) {
     break label$2;
    }
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 40 | 0, 35572);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 32 | 0, 41284);
 }
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 16 | 0);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 43416);
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 global$0 = $3 + 48 | 0;
}
function std____2__common_type_std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__20___type_20std____2__chrono__operator__long_20long_2c_20std____2__ratio_1ll_2c_201ll__2c_20long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $0 = std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20___duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__2c_20std____2__enable_if__28__no_overflow_std____2__ratio_1ll_2c_201ll__2c_20std____2__ratio_1ll_2c_201000000000ll__20___value_29_20___20_28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28_28_28__no_overflow_std____2__ratio_1ll_2c_201ll__2c_20std____2__ratio_1ll_2c_201000000000ll__20___type__den_29_20___20_281_29_29_20___20_28__28treat_as_floating_point_long_20long___value_29_29_29_29_2c_20void___type__29($2 + 8 | 0, $0);
 $3 = HEAP32[$0 >> 2];
 $4 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 $1 = HEAP32[$2 + 4 >> 2] + $4 | 0;
 $4 = HEAP32[$2 >> 2];
 $3 = $3 + $4 | 0;
 if ($3 >>> 0 < $4 >>> 0) {
  $1 = $1 + 1 | 0;
 }
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 20 >> 2];
 $0 = $2 + 24 | 0;
 HEAP32[$0 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 global$0 = $2 + 32 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
 return HEAP32[$0 >> 2];
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___20std____2____input_arithmetic_with_numeric_limits_int_2c_20char_2c_20std____2__char_traits_char__20__28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 if (HEAPU8[std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($2 + 40 | 0, $0) | 0]) {
  HEAP32[$2 + 36 >> 2] = 0;
  $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$2 + 24 >> 2] = $3;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
  $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 24 | 0, 51252);
  HEAP32[$2 + 16 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  HEAP32[$2 + 8 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $2 + 36 | 0, $2 + 32 | 0) | 0;
  $3 = HEAP32[$2 + 24 >> 2];
  $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
  HEAP32[$3 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  }
  label$4 : {
   if (HEAP32[$2 + 32 >> 2] < -2147483648) {
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] | 4;
    $3 = -2147483648;
    break label$4;
   }
   if (HEAP32[$2 + 32 >> 2] > 2147483647) {
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] | 4;
    $3 = 2147483647;
    break label$4;
   }
   $3 = HEAP32[$2 + 32 >> 2];
  }
  HEAP32[$1 >> 2] = $3;
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$1 + 16 >> 2] = !HEAP32[$1 + 24 >> 2] | (HEAP32[$2 + 36 >> 2] | HEAP32[$1 + 16 >> 2]);
 }
 global$0 = $2 + 48 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] == ($0 + 12 | 0);
 label$1 : {
  if (HEAP32[$1 >> 2] == ($1 + 12 | 0)) {
   if (!$2) {
    dlfree(HEAP32[$0 >> 2]);
    HEAP32[$0 + 8 >> 2] = $0 + 44;
    $2 = $0 + 12 | 0;
    HEAP32[$0 + 4 >> 2] = $2;
    HEAP32[$0 >> 2] = $2;
   }
   $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2 << 2);
   break label$1;
  }
  if ($2) {
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 8 >> 2] = $1 + 44;
   $0 = $1 + 12 | 0;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$1 >> 2] = $0;
   return;
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
 }
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 >> 2];
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
 $0 = $6;
 $7 = HEAP32[$6 + 4 >> 2];
 label$1 : {
  if (HEAP8[$6 + 11 | 0] < 0) {
   break label$1;
  }
  $7 = HEAPU8[$0 + 11 | 0];
 }
 if (HEAP8[$6 + 23 | 0] < 0) {
  $0 = HEAP32[$6 + 16 >> 2];
 } else {
  $0 = HEAPU8[$6 + 23 | 0];
 }
 if (($7 | 0) == (0 - $0 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  return;
 }
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $6, $6 + 24 | 0, $5, $4, 0) - $6 | 0;
 $2 = HEAP32[$1 >> 2];
 if (!($0 | ($2 | 0) != 12)) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 if (!(($0 | 0) != 12 | ($2 | 0) > 11)) {
  HEAP32[$1 >> 2] = $2 + 12;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$2 + 12 >> 2] = $1;
  label$2 : {
   if (!$1) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$2;
   }
   $1 = $2 + 12 | 0;
   $3 = $2 + 8 | 0;
   $1 = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$3 >> 2]);
   break label$1;
  }
  $1 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function Shape__faceNei_28int_2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = -1;
 $6 = HEAP32[$0 + 28 >> 2];
 $4 = $6 + Math_imul($1, 188) | 0;
 $5 = HEAP32[$4 + 44 >> 2];
 label$1 : {
  if (($5 | 0) == -1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 32 >> 2] + Math_imul($5, 24) | 0;
  $3 = HEAP32[$5 + 20 >> 2];
  $5 = HEAP32[$5 + 16 >> 2];
  if (($5 | 0) == ($1 | 0)) {
   break label$1;
  }
  $3 = ($1 | 0) == ($3 | 0) ? $5 : -1;
 }
 HEAP32[$2 >> 2] = $3;
 $3 = HEAP32[$4 + 48 >> 2];
 label$2 : {
  if (($3 | 0) != -1) {
   $4 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
   $3 = HEAP32[$4 + 20 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
   if (($4 | 0) != ($1 | 0)) {
    if (($1 | 0) != ($3 | 0)) {
     HEAP32[$2 + 4 >> 2] = -1;
     break label$2;
    }
    HEAP32[$2 + 4 >> 2] = $4;
    break label$2;
   }
   HEAP32[$2 + 4 >> 2] = $3;
   break label$2;
  }
  HEAP32[$2 + 4 >> 2] = -1;
 }
 $3 = HEAP32[(Math_imul($1, 188) + $6 | 0) + 52 >> 2];
 label$6 : {
  if (($3 | 0) != -1) {
   $4 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
   $3 = HEAP32[$4 + 20 >> 2];
   $4 = HEAP32[$4 + 16 >> 2];
   if (($4 | 0) != ($1 | 0)) {
    if (($1 | 0) != ($3 | 0)) {
     HEAP32[$2 + 8 >> 2] = -1;
     break label$6;
    }
    HEAP32[$2 + 8 >> 2] = $4;
    break label$6;
   }
   HEAP32[$2 + 8 >> 2] = $3;
   break label$6;
  }
  HEAP32[$2 + 8 >> 2] = -1;
 }
 $3 = HEAP32[(Math_imul($1, 188) + $6 | 0) + 56 >> 2];
 if (($3 | 0) != -1) {
  $3 = HEAP32[$0 + 32 >> 2] + Math_imul($3, 24) | 0;
  $0 = HEAP32[$3 + 20 >> 2];
  $3 = HEAP32[$3 + 16 >> 2];
  if (($3 | 0) != ($1 | 0)) {
   if (($0 | 0) != ($1 | 0)) {
    HEAP32[$2 + 12 >> 2] = -1;
    return;
   }
   HEAP32[$2 + 12 >> 2] = $3;
   return;
  }
  HEAP32[$2 + 12 >> 2] = $0;
  return;
 }
 HEAP32[$2 + 12 >> 2] = -1;
}
function setGrpCount_28int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  label$2 : {
   if (($0 | 0) >= 0) {
    $3 = HEAP32[11988];
    $2 = HEAP32[$3 + 4 >> 2];
    if ((HEAP32[$3 + 8 >> 2] - $2 | 0) / 152 >>> 0 > $0 >>> 0) {
     break label$2;
    }
   }
   $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1422, 17), $0);
   $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
   HEAP32[$4 + 8 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 51440);
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
   $1 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   if (($3 | 0) == -1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $2);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
   break label$1;
  }
  $2 = $2 + Math_imul($0, 152) | 0;
  $0 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  if (($0 | 0) == ($2 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$3 + 16 >> 2];
  while (1) {
   HEAP32[($3 + Math_imul(HEAP32[$0 >> 2], 652) | 0) + 348 >> 2] = $1;
   $0 = $0 + 4 | 0;
   if (($2 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 16 | 0;
}
function NoiseSlvProgram___NoiseSlvProgram_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15388;
 HEAP32[$0 + 372 >> 2] = 2816;
 if (HEAP8[$0 + 391 | 0] <= -1) {
  dlfree(HEAP32[$0 + 380 >> 2]);
 }
 HEAP32[$0 + 352 >> 2] = 2816;
 if (HEAP8[$0 + 371 | 0] <= -1) {
  dlfree(HEAP32[$0 + 360 >> 2]);
 }
 HEAP32[$0 + 332 >> 2] = 2816;
 if (HEAP8[$0 + 351 | 0] <= -1) {
  dlfree(HEAP32[$0 + 340 >> 2]);
 }
 HEAP32[$0 + 312 >> 2] = 2816;
 if (HEAP8[$0 + 331 | 0] <= -1) {
  dlfree(HEAP32[$0 + 320 >> 2]);
 }
 HEAP32[$0 + 292 >> 2] = 2816;
 if (HEAP8[$0 + 311 | 0] <= -1) {
  dlfree(HEAP32[$0 + 300 >> 2]);
 }
 HEAP32[$0 + 272 >> 2] = 2816;
 if (HEAP8[$0 + 291 | 0] <= -1) {
  dlfree(HEAP32[$0 + 280 >> 2]);
 }
 HEAP32[$0 + 252 >> 2] = 2816;
 if (HEAP8[$0 + 271 | 0] <= -1) {
  dlfree(HEAP32[$0 + 260 >> 2]);
 }
 HEAP32[$0 + 232 >> 2] = 2816;
 if (HEAP8[$0 + 251 | 0] <= -1) {
  dlfree(HEAP32[$0 + 240 >> 2]);
 }
 HEAP32[$0 + 212 >> 2] = 2816;
 if (HEAP8[$0 + 231 | 0] <= -1) {
  dlfree(HEAP32[$0 + 220 >> 2]);
 }
 HEAP32[$0 + 192 >> 2] = 2816;
 if (HEAP8[$0 + 211 | 0] <= -1) {
  dlfree(HEAP32[$0 + 200 >> 2]);
 }
 HEAP32[$0 + 172 >> 2] = 2816;
 if (HEAP8[$0 + 191 | 0] <= -1) {
  dlfree(HEAP32[$0 + 180 >> 2]);
 }
 HEAP32[$0 + 152 >> 2] = 2816;
 if (HEAP8[$0 + 171 | 0] <= -1) {
  dlfree(HEAP32[$0 + 160 >> 2]);
 }
 HEAP32[$0 >> 2] = 2852;
 HEAP32[$0 + 132 >> 2] = 2816;
 if (HEAP8[$0 + 151 | 0] <= -1) {
  dlfree(HEAP32[$0 + 140 >> 2]);
 }
 HEAP32[$0 + 112 >> 2] = 2816;
 if (HEAP8[$0 + 131 | 0] <= -1) {
  dlfree(HEAP32[$0 + 120 >> 2]);
 }
 HEAP32[$0 + 92 >> 2] = 2816;
 if (HEAP8[$0 + 111 | 0] <= -1) {
  dlfree(HEAP32[$0 + 100 >> 2]);
 }
 HEAP32[$0 + 72 >> 2] = 2816;
 if (HEAP8[$0 + 91 | 0] <= -1) {
  dlfree(HEAP32[$0 + 80 >> 2]);
 }
 ShaderProgram___ShaderProgram_28_29($0);
 return $0 | 0;
}
function BoundedBlockSpace3D__passFill_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = HEAP32[$0 >> 2];
 if (($2 | 0) < 1) {
  return 0;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (($1 | 0) >= 1) {
   $8 = HEAP32[$0 + 8 >> 2];
   $5 = 0;
   while (1) {
    if (($8 | 0) > 0) {
     $4 = -1;
     $9 = 1;
     $2 = 0;
     while (1) {
      $1 = $4;
      $10 = HEAP32[$0 + 16 >> 2];
      $11 = Math_imul(HEAP32[$0 >> 2], $5) + $6 | 0;
      $3 = HEAP32[$0 + 12 >> 2];
      $4 = HEAPU8[$10 + ($11 + Math_imul($3, $2) | 0) | 0];
      $1 = $4 & 64 ? $2 : $1;
      label$7 : {
       if (!($4 & 32)) {
        $4 = $1;
        break label$7;
       }
       $4 = -1;
       if (($1 | 0) == -1) {
        break label$7;
       }
       if (!(($9 | 0) != 1 | ($1 | 0) > ($2 | 0))) {
        $3 = (Math_imul($1, $3) + $11 | 0) + $10 | 0;
        HEAP8[$3 | 0] = HEAPU8[$3 | 0] | 1;
        $7 = $7 + 1 | 0;
        if (($1 | 0) < ($2 | 0)) {
         while (1) {
          $1 = $1 + 1 | 0;
          $3 = HEAP32[$0 + 16 >> 2] + ((Math_imul(HEAP32[$0 >> 2], $5) + $6 | 0) + Math_imul($1, HEAP32[$0 + 12 >> 2]) | 0) | 0;
          HEAP8[$3 | 0] = HEAPU8[$3 | 0] | 1;
          $7 = $7 + 1 | 0;
          if (($1 | 0) < ($2 | 0)) {
           continue;
          }
          break;
         }
        }
        $8 = HEAP32[$0 + 8 >> 2];
       }
       $9 = 1 - $9 | 0;
      }
      $2 = $2 + 1 | 0;
      if (($2 | 0) < ($8 | 0)) {
       continue;
      }
      break;
     }
     $1 = HEAP32[$0 + 4 >> 2];
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($1 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 >> 2];
  }
  $6 = $6 + 1 | 0;
  if (($6 | 0) < ($2 | 0)) {
   continue;
  }
  break;
 }
 return $7;
}
function MyObject__addPoly_28Vec3__2c_20TexAnchor__2c_20Texture__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 64 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
 $4 = HEAP32[$3 + 28 >> 2];
 label$1 : {
  if (($4 | 0) < HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = $4 + 1;
   $3 = HEAP32[$3 + 20 >> 2] + Math_imul($4, 68) | 0;
   break label$1;
  }
  $3 = operator_20new_28unsigned_20long_29(68);
  HEAP32[$3 + 56 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[11991] = HEAP32[11991] + 1;
 }
 if ($2) {
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 32 >> 2] = $4;
  $4 = HEAP32[$2 + 12 >> 2];
  HEAP32[$3 + 36 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$3 + 40 >> 2] = $4;
  $4 = HEAP32[$2 + 20 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$3 + 48 >> 2] = $4;
  $4 = HEAP32[$2 + 28 >> 2];
  HEAP32[$3 + 52 >> 2] = HEAP32[$2 + 24 >> 2];
  HEAP32[$3 + 56 >> 2] = $4;
 }
 HEAP32[$3 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1);
 HEAP32[$3 + 4 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1 + 12 | 0);
 HEAP32[$3 + 8 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1 + 24 | 0);
 HEAP32[$3 + 12 >> 2] = MyObject__CopyCheckPoint_28Vec3_20const__29($0, $1 + 36 | 0);
 $1 = operator_20new_28unsigned_20long_29(12);
 HEAP32[$1 + 4 >> 2] = $0 + 28;
 HEAP32[$1 + 8 >> 2] = $3;
 $2 = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
}
function std____2__enable_if__28__is_forward_iterator_SlvCube__SlvPiece____value_29_20___20_28is_constructible_SlvCube__SlvPiece_2c_20std____2__iterator_traits_SlvCube__SlvPiece____reference___value_29_2c_20void___type_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20___assign_SlvCube__SlvPiece___28SlvCube__SlvPiece__2c_20SlvCube__SlvPiece__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $5 = $2 - $1 | 0;
  $6 = $5 >> 3;
  $3 = HEAP32[$0 + 8 >> 2];
  $4 = HEAP32[$0 >> 2];
  label$2 : {
   if ($6 >>> 0 <= $3 - $4 >> 3 >>> 0) {
    $3 = HEAP32[$0 + 4 >> 2] - $4 | 0;
    $5 = $3 >> 3;
    $3 = $6 >>> 0 > $5 >>> 0 ? $1 + $3 | 0 : $2;
    $7 = $3 - $1 | 0;
    if ($7) {
     memmove($4, $1, $7);
    }
    if ($6 >>> 0 > $5 >>> 0) {
     $1 = $2 - $3 | 0;
     if (($1 | 0) < 1) {
      break label$2;
     }
     memcpy(HEAP32[$0 + 4 >> 2], $3, $1);
     HEAP32[$0 + 4 >> 2] = $1 + HEAP32[$0 + 4 >> 2];
     return;
    }
    HEAP32[$0 + 4 >> 2] = $4 + ($7 >> 3 << 3);
    return;
   }
   if ($4) {
    HEAP32[$0 + 4 >> 2] = $4;
    dlfree($4);
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $3 = 0;
   }
   if ($6 >>> 0 >= 536870912) {
    break label$1;
   }
   $2 = $3 >> 2;
   $2 = $3 >> 3 >>> 0 < 268435455 ? $2 >>> 0 < $6 >>> 0 ? $6 : $2 : 536870911;
   if ($2 >>> 0 >= 536870912) {
    break label$1;
   }
   $4 = $2 << 3;
   $2 = operator_20new_28unsigned_20long_29($4);
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + $4;
   if (($5 | 0) < 1) {
    break label$2;
   }
   HEAP32[$0 + 4 >> 2] = memcpy($2, $1, $5) + $5;
  }
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function CubeDocBase__popState_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 + 108 >> 2];
 $2 = HEAP32[11988];
 $4 = HEAP32[$2 + 20 >> 2];
 $2 = HEAP32[$2 + 16 >> 2];
 if (($4 | 0) != ($2 | 0)) {
  $5 = $3 + -32 | 0;
  $6 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2] - $6 >> 2;
  $4 = ($4 - $2 | 0) / 652 | 0;
  while (1) {
   HEAP32[($2 + Math_imul($1, 652) | 0) + 348 >> 2] = $1 >>> 0 < $5 >>> 0 ? HEAP32[$6 + ($1 << 2) >> 2] : 0;
   $1 = $1 + 1 | 0;
   if ($1 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$3 + -20 >> 2];
 $2 = HEAP32[$3 + -16 >> 2];
 if ($2) {
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
 }
 HEAP32[$0 + 116 >> 2] = $1;
 $1 = HEAP32[$0 + 120 >> 2];
 HEAP32[$0 + 120 >> 2] = $2;
 label$6 : {
  if (!$1) {
   break label$6;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$6;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $1 = $3 + -8 | 0;
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 $1 = HEAP32[$0 + 128 >> 2];
 HEAP32[$0 + 128 >> 2] = $2;
 if ($1) {
  Shape___Shape_28_29($1 + 375140 | 0);
  $2 = HEAP32[$1 + 28 >> 2];
  if ($2) {
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = $3 + -12 | 0;
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 $1 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = $2;
 if ($1) {
  std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($1);
 }
 HEAP32[$0 + 132 >> 2] = HEAP32[$3 + -4 >> 2];
 HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[$0 + 116 >> 2] + 12 >> 2];
 $3 = HEAP32[$0 + 108 >> 2] + -32 | 0;
 std____2__allocator_CubeDocBase__DocState___destroy_28CubeDocBase__DocState__29($3);
 HEAP32[$0 + 108 >> 2] = $3;
}
function CubeDocBase__CubeDocBase_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP16[$0 + 4 >> 1] = 256;
 HEAP32[$0 >> 2] = 15476;
 HEAP32[$0 + 68 >> 2] = 1060320051;
 $1 = $0;
 HEAP32[$1 + 60 >> 2] = 1060320051;
 HEAP32[$1 + 64 >> 2] = 1060320051;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = -1;
 HEAP16[$1 + 48 >> 1] = 0;
 HEAP32[$1 + 28 >> 2] = 1;
 HEAP32[$1 + 32 >> 2] = 1;
 HEAP8[$1 + 24 | 0] = 0;
 HEAP32[$1 + 16 >> 2] = 3;
 HEAP32[$1 + 20 >> 2] = 1;
 HEAP32[$1 + 8 >> 2] = 2e3;
 HEAP32[$1 + 12 >> 2] = 8;
 HEAP8[$1 + 6 | 0] = 1;
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = -1;
 HEAP32[$1 + 136 >> 2] = -1;
 $3 = operator_20new_28unsigned_20long_29(375336);
 BuildWorld__BuildWorld_28_29($3);
 $2 = HEAP32[$1 + 128 >> 2];
 HEAP32[$1 + 128 >> 2] = $3;
 if ($2) {
  Shape___Shape_28_29($2 + 375140 | 0);
  $1 = HEAP32[$2 + 28 >> 2];
  if ($1) {
   dlfree($1);
  }
  dlfree($2);
 }
 $1 = operator_20new_28unsigned_20long_29(24);
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP8[$1 + 20 | 0] = 0;
 $2 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = $1;
 if ($2) {
  Solutions__clear_28int_29($2);
  $1 = HEAP32[$2 + 8 >> 2];
  if ($1) {
   HEAP32[$2 + 12 >> 2] = $1;
   dlfree($1);
  }
  dlfree($2);
 }
 HEAP32[11981] = $0;
 return $0;
}
function Cube__rmvPicArr_28PicArr_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $2 = HEAP32[HEAP32[$0 + 36 >> 2] + 28 >> 2] + Math_imul($2, 188) | 0;
  $3 = HEAP32[$2 >> 2];
  if ($3 >>> 0 > 2) {
   break label$1;
  }
  $4 = HEAP32[$0 + 40 >> 2];
  $5 = HEAP32[$0 + 52 >> 2];
  $6 = (HEAP32[$2 + 4 >> 2] + Math_imul($4, HEAP32[$2 + 8 >> 2]) | 0) + Math_imul($5, HEAP32[$2 + 12 >> 2]) | 0;
  label$2 : {
   switch ($3 - 1 | 0) {
   default:
    $2 = 0;
    while (1) {
     $3 = $2 << 2;
     $7 = HEAP32[$3 + 6960 >> 2];
     $3 = HEAP32[$3 + 6896 >> 2];
     if (HEAPU8[(Math_imul($7, 5) + $3 | 0) + $1 | 0]) {
      $3 = HEAP32[$0 + 56 >> 2] + ((Math_imul($3, $5) + $6 | 0) + Math_imul($4, $7) << 2) | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 16) {
      continue;
     }
     break;
    }
    break label$1;
   case 0:
    $2 = 0;
    while (1) {
     $4 = $2 << 2;
     $3 = HEAP32[$4 + 6960 >> 2];
     $4 = HEAP32[$4 + 6896 >> 2];
     if (HEAPU8[(Math_imul($3, 5) + $4 | 0) + $1 | 0]) {
      $4 = HEAP32[$0 + 56 >> 2] + (($4 + $6 | 0) + Math_imul($3, $5) << 2) | 0;
      HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + -1;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 16) {
      continue;
     }
     break;
    }
    break label$1;
   case 1:
    break label$2;
   }
  }
  $2 = 0;
  while (1) {
   $5 = $2 << 2;
   $3 = HEAP32[$5 + 6960 >> 2];
   $5 = HEAP32[$5 + 6896 >> 2];
   if (HEAPU8[(Math_imul($3, 5) + $5 | 0) + $1 | 0]) {
    $5 = HEAP32[$0 + 56 >> 2] + (($5 + $6 | 0) + Math_imul($3, $4) << 2) | 0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 16) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $1 = HEAP32[$1 >> 2];
 $7 = HEAP32[$2 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 + 12 >> 2] = $7;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAPU8[$4 | 0];
 $4 = HEAP32[$5 >> 2];
 $5 = HEAP32[$6 + 12 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $6, $2, $3, $4);
 global$0 = $6 + 16 | 0;
 return $0;
}
function Cube__putPicArr_28PicArr_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  $2 = HEAP32[HEAP32[$0 + 36 >> 2] + 28 >> 2] + Math_imul($2, 188) | 0;
  $3 = HEAP32[$2 >> 2];
  if ($3 >>> 0 > 2) {
   break label$1;
  }
  $4 = HEAP32[$0 + 40 >> 2];
  $5 = HEAP32[$0 + 52 >> 2];
  $6 = (HEAP32[$2 + 4 >> 2] + Math_imul($4, HEAP32[$2 + 8 >> 2]) | 0) + Math_imul($5, HEAP32[$2 + 12 >> 2]) | 0;
  label$2 : {
   switch ($3 - 1 | 0) {
   default:
    $2 = 0;
    while (1) {
     $3 = $2 << 2;
     $7 = HEAP32[$3 + 6960 >> 2];
     $3 = HEAP32[$3 + 6896 >> 2];
     if (HEAPU8[(Math_imul($7, 5) + $3 | 0) + $1 | 0]) {
      $3 = HEAP32[$0 + 56 >> 2] + ((Math_imul($3, $5) + $6 | 0) + Math_imul($4, $7) << 2) | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 16) {
      continue;
     }
     break;
    }
    break label$1;
   case 0:
    $2 = 0;
    while (1) {
     $4 = $2 << 2;
     $3 = HEAP32[$4 + 6960 >> 2];
     $4 = HEAP32[$4 + 6896 >> 2];
     if (HEAPU8[(Math_imul($3, 5) + $4 | 0) + $1 | 0]) {
      $4 = HEAP32[$0 + 56 >> 2] + (($4 + $6 | 0) + Math_imul($3, $5) << 2) | 0;
      HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 16) {
      continue;
     }
     break;
    }
    break label$1;
   case 1:
    break label$2;
   }
  }
  $2 = 0;
  while (1) {
   $5 = $2 << 2;
   $3 = HEAP32[$5 + 6960 >> 2];
   $5 = HEAP32[$5 + 6896 >> 2];
   if (HEAPU8[(Math_imul($3, 5) + $5 | 0) + $1 | 0]) {
    $5 = HEAP32[$0 + 56 >> 2] + (($5 + $6 | 0) + Math_imul($3, $4) << 2) | 0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 16) {
    continue;
   }
   break;
  }
 }
}
function BaseGLWidget__doChoise_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 if (!(!!(HEAPU8[47940] != 0) | HEAP8[47940] & 1)) {
  HEAP32[11982] = 0;
  HEAP32[11983] = 0;
  HEAP32[11984] = 0;
  HEAP32[11985] = 0;
  HEAP32[11985] = HEAP32[11985] | 1;
 }
 $4 = HEAP32[11986];
 $7 = HEAP32[$0 + 288 >> 2];
 label$2 : {
  label$3 : {
   if (($4 | 0) != ($7 | 0)) {
    $5 = HEAP32[$0 + 292 >> 2];
    break label$3;
   }
   $5 = HEAP32[$0 + 292 >> 2];
   $6 = HEAP32[11987];
   if (($5 | 0) == ($6 | 0)) {
    break label$2;
   }
  }
  HEAP32[11987] = $5;
  HEAP32[11986] = $7;
  HEAP32[$3 + 32 >> 2] = Math_imul($5, $7) << 2;
  emscripten_asm_const_iii(6686, 3467, $3 + 32 | 0) | 0;
  $6 = HEAP32[11987];
  $4 = HEAP32[11986];
 }
 $5 = -1;
 if (!(($1 | $2) < 0 | ($4 | 0) <= ($1 | 0) | ($6 | 0) <= ($2 | 0))) {
  $5 = $3;
  if (!HEAPU8[$0 + 360 | 0]) {
   glClearColor(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), Math_fround(Math_fround(1)));
   glClear(16640);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6676);
   $4 = HEAP32[$0 + 320 >> 2];
   if ($4) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] >> 2]]($4, 1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6680);
   HEAP32[$3 + 16 >> 2] = HEAP32[11986];
   HEAP32[$3 + 20 >> 2] = HEAP32[11987];
   emscripten_asm_const_iii(6771, 1093, $3 + 16 | 0) | 0;
   HEAP8[$0 + 284 | 0] = 1;
   HEAP8[$0 + 360 | 0] = 1;
   $6 = HEAP32[11987];
   $4 = HEAP32[11986];
  }
  HEAP32[$5 >> 2] = Math_imul(($2 ^ -1) + $6 | 0, $4) + $1 << 2;
  $0 = emscripten_asm_const_iii(6849, 3467, $3 | 0) & 16777215;
  $5 = $0 ? $0 : -1;
 }
 global$0 = $3 + 48 | 0;
 return $5;
}
function void_20emscripten__internal__MemberAccess_JsGrp_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___setWire_JsGrp__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20JsGrp____20const__2c_20JsGrp__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = HEAP32[$2 >> 2];
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $2 + 4 | 0, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  $1 = HEAP32[$0 >> 2] + $1 | 0;
  label$5 : {
   if (HEAP8[$1 + 11 | 0] >= 0) {
    HEAP8[$1 + 11 | 0] = 0;
    HEAP8[$1 | 0] = 0;
    break label$5;
   }
   HEAP8[HEAP32[$1 >> 2]] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   if (HEAP8[$1 + 11 | 0] > -1) {
    break label$5;
   }
   dlfree(HEAP32[$1 >> 2]);
   HEAP32[$1 + 8 >> 2] = 0;
  }
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20short_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $5 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 24 | 0, $0);
 label$1 : {
  if (!HEAPU8[$5 | 0]) {
   break label$1;
  }
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($3 + 16 | 0);
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $4 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($2);
  HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, HEAP32[$3 + 8 >> 2], $2, $4, $1);
  if (HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$1 + 16 >> 2] = !HEAP32[$1 + 24 >> 2] | (HEAP32[$1 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
 global$0 = $3 + 32 | 0;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28void_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $5 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 24 | 0, $0);
 label$1 : {
  if (!HEAPU8[$5 | 0]) {
   break label$1;
  }
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($3 + 16 | 0);
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $4 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($2);
  HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 40 >> 2]]($6, HEAP32[$3 + 8 >> 2], $2, $4, $1);
  if (HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$1 + 16 >> 2] = !HEAP32[$1 + 24 >> 2] | (HEAP32[$1 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
 global$0 = $3 + 32 | 0;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $5 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 24 | 0, $0);
 label$1 : {
  if (!HEAPU8[$5 | 0]) {
   break label$1;
  }
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($3 + 16 | 0);
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $4 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($2);
  HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 32 >> 2]]($6, HEAP32[$3 + 8 >> 2], $2, $4, +$1);
  if (HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$2 + 16 >> 2] = !HEAP32[$2 + 24 >> 2] | (HEAP32[$2 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
 global$0 = $3 + 32 | 0;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $5 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 24 | 0, $0);
 label$1 : {
  if (!HEAPU8[$5 | 0]) {
   break label$1;
  }
  $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($3 + 16 | 0);
  $2 = HEAP32[$3 + 16 >> 2];
  $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $4 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($2);
  HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, HEAP32[$3 + 8 >> 2], $2, $4, $1);
  if (HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$1 + 16 >> 2] = !HEAP32[$1 + 24 >> 2] | (HEAP32[$1 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
 global$0 = $3 + 32 | 0;
 return $0;
}
function mbsnrtowcs($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 1040 | 0;
 global$0 = $6;
 $7 = HEAP32[$1 >> 2];
 HEAP32[$6 + 12 >> 2] = $7;
 $8 = $0 ? $0 : $6 + 16 | 0;
 $3 = $0 ? $3 : 256;
 label$1 : {
  if (!$3 | !$7) {
   break label$1;
  }
  $5 = $2 >>> 2;
  $10 = $5 >>> 0 >= $3 >>> 0;
  if ($5 >>> 0 < $3 >>> 0 ? $2 >>> 0 <= 131 : 0) {
   break label$1;
  }
  while (1) {
   $5 = $10 ? $3 : $5;
   $2 = $2 - $5 | 0;
   $5 = mbsrtowcs($8, $6 + 12 | 0, $5, $4);
   if (($5 | 0) == -1) {
    $3 = 0;
    $7 = HEAP32[$6 + 12 >> 2];
    $9 = -1;
    break label$1;
   }
   $10 = ($6 + 16 | 0) == ($8 | 0);
   $8 = $10 ? $8 : ($5 << 2) + $8 | 0;
   $9 = $5 + $9 | 0;
   $3 = $3 - ($10 ? 0 : $5) | 0;
   $7 = HEAP32[$6 + 12 >> 2];
   if (!$3 | !$7) {
    break label$1;
   }
   $5 = $2 >>> 2;
   $10 = $5 >>> 0 >= $3 >>> 0;
   if ($2 >>> 0 > 131 | $5 >>> 0 >= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 label$4 : {
  label$5 : {
   if (!$2 | (!$7 | !$3)) {
    break label$5;
   }
   while (1) {
    $5 = mbrtowc($8, $7, $2, $4);
    if ($5 + 2 >>> 0 <= 2) {
     $2 = $5 + 1 | 0;
     if ($2 >>> 0 <= 1) {
      if ($2 - 1) {
       break label$4;
      }
      HEAP32[$6 + 12 >> 2] = 0;
      break label$5;
     }
     HEAP32[$4 >> 2] = 0;
     break label$5;
    }
    $7 = HEAP32[$6 + 12 >> 2] + $5 | 0;
    HEAP32[$6 + 12 >> 2] = $7;
    $9 = $9 + 1 | 0;
    $3 = $3 + -1 | 0;
    if (!$3) {
     break label$5;
    }
    $8 = $8 + 4 | 0;
    $2 = $2 - $5 | 0;
    $5 = $9;
    if ($2) {
     continue;
    }
    break;
   }
   break label$4;
  }
  $5 = $9;
 }
 if ($0) {
  HEAP32[$1 >> 2] = HEAP32[$6 + 12 >> 2];
 }
 global$0 = $6 + 1040 | 0;
 return $5;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 8 >> 2] = $1;
 $1 = 6;
 label$1 : {
  label$2 : {
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $5 + 8 | 0)) {
    break label$2;
   }
   $1 = 4;
   $7 = $3;
   $4 = HEAP32[$0 >> 2];
   $6 = HEAP32[$4 + 12 >> 2];
   label$3 : {
    if (($6 | 0) == HEAP32[$4 + 16 >> 2]) {
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
     break label$3;
    }
    $4 = HEAP32[$6 >> 2];
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($7, $4, 0) | 0) != 37) {
    break label$2;
   }
   $1 = 2;
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0), $5 + 8 | 0)) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | $1;
 }
 global$0 = $5 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
 HEAP32[$2 + 12 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!$3) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   HEAP32[$2 + 8 >> 2] = $3;
   if (!$3) {
    break label$2;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 12 | 0, $1, $2 + 8 | 0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $8 = HEAP32[$4 + 12 >> 2];
  $7 = $2 - $1 | 0;
  if (($7 | 0) >= 1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $7) | 0) != ($7 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $1 | 0;
  $7 = ($8 | 0) > ($1 | 0) ? $8 - $1 | 0 : 0;
  if (($7 | 0) >= 1) {
   HEAP32[$6 + 8 >> 2] = 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   label$4 : {
    if ($7 >>> 0 >= 11) {
     $1 = $7 + 16 & -16;
     $8 = operator_20new_28unsigned_20long_29($1);
     HEAP32[$6 + 8 >> 2] = $1 | -2147483648;
     HEAP32[$6 >> 2] = $8;
     HEAP32[$6 + 4 >> 2] = $7;
     $1 = $6;
     break label$4;
    }
    HEAP8[$6 + 11 | 0] = $7;
    $8 = $6;
    $1 = $6;
   }
   HEAP8[memset($8, $5, $7) + $7 | 0] = 0;
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$6 >> 2] : $6, $7) | 0;
   if (HEAP8[$1 + 11 | 0] <= -1) {
    dlfree(HEAP32[$6 >> 2]);
   }
   if (($5 | 0) != ($7 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $2, $1) | 0) != ($1 | 0)) {
    break label$1;
   }
  }
  HEAP32[$4 + 12 >> 2] = 0;
  $9 = $0;
 }
 global$0 = $6 + 16 | 0;
 return $9;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 8 >> 2] = $1;
 $1 = 6;
 label$1 : {
  label$2 : {
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $4 + 8 | 0)) {
    break label$2;
   }
   $1 = 4;
   if (((wasm2js_i32$1 = $3, wasm2js_i32$2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0), wasm2js_i32$3 = 0, wasm2js_i32$0 = HEAP32[HEAP32[$3 >> 2] + 36 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0) | 0) != 37) {
    break label$2;
   }
   $1 = 2;
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0), $4 + 8 | 0)) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | $1;
 }
 global$0 = $4 + 16 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 8 >> 2] = $1;
 while (1) {
  label$2 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $4 + 8 | 0)) {
    break label$2;
   }
   $6 = $3;
   $1 = HEAP32[$0 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   label$3 : {
    if (($5 | 0) == HEAP32[$1 + 16 >> 2]) {
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
     break label$3;
    }
    $1 = HEAP32[$5 >> 2];
   }
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($6, 8192, $1)) {
    break label$2;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $4 + 8 | 0)) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 global$0 = $4 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 38796);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 $2 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
 $2 = HEAP32[$0 + 16 >> 2];
 if ((HEAPU8[$2 + 4 | 0] + -65 & 255) >>> 0 >= 2) {
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 16 | 0, 38684);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
  $2 = HEAP32[$0 + 16 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 global$0 = $3 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0 < 33) {
   break label$1;
  }
  $2 = $3 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $1 + 32;
  HEAP32[$2 >> 2] = $1;
  $1 = HEAP32[$2 >> 2];
  $5 = HEAP32[$2 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($5 | 0)) {
     break label$2;
    }
    $4 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if ($4 + -48 >>> 0 < 10 | ($4 | 32) + -97 >>> 0 < 6) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 32;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $2);
 }
 global$0 = $3 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  label$2 : {
   while (1) {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 66)) {
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($2, $0);
     if (HEAP32[$2 >> 2] == HEAP32[$2 + 4 >> 2]) {
      break label$2;
     }
     HEAP32[$2 + 12 >> 2] = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $2 + 12 | 0, $2);
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $3;
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 35222);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 36912);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 20 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 - -64 | 0;
}
function std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20___rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = 2;
 label$1 : {
  if (($1 | 0) == 1) {
   break label$1;
  }
  $2 = $1;
  if (!($1 + -1 & $1)) {
   break label$1;
  }
  $2 = std____2____next_prime_28unsigned_20long_29($1);
 }
 $3 = HEAP32[$0 + 4 >> 2];
 if ($2 >>> 0 > $3 >>> 0) {
  std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20_____rehash_28unsigned_20long_29($0, $2);
  return;
 }
 label$3 : {
  if ($2 >>> 0 >= $3 >>> 0) {
   break label$3;
  }
  $4 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$0 + 12 >> 2]) / HEAPF32[$0 + 16 >> 2])));
  label$4 : {
   if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
    $1 = ~~$4 >>> 0;
    break label$4;
   }
   $1 = 0;
  }
  label$6 : {
   label$7 : {
    if ($3 >>> 0 < 3) {
     break label$7;
    }
    if (__wasm_popcnt_i32($3) >>> 0 > 1) {
     break label$7;
    }
    $1 = $1 >>> 0 < 2 ? $1 : 1 << 32 - Math_clz32($1 + -1 | 0);
    break label$6;
   }
   $1 = std____2____next_prime_28unsigned_20long_29($1);
  }
  $1 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
  if ($1 >>> 0 >= $3 >>> 0) {
   break label$3;
  }
  std____2____hash_table_MyObject__MyPointWrapper_2c_20MyObject__MpHash_2c_20std____2__equal_to_MyObject__MyPointWrapper__2c_20std____2__allocator_MyObject__MyPointWrapper__20_____rehash_28unsigned_20long_29($0, $1);
 }
}
function SlvPainter__paint_28BaseGLWidget__2c_20bool_2c_20int_2c_20int_2c_20ELinesDraw_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 Mat4__translate_28float_2c_20float_2c_20float_29($1 + 108 | 0, Math_fround(0), Math_fround(0), Math_fround(1));
 label$1 : {
  if (($3 | 0) <= -1) {
   if (!$4) {
    break label$1;
   }
   $6 = HEAP32[$0 + 12 >> 2];
   if (HEAP32[$6 + 4 >> 2] == HEAP32[$6 >> 2]) {
    break label$1;
   }
   $3 = 0;
   if (!($2 | !$5)) {
    while (1) {
     if (HEAP32[HEAP32[$6 >> 2] + ($3 << 3) >> 2] != -1) {
      SlvPainter__paintPiece_28int_2c_20BaseGLWidget__2c_20bool_29_20const($0, $3, $1, $2);
      SlvPainter__paintLines_28int_2c_20bool_2c_20BaseGLWidget__2c_20ELinesDraw_29_20const($0, $3, $1);
      $6 = HEAP32[$0 + 12 >> 2];
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 >= $4 >>> 0) {
      break label$1;
     }
     if ($3 >>> 0 < HEAP32[$6 + 4 >> 2] - HEAP32[$6 >> 2] >> 3 >>> 0) {
      continue;
     }
     break;
    }
    break label$1;
   }
   while (1) {
    if (HEAP32[HEAP32[$6 >> 2] + ($3 << 3) >> 2] != -1) {
     SlvPainter__paintPiece_28int_2c_20BaseGLWidget__2c_20bool_29_20const($0, $3, $1, $2);
     $6 = HEAP32[$0 + 12 >> 2];
    }
    $3 = $3 + 1 | 0;
    if ($3 >>> 0 >= $4 >>> 0) {
     break label$1;
    }
    if ($3 >>> 0 < HEAP32[$6 + 4 >> 2] - HEAP32[$6 >> 2] >> 3 >>> 0) {
     continue;
    }
    break;
   }
   break label$1;
  }
  SlvPainter__paintPiece_28int_2c_20BaseGLWidget__2c_20bool_29_20const($0, $3, $1, $2);
  if ($2 | ($5 | 0) != 1) {
   break label$1;
  }
  SlvPainter__paintLines_28int_2c_20bool_2c_20BaseGLWidget__2c_20ELinesDraw_29_20const($0, $3, $1);
 }
}
function Vec2Uniform__Vec2Uniform_28char_20const__2c_20ShaderProgram__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = strlen(15933);
 if ($3 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$2 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $3;
     break label$3;
    }
    HEAP8[$2 + 11 | 0] = $3;
    $4 = $2;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, 15933, $3);
  }
  HEAP8[$3 + $4 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $2);
  HEAP32[$2 + 12 >> 2] = $0;
  $5 = $1 - -64 | 0;
  $4 = HEAP32[$5 >> 2];
  label$5 : {
   if (($4 | 0) != HEAP32[$1 + 68 >> 2]) {
    HEAP32[$4 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 60 | 0, $2 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$2 + 11 | 0] <= -1) {
   dlfree(HEAP32[$2 >> 2]);
  }
  HEAP32[$0 >> 2] = 16200;
  global$0 = $2 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Mat3Uniform__Mat3Uniform_28char_20const__2c_20ShaderProgram__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = strlen(15892);
 if ($3 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$2 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $3;
     break label$3;
    }
    HEAP8[$2 + 11 | 0] = $3;
    $4 = $2;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, 15892, $3);
  }
  HEAP8[$3 + $4 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $2);
  HEAP32[$2 + 12 >> 2] = $0;
  $5 = $1 - -64 | 0;
  $4 = HEAP32[$5 >> 2];
  label$5 : {
   if (($4 | 0) != HEAP32[$1 + 68 >> 2]) {
    HEAP32[$4 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 60 | 0, $2 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$2 + 11 | 0] <= -1) {
   dlfree(HEAP32[$2 >> 2]);
  }
  HEAP32[$0 >> 2] = 16120;
  global$0 = $2 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Mat2Uniform__Mat2Uniform_28char_20const__2c_20ShaderProgram__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = strlen(15942);
 if ($3 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$2 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $3;
     break label$3;
    }
    HEAP8[$2 + 11 | 0] = $3;
    $4 = $2;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, 15942, $3);
  }
  HEAP8[$3 + $4 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $2);
  HEAP32[$2 + 12 >> 2] = $0;
  $5 = $1 - -64 | 0;
  $4 = HEAP32[$5 >> 2];
  label$5 : {
   if (($4 | 0) != HEAP32[$1 + 68 >> 2]) {
    HEAP32[$4 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 60 | 0, $2 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$2 + 11 | 0] <= -1) {
   dlfree(HEAP32[$2 >> 2]);
  }
  HEAP32[$0 >> 2] = 16240;
  global$0 = $2 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function FloatUniform__FloatUniform_28char_20const__2c_20ShaderProgram__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = strlen($1);
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $1, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $3);
  HEAP32[$3 + 12 >> 2] = $0;
  $5 = $2 - -64 | 0;
  $1 = HEAP32[$5 >> 2];
  label$5 : {
   if (($1 | 0) != HEAP32[$2 + 68 >> 2]) {
    HEAP32[$1 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($2 + 60 | 0, $3 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  HEAP32[$0 >> 2] = 16280;
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function FloatAttrib__FloatAttrib_28char_20const__2c_20ShaderProgram__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = strlen(16629);
 if ($3 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$2 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $3;
     break label$3;
    }
    HEAP8[$2 + 11 | 0] = $3;
    $4 = $2;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, 16629, $3);
  }
  HEAP8[$3 + $4 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $2);
  HEAP32[$2 + 12 >> 2] = $0;
  $5 = $1 - -64 | 0;
  $4 = HEAP32[$5 >> 2];
  label$5 : {
   if (($4 | 0) != HEAP32[$1 + 68 >> 2]) {
    HEAP32[$4 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 60 | 0, $2 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15256;
  if (HEAP8[$2 + 11 | 0] <= -1) {
   dlfree(HEAP32[$2 >> 2]);
  }
  HEAP32[$0 >> 2] = 16644;
  global$0 = $2 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Vec3Uniform__Vec3Uniform_28char_20const__2c_20ShaderProgram__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = strlen($1);
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $1, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $3);
  HEAP32[$3 + 12 >> 2] = $0;
  $5 = $2 - -64 | 0;
  $1 = HEAP32[$5 >> 2];
  label$5 : {
   if (($1 | 0) != HEAP32[$2 + 68 >> 2]) {
    HEAP32[$1 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($2 + 60 | 0, $3 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  HEAP32[$0 >> 2] = 16040;
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Mat4Uniform__Mat4Uniform_28char_20const__2c_20ShaderProgram__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = strlen($1);
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $1, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $3);
  HEAP32[$3 + 12 >> 2] = $0;
  $5 = $2 - -64 | 0;
  $1 = HEAP32[$5 >> 2];
  label$5 : {
   if (($1 | 0) != HEAP32[$2 + 68 >> 2]) {
    HEAP32[$1 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($2 + 60 | 0, $3 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  HEAP32[$0 >> 2] = 16080;
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Vec3Attrib__Vec3Attrib_28char_20const__2c_20ShaderProgram__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = strlen($1);
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $1, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $3);
  HEAP32[$3 + 12 >> 2] = $0;
  $5 = $2 - -64 | 0;
  $1 = HEAP32[$5 >> 2];
  label$5 : {
   if (($1 | 0) != HEAP32[$2 + 68 >> 2]) {
    HEAP32[$1 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($2 + 60 | 0, $3 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15256;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  HEAP32[$0 >> 2] = 16160;
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function IntUniform__IntUniform_28char_20const__2c_20ShaderProgram__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $4 = strlen($1);
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $1, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  HEAP32[$0 + 4 >> 2] = -1;
  HEAP32[$0 >> 2] = 2816;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 8 | 0, $3);
  HEAP32[$3 + 12 >> 2] = $0;
  $5 = $2 - -64 | 0;
  $1 = HEAP32[$5 >> 2];
  label$5 : {
   if (($1 | 0) != HEAP32[$2 + 68 >> 2]) {
    HEAP32[$1 >> 2] = $0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    break label$5;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($2 + 60 | 0, $3 + 12 | 0);
  }
  HEAP32[$0 >> 2] = 15216;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  HEAP32[$0 >> 2] = 16e3;
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0 < 17) {
   break label$1;
  }
  $2 = $3 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $1 + 16;
  HEAP32[$2 >> 2] = $1;
  $1 = HEAP32[$2 >> 2];
  $5 = HEAP32[$2 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($5 | 0)) {
     break label$2;
    }
    $4 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if ($4 + -48 >>> 0 < 10 | ($4 | 32) + -97 >>> 0 < 6) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 16;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $2);
 }
 global$0 = $3 + 16 | 0;
 return $1;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29($0) {
 var $1 = 0;
 $1 = $0 + 4 | 0;
 std____2__enable_if__28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28__28__has_construct_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_backward_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20bool__2c_20bool__2c_20bool___29(HEAP32[13260], HEAP32[13261], $1);
 std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(53040, $1);
 std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(53044, $0 + 8 | 0);
 std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(53056, $0 + 12 | 0);
 HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0 < 9) {
   break label$1;
  }
  $2 = $3 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $1 + 8;
  HEAP32[$2 >> 2] = $1;
  $1 = HEAP32[$2 >> 2];
  $5 = HEAP32[$2 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($5 | 0)) {
     break label$2;
    }
    $4 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if ($4 + -48 >>> 0 < 10 | ($4 | 32) + -97 >>> 0 < 6) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $2);
 }
 global$0 = $3 + 16 | 0;
 return $1;
}
function void_20std____2__vector_OrderTemplate__LoadedFace_2c_20std____2__allocator_OrderTemplate__LoadedFace__20_____push_back_slow_path_OrderTemplate__LoadedFace__28OrderTemplate__LoadedFace___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 $6 = HEAP32[$0 >> 2];
 $2 = $3 - $6 >> 4;
 $4 = $2 + 1 | 0;
 label$1 : {
  if ($4 >>> 0 < 268435456) {
   $7 = $2 << 4;
   $2 = HEAP32[$0 + 8 >> 2] - $6 | 0;
   $5 = $2 >> 3;
   $5 = $2 >> 4 >>> 0 < 134217727 ? $5 >>> 0 < $4 >>> 0 ? $4 : $5 : 268435455;
   $4 = 0;
   label$3 : {
    if (!$5) {
     break label$3;
    }
    if ($5 >>> 0 >= 268435456) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29($5 << 4);
   }
   $2 = $7 + $4 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   $1 = $2 + 16 | 0;
   if (($3 | 0) != ($6 | 0)) {
    while (1) {
     $2 = $2 + -16 | 0;
     $3 = $3 + -16 | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     if (($3 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    $3 = $6;
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $4 + ($5 << 4);
   HEAP32[$0 + 4 >> 2] = $1;
   if ($3) {
    dlfree($3);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 40624);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $3 = HEAP32[$0 + 20 >> 2];
 $4 = HEAP32[$0 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3;
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 40632);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 - -64 | 0;
}
function mbrtowc($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 $5 = $3 ? $3 : 51212;
 $3 = HEAP32[$5 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$1) {
     if ($3) {
      break label$3;
     }
     break label$1;
    }
    $4 = -2;
    if (!$2) {
     break label$1;
    }
    $8 = $0 ? $0 : $7 + 12 | 0;
    label$5 : {
     if ($3) {
      $0 = $2;
      break label$5;
     }
     $0 = HEAPU8[$1 | 0];
     $3 = $0 << 24 >> 24;
     if (($3 | 0) >= 0) {
      HEAP32[$8 >> 2] = $0;
      $4 = ($3 | 0) != 0;
      break label$1;
     }
     $0 = HEAP8[$1 | 0];
     if (!HEAP32[HEAP32[11593] >> 2]) {
      HEAP32[$8 >> 2] = $0 & 57343;
      $4 = 1;
      break label$1;
     }
     $0 = ($0 & 255) + -194 | 0;
     if ($0 >>> 0 > 50) {
      break label$3;
     }
     $3 = HEAP32[($0 << 2) + 23232 >> 2];
     $0 = $2 + -1 | 0;
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
    }
    $6 = HEAPU8[$1 | 0];
    $9 = $6 >>> 3;
    if (($9 + -16 | ($3 >> 26) + $9) >>> 0 > 7) {
     break label$3;
    }
    while (1) {
     $0 = $0 + -1 | 0;
     $3 = $6 + -128 | $3 << 6;
     if (($3 | 0) >= 0) {
      HEAP32[$5 >> 2] = 0;
      HEAP32[$8 >> 2] = $3;
      $4 = $2 - $0 | 0;
      break label$1;
     }
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
     $6 = HEAPU8[$1 | 0];
     if (($6 & 192) == 128) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 >> 2] = 0;
   HEAP32[12002] = 25;
   $4 = -1;
   break label$1;
  }
  HEAP32[$5 >> 2] = $3;
 }
 global$0 = $7 + 16 | 0;
 return $4;
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 160 | 0;
 global$0 = $4;
 HEAP32[$4 + 152 >> 2] = $1;
 $6 = $4 + 144 | 0;
 label$1 : {
  label$2 : while (1) {
   if (!(($5 | 0) == 2 | $2 >>> 0 >= $3 >>> 0)) {
    HEAP32[$4 + 8 >> 2] = $2;
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 144 | 0, $2, ($3 - $2 | 0) > 32 ? $2 + 32 | 0 : $3, $4 + 8 | 0, $4 + 16 | 0, $6, $4 + 12 | 0) | 0;
    if (($5 | 0) == 2) {
     break label$1;
    }
    $1 = $4 + 16 | 0;
    if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
     break label$1;
    }
    while (1) {
     if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
      $2 = HEAP32[$4 + 8 >> 2];
      continue label$2;
     }
     HEAP32[$4 + 4 >> 2] = HEAP32[$1 >> 2];
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29(HEAP32[$4 + 152 >> 2], HEAP32[$4 + 4 >> 2]);
     $1 = $1 + 4 | 0;
     continue;
    }
   }
   break;
  }
  global$0 = $4 + 160 | 0;
  return;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function ModelControlBase__switchIn_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 252 >> 2] = 10;
 label$1 : {
  label$2 : {
   $1 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$1 + 124 >> 2];
   if (!$2) {
    break label$2;
   }
   $4 = HEAP32[$2 + 8 >> 2];
   if (($4 | 0) == HEAP32[$2 + 12 >> 2]) {
    break label$2;
   }
   $2 = HEAP32[$1 + 132 >> 2];
   if (($2 | 0) == -1) {
    break label$2;
   }
   $2 = HEAP32[($2 << 2) + $4 >> 2];
   if (!$2) {
    break label$2;
   }
   $1 = $2 + 52 | 0;
   break label$1;
  }
  $1 = $1 + 116 | 0;
 }
 $1 = HEAP32[$1 >> 2];
 if ($1) {
  $2 = HEAP32[$1 + 96 >> 2];
  HEAP32[$0 + 568 >> 2] = HEAP32[$1 + 92 >> 2];
  HEAP32[$0 + 572 >> 2] = $2;
  HEAP32[$0 + 576 >> 2] = HEAP32[$1 + 100 >> 2];
  $2 = HEAP32[$1 + 96 >> 2];
  $4 = HEAP32[$1 + 92 >> 2];
  HEAP32[$3 + 268 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP32[$3 + 260 >> 2] = $4;
  HEAP32[$3 + 264 >> 2] = $2;
  $2 = HEAP32[$1 + 112 >> 2];
  HEAP32[$0 + 588 >> 2] = $2;
  $3 = HEAP32[$1 + 108 >> 2];
  $4 = HEAP32[$1 + 104 >> 2];
  HEAP32[$0 + 580 >> 2] = $4;
  HEAP32[$0 + 584 >> 2] = $3;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 280 >> 2] = $2;
  HEAP32[$1 + 272 >> 2] = $4;
  HEAP32[$1 + 276 >> 2] = $3;
  BuildControlBase__reCalcBldMinMax_28_29($0 + 700 | 0);
  HEAPF32[$0 + 600 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1968 >> 2]) * Math_fround(4);
  HEAPF32[$0 + 596 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1964 >> 2]) * Math_fround(4);
  HEAPF32[$0 + 592 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1960 >> 2]) * Math_fround(4);
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 if (1073741807 - $1 >>> 0 >= $2 >>> 0) {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $7 = HEAP32[$0 >> 2];
  } else {
   $7 = $0;
  }
  label$4 : {
   if (536870887 > $1 >>> 0) {
    HEAP32[$6 + 8 >> 2] = $1 << 1;
    HEAP32[$6 + 12 >> 2] = $1 + $2;
    $2 = global$0 - 16 | 0;
    global$0 = $2;
    global$0 = $2 + 16 | 0;
    $2 = $6 + 8 | 0;
    $5 = $6 + 12 | 0;
    $2 = HEAP32[(HEAPU32[$5 >> 2] < HEAPU32[$2 >> 2] ? $2 : $5) >> 2];
    if ($2 >>> 0 >= 2) {
     $5 = $2 + 4 & -4;
     $2 = $5 + -1 | 0;
     $2 = ($2 | 0) == 2 ? $5 : $2;
    } else {
     $2 = 1;
    }
    break label$4;
   }
   $2 = 1073741806;
  }
  $5 = $2 + 1 | 0;
  $2 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($5);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $7, $4);
  }
  $3 = $3 - $4 | 0;
  if ($3) {
   $4 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($4 + $2 | 0, $4 + $7 | 0, $3);
  }
  if (($1 | 0) != 1) {
   dlfree($7);
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
  global$0 = $6 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function Cube__clear_28int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$0 + 76 >> 2];
 $2 = HEAP32[$0 + 72 >> 2];
 if (($1 | 0) != ($2 | 0)) {
  $3 = $1 - $2 >> 3;
  $1 = 0;
  while (1) {
   HEAP32[$2 + ($1 << 3) >> 2] = 0;
   $1 = $1 + 1 | 0;
   if ($1 >>> 0 < $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$0 + 36 >> 2];
 if (HEAP32[$3 + 12 >> 2] >= 1) {
  $2 = 0;
  while (1) {
   $1 = HEAP32[$0 + 60 >> 2] + Math_imul($2, 52) | 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = -1;
   HEAP32[$1 + 4 >> 2] = 0;
   if (HEAP32[$1 + 16 >> 2]) {
    memset(HEAP32[$1 + 20 >> 2], 0, HEAP32[$1 + 12 >> 2] << 2);
    $3 = HEAP32[$0 + 36 >> 2];
   }
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 40 >> 2];
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$3 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$3 >> 2];
 if (($2 | 0) >= 1) {
  $1 = HEAP32[$3 + 4 >> 2];
  while (1) {
   if (($1 | 0) >= 1) {
    $4 = HEAP32[$3 + 8 >> 2];
    $2 = 0;
    while (1) {
     if (($4 | 0) >= 1) {
      $6 = HEAP32[$0 + 56 >> 2];
      $1 = 0;
      while (1) {
       HEAP32[((Math_imul(HEAP32[$0 + 40 >> 2], $2) + $5 | 0) + Math_imul(HEAP32[$0 + 52 >> 2], $1) << 2) + $6 >> 2] = 0;
       $1 = $1 + 1 | 0;
       $4 = HEAP32[$3 + 8 >> 2];
       if (($1 | 0) < ($4 | 0)) {
        continue;
       }
       break;
      }
      $1 = HEAP32[$3 + 4 >> 2];
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($1 | 0)) {
      continue;
     }
     break;
    }
    $2 = HEAP32[$3 >> 2];
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function pop_arg($0, $1, $2) {
 label$1 : {
  label$2 : {
   if ($1 >>> 0 > 20) {
    break label$2;
   }
   $1 = $1 + -9 | 0;
   if ($1 >>> 0 > 9) {
    break label$2;
   }
   label$3 : {
    switch ($1 - 1 | 0) {
    default:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     return;
    case 0:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 3:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP16[$1 >> 1];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP8[$1 | 0];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 2:
    case 7:
     break label$1;
    case 8:
     break label$3;
    }
   }
   FUNCTION_TABLE[204]($0, $2);
  }
  return;
 }
 $1 = HEAP32[$2 >> 2] + 7 & -8;
 HEAP32[$2 >> 2] = $1 + 8;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $3 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 $6 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 28 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $1 = $6 - $3 | 0;
 HEAP32[$4 + 20 >> 2] = $1;
 $6 = $1 + $2 | 0;
 $7 = 2;
 $1 = $4 + 16 | 0;
 while (1) {
  label$2 : {
   $3 = __wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $7 | 0, $4 + 12 | 0) | 0;
   $5 = 0;
   label$5 : {
    if (!$3) {
     break label$5;
    }
    HEAP32[12002] = $3;
    $5 = -1;
   }
   label$4 : {
    if ($5) {
     HEAP32[$4 + 12 >> 2] = -1;
     $3 = -1;
     break label$4;
    }
    $3 = HEAP32[$4 + 12 >> 2];
   }
   label$3 : {
    if (($3 | 0) == ($6 | 0)) {
     $1 = HEAP32[$0 + 44 >> 2];
     HEAP32[$0 + 28 >> 2] = $1;
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
     $0 = $2;
     break label$3;
    }
    if (($3 | 0) > -1) {
     break label$2;
    }
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
    $0 = 0;
    if (($7 | 0) == 2) {
     break label$3;
    }
    $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
   }
   global$0 = $4 + 32 | 0;
   return $0 | 0;
  }
  $5 = HEAP32[$1 + 4 >> 2];
  $8 = $3 >>> 0 > $5 >>> 0;
  $1 = $8 ? $1 + 8 | 0 : $1;
  $5 = $3 - ($8 ? $5 : 0) | 0;
  HEAP32[$1 >> 2] = $5 + HEAP32[$1 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $5;
  $6 = $6 - $3 | 0;
  $7 = $7 - $8 | 0;
  continue;
 }
}
function ShaderProgram___ShaderProgram_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 15296;
 FUNCTION_TABLE[HEAP32[3826]]($0);
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  HEAP32[$0 - -64 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 48 >> 2];
 if ($1) {
  HEAP32[$0 + 52 >> 2] = $1;
  dlfree($1);
 }
 $3 = HEAP32[$0 + 32 >> 2];
 if ($3) {
  $1 = HEAP32[$0 + 36 >> 2];
  $2 = $3;
  label$4 : {
   if (($3 | 0) == ($1 | 0)) {
    break label$4;
   }
   while (1) {
    $2 = $1 + -12 | 0;
    if (HEAP8[$1 + -1 | 0] <= -1) {
     dlfree(HEAP32[$2 >> 2]);
    }
    $1 = $2;
    if (($3 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 32 >> 2];
  }
  HEAP32[$0 + 36 >> 2] = $3;
  dlfree($2);
 }
 $3 = HEAP32[$0 + 20 >> 2];
 if ($3) {
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = $3;
  label$8 : {
   if (($3 | 0) == ($1 | 0)) {
    break label$8;
   }
   while (1) {
    $2 = $1 + -12 | 0;
    if (HEAP8[$1 + -1 | 0] <= -1) {
     dlfree(HEAP32[$2 >> 2]);
    }
    $1 = $2;
    if (($3 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 20 >> 2];
  }
  HEAP32[$0 + 24 >> 2] = $3;
  dlfree($2);
 }
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3) {
  $1 = HEAP32[$0 + 12 >> 2];
  $2 = $3;
  label$12 : {
   if (($3 | 0) == ($1 | 0)) {
    break label$12;
   }
   while (1) {
    $2 = $1 + -12 | 0;
    if (HEAP8[$1 + -1 | 0] <= -1) {
     dlfree(HEAP32[$2 >> 2]);
    }
    $1 = $2;
    if (($3 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 8 >> 2];
  }
  HEAP32[$0 + 12 >> 2] = $3;
  dlfree($2);
 }
 return $0 | 0;
}
function LineAdder__LineAdder_28Mesh__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = $1;
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = $0 + 24 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $1 + 8;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP8[$1 + 114 | 0] = 1;
 HEAP8[$1 + 111 | 0] = 1;
 HEAP8[$1 + 109 | 0] = 256;
 HEAP8[$1 + 110 | 0] = 1;
 HEAP32[$1 + 116 >> 2] = 1;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $3 + -1;
  if ($3) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  std____2____shared_weak_count____release_weak_28_29($2);
 }
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
 $2 = HEAP32[$1 + 124 >> 2];
 $4 = HEAP32[$1 + 120 >> 2];
 if (($2 | 0) != ($4 | 0)) {
  while (1) {
   $3 = $2 + -20 | 0;
   $5 = HEAP32[$3 >> 2];
   if ($5) {
    HEAP32[$2 + -16 >> 2] = $5;
    dlfree($5);
   }
   $2 = $3;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = $4;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 return $0;
}
function cosf($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $4 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1061752794) {
   $1 = Math_fround(1);
   if ($2 >>> 0 < 964689920) {
    break label$1;
   }
   $1 = __cosdf(+$0);
   break label$1;
  }
  if ($2 >>> 0 <= 1081824209) {
   $5 = +$0;
   if ($2 >>> 0 >= 1075235812) {
    $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5));
    break label$1;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf($5 + 1.5707963267948966);
    break label$1;
   }
   $1 = __sindf(1.5707963267948966 - $5);
   break label$1;
  }
  if ($2 >>> 0 <= 1088565717) {
   if ($2 >>> 0 >= 1085271520) {
    $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break label$1;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf(-4.71238898038469 - +$0);
    break label$1;
   }
   $1 = __sindf(+$0 + -4.71238898038469);
   break label$1;
  }
  $1 = Math_fround($0 - $0);
  if ($2 >>> 0 >= 2139095040) {
   break label$1;
  }
  $2 = __rem_pio2f($0, $3 + 8 | 0) & 3;
  if ($2 >>> 0 <= 2) {
   label$10 : {
    switch ($2 - 1 | 0) {
    default:
     $1 = __cosdf(HEAPF64[$3 + 8 >> 3]);
     break label$1;
    case 0:
     $1 = __sindf(-HEAPF64[$3 + 8 >> 3]);
     break label$1;
    case 1:
     break label$10;
    }
   }
   $1 = Math_fround(-__cosdf(HEAPF64[$3 + 8 >> 3]));
   break label$1;
  }
  $1 = __sindf(HEAPF64[$3 + 8 >> 3]);
 }
 $0 = $1;
 global$0 = $3 + 16 | 0;
 return $0;
}
function BuildWorld__BuildWorld_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 + 8 >> 2] = 50;
 HEAP32[$0 + 12 >> 2] = 50;
 HEAP32[$0 >> 2] = 50;
 HEAP32[$0 + 4 >> 2] = 50;
 HEAP32[$0 + 24 >> 2] = 2500;
 HEAP32[$0 + 16 >> 2] = 50;
 HEAP32[$0 + 20 >> 2] = 50;
 $2 = operator_20new_28unsigned_20long_29(125e3);
 $3 = $2 + 125e3 | 0;
 $1 = $2;
 while (1) {
  HEAP8[$1 | 0] = HEAPU8[$1 | 0] & 128;
  $1 = $1 + 1 | 0;
  if (($3 | 0) != ($1 | 0)) {
   continue;
  }
  break;
 }
 HEAP8[$0 + 36 | 0] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = $2;
 HEAP32[$0 + 52 >> 2] = 50;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 50;
 HEAP32[$0 + 60 >> 2] = 50;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 $1 = $0 - -64 | 0;
 HEAP32[$1 + 12 >> 2] = 50;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 50;
 HEAP32[$1 + 20 >> 2] = 50;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 50;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 50;
 HEAP32[$0 + 108 >> 2] = 50;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = 50;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 50;
 HEAP32[$0 + 132 >> 2] = 50;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 BuildDimension__BuildDimension_28_29($0 + 136 | 0);
 BuildDimension__BuildDimension_28_29($0 + 125136 | 0);
 BuildDimension__BuildDimension_28_29($0 + 250136 | 0);
 HEAP16[$0 + 375136 >> 1] = 1;
 Shape__Shape_28_29($0 + 375140 | 0);
 HEAP8[$0 + 375332 | 0] = 0;
 HEAP32[$0 + 375328 >> 2] = 255;
 BuildWorld__initializeNew_28bool_29($0);
 return $0;
}
function addAcross_28MyObject__2c_20float_2c_20float_2c_20float_2c_20float_2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20Vec2_20const__2c_20bool_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
 var $16 = 0;
 $16 = global$0 + -64 | 0;
 global$0 = $16;
 label$1 : {
  if (!$14) {
   HEAPF32[$16 + 56 >> 2] = $3;
   HEAPF32[$16 + 52 >> 2] = $2 + $6;
   HEAPF32[$16 + 48 >> 2] = $1 + $5;
   HEAPF32[$16 + 40 >> 2] = $3;
   HEAPF32[$16 + 36 >> 2] = $2 + $8;
   HEAPF32[$16 + 32 >> 2] = $1 + $7;
   HEAPF32[$16 + 24 >> 2] = $4;
   HEAPF32[$16 + 20 >> 2] = $2 + $10;
   HEAPF32[$16 + 16 >> 2] = $1 + $9;
   HEAPF32[$16 + 8 >> 2] = $4;
   HEAPF32[$16 + 4 >> 2] = $2 + $12;
   HEAPF32[$16 >> 2] = $1 + $11;
   MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $16 + 48 | 0, $16 + 32 | 0, $16 + 16 | 0, $16, $13, $15);
   break label$1;
  }
  HEAPF32[$16 + 56 >> 2] = $3;
  HEAPF32[$16 + 52 >> 2] = $2 + $5;
  HEAPF32[$16 + 48 >> 2] = $1 + $6;
  HEAPF32[$16 + 40 >> 2] = $3;
  HEAPF32[$16 + 36 >> 2] = $2 + $7;
  HEAPF32[$16 + 32 >> 2] = $1 + $8;
  HEAPF32[$16 + 24 >> 2] = $4;
  HEAPF32[$16 + 20 >> 2] = $2 + $9;
  HEAPF32[$16 + 16 >> 2] = $1 + $10;
  HEAPF32[$16 + 8 >> 2] = $4;
  HEAPF32[$16 + 4 >> 2] = $2 + $11;
  HEAPF32[$16 >> 2] = $1 + $12;
  MyObject__addPoly_28Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20Vec3_20const__2c_20bool_2c_20bool_29($0, $16 + 48 | 0, $16 + 32 | 0, $16 + 16 | 0, $16, $13 ^ 1, $15);
 }
 global$0 = $16 - -64 | 0;
}
function sinf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $1 = $4 & 2147483647;
 label$1 : {
  if ($1 >>> 0 <= 1061752794) {
   if ($1 >>> 0 < 964689920) {
    break label$1;
   }
   $0 = __sindf(+$0);
   break label$1;
  }
  if ($1 >>> 0 <= 1081824209) {
   $3 = +$0;
   if ($1 >>> 0 <= 1075235811) {
    if (($4 | 0) <= -1) {
     $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
     break label$1;
    }
    $0 = __cosdf($3 + -1.5707963267948966);
    break label$1;
   }
   $0 = __sindf(-((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3));
   break label$1;
  }
  if ($1 >>> 0 <= 1088565717) {
   $3 = +$0;
   if ($1 >>> 0 <= 1085271519) {
    if (($4 | 0) <= -1) {
     $0 = __cosdf($3 + 4.71238898038469);
     break label$1;
    }
    $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
    break label$1;
   }
   $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3);
   break label$1;
  }
  if ($1 >>> 0 >= 2139095040) {
   $0 = Math_fround($0 - $0);
   break label$1;
  }
  $1 = __rem_pio2f($0, $2 + 8 | 0) & 3;
  if ($1 >>> 0 <= 2) {
   label$11 : {
    switch ($1 - 1 | 0) {
    default:
     $0 = __sindf(HEAPF64[$2 + 8 >> 3]);
     break label$1;
    case 0:
     $0 = __cosdf(HEAPF64[$2 + 8 >> 3]);
     break label$1;
    case 1:
     break label$11;
    }
   }
   $0 = __sindf(-HEAPF64[$2 + 8 >> 3]);
   break label$1;
  }
  $0 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = global$0 - 16 | 0;
 global$0 = $8;
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $7 = HEAP32[$4 + 12 >> 2];
  $6 = $2 - $1 | 0;
  if (($6 | 0) >= 1) {
   $6 = $6 >> 2;
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $6) | 0) != ($6 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $1 >> 2;
  $6 = ($7 | 0) > ($1 | 0) ? $7 - $1 | 0 : 0;
  if (($6 | 0) >= 1) {
   $7 = $0;
   $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($8, $6, $5);
   $1 = $5;
   if (HEAP8[$1 + 11 | 0] < 0) {
    $1 = HEAP32[$1 >> 2];
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($7, $1, $6) | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
   if (($1 | 0) != ($6 | 0)) {
    break label$1;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   $1 = $1 >> 2;
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $2, $1) | 0) != ($1 | 0)) {
    break label$1;
   }
  }
  HEAP32[$4 + 12 >> 2] = 0;
  $9 = $0;
 }
 global$0 = $8 + 16 | 0;
 return $9;
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  HEAP8[$3 + -1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$3 + -2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 + -3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$3 + -4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $3 = 0 - $0 & 3;
  $4 = $3 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$4 >> 2] = $1;
  $2 = $2 - $3 & -4;
  $3 = $2 + $4 | 0;
  HEAP32[$3 + -4 >> 2] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$3 + -8 >> 2] = $1;
  HEAP32[$3 + -12 >> 2] = $1;
  if ($2 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$3 + -16 >> 2] = $1;
  HEAP32[$3 + -20 >> 2] = $1;
  HEAP32[$3 + -24 >> 2] = $1;
  HEAP32[$3 + -28 >> 2] = $1;
  $6 = $4 & 4 | 24;
  $2 = $2 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $3 = $1;
  $5 = $1;
  $1 = $4 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   HEAP32[$1 + 28 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = $1 + 32 | 0;
   $2 = $2 + -32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $7 = HEAP32[$1 + 4 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$6 + 28 >> 2] = $7;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 + 20 >> 2] = $2;
 $2 = HEAPU8[$4 | 0];
 $3 = HEAPU8[$5 | 0];
 $4 = HEAP32[$6 + 28 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 12 >> 2] = $4;
 $4 = HEAP32[$6 + 20 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$6 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $6 + 8 | 0, $1, $6, $2, $3);
 global$0 = $6 + 32 | 0;
 return $0;
}
function __shgetc($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = HEAP32[$0 + 116 >> 2];
 $2 = $1;
 label$1 : {
  $5 = HEAP32[$0 + 112 >> 2];
  label$2 : {
   if ($1 | $5) {
    $1 = HEAP32[$0 + 124 >> 2];
    if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? HEAPU32[$0 + 120 >> 2] < $5 >>> 0 ? 0 : 1 : 0) {
     break label$2;
    }
   }
   $5 = __uflow($0);
   if (($5 | 0) > -1) {
    break label$1;
   }
  }
  HEAP32[$0 + 104 >> 2] = 0;
  return -1;
 }
 $1 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 + 116 >> 2];
 $3 = $2;
 label$4 : {
  label$5 : {
   $4 = HEAP32[$0 + 112 >> 2];
   if (!($2 | $4)) {
    break label$5;
   }
   $2 = (HEAP32[$0 + 124 >> 2] ^ -1) + $3 | 0;
   $3 = HEAP32[$0 + 120 >> 2] ^ -1;
   $4 = $3 + $4 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $2 = $2 + 1 | 0;
   }
   $3 = $4;
   $4 = HEAP32[$0 + 4 >> 2];
   $6 = $1 - $4 | 0;
   $7 = $3 >>> 0 < $6 >>> 0 ? 0 : 1;
   $6 = $6 >> 31;
   if (($2 | 0) > ($6 | 0) ? 1 : ($2 | 0) >= ($6 | 0) ? $7 : 0) {
    break label$5;
   }
   HEAP32[$0 + 104 >> 2] = $3 + $4;
   break label$4;
  }
  HEAP32[$0 + 104 >> 2] = $1;
 }
 label$6 : {
  if (!$1) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$6;
  }
  $4 = HEAP32[$0 + 124 >> 2];
  $2 = $0;
  $3 = HEAP32[$0 + 120 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($1 - $0 | 0) + 1 | 0;
  $6 = $1;
  $3 = $3 + $1 | 0;
  $1 = ($1 >> 31) + $4 | 0;
  HEAP32[$2 + 120 >> 2] = $3;
  HEAP32[$2 + 124 >> 2] = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
 }
 $0 = $0 + -1 | 0;
 if (HEAPU8[$0 | 0] != ($5 | 0)) {
  HEAP8[$0 | 0] = $5;
 }
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 24 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($2 + 16 | 0, $0, $1);
  $0 = HEAP32[$2 + 20 >> 2];
  $3 = HEAPU8[$0 + 6 | 0];
  label$3 : {
   if (($3 | 0) != 2) {
    $0 = !$3;
    break label$3;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
  }
  label$2 : {
   if (!$0) {
    $0 = HEAP32[$2 + 20 >> 2];
    $3 = HEAPU8[$0 + 7 | 0];
    label$6 : {
     if (($3 | 0) != 2) {
      $0 = !$3;
      break label$6;
     }
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
    }
    if (!$0) {
     break label$2;
    }
   }
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 35134);
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  }
  $0 = HEAP32[$2 + 20 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  if (HEAPU8[$4 + 5 | 0]) {
   HEAP8[HEAP32[$4 >> 2]] = HEAPU8[$4 + 4 | 0];
  }
 }
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 38572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 38575);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 if (-17 - $1 >>> 0 >= $2 >>> 0) {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $7 = HEAP32[$0 >> 2];
  } else {
   $7 = $0;
  }
  label$4 : {
   if (2147483623 > $1 >>> 0) {
    HEAP32[$6 + 8 >> 2] = $1 << 1;
    HEAP32[$6 + 12 >> 2] = $1 + $2;
    $2 = global$0 - 16 | 0;
    global$0 = $2;
    global$0 = $2 + 16 | 0;
    $2 = $6 + 8 | 0;
    $5 = $6 + 12 | 0;
    $2 = HEAP32[(HEAPU32[$5 >> 2] < HEAPU32[$2 >> 2] ? $2 : $5) >> 2];
    if ($2 >>> 0 >= 11) {
     $5 = $2 + 16 & -16;
     $2 = $5 + -1 | 0;
     $2 = ($2 | 0) == 11 ? $5 : $2;
    } else {
     $2 = 10;
    }
    break label$4;
   }
   $2 = -18;
  }
  $5 = $2 + 1 | 0;
  $2 = std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($5);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $7, $4);
  }
  $3 = $3 - $4 | 0;
  if ($3) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 + $4 | 0, $4 + $7 | 0, $3);
  }
  if (($1 | 0) != 10) {
   dlfree($7);
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
  global$0 = $6 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function ModelControlBase__reCalcSlvMinMax_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  label$2 : {
   $1 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$1 + 124 >> 2];
   if (!$2) {
    break label$2;
   }
   $3 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 8 >> 2];
   if (($3 | 0) == ($2 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$1 + 132 >> 2];
   if (($3 | 0) == -1) {
    break label$2;
   }
   $2 = HEAP32[$2 + ($3 << 2) >> 2];
   if (!$2) {
    break label$2;
   }
   $1 = $2 + 52 | 0;
   break label$1;
  }
  $1 = $1 + 116 | 0;
 }
 $1 = HEAP32[$1 >> 2];
 if ($1) {
  $2 = HEAP32[$1 + 96 >> 2];
  $4 = HEAP32[$1 + 92 >> 2];
  HEAP32[$0 + 568 >> 2] = $4;
  HEAP32[$0 + 572 >> 2] = $2;
  $5 = HEAP32[$1 + 100 >> 2];
  HEAP32[$0 + 576 >> 2] = $5;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 268 >> 2] = $5;
  HEAP32[$3 + 260 >> 2] = $4;
  HEAP32[$3 + 264 >> 2] = $2;
  $2 = HEAP32[$1 + 108 >> 2];
  $3 = HEAP32[$1 + 104 >> 2];
  HEAP32[$0 + 580 >> 2] = $3;
  HEAP32[$0 + 584 >> 2] = $2;
  $4 = HEAP32[$1 + 112 >> 2];
  HEAP32[$0 + 588 >> 2] = $4;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 280 >> 2] = $4;
  HEAP32[$1 + 272 >> 2] = $3;
  HEAP32[$1 + 276 >> 2] = $2;
  BuildControlBase__reCalcBldMinMax_28_29($0 + 700 | 0);
  HEAPF32[$0 + 600 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1968 >> 2]) * Math_fround(4);
  HEAPF32[$0 + 596 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1964 >> 2]) * Math_fround(4);
  HEAPF32[$0 + 592 >> 2] = Math_fround(Math_fround(23) - HEAPF32[$0 + 1960 >> 2]) * Math_fround(4);
 }
}
function void_20std____2__vector_Vec4b_2c_20std____2__allocator_Vec4b__20_____push_back_slow_path_Vec4b_20const___28Vec4b_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 $5 = HEAP32[$0 >> 2];
 $3 = $4 - $5 >> 2;
 $2 = $3 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 < 1073741824) {
   $7 = $3 << 2;
   $3 = HEAP32[$0 + 8 >> 2] - $5 | 0;
   $6 = $3 >> 1;
   $3 = $3 >> 2 >>> 0 < 536870911 ? $6 >>> 0 < $2 >>> 0 ? $2 : $6 : 1073741823;
   $6 = 0;
   label$3 : {
    if (!$3) {
     break label$3;
    }
    if ($3 >>> 0 >= 1073741824) {
     break label$1;
    }
    $6 = operator_20new_28unsigned_20long_29($3 << 2);
   }
   $2 = $7 + $6 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $2 + 4 | 0;
   if (($4 | 0) != ($5 | 0)) {
    while (1) {
     $2 = $2 + -4 | 0;
     $4 = $4 + -4 | 0;
     HEAP8[$2 | 0] = HEAPU8[$4 | 0];
     HEAP8[$2 + 1 | 0] = HEAPU8[$4 + 1 | 0];
     HEAP8[$2 + 2 | 0] = HEAPU8[$4 + 2 | 0];
     HEAP8[$2 + 3 | 0] = HEAPU8[$4 + 3 | 0];
     if (($4 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $6 + ($3 << 2);
   HEAP32[$0 + 4 >> 2] = $1;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function RunContext__notifyFullEnum_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1118, 9);
 $1 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0 + 8 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$0 + 8 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 $2 = HEAP32[11720];
 $1 = HEAP32[$2 + 124 >> 2];
 $3 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2;
 $1 = $3 + -1 | 0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAP32[$2 + 136 >> 2] = HEAP32[HEAP32[$2 + 116 >> 2] + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 >> 2] = $1;
 emscripten_asm_const_iii(1077, 1093, $0 | 0) | 0;
 $2 = HEAP32[11720];
 if (!HEAPU8[$2 + 2612 | 0]) {
  HEAP8[$2 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $0 + 16 | 0;
}
function bucketAddFam_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = HEAP32[11988];
 $9 = $7 + 52 | 0;
 $5 = HEAP32[$7 + 56 >> 2];
 $10 = HEAP32[$7 + 52 >> 2];
 $6 = ($5 - $10 | 0) / 56 | 0;
 label$1 : {
  if ($6 >>> 0 > $4 >>> 0) {
   break label$1;
  }
  $8 = $4 + 1 | 0;
  if ($8 >>> 0 > $6 >>> 0) {
   std____2__vector_PicFamily_2c_20std____2__allocator_PicFamily__20_____append_28unsigned_20long_29($9, $8 - $6 | 0);
   break label$1;
  }
  if ($8 >>> 0 >= $6 >>> 0) {
   break label$1;
  }
  $6 = Math_imul($8, 56) + $10 | 0;
  if (($6 | 0) != ($5 | 0)) {
   while (1) {
    if (HEAP8[$5 + -9 | 0] <= -1) {
     dlfree(HEAP32[$5 + -20 >> 2]);
    }
    if (HEAP8[$5 + -21 | 0] <= -1) {
     dlfree(HEAP32[$5 + -32 >> 2]);
    }
    $5 = $5 + -56 | 0;
    if (HEAP8[$5 + 11 | 0] <= -1) {
     dlfree(HEAP32[$5 >> 2]);
    }
    if (($5 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$7 + 56 >> 2] = $6;
 }
 $4 = HEAP32[$9 >> 2] + Math_imul($4, 56) | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($4, $0);
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $1;
}
function BoundedBlockSpace3D__erectWalls_28int_2c_20Vec3i_2c_20Vec3i_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 label$1 : {
  $6 = HEAP32[$2 >> 2];
  if (($6 | 0) < 0) {
   break label$1;
  }
  $7 = HEAP32[$2 + 4 >> 2];
  if (($7 | 0) < 0) {
   break label$1;
  }
  $8 = HEAP32[$2 + 8 >> 2];
  if (($8 | 0) < 0) {
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  if (($6 | 0) >= ($2 | 0)) {
   break label$1;
  }
  $4 = HEAP32[$0 + 4 >> 2];
  if (($7 | 0) >= ($4 | 0)) {
   break label$1;
  }
  $10 = HEAP32[$0 + 8 >> 2];
  if (($8 | 0) >= ($10 | 0)) {
   break label$1;
  }
  $5 = HEAP32[$3 >> 2];
  if (($5 | 0) < 0) {
   break label$1;
  }
  $9 = HEAP32[$3 + 4 >> 2];
  if (($9 | 0) < 0) {
   break label$1;
  }
  $3 = HEAP32[$3 + 8 >> 2];
  if (($3 | 0) >= ($10 | 0) | ($9 | 0) >= ($4 | 0) | (($3 | 0) < 0 | ($5 | 0) >= ($2 | 0))) {
   break label$1;
  }
  if ($1 >>> 0 > 2) {
   break label$1;
  }
  $4 = $3;
  $3 = HEAP32[$0 + 12 >> 2];
  $4 = (Math_imul($2, $9) + $5 | 0) + Math_imul($4, $3) | 0;
  $5 = HEAP32[$0 + 16 >> 2];
  $0 = $4 + $5 | 0;
  $2 = $5 + ((Math_imul($2, $7) + $6 | 0) + Math_imul($3, $8) | 0) | 0;
  label$2 : {
   switch ($1 - 1 | 0) {
   case 1:
    HEAP8[$2 | 0] = HEAPU8[$2 | 0] | 64;
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 32;
    return;
   default:
    HEAP8[$2 | 0] = HEAPU8[$2 | 0] | 2;
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 4;
    return;
   case 0:
    break label$2;
   }
  }
  HEAP8[$2 | 0] = HEAPU8[$2 | 0] | 8;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 16;
 }
}
function wcsnrtombs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 272 | 0;
 global$0 = $5;
 $6 = HEAP32[$1 >> 2];
 HEAP32[$5 + 12 >> 2] = $6;
 $7 = $0 ? $0 : $5 + 16 | 0;
 $3 = $0 ? $3 : 256;
 label$1 : {
  if (!$3 | !$6) {
   break label$1;
  }
  $4 = $3 >>> 0 <= $2 >>> 0;
  if (!($4 | $2 >>> 0 > 32)) {
   break label$1;
  }
  while (1) {
   $4 = $4 ? $3 : $2;
   $2 = $2 - $4 | 0;
   $4 = wcsrtombs($7, $5 + 12 | 0, $4);
   if (($4 | 0) == -1) {
    $3 = 0;
    $6 = HEAP32[$5 + 12 >> 2];
    $9 = -1;
    break label$1;
   }
   $8 = ($5 + 16 | 0) == ($7 | 0);
   $7 = $8 ? $7 : $4 + $7 | 0;
   $9 = $4 + $9 | 0;
   $3 = $3 - ($8 ? 0 : $4) | 0;
   $6 = HEAP32[$5 + 12 >> 2];
   if (!$3 | !$6) {
    break label$1;
   }
   $4 = $2 >>> 0 >= $3 >>> 0;
   if ($4 | $2 >>> 0 >= 33) {
    continue;
   }
   break;
  }
 }
 label$5 : {
  label$6 : {
   if (!$2 | (!$6 | !$3)) {
    break label$6;
   }
   while (1) {
    $8 = wcrtomb($7, HEAP32[$6 >> 2]);
    if ($8 + 1 >>> 0 <= 1) {
     $4 = -1;
     if ($8) {
      break label$5;
     }
     HEAP32[$5 + 12 >> 2] = 0;
     break label$6;
    }
    $6 = HEAP32[$5 + 12 >> 2] + 4 | 0;
    HEAP32[$5 + 12 >> 2] = $6;
    $9 = $9 + $8 | 0;
    $3 = $3 - $8 | 0;
    if (!$3) {
     break label$6;
    }
    $7 = $7 + $8 | 0;
    $4 = $9;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
   break label$5;
  }
  $4 = $9;
 }
 if ($0) {
  HEAP32[$1 >> 2] = HEAP32[$5 + 12 >> 2];
 }
 global$0 = $5 + 272 | 0;
 return $4;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = $1;
 $6 = $4 + 48 | 0;
 label$1 : {
  label$2 : while (1) {
   if (!(($5 | 0) == 2 | $2 >>> 0 >= $3 >>> 0)) {
    HEAP32[$4 + 8 >> 2] = $2;
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 48 | 0, $2, $3, $4 + 8 | 0, $4 + 16 | 0, $6, $4 + 12 | 0) | 0;
    if (($5 | 0) == 2) {
     break label$1;
    }
    $1 = $4 + 16 | 0;
    if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
     break label$1;
    }
    while (1) {
     if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
      $2 = HEAP32[$4 + 8 >> 2];
      continue label$2;
     }
     std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($4 + 56 | 0, $1);
     $1 = $1 + 1 | 0;
     continue;
    }
   }
   break;
  }
  global$0 = $4 - -64 | 0;
  return;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
   HEAP32[$1 + 28 >> 2] = $3;
  }
  return;
 }
 label$3 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$3;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$7 : {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$7;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$7;
     }
     break label$3;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$3;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 37128);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $7 = HEAP32[$1 >> 2];
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 if ($7 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($7 >>> 0 >= 11) {
     $9 = $7 + 16 & -16;
     $8 = operator_20new_28unsigned_20long_29($9);
     HEAP32[$6 + 8 >> 2] = $9 | -2147483648;
     HEAP32[$6 >> 2] = $8;
     HEAP32[$6 + 4 >> 2] = $7;
     break label$3;
    }
    HEAP8[$6 + 11 | 0] = $7;
    $8 = $6;
    if (!$7) {
     break label$2;
    }
   }
   memcpy($8, $1 + 4 | 0, $7);
  }
  HEAP8[$7 + $8 | 0] = 0;
  FUNCTION_TABLE[$0]($6, $2, $3, $4, $5);
  if (HEAP8[$6 + 11 | 0] <= -1) {
   dlfree(HEAP32[$6 >> 2]);
  }
  global$0 = $6 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 8 >> 2] = $1;
 while (1) {
  label$2 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $4 + 8 | 0)) {
    break label$2;
   }
   $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
   if (($1 | 0) >= 0) {
    $1 = (HEAPU16[HEAP32[$3 + 8 >> 2] + (($1 & 255) << 1) >> 1] & 8192) != 0;
   } else {
    $1 = 0;
   }
   if (!$1) {
    break label$2;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $4 + 8 | 0)) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 global$0 = $4 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (HEAPU8[$0 + 16 | 0]) {
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
   $2 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   if (HEAPU8[$2 + 5 | 0] != 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
   }
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
   break label$1;
  }
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 46);
  $2 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  if (HEAPU8[$2 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
  }
 }
 $2 = HEAP32[$0 + 12 >> 2];
 if ((HEAPU8[$2 + 4 | 0] + -65 & 255) >>> 0 >= 2) {
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, 38684);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
  $2 = HEAP32[$0 + 12 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 global$0 = $3 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 35222);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $3 = HEAP32[$1 + 4 >> 2];
 $0 = 0;
 label$1 : {
  if (!$3) {
   break label$1;
  }
  $0 = HEAPU8[($3 + HEAP32[$1 >> 2] | 0) + -1 | 0];
 }
 if (($0 | 0) == 62) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 41284);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35210);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $2;
 $1 = HEAP32[$0 >> 2];
 if (HEAP32[$0 + 4 >> 2] - $1 >>> 0 > 0) {
  $1 = HEAP8[$1 | 0];
 } else {
  $1 = 0;
 }
 label$1 : {
  if (($1 << 24 >> 24) + -48 >>> 0 <= 9) {
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
 }
 HEAP32[$3 + 12 >> 2] = $1;
 if ($1) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 12 | 0);
 } else {
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function PicArr__equalTo_28PicArr_20const__2c_20bool_29_20const($0, $1, $2) {
 var $3 = 0;
 label$1 : {
  if (HEAPU8[$1 | 0] != HEAPU8[$0 | 0] | HEAPU8[$1 + 5 | 0] != HEAPU8[$0 + 5 | 0] | (HEAPU8[$1 + 10 | 0] != HEAPU8[$0 + 10 | 0] | HEAPU8[$1 + 15 | 0] != HEAPU8[$0 + 15 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 20 | 0] != HEAPU8[$0 + 20 | 0] | HEAPU8[$1 + 1 | 0] != HEAPU8[$0 + 1 | 0] | (HEAPU8[$1 + 6 | 0] != HEAPU8[$0 + 6 | 0] | HEAPU8[$1 + 11 | 0] != HEAPU8[$0 + 11 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 16 | 0] != HEAPU8[$0 + 16 | 0] | HEAPU8[$1 + 21 | 0] != HEAPU8[$0 + 21 | 0] | (HEAPU8[$1 + 2 | 0] != HEAPU8[$0 + 2 | 0] | HEAPU8[$1 + 7 | 0] != HEAPU8[$0 + 7 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 12 | 0] != HEAPU8[$0 + 12 | 0] | HEAPU8[$1 + 17 | 0] != HEAPU8[$0 + 17 | 0] | (HEAPU8[$1 + 22 | 0] != HEAPU8[$0 + 22 | 0] | HEAPU8[$1 + 3 | 0] != HEAPU8[$0 + 3 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 8 | 0] != HEAPU8[$0 + 8 | 0] | HEAPU8[$1 + 13 | 0] != HEAPU8[$0 + 13 | 0] | (HEAPU8[$1 + 18 | 0] != HEAPU8[$0 + 18 | 0] | HEAPU8[$1 + 23 | 0] != HEAPU8[$0 + 23 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 4 | 0] != HEAPU8[$0 + 4 | 0] | HEAPU8[$1 + 9 | 0] != HEAPU8[$0 + 9 | 0] | (HEAPU8[$1 + 14 | 0] != HEAPU8[$0 + 14 | 0] | HEAPU8[$1 + 19 | 0] != HEAPU8[$0 + 19 | 0])) {
   break label$1;
  }
  if (HEAPU8[$1 + 24 | 0] != HEAPU8[$0 + 24 | 0] | (HEAPU8[$0 + 25 | 0] != HEAPU8[$1 + 25 | 0] ? $2 : 0)) {
   break label$1;
  }
  $3 = 1;
 }
 return $3;
}
function ModelControlBase__ModelControlBase_28BaseGLWidget__2c_20CubeDocBase__29($0, $1, $2) {
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 >> 2] = 5972;
 HEAP32[$0 + 4 >> 2] = $1;
 NoiseSlvProgram__NoiseSlvProgram_28_29($0 + 24 | 0);
 BaseProgram__BaseProgram_28_29($0 + 416 | 0);
 HEAP32[$0 + 568 >> 2] = 0;
 HEAP32[$0 + 572 >> 2] = 0;
 HEAP32[$0 + 416 >> 2] = 15636;
 HEAP32[$0 + 576 >> 2] = 0;
 HEAP32[$0 + 580 >> 2] = 0;
 HEAP32[$0 + 584 >> 2] = 0;
 HEAP32[$0 + 588 >> 2] = 0;
 HEAP32[$0 + 592 >> 2] = 0;
 HEAP32[$0 + 596 >> 2] = 0;
 HEAP32[$0 + 600 >> 2] = 0;
 HEAP32[$0 + 604 >> 2] = 0;
 HEAP32[$0 + 612 >> 2] = 0;
 HEAP32[$0 + 616 >> 2] = 0;
 HEAP32[$0 + 608 >> 2] = -1;
 HEAP32[$0 + 620 >> 2] = 0;
 HEAP32[$0 + 624 >> 2] = 0;
 HEAP32[$0 + 628 >> 2] = 0;
 HEAP32[$0 + 632 >> 2] = 0;
 HEAP8[$0 + 636 | 0] = 0;
 HEAP32[$0 + 656 >> 2] = 0;
 HEAP32[$0 + 660 >> 2] = 1056964608;
 HEAP32[$0 + 644 >> 2] = 0;
 HEAP32[$0 + 648 >> 2] = 1058642330;
 HEAP32[$0 + 640 >> 2] = 15532;
 HEAP32[$0 + 696 >> 2] = $1;
 HEAP32[$0 + 688 >> 2] = 0;
 HEAP32[$0 + 692 >> 2] = 0;
 HEAP32[$0 + 680 >> 2] = 1065353216;
 HEAP32[$0 + 684 >> 2] = 0;
 HEAP32[$0 + 672 >> 2] = 0;
 HEAP32[$0 + 676 >> 2] = 0;
 HEAP32[$0 + 664 >> 2] = 1065353216;
 HEAP32[$0 + 668 >> 2] = 0;
 HEAP32[$0 + 652 >> 2] = 15596;
 BuildControlBase__BuildControlBase_28BaseGLWidget__2c_20CubeDocBase__29($0 + 700 | 0, $1, $2);
 HEAP32[$0 + 20 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 + 16 >> 2] = -1;
 HEAP8[$0 + 1996 | 0] = 0;
 return $0;
}
function Shape__Shape_28_29($0) {
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 >> 2] = -1;
 HEAP32[$0 + 4 >> 2] = -1;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 17 | 0] = 0;
 HEAP8[$0 + 18 | 0] = 0;
 HEAP8[$0 + 19 | 0] = 0;
 HEAP8[$0 + 20 | 0] = 0;
 HEAP8[$0 + 21 | 0] = 0;
 HEAP8[$0 + 22 | 0] = 0;
 HEAP8[$0 + 23 | 0] = 0;
 HEAP8[$0 + 24 | 0] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = 50;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 50;
 HEAP32[$0 + 88 >> 2] = 50;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = -1;
 HEAP32[$0 + 120 >> 2] = -1;
 HEAP32[$0 + 124 >> 2] = -1;
 HEAP32[$0 + 128 >> 2] = -1;
 HEAP32[$0 + 140 >> 2] = -1;
 HEAP32[$0 + 144 >> 2] = -1;
 HEAP32[$0 + 132 >> 2] = -1;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = -1;
 HEAP32[$0 + 152 >> 2] = -1;
 HEAP32[$0 + 160 >> 2] = -1;
 HEAP32[$0 + 164 >> 2] = -1;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = -1;
 HEAP32[$0 + 172 >> 2] = -1;
 HEAP32[$0 + 184 >> 2] = 0;
 HEAP32[$0 + 176 >> 2] = 0;
 HEAP32[$0 + 180 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 8 | 0, $0, 1);
 label$1 : {
  if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 12 >> 2]) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1, $2 + 8 | 0);
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 if ($1) {
  $3 = HEAP32[$0 >> 2];
  label$2 : {
   if (HEAP32[$3 >> 2]) {
    $1 = $2 + 12 | 0;
    $1 = $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29(HEAP32[$0 + 4 >> 2] + 368 | 0, 16), HEAP32[$3 >> 2], HEAP32[$1 >> 2]);
    HEAP32[HEAP32[$0 >> 2] >> 2] = $1;
    break label$2;
   }
   HEAP32[$3 >> 2] = $1;
  }
  $1 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
  if ($1) {
   HEAP8[$1 + 1 | 0] = 0;
  }
  $0 = HEAP32[HEAP32[$0 >> 2] >> 2] != 0;
 } else {
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function MyPolygon__calcNorm_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $5 = 1;
 $6 = 2;
 while (1) {
  $1 = HEAP32[($7 << 2) + $0 >> 2];
  $8 = +HEAPF32[$1 >> 2];
  $10 = +HEAPF32[$1 + 8 >> 2];
  $11 = +HEAPF32[$1 + 4 >> 2];
  label$2 : {
   label$3 : while (1) {
    $1 = HEAP32[($5 << 2) + $0 >> 2];
    $12 = $8 - +HEAPF32[$1 >> 2];
    $13 = $10 - +HEAPF32[$1 + 8 >> 2];
    $14 = $11 - +HEAPF32[$1 + 4 >> 2];
    label$4 : while (1) {
     $1 = HEAP32[($6 << 2) + $0 >> 2];
     $3 = $11 - +HEAPF32[$1 + 4 >> 2];
     $4 = $8 - +HEAPF32[$1 >> 2];
     $2 = $12 * $3 - $14 * $4;
     $9 = $10 - +HEAPF32[$1 + 8 >> 2];
     $3 = $14 * $9 - $13 * $3;
     $4 = $12 * $9 - $13 * $4;
     $1 = Math_abs($2) < 1e-8 & (Math_abs($3) < 1e-8 & Math_abs($4) < 1e-8);
     $9 = -$4;
     while (1) {
      if (!$1) {
       break label$2;
      }
      if (($6 | 0) <= 2) {
       $6 = $6 + 1 | 0;
       continue label$4;
      }
      if (($5 | 0) <= 1) {
       $6 = $5 + 2 | 0;
       $5 = $5 + 1 | 0;
       continue label$3;
      }
      if ($7) {
       continue;
      }
      break;
     }
     break;
    }
    break;
   }
   $6 = $7 + 3 | 0;
   $5 = $7 + 2 | 0;
   $7 = $7 + 1 | 0;
   continue;
  }
  break;
 }
 $8 = $2;
 $2 = Math_sqrt($2 * $2 + ($4 * $4 + $3 * $3));
 HEAPF32[$0 + 24 >> 2] = $8 / $2;
 HEAPF32[$0 + 20 >> 2] = $9 / $2;
 HEAPF32[$0 + 16 >> 2] = $3 / $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12;
 }
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 >>> 0 <= 5) {
  $0 = $2;
  $4 = $2;
  label$2 : {
   label$3 : {
    switch ($3 - 1 | 0) {
    default:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 39840);
     break label$2;
    case 0:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 39855);
     break label$2;
    case 1:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 39873);
     break label$2;
    case 2:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 39944);
     break label$2;
    case 3:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 39994);
     break label$2;
    case 4:
     break label$3;
    }
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 40044);
  }
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function scalbnl($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 label$1 : {
  if (($5 | 0) >= 16384) {
   __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $3 = HEAP32[$6 + 40 >> 2];
   $4 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[$6 + 32 >> 2];
   $2 = HEAP32[$6 + 36 >> 2];
   if (($5 | 0) < 32767) {
    $5 = $5 + -16383 | 0;
    break label$1;
   }
   __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $5 = (($5 | 0) < 49149 ? $5 : 49149) + -32766 | 0;
   $3 = HEAP32[$6 + 24 >> 2];
   $4 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   $2 = HEAP32[$6 + 20 >> 2];
   break label$1;
  }
  if (($5 | 0) > -16383) {
   break label$1;
  }
  __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $3 = HEAP32[$6 + 72 >> 2];
  $4 = HEAP32[$6 + 76 >> 2];
  $1 = HEAP32[$6 + 64 >> 2];
  $2 = HEAP32[$6 + 68 >> 2];
  if (($5 | 0) > -32765) {
   $5 = $5 + 16382 | 0;
   break label$1;
  }
  __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
  $3 = HEAP32[$6 + 56 >> 2];
  $4 = HEAP32[$6 + 60 >> 2];
  $1 = HEAP32[$6 + 48 >> 2];
  $2 = HEAP32[$6 + 52 >> 2];
 }
 __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
 $1 = HEAP32[$6 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$6 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 global$0 = $6 + 80 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 >>> 0 <= 5) {
  $0 = $2;
  $4 = $2;
  label$2 : {
   label$3 : {
    switch ($3 - 1 | 0) {
    default:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 39840);
     break label$2;
    case 0:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 39855);
     break label$2;
    case 1:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 40984);
     break label$2;
    case 2:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 40996);
     break label$2;
    case 3:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 41009);
     break label$2;
    case 4:
     break label$3;
    }
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 41022);
  }
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function NoiseSlvProgram__20ShaderProgram__currentt_NoiseSlvProgram__28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  $2 = HEAP32[11870];
  if ($2) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2) | 0) != 3) {
    break label$1;
   }
   $1 = HEAP32[11870];
  }
  global$0 = $0 + 16 | 0;
  return $1;
 }
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 16676, 26);
 $1 = HEAP32[(HEAP32[HEAP32[$2 >> 2] + -12 >> 2] + $2 | 0) + 28 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0 + 8 | 0, 51440);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $3);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 $0 = __cxa_allocate_exception(8) | 0;
 HCException__HCException_28char_20const__29($0, 16703);
 __cxa_throw($0 | 0, 1364, 1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 34996);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 37236);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 if (HEAPU8[$0 + 13 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 37243);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 17) {
  $3 = $2 + 72 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 16) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 72 | 0, $3);
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 72 >> 3];
  $3 = $2 + 32 | 0;
  $0 = $2 + 24 | 0;
  HEAP32[$0 + 4 >> 2] = snprintf($2 + 32 | 0, 32, 35916, $2 + 16 | 0) + ($2 + 32 | 0);
  HEAP32[$0 >> 2] = $3;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 80 | 0;
}
function BuildControlBase__drawTargets_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 $2 = $0 + 1068 | 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $4 = HEAP32[11869];
  HEAP32[11869] = $4 + 1;
  if (!HEAPU8[$0 + 1112 | 0] | $4) {
   break label$1;
  }
  glUseProgram(HEAP32[$0 + 1072 >> 2]);
  HEAP32[11870] = $2;
 }
 BaseGLWidget__transformMat_28_29($3, HEAP32[$0 + 4 >> 2]);
 $2 = HEAP32[$0 + 1144 >> 2];
 if (($2 | 0) != -1) {
  glUniformMatrix4fv($2 | 0, 1, 0, $3 | 0);
 }
 $2 = HEAP32[$0 + 1184 >> 2];
 if (($2 | 0) != -1) {
  glUniform1f($2 | 0, Math_fround(HEAPF32[$0 + 1288 >> 2]));
 }
 glEnable(3042);
 glBlendFunc(770, 771);
 glEnable(32823);
 glPolygonOffset(Math_fround(Math_fround(1)), Math_fround(Math_fround(1)));
 Mesh__paint_28bool_29_20const($0 + 48 | 0, $1);
 if (!$1) {
  BuildControlBase__drawErrorCyliders_28_29($0);
  glPolygonOffset(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)));
  Mesh__paint_28bool_29_20const($0 + 456 | 0, 0);
  glPolygonOffset(Math_fround(Math_fround(1)), Math_fround(Math_fround(1)));
  Mesh__paint_28bool_29_20const($0 + 252 | 0, 0);
  glPolygonOffset(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)));
  Mesh__paint_28bool_29_20const($0 + 660 | 0, 0);
 }
 $0 = HEAP32[11869] + -1 | 0;
 HEAP32[11869] = $0;
 if (!$0) {
  glUseProgram(0);
  HEAP32[11870] = 0;
 }
 global$0 = $3 - -64 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $1 = HEAP32[$6 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $7);
 global$0 = $6 + 16 | 0;
 return HEAP32[$6 + 8 >> 2];
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $1 = HEAP32[$6 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $7);
 global$0 = $6 + 16 | 0;
 return HEAP32[$6 + 8 >> 2];
}
function complain_28char_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 1024, 7), $0, strlen($0));
 $1 = HEAP32[($3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0) + 28 >> 2];
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 51440);
 $5 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $4;
 if (($4 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $5);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 HEAP32[$2 >> 2] = $0;
 emscripten_asm_const_iii(1032, 1062, $2 | 0) | 0;
 global$0 = $2 + 16 | 0;
}
function void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
 label$1 : {
  if ($3 >>> 0 < 2147483647) {
   $3 = $3 << 1;
   break label$1;
  }
  $3 = -1;
 }
 $7 = $3 ? $3 : 4;
 $6 = HEAP32[$1 >> 2];
 $8 = HEAP32[$0 >> 2];
 $3 = dlrealloc(($5 | 0) == 270 ? 0 : HEAP32[$0 >> 2], $7);
 if ($3) {
  if (($5 | 0) != 270) {
   HEAP32[$0 >> 2] = 0;
  }
  $6 = $6 - $8 >> 2;
  HEAP32[$4 + 4 >> 2] = 269;
  $3 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $3, $4 + 4 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $3);
  $5 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = 0;
  if ($5) {
   FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($5);
  }
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($6 << 2);
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2] + ($7 & -4);
  global$0 = $4 + 16 | 0;
  return;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 while (1) {
  label$2 : {
   if (($6 | 0) >= ($2 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$0 + 12 >> 2];
   $5 = HEAP32[$0 + 16 >> 2];
   label$3 : {
    if ($3 >>> 0 < $5 >>> 0) {
     HEAP32[$4 + 12 >> 2] = 2147483647;
     HEAP32[$4 + 8 >> 2] = $5 - $3 >> 2;
     HEAP32[$4 + 4 >> 2] = $2 - $6;
     $3 = global$0 - 16 | 0;
     global$0 = $3;
     global$0 = $3 + 16 | 0;
     $3 = global$0 - 16 | 0;
     global$0 = $3;
     global$0 = $3 + 16 | 0;
     $3 = $4 + 4 | 0;
     $5 = $4 + 8 | 0;
     $3 = HEAP32[$3 >> 2] < HEAP32[$5 >> 2] ? $3 : $5;
     $5 = $4 + 12 | 0;
     $3 = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$5 >> 2] ? $3 : $5) >> 2];
     std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + ($3 << 2);
     $1 = ($3 << 2) + $1 | 0;
     break label$3;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
    if (($3 | 0) == -1) {
     break label$2;
    }
    HEAP32[$1 >> 2] = $3;
    $3 = 1;
    $1 = $1 + 4 | 0;
   }
   $6 = $3 + $6 | 0;
   continue;
  }
  break;
 }
 global$0 = $4 + 16 | 0;
 return $6 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 return $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0 + 368 | 0, $1, $2, $3, $4, $5);
}
function HCException__HCException_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = 2716;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(50352, 2728, 11), $1, strlen($1));
 $1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 28 >> 2];
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 51440);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 33) {
  $3 = $2 + 96 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 32) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 96 | 0, $3);
  memset($2 + 48 | 0, 0, 40);
  $0 = HEAP32[$2 + 100 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 108 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $3 = $2 + 48 | 0;
  $0 = $2 + 40 | 0;
  HEAP32[$0 + 4 >> 2] = snprintf($2 + 48 | 0, 40, 36032, $2 + 16 | 0) + ($2 + 48 | 0);
  HEAP32[$0 >> 2] = $3;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 112 | 0;
}
function std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20___duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__2c_20std____2__enable_if__28__no_overflow_std____2__ratio_1ll_2c_201ll__2c_20std____2__ratio_1ll_2c_201000000000ll__20___value_29_20___20_28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28_28_28__no_overflow_std____2__ratio_1ll_2c_201ll__2c_20std____2__ratio_1ll_2c_201000000000ll__20___type__den_29_20___20_281_29_29_20___20_28__28treat_as_floating_point_long_20long___value_29_29_29_29_2c_20void___type__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $1 = std____2__chrono____duration_cast_std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__2c_20std____2__ratio_1000000000ll_2c_201ll__2c_20false_2c_20true___operator_28_29_28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__29_20const($1);
 global$0 = $3 + 16 | 0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $6 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0);
 $1 = HEAP32[$0 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $0 + 8 | 0, $2, $4, $6);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($1 | 0) == -1) {
     break label$3;
    }
    HEAP32[$2 + 20 >> 2] = $1;
    if (HEAPU8[$0 + 44 | 0]) {
     if ((fwrite($2 + 20 | 0, 4, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
      break label$3;
     }
     break label$2;
    }
    HEAP32[$2 + 16 >> 2] = $2 + 24;
    $5 = $2 + 32 | 0;
    $6 = $2 + 24 | 0;
    $3 = $2 + 20 | 0;
    while (1) {
     $4 = HEAP32[$0 + 36 >> 2];
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 40 >> 2], $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0) | 0;
     if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
      break label$2;
     }
     if (($4 | 0) == 3) {
      if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
       break label$2;
      }
      break label$3;
     }
     if ($4 >>> 0 > 1) {
      break label$2;
     }
     $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
     if ((fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
      break label$2;
     }
     $3 = HEAP32[$2 + 12 >> 2];
     if (($4 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = ($1 | 0) == -1 ? 0 : $1;
   break label$1;
  }
  $0 = -1;
 }
 global$0 = $2 + 32 | 0;
 return $0 | 0;
}
function UsedPieces__UsedPieces_28PicsSet_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $1 ? HEAP32[$1 + 28 >> 2] - HEAP32[$1 + 24 >> 2] >> 4 : $2;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 label$2 : {
  label$3 : {
   if (!$2) {
    break label$3;
   }
   if ($2 >>> 0 >= 536870912) {
    break label$2;
   }
   $4 = $2 << 3;
   $3 = operator_20new_28unsigned_20long_29($4);
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $3 + $4;
   while (1) {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = HEAP32[$0 + 4 >> 2] + 8 | 0;
    HEAP32[$0 + 4 >> 2] = $3;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
   $0 = HEAP32[$0 >> 2];
   $4 = ($0 | 0) == ($3 | 0);
   if (!$4) {
    $5 = $3 - $0 >> 3;
    $2 = 0;
    while (1) {
     HEAP32[$0 + ($2 << 3) >> 2] = 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 < $5 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($4) {
    break label$3;
   }
   $3 = $3 - $0 >> 3;
   $1 = HEAP32[$1 + 24 >> 2];
   $2 = 0;
   while (1) {
    $4 = $1 + ($2 << 4) | 0;
    HEAP32[($0 + ($2 << 3) | 0) + 4 >> 2] = HEAP32[$4 + 8 >> 2] - HEAP32[$4 + 4 >> 2] >> 3;
    $2 = $2 + 1 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue;
    }
    break;
   }
  }
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($1 | 0) == -1) {
     break label$3;
    }
    HEAP8[$2 + 23 | 0] = $1;
    if (HEAPU8[$0 + 44 | 0]) {
     if ((fwrite($2 + 23 | 0, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
      break label$3;
     }
     break label$2;
    }
    HEAP32[$2 + 16 >> 2] = $2 + 24;
    $5 = $2 + 32 | 0;
    $6 = $2 + 24 | 0;
    $3 = $2 + 23 | 0;
    while (1) {
     $4 = HEAP32[$0 + 36 >> 2];
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 40 >> 2], $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0) | 0;
     if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
      break label$2;
     }
     if (($4 | 0) == 3) {
      if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
       break label$2;
      }
      break label$3;
     }
     if ($4 >>> 0 > 1) {
      break label$2;
     }
     $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
     if ((fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
      break label$2;
     }
     $3 = HEAP32[$2 + 12 >> 2];
     if (($4 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = ($1 | 0) == -1 ? 0 : $1;
   break label$1;
  }
  $0 = -1;
 }
 global$0 = $2 + 32 | 0;
 return $0 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $1 = HEAP32[$6 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $7);
 global$0 = $6 + 16 | 0;
 return HEAP32[$6 + 8 >> 2];
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $1 = HEAP32[$6 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $7);
 global$0 = $6 + 16 | 0;
 return HEAP32[$6 + 8 >> 2];
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 1;
 $6 = $3;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $4 = HEAP32[$0 + 4 >> 2];
 } else {
  $4 = HEAPU8[$0 + 11 | 0];
 }
 label$1 : {
  if ($6 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$1;
   }
   if (HEAP8[$0 + 11 | 0] < 0) {
    $3 = HEAP32[$0 >> 2];
   } else {
    $3 = $0;
   }
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3 + ($4 << 2) | 0, $1, $2);
   $2 = $2 + $4 | 0;
   $1 = $2;
   label$9 : {
    if (HEAP8[$0 + 11 | 0] < 0) {
     HEAP32[$0 + 4 >> 2] = $1;
     break label$9;
    }
    HEAP8[$0 + 11 | 0] = $1;
   }
   HEAP32[$5 + 12 >> 2] = 0;
   HEAP32[$3 + ($2 << 2) >> 2] = HEAP32[$5 + 12 >> 2];
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 global$0 = $5 + 16 | 0;
}
function __vfprintf_internal($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 208 | 0;
 global$0 = $3;
 HEAP32[$3 + 204 >> 2] = $2;
 $2 = 0;
 memset($3 + 160 | 0, 0, 40);
 HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 204 >> 2];
 label$1 : {
  if ((printf_core(0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0) | 0) < 0) {
   $1 = -1;
   break label$1;
  }
  $2 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $2;
  $4 = HEAP32[$0 >> 2];
  if (HEAP8[$0 + 74 | 0] <= 0) {
   HEAP32[$0 >> 2] = $4 & -33;
  }
  $6 = $4 & 32;
  label$5 : {
   if (HEAP32[$0 + 48 >> 2]) {
    $1 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
    break label$5;
   }
   HEAP32[$0 + 48 >> 2] = 80;
   HEAP32[$0 + 16 >> 2] = $3 + 80;
   HEAP32[$0 + 28 >> 2] = $3;
   HEAP32[$0 + 20 >> 2] = $3;
   $4 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 44 >> 2] = $3;
   $5 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
   $1 = $5;
   if (!$4) {
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $4;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   $1 = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 20 >> 2] = 0;
   $1 = $1 ? $5 : -1;
  }
  $5 = $0;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$5 >> 2] = $0 | $6;
  $1 = $0 & 32 ? -1 : $1;
  if (!$2) {
   break label$1;
  }
 }
 global$0 = $3 + 208 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 9) {
  $3 = $2 + 56 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 8) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 56 | 0, $3);
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF32[$2 + 56 >> 2];
  $3 = $2 + 32 | 0;
  $0 = $2 + 24 | 0;
  HEAP32[$0 + 4 >> 2] = snprintf($2 + 32 | 0, 24, 35800, $2 + 16 | 0) + ($2 + 32 | 0);
  HEAP32[$0 >> 2] = $3;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function QuadAdder__QuadAdder_28Mesh__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$1 + 113 | 0] = 1;
 HEAP8[$1 + 111 | 0] = 0;
 HEAP8[$1 + 109 | 0] = 257;
 HEAP8[$1 + 110 | 0] = 1;
 HEAP32[$1 + 116 >> 2] = 2;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $3 + -1;
  if ($3) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  std____2____shared_weak_count____release_weak_28_29($2);
 }
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
 $2 = HEAP32[$1 + 124 >> 2];
 $4 = HEAP32[$1 + 120 >> 2];
 if (($2 | 0) != ($4 | 0)) {
  while (1) {
   $3 = $2 + -20 | 0;
   $5 = HEAP32[$3 >> 2];
   if ($5) {
    HEAP32[$2 + -16 >> 2] = $5;
    dlfree($5);
   }
   $2 = $3;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = $4;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 return $0;
}
function void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
 label$1 : {
  if ($3 >>> 0 < 2147483647) {
   $3 = $3 << 1;
   break label$1;
  }
  $3 = -1;
 }
 $7 = $3 ? $3 : 1;
 $6 = HEAP32[$1 >> 2];
 $8 = HEAP32[$0 >> 2];
 $3 = dlrealloc(($5 | 0) == 270 ? 0 : HEAP32[$0 >> 2], $7);
 if ($3) {
  if (($5 | 0) != 270) {
   HEAP32[$0 >> 2] = 0;
  }
  $6 = $6 - $8 | 0;
  HEAP32[$4 + 4 >> 2] = 269;
  $3 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $3, $4 + 4 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $3);
  $5 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = 0;
  if ($5) {
   FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($5);
  }
  HEAP32[$1 >> 2] = $6 + HEAP32[$0 >> 2];
  HEAP32[$2 >> 2] = $7 + HEAP32[$0 >> 2];
  global$0 = $4 + 16 | 0;
  return;
 }
 std____2____throw_runtime_error_28char_20const__29();
 abort();
}
function cpp_start_28int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $1 = operator_20new_28unsigned_20long_29(2616);
 MainCtrl__MainCtrl_28_29($1);
 HEAP32[11720] = $1;
 emscripten_webgl_init_context_attributes($2 | 0);
 HEAP32[$2 >> 2] = 0;
 emscripten_webgl_make_context_current(emscripten_webgl_create_context(1412, $2 | 0) | 0) | 0;
 $1 = HEAP32[11720];
 HEAP8[$1 + 400 | 0] = 0;
 BaseGLWidget__init_28_29($1 + 144 | 0);
 $1 = PicBucket__createSingleton_28_29();
 $3 = HEAP32[$1 + 16 >> 2];
 label$1 : {
  label$2 : {
   if ((HEAP32[$1 + 24 >> 2] - $3 | 0) / 652 >>> 0 >= $0 >>> 0) {
    break label$2;
   }
   if ($0 >>> 0 >= 6587374) {
    break label$1;
   }
   $5 = HEAP32[$1 + 20 >> 2];
   $0 = Math_imul($0, 652);
   $4 = operator_20new_28unsigned_20long_29($0);
   $6 = $0 + $4 | 0;
   $0 = $5 - $3 | 0;
   $4 = $4 + Math_imul(($0 | 0) / 652 | 0, 652) | 0;
   $5 = $4 + Math_imul(($0 | 0) / -652 | 0, 652) | 0;
   if (($0 | 0) >= 1) {
    memcpy($5, $3, $0);
   }
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 24 >> 2] = $6;
   HEAP32[$1 + 20 >> 2] = $4;
   if (!$3) {
    break label$2;
   }
   dlfree($3);
  }
  PicBucket__loadUnifiedJs_28_29($1);
  ModelControlBase__initTex_28_29();
  global$0 = $2 - -64 | 0;
  return;
 }
 std____2____throw_length_error_28char_20const__29(2740);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $2 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (HEAPU8[$2 + 4 | 0] == 10) {
   if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($2)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 8 >> 2];
  }
  $3 = HEAPU8[$2 + 6 | 0];
  label$3 : {
   if (($3 | 0) != 2) {
    $2 = !$3;
    break label$3;
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2, $1) | 0;
  }
  label$2 : {
   if (!$2) {
    $2 = HEAP32[$0 + 8 >> 2];
    $3 = HEAPU8[$2 + 7 | 0];
    label$8 : {
     if (($3 | 0) != 2) {
      $2 = !$3;
      break label$8;
     }
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1) | 0;
    }
    if (!$2) {
     break label$2;
    }
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, 35134);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $4);
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $4 + 16 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1) {
 var $2 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 44;
 $2 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $2;
 if (HEAP32[$1 >> 2] == ($1 + 12 | 0)) {
  $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2 << 2);
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 >> 2];
  return $0;
 }
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $1 + 44;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 114)) {
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] | 4;
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 86)) {
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] | 2;
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 75)) {
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] | 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7;
 }
}
function emscripten__internal__Invoker_void_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28void_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = HEAP32[$2 >> 2];
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 if ($4 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($4 >>> 0 >= 11) {
     $6 = $4 + 16 & -16;
     $5 = operator_20new_28unsigned_20long_29($6);
     HEAP32[$3 + 8 >> 2] = $6 | -2147483648;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     break label$3;
    }
    HEAP8[$3 + 11 | 0] = $4;
    $5 = $3;
    if (!$4) {
     break label$2;
    }
   }
   memcpy($5, $2 + 4 | 0, $4);
  }
  HEAP8[$4 + $5 | 0] = 0;
  FUNCTION_TABLE[$0]($1, $3);
  if (HEAP8[$3 + 11 | 0] <= -1) {
   dlfree(HEAP32[$3 >> 2]);
  }
  global$0 = $3 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function ModelControlBase__shapeHoverForBuild_28int_2c_20bool_2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = HEAP32[HEAP32[$0 + 8 >> 2] + 116 >> 2];
 if (!$5) {
  return 0;
 }
 if (!(($1 | 0) < 0 | HEAP32[$5 + 12 >> 2] <= ($1 | 0))) {
  $1 = HEAP32[$5 + 28 >> 2] + Math_imul($1, 188) | 0;
  $3 = (HEAP32[$5 + 76 >> 2] + HEAP32[$1 + 4 >> 2] | 0) / 4 | 0;
  $6 = (HEAP32[$5 + 84 >> 2] + HEAP32[$1 + 8 >> 2] | 0) / 4 | 0;
  $4 = (HEAP32[$5 + 68 >> 2] + HEAP32[$1 + 12 >> 2] | 0) / 4 | 0;
  $5 = HEAP32[$1 >> 2];
  label$3 : {
   if ($5 >>> 0 > 2) {
    $1 = -1;
    $3 = -1;
    $4 = -1;
    break label$3;
   }
   label$5 : {
    switch ($5 - 1 | 0) {
    default:
     $1 = $6;
     break label$3;
    case 0:
     $1 = $3;
     $3 = $6;
     break label$3;
    case 1:
     break label$5;
    }
   }
   $1 = $3;
   $3 = $4;
   $4 = $6;
  }
  return BuildControlBase__choiseMouseMove_28int_2c_20bool_29($0 + 700 | 0, $3 << 16 & 16711680 | ($4 << 9 & 65024 | ($1 << 2 & 508 | $5 & 3)), $2);
 }
 if (HEAPU8[$0 + 716 | 0]) {
  $0 = 0;
 } else {
  $1 = $0 + 700 | 0;
  label$10 : {
   if (($3 | 0) != -1) {
    $0 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 704 >> 2], $3, $4);
    break label$10;
   }
   $0 = HEAP32[$0 + 720 >> 2];
  }
  $0 = BuildControlBase__choiseMouseMove_28int_2c_20bool_29($1, $0, $2);
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $6 = $0;
 $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10;
 $7 = $3;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $4 = HEAP32[$0 + 4 >> 2];
 } else {
  $4 = HEAPU8[$0 + 11 | 0];
 }
 label$1 : {
  if ($7 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$1;
   }
   if (HEAP8[$0 + 11 | 0] < 0) {
    $3 = HEAP32[$6 >> 2];
   } else {
    $3 = $6;
   }
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 + $4 | 0, $1, $2);
   $2 = $2 + $4 | 0;
   $1 = $2;
   label$9 : {
    if (HEAP8[$6 + 11 | 0] < 0) {
     HEAP32[$0 + 4 >> 2] = $1;
     break label$9;
    }
    HEAP8[$0 + 11 | 0] = $1;
   }
   HEAP8[$5 + 15 | 0] = 0;
   HEAP8[$2 + $3 | 0] = HEAPU8[$5 + 15 | 0];
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 global$0 = $5 + 16 | 0;
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $6 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0);
 $1 = HEAP32[$0 >> 2];
 $3 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $0 + 8 | 0, $2, $4, $6);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 while (1) {
  label$2 : {
   if (($6 | 0) >= ($2 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$0 + 12 >> 2];
   $5 = HEAP32[$0 + 16 >> 2];
   label$3 : {
    if ($3 >>> 0 < $5 >>> 0) {
     HEAP32[$4 + 12 >> 2] = 2147483647;
     HEAP32[$4 + 8 >> 2] = $5 - $3;
     HEAP32[$4 + 4 >> 2] = $2 - $6;
     $3 = global$0 - 16 | 0;
     global$0 = $3;
     global$0 = $3 + 16 | 0;
     $3 = global$0 - 16 | 0;
     global$0 = $3;
     global$0 = $3 + 16 | 0;
     $3 = $4 + 4 | 0;
     $5 = $4 + 8 | 0;
     $3 = HEAP32[$3 >> 2] < HEAP32[$5 >> 2] ? $3 : $5;
     $5 = $4 + 12 | 0;
     $3 = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$5 >> 2] ? $3 : $5) >> 2];
     std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $3;
     break label$3;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
    if (($3 | 0) == -1) {
     break label$2;
    }
    HEAP8[$1 | 0] = $3;
    $3 = 1;
   }
   $1 = $1 + $3 | 0;
   $6 = $3 + $6 | 0;
   continue;
  }
  break;
 }
 global$0 = $4 + 16 | 0;
 return $6 | 0;
}
function std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAPU8[$0 + 52 | 0];
 label$1 : {
  if (($1 | 0) == -1) {
   $2 = $1;
   if ($4) {
    break label$1;
   }
   $2 = HEAP32[$0 + 48 >> 2];
   HEAP8[$0 + 52 | 0] = ($2 | 0) == -1 ^ 1;
   break label$1;
  }
  if ($4) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
   $2 = HEAP32[$0 + 36 >> 2];
   $2 = (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$0 + 40 >> 2], $3 + 16 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) | 0) + -1 | 0;
   label$4 : {
    label$5 : {
     if ($2 >>> 0 <= 2) {
      if ($2 - 2) {
       break label$5;
      }
      $2 = HEAP32[$0 + 48 >> 2];
      HEAP32[$3 + 20 >> 2] = $3 + 25;
      HEAP8[$3 + 24 | 0] = $2;
     }
     while (1) {
      $2 = HEAP32[$3 + 20 >> 2];
      $4 = 1;
      if ($2 >>> 0 <= $3 + 24 >>> 0) {
       break label$4;
      }
      $2 = $2 + -1 | 0;
      HEAP32[$3 + 20 >> 2] = $2;
      if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $2 = -1;
    $4 = 0;
   }
   if (!$4) {
    break label$1;
   }
  }
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 48 >> 2] = $1;
  $2 = $1;
 }
 global$0 = $3 + 32 | 0;
 return $2 | 0;
}
function __extenddftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 wasm2js_scratch_store_f64(+$1);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $6 = wasm2js_scratch_load_i32(0) | 0;
 $10 = $3 & -2147483648;
 $4 = $3 & 2147483647;
 $2 = $4;
 $7 = $2 + -1048576 | 0;
 $4 = $6;
 $8 = $4;
 if ($4 >>> 0 < 0) {
  $7 = $7 + 1 | 0;
 }
 label$1 : {
  if (($7 | 0) == 2145386495 & $8 >>> 0 <= 4294967295 | $7 >>> 0 < 2145386495) {
   $9 = $4 << 28;
   $3 = ($2 & 15) << 28 | $4 >>> 4;
   $2 = ($2 >>> 4) + 1006632960 | 0;
   $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
   break label$1;
  }
  if (($2 | 0) == 2146435072 & $4 >>> 0 >= 0 | $2 >>> 0 > 2146435072) {
   $9 = $6 << 28;
   $2 = $3 >>> 4;
   $3 = ($3 & 15) << 28 | $6 >>> 4;
   $2 = $2 | 2147418112;
   break label$1;
  }
  if (!($2 | $4)) {
   $3 = 0;
   $2 = 0;
   break label$1;
  }
  $8 = $2;
  $2 = ($2 | 0) == 1 & $4 >>> 0 >= 0 | $2 >>> 0 > 1 ? Math_clz32($2) : Math_clz32($6) + 32 | 0;
  __ashlti3($5, $4, $8, 0, 0, $2 + 49 | 0);
  $11 = HEAP32[$5 >> 2];
  $9 = HEAP32[$5 + 4 >> 2];
  $3 = HEAP32[$5 + 8 >> 2];
  $2 = HEAP32[$5 + 12 >> 2] ^ 65536 | 15372 - $2 << 16;
 }
 HEAP32[$0 >> 2] = $11;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 8 >> 2] = $3 | $12;
 HEAP32[$0 + 12 >> 2] = $2 | $10;
 global$0 = $5 + 16 | 0;
}
function CubeDocBase___CubeDocBase_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 15476;
 $1 = HEAP32[$0 + 128 >> 2];
 HEAP32[$0 + 128 >> 2] = 0;
 if ($1) {
  Shape___Shape_28_29($1 + 375140 | 0);
  $2 = HEAP32[$1 + 28 >> 2];
  if ($2) {
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 124 >> 2] = 0;
 if ($1) {
  Solutions__clear_28int_29($1);
  $2 = HEAP32[$1 + 8 >> 2];
  if ($2) {
   HEAP32[$1 + 12 >> 2] = $2;
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = HEAP32[$0 + 120 >> 2];
 label$5 : {
  if (!$1) {
   break label$5;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$5;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $1 = HEAP32[$0 + 104 >> 2];
 if ($1) {
  $2 = HEAP32[$0 + 108 >> 2];
  $3 = $1;
  label$7 : {
   if (($1 | 0) == ($2 | 0)) {
    break label$7;
   }
   while (1) {
    $2 = CubeDocBase__DocState___DocState_28_29($2 + -32 | 0);
    if (($1 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $3 = HEAP32[$0 + 104 >> 2];
  }
  $2 = $3;
  HEAP32[$0 + 108 >> 2] = $1;
  dlfree($2);
 }
 $1 = HEAP32[$0 + 92 >> 2];
 if ($1) {
  HEAP32[$0 + 96 >> 2] = $1;
  dlfree($1);
 }
 if (HEAP8[$0 + 87 | 0] <= -1) {
  dlfree(HEAP32[$0 + 76 >> 2]);
 }
 return $0 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $7 = HEAP32[6971];
 HEAP32[$6 + 24 >> 2] = HEAP32[6970];
 HEAP32[$6 + 28 >> 2] = $7;
 $7 = HEAP32[6969];
 HEAP32[$6 + 16 >> 2] = HEAP32[6968];
 HEAP32[$6 + 20 >> 2] = $7;
 $7 = HEAP32[6967];
 HEAP32[$6 + 8 >> 2] = HEAP32[6966];
 HEAP32[$6 + 12 >> 2] = $7;
 $7 = HEAP32[6965];
 HEAP32[$6 >> 2] = HEAP32[6964];
 HEAP32[$6 + 4 >> 2] = $7;
 $0 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 32 | 0);
 global$0 = $6 + 32 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 35134);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAPU8[$0 + 52 | 0];
 label$1 : {
  if (($1 | 0) == -1) {
   $2 = $1;
   if ($4) {
    break label$1;
   }
   $2 = HEAP32[$0 + 48 >> 2];
   HEAP8[$0 + 52 | 0] = ($2 | 0) == -1 ^ 1;
   break label$1;
  }
  if ($4) {
   HEAP8[$3 + 19 | 0] = HEAP32[$0 + 48 >> 2];
   $2 = HEAP32[$0 + 36 >> 2];
   $2 = (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$0 + 40 >> 2], $3 + 19 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) | 0) + -1 | 0;
   label$4 : {
    label$5 : {
     if ($2 >>> 0 <= 2) {
      if ($2 - 2) {
       break label$5;
      }
      $2 = HEAP32[$0 + 48 >> 2];
      HEAP32[$3 + 20 >> 2] = $3 + 25;
      HEAP8[$3 + 24 | 0] = $2;
     }
     while (1) {
      $2 = HEAP32[$3 + 20 >> 2];
      $4 = 1;
      if ($2 >>> 0 <= $3 + 24 >>> 0) {
       break label$4;
      }
      $2 = $2 + -1 | 0;
      HEAP32[$3 + 20 >> 2] = $2;
      if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $2 = -1;
    $4 = 0;
   }
   if (!$4) {
    break label$1;
   }
  }
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 48 >> 2] = $1;
  $2 = $1;
 }
 global$0 = $3 + 32 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 35222);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35210);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3;
 HEAP32[$2 + 40 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = ($2 | 0) != 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$2 | !($0 & 3)) {
      break label$4;
     }
     $4 = $1 & 255;
     while (1) {
      if (($4 | 0) == HEAPU8[$0 | 0]) {
       break label$3;
      }
      $0 = $0 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != 0;
      if (!$2) {
       break label$4;
      }
      if ($0 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
   }
   if (HEAPU8[$0 | 0] == ($1 & 255)) {
    break label$1;
   }
   label$6 : {
    if ($2 >>> 0 >= 4) {
     $6 = Math_imul($1 & 255, 16843009);
     $3 = $2 + -4 | 0;
     $4 = $3 & -4;
     $3 = $3 - $4 | 0;
     $4 = ($0 + $4 | 0) + 4 | 0;
     while (1) {
      $5 = HEAP32[$0 >> 2] ^ $6;
      if (($5 ^ -1) & $5 + -16843009 & -2139062144) {
       break label$6;
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
     $2 = $3;
     $0 = $4;
    }
    if (!$2) {
     break label$2;
    }
   }
   $1 = $1 & 255;
   while (1) {
    if (($1 | 0) == HEAPU8[$0 | 0]) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 36703);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function MainCtrl__MainCtrl_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = CubeDocBase__CubeDocBase_28_29($0);
 $2 = ModelControlBase__ModelControlBase_28BaseGLWidget__2c_20CubeDocBase__29($0 + 512 | 0, BaseGLWidget__BaseGLWidget_28_29($0 + 144 | 0), $1);
 HEAP32[$0 + 2540 >> 2] = 0;
 HEAP8[$0 + 2544 | 0] = 0;
 $1 = $0 + 2552 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 2560 | 0] = 0;
 $1 = $0 + 2520 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 2516 | 0] = 0;
 $1 = $0 + 2528 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$0 + 2536 >> 2] = 0;
 $1 = $0 + 2584 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 2580 | 0] = 0;
 HEAP32[$0 + 2576 >> 2] = 0;
 HEAP32[$0 + 2568 >> 2] = 0;
 $1 = $0 + 2592 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0 + 2600 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 2612 | 0] = 0;
 HEAP32[$0 + 2512 >> 2] = 2620;
 HEAP8[$0 + 2508 | 0] = 1;
 HEAP32[$0 + 2564 >> 2] = 0;
 $1 = operator_20new_28unsigned_20long_29(12);
 HEAP32[$1 + 4 >> 2] = $0 + 160;
 HEAP32[$1 + 8 >> 2] = $2;
 $3 = HEAP32[$0 + 160 >> 2];
 HEAP32[$1 >> 2] = $3;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$0 + 160 >> 2] = $1;
 HEAP32[$0 + 2608 >> 2] = $2;
 HEAP32[$0 + 88 >> 2] = $0 + 2512;
 HEAP32[$0 + 168 >> 2] = HEAP32[$0 + 168 >> 2] + 1;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, $1);
 $2 = HEAP32[$2 >> 2];
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 16 | 0, 35134);
 $5 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 12 >> 2] = $5;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $2, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function BaseGLWidget___BaseGLWidget_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 6640;
 $1 = HEAP32[$0 + 324 >> 2];
 if ($1) {
  HEAP32[$0 + 328 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 176 >> 2];
 if ($1) {
  HEAP32[$0 + 180 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  HEAP32[$0 + 100 >> 2] = $1;
  dlfree($1);
 }
 label$4 : {
  if (!HEAP32[$0 + 24 >> 2]) {
   break label$4;
  }
  $1 = HEAP32[$0 + 20 >> 2];
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 16 | 0;
  $4 = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 24 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$4;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 label$6 : {
  if (!HEAP32[$0 + 12 >> 2]) {
   break label$6;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = 0;
  if (($1 | 0) == ($3 | 0)) {
   break label$6;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   dlfree($1);
   $1 = $2;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0 | 0;
}
function Mesh___Mesh_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$0 + 120 >> 2];
 if ($1) {
  $2 = HEAP32[$0 + 124 >> 2];
  $3 = $1;
  label$2 : {
   if (($1 | 0) == ($2 | 0)) {
    break label$2;
   }
   while (1) {
    $3 = $2 + -20 | 0;
    $4 = HEAP32[$3 >> 2];
    if ($4) {
     HEAP32[$2 + -16 >> 2] = $4;
     dlfree($4);
    }
    $2 = $3;
    if (($1 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $3 = HEAP32[$0 + 120 >> 2];
  }
  HEAP32[$0 + 124 >> 2] = $1;
  dlfree($3);
 }
 $1 = HEAP32[$0 + 68 >> 2];
 if ($1) {
  HEAP32[$0 + 72 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  HEAP32[$0 + 60 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 44 >> 2];
 if ($1) {
  HEAP32[$0 + 48 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  HEAP32[$0 + 36 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 20 >> 2];
 if ($1) {
  HEAP32[$0 + 24 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 8 >> 2];
 if ($1) {
  HEAP32[$0 + 12 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 label$11 : {
  if (!$1) {
   break label$11;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$11;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 return $0;
}
function strFromJSArray_28emscripten__val_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = HEAP32[$1 >> 2];
 $2 = _emval_new_cstring(1521) | 0;
 $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
 _emval_decref($2 | 0);
 $5 = +_emval_as($3 | 0, 44488, $4 + 8 | 0);
 _emval_run_destructors(HEAP32[$4 + 8 >> 2]);
 _emval_decref($3 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $2 = $0;
 if ($5 < 4294967296 & $5 >= 0) {
  $3 = ~~$5 >>> 0;
 } else {
  $3 = 0;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($2, $3);
 if ($3) {
  $2 = 0;
  while (1) {
   $6 = HEAP32[$1 >> 2];
   HEAP32[$4 + 8 >> 2] = $2;
   $7 = _emval_take_value(44488, $4 + 8 | 0) | 0;
   $6 = _emval_get_property($6 | 0, $7 | 0) | 0;
   _emval_decref($7 | 0);
   $5 = +_emval_as($6 | 0, 44476, $4 + 8 | 0);
   _emval_run_destructors(HEAP32[$4 + 8 >> 2]);
   _emval_decref($6 | 0);
   $6 = (HEAP8[$0 + 11 | 0] < 0 ? HEAP32[$0 >> 2] : $0) + $2 | 0;
   if (Math_abs($5) < 2147483648) {
    $7 = ~~$5;
   } else {
    $7 = -2147483648;
   }
   HEAP8[$6 | 0] = $7;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 16 | 0;
}
function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 if ($3 >>> 0 < 4294967280) {
  label$2 : {
   label$3 : {
    if ($3 >>> 0 >= 11) {
     $5 = $3 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$2 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$2 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = $3;
     break label$3;
    }
    HEAP8[$2 + 11 | 0] = $3;
    $4 = $2;
    if (!$3) {
     break label$2;
    }
   }
   memcpy($4, $1 + 4 | 0, $3);
  }
  HEAP8[$3 + $4 | 0] = 0;
  FUNCTION_TABLE[$0]($2);
  if (HEAP8[$2 + 11 | 0] <= -1) {
   dlfree(HEAP32[$2 >> 2]);
  }
  global$0 = $2 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20___destroy_28std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20___destroy_28std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20std____2__less_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__2c_20std____2__allocator_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__20__20___destroy_28std____2____tree_node_std____2__tuple_int_2c_20int_2c_20int_2c_20EPlane_2c_20Shape__EFacing__2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  dlfree($1);
 }
}
function ModelControlBase__scrMove_28bool_2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = Math_fround(0);
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 label$1 : {
  if (!(HEAP32[$0 + 628 >> 2] < ($3 | 0) | HEAP32[$0 + 620 >> 2] > ($3 | 0) | (HEAP32[$0 + 632 >> 2] < ($4 | 0) | HEAP32[$0 + 624 >> 2] > ($4 | 0)))) {
   $1 = HEAP32[$0 + 4 >> 2];
   $0 = $0 + 640 | 0;
   HEAP32[$5 + 12 >> 2] = $0;
   $2 = HEAP32[$1 + 328 >> 2];
   if (($2 | 0) != HEAP32[$1 + 332 >> 2]) {
    HEAP32[$2 >> 2] = $0;
    HEAP32[$1 + 328 >> 2] = HEAP32[$1 + 328 >> 2] + 4;
    $6 = 1;
    break label$1;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($1 + 324 | 0, $5 + 12 | 0);
   $6 = 1;
   break label$1;
  }
  $7 = HEAPF32[$0 + 644 >> 2];
  HEAP32[$0 + 644 >> 2] = 0;
  if ($7 != Math_fround(0)) {
   HEAP8[$0 + 636 | 0] = 0;
   $6 = 1;
   break label$1;
  }
  if ($1) {
   break label$1;
  }
  $6 = ModelControlBase__shapeHoverForBuild_28int_2c_20bool_2c_20bool_2c_20int_2c_20int_29($0, BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], $3, $4) + -1 | 0, $2, $3, $4);
 }
 global$0 = $5 + 16 | 0;
 return $6 | 0;
}
function ShaderProgram__clear_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if (($1 | 0) != ($2 | 0)) {
  while (1) {
   $3 = $1 + -12 | 0;
   if (HEAP8[$1 + -1 | 0] <= -1) {
    dlfree(HEAP32[$3 >> 2]);
   }
   $1 = $3;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 12 >> 2] = $2;
 $1 = HEAP32[$0 + 36 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 if (($1 | 0) != ($2 | 0)) {
  while (1) {
   $3 = $1 + -12 | 0;
   if (HEAP8[$1 + -1 | 0] <= -1) {
    dlfree(HEAP32[$3 >> 2]);
   }
   $1 = $3;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 36 >> 2] = $2;
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 20 >> 2];
 if (($1 | 0) != ($2 | 0)) {
  while (1) {
   $3 = $1 + -12 | 0;
   if (HEAP8[$1 + -1 | 0] <= -1) {
    dlfree(HEAP32[$3 >> 2]);
   }
   $1 = $3;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 24 >> 2] = $2;
 glDeleteProgram(HEAP32[$0 + 4 >> 2]);
 $1 = HEAP32[$0 + 48 >> 2];
 if (($1 | 0) != HEAP32[$0 + 52 >> 2]) {
  while (1) {
   glDeleteShader(HEAP32[$1 >> 2]);
   $1 = $1 + 4 | 0;
   if (($1 | 0) != HEAP32[$0 + 52 >> 2]) {
    continue;
   }
   break;
  }
  $1 = HEAP32[$0 + 48 >> 2];
 }
 HEAP8[$0 + 44 | 0] = 0;
 HEAP32[$0 + 52 >> 2] = $1;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = $0;
 $7 = $1;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
 $0 = $1;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$0 >> 2];
 }
 $8 = $0;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 if (HEAP8[$1 + 11 | 0] < 0) {
  $1 = HEAP32[$1 + 4 >> 2];
 } else {
  $1 = HEAPU8[$1 + 11 | 0];
 }
 return std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($6, $7, $2, $3, $4, $5, $8, $0 + ($1 << 2) | 0) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 & 1) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 41880);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 2) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 41887);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 4) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 41897);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 global$0 = $2 + 48 | 0;
}
function void_20std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20_____push_back_slow_path_Vec3_20const___28Vec3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$0 + 4 >> 2] - $5 | 0;
 $3 = ($6 | 0) / 12 | 0;
 $2 = $3 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 < 357913942) {
   $7 = Math_imul($3, 12);
   $4 = (HEAP32[$0 + 8 >> 2] - $5 | 0) / 12 | 0;
   $3 = $4 << 1;
   $4 = $4 >>> 0 < 178956970 ? $3 >>> 0 < $2 >>> 0 ? $2 : $3 : 357913941;
   $2 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    if ($4 >>> 0 >= 357913942) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29(Math_imul($4, 12));
   }
   $8 = $2;
   $2 = $7 + $2 | 0;
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $1 = $2 + Math_imul(($6 | 0) / -12 | 0, 12) | 0;
   if (($6 | 0) >= 1) {
    memcpy($1, $5, $6);
   }
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $8 + Math_imul($4, 12);
   HEAP32[$0 + 4 >> 2] = $2 + 12;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function Shape__startNeiTransform_28MatStack__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 HEAP32[$1 + 60 >> 2] = 1065353216;
 HEAP32[$1 >> 2] = 1065353216;
 $2 = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 1065353216;
 HEAP32[$2 + 20 >> 2] = 1065353216;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 $3 = HEAP32[$0 + 28 >> 2];
 Mat4__translate_28float_2c_20float_2c_20float_29($2, Math_fround((HEAP32[$0 + 76 >> 2] + HEAP32[$3 + 4 >> 2] | 0) + -96 | 0), Math_fround((HEAP32[$0 + 84 >> 2] + HEAP32[$3 + 8 >> 2] | 0) + -96 | 0), Math_fround((HEAP32[$0 + 68 >> 2] + HEAP32[$3 + 12 >> 2] | 0) + -96 | 0));
 MatStack__scale_28float_2c_20float_2c_20float_29($2, Math_fround(1), Math_fround(1), Math_fround(-1));
 $0 = HEAP32[$3 >> 2];
 if ($0 >>> 0 <= 1) {
  if ($0 - 1) {
   Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(90), Math_fround(0), Math_fround(1), Math_fround(0));
   return;
  }
  Mat4__rotate_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(-90), Math_fround(1), Math_fround(0), Math_fround(0));
 }
}
function std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2____map_value_compare_VecRep__VecWrap_2c_20std____2____value_type_VecRep__VecWrap_2c_20int__2c_20std____2__less_VecRep__VecWrap__2c_20true__2c_20std____2__allocator_std____2____value_type_VecRep__VecWrap_2c_20int__20__20___destroy_28std____2____tree_node_std____2____value_type_VecRep__VecWrap_2c_20int__2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  dlfree($1);
 }
}
function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $9 = 1;
 $8 = $3 & 2147483647;
 $12 = $8;
 $10 = $2;
 label$1 : {
  if (!$2 & ($8 | 0) == 2147418112 ? $0 | $1 : ($8 | 0) == 2147418112 & $2 >>> 0 > 0 | $8 >>> 0 > 2147418112) {
   break label$1;
  }
  $11 = $7 & 2147483647;
  $13 = $11;
  $8 = $6;
  if (!$6 & ($11 | 0) == 2147418112 ? $4 | $5 : ($11 | 0) == 2147418112 & $6 >>> 0 > 0 | $11 >>> 0 > 2147418112) {
   break label$1;
  }
  if (!($0 | $4 | ($8 | $10) | ($1 | $5 | ($12 | $13)))) {
   return 0;
  }
  $10 = $3 & $7;
  if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? ($2 & $6) >>> 0 < 0 ? 0 : 1 : 0) {
   $9 = -1;
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : ($3 | 0) < ($7 | 0) ? 1 : ($3 | 0) <= ($7 | 0) ? $2 >>> 0 >= $6 >>> 0 ? 0 : 1 : 0) {
    break label$1;
   }
   return ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
  }
  $9 = -1;
  if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : ($3 | 0) > ($7 | 0) ? 1 : ($3 | 0) >= ($7 | 0) ? $2 >>> 0 <= $6 >>> 0 ? 0 : 1 : 0) {
   break label$1;
  }
  $9 = ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
 }
 return $9;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = HEAPU8[$1 | 0];
 $6 = HEAP32[$2 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 12 >> 2] = $6;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$4 >> 2];
 $4 = HEAP32[$5 + 12 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$5 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $5, $2, $3);
 global$0 = $5 + 16 | 0;
 return $0;
}
function void_20std____2__allocator_traits_std____2__allocator_PicType__20_____construct_range_forward_PicType__2c_20PicType___28std____2__allocator_PicType___2c_20PicType__2c_20PicType__2c_20PicType___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   $3 = HEAP32[$2 >> 2];
   while (1) {
    $3 = memcpy($3, $0, 309);
    $5 = $3;
    HEAP32[$3 + 320 >> 2] = 0;
    HEAP32[$3 + 312 >> 2] = 0;
    HEAP32[$3 + 316 >> 2] = 0;
    $4 = HEAP32[$0 + 316 >> 2] - HEAP32[$0 + 312 >> 2] | 0;
    label$4 : {
     if (!$4) {
      break label$4;
     }
     $6 = $4 >> 3;
     if ($6 >>> 0 >= 536870912) {
      break label$1;
     }
     $4 = operator_20new_28unsigned_20long_29($4);
     HEAP32[$3 + 312 >> 2] = $4;
     HEAP32[$3 + 316 >> 2] = $4;
     HEAP32[$5 + 320 >> 2] = $4 + ($6 << 3);
     $6 = HEAP32[$0 + 312 >> 2];
     $5 = HEAP32[$0 + 316 >> 2] - $6 | 0;
     if (($5 | 0) < 1) {
      break label$4;
     }
     HEAP32[$3 + 316 >> 2] = memcpy($4, $6, $5) + $5;
    }
    $3 = HEAP32[$2 >> 2] + 324 | 0;
    HEAP32[$2 >> 2] = $3;
    $0 = $0 + 324 | 0;
    if (($1 | 0) != ($0 | 0)) {
     continue;
    }
    break;
   }
  }
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function void_20std____2__vector_Vec4_2c_20std____2__allocator_Vec4__20_____push_back_slow_path_Vec4_20const___28Vec4_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = HEAP32[$0 >> 2];
 $7 = HEAP32[$0 + 4 >> 2] - $6 | 0;
 $2 = $7 >> 4;
 $3 = $2 + 1 | 0;
 label$1 : {
  if ($3 >>> 0 < 268435456) {
   $8 = $2 << 4;
   $4 = HEAP32[$0 + 8 >> 2] - $6 | 0;
   $2 = $4 >> 3;
   $4 = $4 >> 4 >>> 0 < 134217727 ? $2 >>> 0 < $3 >>> 0 ? $3 : $2 : 268435455;
   $5 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    if ($4 >>> 0 >= 268435456) {
     break label$1;
    }
    $5 = operator_20new_28unsigned_20long_29($4 << 4);
   }
   $3 = $8 + $5 | 0;
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 12 >> 2] = $2;
   if (($7 | 0) >= 1) {
    memcpy($5, $6, $7);
   }
   HEAP32[$0 >> 2] = $5;
   HEAP32[$0 + 8 >> 2] = $5 + ($4 << 4);
   HEAP32[$0 + 4 >> 2] = $3 + 16;
   if ($6) {
    dlfree($6);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function deserializeAndLoad_28emscripten__val_2c_20bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $0 = HEAP32[$0 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 _emval_incref($0 | 0);
 strFromJSArray_28emscripten__val_29($2 + 16 | 0, $2 + 8 | 0);
 _emval_decref($0 | 0);
 $0 = HEAP32[11720];
 label$1 : {
  if ($1) {
   CubeDocBase__loadMinBin_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $2 + 16 | 0);
   break label$1;
  }
  CubeDocBase__loadMinText_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $2 + 16 | 0);
 }
 BuildControlBase__reloadWorld_28_29(HEAP32[11720] + 1212 | 0);
 $0 = HEAP32[11720];
 $1 = HEAP32[$0 + 124 >> 2];
 HEAP32[$0 + 132 >> 2] = (HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2) + -1;
 HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[$0 + 116 >> 2] + 12 >> 2];
 dispFirstSlv_28_29();
 BaseGLWidget__reCalcProj_28_29(HEAP32[11720] + 144 | 0);
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 if (HEAP8[$2 + 27 | 0] <= -1) {
  dlfree(HEAP32[$2 + 16 >> 2]);
 }
 global$0 = $2 + 48 | 0;
}
function Mesh__load_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 $3 = $0 + 132 | 0;
 $4 = HEAP32[$3 >> 2];
 if (!$4) {
  glGenBuffers(1, $3 | 0);
  $4 = HEAP32[$3 >> 2];
 }
 glBindBuffer(HEAP32[$0 + 136 >> 2], $4 | 0);
 HEAP32[$2 + 80 >> 2] = $1;
 emscripten_asm_const_iii(4542, 1062, $2 + 80 | 0) | 0;
 HEAP32[$2 + 64 >> 2] = $1;
 HEAP32[$0 + 140 >> 2] = emscripten_asm_const_iii(4628, 1062, $2 - -64 | 0);
 $3 = $0 + 144 | 0;
 $4 = HEAP32[$3 >> 2];
 if (!$4) {
  glGenBuffers(1, $3 | 0);
  $4 = HEAP32[$3 >> 2];
 }
 glBindBuffer(HEAP32[$0 + 148 >> 2], $4 | 0);
 HEAP32[$2 + 48 >> 2] = $1;
 emscripten_asm_const_iii(4671, 1062, $2 + 48 | 0) | 0;
 HEAP32[$2 + 32 >> 2] = $1;
 HEAP32[$0 + 152 >> 2] = emscripten_asm_const_iii(4758, 1062, $2 + 32 | 0);
 $3 = $0 + 192 | 0;
 $4 = HEAP32[$3 >> 2];
 if (!$4) {
  glGenBuffers(1, $3 | 0);
  $4 = HEAP32[$3 >> 2];
 }
 glBindBuffer(HEAP32[$0 + 196 >> 2], $4 | 0);
 HEAP32[$2 + 16 >> 2] = $1;
 emscripten_asm_const_iii(4802, 1062, $2 + 16 | 0) | 0;
 HEAP32[$2 >> 2] = $1;
 $1 = emscripten_asm_const_iii(4896, 1062, $2 | 0) | 0;
 HEAP32[$0 + 116 >> 2] = 2;
 HEAP32[$0 + 200 >> 2] = $1;
 HEAP8[$0 + 111 | 0] = 1;
 HEAP8[$0 + 108 | 0] = 1;
 global$0 = $2 + 96 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = $0;
 $7 = $1;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
 $0 = $1;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$0 >> 2];
 }
 $8 = $0;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $0 = HEAP32[$1 >> 2];
 } else {
  $0 = $1;
 }
 if (HEAP8[$1 + 11 | 0] < 0) {
  $1 = HEAP32[$1 + 4 >> 2];
 } else {
  $1 = HEAPU8[$1 + 11 | 0];
 }
 return std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($6, $7, $2, $3, $4, $5, $8, $0 + $1 | 0) | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 1;
 label$1 : {
  if ($3 >>> 0 >= $2 >>> 0) {
   if (HEAP8[$0 + 11 | 0] < 0) {
    $3 = HEAP32[$0 >> 2];
   } else {
    $3 = $0;
   }
   $5 = $3;
   if ($2) {
    wmemmove($3, $1, $2);
   }
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[($2 << 2) + $5 >> 2] = HEAP32[$4 + 12 >> 2];
   label$9 : {
    if (HEAP8[$0 + 11 | 0] < 0) {
     HEAP32[$0 + 4 >> 2] = $2;
     break label$9;
    }
    HEAP8[$0 + 11 | 0] = $2;
   }
   break label$1;
  }
  $5 = $0;
  $6 = $3;
  $3 = $2 - $3 | 0;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $0 = HEAP32[$0 + 4 >> 2];
  } else {
   $0 = HEAPU8[$0 + 11 | 0];
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($5, $6, $3, $0, 0, $0, $2, $1);
 }
 global$0 = $4 + 16 | 0;
}
function unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   label$3 : {
    label$4 : {
     $5 = HEAPU8[$0 | 0];
     if (($5 | 0) != 45) {
      break label$4;
     }
     $0 = $0 + 1 | 0;
     if (($1 | 0) != ($0 | 0)) {
      break label$4;
     }
     break label$3;
    }
    $7 = HEAP32[12002];
    HEAP32[12002] = 0;
    $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
    $3 = i64toi32_i32$HIGH_BITS;
    $6 = HEAP32[12002];
    if (!$6) {
     HEAP32[12002] = $7;
    }
    if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
     break label$3;
    }
    if (!(($3 | 0) == -1 & 4294967295 >= $0 >>> 0 | 4294967295 > $3 >>> 0 ? ($6 | 0) != 68 : 0)) {
     HEAP32[$2 >> 2] = 4;
     $0 = -1;
     $1 = -1;
     break label$1;
    }
    $1 = $0;
    $2 = ($5 | 0) == 45;
    $0 = $2 ? 0 - $0 | 0 : $0;
    $1 = $2 ? 0 - ($3 + (0 < $1 >>> 0) | 0) | 0 : $3;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 4;
  $0 = 0;
  $1 = 0;
 }
 global$0 = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}
function BuildProgram__BuildProgram_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 BaseProgram__BaseProgram_28_29($0);
 HEAP32[$0 >> 2] = 15328;
 FloatAttrib__FloatAttrib_28char_20const__2c_20ShaderProgram__29($0 + 152 | 0, $0);
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP8[$1 + 8 | 0] = 0;
 HEAP32[$1 >> 2] = 1869377379;
 HEAP32[$1 + 4 >> 2] = 1953775986;
 HEAP8[$1 + 11 | 0] = 8;
 HEAP32[$0 + 176 >> 2] = -1;
 HEAP32[$0 + 172 >> 2] = 2816;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 180 | 0, $1);
 $3 = $0 + 172 | 0;
 HEAP32[$1 + 12 >> 2] = $3;
 $2 = $0 - -64 | 0;
 $4 = HEAP32[$2 >> 2];
 label$1 : {
  if (($4 | 0) != HEAP32[$0 + 68 >> 2]) {
   HEAP32[$4 >> 2] = $3;
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 4;
   break label$1;
  }
  void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($0 + 60 | 0, $1 + 12 | 0);
 }
 HEAP32[$0 + 172 >> 2] = 15256;
 if (HEAP8[$1 + 11 | 0] <= -1) {
  dlfree(HEAP32[$1 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 34752);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3 + 8 | 0);
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 16 | 0, 34777);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $3 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($3 + 24 | 0, $3 + 8 | 0);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($4, $1, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 40376);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 38575);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $4 = $2 - $1 >> 2;
 if ($4 >>> 0 <= 1073741807) {
  label$2 : {
   if ($4 >>> 0 <= 1) {
    HEAP8[$0 + 11 | 0] = $4;
    $3 = $0;
    break label$2;
   }
   $7 = $0;
   if ($4 >>> 0 >= 2) {
    $3 = $4 + 4 & -4;
    $5 = $3 + -1 | 0;
    $3 = ($5 | 0) == 2 ? $3 : $5;
   } else {
    $3 = 1;
   }
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($5);
   HEAP32[$7 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $4;
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  HEAP32[$6 + 12 >> 2] = 0;
  HEAP32[$3 >> 2] = HEAP32[$6 + 12 >> 2];
  global$0 = $6 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__chrono__steady_clock__now_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 if (clock_gettime(1, $0 + 32 | 0)) {
  abort();
  abort();
 }
 $1 = $0 + 16 | 0;
 $2 = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $2 >> 31;
 $2 = $0 + 8 | 0;
 $3 = HEAP32[($0 + 32 | 4) >> 2];
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $3 >> 31;
 HEAP32[$0 + 24 >> 2] = std____2__common_type_std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__20___type_20std____2__chrono__operator__long_20long_2c_20std____2__ratio_1ll_2c_201ll__2c_20long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__20const__29($1, $2);
 HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$0 + 28 >> 2];
 $1 = $0 + 40 | 0;
 HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 4 >> 2] = $2;
 global$0 = $0 + 48 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 12 >> 2] = $5;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $4, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  label$2 : {
   $4 = HEAP8[$0 + 11 | 0] < 0;
   label$4 : {
    if (!$4) {
     $3 = HEAPU8[$0 + 11 | 0];
     $1 = 1;
     break label$4;
    }
    $3 = HEAP32[$0 + 4 >> 2];
    $1 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   }
   label$3 : {
    if (($1 | 0) == ($3 | 0)) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, 1, $1, $1);
     if (HEAP8[$0 + 11 | 0] >= 0) {
      break label$3;
     }
     break label$2;
    }
    if ($4) {
     break label$2;
    }
   }
   $1 = $0;
   HEAP8[$0 + 11 | 0] = $3 + 1;
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $3 + 1;
 }
 $0 = ($3 << 2) + $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2;
 $5 = $1 + 368 | 0;
 $1 = $3 - $2 >> 2;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($5, $1 << 2);
 $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($4, $3, $2);
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $2;
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 39488);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($2 + 24 | 0, HEAP32[$0 + 8 >> 2]), $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10;
 label$1 : {
  if ($3 >>> 0 >= $2 >>> 0) {
   if (HEAP8[$0 + 11 | 0] < 0) {
    $3 = HEAP32[$0 >> 2];
   } else {
    $3 = $0;
   }
   $5 = $3;
   if ($2) {
    memmove($5, $1, $2);
   }
   HEAP8[$4 + 15 | 0] = 0;
   HEAP8[$2 + $3 | 0] = HEAPU8[$4 + 15 | 0];
   label$8 : {
    if (HEAP8[$0 + 11 | 0] < 0) {
     HEAP32[$0 + 4 >> 2] = $2;
     break label$8;
    }
    HEAP8[$0 + 11 | 0] = $2;
   }
   break label$1;
  }
  $5 = $0;
  $6 = $3;
  $3 = $2 - $3 | 0;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $0 = HEAP32[$0 + 4 >> 2];
  } else {
   $0 = HEAPU8[$0 + 11 | 0];
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($5, $6, $3, $0, 0, $0, $2, $1);
 }
 global$0 = $4 + 16 | 0;
}
function std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 if ($3 - $2 >> 3 >>> 0 >= $1 >>> 0) {
  $3 = $0;
  $0 = $1 << 3;
  HEAP32[$3 + 4 >> 2] = memset($2, 255, $0) + $0;
  return;
 }
 $4 = HEAP32[$0 >> 2];
 $6 = $2 - $4 | 0;
 $2 = $6 >> 3;
 $5 = $2 + $1 | 0;
 label$2 : {
  if ($5 >>> 0 < 536870912) {
   $7 = $2 << 3;
   $3 = $3 - $4 | 0;
   $2 = $3 >> 2;
   $3 = $3 >> 3 >>> 0 < 268435455 ? $2 >>> 0 < $5 >>> 0 ? $5 : $2 : 536870911;
   $2 = 0;
   label$4 : {
    if (!$3) {
     break label$4;
    }
    if ($3 >>> 0 >= 536870912) {
     break label$2;
    }
    $2 = operator_20new_28unsigned_20long_29($3 << 3);
   }
   memset($7 + $2 | 0, 255, $1 << 3);
   if (($6 | 0) >= 1) {
    memcpy($2, $4, $6);
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + ($3 << 3);
   HEAP32[$0 + 4 >> 2] = $2 + ($5 << 3);
   if ($4) {
    dlfree($4);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2, $3);
}
function std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $4 = $2 - $1 | 0;
 if ($4 >>> 0 <= 4294967279) {
  label$2 : {
   if ($4 >>> 0 <= 10) {
    HEAP8[$0 + 11 | 0] = $4;
    $3 = $0;
    break label$2;
   }
   $7 = $0;
   if ($4 >>> 0 >= 11) {
    $3 = $4 + 16 & -16;
    $5 = $3 + -1 | 0;
    $3 = ($5 | 0) == 11 ? $3 : $5;
   } else {
    $3 = 10;
   }
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($5);
   HEAP32[$7 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $4;
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP8[$6 + 15 | 0] = 0;
  HEAP8[$3 | 0] = HEAPU8[$6 + 15 | 0];
  global$0 = $6 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, $2);
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($5, $1, $4, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2__vector_int_2c_20std____2__allocator_int__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 if ($3 - $2 >> 2 >>> 0 >= $1 >>> 0) {
  $5 = $0;
  $0 = $1 << 2;
  HEAP32[$5 + 4 >> 2] = memset($2, 0, $0) + $0;
  return;
 }
 $4 = HEAP32[$0 >> 2];
 $7 = $2 - $4 | 0;
 $2 = $7 >> 2;
 $6 = $2 + $1 | 0;
 label$2 : {
  if ($6 >>> 0 < 1073741824) {
   $8 = $2 << 2;
   $3 = $3 - $4 | 0;
   $2 = $3 >> 1;
   $3 = $3 >> 2 >>> 0 < 536870911 ? $2 >>> 0 < $6 >>> 0 ? $6 : $2 : 1073741823;
   $2 = 0;
   label$4 : {
    if (!$3) {
     break label$4;
    }
    if ($3 >>> 0 >= 1073741824) {
     break label$2;
    }
    $5 = operator_20new_28unsigned_20long_29($3 << 2);
    $2 = $5;
   }
   memset($8 + $2 | 0, 0, $1 << 2);
   if (($7 | 0) >= 1) {
    memcpy($5, $4, $7);
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + ($3 << 2);
   HEAP32[$0 + 4 >> 2] = $2 + ($6 << 2);
   if ($4) {
    dlfree($4);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function __stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 $4 = HEAP32[$0 + 48 >> 2];
 HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 HEAP32[$3 + 24 >> 2] = $5;
 label$1 : {
  label$2 : {
   $4 = __wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0;
   $5 = 0;
   label$4 : {
    if (!$4) {
     break label$4;
    }
    HEAP32[12002] = $4;
    $5 = -1;
   }
   label$3 : {
    if ($5) {
     HEAP32[$3 + 12 >> 2] = -1;
     $2 = -1;
     break label$3;
    }
    $4 = HEAP32[$3 + 12 >> 2];
    if (($4 | 0) > 0) {
     break label$2;
    }
    $2 = $4;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2 & 48 ^ 16;
   break label$1;
  }
  $6 = HEAP32[$3 + 20 >> 2];
  if ($4 >>> 0 <= $6 >>> 0) {
   $2 = $4;
   break label$1;
  }
  $5 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = $5 + ($4 - $6 | 0);
  if (!HEAP32[$0 + 48 >> 2]) {
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = $5 + 1;
  HEAP8[($1 + $2 | 0) + -1 | 0] = HEAPU8[$5 | 0];
 }
 global$0 = $3 + 32 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 label$1 : {
  label$2 : {
   if (HEAP32[$0 >> 2] == ($0 + 12 | 0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, $1);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($5, $4, $1, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35572);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 43064);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 36 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 32 >> 2] = $3;
 $0 = HEAP32[$2 + 36 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 38575);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $1;
 label$1 : {
  label$2 : {
   $4 = HEAP8[$0 + 11 | 0] < 0;
   label$4 : {
    if (!$4) {
     $3 = HEAPU8[$0 + 11 | 0];
     $1 = 10;
     break label$4;
    }
    $3 = HEAP32[$0 + 4 >> 2];
    $1 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   }
   label$3 : {
    if (($1 | 0) == ($3 | 0)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, 1, $1, $1);
     if (HEAP8[$0 + 11 | 0] >= 0) {
      break label$3;
     }
     break label$2;
    }
    if ($4) {
     break label$2;
    }
   }
   $1 = $0;
   HEAP8[$0 + 11 | 0] = $3 + 1;
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $3 + 1;
 }
 $0 = $1 + $3 | 0;
 HEAP8[$0 | 0] = HEAPU8[$2 + 15 | 0];
 HEAP8[$2 + 14 | 0] = 0;
 HEAP8[$0 + 1 | 0] = HEAPU8[$2 + 14 | 0];
 global$0 = $2 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28char_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
 $4 = $0;
 $2 = strlen(1783);
 $5 = $2;
 $6 = $2;
 if (HEAP8[$1 + 11 | 0] < 0) {
  $2 = HEAP32[$1 + 4 >> 2];
 } else {
  $2 = HEAPU8[$1 + 11 | 0];
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_29($4, $5, $6 + $2 | 0);
 if (HEAP8[$1 + 11 | 0] < 0) {
  $1 = HEAP32[$1 >> 2];
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2);
 global$0 = $3 + 16 | 0;
}
function Solutions__addBackCommon_28SlvCube__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 label$1 : {
  if (!filterOnlySinglePiecePerFam_28SlvCube__29($1)) {
   if (!$1) {
    break label$1;
   }
   dlfree(SlvCube___SlvCube_28_29($1));
   break label$1;
  }
  if (!Solutions__filterDup_28SlvCube__29($0, $1)) {
   if (!$1) {
    break label$1;
   }
   dlfree(SlvCube___SlvCube_28_29($1));
   break label$1;
  }
  label$4 : {
   if (!$2) {
    $2 = HEAP32[$0 + 12 >> 2];
    break label$4;
   }
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $2;
  }
  label$6 : {
   if (HEAP32[$0 + 16 >> 2] != ($2 | 0)) {
    HEAP32[$2 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 4;
    break label$6;
   }
   void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($0 + 8 | 0, $3 + 12 | 0);
  }
  if (HEAPU8[$0 + 20 | 0]) {
   break label$1;
  }
  HEAP8[$0 + 20 | 0] = 1;
  $0 = HEAP32[$0 + 4 >> 2];
  if (!$0) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 1);
 }
 global$0 = $3 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function void_20std____2__vector_SlvCube__SlvPiece_2c_20std____2__allocator_SlvCube__SlvPiece__20_____push_back_slow_path_SlvCube__SlvPiece__28SlvCube__SlvPiece___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = HEAP32[$0 >> 2];
 $7 = HEAP32[$0 + 4 >> 2] - $5 | 0;
 $2 = $7 >> 3;
 $3 = $2 + 1 | 0;
 label$1 : {
  if ($3 >>> 0 < 536870912) {
   $8 = $2 << 3;
   $6 = HEAP32[$0 + 8 >> 2] - $5 | 0;
   $2 = $6 >> 2;
   $3 = $6 >> 3 >>> 0 < 268435455 ? $2 >>> 0 < $3 >>> 0 ? $3 : $2 : 536870911;
   $4 = 0;
   label$3 : {
    if (!$3) {
     break label$3;
    }
    if ($3 >>> 0 >= 536870912) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29($3 << 3);
   }
   $2 = $8 + $4 | 0;
   $6 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $6;
   if (($7 | 0) >= 1) {
    memcpy($4, $5, $7);
   }
   HEAP32[$0 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $4 + ($3 << 3);
   HEAP32[$0 + 4 >> 2] = $2 + 8;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function NoiseSlvProgram__NoiseSlvProgram_28_29($0) {
 BaseProgram__BaseProgram_28_29($0);
 HEAP32[$0 >> 2] = 15388;
 IntUniform__IntUniform_28char_20const__2c_20ShaderProgram__29($0 + 152 | 0, 15860, $0);
 Vec3Uniform__Vec3Uniform_28char_20const__2c_20ShaderProgram__29($0 + 172 | 0, 15867, $0);
 IntUniform__IntUniform_28char_20const__2c_20ShaderProgram__29($0 + 192 | 0, 15874, $0);
 Mat4Uniform__Mat4Uniform_28char_20const__2c_20ShaderProgram__29($0 + 212 | 0, 15883, $0);
 Mat3Uniform__Mat3Uniform_28char_20const__2c_20ShaderProgram__29($0 + 232 | 0, $0);
 Vec3Attrib__Vec3Attrib_28char_20const__2c_20ShaderProgram__29($0 + 252 | 0, 15902, $0);
 Vec3Uniform__Vec3Uniform_28char_20const__2c_20ShaderProgram__29($0 + 272 | 0, 15909, $0);
 Vec3Uniform__Vec3Uniform_28char_20const__2c_20ShaderProgram__29($0 + 292 | 0, 15919, $0);
 IntUniform__IntUniform_28char_20const__2c_20ShaderProgram__29($0 + 312 | 0, 15928, $0);
 Vec2Uniform__Vec2Uniform_28char_20const__2c_20ShaderProgram__29($0 + 332 | 0, $0);
 Mat2Uniform__Mat2Uniform_28char_20const__2c_20ShaderProgram__29($0 + 352 | 0, $0);
 FloatUniform__FloatUniform_28char_20const__2c_20ShaderProgram__29($0 + 372 | 0, 15951, $0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 if ($1) {
  $3 = HEAP8[$0 + 11 | 0] < 0 ? (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0 : 10;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $2 = HEAP32[$0 + 4 >> 2];
  } else {
   $2 = HEAPU8[$0 + 11 | 0];
  }
  $5 = $2 + $1 | 0;
  if ($3 - $2 >>> 0 < $1 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $5 - $3 | 0, $2, $2);
  }
  $3 = $2;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $2 = HEAP32[$0 >> 2];
  } else {
   $2 = $0;
  }
  std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($3 + $2 | 0, $1, 0);
  label$9 : {
   if (HEAP8[$0 + 11 | 0] < 0) {
    HEAP32[$0 + 4 >> 2] = $5;
    break label$9;
   }
   HEAP8[$0 + 11 | 0] = $5;
  }
  HEAP8[$4 + 15 | 0] = 0;
  HEAP8[$2 + $5 | 0] = HEAPU8[$4 + 15 | 0];
 }
 global$0 = $4 + 16 | 0;
}
function __dynamic_cast($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = HEAP32[$0 >> 2];
 $4 = HEAP32[$2 + -8 >> 2];
 $2 = HEAP32[$2 + -4 >> 2];
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 44248;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 44296;
 memset($1 + 24 | 0, 0, 39);
 $0 = $0 + $4 | 0;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($2, 44296, 0)) {
   HEAP32[$1 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1 + 8 | 0, $0, $0, 1, 0);
   $3 = HEAP32[$1 + 32 >> 2] == 1 ? $0 : 0;
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1 + 8 | 0, $0, 1, 0);
  $0 = HEAP32[$1 + 44 >> 2];
  if ($0 >>> 0 > 1) {
   break label$1;
  }
  if ($0 - 1) {
   $3 = HEAP32[$1 + 48 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 ? HEAP32[$1 + 40 >> 2] == 1 ? HEAP32[$1 + 28 >> 2] : 0 : 0 : 0;
   break label$1;
  }
  if (HEAP32[$1 + 32 >> 2] != 1) {
   if (HEAP32[$1 + 48 >> 2] | HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 40 >> 2] != 1) {
    break label$1;
   }
  }
  $3 = HEAP32[$1 + 24 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return $3;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 while (1) {
  label$2 : {
   if (($6 | 0) >= ($2 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$0 + 24 >> 2];
   $4 = HEAP32[$0 + 28 >> 2];
   if ($3 >>> 0 >= $4 >>> 0) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
     break label$2;
    }
    $6 = $6 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   HEAP32[$5 + 12 >> 2] = $4 - $3 >> 2;
   HEAP32[$5 + 8 >> 2] = $2 - $6;
   $3 = global$0 - 16 | 0;
   global$0 = $3;
   global$0 = $3 + 16 | 0;
   $3 = $5 + 8 | 0;
   $4 = $5 + 12 | 0;
   $3 = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$4 >> 2] ? $3 : $4) >> 2];
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
   $4 = $3 << 2;
   HEAP32[$0 + 24 >> 2] = $4 + HEAP32[$0 + 24 >> 2];
   $6 = $3 + $6 | 0;
   $1 = $1 + $4 | 0;
   continue;
  }
  break;
 }
 global$0 = $5 + 16 | 0;
 return $6 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$1 >> 2] = 0;
 $3 = 1;
 label$1 : {
  $2 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
   $2 = HEAP8[$2 | 0];
  } else {
   $2 = 0;
  }
  if ((($2 << 24 >> 24) + -48 & 255) >>> 0 > 9) {
   break label$1;
  }
  while (1) {
   $3 = 0;
   $2 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
    $2 = HEAP8[$2 | 0];
   } else {
    $2 = 0;
   }
   if ((($2 << 24 >> 24) + -48 & 255) >>> 0 > 9) {
    break label$1;
   }
   HEAP32[$1 >> 2] = Math_imul($4, 10);
   $4 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) + HEAP32[$1 >> 2] | 0) + -48 | 0;
   HEAP32[$1 >> 2] = $4;
   continue;
  }
 }
 return $3;
}
function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 label$1 : {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $4 = HEAP32[$0 + 4 >> 2];
  } else {
   $4 = HEAPU8[$0 + 11 | 0];
  }
  if (!$4) {
   break label$1;
  }
  void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
  $5 = $2 + -4 | 0;
  if (HEAP8[$0 + 11 | 0] < 0) {
   $4 = HEAP32[$0 + 4 >> 2];
  } else {
   $4 = HEAPU8[$0 + 11 | 0];
  }
  if (HEAP8[$0 + 11 | 0] < 0) {
   $0 = HEAP32[$0 >> 2];
  }
  $2 = $0;
  $0 = $4 + $0 | 0;
  while (1) {
   label$9 : {
    $4 = HEAP8[$2 | 0];
    if ($1 >>> 0 >= $5 >>> 0) {
     break label$9;
    }
    if (!(($4 | 0) < 1 | ($4 | 0) >= 127 | HEAP32[$1 >> 2] == HEAP8[$2 | 0])) {
     HEAP32[$3 >> 2] = 4;
     return;
    }
    $2 = ($0 - $2 | 0) > 1 ? $2 + 1 | 0 : $2;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  if (($4 | 0) < 1 | ($4 | 0) >= 127 | HEAP32[$5 >> 2] + -1 >>> 0 < HEAP8[$2 | 0] >>> 0) {
   break label$1;
  }
  HEAP32[$3 >> 2] = 4;
 }
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  label$2 : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (32 <= ($2 & 63) >>> 0) {
     $2 = 0;
     $1 = $4 >>> $1;
    } else {
     $2 = $4 >>> $1;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break label$2;
   }
   if (!$5) {
    break label$1;
   }
   $7 = $4;
   $8 = $3;
   $9 = 64 - $5 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $7 = $8 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $6 = $5;
   $1 = $6 & 31;
   if (32 <= ($6 & 63) >>> 0) {
    $6 = 0;
    $1 = $2 >>> $1;
   } else {
    $6 = $2 >>> $1;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $7 = 0;
    $3 = $4 >>> $3;
   } else {
    $7 = $4 >>> $3;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function std____2__vector_Vec4b_2c_20std____2__allocator_Vec4b__20___shrink_to_fit_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 $4 = HEAP32[$0 >> 2];
 $2 = $3 - $4 | 0;
 $1 = $2 >> 2;
 label$1 : {
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] - $4 >> 2 >>> 0 <= $1 >>> 0) {
    break label$2;
   }
   if ($2) {
    if ($1 >>> 0 >= 1073741824) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29($2);
   } else {
    $2 = 0;
   }
   $2 = $2 + ($1 << 2) | 0;
   label$5 : {
    if (($3 | 0) == ($4 | 0)) {
     $1 = $2;
     break label$5;
    }
    $1 = $2;
    while (1) {
     $1 = $1 + -4 | 0;
     $3 = $3 + -4 | 0;
     HEAP8[$1 | 0] = HEAPU8[$3 | 0];
     HEAP8[$1 + 1 | 0] = HEAPU8[$3 + 1 | 0];
     HEAP8[$1 + 2 | 0] = HEAPU8[$3 + 2 | 0];
     HEAP8[$1 + 3 | 0] = HEAPU8[$3 + 3 | 0];
     if (($3 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
    $4 = HEAP32[$0 >> 2];
   }
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $2;
   if (!$4) {
    break label$2;
   }
   dlfree($4);
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 40504);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 40513);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
 HEAP32[$2 + 12 >> 2] = $3;
 if ($3) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2 + 12 | 0);
 } else {
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $3 + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 global$0 = $2 + 16 | 0;
 if (HEAP32[13261] - HEAP32[13260] >> 2 >>> 0 <= $1 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29($1 + 1 | 0);
 }
 if (HEAP32[HEAP32[13260] + ($1 << 2) >> 2]) {
  $2 = HEAP32[HEAP32[13260] + ($1 << 2) >> 2];
  $4 = HEAP32[$2 + 4 >> 2] + -1 | 0;
  HEAP32[$2 + 4 >> 2] = $4;
  if (($4 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
  }
 }
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[HEAP32[13260] + ($1 << 2) >> 2] = $2;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = 0;
 if ($1) {
  $0 = HEAP32[$1 + 4 >> 2] + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $0;
  if (($0 | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  }
 }
 global$0 = $3 + 16 | 0;
}
function void_20std____2__vector_PicDef_2c_20std____2__allocator_PicDef__20_____push_back_slow_path_PicDef__28PicDef___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$0 + 4 >> 2] - $5 | 0;
 $2 = ($6 | 0) / 652 | 0;
 $3 = $2 + 1 | 0;
 label$1 : {
  if ($3 >>> 0 < 6587374) {
   $7 = Math_imul($2, 652);
   $2 = (HEAP32[$0 + 8 >> 2] - $5 | 0) / 652 | 0;
   $4 = $2 << 1;
   $3 = $2 >>> 0 < 3293686 ? $4 >>> 0 < $3 >>> 0 ? $3 : $4 : 6587373;
   $4 = 0;
   label$3 : {
    if (!$3) {
     break label$3;
    }
    if ($3 >>> 0 >= 6587374) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29(Math_imul($3, 652));
   }
   $2 = memcpy($7 + $4 | 0, $1, 652);
   $1 = $2 + Math_imul(($6 | 0) / -652 | 0, 652) | 0;
   if (($6 | 0) >= 1) {
    memcpy($1, $5, $6);
   }
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $4 + Math_imul($3, 652);
   HEAP32[$0 + 4 >> 2] = $2 + 652;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($1, $2 + 12 | 0)) {
    $3 = HEAP32[$2 + 12 >> 2];
    if (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >>> 0 >= $3 >>> 0) {
     break label$2;
    }
   }
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   break label$1;
  }
  $4 = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $4 + $3;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $3;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $2 = HEAP32[$0 + 12 >> 2];
 $3 = HEAPU8[$2 + 6 | 0];
 label$2 : {
  if (($3 | 0) != 2) {
   $2 = !$3;
   break label$2;
  }
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2, $1) | 0;
 }
 label$1 : {
  if (!$2) {
   $2 = HEAP32[$0 + 12 >> 2];
   $3 = HEAPU8[$2 + 7 | 0];
   label$5 : {
    if (($3 | 0) != 2) {
     $2 = !$3;
     break label$5;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1) | 0;
   }
   if (!$2) {
    break label$1;
   }
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, 35134);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $4);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 global$0 = $4 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $4;
 $1 = $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($2 + 24 | 0, $2 + 8 | 0);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP8[$3 + 7 | 0] = 1;
 HEAP8[$3 + 6 | 0] = 1;
 HEAP8[$3 + 5 | 0] = 1;
 HEAP8[$3 + 4 | 0] = 26;
 HEAP32[$3 >> 2] = 34600;
 HEAP32[$3 >> 2] = 42964;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 32 | 0;
 return $3;
}
function long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   label$3 : {
    $6 = HEAP32[12002];
    HEAP32[12002] = 0;
    $3 = strtoll_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
    $0 = i64toi32_i32$HIGH_BITS;
    $5 = HEAP32[12002];
    if (!$5) {
     HEAP32[12002] = $6;
    }
    if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
     break label$3;
    }
    if ((2147483647 > ($0 | 0) ? 1 : 2147483647 >= ($0 | 0) ? 4294967295 < $3 >>> 0 ? 0 : 1 : 0) ? !(($5 | 0) == 68 | (($0 | 0) < -2147483648 ? 1 : ($0 | 0) <= -2147483648 ? $3 >>> 0 >= 0 ? 0 : 1 : 0)) : 0) {
     break label$1;
    }
    HEAP32[$2 >> 2] = 4;
    if (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? $3 >>> 0 < 1 ? 0 : 1 : 0) {
     $3 = -1;
     $0 = 2147483647;
     break label$1;
    }
    $3 = 0;
    $0 = -2147483648;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 4;
  $3 = 0;
  $0 = 0;
 }
 global$0 = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = 1;
 label$1 : {
  $2 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
   $2 = HEAP8[$2 | 0];
  } else {
   $2 = 0;
  }
  $2 = $2 << 24 >> 24;
  if (($2 | 0) < 48 | (($2 + -65 & 255) >>> 0 > 25 ? ($2 | 0) >= 58 : 0)) {
   break label$1;
  }
  $3 = 0;
  while (1) {
   label$6 : {
    $2 = HEAP32[$0 >> 2];
    if (HEAP32[$0 + 4 >> 2] - $2 >>> 0 > 0) {
     $2 = HEAP8[$2 | 0];
    } else {
     $2 = 0;
    }
    $2 = $2 << 24 >> 24;
    if (($2 | 0) >= 48) {
     $4 = -48;
     if (($2 | 0) < 58) {
      break label$6;
     }
     $4 = -55;
     if (($2 + -65 & 255) >>> 0 < 26) {
      break label$6;
     }
    }
    HEAP32[$1 >> 2] = $3;
    $3 = 0;
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   $3 = (Math_imul($3, 36) + $4 | 0) + ($2 & 255) | 0;
   continue;
  }
 }
 return $3;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 while (1) {
  label$2 : {
   if (($5 | 0) >= ($2 | 0)) {
    break label$2;
   }
   $3 = HEAP32[$0 + 24 >> 2];
   $6 = HEAP32[$0 + 28 >> 2];
   if ($3 >>> 0 >= $6 >>> 0) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPU8[$1 | 0]) | 0) == -1) {
     break label$2;
    }
    $5 = $5 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   HEAP32[$4 + 12 >> 2] = $6 - $3;
   HEAP32[$4 + 8 >> 2] = $2 - $5;
   $3 = global$0 - 16 | 0;
   global$0 = $3;
   global$0 = $3 + 16 | 0;
   $3 = $4 + 8 | 0;
   $6 = $4 + 12 | 0;
   $3 = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$6 >> 2] ? $3 : $6) >> 2];
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
   HEAP32[$0 + 24 >> 2] = $3 + HEAP32[$0 + 24 >> 2];
   $5 = $3 + $5 | 0;
   $1 = $1 + $3 | 0;
   continue;
  }
  break;
 }
 global$0 = $4 + 16 | 0;
 return $5 | 0;
}
function dispFirstSlv_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = HEAP32[11720];
 $1 = HEAP32[$0 + 124 >> 2];
 $2 = 0;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $4 = HEAP32[$1 + 8 >> 2];
  $2 = 0;
  if (($4 | 0) == HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[$0 + 132 >> 2];
  $2 = 0;
  if (($0 | 0) == -1) {
   break label$1;
  }
  $2 = HEAP32[($0 << 2) + $4 >> 2];
 }
 SlvCube__genPainter_28_29($2);
 ModelControlBase__reCalcSlvMinMax_28_29(HEAP32[11720] + 512 | 0);
 $0 = HEAP32[11720];
 BaseGLWidget__switchHandler_28GLHandler__29($0 + 144 | 0, $0 + 512 | 0);
 BaseGLWidget__reset_28_29(HEAP32[11720] + 144 | 0);
 $1 = HEAP32[11720];
 $4 = HEAP32[$1 + 132 >> 2];
 $0 = $3;
 $1 = HEAP32[$1 + 124 >> 2];
 if ($1) {
  $1 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2;
 } else {
  $1 = 0;
 }
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $4;
 emscripten_asm_const_iii(1077, 1093, $3 | 0) | 0;
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $3 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, 35324, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (!$2) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  $2 = HEAP32[$0 + 8 >> 2];
  $4 = HEAPU8[$2 + 5 | 0];
  label$2 : {
   if (($4 | 0) != 2) {
    $2 = !$4;
    break label$2;
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, $1) | 0;
  }
  if ($2) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, 41284);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $3 + 16 | 0;
}
function void_20std____2__vector_ShaderParam__2c_20std____2__allocator_ShaderParam___20_____push_back_slow_path_ShaderParam__20const___28ShaderParam__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$0 + 4 >> 2] - $5 | 0;
 $3 = $6 >> 2;
 $4 = $3 + 1 | 0;
 label$1 : {
  if ($4 >>> 0 < 1073741824) {
   $7 = $3 << 2;
   $2 = HEAP32[$0 + 8 >> 2] - $5 | 0;
   $3 = $2 >> 1;
   $4 = $2 >> 2 >>> 0 < 536870911 ? $3 >>> 0 < $4 >>> 0 ? $4 : $3 : 1073741823;
   $2 = 0;
   label$3 : {
    if (!$4) {
     break label$3;
    }
    if ($4 >>> 0 >= 1073741824) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29($4 << 2);
   }
   $3 = $7 + $2 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   if (($6 | 0) >= 1) {
    memcpy($2, $5, $6);
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + ($4 << 2);
   HEAP32[$0 + 4 >> 2] = $3 + 4;
   if ($5) {
    dlfree($5);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2__locale____imp_____imp_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 27920;
 $1 = $0 + 16 | 0;
 while (1) {
  if ($2 >>> 0 < HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 2 >>> 0) {
   if (HEAP32[HEAP32[$1 >> 2] + ($2 << 2) >> 2]) {
    $3 = HEAP32[HEAP32[$1 >> 2] + ($2 << 2) >> 2];
    $4 = HEAP32[$3 + 4 >> 2] + -1 | 0;
    HEAP32[$3 + 4 >> 2] = $4;
    if (($4 | 0) == -1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
    }
   }
   $2 = $2 + 1 | 0;
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 176 | 0);
 if (HEAP32[$1 >> 2]) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($1);
  std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($1 + 32 | 0, HEAP32[$1 >> 2]);
 }
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_char__20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $3 = HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 + 4 >> 2] : HEAPU8[$1 + 11 | 0];
 if ($3 >>> 0 < $2 >>> 0) {
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 $1 = HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 >> 2] : $1;
 HEAP32[$4 + 8 >> 2] = $3 - $2;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 global$0 = $3 + 16 | 0;
 $3 = $0;
 $2 = $1 + $2 | 0;
 $0 = $4 + 8 | 0;
 $1 = $4 + 12 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($3, $2, HEAP32[(HEAPU32[$0 >> 2] < HEAPU32[$1 >> 2] ? $0 : $1) >> 2]);
 global$0 = $4 + 16 | 0;
}
function std____2__vector_ShapePlace_2c_20std____2__allocator_ShapePlace__20___vector_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 label$1 : {
  if ($1) {
   if ($1 >>> 0 >= 82595525) {
    break label$1;
   }
   $3 = Math_imul($1, 52);
   $2 = operator_20new_28unsigned_20long_29($3);
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + $3;
   while (1) {
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 >> 2] = -1;
    HEAP32[$2 + 24 >> 2] = -1;
    HEAP32[$2 + 28 >> 2] = -1;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = -1;
    HEAP32[$2 + 36 >> 2] = -1;
    HEAP32[$2 + 48 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP32[$2 + 44 >> 2] = 0;
    $2 = HEAP32[$0 + 4 >> 2] + 52 | 0;
    HEAP32[$0 + 4 >> 2] = $2;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue;
    }
    break;
   }
  }
  return $0;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  if ($5 & 64) {
   $3 = $1;
   $4 = $5 + -64 | 0;
   $1 = $4 & 31;
   if (32 <= ($4 & 63) >>> 0) {
    $4 = $3 << $1;
    $3 = 0;
   } else {
    $4 = (1 << $1) - 1 & $3 >>> 32 - $1 | $2 << $1;
    $3 = $3 << $1;
   }
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $6 = $3;
  $8 = $5;
  $3 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $7 = $6 << $3;
   $9 = 0;
  } else {
   $7 = (1 << $3) - 1 & $6 >>> 32 - $3 | $4 << $3;
   $9 = $6 << $3;
  }
  $3 = $2;
  $6 = $1;
  $5 = 64 - $5 | 0;
  $4 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $5 = 0;
   $3 = $3 >>> $4;
  } else {
   $5 = $3 >>> $4;
   $3 = ((1 << $4) - 1 & $3) << 32 - $4 | $6 >>> $4;
  }
  $3 = $9 | $3;
  $4 = $5 | $7;
  $5 = $1;
  $1 = $8 & 31;
  if (32 <= ($8 & 63) >>> 0) {
   $7 = $5 << $1;
   $1 = 0;
  } else {
   $7 = (1 << $1) - 1 & $5 >>> 32 - $1 | $2 << $1;
   $1 = $5 << $1;
  }
  $2 = $7;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 288 | 0;
 $2 = $0 + 332 | 0;
 $0 = $2;
 $6 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 $1 = HEAP32[$1 + 12 >> 2];
 $0 = $1;
 while (1) {
  if ($0 >>> 0 < $6 >>> 0) {
   $4 = HEAP32[HEAP32[$2 >> 2] + ($0 << 2) >> 2];
   $5 = HEAP32[$4 + 8 >> 2];
   if ($5 >>> 0 >= HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 2 >>> 0) {
    return 1;
   }
   HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$3 >> 2] + ($5 << 2) >> 2];
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 >> 2] + ($1 << 2);
 return 0;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2 : {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($0 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   label$3 : {
    label$4 : {
     $5 = HEAPU8[$0 | 0];
     if (($5 | 0) != 45) {
      break label$4;
     }
     $0 = $0 + 1 | 0;
     if (($1 | 0) != ($0 | 0)) {
      break label$4;
     }
     break label$3;
    }
    $7 = HEAP32[12002];
    HEAP32[12002] = 0;
    $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
    $3 = i64toi32_i32$HIGH_BITS;
    $6 = HEAP32[12002];
    if (!$6) {
     HEAP32[12002] = $7;
    }
    if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
     break label$3;
    }
    if (!(!$3 & $0 >>> 0 <= 65535 | $3 >>> 0 < 0 ? ($6 | 0) != 68 : 0)) {
     HEAP32[$2 >> 2] = 4;
     $0 = 65535;
     break label$1;
    }
    $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 4;
  $0 = 0;
 }
 global$0 = $4 + 16 | 0;
 return $0 & 65535;
}
function getToothPossibilities_28int_2c_20int_2c_20emscripten__val_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 while (1) {
  label$2 : {
   $5 = Math_imul($3, 7);
   if (!(HEAPU8[$5 + 46896 | 0] != ($0 | 0) | HEAPU8[$5 + 46897 | 0] != ($1 | 0))) {
    $0 = Math_imul($3, 7);
    $1 = $0 + 46898 | 0;
    if (!HEAPU8[$1 | 0]) {
     break label$2;
    }
    $3 = 0;
    while (1) {
     $5 = ($0 + $3 | 0) + 46899 | 0;
     $6 = HEAP32[$2 >> 2];
     if (!(!!(HEAPU8[47472] != 0) | HEAP8[47472] & 1)) {
      HEAP32[11867] = _emval_get_method_caller(2, 3480);
      HEAP32[11868] = 0;
      HEAP32[11868] = HEAP32[11868] | 1;
     }
     $7 = HEAP32[11867];
     HEAP32[$4 + 8 >> 2] = HEAP8[$5 | 0];
     _emval_call_void_method($7 | 0, $6 | 0, 1516, $4 + 8 | 0);
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < HEAPU8[$1 | 0]) {
      continue;
     }
     break;
    }
    break label$2;
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 63) {
    continue;
   }
  }
  break;
 }
 global$0 = $4 + 16 | 0;
}
function Mesh__addIdx_28Mesh__Type_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 24 | 0] = 1;
 HEAP32[$1 + 20 >> 2] = 5;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 $2 = HEAP32[$0 + 124 >> 2];
 label$1 : {
  if ($2 >>> 0 < HEAPU32[$0 + 128 >> 2]) {
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
   HEAP8[$2 + 16 | 0] = HEAPU8[$1 + 24 | 0];
   HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 124 >> 2] + 20;
   break label$1;
  }
  void_20std____2__vector_Mesh__IdxBuf_2c_20std____2__allocator_Mesh__IdxBuf__20_____push_back_slow_path_Mesh__IdxBuf__28Mesh__IdxBuf___29($0 + 120 | 0, $1 + 8 | 0);
  $2 = HEAP32[$1 + 8 >> 2];
  if (!$2) {
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = $2;
  dlfree($2);
 }
 global$0 = $1 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($0) {
 $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0 + 368 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 332 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 288 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 148 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 8 | 0);
}
function unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   label$3 : {
    label$4 : {
     $5 = HEAPU8[$0 | 0];
     if (($5 | 0) != 45) {
      break label$4;
     }
     $0 = $0 + 1 | 0;
     if (($1 | 0) != ($0 | 0)) {
      break label$4;
     }
     break label$3;
    }
    $7 = HEAP32[12002];
    HEAP32[12002] = 0;
    $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
    $3 = i64toi32_i32$HIGH_BITS;
    $6 = HEAP32[12002];
    if (!$6) {
     HEAP32[12002] = $7;
    }
    if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
     break label$3;
    }
    if (!(!$3 & $0 >>> 0 <= 4294967295 | $3 >>> 0 < 0 ? ($6 | 0) != 68 : 0)) {
     HEAP32[$2 >> 2] = 4;
     $0 = -1;
     break label$1;
    }
    $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 4;
  $0 = 0;
 }
 global$0 = $4 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $6 = 1;
 while (1) {
  if (HEAP32[$0 + 4 >> 2] != ($4 | 0)) {
   $7 = HEAP32[$1 + 4 >> 2];
   if (!$6) {
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, 36592);
    $5 = HEAP32[$2 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $5;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
   }
   $5 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP32[HEAP32[$0 >> 2] + ($4 << 2) >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   if (HEAPU8[$2 + 5 | 0] != 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
   }
   $4 = $4 + 1 | 0;
   if (HEAP32[$1 + 4 >> 2] == ($5 | 0)) {
    HEAP32[$1 + 4 >> 2] = $7;
   } else {
    $6 = 0;
   }
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 368 | 0, $1, $2);
}
function void_20std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20_____push_back_slow_path_unsigned_20short__28unsigned_20short___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = HEAP32[$0 >> 2];
 $6 = HEAP32[$0 + 4 >> 2] - $4 | 0;
 label$1 : {
  if (($6 | 0) > -3) {
   $5 = $6 >> 1;
   $2 = $5 + 1 | 0;
   $3 = HEAP32[$0 + 8 >> 2] - $4 | 0;
   $3 = $3 >> 1 >>> 0 < 1073741823 ? $3 >>> 0 < $2 >>> 0 ? $2 : $3 : 2147483647;
   $2 = 0;
   label$3 : {
    if (!$3) {
     break label$3;
    }
    if (($3 | 0) <= -1) {
     break label$1;
    }
    $2 = operator_20new_28unsigned_20long_29($3 << 1);
   }
   $5 = $2 + ($5 << 1) | 0;
   HEAP16[$5 >> 1] = HEAPU16[$1 >> 1];
   if (($6 | 0) >= 1) {
    memcpy($2, $4, $6);
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $2 + ($3 << 1);
   HEAP32[$0 + 4 >> 2] = $5 + 2;
   if ($4) {
    dlfree($4);
   }
   return;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function PicsSet__PicsSet_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = $1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = HEAP32[11988];
 HEAP32[$0 + 44 >> 2] = 0;
 $5 = HEAP32[$4 + 20 >> 2];
 $2 = HEAP32[$4 + 16 >> 2];
 if (($5 | 0) != ($2 | 0)) {
  while (1) {
   $6 = 0;
   $7 = Math_imul($3, 652);
   if (HEAP32[($7 + $2 | 0) + 348 >> 2] > 0) {
    while (1) {
     PicsSet__add_28int_2c_20bool_29($0, $3, $1);
     PicsSet__addRef_28int_29($0, $3);
     HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
     $6 = $6 + 1 | 0;
     $2 = HEAP32[$4 + 16 >> 2];
     if (($6 | 0) < HEAP32[($7 + $2 | 0) + 348 >> 2]) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$4 + 20 >> 2];
   }
   $3 = $3 + 1 | 0;
   if ($3 >>> 0 < ($5 - $2 | 0) / 652 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 if (1073741807 >= $2 >>> 0) {
  label$2 : {
   if ($2 >>> 0 <= 1) {
    HEAP8[$0 + 11 | 0] = $2;
    $3 = $0;
    break label$2;
   }
   $6 = $0;
   if ($2 >>> 0 >= 2) {
    $3 = $2 + 4 & -4;
    $4 = $3 + -1 | 0;
    $3 = ($4 | 0) == 2 ? $3 : $4;
   } else {
    $3 = 1;
   }
   $4 = $3 + 1 | 0;
   $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($4);
   HEAP32[$6 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $4 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $2;
  }
  std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3, $1, $2);
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP32[($2 << 2) + $3 >> 2] = HEAP32[$5 + 12 >> 2];
  global$0 = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $1 = HEAP32[$1 + 28 >> 2];
 HEAP32[$5 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, 27632, 27664, $2) | 0;
 $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0);
 HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1);
 HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 $0 = HEAP32[$5 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $5 + 16 | 0;
}
function long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 label$1 : {
  if (($1 | 0) != ($2 | 0)) {
   $9 = HEAP32[12002];
   HEAP32[12002] = 0;
   long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($4, $1, $4 + 28 | 0);
   $5 = HEAP32[$4 + 8 >> 2];
   $6 = HEAP32[$4 + 12 >> 2];
   $7 = HEAP32[$4 >> 2];
   $8 = HEAP32[$4 + 4 >> 2];
   $1 = HEAP32[12002];
   if (!$1) {
    HEAP32[12002] = $9;
   }
   if (HEAP32[$4 + 28 >> 2] == ($2 | 0)) {
    $10 = $7;
    $11 = $8;
    $12 = $5;
    $13 = $6;
    if (($1 | 0) != 68) {
     break label$1;
    }
   }
   HEAP32[$3 >> 2] = 4;
   $7 = $10;
   $8 = $11;
   $5 = $12;
   $6 = $13;
   break label$1;
  }
  HEAP32[$3 >> 2] = 4;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $6;
 global$0 = $4 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 42376);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 35134);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$1 >> 2];
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($1, 110);
 }
 label$2 : {
  if (!(HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2])) {
   break label$2;
  }
  $2 = HEAP32[$1 >> 2];
  if (HEAP8[$2 | 0] + -48 >>> 0 >= 10) {
   break label$2;
  }
  while (1) {
   if (!(!(HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2]) | HEAP8[$2 | 0] + -48 >>> 0 > 9)) {
    $2 = $2 + 1 | 0;
    HEAP32[$1 >> 2] = $2;
    continue;
   }
   break;
  }
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = $3;
  return;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   label$3 : {
    $6 = HEAP32[12002];
    HEAP32[12002] = 0;
    $0 = strtoll_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
    $3 = i64toi32_i32$HIGH_BITS;
    $5 = HEAP32[12002];
    if (!$5) {
     HEAP32[12002] = $6;
    }
    if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
     break label$3;
    }
    if (!((($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $0 >>> 0 > 2147483647 ? 0 : 1 : 0) ? !(($5 | 0) == 68 | (($3 | 0) < -1 ? 1 : ($3 | 0) <= -1 ? $0 >>> 0 >= 2147483648 ? 0 : 1 : 0)) : 0)) {
     HEAP32[$2 >> 2] = 4;
     $1 = 2147483647;
     if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? $0 >>> 0 < 1 ? 0 : 1 : 0) {
      break label$1;
     }
     $1 = -2147483648;
     break label$1;
    }
    $1 = $0;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 4;
  $1 = 0;
 }
 global$0 = $4 + 16 | 0;
 return $1;
}
function std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_istringstream_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 HEAP32[$0 + 60 >> 2] = 16464;
 HEAP32[$0 >> 2] = 16444;
 HEAP32[$0 + 4 >> 2] = 0;
 $2 = $0 + 8 | 0;
 std____2__ios_base__init_28void__29($0 + 60 | 0, $2);
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = -1;
 HEAP32[$0 + 60 >> 2] = 16408;
 HEAP32[$0 >> 2] = 16388;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($2);
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 3296;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 8;
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $1);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = HEAP32[$2 >> 2];
 $0 = $3 + 8 | 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = $2;
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 if (4294967279 >= $2 >>> 0) {
  label$2 : {
   if ($2 >>> 0 <= 10) {
    HEAP8[$0 + 11 | 0] = $1;
    $2 = $0;
    break label$2;
   }
   $5 = $0;
   if ($2 >>> 0 >= 11) {
    $3 = $2 + 16 & -16;
    $2 = $3 + -1 | 0;
    $2 = ($2 | 0) == 11 ? $3 : $2;
   } else {
    $2 = 10;
   }
   $3 = $2 + 1 | 0;
   $2 = std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($3);
   HEAP32[$5 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $3 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $1;
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2, 1783, $1);
  HEAP8[$4 + 15 | 0] = 0;
  HEAP8[$1 + $2 | 0] = HEAPU8[$4 + 15 | 0];
  global$0 = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = global$0 - 416 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $2 + 416;
 std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
 global$0 = $2 + 416 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 8 >> 2] = 624576549;
 HEAP32[$6 + 12 >> 2] = 1394948685;
 $0 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6 + 8 | 0, $6 + 16 | 0);
 global$0 = $6 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (HEAPU8[$3 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 41284);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 label$1 : {
  if (!HEAP32[$0 + 16 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$1 >> 2];
  $2 = $0 + 8 | 0;
  $4 = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = 0;
  if (($1 | 0) == ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $0 = HEAP32[$1 + 4 >> 2];
   void_20std____2__allocator_traits_std____2__allocator_std____2____list_node_BNode_2c_20void___20__20_____destroy_BNode__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____list_node_BNode_2c_20void___20___2c_20BNode__29($1 + 8 | 0);
   dlfree($1);
   $1 = $0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function __rem_pio2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $5 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1305022426) {
   $6 = +$0;
   $3 = $6 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
   if (Math_abs($3) < 2147483648) {
    $2 = ~~$3;
    break label$1;
   }
   $2 = -2147483648;
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   HEAPF64[$1 >> 3] = Math_fround($0 - $0);
   $2 = 0;
   break label$1;
  }
  $7 = $2;
  $2 = ($2 >>> 23) + -150 | 0;
  HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $7 - ($2 << 23) | 0), wasm2js_scratch_load_f32());
  $2 = __rem_pio2_large($4 + 8 | 0, $4, $2, 1, 0);
  $3 = HEAPF64[$4 >> 3];
  if (($5 | 0) <= -1) {
   HEAPF64[$1 >> 3] = -$3;
   $2 = 0 - $2 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $3;
 }
 global$0 = $4 + 16 | 0;
 return $2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 if (4294967279 >= $2 >>> 0) {
  label$2 : {
   if ($2 >>> 0 <= 10) {
    HEAP8[$0 + 11 | 0] = $2;
    $3 = $0;
    break label$2;
   }
   $6 = $0;
   if ($2 >>> 0 >= 11) {
    $3 = $2 + 16 & -16;
    $4 = $3 + -1 | 0;
    $3 = ($4 | 0) == 11 ? $3 : $4;
   } else {
    $3 = 10;
   }
   $4 = $3 + 1 | 0;
   $3 = std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($4);
   HEAP32[$6 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $4 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $2;
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3, $1, $2);
  HEAP8[$5 + 15 | 0] = 0;
  HEAP8[$2 + $3 | 0] = HEAPU8[$5 + 15 | 0];
  global$0 = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $1 = HEAP32[$1 + 28 >> 2];
 HEAP32[$5 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($5 + 8 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1, 27632, 27664, $2) | 0;
 $1 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 8 | 0);
 HEAP8[$3 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1);
 HEAP8[$4 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 $0 = HEAP32[$5 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $5 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $2);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
   HEAP32[$1 + 28 >> 2] = $3;
  }
  return;
 }
 label$3 : {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$3;
  }
  if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
   if (($3 | 0) != 1) {
    break label$3;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 12 >> 2];
 $2 = $3;
 $5 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 24 >> 2] = $5;
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $2 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = HEAP32[$0 + 24 >> 2];
 $0 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 global$0 = $3 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = $0 + 8 | 0;
 HEAP32[$1 + 8 >> 2] = $1 + 140;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 $1 = $0 + 148 | 0;
 HEAP32[$1 + 8 >> 2] = $1 + 140;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 $1 = $0 + 288 | 0;
 HEAP32[$1 + 8 >> 2] = $1 + 44;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 $1 = $0 + 332 | 0;
 HEAP32[$1 + 8 >> 2] = $1 + 28;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 HEAP8[$0 + 362 | 0] = 0;
 HEAP16[$0 + 360 >> 1] = 1;
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 372 >> 2] = 0;
 $0 = $0 + 368 | 0;
 HEAP32[$0 + 4096 >> 2] = $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2], HEAPU8[$3 | 0]);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $1);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($4, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1, $2);
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $2 + 116;
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
 global$0 = $2 + 128 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $2);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($1, $2, $3, $4, $5) | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 if (1073741807 >= $1 >>> 0) {
  label$2 : {
   if ($1 >>> 0 <= 1) {
    HEAP8[$0 + 11 | 0] = $1;
    $3 = $0;
    break label$2;
   }
   $6 = $0;
   if ($1 >>> 0 >= 2) {
    $3 = $1 + 4 & -4;
    $4 = $3 + -1 | 0;
    $3 = ($4 | 0) == 2 ? $3 : $4;
   } else {
    $3 = 1;
   }
   $4 = $3 + 1 | 0;
   $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($4);
   HEAP32[$6 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $4 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $1;
  }
  if ($1) {
   wmemset($3, $2, $1);
  }
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP32[($1 << 2) + $3 >> 2] = HEAP32[$5 + 12 >> 2];
  global$0 = $5 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($1, $2, $3, $4, $5) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function __multi3($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $9 = $0;
 $10 = $4;
 $4 = 0;
 $11 = $4;
 $6 = $2;
 $2 = 0;
 $7 = __wasm_i64_mul($10, $4, $6, $2);
 $4 = i64toi32_i32$HIGH_BITS;
 $12 = $7;
 $7 = $7 >>> 0 < 0 ? $4 + 1 | 0 : $4;
 $5 = $3;
 $8 = $1;
 $3 = __wasm_i64_mul($5, 0, $1, 0);
 $4 = 0;
 $1 = i64toi32_i32$HIGH_BITS;
 $5 = __wasm_i64_mul($5, $13, $6, $2);
 $2 = $1 + $5 | 0;
 $1 = i64toi32_i32$HIGH_BITS + $4 | 0;
 $1 = $2 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
 $5 = $2;
 $6 = $1;
 $4 = $1 + $12 | 0;
 $1 = $7;
 $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
 $6 = $4;
 $7 = $1;
 $1 = __wasm_i64_mul($8, $14, $10, $11);
 $4 = i64toi32_i32$HIGH_BITS;
 $1 = $1 + $5 | 0;
 if ($1 >>> 0 < $5 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $8 = $4;
 $5 = $4 + $6 | 0;
 $4 = $7;
 HEAP32[$9 + 8 >> 2] = $5;
 HEAP32[$9 + 12 >> 2] = $5 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($1, $2, $3, $4, $5) | 0;
}
function __strchrnul($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  $3 = $1 & 255;
  if ($3) {
   if ($0 & 3) {
    while (1) {
     $2 = HEAPU8[$0 | 0];
     if (!$2 | ($2 | 0) == ($1 & 255)) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 >> 2];
   label$5 : {
    if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
     break label$5;
    }
    $3 = Math_imul($3, 16843009);
    while (1) {
     $2 = $2 ^ $3;
     if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
      break label$5;
     }
     $2 = HEAP32[$0 + 4 >> 2];
     $0 = $0 + 4 | 0;
     if (!($2 + -16843009 & ($2 ^ -1) & -2139062144)) {
      continue;
     }
     break;
    }
   }
   while (1) {
    $2 = $0;
    $3 = HEAPU8[$2 | 0];
    if ($3) {
     $0 = $2 + 1 | 0;
     if (($3 | 0) != ($1 & 255)) {
      continue;
     }
    }
    break;
   }
   return $2;
  }
  return strlen($0) + $0 | 0;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 22856;
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($4 + 8 | 0);
 $3 = HEAP32[$4 + 8 >> 2];
 $5 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP8[$0 + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
 global$0 = $4 + 16 | 0;
}
function __extendsftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
 $6 = $3 & -2147483648;
 $2 = $3 & 2147483647;
 label$1 : {
  if ($2 + -8388608 >>> 0 <= 2130706431) {
   $3 = $2;
   $2 = $2 >>> 7;
   $3 = $3 << 25;
   $2 = $2 + 1065353216 | 0;
   $5 = $3;
   $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   $5 = $3 << 25;
   $2 = $3 >>> 7 | 2147418112;
   break label$1;
  }
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  $3 = $2;
  $2 = Math_clz32($2);
  __ashlti3($4, $3, 0, 0, 0, $2 + 81 | 0);
  $7 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$4 + 12 >> 2] ^ 65536 | 16265 - $2 << 16;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $2 | $6;
 global$0 = $4 + 16 | 0;
}
function std____2__vector_Vec3_2c_20std____2__allocator_Vec3__20___shrink_to_fit_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 >> 2];
 $2 = HEAP32[$0 + 4 >> 2] - $3 | 0;
 $1 = ($2 | 0) / 12 | 0;
 label$1 : {
  label$2 : {
   if ((HEAP32[$0 + 8 >> 2] - $3 | 0) / 12 >>> 0 <= $1 >>> 0) {
    break label$2;
   }
   label$3 : {
    if (!$2) {
     $1 = Math_imul($1, 12);
     $4 = $1 + Math_imul(($2 | 0) / -12 | 0, 12) | 0;
     break label$3;
    }
    if ($1 >>> 0 >= 357913942) {
     break label$1;
    }
    $1 = operator_20new_28unsigned_20long_29($2) + Math_imul($1, 12) | 0;
    $4 = $1 + Math_imul(($2 | 0) / -12 | 0, 12) | 0;
    if (($2 | 0) < 1) {
     break label$3;
    }
    memcpy($4, $3, $2);
   }
   HEAP32[$0 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1;
   if (!$3) {
    break label$2;
   }
   dlfree($3);
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function cos($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $3 = $3 & 2147483647;
 label$1 : {
  if ($3 >>> 0 <= 1072243195) {
   $2 = 1;
   if ($3 >>> 0 < 1044816030) {
    break label$1;
   }
   $2 = __cos($0, 0);
   break label$1;
  }
  $2 = $0 - $0;
  if ($3 >>> 0 >= 2146435072) {
   break label$1;
  }
  $3 = __rem_pio2($0, $1) & 3;
  if ($3 >>> 0 <= 2) {
   label$4 : {
    switch ($3 - 1 | 0) {
    default:
     $2 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 0:
     $2 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 1:
     break label$4;
    }
   }
   $2 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
   break label$1;
  }
  $2 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 41;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 40644;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 28;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 41536;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 17;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 42396;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 22752;
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($4 + 8 | 0);
 $3 = HEAP32[$4 + 8 >> 2];
 $5 = HEAP32[$3 + 4 >> 2] + -1 | 0;
 HEAP32[$3 + 4 >> 2] = $5;
 if (($5 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
 }
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP8[$0 + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
 global$0 = $4 + 16 | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($1, $2, $3, $4, $5) | 0;
}
function void_20emscripten__val__set_char_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const_20_28__29_20_5b5_5d_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $5 = HEAP32[$0 >> 2];
 $4 = _emval_new_cstring($1 | 0) | 0;
 $0 = HEAP8[$2 + 11 | 0];
 label$1 : {
  if (($0 | 0) <= -1) {
   $0 = HEAP32[$2 + 4 >> 2];
   $1 = dlmalloc($0 + 4 | 0);
   HEAP32[$1 >> 2] = $0;
   $2 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = $0 & 255;
  $1 = dlmalloc($0 + 4 | 0);
  HEAP32[$1 >> 2] = $0;
 }
 memcpy($1 + 4 | 0, $2, $0);
 HEAP32[$3 + 8 >> 2] = $1;
 $0 = _emval_take_value(3704, $3 + 8 | 0) | 0;
 _emval_set_property($5 | 0, $4 | 0, $0 | 0);
 _emval_decref($0 | 0);
 _emval_decref($4 | 0);
 global$0 = $3 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  $2 = HEAP8[$0 | 0];
  if (($2 | 0) == 95) {
   if (($0 + 1 | 0) == ($1 | 0)) {
    break label$1;
   }
   $2 = HEAP8[$0 + 1 | 0];
   if ($2 + -48 >>> 0 <= 9) {
    return $0 + 2 | 0;
   }
   if (($2 | 0) != 95) {
    break label$1;
   }
   $2 = $0 + 2 | 0;
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $3 = HEAP8[$2 | 0];
    if ($3 + -48 >>> 0 <= 9) {
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   }
   return ($3 | 0) == 95 ? $2 + 1 | 0 : $0;
  }
  if ($2 + -48 >>> 0 > 9) {
   break label$1;
  }
  $2 = $0;
  while (1) {
   $2 = $2 + 1 | 0;
   if (($2 | 0) == ($1 | 0)) {
    return $1;
   }
   if (HEAP8[$2 | 0] + -48 >>> 0 < 10) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($1, $2, $3, $4, $5) | 0;
}
function SlvPainter__paintLines_28int_2c_20bool_2c_20BaseGLWidget__2c_20ELinesDraw_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 if ((HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 204 >>> 0 > $1 >>> 0) {
  $4 = NoiseSlvProgram__20ShaderProgram__currentt_NoiseSlvProgram__28_29();
  BaseGLWidget__transformMat_28_29($3, $2);
  $2 = HEAP32[$4 + 76 >> 2];
  if (($2 | 0) != -1) {
   glUniformMatrix4fv($2 | 0, 1, 0, $3 | 0);
  }
  $2 = HEAP32[$4 + 196 >> 2];
  if (($2 | 0) != -1) {
   glUniform1i($2 | 0, 256);
  }
  HEAP32[$3 + 8 >> 2] = 1061997773;
  HEAP32[$3 >> 2] = 1061997773;
  HEAP32[$3 + 4 >> 2] = 1061997773;
  $2 = HEAP32[$4 + 136 >> 2];
  if (($2 | 0) != -1) {
   glUniform3fv($2 | 0, 1, $3 | 0);
  }
  glPolygonOffset(Math_fround(Math_fround(0)), Math_fround(Math_fround(0)));
  Mesh__paint_28bool_29_20const(HEAP32[$0 >> 2] + Math_imul($1, 204) | 0, 0);
 }
 global$0 = $3 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($3, 0, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($1, $2, $3, $4, $5) | 0;
}
function BuildWorld__initializeNew_28bool_29($0) {
 var $1 = 0, $2 = 0;
 HEAP8[$0 + 375332 | 0] = 0;
 HEAP16[$0 + 375136 >> 1] = 1;
 HEAP32[$0 + 8 >> 2] = 50;
 HEAP32[$0 >> 2] = 50;
 HEAP32[$0 + 4 >> 2] = 50;
 BuildWorld__clean_28BuildWorld__ECleanMethod_29($0, 0);
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = Math_imul($1, HEAP32[$0 + 20 >> 2]);
 if (($2 | 0) >= 1) {
  $1 = 0;
  while (1) {
   HEAP8[HEAP32[$0 + 28 >> 2] + $1 | 0] = 0;
   $1 = $1 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
  $1 = HEAP32[$0 + 24 >> 2];
 }
 $1 = HEAP32[$0 + 28 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2] + $1 | 0, 24) | 0;
 HEAP8[$1 + 24 | 0] = HEAPU8[$1 + 24 | 0] | 1;
 HEAP8[$0 + 313860 | 0] = 9;
 HEAP8[$0 + 311360 | 0] = 10;
 HEAP8[$0 + 188860 | 0] = 9;
 HEAP8[$0 + 186360 | 0] = 9;
 HEAP8[$0 + 63860 | 0] = 9;
 HEAP8[$0 + 61360 | 0] = 9;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP32[$0 + 32 >> 2] = 6;
 BuildWorld__reClacLimits_28_29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = $0;
 $0 = $1 + 8 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($3, $1, HEAP32[$0 >> 2] + ($2 << 2) | 0, HEAP32[$0 + 4 >> 2]);
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + ($2 << 2);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 64;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 35928;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, 34996);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $3 + 16 | 0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
  $2 = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($1 + 8 | 0, $0);
  label$2 : {
   if (!HEAPU8[$2 | 0]) {
    break label$2;
   }
   $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3) | 0) != -1) {
    break label$2;
   }
   $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | 1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2);
 }
 global$0 = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 39508;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
 if (!(HEAPU8[$3 | 0] & 4)) {
  HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : ($1 | 0) < 100 ? $1 + 1900 | 0 : $1) + -1900;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 30;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 41184;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 3);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 365 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 9;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 41652;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!($1 + -1 >>> 0 > 11 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  $2 = __rem_pio2($0, $1) & 3;
  if ($2 >>> 0 <= 2) {
   label$5 : {
    switch ($2 - 1 | 0) {
    default:
     $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 0:
     $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 1:
     break label$5;
    }
   }
   $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
   break label$1;
  }
  $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 >> 2];
 $4 = $2 + 24 | 0;
 HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = $3;
 $3 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $3;
 if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($4, $2 + 8 | 0)) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0);
  $6 = 1;
 }
 global$0 = $2 + 32 | 0;
 return $6;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 12 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1 + -1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!($1 + -1 >>> 0 > 30 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function wcrtomb($0, $1) {
 label$1 : {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3 : {
    if (!HEAP32[HEAP32[11593] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   HEAP32[12002] = 25;
   $0 = -1;
  } else {
   $0 = 1;
  }
  return $0;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 1);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 6 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 60 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 59 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 23 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($1, $2, $3, $4, $5) | 0;
}
function BaseGLWidget__BaseGLWidget_28_29($0) {
 var $1 = 0;
 HEAP32[$0 >> 2] = 6640;
 $1 = $0 + 16 | 0;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = 0;
 $1 = $0 + 4 | 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $1;
 memset($0 + 24 | 0, 0, 232);
 HEAP32[$0 + 320 >> 2] = 0;
 HEAP32[$0 + 324 >> 2] = 0;
 HEAP32[$0 + 288 >> 2] = 1;
 HEAP32[$0 + 292 >> 2] = 1;
 HEAP8[$0 + 284 | 0] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 336 >> 2] = 0;
 HEAP32[$0 + 340 >> 2] = 0;
 HEAP32[$0 + 304 >> 2] = 3;
 HEAP16[$0 + 316 >> 1] = 256;
 HEAP8[$0 + 256 | 0] = 1;
 HEAP32[$0 + 312 >> 2] = 100;
 HEAP8[$0 + 360 | 0] = 0;
 HEAP32[$0 + 276 >> 2] = 1077936128;
 HEAP32[$0 + 280 >> 2] = 1077936128;
 HEAP32[$0 + 268 >> 2] = -1069547520;
 HEAP32[$0 + 272 >> 2] = 1077936128;
 HEAP32[$0 + 260 >> 2] = -1069547520;
 HEAP32[$0 + 264 >> 2] = -1069547520;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 63;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 35812;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $3, $4, $5, $6) {
 HEAP8[$0 + 7 | 0] = 0;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 0;
 HEAP8[$0 + 4 | 0] = 18;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 41776;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP8[$0 + 32 | 0] = $6;
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 35172);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2 + 16 | 0, $0);
 $0 = HEAP32[$2 + 20 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function BaseProgram__BaseProgram_28_29($0) {
 var $1 = 0;
 HEAP32[$0 >> 2] = 2852;
 HEAP8[$0 + 44 | 0] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 $1 = $0 - -64 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 Mat4Uniform__Mat4Uniform_28char_20const__2c_20ShaderProgram__29($0 + 72 | 0, 15963, $0);
 Vec3Attrib__Vec3Attrib_28char_20const__2c_20ShaderProgram__29($0 + 92 | 0, 15969, $0);
 FloatUniform__FloatUniform_28char_20const__2c_20ShaderProgram__29($0 + 112 | 0, 15973, $0);
 Vec3Uniform__Vec3Uniform_28char_20const__2c_20ShaderProgram__29($0 + 132 | 0, 15984, $0);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 62;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 35696;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($1, $2, $3, $4, $5) | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
  $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($1 + 8 | 0, $0);
  label$2 : {
   if (!HEAPU8[$2 | 0]) {
    break label$2;
   }
   $3 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3) | 0) != -1) {
    break label$2;
   }
   $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | 1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2);
 }
 global$0 = $1 + 16 | 0;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 while (1) {
  if ($1 >>> 0 < $2 >>> 0) {
   std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($3 + 8 | 0, $1);
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
}
function BaseGLWidget__mouseMove_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 320 >> 2];
 $6 = 0;
 label$1 : {
  if (!$5) {
   break label$1;
  }
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, ($1 | 0) != 0, ($2 | 0) != 0, $3, $4) | 0;
 }
 $2 = $6;
 if ($1) {
  $1 = HEAP32[$0 + 320 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
  }
  $2 = 1;
  $5 = HEAP32[$0 + 308 >> 2];
  label$4 : {
   if ($5 >>> 0 > 1) {
    break label$4;
   }
   $1 = $3 - HEAP32[$0 + 336 >> 2] | 0;
   $6 = $4 - HEAP32[$0 + 340 >> 2] | 0;
   if ($5 - 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$0 + 304 >> 2], $1, $6);
    break label$4;
   }
   BaseGLWidget__translate_28int_2c_20int_29($0, $1, $6);
  }
  HEAP8[$0 + 360 | 0] = 0;
  HEAP32[$0 + 336 >> 2] = $3;
  HEAP32[$0 + 340 >> 2] = $4;
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $2 = HEAP32[$0 + 16 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
 $0 = HEAP32[$0 + 20 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $3 + 16 | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($1, $2, $3, $4, $5) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 39;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 40404;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1 : {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
  }
  label$5 : {
   if (HEAP8[$2 + 75 | 0] < 0) {
    break label$5;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     break label$5;
    }
    $4 = $3 + -1 | 0;
    if (HEAPU8[$4 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $1 = $1 - $3 | 0;
   $0 = $0 + $3 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
   $6 = $3;
  }
  memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  $4 = $1 + $6 | 0;
 }
 return $4;
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 $4 = 1;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$1;
  }
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1);
  if (!$1) {
   break label$1;
  }
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = $1;
  memset($3 + 24 | 0, 0, 39);
  HEAP32[$3 + 56 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  if (HEAP32[$3 + 32 >> 2] != 1) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  $4 = 1;
 }
 global$0 = $3 - -64 | 0;
 return $4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 HEAP8[$2 + 7 | 0] = 1;
 HEAP8[$2 + 6 | 0] = 1;
 HEAP8[$2 + 5 | 0] = 1;
 HEAP8[$2 + 4 | 0] = 54;
 HEAP32[$2 >> 2] = 34600;
 HEAP32[$2 >> 2] = 36164;
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $3 + 16 | 0;
 return $2;
}
function SHA1__addBytes_28char_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  label$2 : {
   if ($1) {
    if (($2 | 0) <= 0) {
     break label$2;
    }
    HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + $2;
    while (1) {
     $3 = HEAP32[$0 + 84 >> 2];
     if (($3 | 0) >= 64) {
      break label$1;
     }
     $4 = ($0 + $3 | 0) + 20 | 0;
     $3 = 64 - $3 | 0;
     $3 = ($2 | 0) < ($3 | 0) ? $2 : $3;
     memcpy($4, $1, $3);
     $4 = $3 + HEAP32[$0 + 84 >> 2] | 0;
     HEAP32[$0 + 84 >> 2] = $4;
     $2 = $2 - $3 | 0;
     if (($4 | 0) == 64) {
      SHA1__process_28_29($0);
     }
     $1 = $1 + $3 | 0;
     if (($2 | 0) > 0) {
      continue;
     }
     break;
    }
    return;
   }
   __assert_fail(15129, 15027, 134, 15134);
   abort();
  }
  __assert_fail(15143, 15027, 135, 15134);
  abort();
 }
 __assert_fail(15151, 15027, 143, 15134);
 abort();
}
function __getf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = -1;
 $4 = $3 & 2147483647;
 $7 = $4;
 $5 = $2;
 label$1 : {
  if (!$2 & ($4 | 0) == 2147418112 ? $0 | $1 : ($4 | 0) == 2147418112 & $2 >>> 0 > 0 | $4 >>> 0 > 2147418112) {
   break label$1;
  }
  if (!($0 | $5 | ($7 | 1073610752 | $1))) {
   return 0;
  }
  $5 = $3 & 1073610752;
  if (($5 | 0) > 0 ? 1 : ($5 | 0) >= 0 ? 1 : 0) {
   if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 < 0 | $1 >>> 0 < 0 : ($3 | 0) < 1073610752 ? 1 : ($3 | 0) <= 1073610752 ? $2 >>> 0 >= 0 ? 0 : 1 : 0) {
    break label$1;
   }
   return ($0 | $2) != 0 | ($3 ^ 1073610752 | $1) != 0;
  }
  if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 > 0 | $1 >>> 0 > 0 : ($3 | 0) > 1073610752 ? 1 : ($3 | 0) >= 1073610752 ? $2 >>> 0 <= 0 ? 0 : 1 : 0) {
   break label$1;
  }
  $6 = ($0 | $2) != 0 | ($3 ^ 1073610752 | $1) != 0;
 }
 return $6;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$4 >> 2] = $2;
 $2 = 2;
 $0 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5 + 12 | 0, 0, HEAP32[$0 + 8 >> 2]);
 label$1 : {
  if ($0 + 1 >>> 0 < 2) {
   break label$1;
  }
  $2 = 1;
  $1 = $0 + -1 | 0;
  if ($1 >>> 0 > $3 - HEAP32[$4 >> 2] >>> 0) {
   break label$1;
  }
  $2 = $5 + 12 | 0;
  while (1) {
   if ($1) {
    $0 = HEAPU8[$2 | 0];
    $3 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = $0;
    $1 = $1 + -1 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $2 = 0;
 }
 global$0 = $5 + 16 | 0;
 return $2 | 0;
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 HEAP8[$0 + 53 | 0] = 1;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] != ($2 | 0)) {
   break label$1;
  }
  HEAP8[$0 + 52 | 0] = 1;
  $2 = HEAP32[$0 + 16 >> 2];
  if (!$2) {
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 24 >> 2] = $3;
   HEAP32[$0 + 16 >> 2] = $1;
   if (($3 | 0) != 1 | HEAP32[$0 + 48 >> 2] != 1) {
    break label$1;
   }
   HEAP8[$0 + 54 | 0] = 1;
   return;
  }
  if (($1 | 0) == ($2 | 0)) {
   $2 = HEAP32[$0 + 24 >> 2];
   if (($2 | 0) == 2) {
    HEAP32[$0 + 24 >> 2] = $3;
    $2 = $3;
   }
   if (HEAP32[$0 + 48 >> 2] != 1 | ($2 | 0) != 1) {
    break label$1;
   }
   HEAP8[$0 + 54 | 0] = 1;
   return;
  }
  HEAP8[$0 + 54 | 0] = 1;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
 }
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
 label$1 : {
  if (!HEAPU8[$3 | 0]) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
  std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($2, $1);
  if (HEAP32[$2 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | 1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
 global$0 = $2 + 16 | 0;
}
function SlvCube___SlvCube_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 std____2____tree_int_2c_20std____2__less_int__2c_20std____2__allocator_int__20___destroy_28std____2____tree_node_int_2c_20void____29($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
 $1 = HEAP32[$0 + 40 >> 2];
 if ($1) {
  HEAP32[$0 + 44 >> 2] = $1;
  dlfree($1);
 }
 $2 = HEAP32[$0 + 24 >> 2];
 if ($2) {
  $1 = $2;
  $3 = HEAP32[$0 + 28 >> 2];
  $4 = $1;
  label$3 : {
   if (($1 | 0) == ($3 | 0)) {
    break label$3;
   }
   while (1) {
    $3 = Mesh___Mesh_28_29($3 + -204 | 0);
    if (($2 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   $4 = HEAP32[$0 + 24 >> 2];
  }
  $1 = $4;
  HEAP32[$0 + 28 >> 2] = $2;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 12 >> 2];
 if ($1) {
  HEAP32[$0 + 16 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  HEAP32[$0 + 4 >> 2] = $1;
  dlfree($1);
 }
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
 if (!(HEAPU8[$3 | 0] & 4)) {
  HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : ($1 | 0) < 100 ? $1 + 1900 | 0 : $1) + -1900;
 }
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 3);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 365 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!($1 + -1 >>> 0 > 11 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 12 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1 + -1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function strtox_1($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = global$0 - 160 | 0;
 global$0 = $4;
 memset($4 + 16 | 0, 0, 144);
 HEAP32[$4 + 92 >> 2] = -1;
 HEAP32[$4 + 60 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = -1;
 HEAP32[$4 + 20 >> 2] = $1;
 __shlim($4 + 16 | 0, 0, 0);
 __floatscan($4, $4 + 16 | 0, $3, 1);
 $3 = HEAP32[$4 + 8 >> 2];
 $6 = HEAP32[$4 + 12 >> 2];
 $7 = HEAP32[$4 >> 2];
 $8 = HEAP32[$4 + 4 >> 2];
 if ($2) {
  $9 = $2;
  $5 = $1;
  $1 = HEAP32[$4 + 20 >> 2] - HEAP32[$4 + 24 >> 2] | 0;
  $10 = $1;
  $2 = $1 + HEAP32[$4 + 136 >> 2] | 0;
  $1 = HEAP32[$4 + 140 >> 2] + ($1 >> 31) | 0;
  $1 = $2 >>> 0 < $10 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$9 >> 2] = !($1 | $2) ? $5 : $5 + $2 | 0;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $6;
 global$0 = $4 + 160 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!($1 + -1 >>> 0 > 30 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 1);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 6 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 60 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 59 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 & 2048) {
  HEAP8[$0 | 0] = 43;
  $0 = $0 + 1 | 0;
 }
 if ($2 & 1024) {
  HEAP8[$0 | 0] = 35;
  $0 = $0 + 1 | 0;
 }
 $3 = $2 & 260;
 if (($3 | 0) != 260) {
  HEAP8[$0 | 0] = 10798;
  HEAP8[$0 + 1 | 0] = 42;
  $5 = 1;
  $0 = $0 + 2 | 0;
 }
 $2 = $2 & 16384;
 while (1) {
  $4 = HEAPU8[$1 | 0];
  if ($4) {
   HEAP8[$0 | 0] = $4;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 label$6 : {
  label$7 : {
   if (($3 | 0) != 256) {
    if (($3 | 0) != 4) {
     break label$7;
    }
    $1 = $2 ? 70 : 102;
    break label$6;
   }
   $1 = $2 ? 69 : 101;
   break label$6;
  }
  $1 = $2 ? 65 : 97;
  if (($3 | 0) == 260) {
   break label$6;
  }
  $1 = $2 ? 71 : 103;
 }
 HEAP8[$0 | 0] = $1;
 return $5;
}
function PicBucket__createSingleton_28_29() {
 var $0 = 0, $1 = 0, $2 = 0;
 $1 = HEAP32[11988];
 if (!$1) {
  $1 = operator_20new_28unsigned_20long_29(92);
  HEAP32[$1 >> 2] = -1;
  $2 = $1 + 68 | 0;
  $0 = $2;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 1234;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = $2;
  HEAP32[11988] = $0;
 }
 return $1;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
 $2 = HEAP32[$3 >> 2];
 if (!(($1 | 0) > 23 | $2 & 4)) {
  HEAP32[$0 >> 2] = $1;
  return;
 }
 HEAP32[$3 >> 2] = $2 | 4;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($0) {
 var $1 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 4 >> 2];
  if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 24 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 16 >> 2]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 4 >> 2] & 8192)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 24 >> 2];
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1) | 0) != -1) {
   break label$1;
  }
  $0 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | 1);
 }
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const();
 if ($1 >>> 0 >= $0 >>> 0) {
  $0 = HEAP32[13264] - HEAP32[13260] >> 2;
  if ($0 >>> 0 < $1 >>> 1 >>> 0) {
   HEAP32[$2 + 8 >> 2] = $0 << 1;
   $0 = global$0 - 16 | 0;
   global$0 = $0;
   global$0 = $0 + 16 | 0;
   $0 = $2 + 12 | 0;
   $1 = $2 + 8 | 0;
   $1 = HEAP32[(HEAPU32[$1 >> 2] < HEAPU32[$0 >> 2] ? $0 : $1) >> 2];
  }
  global$0 = $2 + 16 | 0;
  return $1;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function PicGroupDef___PicGroupDef_28_29($0) {
 var $1 = 0, $2 = 0;
 if (HEAP8[$0 + 147 | 0] <= -1) {
  dlfree(HEAP32[$0 + 136 >> 2]);
 }
 if (HEAP8[$0 + 131 | 0] <= -1) {
  dlfree(HEAP32[$0 + 120 >> 2]);
 }
 if (HEAP8[$0 + 119 | 0] <= -1) {
  dlfree(HEAP32[$0 + 108 >> 2]);
 }
 if (HEAP8[$0 + 107 | 0] <= -1) {
  dlfree(HEAP32[$0 + 96 >> 2]);
 }
 if (HEAP8[$0 + 83 | 0] <= -1) {
  dlfree(HEAP32[$0 + 72 >> 2]);
 }
 if (HEAP8[$0 + 35 | 0] <= -1) {
  dlfree(HEAP32[$0 + 24 >> 2]);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 label$7 : {
  if (!$1) {
   break label$7;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$7;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  HEAP32[$0 + 4 >> 2] = $1;
  dlfree($1);
 }
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
 if (!(HEAPU8[$3 | 0] & 4)) {
  HEAP32[$0 >> 2] = $1 + -1900;
 }
}
function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___20emscripten__internal__MemberAccess_JsGrp_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getWire_JsGrp__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20JsGrp____20const__2c_20JsGrp_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $1 = HEAP32[$0 >> 2] + $1 | 0;
 $0 = HEAP8[$1 + 11 | 0];
 label$1 : {
  if (($0 | 0) <= -1) {
   $0 = HEAP32[$1 + 4 >> 2];
   $2 = dlmalloc($0 + 4 | 0);
   HEAP32[$2 >> 2] = $0;
   $1 = HEAP32[$1 >> 2];
   break label$1;
  }
  $0 = $0 & 255;
  $2 = dlmalloc($0 + 4 | 0);
  HEAP32[$2 >> 2] = $0;
 }
 memcpy($2 + 4 | 0, $1, $0);
 return $2 | 0;
}
function std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if ($0) {
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) != ($2 | 0)) {
   while (1) {
    $3 = HEAP32[$1 >> 2];
    if ($3) {
     dlfree(SlvCube___SlvCube_28_29($3));
     $2 = HEAP32[$0 + 12 >> 2];
    }
    $1 = $1 + 4 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
   $1 = HEAP32[$0 + 8 >> 2];
  }
  HEAP32[$0 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = $1;
  label$5 : {
   if (!HEAPU8[$0 + 20 | 0]) {
    break label$5;
   }
   HEAP8[$0 + 20 | 0] = 0;
   $2 = HEAP32[$0 + 4 >> 2];
   if (!$2) {
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, 0);
   $1 = HEAP32[$0 + 8 >> 2];
  }
  if ($1) {
   HEAP32[$0 + 12 >> 2] = $1;
   dlfree($1);
  }
  dlfree($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAPU8[$2 | 0], HEAP32[$3 >> 2]);
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = 0;
 $5 = $0 + 12 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 53072;
 if ($1) {
  $4 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], $1);
 }
 HEAP32[$0 >> 2] = $4;
 $2 = ($2 << 2) + $4 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = ($1 << 2) + $4;
 global$0 = $3 + 16 | 0;
 return $0;
}
function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  label$2 : {
   if (!(HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 16 >> 2])) {
    if (HEAP32[HEAP32[$3 + 24 >> 2] >> 2] == HEAP32[HEAP32[$3 + 8 >> 2] >> 2]) {
     break label$2;
    }
    $0 = 0;
   } else {
    $0 = 1;
   }
   global$0 = $3 + 32 | 0;
   return $0;
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 4;
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 4;
  continue;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $1 = HEAP32[$0 + 4 >> 2];
 $28anonymous_20namespace_29__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 40);
 $1 = $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($2, HEAP32[$1 + 8 >> 2]);
 $3 = HEAP32[$0 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $3);
 if (HEAPU8[$1 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $3);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 41);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 36148);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $1 = std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 global$0 = $0 + 16 | 0;
 return $1 | 0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $1 = std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 global$0 = $0 + 16 | 0;
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAPU8[$2 | 0], HEAPU8[$3 | 0]);
}
function CubeDocBase__DocState___DocState_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 HEAP32[$0 + 24 >> 2] = 0;
 if ($1) {
  Shape___Shape_28_29($1 + 375140 | 0);
  $2 = HEAP32[$1 + 28 >> 2];
  if ($2) {
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = HEAP32[$0 + 20 >> 2];
 HEAP32[$0 + 20 >> 2] = 0;
 if ($1) {
  Solutions__clear_28int_29($1);
  $2 = HEAP32[$1 + 8 >> 2];
  if ($2) {
   HEAP32[$1 + 12 >> 2] = $2;
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 label$5 : {
  if (!$1) {
   break label$5;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$5;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  HEAP32[$0 + 4 >> 2] = $1;
  dlfree($1);
 }
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $1 = std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 global$0 = $0 + 16 | 0;
 return $1 | 0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $1 = std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 global$0 = $0 + 16 | 0;
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  $1 = HEAP32[$0 >> 2];
  if (!(HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2])) {
   $0 = 1;
   break label$1;
  }
  $0 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$1 >> 2];
  if ($2 - $1 >>> 0 > 0) {
   $1 = HEAP8[$1 | 0];
  } else {
   $1 = 0;
  }
  $1 = ($1 << 24 >> 24) + -46 | 0;
  if (($1 & 255) >>> 0 > 49) {
   break label$1;
  }
  $1 = $1 & 255;
  $0 = $1 & 31;
  return (32 <= ($1 & 63) >>> 0 ? 131072 >>> $0 : ((1 << $0) - 1 & 131072) << 32 - $0 | 8388609 >>> $0) & 1;
 }
 return $0;
}
function ModelControlBase__clearChoise_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP8[$0 + 717 | 0] = 0;
 $3 = HEAPU8[$0 + 1992 | 0];
 if (!(($3 | 0) == HEAPU8[$0 + 718 | 0] ? HEAP32[$0 + 720 >> 2] == -1 : 0)) {
  $4 = $0 + 700 | 0;
  HEAP32[$0 + 720 >> 2] = -1;
  HEAP8[$0 + 718 | 0] = $3;
  BuildWorld__clean_28BuildWorld__ECleanMethod_29(HEAP32[HEAP32[$0 + 712 >> 2] + 128 >> 2], 2);
  $1 = HEAP32[$0 + 712 >> 2];
  $2 = HEAP32[$1 + 92 >> 2];
  $1 = HEAP32[$1 + 96 >> 2] - $2 | 0;
  if (($1 | 0) >= 1) {
   $5 = $2;
   $2 = $1 >>> 2;
   memset($5, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
  }
  HEAP32[$0 + 732 >> 2] = -1;
  HEAP32[$0 + 724 >> 2] = -1;
  HEAP32[$0 + 728 >> 2] = -1;
  BuildControlBase__makeBuffers_28_29($4);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 700 >> 2] + 44 >> 2]]($4, -1, $3);
 }
}
function std____2__vector_float_2c_20std____2__allocator_float__20___shrink_to_fit_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 >> 2];
 $3 = HEAP32[$0 + 4 >> 2] - $2 | 0;
 $1 = $3 >> 2;
 label$1 : {
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] - $2 >> 2 >>> 0 <= $1 >>> 0) {
    break label$2;
   }
   label$3 : {
    if (!$3) {
     $1 = $1 << 2;
     break label$3;
    }
    if ($1 >>> 0 >= 1073741824) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
    $1 = $4 + ($1 << 2) | 0;
    if (($3 | 0) < 1) {
     break label$3;
    }
    memcpy($4, $2, $3);
   }
   HEAP32[$0 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1;
   if (!$2) {
    break label$2;
   }
   dlfree($2);
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($3, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 5 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 7 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function std____2__vector_Vec4_2c_20std____2__allocator_Vec4__20___shrink_to_fit_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 >> 2];
 $3 = HEAP32[$0 + 4 >> 2] - $2 | 0;
 $1 = $3 >> 4;
 label$1 : {
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] - $2 >> 4 >>> 0 <= $1 >>> 0) {
    break label$2;
   }
   label$3 : {
    if (!$3) {
     $1 = $1 << 4;
     break label$3;
    }
    if ($1 >>> 0 >= 268435456) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
    $1 = $4 + ($1 << 4) | 0;
    if (($3 | 0) < 1) {
     break label$3;
    }
    memcpy($4, $2, $3);
   }
   HEAP32[$0 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1;
   if (!$2) {
    break label$2;
   }
   dlfree($2);
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 6 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $6 + 132;
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $6 + 32 | 0, $6 + 28 | 0, $3, $4, $5);
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = $6 + 32;
 $0 = std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($1, $6 + 12 | 0, HEAP32[$2 >> 2] - $1 >> 2, $6 + 16 | 0, HEAP32[$0 >> 2]);
 if (($0 | 0) == -1) {
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
 HEAP32[$2 >> 2] = ($0 << 2) + $1;
 global$0 = $6 + 144 | 0;
}
function std____2__allocator_CubeDocBase__DocState___destroy_28CubeDocBase__DocState__29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 HEAP32[$0 + 24 >> 2] = 0;
 if ($1) {
  Shape___Shape_28_29($1 + 375140 | 0);
  $2 = HEAP32[$1 + 28 >> 2];
  if ($2) {
   dlfree($2);
  }
  dlfree($1);
 }
 $1 = HEAP32[$0 + 20 >> 2];
 HEAP32[$0 + 20 >> 2] = 0;
 if ($1) {
  std____2__default_delete_Solutions___operator_28_29_28Solutions__29_20const($1);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 label$4 : {
  if (!$1) {
   break label$4;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2 + -1;
  if ($2) {
   break label$4;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
  std____2____shared_weak_count____release_weak_28_29($1);
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  HEAP32[$0 + 4 >> 2] = $1;
  dlfree($1);
 }
}
function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  label$2 : {
   if (!(HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 16 >> 2])) {
    if (HEAPU8[HEAP32[$3 + 24 >> 2]] == HEAPU8[HEAP32[$3 + 8 >> 2]]) {
     break label$2;
    }
    $0 = 0;
   } else {
    $0 = 1;
   }
   global$0 = $3 + 32 | 0;
   return $0;
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
  continue;
 }
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
 if (!(HEAPU8[$3 | 0] & 4)) {
  HEAP32[$0 >> 2] = $1 + -1900;
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $2 = $0;
 label$1 : {
  if (HEAP8[$1 + 11 | 0] >= 0) {
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 global$0 = $3 + 16 | 0;
}
function GlTexture__init_28unsigned_20int_2c_20Vec2i_20const__2c_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20void_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 if (HEAP32[$0 >> 2] != -1) {
  glDeleteTextures(1, $0 | 0);
  HEAP32[$0 + 16 >> 2] = -1;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 3553;
 glGenTextures(1, $0 | 0);
 glBindTexture(3553, HEAP32[$0 >> 2]);
 glTexParameteri(3553, 10241, 9729);
 glTexParameteri(3553, 10240, 9729);
 glTexParameteri(3553, 10242, 33071);
 glTexParameteri(3553, 10243, 33071);
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4, $5) {
 HEAP8[$0 + 7 | 0] = 0;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 0;
 HEAP8[$0 + 4 | 0] = 15;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 42520;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP8[$0 + 24 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
 $0 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 44 >> 2];
 $2 = HEAP32[$0 + 24 >> 2];
 if ($3 >>> 0 < $2 >>> 0) {
  HEAP32[$0 + 44 >> 2] = $2;
  $3 = $2;
 }
 $2 = HEAP32[$0 + 12 >> 2];
 $4 = -1;
 label$2 : {
  if (HEAPU32[$0 + 8 >> 2] >= $2 >>> 0) {
   break label$2;
  }
  if (($1 | 0) == -1) {
   HEAP32[$0 + 16 >> 2] = $3;
   HEAP32[$0 + 12 >> 2] = $2 + -1;
   return 0;
  }
  if (!(HEAPU8[$0 + 48 | 0] & 16)) {
   $4 = -1;
   if (HEAPU8[$2 + -1 | 0] != ($1 & 255)) {
    break label$2;
   }
  }
  HEAP32[$0 + 16 >> 2] = $3;
  $3 = $0;
  $0 = $2 + -1 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP8[$0 | 0] = $1;
  $4 = $1;
 }
 return $4 | 0;
}
function unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $1 = $1 - $0 >> 2;
 while (1) {
  if ($1) {
   HEAP32[$3 + 12 >> 2] = $0;
   $4 = $1 >>> 1;
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + ($4 << 2);
   if (HEAPU32[HEAP32[$3 + 12 >> 2] >> 2] < HEAPU32[$2 >> 2]) {
    $0 = HEAP32[$3 + 12 >> 2] + 4 | 0;
    HEAP32[$3 + 12 >> 2] = $0;
    $1 = ($4 ^ -1) + $1 | 0;
   } else {
    $1 = $4;
   }
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__chrono____duration_cast_std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__2c_20std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201000000000ll__20__2c_20std____2__ratio_1000000000ll_2c_201ll__2c_20false_2c_20true___operator_28_29_28std____2__chrono__duration_long_20long_2c_20std____2__ratio_1ll_2c_201ll__20__20const__29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 >> 2] = __wasm_i64_mul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], 1e9, 0);
 HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 $0 = HEAP32[$1 + 4 >> 2];
 $2 = $1 + 8 | 0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 global$0 = $1 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$2 + 4 >> 2];
 return HEAP32[$2 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__SpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 42504);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 41);
 global$0 = $2 + 16 | 0;
}
function BuildControlBase__clearChoise_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 HEAP8[$0 + 17 | 0] = 0;
 $3 = HEAPU8[$0 + 1292 | 0];
 if (!(($3 | 0) == HEAPU8[$0 + 18 | 0] ? HEAP32[$0 + 20 >> 2] == -1 : 0)) {
  HEAP8[$0 + 18 | 0] = $3;
  HEAP32[$0 + 20 >> 2] = -1;
  BuildWorld__clean_28BuildWorld__ECleanMethod_29(HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2], 2);
  $1 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$1 + 92 >> 2];
  $1 = HEAP32[$1 + 96 >> 2] - $2 | 0;
  if (($1 | 0) >= 1) {
   $4 = $2;
   $2 = $1 >>> 2;
   memset($4, 0, ($2 - (($2 | 0) != 0) << 2) + 4 | 0);
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  HEAP32[$0 + 32 >> 2] = -1;
  BuildControlBase__makeBuffers_28_29($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, -1, $3);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__ConversionOperatorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 41752);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
 global$0 = $2 + 16 | 0;
}
function RunContext__notifyNotEnoughPieces_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 if ((emscripten_asm_const_iii(1128, 1076, 0) | 0) <= -1) {
  complain_28char_20const__29(1151);
 }
 $1 = HEAP32[11720];
 HEAP32[$1 + 132 >> 2] = -1;
 Solutions__clear_28int_29(HEAP32[$1 + 124 >> 2]);
 $1 = HEAP32[11720];
 $2 = HEAP32[$1 + 132 >> 2];
 $3 = $0;
 $1 = HEAP32[$1 + 124 >> 2];
 if ($1) {
  $1 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] >> 2;
 } else {
  $1 = 0;
 }
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $2;
 emscripten_asm_const_iii(1077, 1093, $0 | 0) | 0;
 $1 = HEAP32[11720];
 if (!HEAPU8[$1 + 2612 | 0]) {
  HEAP8[$1 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $0 + 16 | 0;
}
function BuildProgram___BuildProgram_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 15328;
 HEAP32[$0 + 172 >> 2] = 2816;
 if (HEAP8[$0 + 191 | 0] <= -1) {
  dlfree(HEAP32[$0 + 180 >> 2]);
 }
 HEAP32[$0 + 152 >> 2] = 2816;
 if (HEAP8[$0 + 171 | 0] <= -1) {
  dlfree(HEAP32[$0 + 160 >> 2]);
 }
 HEAP32[$0 >> 2] = 2852;
 HEAP32[$0 + 132 >> 2] = 2816;
 if (HEAP8[$0 + 151 | 0] <= -1) {
  dlfree(HEAP32[$0 + 140 >> 2]);
 }
 HEAP32[$0 + 112 >> 2] = 2816;
 if (HEAP8[$0 + 131 | 0] <= -1) {
  dlfree(HEAP32[$0 + 120 >> 2]);
 }
 HEAP32[$0 + 92 >> 2] = 2816;
 if (HEAP8[$0 + 111 | 0] <= -1) {
  dlfree(HEAP32[$0 + 100 >> 2]);
 }
 HEAP32[$0 + 72 >> 2] = 2816;
 if (HEAP8[$0 + 91 | 0] <= -1) {
  dlfree(HEAP32[$0 + 80 >> 2]);
 }
 ShaderProgram___ShaderProgram_28_29($0);
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, $1);
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($0, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function vsnprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 160 | 0;
 global$0 = $4;
 memcpy($4 + 8 | 0, 17784, 144);
 label$1 : {
  label$2 : {
   if ($1 + -1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$2;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   HEAP32[$4 + 52 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $0;
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $0 + $1 | 0;
   HEAP32[$4 + 36 >> 2] = $0;
   HEAP32[$4 + 24 >> 2] = $0;
   $0 = vfprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$1;
   }
   $1 = HEAP32[$4 + 28 >> 2];
   HEAP8[$1 - (($1 | 0) == HEAP32[$4 + 24 >> 2]) | 0] = 0;
   break label$1;
  }
  HEAP32[12002] = 61;
  $0 = -1;
 }
 global$0 = $4 + 160 | 0;
 return $0;
}
function ModelControlBase__restartSolve_28bool_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 8 >> 2];
 $4 = HEAP32[$3 + 88 >> 2];
 if (!(!$4 | !HEAPU8[$4 + 32 | 0])) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3);
 }
 $3 = HEAP32[$0 + 8 >> 2];
 $4 = 0;
 label$2 : {
  if (!$1) {
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  $3 = HEAP32[$0 + 8 >> 2];
  $0 = HEAP32[$3 + 124 >> 2];
  if (!$0) {
   break label$2;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  if (($1 | 0) == ($0 | 0)) {
   break label$2;
  }
  $1 = HEAP32[$3 + 132 >> 2];
  if (($1 | 0) == -1) {
   break label$2;
  }
  $4 = HEAP32[$0 + ($1 << 2) >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $4, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__GlobalQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 51;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 39036;
 $6 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $6;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP8[$0 + 29 | 0] = $5;
 HEAP8[$0 + 28 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = $1;
 return $0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 while (1) {
  label$2 : {
   if (($2 | 0) == ($3 | 0) | $6 >>> 0 >= $4 >>> 0) {
    break label$2;
   }
   $5 = std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($2, $3 - $2 | 0, $1, HEAP32[$0 + 8 >> 2]);
   $7 = $5 + 2 | 0;
   if ($7 >>> 0 <= 2) {
    $5 = 1;
    if ($7 - 2) {
     break label$2;
    }
   }
   $6 = $6 + 1 | 0;
   $8 = $5 + $8 | 0;
   $2 = $2 + $5 | 0;
   continue;
  }
  break;
 }
 return $8 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($3, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 38112);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 34996);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 41520);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 38232);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 39712);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($3 + 8 | 0, $0 + 16 | 0, 1);
  $2 = HEAP32[$0 + 12 >> 2];
  $0 = HEAPU8[$2 + 5 | 0];
  label$2 : {
   if (($0 | 0) != 2) {
    $2 = !$0;
    break label$2;
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, $1) | 0;
  }
  if (HEAPU8[$4 + 5 | 0]) {
   HEAP8[HEAP32[$4 >> 2]] = HEAPU8[$4 + 4 | 0];
  }
 }
 global$0 = $3 + 16 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($3 + 8 | 0, $0 + 16 | 0, 1);
  $2 = HEAP32[$0 + 12 >> 2];
  $0 = HEAPU8[$2 + 7 | 0];
  label$2 : {
   if (($0 | 0) != 2) {
    $2 = !$0;
    break label$2;
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1) | 0;
  }
  if (HEAPU8[$4 + 5 | 0]) {
   HEAP8[HEAP32[$4 >> 2]] = HEAPU8[$4 + 4 | 0];
  }
 }
 global$0 = $3 + 16 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($3 + 8 | 0, $0 + 16 | 0, 1);
  $2 = HEAP32[$0 + 12 >> 2];
  $0 = HEAPU8[$2 + 6 | 0];
  label$2 : {
   if (($0 | 0) != 2) {
    $2 = !$0;
    break label$2;
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2, $1) | 0;
  }
  if (HEAPU8[$4 + 5 | 0]) {
   HEAP8[HEAP32[$4 >> 2]] = HEAPU8[$4 + 4 | 0];
  }
 }
 global$0 = $3 + 16 | 0;
 return $2 | 0;
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29(50924);
 HEAP32[12741] = 50980;
 HEAP32[12739] = $0;
 HEAP32[12731] = 22652;
 HEAP8[50976] = 0;
 HEAP32[12743] = -1;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 FUNCTION_TABLE[HEAP32[HEAP32[12731] + 8 >> 2]](50924, $1 + 8 | 0);
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $1 + 16 | 0;
}
function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $1 = HEAP32[$1 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 HEAP32[$2 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $3 + 16 | 0;
}
function Cube___Cube_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 72 >> 2];
 if ($1) {
  HEAP32[$0 + 76 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  $4 = $0 - -64 | 0;
  $3 = HEAP32[$4 >> 2];
  $2 = $1;
  label$4 : {
   if (($1 | 0) == ($3 | 0)) {
    break label$4;
   }
   while (1) {
    $2 = HEAP32[$3 + -12 >> 2];
    if ($2) {
     HEAP32[$3 + -8 >> 2] = $2;
     dlfree($2);
    }
    $2 = HEAP32[$3 + -32 >> 2];
    if ($2) {
     dlfree($2);
    }
    $3 = $3 + -52 | 0;
    if (($1 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 60 >> 2];
  }
  HEAP32[$4 >> 2] = $1;
  dlfree($2);
 }
 return $0;
}
function SolveContext__init_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP8[$0 + 48 | 0] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 $1 = HEAP32[$0 + 56 >> 2];
 HEAP32[$0 + 56 >> 2] = 0;
 if ($1) {
  dlfree(SlvCube___SlvCube_28_29($1));
 }
 $3 = operator_20new_28unsigned_20long_29(84);
 $1 = Cube__Cube_28Shape_20const__2c_20PicsSet_20const__2c_20EngineConf_20const__29($3, HEAP32[$0 + 16 >> 2], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 20 >> 2]);
 $2 = $0 - -64 | 0;
 $4 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = $3;
 if ($4) {
  dlfree(Cube___Cube_28_29($4));
  $1 = HEAP32[$2 >> 2];
 }
 HEAP8[$0 + 32 | 0] = 1;
 Cube__initPuttgr_28SolveContext__2c_20SlvCube__29($1, $0, HEAP32[$0 + 24 >> 2]);
}
function std____2__vector_unsigned_20short_2c_20std____2__allocator_unsigned_20short__20___shrink_to_fit_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] - $2 | 0;
 $4 = $1 >> 1;
 label$1 : {
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] - $2 >> 1 >>> 0 <= $4 >>> 0) {
    break label$2;
   }
   if ($1) {
    if (($1 | 0) <= -1) {
     break label$1;
    }
    $3 = operator_20new_28unsigned_20long_29($1);
    memcpy($3, $2, $1);
   }
   HEAP32[$0 >> 2] = $3;
   $1 = ($4 << 1) + $3 | 0;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1;
   if (!$2) {
    break label$2;
   }
   dlfree($2);
  }
  return;
 }
 std____2____throw_length_error_28char_20const__29(15792);
 abort();
}
function std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29(50860);
 HEAP32[12725] = 50916;
 HEAP32[12723] = $0;
 HEAP32[12715] = 22512;
 HEAP8[50912] = 0;
 HEAP32[12727] = -1;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 FUNCTION_TABLE[HEAP32[HEAP32[12715] + 8 >> 2]](50860, $1 + 8 | 0);
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $1 + 16 | 0;
}
function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $1 = HEAP32[$1 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
 $1 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($3 + 8 | 0);
 HEAP8[$2 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $3 + 16 | 0;
}
function wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = HEAP32[$0 + 28 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($2 + 8 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, 27632, 27658, $1) | 0;
 $0 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $3;
 if (($3 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function std____2____stdoutbuf_char___sync_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $5 = $1 + 16 | 0;
 label$1 : {
  while (1) {
   $2 = HEAP32[$0 + 36 >> 2];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$0 + 40 >> 2], $1 + 8 | 0, $5, $1 + 4 | 0) | 0;
   $2 = -1;
   $4 = HEAP32[$1 + 4 >> 2] - ($1 + 8 | 0) | 0;
   if (($4 | 0) != (fwrite($1 + 8 | 0, 1, $4, HEAP32[$0 + 32 >> 2]) | 0)) {
    break label$1;
   }
   $3 = $3 + -1 | 0;
   if ($3 >>> 0 <= 1) {
    if ($3 - 1) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $2 = fflush(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
 }
 global$0 = $1 + 16 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, $1);
}
function std____2____tree_LineAdder__SortedPair_2c_20std____2__less_LineAdder__SortedPair__2c_20std____2__allocator_LineAdder__SortedPair__20___destroy_28std____2____tree_node_LineAdder__SortedPair_2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_LineAdder__SortedPair_2c_20std____2__less_LineAdder__SortedPair__2c_20std____2__allocator_LineAdder__SortedPair__20___destroy_28std____2____tree_node_LineAdder__SortedPair_2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_LineAdder__SortedPair_2c_20std____2__less_LineAdder__SortedPair__2c_20std____2__allocator_LineAdder__SortedPair__20___destroy_28std____2____tree_node_LineAdder__SortedPair_2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  dlfree($1);
 }
}
function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    break label$1;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   $1 = $2;
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$2 + 1 | 0];
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function BaseGLWidget__progress_28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = $0;
 $3 = HEAP32[$0 + 328 >> 2];
 $0 = HEAP32[$0 + 324 >> 2];
 if (($3 | 0) != ($0 | 0)) {
  while (1) {
   $3 = $0 + 4 | 0;
   $2 = HEAP32[$0 >> 2];
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, $1) | 0;
   label$3 : {
    if (!$5) {
     $2 = HEAP32[$4 + 328 >> 2] - $3 | 0;
     $7 = $2 >> 2;
     if ($2) {
      memmove($0, $3, $2);
     }
     $2 = ($7 << 2) + $0 | 0;
     HEAP32[$4 + 328 >> 2] = $2;
     break label$3;
    }
    $2 = HEAP32[$4 + 328 >> 2];
    $0 = $3;
   }
   $6 = $6 | $5;
   if (($0 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $6 & 1;
}
function mouseDblClick_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = HEAP32[HEAP32[11720] + 464 >> 2];
 $5 = 0;
 label$1 : {
  if (!$4) {
   break label$1;
  }
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, ($0 | 0) != 0, $1, $2) | 0;
 }
 $0 = $5;
 HEAP32[$3 >> 2] = HEAPU8[HEAP32[11720] + 2544 | 0];
 emscripten_asm_const_iii(1096, 1116, $3 | 0) | 0;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  $0 = HEAP32[11720];
  if (HEAPU8[$0 + 2612 | 0]) {
   break label$2;
  }
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $3 + 16 | 0;
}
function std____2__init_wam_pm_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[52696] != 0) | HEAP8[52696] & 1)) {
  $0 = 52672;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 52696) {
    continue;
   }
   break;
  }
  HEAP32[13174] = 0;
  HEAP32[13174] = HEAP32[13174] | 1;
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52672, 33688);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(52684, 33700);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29() {
 var $0 = 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const() >>> 0 < 28) {
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 $0 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(53072, 28);
 HEAP32[13260] = $0;
 HEAP32[13261] = $0;
 HEAP32[13264] = $0 + 112;
}
function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (($1 | 0) == 1 & $0 >>> 0 < 0 | $1 >>> 0 < 1) {
   $3 = $0;
   break label$1;
  }
  while (1) {
   $2 = $2 + -1 | 0;
   $3 = __wasm_i64_udiv($0, $1, 10);
   $4 = i64toi32_i32$HIGH_BITS;
   $5 = $4;
   $4 = __wasm_i64_mul($3, $4, 10, 0);
   HEAP8[$2 | 0] = $0 - $4 | 48;
   $4 = ($1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1 >>> 0 > 9;
   $0 = $3;
   $1 = $5;
   if ($4) {
    continue;
   }
   break;
  }
 }
 if ($3) {
  while (1) {
   $2 = $2 + -1 | 0;
   $0 = ($3 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $3 - Math_imul($0, 10) | 48;
   $1 = $3 >>> 0 > 9;
   $3 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__enable_if__28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28__28__has_construct_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_backward_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20bool__2c_20bool__2c_20bool___29($0, $1, $2) {
 var $3 = 0;
 $3 = $2;
 $1 = $1 - $0 | 0;
 $2 = HEAP32[$2 >> 2] - $1 | 0;
 HEAP32[$3 >> 2] = $2;
 if (($1 | 0) >= 1) {
  memcpy($2, $0, $1);
 }
}
function float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   $5 = HEAP32[12002];
   HEAP32[12002] = 0;
   $6 = $3 + 12 | 0;
   std____2____cloc_28_29();
   $4 = strtof($0, $6);
   $0 = HEAP32[12002];
   if (!$0) {
    HEAP32[12002] = $5;
   }
   if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
    $7 = $4;
    if (($0 | 0) != 68) {
     break label$1;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $4 = $7;
   break label$1;
  }
  HEAP32[$2 >> 2] = 4;
 }
 global$0 = $3 + 16 | 0;
 return $4;
}
function CubeDocBase__callGenerate_28Shape__2c_20bool_29($0, $1) {
 var $2 = 0;
 $1 = Shape__generate_28BuildWorld_20const__29($1, HEAP32[$0 + 128 >> 2]);
 $0 = !$1;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $0 = 0;
  $2 = $1 + -1 | 0;
  if ($2 >>> 0 > 3) {
   if (($1 | 0) != 255) {
    break label$1;
   }
   complain_28char_20const__29(6311);
   return 0;
  }
  label$3 : {
   switch ($2 - 1 | 0) {
   default:
    complain_28char_20const__29(6082);
    return 0;
   case 0:
    complain_28char_20const__29(6160);
    return 0;
   case 1:
    complain_28char_20const__29(6270);
    return 0;
   case 2:
    break label$3;
   }
  }
  complain_28char_20const__29(6371);
 }
 return $0;
}
function std____2__vector_std____2__vector_int_2c_20std____2__allocator_int__20__2c_20std____2__allocator_std____2__vector_int_2c_20std____2__allocator_int__20__20__20___vector_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 label$1 : {
  if ($1) {
   if ($1 >>> 0 >= 357913942) {
    break label$1;
   }
   $1 = Math_imul($1, 12);
   $2 = operator_20new_28unsigned_20long_29($1);
   HEAP32[$0 >> 2] = $2;
   $3 = $1 + $2 | 0;
   HEAP32[$0 + 8 >> 2] = $3;
   memset($2, 0, $1);
   HEAP32[$0 + 4 >> 2] = $3;
  }
  return $0;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const();
 abort();
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($3 + 8 | 0, HEAP32[$0 >> 2]);
   $0 = $0 + 4 | 0;
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return HEAP32[$3 + 8 >> 2];
}
function getenv($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = strlen($0);
 label$1 : {
  if (!HEAP32[12804] | !HEAPU8[$0 | 0]) {
   break label$1;
  }
  $1 = __strchrnul($0, 61);
  if (HEAPU8[$1 | 0] == 61 ? $1 : 0) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[12804] >> 2];
  if (!$1) {
   break label$1;
  }
  label$2 : {
   while (1) {
    $3 = strncmp($0, $1, $4);
    $1 = HEAP32[12804];
    if (!$3) {
     $3 = HEAP32[$1 + ($2 << 2) >> 2] + $4 | 0;
     if (HEAPU8[$3 | 0] == 61) {
      break label$2;
     }
    }
    $2 = $2 + 1 | 0;
    $1 = HEAP32[$1 + ($2 << 2) >> 2];
    if ($1) {
     continue;
    }
    break;
   }
   return 0;
  }
  $2 = $3 + 1 | 0;
 }
 return $2;
}
function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 label$1 : {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = HEAP32[$1 >> 2];
    $6 = HEAP32[$3 >> 2];
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($6 | 0) < ($5 | 0)) {
     return 1;
    } else {
     $3 = $3 + 4 | 0;
     $1 = $1 + 4 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($1 | 0) != ($2 | 0);
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 if ($2) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  if (HEAPU8[$2 + 5 | 0] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
  }
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 123);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 125);
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $0 = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($1 + 8 | 0);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, 32) | 0;
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2] + -1 | 0;
 HEAP32[$0 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 }
 global$0 = $1 + 16 | 0;
 return $3;
}
function std____2__init_am_pm_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[52664] != 0) | HEAP8[52664] & 1)) {
  $0 = 52640;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 52664) {
    continue;
   }
   break;
  }
  HEAP32[13166] = 0;
  HEAP32[13166] = HEAP32[13166] | 1;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52640, 33680);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(52652, 33683);
}
function __floatsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $6 = $0;
 $7 = $0;
 label$1 : {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  $2 = $1 >> 31;
  $4 = $2 + $1 ^ $2;
  $2 = Math_clz32($4);
  __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
  $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
  $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $2 = $2 + 1 | 0;
  }
  $5 = $1 & -2147483648 | $2;
  $2 = HEAP32[$3 + 4 >> 2];
  $1 = HEAP32[$3 >> 2];
 }
 HEAP32[$7 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $5;
 global$0 = $3 + 16 | 0;
}
function __emscripten_environ_constructor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0)) {
   break label$1;
  }
  $1 = dlmalloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
  HEAP32[12804] = $1;
  if (!$1) {
   break label$1;
  }
  label$2 : {
   $1 = dlmalloc(HEAP32[$0 + 8 >> 2]);
   if ($1) {
    $2 = HEAP32[12804];
    if ($2) {
     break label$2;
    }
   }
   HEAP32[12804] = 0;
   break label$1;
  }
  HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $2 >> 2] = 0;
  if (!__wasi_environ_get(HEAP32[12804], $1 | 0)) {
   break label$1;
  }
  HEAP32[12804] = 0;
 }
 global$0 = $0 + 16 | 0;
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (($0 | 0) != ($1 | 0)) {
   $5 = HEAP32[12002];
   HEAP32[12002] = 0;
   $6 = $3 + 12 | 0;
   std____2____cloc_28_29();
   $4 = strtod($0, $6);
   $0 = HEAP32[12002];
   if (!$0) {
    HEAP32[12002] = $5;
   }
   if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
    $7 = $4;
    if (($0 | 0) != 68) {
     break label$1;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $4 = $7;
   break label$1;
  }
  HEAP32[$2 >> 2] = 4;
 }
 global$0 = $3 + 16 | 0;
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 35;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 39728;
 return $0;
}
function scalbn($0, $1) {
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   if (($1 | 0) < 2047) {
    $1 = $1 + -1023 | 0;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  if (($1 | 0) > -2045) {
   $1 = $1 + 1022 | 0;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 label$1 : {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = HEAP8[$1 | 0];
    $6 = HEAP8[$3 | 0];
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($6 | 0) < ($5 | 0)) {
     return 1;
    } else {
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($1 | 0) != ($2 | 0);
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 var $2 = 0;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $2 = HEAPU8[$1 + 5 | 0];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = $2;
 HEAP8[$0 + 4 | 0] = 11;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43572;
 return $0;
}
function Solutions__clear_28int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) != ($2 | 0)) {
  while (1) {
   $3 = HEAP32[$1 >> 2];
   if ($3) {
    dlfree(SlvCube___SlvCube_28_29($3));
    $2 = HEAP32[$0 + 12 >> 2];
   }
   $1 = $1 + 4 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
  $1 = HEAP32[$0 + 8 >> 2];
 }
 HEAP32[$0 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = $1;
 label$4 : {
  if (!HEAPU8[$0 + 20 | 0]) {
   break label$4;
  }
  HEAP8[$0 + 20 | 0] = 0;
  $0 = HEAP32[$0 + 4 >> 2];
  if (!$0) {
   break label$4;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 0);
 }
}
function __floatunsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $6 = $0;
 $7 = $0;
 label$1 : {
  if (!$1) {
   $1 = 0;
   $4 = 0;
   break label$1;
  }
  $3 = $1;
  $1 = Math_clz32($1) ^ 31;
  __ashlti3($2, $3, 0, 0, 0, 112 - $1 | 0);
  $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + ($1 + 16383 << 16) | 0;
  $3 = 0 + HEAP32[$2 + 8 >> 2] | 0;
  if ($3 >>> 0 < $5 >>> 0) {
   $1 = $1 + 1 | 0;
  }
  $5 = $3;
  $3 = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$2 >> 2];
 }
 HEAP32[$7 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $3;
 global$0 = $2 + 16 | 0;
}
function virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 64 >> 2] = 3016;
 HEAP32[$0 >> 2] = 2976;
 HEAP32[$0 + 12 >> 2] = 3296;
 HEAP32[$0 + 8 >> 2] = 2996;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  dlfree(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  $2 = HEAPU8[$0 + 5 | 0];
  label$3 : {
   if (($2 | 0) != 2) {
    $0 = !$2;
    break label$3;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1) | 0;
  }
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  $2 = HEAPU8[$0 + 7 | 0];
  label$3 : {
   if (($2 | 0) != 2) {
    $0 = !$2;
    break label$3;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
  }
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 64 >> 2] = 3016;
 HEAP32[$0 >> 2] = 2976;
 HEAP32[$0 + 12 >> 2] = 3296;
 HEAP32[$0 + 8 >> 2] = 2996;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  dlfree(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 dlfree($0);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = HEAP32[13261] - HEAP32[13260] >> 2;
 if ($1 >>> 0 < $0 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0 - $1 | 0);
  return;
 }
 if ($1 >>> 0 > $0 >>> 0) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29(53040, HEAP32[13260] + ($0 << 2) | 0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2, $3) {
 var $4 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 47;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 39156;
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$0 + 24 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  $2 = HEAPU8[$0 + 6 | 0];
  label$3 : {
   if (($2 | 0) != 2) {
    $0 = !$2;
    break label$3;
   }
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
  }
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($3 + 8 | 0, HEAP8[$0 | 0]);
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return HEAP32[$3 + 8 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 35172);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 global$0 = $2 + 16 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($0, $1) {
 var $2 = 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____clear_and_shrink_28_29($0);
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($1);
}
function ModelControlBase__scrPress_28bool_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $1 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], $2, $3);
  $4 = $1 + -1 | 0;
  HEAP32[$0 + 12 >> 2] = $4;
  if (!$1) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $4);
 }
 $1 = 0;
 if (!(!HEAPU8[$0 + 1996 | 0] | HEAP32[$0 + 620 >> 2] > ($2 | 0) | (HEAP32[$0 + 628 >> 2] < ($2 | 0) | HEAP32[$0 + 624 >> 2] > ($3 | 0)))) {
  $1 = HEAP32[$0 + 632 >> 2] >= ($3 | 0);
 }
 HEAP8[$0 + 636 | 0] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 41284);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__locale__id____get_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 271;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = $2;
 $3 = HEAP32[$1 + 4 >> 2];
 $2 = $1 + 16 | 0;
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 HEAP32[$2 >> 2] = $0;
 void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $2);
 global$0 = $1 + 32 | 0;
 return HEAP32[$0 + 4 >> 2] + -1 | 0;
}
function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP8[$6 + 15 | 0] = 0;
 HEAP8[$6 + 14 | 0] = $5;
 HEAP8[$6 + 13 | 0] = $4;
 HEAP8[$6 + 12 | 0] = 37;
 if ($5) {
  std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0);
 }
 HEAP32[$2 >> 2] = (strftime_l($1 | 0, HEAP32[$2 >> 2] - $1 | 0, $6 + 12 | 0, $3 | 0, HEAP32[$0 >> 2]) | 0) + $1;
 global$0 = $6 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $2 = $0;
  if (HEAP8[$1 + 11 | 0] < 0) {
   $0 = HEAP32[$1 >> 2];
  } else {
   $0 = $1;
  }
  if (HEAP8[$1 + 11 | 0] < 0) {
   $1 = HEAP32[$1 + 4 >> 2];
  } else {
   $1 = HEAPU8[$1 + 11 | 0];
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($2, $0, $1);
 }
}
function non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2996;
 $2 = $0 + 56 | 0;
 HEAP32[$2 >> 2] = 3016;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 2976;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 3296;
 if (HEAP8[$0 + 47 | 0] <= -1) {
  dlfree(HEAP32[$1 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 49;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 39384;
 return $0;
}
function non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2996;
 $2 = $0 + 56 | 0;
 HEAP32[$2 >> 2] = 3016;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 2976;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 3296;
 if (HEAP8[$0 + 47 | 0] <= -1) {
  dlfree(HEAP32[$1 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
 dlfree($1);
}
function __newlocale() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 while (1) {
  $4 = ($1 + 8 | 0) + ($0 << 2) | 0;
  $3 = __get_locale($0, 1 << $0 & 2147483647 ? 27909 : 23752);
  HEAP32[$4 >> 2] = $3;
  $2 = (($3 | 0) != 0) + $2 | 0;
  $0 = $0 + 1 | 0;
  if (($0 | 0) != 6) {
   continue;
  }
  break;
 }
 label$1 : {
  label$3 : {
   if ($2 >>> 0 > 1) {
    break label$3;
   }
   $0 = 23584;
   if ($2 - 1) {
    break label$1;
   }
   if (HEAP32[$1 + 8 >> 2] != 23556) {
    break label$3;
   }
   $0 = 23608;
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 34;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 41416;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 57;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 >> 2] = 36368;
 $3 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP8[$0 + 24 | 0] = $1;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 19;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38132;
 return $0;
}
function virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 60 >> 2] = 16408;
 HEAP32[$0 >> 2] = 16388;
 HEAP32[$0 + 8 >> 2] = 3296;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  dlfree(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 60 >> 2] = 16408;
 HEAP32[$0 >> 2] = 16388;
 HEAP32[$0 + 8 >> 2] = 3296;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  dlfree(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 dlfree($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
  if (HEAPU8[$3 + 5 | 0]) {
   HEAP8[HEAP32[$3 >> 2]] = HEAPU8[$3 + 4 | 0];
  }
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function fputc($0) {
 var $1 = 0;
 if (HEAP32[$0 + 76 >> 2] < 0) {
  label$2 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$2;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$2;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   return;
  }
  __overflow($0);
  return;
 }
 label$3 : {
  label$4 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$4;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$4;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   break label$3;
  }
  __overflow($0);
 }
}
function RunContext__notifyLastSolution_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 $1 = HEAP32[11720];
 $2 = HEAP32[$1 + 124 >> 2];
 $3 = HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] >> 2;
 $2 = $3 + -1 | 0;
 HEAP32[$1 + 132 >> 2] = $2;
 HEAP32[$1 + 136 >> 2] = HEAP32[HEAP32[$1 + 116 >> 2] + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 >> 2] = $2;
 emscripten_asm_const_iii(1077, 1093, $0 | 0) | 0;
 $1 = HEAP32[11720];
 if (!HEAPU8[$1 + 2612 | 0]) {
  HEAP8[$1 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 16;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 42276;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2 << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function mouseMove_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $1 = !BaseGLWidget__mouseMove_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[11720] + 144 | 0, $0, $1, $2, $3);
 $0 = HEAP32[11720];
 if (!(HEAPU8[$0 + 428 | 0] ? 0 : $1)) {
  label$3 : {
   if (!HEAPU8[$0 + 2612 | 0]) {
    HEAP8[$0 + 2612 | 0] = 1;
    emscripten_asm_const_iii(2692, 1076, 0) | 0;
    $0 = HEAP32[11720];
    if (!HEAPU8[$0 + 2612 | 0]) {
     break label$3;
    }
   }
   MainCtrl__draw_28float_29($0, Math_fround(0));
   $0 = HEAP32[11720];
  }
  HEAP8[$0 + 428 | 0] = 0;
 }
}
function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $2 = $1;
   if ($0 == 0) {
    $1 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $1 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$2 >> 2] = $1;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 + -1022;
  $1 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}
function ungetc($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = -1;
 label$1 : {
  if (($0 | 0) == -1) {
   break label$1;
  }
  $4 = HEAP32[$1 + 76 >> 2] >= 0 ? 1 : $4;
  label$3 : {
   $3 = HEAP32[$1 + 4 >> 2];
   label$4 : {
    if (!$3) {
     __toread($1);
     $3 = HEAP32[$1 + 4 >> 2];
     if (!$3) {
      break label$4;
     }
    }
    if ($3 >>> 0 > HEAP32[$1 + 44 >> 2] + -8 >>> 0) {
     break label$3;
    }
   }
   if (!$4) {
    break label$1;
   }
   return -1;
  }
  $2 = $3 + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP8[$2 | 0] = $0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
  $2 = $0;
 }
 return $2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
 var $2 = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____clear_and_shrink_28_29($0);
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($1);
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $0 = HEAP32[$0 + 8 >> 2];
 if (HEAPU8[$0 + 4 | 0] == 7) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  $2 = $28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($1 + 8 | 0, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1, 43672));
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 58;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 39616;
 return $0;
}
function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP32[$0 + 44 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1);
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP8[$0 + 53 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
 if (HEAP32[$0 + 44 >> 2] >= 9) {
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 38;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 37412;
 return $0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___underflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 if ($2 >>> 0 < $1 >>> 0) {
  HEAP32[$0 + 44 >> 2] = $1;
  $2 = $1;
 }
 $3 = -1;
 label$2 : {
  if (!(HEAPU8[$0 + 48 | 0] & 8)) {
   break label$2;
  }
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 16 >> 2] = $2;
   $1 = $2;
  }
  $0 = HEAP32[$0 + 12 >> 2];
  if ($0 >>> 0 >= $1 >>> 0) {
   break label$2;
  }
  $3 = HEAPU8[$0 | 0];
 }
 return $3 | 0;
}
function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 if ($3 & 2048) {
  HEAP8[$0 | 0] = 43;
  $0 = $0 + 1 | 0;
 }
 if ($3 & 512) {
  HEAP8[$0 | 0] = 35;
  $0 = $0 + 1 | 0;
 }
 while (1) {
  $4 = HEAPU8[$1 | 0];
  if ($4) {
   HEAP8[$0 | 0] = $4;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 $4 = $3 & 74;
 $1 = 111;
 label$5 : {
  if (($4 | 0) == 64) {
   break label$5;
  }
  $1 = $3 & 16384 ? 88 : 120;
  if (($4 | 0) == 8) {
   break label$5;
  }
  $1 = $2 ? 100 : 117;
 }
 HEAP8[$0 | 0] = $1;
}
function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP32[$0 + 44 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1);
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP8[$0 + 53 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
 if (HEAP32[$0 + 44 >> 2] >= 9) {
  std____2____throw_runtime_error_28char_20const__29();
  abort();
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1) {
 var $2 = 0;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $2 = HEAP32[$0 + 4 >> 2];
 } else {
  $2 = HEAPU8[$0 + 11 | 0];
 }
 if ($2 >>> 0 < $1 >>> 0) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1 - $2 | 0);
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 48;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 36820;
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 return $0;
}
function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $0 = legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0;
 $1 = 0;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  HEAP32[12002] = $0;
  $1 = -1;
 }
 label$1 : {
  if (!$1) {
   $1 = HEAP32[$4 + 12 >> 2];
   $0 = HEAP32[$4 + 8 >> 2];
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = -1;
  HEAP32[$4 + 12 >> 2] = -1;
  $1 = -1;
  $0 = -1;
 }
 global$0 = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  if (HEAPU8[$3 + 5 | 0]) {
   HEAP8[HEAP32[$3 >> 2]] = HEAPU8[$3 + 4 | 0];
  }
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if (HEAPU8[$3 + 5 | 0]) {
   HEAP8[HEAP32[$3 >> 2]] = HEAPU8[$3 + 4 | 0];
  }
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4096 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $1 = $1 + 15 & -16;
 $4 = $3 + $1 | 0;
 if ($4 >>> 0 >= 4088) {
  if ($1 >>> 0 >= 4089) {
   return $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1);
  }
  $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0);
  $2 = HEAP32[$0 + 4096 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + $3 | 0;
 }
 HEAP32[$2 + 4 >> 2] = $4;
 return ($2 + $3 | 0) + 8 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 46;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38364;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 42;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 36604;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__BoolExpr__BoolExpr_28bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2] != 0);
}
function std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 64 >> 2] = 3016;
 HEAP32[$0 >> 2] = 2976;
 HEAP32[$0 + 12 >> 2] = 3296;
 HEAP32[$0 + 8 >> 2] = 2996;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  dlfree(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, HEAPU8[$0 + 8 | 0] ? 35676 : 35681);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 64 >> 2] = 3016;
 HEAP32[$0 >> 2] = 2976;
 HEAP32[$0 + 12 >> 2] = 3296;
 HEAP32[$0 + 8 >> 2] = 2996;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  dlfree(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 dlfree($0);
}
function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
  if (HEAP32[$0 + 20 >> 2]) {
   break label$1;
  }
  return -1;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1, $2) {
 var $3 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 while (1) {
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2) | 0;
  if (HEAPU8[$3 + 4 | 0] == 12) {
   $1 = HEAP32[$3 + 8 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $3 = $3 + 12 | 0;
   HEAP32[$0 >> 2] = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$0 >> 2] ? $3 : $0) >> 2];
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 var $3 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 40;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 40524;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP8[$0 | 0] = 0;
 if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 16 >> 2]) {
  if (HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]) {
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]);
  }
  HEAP8[$0 | 0] = 1;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = HEAPU8[$1 + 5 | 0];
 $4 = HEAPU8[$1 + 6 | 0];
 HEAP8[$0 + 7 | 0] = HEAPU8[$1 + 7 | 0];
 HEAP8[$0 + 6 | 0] = $4;
 HEAP8[$0 + 5 | 0] = $3;
 HEAP8[$0 + 4 | 0] = 8;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 40280;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function wchar_t__20std____2____copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $0;
 while (1) {
  if (!(HEAP32[$3 + 8 >> 2] == HEAP32[$3 >> 2])) {
   HEAP32[$2 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
   $2 = $2 + 4 | 0;
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 4;
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 if (HEAPU8[$2 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 var $3 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 61;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 35472;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP8[$0 | 0] = 0;
 if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 16 >> 2]) {
  if (HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]);
  }
  HEAP8[$0 | 0] = 1;
 }
 return $0;
}
function std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 60 >> 2] = 16408;
 HEAP32[$0 >> 2] = 16388;
 HEAP32[$0 + 8 >> 2] = 3296;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  dlfree(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 60 >> 2] = 16408;
 HEAP32[$0 >> 2] = 16388;
 HEAP32[$0 + 8 >> 2] = 3296;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  dlfree(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 dlfree($0);
}
function __overflow($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = 10;
 $2 = HEAP32[$0 + 16 >> 2];
 label$1 : {
  if (!$2) {
   if (__towrite($0)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 16 >> 2];
  }
  $3 = HEAP32[$0 + 20 >> 2];
  if (!(HEAP8[$0 + 75 | 0] == 10 | $3 >>> 0 >= $2 >>> 0)) {
   HEAP32[$0 + 20 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 10;
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
 }
 global$0 = $1 + 16 | 0;
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$0 + 16 >> 2];
 if (!$3) {
  HEAP32[$0 + 36 >> 2] = 1;
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = $1;
  return;
 }
 label$2 : {
  if (($1 | 0) == ($3 | 0)) {
   if (HEAP32[$0 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$0 + 24 >> 2] = $2;
   return;
  }
  HEAP8[$0 + 54 | 0] = 1;
  HEAP32[$0 + 24 >> 2] = 2;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
 }
}
function void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -4 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1);
   $0 = $0 + 4 | 0;
   continue;
  }
 }
}
function std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 HEAP32[$6 + 12 >> 2] = $5;
 $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
 $1 = mbsnrtowcs($0, $1, $2, $3, $4);
 $0 = HEAP32[$5 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $6 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 45;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 39264;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 66;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38696;
 return $0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $3 - $2;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 global$0 = $1 + 16 | 0;
 global$0 = $0 + 16 | 0;
 $1 = $0 + 8 | 0;
 $0 = $0 + 12 | 0;
 return HEAP32[(HEAPU32[$1 >> 2] < HEAPU32[$0 >> 2] ? $1 : $0) >> 2];
}
function stackState_28int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[11720];
 label$1 : {
  if (!$0) {
   CubeDocBase__pushState_28_29($1);
   break label$1;
  }
  CubeDocBase__popState_28_29($1);
  $0 = HEAP32[11720];
  if (HEAPU8[$0 + 2612 | 0]) {
   break label$1;
  }
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
 ModelControlBase__reCalcSlvMinMax_28_29(HEAP32[11720] + 512 | 0);
 BaseGLWidget__reCalcProj_28_29(HEAP32[11720] + 144 | 0);
 BuildControlBase__reloadWorld_28_29(HEAP32[11720] + 1212 | 0);
}
function cpp_slvrun_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 16 >> 2] = HEAPU8[HEAP32[11720] + 2544 | 0];
 emscripten_asm_const_iii(1096, 1116, $0 + 16 | 0) | 0;
 $3 = $0;
 $1 = HEAP32[11720];
 $2 = $1 + 2544 | 0;
 if (HEAPU8[$2 | 0]) {
  SolveContext__doRun_28int_29($1 + 2512 | 0, 1e4);
  $4 = HEAPU8[$2 | 0] != 0;
  $1 = HEAP32[11720];
 }
 HEAP32[$3 >> 2] = HEAPU8[$1 + 2544 | 0];
 emscripten_asm_const_iii(1096, 1116, $0 | 0) | 0;
 global$0 = $0 + 32 | 0;
 return $4 | 0;
}
function char__20std____2____copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $0;
 while (1) {
  if (!(HEAP32[$3 + 8 >> 2] == HEAP32[$3 >> 2])) {
   HEAP8[$2 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2]];
   $2 = $2 + 1 | 0;
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function BaseProgram___BaseProgram_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 2852;
 HEAP32[$0 + 132 >> 2] = 2816;
 if (HEAP8[$0 + 151 | 0] <= -1) {
  dlfree(HEAP32[$0 + 140 >> 2]);
 }
 HEAP32[$0 + 112 >> 2] = 2816;
 if (HEAP8[$0 + 131 | 0] <= -1) {
  dlfree(HEAP32[$0 + 120 >> 2]);
 }
 HEAP32[$0 + 92 >> 2] = 2816;
 if (HEAP8[$0 + 111 | 0] <= -1) {
  dlfree(HEAP32[$0 + 100 >> 2]);
 }
 HEAP32[$0 + 72 >> 2] = 2816;
 if (HEAP8[$0 + 91 | 0] <= -1) {
  dlfree(HEAP32[$0 + 80 >> 2]);
 }
 ShaderProgram___ShaderProgram_28_29($0);
 return $0 | 0;
}
function std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20______shared_ptr_emplace_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 16732;
 $1 = $0 + 12 | 0;
 label$1 : {
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glBindTexture(HEAP32[$0 + 28 >> 2], 0);
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glDeleteTextures(1, $1 | 0);
 }
 HEAP32[$0 + 28 >> 2] = -1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$1 + 4 >> 2] = 0;
 return $0 | 0;
}
function std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 12 >> 2] = $4;
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $1 = wcsnrtombs($0, $1, $2, $3);
 $0 = HEAP32[$4 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $5 + 16 | 0;
 return $1;
}
function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $1 >> 31;
 $2 = $0 ^ $3;
 $0 = $1 >> 31;
 _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($2 - $3 | 0, ($1 ^ $0) - (($2 >>> 0 < $3 >>> 0) + $0 | 0) | 0, 2e5);
 $2 = legalimport$wasm2js_scratch_load_i64() | 0;
 $1 = getTempRet0() | 0;
 $2 = $2 | 0;
 i64toi32_i32$HIGH_BITS = $1;
 $1 = $3 ^ $2;
 $2 = $1 - $3 | 0;
 i64toi32_i32$HIGH_BITS = ($0 ^ i64toi32_i32$HIGH_BITS) - (($1 >>> 0 < $3 >>> 0) + $0 | 0) | 0;
 return $2;
}
function std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20______shared_ptr_emplace_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 16732;
 $1 = $0 + 12 | 0;
 label$1 : {
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glBindTexture(HEAP32[$0 + 28 >> 2], 0);
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glDeleteTextures(1, $1 | 0);
 }
 HEAP32[$0 + 28 >> 2] = -1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$1 + 4 >> 2] = 0;
 dlfree($0);
}
function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $4;
 $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5, $5 + 12 | 0);
 $1 = vsnprintf($0, $1, $3, HEAP32[$5 + 8 >> 2]);
 $0 = HEAP32[$2 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $5 + 16 | 0;
 return $1;
}
function FlatProgram___FlatProgram_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 2852;
 HEAP32[$0 + 132 >> 2] = 2816;
 if (HEAP8[$0 + 151 | 0] <= -1) {
  dlfree(HEAP32[$0 + 140 >> 2]);
 }
 HEAP32[$0 + 112 >> 2] = 2816;
 if (HEAP8[$0 + 131 | 0] <= -1) {
  dlfree(HEAP32[$0 + 120 >> 2]);
 }
 HEAP32[$0 + 92 >> 2] = 2816;
 if (HEAP8[$0 + 111 | 0] <= -1) {
  dlfree(HEAP32[$0 + 100 >> 2]);
 }
 HEAP32[$0 + 72 >> 2] = 2816;
 if (HEAP8[$0 + 91 | 0] <= -1) {
  dlfree(HEAP32[$0 + 80 >> 2]);
 }
 ShaderProgram___ShaderProgram_28_29($0);
 dlfree($0);
}
function bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = 1;
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAPU8[$0 | 0] == HEAPU8[$2 | 0]) {
     break label$2;
    }
    $4 = 0;
   }
   global$0 = $3 + 16 | 0;
   return $4;
  }
  $2 = $2 + 1 | 0;
  $0 = $0 + 1 | 0;
  continue;
 }
}
function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = HEAPU8[$0 | 0];
 label$2 : {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4 : {
    $4 = HEAPU8[$1 | 0];
    if (($4 | 0) != ($3 | 0)) {
     break label$4;
    }
    $2 = $2 + -1 | 0;
    if (!$2 | !$4) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = HEAPU8[$0 + 1 | 0];
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}
function dynCall_viiiffffffiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = Math_fround($6);
 $7 = Math_fround($7);
 $8 = Math_fround($8);
 $9 = Math_fround($9);
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
}
function strtox($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 76 >> 2] = -1;
 HEAP32[$5 + 8 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
 __shlim($5, 0, 0);
 $2 = __intscan($5, $2, 1, $3, $4);
 $3 = i64toi32_i32$HIGH_BITS;
 if ($1) {
  HEAP32[$1 >> 2] = ((HEAP32[$5 + 4 >> 2] + HEAP32[$5 + 120 >> 2] | 0) - HEAP32[$5 + 8 >> 2] | 0) + $0;
 }
 global$0 = $5 + 144 | 0;
 i64toi32_i32$HIGH_BITS = $3;
 return $2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $3 = HEAP32[$0 >> 2];
   HEAP8[$2 + 15 | 0] = 0;
   HEAP8[$1 + $3 | 0] = HEAPU8[$2 + 15 | 0];
   HEAP32[$0 + 4 >> 2] = $1;
   break label$1;
  }
  HEAP8[$2 + 14 | 0] = 0;
  HEAP8[$0 + $1 | 0] = HEAPU8[$2 + 14 | 0];
  HEAP8[$0 + 11 | 0] = $1;
 }
 global$0 = $2 + 16 | 0;
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29($0, $1, $2) {
 return unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 6;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 43456;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = HEAPU8[$1 + 5 | 0];
 $4 = HEAPU8[$1 + 6 | 0];
 HEAP8[$0 + 7 | 0] = HEAPU8[$1 + 7 | 0];
 HEAP8[$0 + 6 | 0] = $4;
 HEAP8[$0 + 5 | 0] = $3;
 HEAP8[$0 + 4 | 0] = 3;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 >> 2] = 42860;
 return $0;
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $6 = $0;
 $7 = $1;
 $4 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $1 = $5 >> 8;
  $4 = $1;
  if (!($5 & 1)) {
   break label$1;
  }
  $4 = HEAP32[$1 + HEAP32[$2 >> 2] >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $4 + $2 | 0, $5 & 2 ? $3 : 2);
}
function std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 global$0 = $2 + 16 | 0;
 $0 = HEAP32[$0 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $1 + 16 | 0;
 return 0;
}
function BuildControlBase__switchIn_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 252 >> 2] = 6;
 $2 = HEAP32[$0 + 1264 >> 2];
 HEAP32[$1 + 260 >> 2] = HEAP32[$0 + 1260 >> 2];
 HEAP32[$1 + 264 >> 2] = $2;
 HEAP32[$1 + 268 >> 2] = HEAP32[$0 + 1268 >> 2];
 $2 = HEAP32[$0 + 1276 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 272 >> 2] = HEAP32[$0 + 1272 >> 2];
 HEAP32[$1 + 276 >> 2] = $2;
 HEAP32[$1 + 280 >> 2] = HEAP32[$0 + 1280 >> 2];
 HEAP8[HEAP32[$0 + 4 >> 2] + 256 | 0] = 0;
}
function std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 12 >> 2] = $4;
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $1 = mbsrtowcs($0, $1, $2, $3);
 $0 = HEAP32[$4 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $5 + 16 | 0;
 return $1;
}
function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 label$1 : {
  if (!HEAPU8[$0 + 44 | 0]) {
   while (1) {
    if (($3 | 0) >= ($2 | 0)) {
     break label$1;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
     break label$1;
    }
    $1 = $1 + 4 | 0;
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  $3 = fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2]);
 }
 return $3 | 0;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $2 >>> 16;
 $5 = $0 >>> 16;
 $9 = Math_imul($4, $5);
 $6 = $2 & 65535;
 $7 = $0 & 65535;
 $8 = Math_imul($6, $7);
 $5 = ($8 >>> 16) + Math_imul($5, $6) | 0;
 $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
 $0 = (((Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) | 0) + ($5 >>> 16) | 0) + ($4 >>> 16) | 0;
 $1 = $8 & 65535 | $4 << 16;
 i64toi32_i32$HIGH_BITS = $0;
 return $1;
}
function std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($3, $3 + 12 | 0);
 $2 = vsscanf($0, 27665, HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$1 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function __toread($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
 if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 4) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 return $1 << 27 >> 31;
}
function Shape___Shape_28_29($0) {
 var $1 = 0;
 Shape__deallocate_28_29($0);
 $1 = HEAP32[$0 + 176 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 156 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 136 >> 2];
 if ($1) {
  dlfree($1);
 }
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  HEAP32[$0 + 60 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 44 >> 2];
 if ($1) {
  HEAP32[$0 + 48 >> 2] = $1;
  dlfree($1);
 }
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  HEAP32[$0 + 36 >> 2] = $1;
  dlfree($1);
 }
 return $0;
}
function std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 HEAP32[$5 + 12 >> 2] = $4;
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $1 = mbrtowc($0, $1, $2, $3);
 $0 = HEAP32[$4 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $5 + 16 | 0;
 return $1;
}
function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = $3;
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
 $2 = vasprintf($0, $2, HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$1 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 var $3 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 20;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 34448;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 55;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 37028;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAPU8[$1 + 5 | 0];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = $3;
 HEAP8[$0 + 4 | 0] = 12;
 HEAP32[$0 >> 2] = 34600;
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43692;
 return $0;
}
function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 label$1 : {
  if (!HEAPU8[$0 + 44 | 0]) {
   while (1) {
    if (($3 | 0) >= ($2 | 0)) {
     break label$1;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPU8[$1 | 0]) | 0) == -1) {
     break label$1;
    }
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  $3 = fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2]);
 }
 return $3 | 0;
}
function dynCall_viiffffffiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = Math_fround($6);
 $7 = Math_fround($7);
 $8 = Math_fround($8);
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $2 = HEAP32[$0 >> 2];
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$2 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 4 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 11 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
 var $3 = 0;
 $2 = HEAP32[$2 + 4 >> 2] & 176;
 if (($2 | 0) == 32) {
  return $1;
 }
 label$2 : {
  if (($2 | 0) != 16) {
   break label$2;
  }
  $2 = HEAPU8[$0 | 0];
  $3 = $2 + -43 | 0;
  if (!($3 >>> 0 > 2 | !($3 - 1))) {
   return $0 + 1 | 0;
  }
  if (($2 | 0) != 48 | ($1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
   break label$2;
  }
  $0 = $0 + 2 | 0;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 56;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38812;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $1 = mbrtowc(0, $0, $1, $2 ? $2 : 51232);
 $0 = HEAP32[$3 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $4 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 25;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43088;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 0;
 HEAP8[$0 + 5 | 0] = 0;
 HEAP8[$0 + 4 | 0] = 14;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43204;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 53;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 36716;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 2;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 42748;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 50;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 36924;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function std____2__ios_base___ios_base_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 21744;
 std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0);
 $1 = HEAP32[$0 + 28 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 dlfree(HEAP32[$0 + 32 >> 2]);
 dlfree(HEAP32[$0 + 36 >> 2]);
 dlfree(HEAP32[$0 + 48 >> 2]);
 dlfree(HEAP32[$0 + 60 >> 2]);
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 5;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43800;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAPU8[$2 + 5 | 0];
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = $3;
 HEAP8[$0 + 4 | 0] = 13;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 43312;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function std____2____tree_int_2c_20std____2__less_int__2c_20std____2__allocator_int__20___destroy_28std____2____tree_node_int_2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_int_2c_20std____2__less_int__2c_20std____2__allocator_int__20___destroy_28std____2____tree_node_int_2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_int_2c_20std____2__less_int__2c_20std____2__allocator_int__20___destroy_28std____2____tree_node_int_2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  dlfree($1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $2;
 }
 $2 = HEAP32[$1 + 12 >> 2];
 if ($2 >>> 0 < HEAPU32[$0 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 60;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 36048;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20_____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 12 | 0;
 label$1 : {
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glBindTexture(HEAP32[$0 + 28 >> 2], 0);
  if (HEAP32[$1 >> 2] == -1) {
   break label$1;
  }
  glDeleteTextures(1, $1 | 0);
 }
 HEAP32[$0 + 28 >> 2] = -1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$1 + 4 >> 2] = 0;
}
function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 10;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 42640;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function BuildControlBase__scrMove_28bool_2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (HEAPU8[$0 + 16 | 0]) {
  $0 = 0;
 } else {
  $1 = $0;
  label$3 : {
   if (($3 | 0) != -1) {
    $0 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], $3, $4);
    break label$3;
   }
   $0 = HEAP32[$0 + 20 >> 2];
  }
  $0 = BuildControlBase__choiseMouseMove_28int_2c_20bool_29($1, $0, $2);
 }
 return $0 | 0;
}
function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -1 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
   $0 = $0 + 1 | 0;
   continue;
  }
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (HEAP8[$0 + 11 | 0] < 0) {
   $2 = HEAP32[$0 >> 2];
   HEAP8[$1 + 15 | 0] = 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + 15 | 0];
   HEAP32[$0 + 4 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 14 | 0] = 0;
  HEAP8[$0 | 0] = HEAPU8[$1 + 14 | 0];
  HEAP8[$0 + 11 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = $0 + 4 | 0;
 HEAP32[$2 >> 2] = 21744;
 HEAP32[$2 >> 2] = 21860;
 HEAP32[$0 >> 2] = 21612;
 HEAP32[$2 >> 2] = 21632;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[5400] + $0 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 44;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38920;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) ^ 1;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 1;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 41924;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $3 = $1;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $2 = HEAP32[$0 >> 2];
 } else {
  $2 = $0;
 }
 if (HEAP8[$0 + 11 | 0] < 0) {
  $0 = HEAP32[$0 + 4 >> 2];
 } else {
  $0 = HEAPU8[$0 + 11 | 0];
 }
 HEAP32[$3 + 8 >> 2] = $2 + ($0 << 2);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 1073741823;
 HEAP32[$0 + 8 >> 2] = 2147483647;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 global$0 = $1 + 16 | 0;
 global$0 = $0 + 16 | 0;
 $1 = $0 + 8 | 0;
 $0 = $0 + 12 | 0;
 return HEAP32[(HEAPU32[$1 >> 2] < HEAPU32[$0 >> 2] ? $1 : $0) >> 2];
}
function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 65;
 HEAP32[$0 >> 2] = 34600;
 HEAP8[$0 + 16 | 0] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38588;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = $0 + 4 | 0;
 HEAP32[$2 >> 2] = 21744;
 HEAP32[$2 >> 2] = 21788;
 HEAP32[$0 >> 2] = 21564;
 HEAP32[$2 >> 2] = 21584;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[5388] + $0 | 0, $1);
}
function unsigned_20long_20std____2____str_find_char_2c_20unsigned_20long_2c_20std____2__char_traits_char__2c_204294967295ul__28char_20const__2c_20unsigned_20long_2c_20char_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = 45;
 $3 = -1;
 if ($1 >>> 0 > 0) {
  if ($1) {
   $1 = memchr($0, HEAPU8[$2 + 15 | 0], $1);
  } else {
   $1 = 0;
  }
  $3 = $1 ? $1 - $0 | 0 : -1;
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  $2 = HEAP32[$1 + 12 >> 2];
  label$2 : {
   if (($2 | 0) == HEAP32[$1 + 16 >> 2]) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
    break label$2;
   }
   $1 = HEAP32[$2 >> 2];
  }
  if (($1 | 0) != -1) {
   return !HEAP32[$0 >> 2];
  }
  HEAP32[$0 >> 2] = 0;
 }
 return 1;
}
function fflush($0) {
 var $1 = 0;
 if ($0) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return __fflush_unlocked($0);
  }
  return __fflush_unlocked($0);
 }
 if (HEAP32[11680]) {
  $1 = fflush(HEAP32[11680]);
 }
 __lock(48012);
 $0 = HEAP32[12005];
 if ($0) {
  while (1) {
   if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
    $1 = __fflush_unlocked($0) | $1;
   }
   $0 = HEAP32[$0 + 56 >> 2];
   if ($0) {
    continue;
   }
   break;
  }
 }
 __unlock(48012);
 return $1;
}
function $28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($0, $1) {
 if ((HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) == (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0)) {
  $0 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$1 >> 2]);
 } else {
  $0 = 0;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
}
function void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (HEAP32[$0 >> 2] != -1) {
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$2 >> 2] = $3;
  std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $2);
 }
 global$0 = $2 + 16 | 0;
}
function pad($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 256 | 0;
 global$0 = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $4 = $2 - $3 | 0;
  $6 = $4 >>> 0 < 256;
  memset($5, $1, $6 ? $4 : 256);
  $1 = $0;
  $7 = $5;
  if (!$6) {
   $2 = $2 - $3 | 0;
   while (1) {
    out($0, $5, 256);
    $4 = $4 + -256 | 0;
    if ($4 >>> 0 > 255) {
     continue;
    }
    break;
   }
   $4 = $2 & 255;
  }
  out($1, $7, $4);
 }
 global$0 = $5 + 256 | 0;
}
function SHA1__hexPrinter_28unsigned_20char__2c_20int_2c_20char__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = 20;
 if ($0) {
  while (1) {
   HEAP8[$1 | 0] = HEAPU8[(HEAPU8[$0 | 0] >>> 4) + 15055 | 0];
   HEAP8[$1 + 1 | 0] = HEAPU8[(HEAPU8[$0 | 0] & 15) + 15055 | 0];
   $1 = $1 + 2 | 0;
   $0 = $0 + 1 | 0;
   $3 = ($2 | 0) > 1;
   $2 = $2 + -1 | 0;
   if ($3) {
    continue;
   }
   break;
  }
  HEAP8[$1 | 0] = 0;
  return;
 }
 __assert_fail(15023, 15027, 21, 15038);
 abort();
}
function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29() {
 HEAP32[12568] = 21744;
 HEAP32[12568] = 21860;
 HEAP32[12566] = 21516;
 HEAP32[12568] = 21536;
 HEAP32[12567] = 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[5376] + 50264 | 0, 50924);
}
function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$0 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  $2 = HEAP32[$1 + 12 >> 2];
  label$2 : {
   if (($2 | 0) == HEAP32[$1 + 16 >> 2]) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
    break label$2;
   }
   $1 = HEAPU8[$2 | 0];
  }
  if (($1 | 0) != -1) {
   return !HEAP32[$0 >> 2];
  }
  HEAP32[$0 >> 2] = 0;
 }
 return 1;
}
function std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($3 + 8 | 0, $3 + 12 | 0);
 $1 = wcrtomb($0, $1);
 $0 = HEAP32[$2 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $3 + 16 | 0;
 return $1;
}
function store_int($0, $1, $2, $3) {
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $1 = $1 + 2 | 0;
  if ($1 >>> 0 > 5) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 1 | 0) {
   default:
    HEAP8[$0 | 0] = $2;
    return;
   case 0:
    HEAP16[$0 >> 1] = $2;
    return;
   case 1:
   case 2:
    HEAP32[$0 >> 2] = $2;
    return;
   case 3:
    break label$1;
   case 4:
    break label$2;
   }
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 $2 = 0;
 label$1 : {
  if (($1 | 0) == HEAP32[$0 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$0 >> 2] = $1 + 1;
  $2 = HEAPU8[$1 | 0];
 }
 return $2 << 24 >> 24;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $3 = $1;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $2 = HEAP32[$0 >> 2];
 } else {
  $2 = $0;
 }
 if (HEAP8[$0 + 11 | 0] < 0) {
  $0 = HEAP32[$0 + 4 >> 2];
 } else {
  $0 = HEAPU8[$0 + 11 | 0];
 }
 HEAP32[$3 + 8 >> 2] = $2 + $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP8[$0 + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29(HEAP32[$0 + 8 >> 2])) {
   $0 = -1;
  } else {
   $0 = HEAP32[$0 + 8 >> 2];
   if ($0) {
    break label$1;
   }
   $0 = 1;
  }
  return $0 | 0;
 }
 return (std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0) == 1 | 0;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28int_2c_20int_2c_20emscripten__val_29_2c_20int_2c_20int_2c_20emscripten__internal___EM_VAL__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 8 >> 2] = $3;
 FUNCTION_TABLE[$0]($1, $2, $4 + 8 | 0);
 _emval_decref(HEAP32[$4 + 8 >> 2]);
 global$0 = $4 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 21;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 34644;
 return $0;
}
function wmemmove($0, $1, $2) {
 var $3 = 0;
 label$1 : {
  if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
   while (1) {
    $2 = $2 + -1 | 0;
    $3 = $2 << 2;
    HEAP32[$3 + $0 >> 2] = HEAP32[$1 + $3 >> 2];
    if ($2) {
     continue;
    }
    break label$1;
   }
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29() {
 HEAP32[12546] = 21744;
 HEAP32[12546] = 21788;
 HEAP32[12544] = 21468;
 HEAP32[12546] = 21488;
 HEAP32[12545] = 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[5364] + 50176 | 0, 50860);
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
 }
}
function std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  label$2 : {
   if (($2 | 0) != ($3 | 0)) {
    if (!(HEAPU16[HEAP32[5939] + (HEAP32[$2 >> 2] << 1) >> 1] & $1) | HEAPU32[$2 >> 2] > 127) {
     break label$2;
    }
   } else {
    $2 = $3;
   }
   return $2 | 0;
  }
  $2 = $2 + 4 | 0;
  continue;
 }
}
function $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 4 >> 2] + $1 | 0;
  $2 = HEAP32[$0 + 8 >> 2];
  if ($1 >>> 0 < $2 >>> 0) {
   break label$1;
  }
  $2 = $2 << 1;
  $1 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
  HEAP32[$0 + 8 >> 2] = $1;
  $2 = $0;
  $0 = dlrealloc(HEAP32[$0 >> 2], $1);
  HEAP32[$2 >> 2] = $0;
  if ($0) {
   break label$1;
  }
  std__terminate_28_29();
  abort();
 }
}
function std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 label$1 : {
  while (1) {
   if (($2 | 0) == ($3 | 0)) {
    break label$1;
   }
   if (!(!(HEAPU16[HEAP32[5939] + (HEAP32[$2 >> 2] << 1) >> 1] & $1) | HEAPU32[$2 >> 2] > 127)) {
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  }
  $3 = $2;
 }
 return $3 | 0;
}
function vasprintf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = $2;
 $4 = -1;
 $2 = vsnprintf(0, 0, $1, $2);
 label$1 : {
  if (($2 | 0) < 0) {
   break label$1;
  }
  $5 = $0;
  $2 = $2 + 1 | 0;
  $0 = dlmalloc($2);
  HEAP32[$5 >> 2] = $0;
  if (!$0) {
   break label$1;
  }
  $4 = vsnprintf($0, $2, $1, HEAP32[$3 + 12 >> 2]);
 }
 global$0 = $3 + 16 | 0;
 return $4;
}
function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP8[$0 + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1);
}
function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) ^ 1;
}
function __shlim($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 112 >> 2] = $1;
 HEAP32[$0 + 116 >> 2] = $2;
 $5 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$0 + 4 >> 2];
 $3 = $5 - $6 | 0;
 $4 = $3 >> 31;
 HEAP32[$0 + 120 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = $4;
 if (!(!($1 | $2) | (($4 | 0) < ($2 | 0) ? 1 : ($4 | 0) <= ($2 | 0) ? $3 >>> 0 > $1 >>> 0 ? 0 : 1 : 0))) {
  HEAP32[$0 + 104 >> 2] = $1 + $6;
  return;
 }
 HEAP32[$0 + 104 >> 2] = $5;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 43;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38468;
 return $0;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $7 = $6 >> 8;
 $0 = HEAP32[$0 >> 2];
 $8 = $0;
 if ($6 & 1) {
  $7 = HEAP32[HEAP32[$3 >> 2] + $7 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($8, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
}
function dlrealloc($0, $1) {
 var $2 = 0, $3 = 0;
 if (!$0) {
  return dlmalloc($1);
 }
 if ($1 >>> 0 >= 4294967232) {
  HEAP32[12002] = 48;
  return 0;
 }
 $2 = try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
 if ($2) {
  return $2 + 8 | 0;
 }
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 $3 = HEAP32[$0 + -4 >> 2];
 $3 = ($3 & -8) - ($3 & 3 ? 4 : 8) | 0;
 memcpy($2, $0, $3 >>> 0 < $1 >>> 0 ? $3 : $1);
 dlfree($0);
 return $2;
}
function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1);
}
function std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
 $2 = HEAP32[HEAP32[11593] >> 2] ? 4 : 1;
 $0 = HEAP32[$0 >> 2];
 if ($0) {
  if ($0) {
   HEAP32[11593] = ($0 | 0) == -1 ? 48064 : $0;
  }
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 22;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 37296;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 32;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 41296;
 return $0;
}
function long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 strtold_l($3, $1, $2, std____2____cloc_28_29());
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 global$0 = $3 + 16 | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($1) ^ 1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 >> 2];
 if (!(($2 | 0) == HEAP32[$0 + 4 >> 2] | HEAPU8[$2 | 0] != ($1 & 255))) {
  HEAP32[$0 >> 2] = $2 + 1;
  $3 = 1;
 }
 return $3;
}
function std____2____shared_ptr_pointer_Mesh__CommonData__2c_20std____2__default_delete_Mesh__CommonData__2c_20std____2__allocator_Mesh__CommonData__20_____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[$0 + 12 >> 2];
 if ($0) {
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   HEAP32[$0 + 16 >> 2] = $1;
   dlfree($1);
  }
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   HEAP32[$0 + 4 >> 2] = $1;
   dlfree($1);
  }
  dlfree($0);
 }
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4) | 0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4) | 0;
}
function $28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($0, $1) {
 if (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >>> 0 <= HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0) {
  $0 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
 } else {
  $0 = 0;
 }
 return $0;
}
function std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 + 12 >> 2];
 global$0 = $2 + 16 | 0;
}
function SlvPainter__exportToObj_28ObjExport__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 if (HEAP32[$2 + 4 >> 2] != HEAP32[$2 >> 2]) {
  $2 = 0;
  while (1) {
   SlvPainter__exportPieceToObj_28ObjExport__2c_20int_29_20const($0, $1, $2);
   $2 = $2 + 1 | 0;
   $3 = HEAP32[$0 + 12 >> 2];
   if ($2 >>> 0 < HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 3 >>> 0) {
    continue;
   }
   break;
  }
 }
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 37;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 40172;
 return $0;
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $6 = $5 >> 8;
 $0 = HEAP32[$0 >> 2];
 $7 = $0;
 if ($5 & 1) {
  $6 = HEAP32[HEAP32[$2 >> 2] + $6 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($7, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 23;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 34900;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 24;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 40776;
 return $0;
}
function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   HEAP16[$3 >> 1] = HEAPU32[$1 >> 2] <= 127 ? HEAPU16[HEAP32[5939] + (HEAP32[$1 >> 2] << 1) >> 1] : 0;
   $3 = $3 + 2 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = $1;
   $0 = HEAP32[$1 >> 2];
   if ($0 >>> 0 <= 127) {
    $0 = HEAP32[HEAP32[6132] + (HEAP32[$1 >> 2] << 2) >> 2];
   }
   HEAP32[$3 >> 2] = $0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = $1;
   $0 = HEAP32[$1 >> 2];
   if ($0 >>> 0 <= 127) {
    $0 = HEAP32[HEAP32[6520] + (HEAP32[$1 >> 2] << 2) >> 2];
   }
   HEAP32[$3 >> 2] = $0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($1) ^ 1;
}
function __cxx_global_array_dtor_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(50352);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(50436);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(50688);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(50772);
}
function BuildControlBase__scrDblClick_28bool_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP8[$0 + 17 | 0] = $1;
 $1 = BaseGLWidget__doChoise_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], $2, $3);
 if (!HEAPU8[$0 + 16 | 0]) {
  return BuildControlBase__boxedDblClick_28int_2c_20int_2c_20int_29($0, $1) | 0;
 }
 return BuildControlBase__tiledDblClick_28int_29($0, $1) | 0;
}
function getc($0) {
 var $1 = 0;
 if (HEAP32[$0 + 76 >> 2] < 0) {
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $1 + 1;
   return HEAPU8[$1 | 0];
  }
  return __uflow($0);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 label$3 : {
  if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $1 + 1;
   $0 = HEAPU8[$1 | 0];
   break label$3;
  }
  $0 = __uflow($0);
 }
 return $0;
}
function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28emscripten__val_2c_20bool_29_2c_20emscripten__internal___EM_VAL__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $1;
 FUNCTION_TABLE[$0]($3 + 8 | 0, $2);
 _emval_decref(HEAP32[$3 + 8 >> 2]);
 global$0 = $3 + 16 | 0;
}
function wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
 return wchar_t__20std____2____copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 52;
 HEAP32[$0 >> 2] = 34600;
 HEAP8[$0 + 13 | 0] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 37140;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, $1) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, wcslen($1));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$0 + 11 | 0] = 1;
 std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, 1, 45);
 HEAP8[$1 + 15 | 0] = 0;
 HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 15 | 0];
 global$0 = $1 + 16 | 0;
}
function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = $1 >> 31;
 $0 = $0 ^ $2;
 $3 = $1 >> 31;
 $2 = __wasm_i64_udiv($0 - $2 | 0, ($3 ^ $1) - (($0 >>> 0 < $2 >>> 0) + $3 | 0) | 0, 1e6);
 $0 = $1 >> 31;
 $2 = $2 ^ $0;
 $3 = $2 - $0 | 0;
 $1 = $1 >> 31;
 i64toi32_i32$HIGH_BITS = ($1 ^ i64toi32_i32$HIGH_BITS) - (($2 >>> 0 < $0 >>> 0) + $1 | 0) | 0;
 return $3;
}
function $28anonymous_20namespace_29__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__OutputStream__2c_20unsigned_20long_29($0, $1, $2) {
 label$1 : {
  if (!$0) {
   $1 = 1024;
   $0 = dlmalloc(1024);
   if ($0) {
    break label$1;
   }
   return 0;
  }
  $1 = HEAP32[$1 >> 2];
 }
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = 0;
 return 1;
}
function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP32[$1 >> 2];
   HEAP8[$4 | 0] = $0 >>> 0 < 128 ? $0 : $3;
   $4 = $4 + 1 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function freeMeshAllocator_28_29() {
 var $0 = 0;
 HEAP32[11874] = 0;
 $0 = HEAP32[11875];
 if (($0 | 0) > HEAP32[11876]) {
  HEAP32[11876] = $0;
 }
 HEAP32[11879] = 0;
 HEAP32[11875] = 0;
 $0 = HEAP32[11880];
 if (($0 | 0) > HEAP32[11881]) {
  HEAP32[11881] = $0;
 }
 HEAP32[11884] = 0;
 HEAP32[11880] = 0;
 $0 = HEAP32[11885];
 if (($0 | 0) > HEAP32[11886]) {
  HEAP32[11886] = $0;
 }
 HEAP32[11885] = 0;
}
function $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$2 + 12 >> 2];
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
}
function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = $1;
   $0 = HEAP8[$1 | 0];
   if (($0 | 0) >= 0) {
    $0 = HEAP32[HEAP32[6132] + (HEAP8[$1 | 0] << 2) >> 2];
   }
   HEAP8[$3 | 0] = $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = $1;
   $0 = HEAP8[$1 | 0];
   if (($0 | 0) >= 0) {
    $0 = HEAP32[HEAP32[6520] + (HEAP8[$1 | 0] << 2) >> 2];
   }
   HEAP8[$3 | 0] = $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = HEAP32[$0 + 8 >> 2];
 $2 = HEAPU8[$0 + 5 | 0];
 label$1 : {
  if (($2 | 0) != 2) {
   $0 = !$2;
   break label$1;
  }
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = HEAP32[$0 + 12 >> 2];
 $2 = HEAPU8[$0 + 5 | 0];
 label$1 : {
  if (($2 | 0) != 2) {
   $0 = !$2;
   break label$1;
  }
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = HEAP32[$0 + 12 >> 2];
 $2 = HEAPU8[$0 + 7 | 0];
 label$1 : {
  if (($2 | 0) != 2) {
   $0 = !$2;
   break label$1;
  }
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function void_20emscripten__internal__raw_destructor_JsGrp__28JsGrp__29($0) {
 $0 = $0 | 0;
 if ($0) {
  if (HEAP8[$0 + 47 | 0] <= -1) {
   dlfree(HEAP32[$0 + 36 >> 2]);
  }
  if (HEAP8[$0 + 35 | 0] <= -1) {
   dlfree(HEAP32[$0 + 24 >> 2]);
  }
  if (HEAP8[$0 + 23 | 0] <= -1) {
   dlfree(HEAP32[$0 + 12 >> 2]);
  }
  if (HEAP8[$0 + 11 | 0] <= -1) {
   dlfree(HEAP32[$0 >> 2]);
  }
  dlfree($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = HEAP32[$0 + 12 >> 2];
 $2 = HEAPU8[$0 + 6 | 0];
 label$1 : {
  if (($2 | 0) != 2) {
   $0 = !$2;
   break label$1;
  }
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
 if ($2) {
  $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, $2);
  memmove(HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 >> 2], $2);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $2;
 }
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($2 | 0) != ($3 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 7;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 >> 2] = 34800;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP8[$1 | 0];
   HEAP8[$4 | 0] = ($0 | 0) > -1 ? $0 : $3;
   $4 = $4 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 16 | 0;
 global$0 = $9;
 __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
 $3 = HEAP32[$9 >> 2];
 $2 = HEAP32[$9 + 4 >> 2];
 $1 = HEAP32[$9 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2;
 global$0 = $9 + 16 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____clear_and_shrink_28_29($0) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0);
 if (HEAP8[$0 + 11 | 0] < 0) {
  dlfree(HEAP32[$0 >> 2]);
  HEAP32[$0 + 8 >> 2] = -2147483648;
  HEAP8[$0 + 11 | 0] = 0;
 }
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 while (1) {
  HEAP32[HEAP32[13261] >> 2] = 0;
  HEAP32[13261] = HEAP32[13261] + 4;
  $0 = $0 + -1 | 0;
  if ($0) {
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
}
function emscripten__internal__Invoker_bool_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_29_2c_20emscripten__internal___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = FUNCTION_TABLE[$0]($2 + 8 | 0) | 0;
 _emval_decref(HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, $1) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
}
function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
}
function Vec2i__20emscripten__internal__MemberAccess_JsGrp_2c_20Vec2i___getWire_JsGrp__28Vec2i_20JsGrp____20const__2c_20JsGrp_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 $0 = operator_20new_28unsigned_20long_29(8);
 $1 = $1 + $2 | 0;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
 return $0 | 0;
}
function wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 $2 = HEAP32[$2 >> 2];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (($2 | 0) != HEAP32[$0 >> 2]) {
     break label$2;
    }
   } else {
    $0 = $1;
   }
   return $0;
  }
  $0 = $0 + 4 | 0;
  continue;
 }
}
function __towrite($0) {
 var $1 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
 return 0;
}
function ShaderProgram__successLink_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 + 60 >> 2];
 $2 = $0 - -64 | 0;
 if (($1 | 0) != HEAP32[$2 >> 2]) {
  while (1) {
   $3 = HEAP32[$1 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3, HEAP32[$0 + 4 >> 2]);
   $1 = $1 + 4 | 0;
   if (($1 | 0) != HEAP32[$2 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $0 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP32[$1 >> 2] + ($0 << 4) | 0;
   $3 = $0 & -268435456;
   $0 = ($3 | $3 >>> 24) ^ $0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $0 | 0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 while (1) {
  HEAP32[$2 >> 2] = 0;
  $2 = HEAP32[$0 + 8 >> 2] + 4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  $1 = $1 + -1 | 0;
  if ($1) {
   continue;
  }
  break;
 }
}
function char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
 return char__20std____2____copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($0, $1) {
 HEAP8[$0 + 7 | 0] = 2;
 HEAP8[$0 + 6 | 0] = 2;
 HEAP8[$0 + 5 | 0] = 2;
 HEAP8[$0 + 4 | 0] = 31;
 HEAP32[$0 >> 2] = 34600;
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 35012;
 return $0;
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($0, $1) {
 var $2 = 0;
 label$1 : {
  $2 = HEAP32[$0 >> 2];
  if (!$2) {
   break label$1;
  }
  if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($2, $1) | 0) != -1) {
   break label$1;
  }
  HEAP32[$0 >> 2] = 0;
 }
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($0) {
 var $1 = 0;
 label$1 : {
  if (HEAP32[$0 + 76 >> 2] != -1) {
   $0 = HEAP32[$0 + 76 >> 2];
   break label$1;
  }
  $1 = $0;
  $0 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0);
  HEAP32[$1 + 76 >> 2] = $0;
 }
 return $0 << 24 >> 24;
}
function mouseUp_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = HEAP32[HEAP32[11720] + 464 >> 2];
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, ($0 | 0) != 0, $1, $2);
 }
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____clear_and_shrink_28_29($0) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0);
 if (HEAP8[$0 + 11 | 0] < 0) {
  dlfree(HEAP32[$0 >> 2]);
  HEAP32[$0 + 8 >> 2] = -2147483648;
  HEAP8[$0 + 11 | 0] = 0;
 }
}
function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = HEAPU8[$0 | 0];
 HEAP8[$0 | 0] = HEAPU8[$1 | 0];
 HEAP8[$1 | 0] = HEAPU8[$2 + 15 | 0];
 global$0 = $2 + 16 | 0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___operator___28int__29($0, $1) {
 return std____2__basic_istream_char_2c_20std____2__char_traits_char__20___20std____2____input_arithmetic_with_numeric_limits_int_2c_20char_2c_20std____2__char_traits_char__20__28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20int__29($0, $1);
}
function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51572] != 0) | HEAP8[51572] & 1)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29(51560, 28184);
  HEAP32[12893] = 0;
  HEAP32[12893] = HEAP32[12893] | 1;
 }
 return 51560;
}
function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51668] != 0) | HEAP8[51668] & 1)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29(51656, 28388);
  HEAP32[12917] = 0;
  HEAP32[12917] = HEAP32[12917] | 1;
 }
 return 51656;
}
function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51636] != 0) | HEAP8[51636] & 1)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29(51624, 28292);
  HEAP32[12909] = 0;
  HEAP32[12909] = HEAP32[12909] | 1;
 }
 return 51624;
}
function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51604] != 0) | HEAP8[51604] & 1)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29(51592, 28232);
  HEAP32[12901] = 0;
  HEAP32[12901] = HEAP32[12901] | 1;
 }
 return 51592;
}
function BuildControlBase__fadeTimeout_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 if (!HEAPU8[$0 + 36 | 0]) {
  return 0;
 }
 $1 = Math_fround(+$1 / .2 + +HEAPF32[$0 + 1288 >> 2]);
 HEAPF32[$0 + 1288 >> 2] = $1;
 if (!($1 >= Math_fround(1))) {
  $0 = 1;
 } else {
  HEAP8[$0 + 36 | 0] = 0;
  HEAP32[$0 + 1288 >> 2] = 1065353216;
  $0 = 0;
 }
 return $0 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51268);
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) {
 var $1 = 0;
 $0 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 label$1 : {
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
   break label$1;
  }
  $0 = HEAPU8[$1 | 0];
 }
 return $0 << 24 >> 24;
}
function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $0 = 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP8[$1 | 0] + ($0 << 4) | 0;
   $3 = $0 & -268435456;
   $0 = ($3 | $3 >>> 24) ^ $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $0 | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function resizeGl_28int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[11720] + 144 | 0;
 HEAP32[$2 + 292 >> 2] = $1;
 HEAP32[$2 + 288 >> 2] = $0;
 BaseGLWidget__reCalcProj_28_29($2);
 $0 = HEAP32[11720];
 HEAP8[$0 + 504 | 0] = 0;
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
}
function GlTexture___GlTexture_28_29($0) {
 label$1 : {
  if (HEAP32[$0 >> 2] == -1) {
   break label$1;
  }
  glBindTexture(HEAP32[$0 + 16 >> 2], 0);
  if (HEAP32[$0 >> 2] == -1) {
   break label$1;
  }
  glDeleteTextures(1, $0 | 0);
 }
 HEAP32[$0 + 16 >> 2] = -1;
 HEAP32[$0 >> 2] = -1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
}
function $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP8[$3 + 15 | 0] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAPU8[$1 | 0];
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[HEAP32[$0 >> 2]] = HEAPU8[$3 + 15 | 0];
 global$0 = $3 + 16 | 0;
 return $0;
}
function memcmp($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = 41;
 $2 = 1854;
 label$1 : {
  while (1) {
   $3 = HEAPU8[$0 | 0];
   $4 = HEAPU8[$2 | 0];
   if (($3 | 0) == ($4 | 0)) {
    $2 = $2 + 1 | 0;
    $0 = $0 + 1 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 29;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 36480;
 return $0;
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = $3;
 if ($2) {
  FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]]($2);
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__ConversionOperatorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 4;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38004;
 return $0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0) {
 var $1 = 0;
 while (1) {
  $1 = HEAP32[$0 + 4096 >> 2];
  if ($1) {
   HEAP32[$0 + 4096 >> 2] = HEAP32[$1 >> 2];
   if (($0 | 0) == ($1 | 0)) {
    continue;
   }
   dlfree($1);
   continue;
  }
  break;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 4096 >> 2] = $0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 21400;
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 return $0 | 0;
}
function char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 $2 = HEAPU8[$2 | 0];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (($2 | 0) != HEAPU8[$0 | 0]) {
     break label$2;
    }
   } else {
    $0 = $1;
   }
   return $0;
  }
  $0 = $0 + 1 | 0;
  continue;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__SpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($0, $1) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 36;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 40880;
 return $0;
}
function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}
function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51556] != 0) | HEAP8[51556] & 1)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29(51544, 28172);
  HEAP32[12889] = 0;
  HEAP32[12889] = HEAP32[12889] | 1;
 }
 return 51544;
}
function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51652] != 0) | HEAP8[51652] & 1)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29(51640, 28376);
  HEAP32[12913] = 0;
  HEAP32[12913] = HEAP32[12913] | 1;
 }
 return 51640;
}
function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51620] != 0) | HEAP8[51620] & 1)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29(51608, 28268);
  HEAP32[12905] = 0;
  HEAP32[12905] = HEAP32[12905] | 1;
 }
 return 51608;
}
function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51588] != 0) | HEAP8[51588] & 1)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29(51576, 28220);
  HEAP32[12897] = 0;
  HEAP32[12897] = HEAP32[12897] | 1;
 }
 return 51576;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($0, $1) {
 var $2 = 0;
 label$1 : {
  $2 = HEAP32[$0 >> 2];
  if (!$2) {
   break label$1;
  }
  if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($2, $1) | 0) != -1) {
   break label$1;
  }
  HEAP32[$0 >> 2] = 0;
 }
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3296;
 if (HEAP8[$0 + 43 | 0] <= -1) {
  dlfree(HEAP32[$0 + 32 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 return $0 | 0;
}
function bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 return bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2);
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3296;
 if (HEAP8[$0 + 43 | 0] <= -1) {
  dlfree(HEAP32[$0 + 32 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 dlfree($0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0) {
 HEAP32[$0 >> 2] = 21400;
 std____2__locale__locale_28_29($0 + 4 | 0);
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 21336;
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$1 + 4 >> 2] + -1 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 if (($2 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 return $0 | 0;
}
function sbrk($0) {
 var $1 = 0;
 $1 = HEAP32[13456];
 $0 = $1 + $0 | 0;
 if (($0 | 0) <= -1) {
  HEAP32[12002] = 48;
  return -1;
 }
 label$2 : {
  if ($0 >>> 0 <= __wasm_memory_size() << 16 >>> 0) {
   break label$2;
  }
  if (emscripten_resize_heap($0 | 0)) {
   break label$2;
  }
  HEAP32[12002] = 48;
  return -1;
 }
 HEAP32[13456] = $0;
 return $1;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($0, $1, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 0, $3);
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   HEAP8[$0 + 112 | 0] = 0;
   break label$1;
  }
  dlfree($1);
 }
}
function Shape__deallocate_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 28 >> 2];
 if ($1) {
  dlfree($1);
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__GlobalQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 33;
 HEAP32[$0 >> 2] = 34600;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 38252;
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0) {
 HEAP32[$0 >> 2] = 21336;
 std____2__locale__locale_28_29($0 + 4 | 0);
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $2 = $2 + -4 | 0;
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = $1;
}
function std____2____shared_weak_count____release_weak_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = $0 + 8 | 0;
 if (!HEAP32[$1 >> 2]) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  return;
 }
 $2 = $1;
 $1 = HEAP32[$1 >> 2] + -1 | 0;
 HEAP32[$2 >> 2] = $1;
 if (($1 | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
 }
}
function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 label$1 : {
  $0 = HEAP32[11851];
  if (!$0) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $1 + -1;
  if ($1) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  std____2____shared_weak_count____release_weak_28_29($0);
 }
}
function std____2__locale____global_28_29() {
 var $0 = 0;
 if (!(!!(HEAPU8[51424] != 0) | HEAP8[51424] & 1)) {
  $0 = HEAP32[std____2__locale__classic_28_29() >> 2];
  HEAP32[12854] = $0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  HEAP32[12855] = 51416;
  HEAP32[12856] = 0;
  HEAP32[12856] = HEAP32[12856] | 1;
 }
 return HEAP32[12855];
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $1 = dlmalloc($1 + 8 | 0);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $0 = HEAP32[$0 + 4096 >> 2];
 $2 = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $1 + 8 | 0;
}
function strtold($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 strtox_1($3, $1, $2, 2);
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 global$0 = $3 + 16 | 0;
}
function __string_read($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 84 >> 2];
 $3 = $2 + 256 | 0;
 $5 = memchr($4, 0, $3);
 $3 = $5 ? $5 - $4 | 0 : $3;
 $2 = $3 >>> 0 < $2 >>> 0 ? $3 : $2;
 memcpy($1, $4, $2);
 $1 = $4 + $3 | 0;
 HEAP32[$0 + 84 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2 + $4;
 return $2;
}
function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   HEAP32[$3 >> 2] = HEAP8[$1 | 0];
   $3 = $3 + 4 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 __embind_register_native_and_builtin_types();
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 16 | 0);
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0) {
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, HEAP32[$0 >> 2]);
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29($0, $1) {
 return std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1);
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[13260] = 0;
 HEAP32[13261] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[13264] = 0;
 HEAP8[53184] = 0;
 global$0 = $0 + 16 | 0;
}
function strtold_l($0, $1, $2, $3) {
 var $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 strtold($3, $1, $2);
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 global$0 = $3 + 16 | 0;
}
function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 12 | 0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 24 >> 2];
 if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1 & 255) | 0;
 }
 HEAP32[$0 + 24 >> 2] = $2 + 1;
 HEAP8[$2 | 0] = $1;
 return $1 & 255;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 24 >> 2];
 if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1) | 0;
 }
 HEAP32[$0 + 24 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
 return $1;
}
function emscripten__internal__Invoker_emscripten__val___invoke_28emscripten__val_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 FUNCTION_TABLE[$0]($1 + 8 | 0);
 _emval_incref(HEAP32[$1 + 8 >> 2]);
 $0 = HEAP32[$1 + 8 >> 2];
 _emval_decref($0 | 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, wcslen($1));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1;
 if (HEAP8[$0 + 11 | 0] < 0) {
  $0 = HEAP32[$0 >> 2];
 }
 HEAP32[$2 + 8 >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
 return $0;
}
function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0);
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29(HEAP32[$0 >> 2], HEAP8[$1 | 0]);
}
function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (HEAP8[HEAP32[$0 >> 2]] + -48 >>> 0 < 10) {
  while (1) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP8[$1 | 0];
   HEAP32[$0 >> 2] = $1 + 1;
   $2 = (Math_imul($2, 10) + $3 | 0) + -48 | 0;
   if (HEAP8[$1 + 1 | 0] + -48 >>> 0 < 10) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 label$2 : {
  if (HEAP8[$1 + 11 | 0] < 0) {
   break label$2;
  }
 }
 return -1;
}
function std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 40 >> 2];
 while (1) {
  if ($1) {
   $1 = $1 + -1 | 0;
   $2 = $1 << 2;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $2 >> 2]](0, $0, HEAP32[$2 + HEAP32[$0 + 36 >> 2] >> 2]);
   continue;
  }
  break;
 }
}
function std____2____throw_length_error_28char_20const__29($0) {
 var $1 = 0;
 $1 = __cxa_allocate_exception(8) | 0;
 HEAP32[$1 >> 2] = 44052;
 HEAP32[$1 >> 2] = 44096;
 std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($1 + 4 | 0, $0);
 HEAP32[$1 >> 2] = 44144;
 __cxa_throw($1 | 0, 44176, 2);
 abort();
}
function std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $1 = HEAP32[$0 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 $1 = $1 + ($0 >> 1) | 0;
 $3 = $1;
 if ($0 & 1) {
  $2 = HEAP32[$2 + HEAP32[$1 >> 2] >> 2];
 }
 FUNCTION_TABLE[$2]($3);
}
function mouseDown_28int_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 BaseGLWidget__mousePress_28int_2c_20int_2c_20int_29(HEAP32[11720] + 144 | 0, $0, $1, $2);
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
}
function __uflow($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = -1;
 label$1 : {
  if (__toread($0)) {
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = HEAPU8[$1 + 15 | 0];
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function void_20emscripten__internal__MemberAccess_JsGrp_2c_20Vec2i___setWire_JsGrp__28Vec2i_20JsGrp____20const__2c_20JsGrp__2c_20Vec2i__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $0 = HEAP32[$0 >> 2] + $1 | 0;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function fwrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = Math_imul($1, $2);
 $5 = $4;
 label$1 : {
  if (HEAP32[$3 + 76 >> 2] <= -1) {
   $0 = __fwritex($0, $4, $3);
   break label$1;
  }
  $0 = __fwritex($0, $4, $3);
 }
 if (($5 | 0) == ($0 | 0)) {
  return $1 ? $2 : 0;
 }
 return ($0 >>> 0) / ($1 >>> 0) | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, 4370, strlen(4370));
}
function RunContext__doStart_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 SolveContext__init_28_29($0);
 HEAP32[$1 >> 2] = HEAPU8[HEAP32[11720] + 2544 | 0];
 emscripten_asm_const_iii(1096, 1116, $1 | 0) | 0;
 emscripten_asm_const_iii(3432, 1076, 0) | 0;
 global$0 = $1 + 16 | 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
  return -1;
 }
 $1 = $0;
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 12 >> 2] = $0 + 4;
 return HEAP32[$0 >> 2];
}
function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = strlen($1);
 $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = $2;
 HEAP32[$0 >> 2] = memcpy($3 + 12 | 0, $1, $2 + 1 | 0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1 + 4;
 return HEAP32[$1 >> 2];
}
function BaseGLWidget__switchHandler_28GLHandler__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 320 >> 2];
 if ($2) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2);
 }
 HEAP32[$0 + 320 >> 2] = $1;
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 }
 BaseGLWidget__reCalcProj_28_29($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
  return -1;
 }
 $1 = $0;
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 12 >> 2] = $0 + 1;
 return HEAPU8[$0 | 0];
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$1 >> 2]);
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = $2;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1 + 1;
 return HEAPU8[$1 | 0];
}
function std____2____shared_ptr_pointer_Mesh__CommonData__2c_20std____2__default_delete_Mesh__CommonData__2c_20std____2__allocator_Mesh__CommonData__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (HEAP32[$1 + 4 >> 2] == 17132 ? $0 + 12 | 0 : 0) | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$1 >> 2]) << 24;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP8[$0 | 0] = $2 >> 24;
}
function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $0 = $0 ? $0 : 1;
 while (1) {
  label$2 : {
   $1 = dlmalloc($0);
   if ($1) {
    break label$2;
   }
   $2 = HEAP32[13325];
   if (!$2) {
    break label$2;
   }
   FUNCTION_TABLE[$2]();
   continue;
  }
  break;
 }
 return $1;
}
function $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
 $2 = HEAP32[$1 >> 2] + ($3 >>> 0 > $2 >>> 0 ? $2 : $3 + -1 | 0) | 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = $2;
}
function std____2__ios_base__init_28void__29($0, $1) {
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 4098;
 HEAP32[$0 + 8 >> 2] = 6;
 HEAP32[$0 + 16 >> 2] = !$1;
 memset($0 + 32 | 0, 0, 40);
 std____2__locale__locale_28_29($0 + 28 | 0);
}
function virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function MainCtrl__draw_28float_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$0 + 2612 | 0] = 0;
 $3 = $0;
 $0 = $0 + 144 | 0;
 HEAP8[$3 + 2612 | 0] = BaseGLWidget__progress_28float_29($0, $1);
 BaseGLWidget__paint_28bool_29($0);
 global$0 = $2 + 16 | 0;
}
function vsscanf($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 144 | 0;
 global$0 = $3;
 $3 = memset($3, 0, 144);
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 32 >> 2] = 268;
 HEAP32[$3 + 84 >> 2] = $0;
 $0 = vfscanf($3, $1, $2);
 global$0 = $3 + 144 | 0;
 return $0;
}
function std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $1) {
 while (1) {
  if (HEAP32[$0 >> 2] == 1) {
   continue;
  }
  break;
 }
 if (!HEAP32[$0 >> 2]) {
  HEAP32[$0 >> 2] = 1;
  FUNCTION_TABLE[272]($1);
  HEAP32[$0 >> 2] = -1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $1 ? $1 : 1;
 HEAP32[$0 >> 2] = $1 ? $2 : $2 + 1 | 0;
 return $0;
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29($0) {
 $0 = $0 | 0;
 dlfree(std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0));
}
function std____2__locale__classic_28_29() {
 if (!(!!(HEAPU8[51412] != 0) | HEAP8[51412] & 1)) {
  std____2__locale____imp____imp_28unsigned_20long_29();
  HEAP32[12851] = 53024;
  HEAP32[12852] = 51404;
  HEAP32[12853] = 0;
  HEAP32[12853] = HEAP32[12853] | 1;
 }
 return HEAP32[12852];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1);
}
function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51524] != 0) | HEAP8[51524] & 1)) {
  std____2__init_wmonths_28_29();
  HEAP32[12880] = 52336;
  HEAP32[12881] = 0;
  HEAP32[12881] = HEAP32[12881] | 1;
 }
 return HEAP32[12880];
}
function PicBucket__doReCompress_28_29($0) {
 MyAllocator__init_28int_2c_20int_2c_20int_29();
 HEAP32[11886] = 0;
 HEAP32[11881] = 0;
 HEAP32[11876] = 0;
 PicBucket__makeAllComp_28_29($0);
 PicBucket__distinctMeshes_28ProgressCallback__29($0);
 MyAllocator__checkMaxAlloc_28_29_20const();
}
function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51508] != 0) | HEAP8[51508] & 1)) {
  std____2__init_wweeks_28_29();
  HEAP32[12876] = 51856;
  HEAP32[12877] = 0;
  HEAP32[12877] = HEAP32[12877] | 1;
 }
 return HEAP32[12876];
}
function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51540] != 0) | HEAP8[51540] & 1)) {
  std____2__init_wam_pm_28_29();
  HEAP32[12884] = 52672;
  HEAP32[12885] = 0;
  HEAP32[12885] = HEAP32[12885] | 1;
 }
 return HEAP32[12884];
}
function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
}
function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44847;
 _embind_register_integer(44500, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
 global$0 = $0 + 16 | 0;
}
function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51516] != 0) | HEAP8[51516] & 1)) {
  std____2__init_months_28_29();
  HEAP32[12878] = 52032;
  HEAP32[12879] = 0;
  HEAP32[12879] = HEAP32[12879] | 1;
 }
 return HEAP32[12878];
}
function sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = HEAP32[$0 + 20 >> 2];
 $3 = HEAP32[$0 + 16 >> 2] - $4 | 0;
 $3 = $3 >>> 0 > $2 >>> 0 ? $2 : $3;
 memcpy($4, $1, $3);
 HEAP32[$0 + 20 >> 2] = $3 + HEAP32[$0 + 20 >> 2];
 return $2 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44830;
 _embind_register_integer(44476, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
 global$0 = $0 + 16 | 0;
}
function std____2____wrap_iter_wchar_t____operator__28long_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + ($1 << 2);
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}
function SolveContext__doRun_28int_29($0, $1) {
 Cube__puttgr_28Solutions__2c_20SolveContext__2c_20SlvCube__2c_20int_29(HEAP32[$0 - -64 >> 2], HEAP32[$0 + 12 >> 2], $0, HEAP32[$0 + 24 >> 2], $1);
 if (!(HEAPU8[$0 + 68 | 0] ? 0 : !HEAP32[$0 + 28 >> 2])) {
  HEAP8[$0 + 32 | 0] = 0;
 }
}
function virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51500] != 0) | HEAP8[51500] & 1)) {
  std____2__init_weeks_28_29();
  HEAP32[12874] = 51680;
  HEAP32[12875] = 0;
  HEAP32[12875] = HEAP32[12875] | 1;
 }
 return HEAP32[12874];
}
function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 if (!(!!(HEAPU8[51532] != 0) | HEAP8[51532] & 1)) {
  std____2__init_am_pm_28_29();
  HEAP32[12882] = 52640;
  HEAP32[12883] = 0;
  HEAP32[12883] = HEAP32[12883] | 1;
 }
 return HEAP32[12882];
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44815;
 _embind_register_integer(44464, HEAP32[$0 + 12 >> 2], 2, 0, 65535);
 global$0 = $0 + 16 | 0;
}
function __fpclassifyl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $5 = $3 & 65535;
 $3 = $3 >>> 16 & 32767;
 label$1 : {
  if (($3 | 0) != 32767) {
   $4 = 4;
   if ($3) {
    break label$1;
   }
   return $0 | $2 | ($1 | $5) ? 3 : 2;
  }
  $4 = !($0 | $2 | ($1 | $5));
 }
 return $4;
}
function runningRestart_28_29() {
 var $0 = 0, $1 = 0;
 $1 = HEAP32[HEAP32[11720] + 88 >> 2];
 $0 = 0;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $0 = HEAPU8[$1 + 32 | 0];
 }
 if ($0) {
  ModelControlBase__restartSolve_28bool_2c_20bool_29(HEAP32[11720] + 512 | 0, 1, 0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__BoolExpr_28bool_29($0, $1) {
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 1;
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = 59;
 HEAP32[$0 >> 2] = 34600;
 HEAP8[$0 + 8 | 0] = $1;
 HEAP32[$0 >> 2] = 35584;
 return $0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = dlmalloc(4096);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $2 = HEAP32[$0 + 4096 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 + 4096 >> 2] = $1;
}
function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44783;
 _embind_register_integer(44440, HEAP32[$0 + 12 >> 2], 1, -128, 127);
 global$0 = $0 + 16 | 0;
}
function SlvCube__genPainter_28_29($0) {
 if (!HEAP32[$0 + 36 >> 2]) {
  HEAP32[$0 + 36 >> 2] = $0;
  Shape__makeTransformsMatrics_28float_2c_20std____2__vector_Mat4_2c_20std____2__allocator_Mat4__20___29_20const(HEAP32[$0 + 52 >> 2], Math_fround(HEAP32[11537]), $0 + 40 | 0);
 }
}
function FloatProgress__progress_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $1 = Math_fround(HEAPF32[$0 + 4 >> 2] + Math_fround($1 / HEAPF32[$0 + 8 >> 2]));
 $2 = $1 >= Math_fround(1);
 HEAPF32[$0 + 4 >> 2] = $2 ? Math_fround(1) : $1;
 return $2 ^ 1;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45896, 3, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 45227;
 _embind_register_memory_view(46056, 5, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44795;
 _embind_register_integer(44428, HEAP32[$0 + 12 >> 2], 1, 0, 255);
 global$0 = $0 + 16 | 0;
}
function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45816, 1, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44852;
 _embind_register_integer(44512, HEAP32[$0 + 12 >> 2], 4, 0, -1);
 global$0 = $0 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0) {
 var $1 = 0;
 $1 = $0;
 $0 = 0;
 while (1) {
  if (($0 | 0) != 3) {
   HEAP32[($0 << 2) + $1 >> 2] = 0;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_135($0) {
 $0 = $0 | 0;
 $0 = 52696;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 52672) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_132($0) {
 $0 = $0 | 0;
 $0 = 52664;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 52640) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_108($0) {
 $0 = $0 | 0;
 $0 = 52624;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 52336) {
   continue;
  }
  break;
 }
}
function BaseGLWidget__paint_28bool_29($0) {
 var $1 = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6676);
 $1 = HEAP32[$0 + 320 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1, 0);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, 6680);
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45976, 5, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44834;
 _embind_register_integer(44488, HEAP32[$0 + 12 >> 2], 4, 0, -1);
 global$0 = $0 + 16 | 0;
}
function __cxx_global_array_dtor_84($0) {
 $0 = $0 | 0;
 $0 = 52320;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 52032) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_69($0) {
 $0 = $0 | 0;
 $0 = 52024;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 51856) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_54($0) {
 $0 = $0 | 0;
 $0 = 51848;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 51680) {
   continue;
  }
  break;
 }
}
function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45776, 0, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44809;
 _embind_register_integer(44452, HEAP32[$0 + 12 >> 2], 2, -32768, 32767);
 global$0 = $0 + 16 | 0;
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1) {
 if (!(HEAPU8[$0 + 112 | 0] | $1 >>> 0 > 28)) {
  HEAP8[$0 + 112 | 0] = 1;
  return $0;
 }
 return operator_20new_28unsigned_20long_29($1 << 2);
}
function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}
function std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[11593];
 $1 = HEAP32[$1 >> 2];
 if ($1) {
  HEAP32[11593] = ($1 | 0) == -1 ? 48064 : $1;
 }
 HEAP32[$0 >> 2] = ($2 | 0) == 48064 ? -1 : $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 43908 >> 2]);
}
function std____2____wrap_iter_char____operator__28long_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + $1;
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}
function BaseGLWidget__mousePress_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = HEAP32[$0 + 320 >> 2];
 if ($4) {
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, ($1 | 0) == 2, $2, $3);
 }
 HEAP32[$0 + 336 >> 2] = $2;
 HEAP32[$0 + 340 >> 2] = $3;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51456);
}
function std____2____shared_ptr_pointer_Shape__2c_20std____2__default_delete_Shape__2c_20std____2__allocator_Shape__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (HEAP32[$1 + 4 >> 2] == 16956 ? $0 + 12 | 0 : 0) | 0;
}
function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
 label$1 : {
  $0 = HEAP32[$0 + 4 >> 2] & 74;
  if ($0) {
   if (($0 | 0) == 64) {
    return 8;
   }
   if (($0 | 0) != 8) {
    break label$1;
   }
   return 16;
  }
  return 0;
 }
 return 10;
}
function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44778;
 _embind_register_integer(44416, HEAP32[$0 + 12 >> 2], 1, -128, 127);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__OutputStream__operator___28char_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, 1);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 1;
 HEAP8[HEAP32[$0 >> 2] + $2 | 0] = $1;
}
function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 45496;
 _embind_register_memory_view(46136, 7, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 45465;
 _embind_register_memory_view(46096, 6, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 + 8 >> 2] != (std____2____cloc_28_29() | 0)) {
  freelocale(HEAP32[$0 + 8 >> 2]);
 }
 return $0 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45856, 2, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 45197;
 _embind_register_memory_view(46016, 4, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44953;
 _embind_register_memory_view(45736, 0, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1;
 $1 = HEAP32[$1 >> 2] + 15 & -16;
 HEAP32[$2 >> 2] = $1 + 16;
 HEAPF64[$0 >> 3] = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 43932 >> 2]);
}
function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(45936, 4, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29() {
 HEAP32[13181] = 0;
 HEAP32[13180] = 33860;
 HEAP32[13180] = 28444;
 HEAP8[52732] = 0;
 HEAP32[13182] = 0;
 HEAP32[13180] = 27940;
 HEAP32[13182] = HEAP32[5939];
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51448);
}
function strtof($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 strtox_1($2, $0, $1, 0);
 $3 = __trunctfsf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $3;
}
function non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0 + -8 | 0) | 0;
}
function legalstub$dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
}
function void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29($0) {
 $0 = $0 | 0;
 std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const(HEAP32[HEAP32[$0 >> 2] >> 2]);
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 std____2__ios_base__init_28void__29($0, $1);
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = -1;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function fmt_x($0, $1, $2, $3) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 17728 | 0] | $3;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44872;
 _embind_register_float(44536, HEAP32[$0 + 12 >> 2], 8);
 global$0 = $0 + 16 | 0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}
function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
 var $1 = 0;
 label$1 : {
  $0 = HEAP32[$0 >> 2] + -12 | 0;
  $1 = HEAP32[$0 + 8 >> 2] + -1 | 0;
  HEAP32[$0 + 8 >> 2] = $1;
  if (($1 | 0) > -1) {
   break label$1;
  }
  dlfree($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
}
function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 44866;
 _embind_register_float(44524, HEAP32[$0 + 12 >> 2], 4);
 global$0 = $0 + 16 | 0;
}
function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, 28148);
}
function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, 28120);
}
function non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2($0 + -8 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0) {
 if (HEAP32[$0 >> 2] != ($0 + 12 | 0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
}
function strtod($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 strtox_1($2, $0, $1, 1);
 $3 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $3;
}
function std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($0) {
 if (1073741823 < $0 >>> 0) {
  std____2____throw_length_error_28char_20const__29(33712);
  abort();
 }
 return operator_20new_28unsigned_20long_29($0 << 2);
}
function __munmap($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = $0;
 $0 = __syscall91(91, $2 | 0) | 0;
 if ($0 >>> 0 >= 4294963201) {
  HEAP32[12002] = 0 - $0;
 }
 global$0 = $2 + 16 | 0;
}
function demangling_terminate_handler_28_29() {
 var $0 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 if (HEAP32[13323]) {
  HEAP32[$0 + 32 >> 2] = HEAP32[11719];
  abort_message(34070, $0 + 32 | 0);
  abort();
 }
 abort_message(34108, 0);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2, $0);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function mouseWheel_28int_29($0) {
 $0 = $0 | 0;
 BaseGLWidget__mouseWheelEvent_28int_29(HEAP32[11720] + 144 | 0, $0);
 $0 = HEAP32[11720];
 if (!HEAPU8[$0 + 2612 | 0]) {
  HEAP8[$0 + 2612 | 0] = 1;
  emscripten_asm_const_iii(2692, 1076, 0) | 0;
 }
}
function std____2__numpunct_wchar_t____numpunct_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 28080;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 16 | 0);
 return $0 | 0;
}
function void_20emscripten__internal__MemberAccess_JsGrp_2c_20float___setWire_JsGrp__28float_20JsGrp____20const__2c_20JsGrp__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 HEAPF32[HEAP32[$0 >> 2] + $1 >> 2] = $2;
}
function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51332);
}
function std____2__numpunct_char____numpunct_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 28040;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 12 | 0);
 return $0 | 0;
}
function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51340);
}
function std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($0) {
 if (4294967295 < $0 >>> 0) {
  std____2____throw_length_error_28char_20const__29(33712);
  abort();
 }
 return operator_20new_28unsigned_20long_29($0);
}
function cpp_draw_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = HEAP32[11720];
 if (HEAPU8[$1 + 2612 | 0]) {
  MainCtrl__draw_28float_29($1, $0);
  $1 = HEAPU8[HEAP32[11720] + 2612 | 0] != 0;
 } else {
  $1 = 0;
 }
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2, $0);
}
function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, 28140);
}
function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
 return wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1);
}
function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, 28112);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 27992;
 if (HEAP32[$0 + 8 >> 2] != (std____2____cloc_28_29() | 0)) {
  freelocale(HEAP32[$0 + 8 >> 2]);
 }
 return $0 | 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0));
}
function std____2____shared_ptr_pointer_Shape__2c_20std____2__default_delete_Shape__2c_20std____2__allocator_Shape__20_____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 12 >> 2];
 if ($0) {
  dlfree(Shape___Shape_28_29($0));
 }
}
function dynCall_viiiidiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8);
}
function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51316);
}
function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51324);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 if (!$0) {
  return 1;
 }
 return std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0;
}
function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 12 | 0);
 return $0 | 0;
}
function float_20emscripten__internal__MemberAccess_JsGrp_2c_20float___getWire_JsGrp__28float_20JsGrp____20const__2c_20JsGrp_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return Math_fround(HEAPF32[HEAP32[$0 >> 2] + $1 >> 2]);
}
function dynCall_iiiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7) | 0;
}
function void_20emscripten__internal__MemberAccess_JsGrp_2c_20bool___setWire_JsGrp__28bool_20JsGrp____20const__2c_20JsGrp__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[HEAP32[$0 >> 2] + $1 | 0] = $2;
}
function fmt_o($0, $1, $2) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function void_20emscripten__internal__MemberAccess_Vec2i_2c_20int___setWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i__2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[HEAP32[$0 >> 2] + $1 >> 2] = $2;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$0 >> 2]);
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0));
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 8 | 0);
 return $0 | 0;
}
function __sindf($0) {
 var $1 = 0, $2 = 0;
 $1 = $0 * $0;
 $2 = $1 * $0;
 return Math_fround($2 * ($1 * $1) * ($1 * 2718311493989822e-21 + -.00019839334836096632) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
}
function std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($2 >>> 0 <= 127 ? (HEAPU16[HEAP32[5939] + ($2 << 1) >> 1] & $1) != 0 : 0) | 0;
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 setTempRet0(i64toi32_i32$HIGH_BITS | 0);
 return $0 | 0;
}
function BaseGLWidget__mouseWheelEvent_28int_29($0, $1) {
 var $2 = 0;
 HEAP8[$0 + 360 | 0] = 0;
 $2 = $0;
 $0 = HEAP32[$0 + 312 >> 2] + $1 | 0;
 $0 = ($0 | 0) > 50 ? $0 : 50;
 HEAP32[$2 + 312 >> 2] = ($0 | 0) < 200 ? $0 : 200;
}
function std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0));
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0));
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0));
}
function std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20______shared_ptr_emplace_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3496;
 GlTexture___GlTexture_28_29($0 + 12 | 0);
 return $0 | 0;
}
function std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20______shared_ptr_emplace_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3496;
 GlTexture___GlTexture_28_29($0 + 12 | 0);
 dlfree($0);
}
function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function __getTypeName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = __strdup(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function RunContext__haveNewShape_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 >> 2] = $1;
 emscripten_asm_const_iii(3448, 3467, $0 | 0) | 0;
 global$0 = $0 + 16 | 0;
}
function std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51488);
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$0 >> 2]);
 return $0;
}
function legalstub$dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
}
function std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51480);
}
function std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51432);
}
function bool_20emscripten__internal__MemberAccess_JsGrp_2c_20bool___getWire_JsGrp__28bool_20JsGrp____20const__2c_20JsGrp_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAPU8[HEAP32[$0 >> 2] + $1 | 0];
}
function int_20emscripten__internal__MemberAccess_Vec2i_2c_20int___getWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[HEAP32[$0 >> 2] + $1 >> 2];
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function CubeDocBase__solveStop_28_29($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 88 >> 2];
 if (!(!$0 | !HEAPU8[$0 + 32 | 0])) {
  HEAP32[$0 + 28 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
 }
}
function non_virtual_20thunk_20to_20BuildControlBase__progress_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $0 = $0 + -8 | 0;
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1) | 0;
}
function BuildControlBase__reloadWorld_28_29($0) {
 BuildWorld__reClacLimits_28_29(HEAP32[HEAP32[$0 + 12 >> 2] + 128 >> 2]);
 BuildControlBase__makeBuffers_28_29($0);
 HEAP8[HEAP32[$0 + 4 >> 2] + 360 | 0] = 0;
}
function stopSlvRun_28_29() {
 var $0 = 0;
 $0 = HEAP32[HEAP32[11720] + 88 >> 2];
 if (!(!$0 | !HEAPU8[$0 + 32 | 0])) {
  HEAP32[$0 + 28 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
 }
}
function std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 51440);
}
function legalstub$dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function std____2____cloc_28_29() {
 if (!(!!(HEAPU8[51400] != 0) | HEAP8[51400] & 1)) {
  HEAP32[12849] = __newlocale();
  HEAP32[12850] = 0;
  HEAP32[12850] = HEAP32[12850] | 1;
 }
 return HEAP32[12849];
}
function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
 $0 = HEAP32[$0 >> 2];
 $1 = std____2__locale__id____get_28_29($1);
 return HEAP32[HEAP32[$0 + 16 >> 2] + ($1 << 2) >> 2];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
 if (HEAP8[$0 + 11 | 0] < 0) {
  dlfree(HEAP32[$0 >> 2]);
 }
 return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0));
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return ($0 | 0) == ($1 | 0);
 }
 return !strcmp(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
}
function wmemcpy($0, $1, $2) {
 if ($2) {
  while (1) {
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function arg_n($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = (($1 << 2) - ((($1 | 0) != 0) << 2) | 0) + $0 | 0;
 HEAP32[$2 + 8 >> 2] = $0 + 4;
 return HEAP32[$0 >> 2];
}
function __cosdf($0) {
 var $1 = 0;
 $0 = $0 * $0;
 $1 = $0 * $0;
 return Math_fround($0 * -.499999997251031 + 1 + $1 * .04166662332373906 + $0 * $1 * ($0 * 2439044879627741e-20 + -.001388676377460993));
}
function aboutClick_28int_2c_20int_2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(!$2 | (($0 | 0) > 10 | ($1 | 0) > 10))) {
  emscripten_asm_const_iii(1907, 1076, 0) | 0;
 }
}
function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = HEAP32[HEAP32[6132] + (($1 & 255) << 2) >> 2];
 }
 return $1 << 24 >> 24;
}
function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = HEAP32[HEAP32[6520] + (($1 & 255) << 2) >> 2];
 }
 return $1 << 24 >> 24;
}
function std____2__ctype_char____ctype_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 27940;
 $1 = HEAP32[$0 + 8 >> 2];
 if (!(!$1 | !HEAPU8[$0 + 12 | 0])) {
  dlfree($1);
 }
 return $0 | 0;
}
function void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function Vec2i__20emscripten__internal__raw_constructor_Vec2i__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(8);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0 | 0;
}
function std____2__locale__locale_28_29($0) {
 var $1 = 0;
 $1 = $0;
 $0 = HEAP32[std____2__locale____global_28_29() >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}
function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
 dlfree($0);
}
function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = HEAP32[HEAP32[6132] + ($1 << 2) >> 2];
 }
 return $1 | 0;
}
function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = HEAP32[HEAP32[6520] + ($1 << 2) >> 2];
 }
 return $1 | 0;
}
function abort_message($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[5625];
 vfprintf($2, $0, $1);
 fputc($2);
 abort();
 abort();
}
function emscripten__internal__Invoker_bool_2c_20float___invoke_28bool_20_28__29_28float_29_2c_20float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 return FUNCTION_TABLE[$0]($1) | 0;
}
function snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = vsnprintf($0, $1, $2, $3);
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2____stdinbuf_char______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 dlfree($0);
}
function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0));
}
function dynCall_iiiiid($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function __cxx_global_array_dtor_43($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51656);
}
function __cxx_global_array_dtor_41($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51640);
}
function __cxx_global_array_dtor_39($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51624);
}
function __cxx_global_array_dtor_37($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51608);
}
function __cxx_global_array_dtor_35($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51592);
}
function __cxx_global_array_dtor_33($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51576);
}
function __cxx_global_array_dtor_31($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51560);
}
function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
 void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function __cxx_global_array_dtor_2($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(51544);
}
function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 : $2) << 24 >> 24;
}
function std__logic_error___logic_error_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 44096;
 std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}
function std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20_____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 GlTexture___GlTexture_28_29($0 + 12 | 0);
}
function sscanf($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $0 = vsscanf($0, 27888, $1);
 global$0 = $2 + 16 | 0;
 return $0;
}
function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function initCubeEngine_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 populatePicsSide_28PicBucket__29(HEAP32[11988]);
 global$0 = $0 + 16 | 0;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function __wasm_call_ctors() {
 __emscripten_environ_constructor();
 std____2__ios_base__Init__Init_28_29();
 _GLOBAL__sub_I_js_main_cpp();
 FUNCTION_TABLE[718](53304) | 0;
}
function wcslen($0) {
 var $1 = 0, $2 = 0;
 $2 = $0;
 while (1) {
  $1 = $2;
  $2 = $1 + 4 | 0;
  if (HEAP32[$1 >> 2]) {
   continue;
  }
  break;
 }
 return $1 - $0 >> 2;
}
function __wasm_popcnt_i32($0) {
 var $1 = 0, $2 = 0;
 while (1) {
  $2 = $1;
  if ($0) {
   $0 = $0 - 1 & $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2;
}
function wmemset($0, $1, $2) {
 if ($2) {
  while (1) {
   HEAP32[$0 >> 2] = $1;
   $0 = $0 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0) {
 $0 = $0 | 0;
 std____2__ios_base___ios_base_28_29($0);
 return $0 | 0;
}
function __wasm_rotl_i32($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = $1 & 31;
 $3 = (-1 >>> $2 & $0) << $2;
 $2 = $0;
 $0 = 0 - $1 & 31;
 return $3 | ($2 & -1 << $0) >>> $0;
}
function std__terminate_28_29() {
 label$1 : {
  if (!HEAP32[13323]) {
   break label$1;
  }
 }
 FUNCTION_TABLE[HEAP32[11718]]();
 abort_message(43956, 0);
 abort();
}
function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (($1 | 0) > -1 ? $1 : $2) | 0;
}
function BuildControlBase__progress_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1) | 0;
}
function $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = strlen($1) + $1;
 return $0;
}
function setEditAction_28int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[11720];
 HEAP8[$1 + 2504 | 0] = ($0 | 0) == 2;
 HEAP8[$1 + 2505 | 0] = ($0 | 0) != 0;
}
function emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[$0]($1);
}
function dynCall_iiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function std____2____basic_string_common_true_____throw_length_error_28_29_20const() {
 std____2____throw_length_error_28char_20const__29(33964);
 abort();
}
function std____2____vector_base_common_true_____throw_length_error_28_29_20const() {
 std____2____throw_length_error_28char_20const__29(33977);
 abort();
}
function std____2__locale__id____init_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[12857] + 1 | 0;
 HEAP32[12857] = $1;
 HEAP32[$0 + 4 >> 2] = $1;
}
function std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  wmemcpy($0, $1, $2);
 }
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 | 0;
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}
function std____2__locale__facet____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -1;
}
function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0) | 0;
}
function __strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return memcpy($2, $0, $1);
}
function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memcpy($0, $1, $2);
 }
}
function std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
 if ($1) {
  memset($0, $2 & 255, $1);
 }
}
function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1) | 0;
}
function std____2____stdinbuf_char___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 0) | 0;
}
function JsGrp__20emscripten__internal__raw_constructor_JsGrp__28_29() {
 return memset(operator_20new_28unsigned_20long_29(72), 0, 72) | 0;
}
function std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function BuildControlBase__emitTileHover_28int_2c_20BuildControlBase__EActStatus_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function dynCall_fii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2)));
}
function newRestart_28int_29($0) {
 $0 = $0 | 0;
 ModelControlBase__restartSolve_28bool_2c_20bool_29(HEAP32[11720] + 512 | 0, 0, $0 & 1);
}
function dynCall_viif($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function std____2____stdinbuf_char___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 1) | 0;
}
function getTms_28_29() {
 var $0 = 0;
 $0 = HEAP32[11720] + 2552 | 0;
 return +(+HEAPU32[$0 >> 2] + 4294967296 * +HEAP32[$0 + 4 >> 2]);
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $0;
}
function std____2__numpunct_wchar_t____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__numpunct_wchar_t____numpunct_28_29($0));
}
function emscripten__internal__Invoker_double___invoke_28double_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 return +FUNCTION_TABLE[$0]();
}
function emscripten__internal__Invoker_bool___invoke_28bool_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[$0]() | 0;
}
function GLHandler__scrPress_28bool_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
}
function conf_28bool_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[11720];
 HEAP8[$1 + 4 | 0] = $0;
 HEAP32[$1 + 16 >> 2] = 1;
}
function std____2__numpunct_char____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__numpunct_char____numpunct_28_29($0));
}
function __cxx_global_array_dtor_71($0) {
 $0 = $0 | 0;
 $0 = HEAP32[11982];
 if ($0) {
  HEAP32[11983] = $0;
  dlfree($0);
 }
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29($0) {
 $0 = $0 | 0;
 return -1;
}
function dynCall_iif($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function NoiseSlvProgram___NoiseSlvProgram_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(NoiseSlvProgram___NoiseSlvProgram_28_29($0));
}
function std__length_error___length_error_28_29($0) {
 $0 = $0 | 0;
 std__logic_error___logic_error_28_29($0);
 dlfree($0);
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 4;
}
function __wasm_i64_udiv($0, $1, $2) {
 return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2);
}
function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return 2147483647;
}
function emscripten__internal__Invoker_void___invoke_28void_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[$0]();
}
function std____2__locale____imp_____imp_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__locale____imp_____imp_28_29($0));
}
function void_20emscripten__internal__raw_destructor_Vec2i__28Vec2i__29($0) {
 $0 = $0 | 0;
 if ($0) {
  dlfree($0);
 }
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function std__logic_error___logic_error_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std__logic_error___logic_error_28_29($0));
}
function std____2__ios_base___ios_base_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__ios_base___ios_base_28_29($0));
}
function std____2__ctype_char____ctype_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std____2__ctype_char____ctype_28_29($0));
}
function dynCall_iii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function std____2__ctype_wchar_t___do_widen_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}
function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 9 | 0];
}
function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 8 | 0];
}
function BuildProgram___BuildProgram_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(BuildProgram___BuildProgram_28_29($0));
}
function BaseGLWidget___BaseGLWidget_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(BaseGLWidget___BaseGLWidget_28_29($0));
}
function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return 127;
}
function do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __string_read($0, $1, $2) | 0;
}
function legalfunc$wasm2js_scratch_store_i64($0, $1) {
 legalimport$wasm2js_scratch_store_i64($0 | 0, $1 | 0);
}
function main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 emscripten_asm_const_iii(2007, 1076, 0) | 0;
 return 0;
}
function CubeDocBase___CubeDocBase_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(CubeDocBase___CubeDocBase_28_29($0));
}
function freelocale($0) {
 if (($0 | 0) != 0 & ($0 | 0) != 23584 & ($0 | 0) != 23608) {
  dlfree($0);
 }
}
function std____2__ios_base__precision_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function std____2__ios_base__width_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function std____2____time_put____time_put_28_29($0) {
 HEAP32[$0 >> 2] = std____2____cloc_28_29();
}
function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = global$0 - $0 & -16;
 global$0 = $0;
 return $0 | 0;
}
function dynCall_ii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0;
}
function __cxx_global_array_dtor_156($0) {
 $0 = $0 | 0;
 HEAP32[11990] = HEAP32[11990] + 1;
}
function RunContext__doWait_28_29($0) {
 $0 = $0 | 0;
 SolveContext__doRun_28int_29($0, -1);
}
function BaseGLWidget__checkErrors_28char_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function strtoll_l($0, $1, $2, $3) {
 $0 = strtox($0, $1, $2, 0, -2147483648);
 return $0;
}
function dynCall_di($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +FUNCTION_TABLE[$0]($1);
}
function HCException__what_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 4 >> 2];
}
function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}
function strtoull_l($0, $1, $2, $3) {
 $0 = strtox($0, $1, $2, -1, -1);
 return $0;
}
function std____2____throw_runtime_error_28char_20const__29() {
 abort();
 abort();
}
function postReadAllPics_28_29() {
 PicBucket__doReCompress_28_29(HEAP32[11988]);
}
function NoiseSlvProgram__getClass_28_29_20const($0) {
 $0 = $0 | 0;
 return 3;
}
function BuildDimension__BuildPage__BuildPage_28_29($0) {
 memset($0, 0, 2500);
}
function std__exception__what_28_29_20const($0) {
 $0 = $0 | 0;
 return 44026;
}
function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1);
}
function BuildProgram__getClass_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function FlatProgram__getClass_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}
function HCException___HCException_28_29($0) {
 $0 = $0 | 0;
 dlfree($0);
}
function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2);
}
function BaseProgram___BaseProgram_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function __cxa_pure_virtual() {
 abort_message(43996, 0);
 abort();
}
function __growWasmMemory($0) {
 $0 = $0 | 0;
 return abort() | 0;
}
function BuildControlBase__switchOut_28_29($0) {
 $0 = $0 | 0;
}
function SHA1___SHA1_28_29($0) {
 return memset($0, 0, 92);
}
function std__uncaught_exception_28_29() {
 return 0;
}
function dummy($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function __errno_location() {
 return 48008;
}

// EMSCRIPTEN_END_FUNCS

 FUNCTION_TABLE[1] = dummy;
 FUNCTION_TABLE[2] = std__logic_error___logic_error_28_29;
 FUNCTION_TABLE[3] = emscripten__internal__Invoker_bool___invoke_28bool_20_28__29_28_29_29;
 FUNCTION_TABLE[4] = initCubeEngine_28_29;
 FUNCTION_TABLE[5] = emscripten__internal__Invoker_bool_2c_20float___invoke_28bool_20_28__29_28float_29_2c_20float_29;
 FUNCTION_TABLE[6] = cpp_draw_28float_29;
 FUNCTION_TABLE[7] = emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[8] = cpp_start_28int_29;
 FUNCTION_TABLE[9] = emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29;
 FUNCTION_TABLE[10] = resizeGl_28int_2c_20int_29;
 FUNCTION_TABLE[11] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[12] = mouseDown_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[13] = mouseUp_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[14] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[15] = mouseMove_28int_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[16] = mouseDblClick_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[17] = mouseWheel_28int_29;
 FUNCTION_TABLE[18] = emscripten__internal__Invoker_double___invoke_28double_20_28__29_28_29_29;
 FUNCTION_TABLE[19] = getTms_28_29;
 FUNCTION_TABLE[20] = emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[21] = conf_28bool_29;
 FUNCTION_TABLE[22] = cpp_slvrun_28_29;
 FUNCTION_TABLE[23] = setGrpCount_28int_2c_20int_29;
 FUNCTION_TABLE[24] = setPicCount_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[25] = stackState_28int_29;
 FUNCTION_TABLE[26] = setEditAction_28int_29;
 FUNCTION_TABLE[27] = emscripten__internal__Invoker_void___invoke_28void_20_28__29_28_29_29;
 FUNCTION_TABLE[28] = runningRestart_28_29;
 FUNCTION_TABLE[29] = newRestart_28int_29;
 FUNCTION_TABLE[30] = stopSlvRun_28_29;
 FUNCTION_TABLE[31] = emscripten__internal__Invoker_emscripten__val___invoke_28emscripten__val_20_28__29_28_29_29;
 FUNCTION_TABLE[32] = serializeCurrent_28_29;
 FUNCTION_TABLE[33] = emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28emscripten__val_2c_20bool_29_2c_20emscripten__internal___EM_VAL__2c_20bool_29;
 FUNCTION_TABLE[34] = deserializeAndLoad_28emscripten__val_2c_20bool_29;
 FUNCTION_TABLE[35] = Vec2i__20emscripten__internal__raw_constructor_Vec2i__28_29;
 FUNCTION_TABLE[36] = void_20emscripten__internal__raw_destructor_Vec2i__28Vec2i__29;
 FUNCTION_TABLE[37] = int_20emscripten__internal__MemberAccess_Vec2i_2c_20int___getWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i_20const__29;
 FUNCTION_TABLE[38] = void_20emscripten__internal__MemberAccess_Vec2i_2c_20int___setWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i__2c_20int_29;
 FUNCTION_TABLE[39] = JsGrp__20emscripten__internal__raw_constructor_JsGrp__28_29;
 FUNCTION_TABLE[40] = void_20emscripten__internal__raw_destructor_JsGrp__28JsGrp__29;
 FUNCTION_TABLE[41] = emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___20emscripten__internal__MemberAccess_JsGrp_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getWire_JsGrp__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20JsGrp____20const__2c_20JsGrp_20const__29;
 FUNCTION_TABLE[42] = void_20emscripten__internal__MemberAccess_JsGrp_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___setWire_JsGrp__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20JsGrp____20const__2c_20JsGrp__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[43] = int_20emscripten__internal__MemberAccess_Vec2i_2c_20int___getWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i_20const__29;
 FUNCTION_TABLE[44] = void_20emscripten__internal__MemberAccess_Vec2i_2c_20int___setWire_Vec2i__28int_20Vec2i____20const__2c_20Vec2i__2c_20int_29;
 FUNCTION_TABLE[45] = float_20emscripten__internal__MemberAccess_JsGrp_2c_20float___getWire_JsGrp__28float_20JsGrp____20const__2c_20JsGrp_20const__29;
 FUNCTION_TABLE[46] = void_20emscripten__internal__MemberAccess_JsGrp_2c_20float___setWire_JsGrp__28float_20JsGrp____20const__2c_20JsGrp__2c_20float_29;
 FUNCTION_TABLE[47] = Vec2i__20emscripten__internal__MemberAccess_JsGrp_2c_20Vec2i___getWire_JsGrp__28Vec2i_20JsGrp____20const__2c_20JsGrp_20const__29;
 FUNCTION_TABLE[48] = void_20emscripten__internal__MemberAccess_JsGrp_2c_20Vec2i___setWire_JsGrp__28Vec2i_20JsGrp____20const__2c_20JsGrp__2c_20Vec2i__29;
 FUNCTION_TABLE[49] = bool_20emscripten__internal__MemberAccess_JsGrp_2c_20bool___getWire_JsGrp__28bool_20JsGrp____20const__2c_20JsGrp_20const__29;
 FUNCTION_TABLE[50] = void_20emscripten__internal__MemberAccess_JsGrp_2c_20bool___setWire_JsGrp__28bool_20JsGrp____20const__2c_20JsGrp__2c_20bool_29;
 FUNCTION_TABLE[51] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28int_2c_20int_2c_20emscripten__val_29_2c_20int_2c_20int_2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[52] = getToothPossibilities_28int_2c_20int_2c_20emscripten__val_29;
 FUNCTION_TABLE[53] = emscripten__internal__Invoker_void_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28void_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[54] = readCubeToEditor_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[55] = readCubeFromEditor_28int_29;
 FUNCTION_TABLE[56] = emscripten__internal__Invoker_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[57] = readCubeFromSig_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[58] = postReadAllPics_28_29;
 FUNCTION_TABLE[59] = emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[60] = bucketAddFam_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[61] = freeMeshAllocator_28_29;
 FUNCTION_TABLE[62] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool___invoke_28void_20_28__29_28int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool_29_2c_20int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20bool_2c_20bool_29;
 FUNCTION_TABLE[63] = textureParamCube_28int_2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20bool_2c_20bool_29;
 FUNCTION_TABLE[64] = emscripten__internal__Invoker_JsGrp_2c_20int___invoke_28JsGrp_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[65] = textureParamToEditor_28int_29;
 FUNCTION_TABLE[66] = emscripten__internal__Invoker_int_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[67] = getCubeTextureHandle_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[68] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[69] = readCubeTexCoord_28int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[70] = goToSlv_28int_29;
 FUNCTION_TABLE[71] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[72] = aboutClick_28int_2c_20int_2c_20bool_29;
 FUNCTION_TABLE[73] = emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[74] = aboutContinue_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[75] = emscripten__internal__Invoker_bool_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_29_2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[76] = exportModel_28emscripten__val_29;
 FUNCTION_TABLE[77] = __cxx_global_array_dtor;
 FUNCTION_TABLE[78] = RunContext__notifyLastSolution_28bool_29;
 FUNCTION_TABLE[79] = RunContext__notifyFullEnum_28_29;
 FUNCTION_TABLE[80] = RunContext__notifyNotEnoughPieces_28_29;
 FUNCTION_TABLE[81] = RunContext__doStart_28_29;
 FUNCTION_TABLE[82] = RunContext__doWait_28_29;
 FUNCTION_TABLE[83] = RunContext__haveNewShape_28int_29;
 FUNCTION_TABLE[84] = HCException___HCException_28_29;
 FUNCTION_TABLE[85] = HCException__what_28_29_20const;
 FUNCTION_TABLE[86] = __cxa_pure_virtual;
 FUNCTION_TABLE[87] = BaseProgram___BaseProgram_28_29;
 FUNCTION_TABLE[88] = BaseProgram___BaseProgram_28_29_1;
 FUNCTION_TABLE[89] = ShaderProgram__clear_28_29;
 FUNCTION_TABLE[90] = ShaderProgram__successLink_28_29;
 FUNCTION_TABLE[91] = std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[92] = std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[93] = non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[94] = non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[95] = virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[96] = virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[97] = std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[98] = std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2;
 FUNCTION_TABLE[99] = non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29;
 FUNCTION_TABLE[100] = non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[101] = virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29;
 FUNCTION_TABLE[102] = virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[103] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[104] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2;
 FUNCTION_TABLE[105] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[106] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[107] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[108] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[109] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29;
 FUNCTION_TABLE[110] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[111] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29;
 FUNCTION_TABLE[112] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29_1;
 FUNCTION_TABLE[113] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[114] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29;
 FUNCTION_TABLE[115] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[116] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[117] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[118] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[119] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29;
 FUNCTION_TABLE[120] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___underflow_28_29;
 FUNCTION_TABLE[121] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29;
 FUNCTION_TABLE[122] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[123] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[124] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___overflow_28int_29;
 FUNCTION_TABLE[125] = std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[126] = std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[127] = std____2____shared_ptr_emplace_GlTexture_2c_20std____2__allocator_GlTexture__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[128] = std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[129] = HCException___HCException_28_29;
 FUNCTION_TABLE[130] = __cxx_global_array_dtor_156;
 FUNCTION_TABLE[131] = __cxx_global_array_dtor_71;
 FUNCTION_TABLE[132] = ModelControlBase__myPaintGL_28bool_29;
 FUNCTION_TABLE[133] = ModelControlBase__initialized_28_29;
 FUNCTION_TABLE[134] = ModelControlBase__switchIn_28_29;
 FUNCTION_TABLE[135] = BuildControlBase__switchOut_28_29;
 FUNCTION_TABLE[136] = ModelControlBase__scrPress_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[137] = ModelControlBase__scrRelease_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[138] = ModelControlBase__scrMove_28bool_2c_20bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[139] = ModelControlBase__scrDblClick_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[140] = ModelControlBase__clearChoise_28_29;
 FUNCTION_TABLE[141] = ModelControlBase__drawTargets_28bool_29;
 FUNCTION_TABLE[142] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[143] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[144] = BaseGLWidget___BaseGLWidget_28_29;
 FUNCTION_TABLE[145] = BaseGLWidget___BaseGLWidget_28_29_1;
 FUNCTION_TABLE[146] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[147] = BaseGLWidget__rotate_28BaseGLWidget__EAxis_2c_20int_2c_20int_29;
 FUNCTION_TABLE[148] = BuildControlBase__myPaintGL_28bool_29;
 FUNCTION_TABLE[149] = BuildControlBase__initialized_28_29;
 FUNCTION_TABLE[150] = BuildControlBase__switchIn_28_29;
 FUNCTION_TABLE[151] = BuildControlBase__switchOut_28_29;
 FUNCTION_TABLE[152] = GLHandler__scrPress_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[153] = GLHandler__scrPress_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[154] = BuildControlBase__scrMove_28bool_2c_20bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[155] = BuildControlBase__scrDblClick_28bool_2c_20int_2c_20int_29;
 FUNCTION_TABLE[156] = BuildControlBase__clearChoise_28_29;
 FUNCTION_TABLE[157] = BuildControlBase__drawTargets_28bool_29;
 FUNCTION_TABLE[158] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[159] = BuildControlBase__emitTileHover_28int_2c_20BuildControlBase__EActStatus_29;
 FUNCTION_TABLE[160] = BuildControlBase__fadeTimeout_28float_29;
 FUNCTION_TABLE[161] = BuildControlBase__progress_28float_29;
 FUNCTION_TABLE[162] = non_virtual_20thunk_20to_20BuildControlBase__progress_28float_29;
 FUNCTION_TABLE[163] = UniformParam__getLocation_28unsigned_20int_29;
 FUNCTION_TABLE[164] = AttribParam__getLocation_28unsigned_20int_29;
 FUNCTION_TABLE[165] = ShaderProgram___ShaderProgram_28_29;
 FUNCTION_TABLE[166] = BaseProgram___BaseProgram_28_29_1;
 FUNCTION_TABLE[167] = BuildProgram___BuildProgram_28_29;
 FUNCTION_TABLE[168] = BuildProgram___BuildProgram_28_29_1;
 FUNCTION_TABLE[169] = BuildProgram__getClass_28_29_20const;
 FUNCTION_TABLE[170] = BuildProgram__getCodes_28_29;
 FUNCTION_TABLE[171] = NoiseSlvProgram___NoiseSlvProgram_28_29;
 FUNCTION_TABLE[172] = NoiseSlvProgram___NoiseSlvProgram_28_29_1;
 FUNCTION_TABLE[173] = NoiseSlvProgram__getClass_28_29_20const;
 FUNCTION_TABLE[174] = NoiseSlvProgram__getCodes_28_29;
 FUNCTION_TABLE[175] = CubeDocBase___CubeDocBase_28_29;
 FUNCTION_TABLE[176] = CubeDocBase___CubeDocBase_28_29_1;
 FUNCTION_TABLE[177] = CubeDocBase__transferShape_28_29;
 FUNCTION_TABLE[178] = CubeDocBase__onGenShape_28bool_2c_20GenTemplate_20const__2c_20OrderTemplate_20const__29;
 FUNCTION_TABLE[179] = CubeDocBase__solveGo_28SlvCube__2c_20bool_29;
 FUNCTION_TABLE[180] = CubeDocBase__solveStop_28_29;
 FUNCTION_TABLE[181] = FloatProgress__progress_28float_29;
 FUNCTION_TABLE[182] = SlerpProgress__progress_28float_29;
 FUNCTION_TABLE[183] = FlatProgram___FlatProgram_28_29;
 FUNCTION_TABLE[184] = FlatProgram__getClass_28_29_20const;
 FUNCTION_TABLE[185] = FlatProgram__getCodes_28_29;
 FUNCTION_TABLE[186] = std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29;
 FUNCTION_TABLE[187] = std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1;
 FUNCTION_TABLE[188] = virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29;
 FUNCTION_TABLE[189] = virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1;
 FUNCTION_TABLE[190] = std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[191] = std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[192] = std____2____shared_ptr_emplace_JsGlTexture_2c_20std____2__allocator_JsGlTexture__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[193] = HCException___HCException_28_29;
 FUNCTION_TABLE[194] = dummy;
 FUNCTION_TABLE[195] = HCException___HCException_28_29;
 FUNCTION_TABLE[196] = std____2____shared_ptr_pointer_Shape__2c_20std____2__default_delete_Shape__2c_20std____2__allocator_Shape__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[197] = std____2____shared_ptr_pointer_Shape__2c_20std____2__default_delete_Shape__2c_20std____2__allocator_Shape__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[198] = HCException___HCException_28_29;
 FUNCTION_TABLE[199] = HCException___HCException_28_29;
 FUNCTION_TABLE[200] = std____2____shared_ptr_pointer_Mesh__CommonData__2c_20std____2__default_delete_Mesh__CommonData__2c_20std____2__allocator_Mesh__CommonData__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[201] = std____2____shared_ptr_pointer_Mesh__CommonData__2c_20std____2__default_delete_Mesh__CommonData__2c_20std____2__allocator_Mesh__CommonData__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[202] = HCException___HCException_28_29;
 FUNCTION_TABLE[203] = fmt_fp;
 FUNCTION_TABLE[204] = pop_arg_long_double;
 FUNCTION_TABLE[205] = sn_write;
 FUNCTION_TABLE[206] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29;
 FUNCTION_TABLE[207] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[208] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[209] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[210] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[211] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[212] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[213] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29;
 FUNCTION_TABLE[214] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[215] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[216] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29;
 FUNCTION_TABLE[217] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[218] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[219] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[220] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[221] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29;
 FUNCTION_TABLE[222] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[223] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29;
 FUNCTION_TABLE[224] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[225] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[226] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[227] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[228] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2;
 FUNCTION_TABLE[229] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[230] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[231] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[232] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[233] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29;
 FUNCTION_TABLE[234] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[235] = std____2__ios_base___ios_base_28_29;
 FUNCTION_TABLE[236] = std____2__ios_base___ios_base_28_29_1;
 FUNCTION_TABLE[237] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29;
 FUNCTION_TABLE[238] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1;
 FUNCTION_TABLE[239] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29;
 FUNCTION_TABLE[240] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1;
 FUNCTION_TABLE[241] = __stdio_close;
 FUNCTION_TABLE[242] = __stdio_read;
 FUNCTION_TABLE[243] = __stdio_seek;
 FUNCTION_TABLE[244] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[245] = __stdio_write;
 FUNCTION_TABLE[246] = __emscripten_stdout_seek;
 FUNCTION_TABLE[247] = __cxx_global_array_dtor_1;
 FUNCTION_TABLE[248] = std____2____stdinbuf_char______stdinbuf_28_29;
 FUNCTION_TABLE[249] = std____2____stdinbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[250] = std____2____stdinbuf_char___underflow_28_29;
 FUNCTION_TABLE[251] = std____2____stdinbuf_char___uflow_28_29;
 FUNCTION_TABLE[252] = std____2____stdinbuf_char___pbackfail_28int_29;
 FUNCTION_TABLE[253] = std____2____stdinbuf_wchar_t______stdinbuf_28_29;
 FUNCTION_TABLE[254] = std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[255] = std____2____stdinbuf_wchar_t___underflow_28_29;
 FUNCTION_TABLE[256] = std____2____stdinbuf_wchar_t___uflow_28_29;
 FUNCTION_TABLE[257] = std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29;
 FUNCTION_TABLE[258] = std____2____stdinbuf_char______stdinbuf_28_29;
 FUNCTION_TABLE[259] = std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[260] = std____2____stdoutbuf_char___sync_28_29;
 FUNCTION_TABLE[261] = std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[262] = std____2____stdoutbuf_char___overflow_28int_29;
 FUNCTION_TABLE[263] = std____2____stdinbuf_wchar_t______stdinbuf_28_29;
 FUNCTION_TABLE[264] = std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[265] = std____2____stdoutbuf_char___sync_28_29;
 FUNCTION_TABLE[266] = std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[267] = std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29;
 FUNCTION_TABLE[268] = do_read;
 FUNCTION_TABLE[269] = dlfree;
 FUNCTION_TABLE[270] = BuildControlBase__switchOut_28_29;
 FUNCTION_TABLE[271] = std____2__locale__id____init_28_29;
 FUNCTION_TABLE[272] = void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29;
 FUNCTION_TABLE[273] = __cxx_global_array_dtor_54;
 FUNCTION_TABLE[274] = __cxx_global_array_dtor_69;
 FUNCTION_TABLE[275] = __cxx_global_array_dtor_84;
 FUNCTION_TABLE[276] = __cxx_global_array_dtor_108;
 FUNCTION_TABLE[277] = __cxx_global_array_dtor_132;
 FUNCTION_TABLE[278] = __cxx_global_array_dtor_135;
 FUNCTION_TABLE[279] = __cxx_global_array_dtor_2;
 FUNCTION_TABLE[280] = __cxx_global_array_dtor_31;
 FUNCTION_TABLE[281] = __cxx_global_array_dtor_33;
 FUNCTION_TABLE[282] = __cxx_global_array_dtor_35;
 FUNCTION_TABLE[283] = __cxx_global_array_dtor_37;
 FUNCTION_TABLE[284] = __cxx_global_array_dtor_39;
 FUNCTION_TABLE[285] = __cxx_global_array_dtor_41;
 FUNCTION_TABLE[286] = __cxx_global_array_dtor_43;
 FUNCTION_TABLE[287] = std____2__locale____imp_____imp_28_29;
 FUNCTION_TABLE[288] = std____2__locale____imp_____imp_28_29_1;
 FUNCTION_TABLE[289] = std____2__locale__facet____on_zero_shared_28_29;
 FUNCTION_TABLE[290] = std____2__ctype_char____ctype_28_29;
 FUNCTION_TABLE[291] = std____2__ctype_char____ctype_28_29_1;
 FUNCTION_TABLE[292] = std____2__ctype_char___do_toupper_28char_29_20const;
 FUNCTION_TABLE[293] = std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[294] = std____2__ctype_char___do_tolower_28char_29_20const;
 FUNCTION_TABLE[295] = std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[296] = std____2__ctype_wchar_t___do_widen_28char_29_20const;
 FUNCTION_TABLE[297] = std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const;
 FUNCTION_TABLE[298] = std____2__ctype_char___do_narrow_28char_2c_20char_29_20const;
 FUNCTION_TABLE[299] = std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[300] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[301] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1;
 FUNCTION_TABLE[302] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[303] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const;
 FUNCTION_TABLE[304] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[305] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[306] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[307] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[308] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[309] = std____2__numpunct_char____numpunct_28_29;
 FUNCTION_TABLE[310] = std____2__numpunct_char____numpunct_28_29_1;
 FUNCTION_TABLE[311] = std____2__numpunct_char___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[312] = std____2__numpunct_char___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[313] = std____2__numpunct_char___do_grouping_28_29_20const;
 FUNCTION_TABLE[314] = std____2__numpunct_char___do_truename_28_29_20const;
 FUNCTION_TABLE[315] = std____2__numpunct_char___do_falsename_28_29_20const;
 FUNCTION_TABLE[316] = std____2__numpunct_wchar_t____numpunct_28_29;
 FUNCTION_TABLE[317] = std____2__numpunct_wchar_t____numpunct_28_29_1;
 FUNCTION_TABLE[318] = std____2__ios_base__precision_28_29_20const;
 FUNCTION_TABLE[319] = std____2__ios_base__width_28_29_20const;
 FUNCTION_TABLE[320] = std____2__numpunct_wchar_t___do_grouping_28_29_20const;
 FUNCTION_TABLE[321] = std____2__numpunct_wchar_t___do_truename_28_29_20const;
 FUNCTION_TABLE[322] = std____2__numpunct_wchar_t___do_falsename_28_29_20const;
 FUNCTION_TABLE[323] = dummy;
 FUNCTION_TABLE[324] = HCException___HCException_28_29;
 FUNCTION_TABLE[325] = HCException___HCException_28_29;
 FUNCTION_TABLE[326] = std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const;
 FUNCTION_TABLE[327] = std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[328] = std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[329] = std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[330] = std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const;
 FUNCTION_TABLE[331] = std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[332] = std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const;
 FUNCTION_TABLE[333] = std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[334] = std____2__ctype_wchar_t___do_widen_28char_29_20const;
 FUNCTION_TABLE[335] = std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const;
 FUNCTION_TABLE[336] = std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const;
 FUNCTION_TABLE[337] = std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[338] = HCException___HCException_28_29;
 FUNCTION_TABLE[339] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[340] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[341] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[342] = BuildProgram__getClass_28_29_20const;
 FUNCTION_TABLE[343] = BuildProgram__getClass_28_29_20const;
 FUNCTION_TABLE[344] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[345] = BuildProgram__getClass_28_29_20const;
 FUNCTION_TABLE[346] = HCException___HCException_28_29;
 FUNCTION_TABLE[347] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[348] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const;
 FUNCTION_TABLE[349] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[350] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[351] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[352] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[353] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[354] = HCException___HCException_28_29;
 FUNCTION_TABLE[355] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[356] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const;
 FUNCTION_TABLE[357] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[358] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[359] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[360] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[361] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[362] = HCException___HCException_28_29;
 FUNCTION_TABLE[363] = HCException___HCException_28_29;
 FUNCTION_TABLE[364] = dummy;
 FUNCTION_TABLE[365] = HCException___HCException_28_29;
 FUNCTION_TABLE[366] = std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[367] = std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[368] = std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[369] = dummy;
 FUNCTION_TABLE[370] = HCException___HCException_28_29;
 FUNCTION_TABLE[371] = std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[372] = std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[373] = std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[374] = HCException___HCException_28_29;
 FUNCTION_TABLE[375] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[376] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[377] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[378] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[379] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[380] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[381] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[382] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[383] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[384] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[385] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[386] = HCException___HCException_28_29;
 FUNCTION_TABLE[387] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[388] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[389] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[390] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[391] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[392] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[393] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[394] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[395] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[396] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[397] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[398] = HCException___HCException_28_29;
 FUNCTION_TABLE[399] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const;
 FUNCTION_TABLE[400] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const;
 FUNCTION_TABLE[401] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const;
 FUNCTION_TABLE[402] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[403] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[404] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const;
 FUNCTION_TABLE[405] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[406] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const;
 FUNCTION_TABLE[407] = HCException___HCException_28_29;
 FUNCTION_TABLE[408] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const;
 FUNCTION_TABLE[409] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const;
 FUNCTION_TABLE[410] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const;
 FUNCTION_TABLE[411] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[412] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[413] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const;
 FUNCTION_TABLE[414] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[415] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const;
 FUNCTION_TABLE[416] = dummy;
 FUNCTION_TABLE[417] = HCException___HCException_28_29;
 FUNCTION_TABLE[418] = FlatProgram__getClass_28_29_20const;
 FUNCTION_TABLE[419] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[420] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[421] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[422] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[423] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[424] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[425] = std____2____time_get_c_storage_char_____weeks_28_29_20const;
 FUNCTION_TABLE[426] = std____2____time_get_c_storage_char_____months_28_29_20const;
 FUNCTION_TABLE[427] = std____2____time_get_c_storage_char_____am_pm_28_29_20const;
 FUNCTION_TABLE[428] = std____2____time_get_c_storage_char_____c_28_29_20const;
 FUNCTION_TABLE[429] = std____2____time_get_c_storage_char_____r_28_29_20const;
 FUNCTION_TABLE[430] = std____2____time_get_c_storage_char_____x_28_29_20const;
 FUNCTION_TABLE[431] = std____2____time_get_c_storage_char_____X_28_29_20const;
 FUNCTION_TABLE[432] = dummy;
 FUNCTION_TABLE[433] = HCException___HCException_28_29;
 FUNCTION_TABLE[434] = FlatProgram__getClass_28_29_20const;
 FUNCTION_TABLE[435] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[436] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[437] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[438] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[439] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[440] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[441] = std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const;
 FUNCTION_TABLE[442] = std____2____time_get_c_storage_wchar_t_____months_28_29_20const;
 FUNCTION_TABLE[443] = std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const;
 FUNCTION_TABLE[444] = std____2____time_get_c_storage_wchar_t_____c_28_29_20const;
 FUNCTION_TABLE[445] = std____2____time_get_c_storage_wchar_t_____r_28_29_20const;
 FUNCTION_TABLE[446] = std____2____time_get_c_storage_wchar_t_____x_28_29_20const;
 FUNCTION_TABLE[447] = std____2____time_get_c_storage_wchar_t_____X_28_29_20const;
 FUNCTION_TABLE[448] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1;
 FUNCTION_TABLE[449] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29;
 FUNCTION_TABLE[450] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[451] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1;
 FUNCTION_TABLE[452] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29;
 FUNCTION_TABLE[453] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[454] = HCException___HCException_28_29;
 FUNCTION_TABLE[455] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[456] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[457] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[458] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[459] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[460] = std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[461] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[462] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[463] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[464] = HCException___HCException_28_29;
 FUNCTION_TABLE[465] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[466] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[467] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[468] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[469] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[470] = std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[471] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[472] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[473] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[474] = HCException___HCException_28_29;
 FUNCTION_TABLE[475] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[476] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[477] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[478] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[479] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[480] = std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[481] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[482] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[483] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[484] = HCException___HCException_28_29;
 FUNCTION_TABLE[485] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[486] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[487] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[488] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[489] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[490] = std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[491] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[492] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[493] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[494] = HCException___HCException_28_29;
 FUNCTION_TABLE[495] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[496] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const;
 FUNCTION_TABLE[497] = HCException___HCException_28_29;
 FUNCTION_TABLE[498] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[499] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const;
 FUNCTION_TABLE[500] = HCException___HCException_28_29;
 FUNCTION_TABLE[501] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[502] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[503] = HCException___HCException_28_29;
 FUNCTION_TABLE[504] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[505] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[506] = HCException___HCException_28_29;
 FUNCTION_TABLE[507] = std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[508] = std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[509] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[510] = HCException___HCException_28_29;
 FUNCTION_TABLE[511] = std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[512] = std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[513] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[514] = BaseProgram___BaseProgram_28_29_1;
 FUNCTION_TABLE[515] = demangling_terminate_handler_28_29;
 FUNCTION_TABLE[516] = std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[517] = std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[518] = std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[519] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[520] = $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[521] = BaseGLWidget__checkErrors_28char_20const__29;
 FUNCTION_TABLE[522] = $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const;
 FUNCTION_TABLE[523] = dummy;
 FUNCTION_TABLE[524] = HCException___HCException_28_29;
 FUNCTION_TABLE[525] = BaseProgram___BaseProgram_28_29_1;
 FUNCTION_TABLE[526] = $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[527] = HCException___HCException_28_29;
 FUNCTION_TABLE[528] = $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[529] = $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const;
 FUNCTION_TABLE[530] = HCException___HCException_28_29;
 FUNCTION_TABLE[531] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[532] = $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[533] = HCException___HCException_28_29;
 FUNCTION_TABLE[534] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[535] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[536] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[537] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[538] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[539] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[540] = HCException___HCException_28_29;
 FUNCTION_TABLE[541] = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[542] = HCException___HCException_28_29;
 FUNCTION_TABLE[543] = $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[544] = HCException___HCException_28_29;
 FUNCTION_TABLE[545] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[546] = HCException___HCException_28_29;
 FUNCTION_TABLE[547] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[548] = HCException___HCException_28_29;
 FUNCTION_TABLE[549] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[550] = HCException___HCException_28_29;
 FUNCTION_TABLE[551] = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[552] = HCException___HCException_28_29;
 FUNCTION_TABLE[553] = $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[554] = HCException___HCException_28_29;
 FUNCTION_TABLE[555] = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[556] = HCException___HCException_28_29;
 FUNCTION_TABLE[557] = $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[558] = HCException___HCException_28_29;
 FUNCTION_TABLE[559] = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[560] = HCException___HCException_28_29;
 FUNCTION_TABLE[561] = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[562] = HCException___HCException_28_29;
 FUNCTION_TABLE[563] = $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[564] = HCException___HCException_28_29;
 FUNCTION_TABLE[565] = $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[566] = HCException___HCException_28_29;
 FUNCTION_TABLE[567] = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[568] = HCException___HCException_28_29;
 FUNCTION_TABLE[569] = $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[570] = HCException___HCException_28_29;
 FUNCTION_TABLE[571] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[572] = $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[573] = HCException___HCException_28_29;
 FUNCTION_TABLE[574] = $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[575] = HCException___HCException_28_29;
 FUNCTION_TABLE[576] = $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[577] = HCException___HCException_28_29;
 FUNCTION_TABLE[578] = $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[579] = HCException___HCException_28_29;
 FUNCTION_TABLE[580] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[581] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[582] = HCException___HCException_28_29;
 FUNCTION_TABLE[583] = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[584] = HCException___HCException_28_29;
 FUNCTION_TABLE[585] = $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[586] = HCException___HCException_28_29;
 FUNCTION_TABLE[587] = $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[588] = HCException___HCException_28_29;
 FUNCTION_TABLE[589] = $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[590] = HCException___HCException_28_29;
 FUNCTION_TABLE[591] = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[592] = HCException___HCException_28_29;
 FUNCTION_TABLE[593] = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[594] = HCException___HCException_28_29;
 FUNCTION_TABLE[595] = $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[596] = HCException___HCException_28_29;
 FUNCTION_TABLE[597] = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[598] = HCException___HCException_28_29;
 FUNCTION_TABLE[599] = $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[600] = HCException___HCException_28_29;
 FUNCTION_TABLE[601] = $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[602] = HCException___HCException_28_29;
 FUNCTION_TABLE[603] = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[604] = HCException___HCException_28_29;
 FUNCTION_TABLE[605] = $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[606] = HCException___HCException_28_29;
 FUNCTION_TABLE[607] = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[608] = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const;
 FUNCTION_TABLE[609] = HCException___HCException_28_29;
 FUNCTION_TABLE[610] = $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[611] = HCException___HCException_28_29;
 FUNCTION_TABLE[612] = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[613] = HCException___HCException_28_29;
 FUNCTION_TABLE[614] = $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[615] = HCException___HCException_28_29;
 FUNCTION_TABLE[616] = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[617] = HCException___HCException_28_29;
 FUNCTION_TABLE[618] = $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[619] = HCException___HCException_28_29;
 FUNCTION_TABLE[620] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[621] = HCException___HCException_28_29;
 FUNCTION_TABLE[622] = $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[623] = $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const;
 FUNCTION_TABLE[624] = HCException___HCException_28_29;
 FUNCTION_TABLE[625] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[626] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[627] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[628] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[629] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[630] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[631] = HCException___HCException_28_29;
 FUNCTION_TABLE[632] = $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[633] = HCException___HCException_28_29;
 FUNCTION_TABLE[634] = $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[635] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[636] = HCException___HCException_28_29;
 FUNCTION_TABLE[637] = $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[638] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[639] = HCException___HCException_28_29;
 FUNCTION_TABLE[640] = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[641] = HCException___HCException_28_29;
 FUNCTION_TABLE[642] = $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[643] = HCException___HCException_28_29;
 FUNCTION_TABLE[644] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[645] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[646] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[647] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[648] = HCException___HCException_28_29;
 FUNCTION_TABLE[649] = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[650] = HCException___HCException_28_29;
 FUNCTION_TABLE[651] = $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[652] = HCException___HCException_28_29;
 FUNCTION_TABLE[653] = $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[654] = HCException___HCException_28_29;
 FUNCTION_TABLE[655] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[656] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[657] = $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[658] = $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[659] = HCException___HCException_28_29;
 FUNCTION_TABLE[660] = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[661] = HCException___HCException_28_29;
 FUNCTION_TABLE[662] = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[663] = HCException___HCException_28_29;
 FUNCTION_TABLE[664] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[665] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[666] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[667] = $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[668] = $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[669] = HCException___HCException_28_29;
 FUNCTION_TABLE[670] = $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[671] = HCException___HCException_28_29;
 FUNCTION_TABLE[672] = $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[673] = HCException___HCException_28_29;
 FUNCTION_TABLE[674] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[675] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[676] = $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[677] = $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[678] = HCException___HCException_28_29;
 FUNCTION_TABLE[679] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[680] = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[681] = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[682] = HCException___HCException_28_29;
 FUNCTION_TABLE[683] = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[684] = HCException___HCException_28_29;
 FUNCTION_TABLE[685] = $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[686] = $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[687] = $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[688] = HCException___HCException_28_29;
 FUNCTION_TABLE[689] = $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[690] = $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[691] = $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[692] = HCException___HCException_28_29;
 FUNCTION_TABLE[693] = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[694] = HCException___HCException_28_29;
 FUNCTION_TABLE[695] = HCException___HCException_28_29;
 FUNCTION_TABLE[696] = std__exception__what_28_29_20const;
 FUNCTION_TABLE[697] = std__logic_error___logic_error_28_29_1;
 FUNCTION_TABLE[698] = HCException__what_28_29_20const;
 FUNCTION_TABLE[699] = std__length_error___length_error_28_29;
 FUNCTION_TABLE[700] = dummy;
 FUNCTION_TABLE[701] = HCException___HCException_28_29;
 FUNCTION_TABLE[702] = BuildControlBase__switchOut_28_29;
 FUNCTION_TABLE[703] = BuildControlBase__switchOut_28_29;
 FUNCTION_TABLE[704] = __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[705] = HCException___HCException_28_29;
 FUNCTION_TABLE[706] = __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[707] = __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[708] = __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[709] = __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[710] = HCException___HCException_28_29;
 FUNCTION_TABLE[711] = __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[712] = __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[713] = __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[714] = HCException___HCException_28_29;
 FUNCTION_TABLE[715] = __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[716] = __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[717] = __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[718] = EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": dlmalloc, 
  "main": main, 
  "__errno_location": __errno_location, 
  "free": dlfree, 
  "_ZSt18uncaught_exceptionv": std__uncaught_exception_28_29, 
  "__cxa_demangle": __cxa_demangle, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "stackAlloc": stackAlloc, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_i": emscripten__internal__Invoker_bool___invoke_28bool_20_28__29_28_29_29, 
  "dynCall_iif": dynCall_iif, 
  "dynCall_if": emscripten__internal__Invoker_bool_2c_20float___invoke_28bool_20_28__29_28float_29_2c_20float_29, 
  "dynCall_vii": emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, 
  "dynCall_vi": emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29, 
  "dynCall_viii": emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29, 
  "dynCall_viiii": emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20int_29, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_di": dynCall_di, 
  "dynCall_d": emscripten__internal__Invoker_double___invoke_28double_20_28__29_28_29_29, 
  "dynCall_v": emscripten__internal__Invoker_void___invoke_28void_20_28__29_28_29_29, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_fii": dynCall_fii, 
  "dynCall_viif": dynCall_viif, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_iiii": emscripten__internal__Invoker_int_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29, 
  "dynCall_viiiiii": legalstub$dynCall_viijii, 
  "dynCall_viiiffffffiiiiiiii": dynCall_viiiffffffiiiiiiii, 
  "dynCall_viiffffffiiiiiiii": dynCall_viiffffffiiiiiiii, 
  "dynCall_viiiidiii": dynCall_viiiidiii, 
  "dynCall_viiidiii": emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_2c_20double_2c_20int_2c_20int_2c_20int_29, 
  "dynCall_viijii": legalstub$dynCall_viijii, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_iidiiii": dynCall_iidiiii, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iiiiiiiii": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiii": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiij": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiid": dynCall_iiiiid, 
  "dynCall_iiiiijj": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiiii": dynCall_iiiiiiii, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj
};
}

var writeSegment = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(wasmMemory.buffer);
writeSegment(1024, "RVJST1I6IABub3RpZnlFcnJvcihVVEY4VG9TdHJpbmcoJDApKQBpAGhpZGVFcnJvcigpAABzbHZTdGF0KCQwLCAkMSkAaWkAdXBkYXRlSXNSdW5uaW5nKCQwKQBpAEZ1bGwtZW51bQAicmV0dXJuIGVkaXRpbmdDdWJlSWQiAE5vdCBlbm91Z2ggcGllY2VzIHNlbGVjdGVkAGxhc3RGYW1BZGRlZCA9IHBpY3NBZGRGYW1pbHkoVVRGOFRvU3RyaW5nKCQwKSwgVVRGOFRvU3RyaW5nKCQxKSkAaWkAcGljc0FkZEN1YmUoVVRGOFRvU3RyaW5nKCQwKSwgVVRGOFRvU3RyaW5nKCQxKSwgJDIsIGZhbHNlLCBsYXN0RmFtQWRkZWQpAGlpaQBmYW0ub25SZXNldFNldENvdW50ID09IDEAMTFIQ0V4Y2VwdGlvbgAAADCuAABEBQAAMKwAAHNldEZhbUNoZWNrKFVURjhUb1N0cmluZygkMCksIHRydWUpACNteWNhbnZhcwBuby1zdWNoLWN1YmUoc2MpIABFUlIgbm8tc3VjaC1jdWJlKHNwKSAARVJSIHJlbEluZGV4IHRvbyBiaWcgACAAU0VULVBJQyBncnA9ACBkZWZpPQAgPSAAQXJyYXkAcHVzaABsZW5ndGgAbm8tc3VjaC1jdWJlKHJkZSkgACFkZWZhdWx0Q3ViZUJpdHMuZW1wdHkoKQByZWFkQ3ViZVRvRWRpdG9yIEdPVFNJRyAAYml0cy5zaXplKCkgPT0gOQBjdWJlWyQwXVskMV0gPSAkMgBpaWkAcmV0dXJuIGN1YmVbJDBdWyQxXQBwcCAhPSAtMQByZWFkQ3ViZUZyb21FZGl0b3IgU0lHPQAgYml0Q291bnQ9AG5vLXN1Y2gtY3ViZSh0cGMpIABidWNrZXQuZ3RleHMuc2l6ZSgpID4gMABVbmV4cGVjdGVkIGRyYXd0eXBlIABuby1zdWNoLWN1YmUodHBlKSAAIwBuby1zdWNoLWN1YmUgAGNyZWF0aW5nIE5ldy1UZXggACBkcmF3VHlwZT0AIHN6PQB4AG5vLXN1Y2gtY3ViZSAoY3RjKQBBQzQ1NUE3ODcyNkRBM0YxRjExRjVDMDhBNzIxNjlCMEMzMzlENjQ1AGVuYWJsZUtleSgpAHBhc3NQcm9tcHQoTW9kdWxlLmFib3V0Q29udGludWUpACJyZXR1cm4gbmV3IERhdGUoKS52YWx1ZU9mKCkiAG1vZGVsXwBfAG10bGxpYiAALm10bAAKAG5hbWUAb2JqAG10bABzdGFydF9mcm9tX2NwcCgpAGluaXRDdWJlRW5naW5lAGNwcF9kcmF3AGNwcF9zdGFydAByZXNpemVHbABtb3VzZURvd24AbW91c2VVcABtb3VzZU1vdmUAbW91c2VEYmxDbGljawBtb3VzZVdoZWVsAGdldFRtcwBjb25mAGNwcF9zbHZydW4Ac2V0R3JwQ291bnQAc2V0UGljQ291bnQAc3RhY2tTdGF0ZQBzZXRFZGl0QWN0aW9uAHJ1bm5pbmdSZXN0YXJ0AG5ld1Jlc3RhcnQAc3RvcFNsdlJ1bgBzZXJpYWxpemVDdXJyZW50AGRlc2VyaWFsaXplQW5kTG9hZABWZWMyaQB5AEpzR3JwAGNvbG9yQmFja1N0cgBjb2xvckZyb250U3RyAGJsYWNrU2VsAGxhc3RVcmwAZHJhd1R5cGUAcm90QW5nbGUAaW1nWm9vbQBpbWdPZmZzZXQAdHdvQ29sb3IAZ2V0VG9vdGhQb3NzaWJpbGl0aWVzAHJlYWRDdWJlVG9FZGl0b3IAcmVhZEN1YmVGcm9tRWRpdG9yAHJlYWRDdWJlRnJvbVNpZwBwb3N0UmVhZEFsbFBpY3MAYnVja2V0QWRkRmFtAGZyZWVNZXNoQWxsb2NhdG9yAHRleHR1cmVQYXJhbUN1YmUAdGV4dHVyZVBhcmFtVG9FZGl0b3IAZ2V0Q3ViZVRleHR1cmVIYW5kbGUAcmVhZEN1YmVUZXhDb29yZABnb1RvU2x2AGFib3V0Q2xpY2sAYWJvdXRDb250aW51ZQBleHBvcnRNb2RlbAAAAAAAAAB4CgAATgAAAE8AAABQAAAAUQAAAFIAAABTAAAAMTBSdW5Db250ZXh0ADEyU29sdmVDb250ZXh0AAiuAABhCgAAMK4AAFQKAABwCgAAcmVxdWVzdEFuaW0oKQAAAAAAAABUBQAAAQAAAFQAAABVAAAARVhDRVBUSU9OOiAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQAAAAAAFAsAAFYAAAAxMVNoYWRlclBhcmFtAAAACK4AAAQLAAAAAAAATAsAAFcAAABYAAAAWQAAAFYAAABWAAAAWgAAADExQmFzZVByb2dyYW0AAAAwrgAAPAsAADQRAAAoaW4uc2l6ZSgpICUgMikgPT0gMAB1bmV4cGVjdGVkIGNoYXJhY3RlcgBXcm9uZyBTTFYgaW5kZXggAABAAAAAAAAAAMwMAABbAAAAXAAAADgAAAD4////zAwAAF0AAABeAAAAwP///8D////MDAAAXwAAAGAAAACgCwAABAwAAEAMAABUDAAAaAwAAHwMAAAsDAAAGAwAAMgLAAC0CwAAQAAAAAAAAAC8VwAAYQAAAGIAAAA4AAAA+P///7xXAABjAAAAZAAAAMD////A////vFcAAGUAAABmAAAAQAAAAAAAAABMVgAAZwAAAGgAAADA////wP///0xWAABpAAAAagAAADgAAAAAAAAA3FYAAGsAAABsAAAAyP///8j////cVgAAbQAAAG4AAABOU3QzX18yMThiYXNpY19zdHJpbmdzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFTlNfOWFsbG9jYXRvckljRUVFRQAAAAAwrgAAhAwAALxXAAAAAAAAXA0AAG8AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAHsAAAB8AAAATlN0M19fMjE1YmFzaWNfc3RyaW5nYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUAAAAwrgAAGA0AANhVAAByZXF1ZXN0U2x2UnVuKCkAdXBkYXRlU2hhcGVGY24oJDApAGkAAAAAaK0AAIytAABorQAAmK0AAAAAAAD8DQAAfQAAAH4AAAB/AAAAgAAAAIEAAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk5R2xUZXh0dXJlTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAMK4AALwNAACUhAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUATlN0M19fMjIxX19iYXNpY19zdHJpbmdfY29tbW9uSUxiMUVFRQAAAAAIrgAARw4AAIyuAAAIDgAAAAAAAAEAAABwDgAAAAAAAHStAABpaQAAdK0AAOytAABpaWYAaK0AALytAAB2aWkAaK0AALytAAC8rQAAdmlpaQ==");
writeSegment(3792, "aK0AALytAAC8rQAAvK0AAHZpaWlp");
writeSegment(3824, "aK0AALytAAC8rQAAvK0AALytAAB2aWlpaWkAAPitAABkaQAAaK0AAHStAABorQAAdmkAADwPAABOMTBlbXNjcmlwdGVuM3ZhbEUAAAiuAAAoDwAAaK0AADwPAAB0rQAANVZlYzJpAAAIrgAAUA8AAGkAaWlpADVKc0dycAAAAAAIrgAAZg8AAGZpaQB2aWlm");
writeSegment(3984, "aK0AALytAAC8rQAAPA8AAGitAAC8rQAAeA4AAAAAAAC8rQAAvK0AAHgOAAB4DgAAaWlpaWk=");
writeSegment(4048, "aK0AAHgOAAC8rQAAvK0AALytAAC8rQAAdmlpaWlpaQBorQAAvK0AALytAADsrQAA7K0AAOytAADsrQAA7K0AAOytAAC8rQAAeA4AAHgOAAB4DgAAvK0AAHgOAAB0rQAAdK0=");
writeSegment(4160, "dmlpaWZmZmZmZmlpaWlpaWlpAABwDwAAvK0AAAAAAAC8rQAAvK0AALytAAC8rQAAaK0AALytAAC8rQAAvK0AAPitAAC8rQAAvK0AALytAAB2aWlpaWRpaWkAAAAAAAAAaK0AALytAAC8rQAAdK0AAGitAAB4DgAAdK0AADwPAABTaGFkZXIgSW5mbyBMb2c6CgBTaGFkZXIgY29tcGlsZSBmYWlsZWQAUHJvZ3JhbSBJbmZvIExvZzoKAFByb2dyYW0gY29tcGlsZSBmYWlsZWQAUDEzU2hhZGVyUHJvZ3JhbQAxM1NoYWRlclByb2dyYW0AAAiuAAAjEQAAY29kZXMgAGZyYWcgAGxpbmsgAENvbXBpbGVkIE9LIABwcm9naW5mbyAAdmFycyAAV0FSTklORzogdW5pZm9ybSAnACcgbG9jYXRpb24gaXMgLTEhAFdBUk5JTkc6IGF0dHJpYnV0ZSAnAGJhZCBtZXNoIHR5cGUAdiAAIAAKAGYgAEdMY3R4LmJ1ZmZlckRhdGEoR0xjdHguQVJSQVlfQlVGRkVSLCB3aW5kb3dbVVRGOFRvU3RyaW5nKCQwKV0udnR4LCBHTGN0eC5TVEFUSUNfRFJBVykAcmV0dXJuIHdpbmRvd1tVVEY4VG9TdHJpbmcoJDApXS52dHgubGVuZ3RoAEdMY3R4LmJ1ZmZlckRhdGEoR0xjdHguQVJSQVlfQlVGRkVSLCB3aW5kb3dbVVRGOFRvU3RyaW5nKCQwKV0ubm9ybSwgR0xjdHguU1RBVElDX0RSQVcpAHJldHVybiB3aW5kb3dbVVRGOFRvU3RyaW5nKCQwKV0ubm9ybS5sZW5ndGgAR0xjdHguYnVmZmVyRGF0YShHTGN0eC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgd2luZG93W1VURjhUb1N0cmluZygkMCldLmlkeCwgR0xjdHguU1RBVElDX0RSQVcpAHJldHVybiB3aW5kb3dbVVRGOFRvU3RyaW5nKCQwKV0uaWR4Lmxlbmd0aA==");
writeSegment(4956, "AQAAAAEAAAABAAAA/////////////////////wEAAAAEAAAAAQAAAAgAAAACAAAAAQAAAAAAAAABAAAAAAAAAAEAAAABAAAAAQAAAAEAAAACAAAAAQAAAAAAAAABAAAAIAAAAAgAAAAEAAAAAgAAAAAAAAACAAAAAAAAAAIAAAABAAAAAgAAAAEAAAADAAAAAQAAAAAAAAABAAAAIAAAAAgAAAAEAAAAAwAAAAAAAAADAAAAAAAAAAMAAAABAAAAAwAAAAEAAAAEAAAAAQAAAAAAAAABAAAAIAAAAAgAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAQAAAABAAAA/////////////////////wEAAAABAAAACAAAAAIAAAAEAAAABAAAAAEAAAAFAAAAAQAAAAQAAAABAAAABAAAAAEAAAAEAAAAAgAAAAAAAAAIAAAAQAAAAAIAAAABAAAABAAAAAIAAAAFAAAAAgAAAAQAAAACAAAABAAAAAIAAAAEAAAAAwAAAAAAAAAIAAAAQAAAAAIAAAABAAAABAAAAAMAAAAFAAAAAwAAAAQAAAADAAAABAAAAAMAAAAEAAAABAAAAAAAAAAIAAAAQAAAAAIAAAABAAAABAAAAAQAAAAFAAAABAAAAAQAAAAEAAAA/////////////////////wEAAAAIAAAAAgAAAAQAAAABAAAAAwAAAAQAAAAEAAAABQAAAAQAAAAEAAAABAAAAAQAAAADAAAABAAAAAAAAAACAAAAEAAAAAQAAAAIAAAAAgAAAAQAAAADAAAABQAAAAMAAAAEAAAAAwAAAAQAAAACAAAABAAAAAAAAAACAAAAEAAAAAQAAAAIAAAAAQAAAAQAAAACAAAABQAAAAIAAAAEAAAAAgAAAAQAAAABAAAABAAAAAAAAAACAAAAEAAAAAQAAAAIAAAAAAAAAAQAAAABAAAABQAAAAEAAAAEAAAA/////////////////////wEAAAACAAAABAAAAAEAAAAIAAAAAAAAAAMAAAAAAAAABAAAAAEAAAAEAAAAAQAAAAQAAAABAAAAAwAAAAAAAAAEAAAAgAAAAAEAAAACAAAAAAAAAAIAAAAAAAAAAwAAAAEAAAADAAAAAQAAAAMAAAABAAAAAgAAAAAAAAAEAAAAgAAAAAEAAAACAAAAAAAAAAEAAAAAAAAAAgAAAAEAAAACAAAAAQAAAAIAAAABAAAAAQAAAAAAAAAEAAAAgAAAAAEAAAAC");
writeSegment(5968, "pD0AAIQAAACFAAAAhgAAAIcAAACIAAAAiQAAAIoAAACLAAAAjAAAAI0AAACOAAAAjwAAAGFycm93X21lc2gAc3BoZXJlX21lc2gAbm9pc2V0ZXgAdGVzdFJlY3QoJDAsICQxLCAkMiwgJDMpAGlpaWkAR2VuZXJhdGlvbiBvZiBzaGFwZSBmYWlsZWQuCk1ha2Ugc3VyZSB5b3VyIHNoYXBlIGhhcyBhIHllbGxvdyBzdGFydGluZyBwaWVjZS4AVGhlIFNoYXBlIGlzIG1hZGUgb2Ygc2V2ZXJhbCBkaXNjb25uZWN0ZWQgcGFydHMuIGl0IG11c3QgYmUgYSBzaW5nbGUgdm9sdW1lIG9yIHN1cmZhY2UgZm9yIHRoZSBzb2x2ZXIgdG8gd29yawBCYWQgU2hhcGUgLSBJbGxlZ2FsIHNpZGVzIG9mIGN1YmVzIGZvdW5kAEdlbmVyYXRpb24gb2Ygc2hhcGUgZmFpbGVkLgpVbmtub3duIGVycm9yLCB0aGlzIGlzIGEgYnVnISEhAEJVRyBCdWlsZCBpcyBlbXB0eSEhIQBzb2x2ZUdvIQBFUlJPUjogZGlkIG5vdCBsb2FkIGZhY2VzIABsb2FkLXNsdiAAdW5leHBlY3RlZCBmY249PTAAdW5leHBlY3RlZCBlbmQgcmVhZCBmYWNlcyAAdW5leHBlY3RlZCBlbmQgcmVhZCBzb2x1dGlvbiAAAAEDBw8fP3//dW5leHBlY3RlZCBoZWFkZXIAdW5leHBlY3RlZCBiaW4gZmNuPT0wAHVuZXhwZWN0ZWQgYmluIGVuZCByZWFkaW5nIGZhY2VzIAB1bmV4cGVjdGVkIGJpbiBlbmQgcmVhZGluZyBzbHYg");
writeSegment(6636, "ZDwAAJAAAACRAAAAkgAAAJMAAABpbml0IHN0YXJ0AGluaXQgZW5kAGN1cgBwYWludAByZWFkRnJhbWVCdWYgPSBuZXcgVWludDhBcnJheSgkMCk7IHJlYWRGcmFtZVZpZXcgPSBuZXcgRGF0YVZpZXcocmVhZEZyYW1lQnVmLmJ1ZmZlcikAR0xjdHgucmVhZFBpeGVscygwLCAwLCAkMCwgJDEsIEdMY3R4LlJHQkEsIEdMY3R4LlVOU0lHTkVEX0JZVEUsIHJlYWRGcmFtZUJ1ZikAcmV0dXJuIHJlYWRGcmFtZVZpZXcuZ2V0VWludDMyKCQwLCB0cnVlKQ==");
writeSegment(6900, "AQAAAAIAAAADAAAABAAAAAQAAAAEAAAABAAAAAQAAAADAAAAAgAAAAE=");
writeSegment(6980, "AQAAAAIAAAADAAAABAAAAAQAAAAEAAAABAAAAAQAAAADAAAAAgAAAAEAAABSZWFsbG9jYXRpbmcgZ3JwcywgdGhpcyBpcyBzbG93IABDb21wcmVzc2VkIAAgaW50byAAIHNoYXBlcwAgZGlzdGluY3QgbWVzaGVzIG91dCBvZiAAIHBpZWNlcyBtZXNoZXM9AEdlbmVyYXRpbmcgbWVzaCBmb3IgAEdMY3R4LmJ1ZmZlckRhdGEoR0xjdHguQVJSQVlfQlVGRkVSLCB1bmltZXNoLnZ0eCwgR0xjdHguU1RBVElDX0RSQVcpACJyZXR1cm4gdW5pbWVzaC52dHgubGVuZ3RoIgBHTGN0eC5idWZmZXJEYXRhKEdMY3R4LkFSUkFZX0JVRkZFUiwgdW5pbWVzaC5ub3JtLCBHTGN0eC5TVEFUSUNfRFJBVykAInJldHVybiB1bmltZXNoLm5vcm0ubGVuZ3RoIgAicmV0dXJuIHVuaW1lc2hfa2V5cy5sZW5ndGgiAHJldHVybiBwYXJzZUludCh1bmltZXNoX2tleXNbJDBdKQBHTGN0eC5idWZmZXJEYXRhKEdMY3R4LkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB1bmltZXNoWyQwXSwgR0xjdHguU1RBVElDX0RSQVcpAGQAcmV0dXJuIHVuaW1lc2hbJDBdLmxlbmd0aABpAExvYWRlZCAAIG1lc2hlcwAs");
writeSegment(7548, "AQAAAP////8CAAAAAAAAAAEAAAAB");
writeSegment(7580, "/////wIAAAAAAAAAAQAAAAE=");
writeSegment(7612, "Ag==");
writeSegment(7632, "AQAAAAEAAAACAAAAAAAAAAEAAAABAAAAAQAAAAAAAAD/////AgAAAAAAAAABAAAAAQAAAAE=");
writeSegment(7696, "Ag==");
writeSegment(7716, "AQAAAAAAAAACAAAA/////wIAAAAC");
writeSegment(7752, "AQAAAAAAAAACAAAAAg==");
writeSegment(7776, "/////wE=");
writeSegment(7800, "AQAAAAAAAAACAAAAAQAAAAIAAAACAAAAAQ==");
writeSegment(7836, "AQAAAAAAAAACAAAAAgAAAAEAAAAAAAAA/////wEAAAAAAAAAAQ==");
writeSegment(7884, "AQAAAP////8C");
writeSegment(7904, "AQ==");
writeSegment(7916, "/////wI=");
writeSegment(7932, "AQ==");
writeSegment(7948, "AgAAAAAAAAAB");
writeSegment(7968, "AQAAAAEAAAAC");
writeSegment(7988, "AQAAAAEAAAAAAAAA/////wI=");
writeSegment(8016, "AQAAAAE=");
writeSegment(8032, "AgAAAAAAAAAB");
writeSegment(8052, "AQAAAAAAAAACAAAA/////wIAAAACAAAAAAAAAAE=");
writeSegment(8096, "AgAAAAIAAAAAAAAAAQ==");
writeSegment(8120, "/////wE=");
writeSegment(8136, "AQAAAAAAAAACAAAAAQAAAAIAAAACAAAAAQAAAAE=");
writeSegment(8180, "AgAAAAIAAAABAAAAAQ==");
writeSegment(8204, "/////wI=");
writeSegment(8220, "AQAAAP////8C");
writeSegment(8240, "AQAAAAAAAAAC");
writeSegment(8268, "AQAAAAAAAAAC");
writeSegment(8288, "/////wI=");
writeSegment(8304, "AQAAAAEAAAAC");
writeSegment(8324, "AQAAAAEAAAAC");
writeSegment(8352, "AQAAAAEAAAAC");
writeSegment(8372, "/////wI=");
writeSegment(8388, "AQAAAAAAAAACAAAA/////wEAAAACAAAAAAAAAAE=");
writeSegment(8432, "AQAAAAIAAAAAAAAAAQ==");
writeSegment(8456, "/////wI=");
writeSegment(8472, "AQAAAAAAAAACAAAAAQAAAAEAAAACAAAAAQAAAAE=");
writeSegment(8516, "AQAAAAIAAAABAAAAAQ==");
writeSegment(8540, "/////0JTVk9MIABCUyAATk8tUElDUwBOT1QtRU5PVUdIIHN0ZXBzPQAgY291bnQ9ACBmY249ACBwPQBzbHYtcmVzdGFydCE=");
writeSegment(8624, "Ag==");
writeSegment(8640, "AQ==");
writeSegment(8656, "AgAAAAAAAAD8////AAAAAAE=");
writeSegment(8684, "/P///wI=");
writeSegment(8720, "AgAAAPz///8=");
writeSegment(8748, "/P///wE=");
writeSegment(8784, "AQAAAPz///8=");
writeSegment(8808, "");
writeSegment(16640, "GEEAAKQAAAAxMUZsb2F0QXR0cmliAAAAMK4AAAhBAACsOwAARVJST1I6IFdyb25nIHByb2dyYW0gdHlwZSEAV3JvbmcgcHJvZ3JhbSB0eXBlAAAAAAAAALRBAAC+AAAAvwAAAMAAAACAAAAAwQAAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTExSnNHbFRleHR1cmVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAAMK4AAHBBAACUhAAAAAAAADBCAADCAAAAwwAAAMQAAADFAAAAxgAAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVA1U2hhcGVOU18xNGRlZmF1bHRfZGVsZXRlSVMxX0VFTlNfOWFsbG9jYXRvcklTMV9FRUVFADCuAADcQQAAlIQAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSTVTaGFwZUVF");
writeSegment(16996, "4EIAAMIAAADHAAAAyAAAAMkAAADKAAAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUE40TWVzaDEwQ29tbW9uRGF0YUVOU18xNGRlZmF1bHRfZGVsZXRlSVMyX0VFTlNfOWFsbG9jYXRvcklTMl9FRUVFAAAAADCuAAB8QgAAlIQAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSU40TWVzaDEwQ29tbW9uRGF0YUVFRQAAAAEAAAAEAAAAAQAAAAUAAAAGAAAABQAAAAUAAAABAAAABQAAAAEAAAAFAAAAAQAAAAUAAAAFAAAALSsgICAwWDB4AChudWxsKQ==");
writeSegment(17264, "EQAKABEREQAAAAAFAAAAAAAACQAAAAAL");
writeSegment(17296, "EQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERER");
writeSegment(17345, "Cw==");
writeSegment(17354, "EQAKChEREQAKAAACAAkLAAAACQALAAAL");
writeSegment(17403, "DA==");
writeSegment(17415, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
writeSegment(17461, "Dg==");
writeSegment(17473, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
writeSegment(17519, "EA==");
writeSegment(17531, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
writeSegment(17586, "EgAAABISEgAAAAAAAAk=");
writeSegment(17635, "Cw==");
writeSegment(17647, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
writeSegment(17693, "DA==");
writeSegment(17705, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAu");
writeSegment(17820, "zQ==");
writeSegment(17859, "//////8=");
writeSegment(17936, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
writeSegment(20723, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIz2w9JP9sPSb/kyxZA5MsWwAAAAAAAAACA2w9JQNsPScAAAAAAAADwPwAAAAAAAPg/");
writeSegment(20872, "BtDPQ+v9TD4=");
writeSegment(20891, "QAO44j9jbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQykgZmFpbGVk");
writeSegment(20948, "AgAAAAMAAAAFAAAABwAAAAsAAAANAAAAEQAAABMAAAAXAAAAHQAAAB8AAAAlAAAAKQAAACsAAAAvAAAANQAAADsAAAA9AAAAQwAAAEcAAABJAAAATwAAAFMAAABZAAAAYQAAAGUAAABnAAAAawAAAG0AAABxAAAAfwAAAIMAAACJAAAAiwAAAJUAAACXAAAAnQAAAKMAAACnAAAArQAAALMAAAC1AAAAvwAAAMEAAADFAAAAxwAAANMAAAABAAAACwAAAA0AAAARAAAAEwAAABcAAAAdAAAAHwAAACUAAAApAAAAKwAAAC8AAAA1AAAAOwAAAD0AAABDAAAARwAAAEkAAABPAAAAUwAAAFkAAABhAAAAZQAAAGcAAABrAAAAbQAAAHEAAAB5AAAAfwAAAIMAAACJAAAAiwAAAI8AAACVAAAAlwAAAJ0AAACjAAAApwAAAKkAAACtAAAAswAAALUAAAC7AAAAvwAAAMEAAADFAAAAxwAAANEAAAAAAAAA2FUAAM4AAADPAAAAcQAAAHIAAADQAAAA0QAAAHUAAAB2AAAAdwAAANIAAAB5AAAA0wAAAHsAAADUAAAAAAAAABRWAADVAAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAA3wAAAOAAAADhAAAA4gAAAAgAAAAAAAAATFYAAGcAAABoAAAA+P////j///9MVgAAaQAAAGoAAADcUwAA8FMAAAgAAAAAAAAAlFYAAOMAAADkAAAA+P////j///+UVgAA5QAAAOYAAAAMVAAAIFQAAAQAAAAAAAAA3FYAAGsAAABsAAAA/P////z////cVgAAbQAAAG4AAAA8VAAAUFQAAAQAAAAAAAAAJFcAAOcAAADoAAAA/P////z///8kVwAA6QAAAOoAAABsVAAAgFQAAAwAAAAAAAAAvFcAAGEAAABiAAAABAAAAPj///+8VwAAYwAAAGQAAAD0////9P///7xXAABlAAAAZgAAAJxUAABIVwAAXFcAAHBXAACEVwAAxFQAALBUAAAAAAAADFUAAOsAAADsAAAATlN0M19fMjhpb3NfYmFzZUUAAAAIrgAA+FQAAAAAAABQVQAA7QAAAO4AAABOU3QzX18yOWJhc2ljX2lvc0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAADCuAAAkVQAADFUAAAAAAACYVQAA7wAAAPAAAABOU3QzX18yOWJhc2ljX2lvc0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAADCuAABsVQAADFUAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1ZkljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAAAIrgAApFUAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1Zkl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAAAIrgAA4FUAAE5TdDNfXzIxM2Jhc2ljX2lzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAIyuAAAcVgAAAAAAAAEAAABQVQAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAIyuAABkVgAAAAAAAAEAAACYVQAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAIyuAACsVgAAAAAAAAEAAABQVQAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAIyuAAD0VgAAAAAAAAEAAACYVQAAA/T//wwAAAAAAAAATFYAAGcAAABoAAAA9P////T///9MVgAAaQAAAGoAAAAEAAAAAAAAANxWAABrAAAAbAAAAPz////8////3FYAAG0AAABuAAAATlN0M19fMjE0YmFzaWNfaW9zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAjK4AAIxXAAADAAAAAgAAAExWAAACAAAA3FYAAAIIAABgtQAA8LUAAIi2AAAAAAAAQFgAAM4AAAD4AAAA+QAAAHIAAADQAAAA0QAAAHUAAAB2AAAAdwAAAPoAAAD7AAAA/AAAAHsAAADUAAAATlN0M19fMjEwX19zdGRpbmJ1ZkljRUUAMK4AAChYAADYVQAAdW5zdXBwb3J0ZWQgbG9jYWxlIGZvciBzdGFuZGFyZCBpbnB1dAAAAAAAAADMWAAA1QAAAP0AAAD+AAAA2AAAANkAAADaAAAA2wAAANwAAADdAAAA/wAAAAABAAABAQAA4QAAAOIAAABOU3QzX18yMTBfX3N0ZGluYnVmSXdFRQAwrgAAtFgAABRWAAAAAAAANFkAAM4AAAACAQAAAwEAAHIAAADQAAAA0QAAAAQBAAB2AAAAdwAAANIAAAB5AAAA0wAAAAUBAAAGAQAATlN0M19fMjExX19zdGRvdXRidWZJY0VFAAAAADCuAAAYWQAA2FUAAAAAAACcWQAA1QAAAAcBAAAIAQAA2AAAANkAAADaAAAACQEAANwAAADdAAAA3gAAAN8AAADgAAAACgEAAAsBAABOU3QzX18yMTFfX3N0ZG91dGJ1Zkl3RUUAAAAAMK4AAIBZAAAUVg==");
writeSegment(22960, "/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNNpbmZpbml0eQBuYW4=");
writeSegment(23456, "0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///");
writeSegment(23536, "3hIElQAAAAD////////////////wWwAAFAAAAEMuVVRGLTg=");
writeSegment(23608, "BFw=");
writeSegment(23632, "TENfQUxM");
writeSegment(23648, "TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVMATEFORwBDLlVURi04AFBPU0lYAE1VU0xfTE9DUEFUSAAAAAAA0F0=");
writeSegment(24016, "AgACAAIAAgACAAIAAgACAAIAAyACIAIgAiACIAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAFgBMAEwATABMAEwATABMAEwATABMAEwATABMAEwATACNgI2AjYCNgI2AjYCNgI2AjYCNgEwATABMAEwATABMAEwAjVCNUI1QjVCNUI1QjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUEwATABMAEwATABMAI1gjWCNYI1gjWCNYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGBMAEwATABMAC");
writeSegment(24528, "4GE=");
writeSegment(25060, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
writeSegment(26080, "8Gc=");
writeSegment(26612, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
writeSegment(27632, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJXAAbABsbAAATAAlAAAAAAAlcAAAAAAlSTolTTolUyAlcCVIOiVN");
writeSegment(27712, "JQAAAG0AAAAvAAAAJQAAAGQAAAAvAAAAJQAAAHkAAAAlAAAAWQAAAC0AAAAlAAAAbQAAAC0AAAAlAAAAZAAAACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABwAAAAAAAAACUAAABIAAAAOgAAACUAAABN");
writeSegment(27856, "JQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAlTGYAMDEyMzQ1Njc4OQAlLjBMZgBDAAAAAAAAeHIAAB8BAAAgAQAAIQEAAAAAAADYcgAAIgEAACMBAAAhAQAAJAEAACUBAAAmAQAAJwEAACgBAAApAQAAKgEAACsBAAAAAAAAQHIAACwBAAAtAQAAIQEAAC4BAAAvAQAAMAEAADEBAAAyAQAAMwEAADQBAAAAAAAAEHMAADUBAAA2AQAAIQEAADcBAAA4AQAAOQEAADoBAAA7AQAAAAAAADRzAAA8AQAAPQEAACEBAAA+AQAAPwEAAEABAABBAQAAQgEAAHRydWUAAAAAdAAAAHIAAAB1AAAAZQAAAAAAAABmYWxzZQAAAGYAAABhAAAAbAAAAHMAAABlAAAAAAAAACVtLyVkLyV5AAAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAAAAAACVIOiVNOiVTAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAACVhICViICVkICVIOiVNOiVTICVZAAAAACUAAABhAAAAIAAAACUAAABiAAAAIAAAACUAAABkAAAAIAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABZAAAAAAAAACVJOiVNOiVTICVwACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABw");
writeSegment(28440, "QG8AAEMBAABEAQAAIQEAAE5TdDNfXzI2bG9jYWxlNWZhY2V0RQAAADCuAAAobwAAbIQAAAAAAADAbwAAQwEAAEUBAAAhAQAARgEAAEcBAABIAQAASQEAAEoBAABLAQAATAEAAE0BAABOAQAATwEAAFABAABRAQAATlN0M19fMjVjdHlwZUl3RUUATlN0M19fMjEwY3R5cGVfYmFzZUUAAAiuAACibwAAjK4AAJBvAAAAAAAAAgAAAEBvAAACAAAAuG8AAAIAAAAAAAAAVHAAAEMBAABSAQAAIQEAAFMBAABUAQAAVQEAAFYBAABXAQAAWAEAAFkBAABOU3QzX18yN2NvZGVjdnRJY2MxMV9fbWJzdGF0ZV90RUUATlN0M19fMjEyY29kZWN2dF9iYXNlRQAAAAAIrgAAMnAAAIyuAAAQcAAAAAAAAAIAAABAbwAAAgAAAExwAAACAAAAAAAAAMhwAABDAQAAWgEAACEBAABbAQAAXAEAAF0BAABeAQAAXwEAAGABAABhAQAATlN0M19fMjdjb2RlY3Z0SURzYzExX19tYnN0YXRlX3RFRQAAjK4AAKRwAAAAAAAAAgAAAEBvAAACAAAATHAAAAIAAAAAAAAAPHEAAEMBAABiAQAAIQEAAGMBAABkAQAAZQEAAGYBAABnAQAAaAEAAGkBAABOU3QzX18yN2NvZGVjdnRJRGljMTFfX21ic3RhdGVfdEVFAACMrgAAGHEAAAAAAAACAAAAQG8AAAIAAABMcAAAAgAAAAAAAACwcQAAQwEAAGoBAAAhAQAAYwEAAGQBAABlAQAAZgEAAGcBAABoAQAAaQEAAE5TdDNfXzIxNl9fbmFycm93X3RvX3V0ZjhJTG0zMkVFRQAAADCuAACMcQAAPHEAAAAAAAAQcgAAQwEAAGsBAAAhAQAAYwEAAGQBAABlAQAAZgEAAGcBAABoAQAAaQEAAE5TdDNfXzIxN19fd2lkZW5fZnJvbV91dGY4SUxtMzJFRUUAADCuAADscQAAPHEAAE5TdDNfXzI3Y29kZWN2dEl3YzExX19tYnN0YXRlX3RFRQAAAIyuAAAccgAAAAAAAAIAAABAbwAAAgAAAExwAAACAAAATlN0M19fMjZsb2NhbGU1X19pbXBFAAAAMK4AAGByAABAbwAATlN0M19fMjdjb2xsYXRlSWNFRQAwrgAAhHIAAEBvAABOU3QzX18yN2NvbGxhdGVJd0VFADCuAACkcgAAQG8AAE5TdDNfXzI1Y3R5cGVJY0VFAAAAjK4AAMRyAAAAAAAAAgAAAEBvAAACAAAAuG8AAAIAAABOU3QzX18yOG51bXB1bmN0SWNFRQAAAAAwrgAA+HIAAEBvAABOU3QzX18yOG51bXB1bmN0SXdFRQAAAAAwrgAAHHMAAEBvAAAAAAAAmHIAAGwBAABtAQAAIQEAAG4BAABvAQAAcAEAAAAAAAC4cgAAcQEAAHIBAAAhAQAAcwEAAHQBAAB1AQAAAAAAAFR0AABDAQAAdgEAACEBAAB3AQAAeAEAAHkBAAB6AQAAewEAAHwBAAB9AQAAfgEAAH8BAACAAQAAgQEAAE5TdDNfXzI3bnVtX2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjlfX251bV9nZXRJY0VFAE5TdDNfXzIxNF9fbnVtX2dldF9iYXNlRQAACK4AABp0AACMrgAABHQAAAAAAAABAAAANHQAAAAAAACMrgAAwHMAAAAAAAACAAAAQG8AAAIAAAA8dA==");
writeSegment(29816, "KHUAAEMBAACCAQAAIQEAAIMBAACEAQAAhQEAAIYBAACHAQAAiAEAAIkBAACKAQAAiwEAAIwBAACNAQAATlN0M19fMjdudW1fZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX2dldEl3RUUAAACMrgAA+HQAAAAAAAABAAAANHQAAAAAAACMrgAAtHQAAAAAAAACAAAAQG8AAAIAAAAQdQ==");
writeSegment(30028, "EHYAAEMBAACOAQAAIQEAAI8BAACQAQAAkQEAAJIBAACTAQAAlAEAAJUBAACWAQAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEljRUUATlN0M19fMjE0X19udW1fcHV0X2Jhc2VFAAAIrgAA1nUAAIyuAADAdQAAAAAAAAEAAADwdQAAAAAAAIyuAAB8dQAAAAAAAAIAAABAbwAAAgAAAPh1");
writeSegment(30260, "2HYAAEMBAACXAQAAIQEAAJgBAACZAQAAmgEAAJsBAACcAQAAnQEAAJ4BAACfAQAATlN0M19fMjdudW1fcHV0SXdOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEl3RUUAAACMrgAAqHYAAAAAAAABAAAA8HUAAAAAAACMrgAAZHYAAAAAAAACAAAAQG8AAAIAAADAdg==");
writeSegment(30460, "2HcAAKABAAChAQAAIQEAAKIBAACjAQAApAEAAKUBAACmAQAApwEAAKgBAAD4////2HcAAKkBAACqAQAAqwEAAKwBAACtAQAArgEAAK8BAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOXRpbWVfYmFzZUUACK4AAJF3AABOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAAAIrgAArHcAAIyuAABMdwAAAAAAAAMAAABAbwAAAgAAAKR3AAACAAAA0HcAAAAIAAAAAAAAxHgAALABAACxAQAAIQEAALIBAACzAQAAtAEAALUBAAC2AQAAtwEAALgBAAD4////xHgAALkBAAC6AQAAuwEAALwBAAC9AQAAvgEAAL8BAABOU3QzX18yOHRpbWVfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAAAiuAACZeAAAjK4AAFR4AAAAAAAAAwAAAEBvAAACAAAApHcAAAIAAAC8eAAAAAgAAAAAAABoeQAAwAEAAMEBAAAhAQAAwgEAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMF9fdGltZV9wdXRFAAAACK4AAEl5AACMrgAABHkAAAAAAAACAAAAQG8AAAIAAABgeQAAAAgAAAAAAADoeQAAwwEAAMQBAAAhAQAAxQEAAE5TdDNfXzI4dGltZV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAAIyuAACgeQAAAAAAAAIAAABAbwAAAgAAAGB5AAAACAAAAAAAAHx6AABDAQAAxgEAACEBAADHAQAAyAEAAMkBAADKAQAAywEAAMwBAADNAQAAzgEAAM8BAABOU3QzX18yMTBtb25leXB1bmN0SWNMYjBFRUUATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAACK4AAFx6AACMrgAAQHoAAAAAAAACAAAAQG8AAAIAAAB0egAAAgAAAAAAAADwegAAQwEAANABAAAhAQAA0QEAANIBAADTAQAA1AEAANUBAADWAQAA1wEAANgBAADZAQAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIxRUVFAIyuAADUegAAAAAAAAIAAABAbwAAAgAAAHR6AAACAAAAAAAAAGR7AABDAQAA2gEAACEBAADbAQAA3AEAAN0BAADeAQAA3wEAAOABAADhAQAA4gEAAOMBAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjBFRUUAjK4AAEh7AAAAAAAAAgAAAEBvAAACAAAAdHoAAAIAAAAAAAAA2HsAAEMBAADkAQAAIQEAAOUBAADmAQAA5wEAAOgBAADpAQAA6gEAAOsBAADsAQAA7QEAAE5TdDNfXzIxMG1vbmV5cHVuY3RJd0xiMUVFRQCMrgAAvHsAAAAAAAACAAAAQG8AAAIAAAB0egAAAgAAAAAAAAB8fAAAQwEAAO4BAAAhAQAA7wEAAPABAABOU3QzX18yOW1vbmV5X2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJY0VFAAAIrgAAWnwAAIyuAAAUfAAAAAAAAAIAAABAbwAAAgAAAHR8");
writeSegment(31904, "IH0AAEMBAADxAQAAIQEAAPIBAADzAQAATlN0M19fMjltb25leV9nZXRJd05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfZ2V0SXdFRQAACK4AAP58AACMrgAAuHwAAAAAAAACAAAAQG8AAAIAAAAYfQ==");
writeSegment(32068, "xH0AAEMBAAD0AQAAIQEAAPUBAAD2AQAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SWNFRQAACK4AAKJ9AACMrgAAXH0AAAAAAAACAAAAQG8AAAIAAAC8fQ==");
writeSegment(32232, "aH4AAEMBAAD3AQAAIQEAAPgBAAD5AQAATlN0M19fMjltb25leV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SXdFRQAACK4AAEZ+AACMrgAAAH4AAAAAAAACAAAAQG8AAAIAAABgfg==");
writeSegment(32396, "4H4AAEMBAAD6AQAAIQEAAPsBAAD8AQAA/QEAAE5TdDNfXzI4bWVzc2FnZXNJY0VFAE5TdDNfXzIxM21lc3NhZ2VzX2Jhc2VFAAAAAAiuAAC9fgAAjK4AAKh+AAAAAAAAAgAAAEBvAAACAAAA2H4AAAIAAAAAAAAAOH8AAEMBAAD+AQAAIQEAAP8BAAAAAgAAAQIAAE5TdDNfXzI4bWVzc2FnZXNJd0VFAAAAAIyuAAAgfwAAAAAAAAIAAABAbwAAAgAAANh+AAACAAAAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkAU3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0AAAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKYW51YXJ5AEZlYnJ1YXJ5AE1hcmNoAEFwcmlsAE1heQBKdW5lAEp1bHkAQXVndXN0AFNlcHRlbWJlcgBPY3RvYmVyAE5vdmVtYmVyAERlY2VtYmVyAEphbgBGZWIATWFyAEFwcgBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQU0AUE0AAABBAAAATQAAAAAAAABQAAAATQAAAAAAAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAAAAAADQdwAAqQEAAKoBAACrAQAArAEAAK0BAACuAQAArwEAAAAAAAC8eAAAuQEAALoBAAC7AQAAvAEAAL0BAAC+AQAAvwEAAAAAAABshAAAwgAAAAICAABWAAAATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAAAiuAABQhAAATlN0M19fMjE5X19zaGFyZWRfd2Vha19jb3VudEUAAACMrgAAdIQAAAAAAAABAAAAbIQAAAAAAABiYXNpY19zdHJpbmcAdmVjdG9yAHRlcm1pbmF0aW5nIHdpdGggJXMgZXhjZXB0aW9uIG9mIHR5cGUgJXM6ICVzAHRlcm1pbmF0aW5nIHdpdGggJXMgZXhjZXB0aW9uIG9mIHR5cGUgJXMAdGVybWluYXRpbmcgd2l0aCAlcyBmb3JlaWduIGV4Y2VwdGlvbgB0ZXJtaW5hdGluZwB1bmNhdWdodABfWgBfX19aAF9ibG9ja19pbnZva2UAaW52b2NhdGlvbiBmdW5jdGlvbiBmb3IgYmxvY2sgaW4gAFVhOWVuYWJsZV9pZkkAdnRhYmxlIGZvciAAVlRUIGZvciAAdHlwZWluZm8gZm9yIAB0eXBlaW5mbyBuYW1lIGZvciAAY292YXJpYW50IHJldHVybiB0aHVuayB0byAAdGhyZWFkLWxvY2FsIHdyYXBwZXIgcm91dGluZSBmb3IgAHRocmVhZC1sb2NhbCBpbml0aWFsaXphdGlvbiByb3V0aW5lIGZvciAAdmlydHVhbCB0aHVuayB0byAAbm9uLXZpcnR1YWwgdGh1bmsgdG8gAGd1YXJkIHZhcmlhYmxlIGZvciAAcmVmZXJlbmNlIHRlbXBvcmFyeSBmb3IgAAAAAAAUhwAABAIAAAUCAAAGAgAABwIAAAgCAAAJAgAACgIAAAsCAAAMAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTFTcGVjaWFsTmFtZUUATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlNE5vZGVFAAiuAADkhgAAMK4AALSGAAAMhwAAAAAAAAyHAAAEAgAABQIAAAYCAAAHAgAAVgAAAAkCAAAKAgAACwIAAA0CAAAAAAAAtIcAAAQCAAAFAgAABgIAAAcCAAAOAgAACQIAAAoCAAALAgAADwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTIxQ3RvclZ0YWJsZVNwZWNpYWxOYW1lRQAAADCuAAB4hwAADIcAAGNvbnN0cnVjdGlvbiB2dGFibGUgZm9yIAAtaW4tAFN0AHN0ZA==");
writeSegment(34796, "QIgAAAQCAAAFAgAABgIAAAcCAAAQAgAACQIAABECAAALAgAAEgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThOYW1lVHlwZUUAMK4AABSIAAAMhwAAAAAAAKiIAAAEAgAABQIAAAYCAAAHAgAAEwIAAAkCAAAUAgAACwIAABUCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxME5lc3RlZE5hbWVFAAAwrgAAeIgAAAyHAAA6OgBhdXRvAAAAAAAoiQAAFgIAABcCAAAYAgAAGQIAABoCAAAbAgAACgIAAAsCAAAcAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjRGb3J3YXJkVGVtcGxhdGVSZWZlcmVuY2VFAAAAADCuAADoiAAADIcAAGRlY2x0eXBlKAApAGdzACYmACYAJj0APQBhbGlnbm9mICgAY29uc3RfY2FzdAAsAH4AZHluYW1pY19jYXN0ACoALioALgAvAC89AF4AXj0APT0APj0APgA8PQA8PAA8PD0APAAtAC09ACo9AC0tACE9ACEAbm9leGNlcHQgKAB8fAB8AHw9AC0+KgArACs9ACsrAC0+AHJlaW50ZXJwcmV0X2Nhc3QAJQAlPQA+PgA+Pj0Ac3RhdGljX2Nhc3QAc2l6ZW9mICgAc2l6ZW9mLi4uICgAdHlwZWlkICgAdGhyb3cAd2NoYXJfdABiMEUAYjFFAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydAAAdQBsAHVsAGxsAHVsbABfX2ludDEyOAB1bnNpZ25lZCBfX2ludDEyOA==");
writeSegment(35468, "6IoAAAQCAAAFAgAABgIAAAcCAAAdAgAACQIAAAoCAAALAgAAHgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE0SW50ZWdlckxpdGVyYWxFAAAwrgAAtIoAAAyHAAAoAAAAAAAAAFCLAAAEAgAABQIAAAYCAAAHAgAAHwIAAAkCAAAKAgAACwIAACACAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU4Qm9vbEV4cHJFADCuAAAkiwAADIcAAHRydWUAZmFsc2UAAAAAAADMiwAABAIAAAUCAAAGAgAABwIAACECAAAJAgAACgIAAAsCAAAiAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTZGbG9hdExpdGVyYWxJbXBsSWZFRQAwrgAAlIsAAAyHAAAlYWYAAAAAAECMAAAEAgAABQIAAAYCAAAHAgAAIwIAAAkCAAAKAgAACwIAACQCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNkZsb2F0TGl0ZXJhbEltcGxJZEVFADCuAAAIjAAADIcAACVhAAAAAAAAtIwAAAQCAAAFAgAABgIAAAcCAAAlAgAACQIAAAoCAAALAgAAJgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE2RmxvYXRMaXRlcmFsSW1wbEllRUUAMK4AAHyMAAAMhwAAJUxhTA==");
writeSegment(36044, "KI0AAAQCAAAFAgAABgIAAAcCAAAnAgAACQIAAAoCAAALAgAAKAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1SW50ZWdlckNhc3RFeHByRQAwrgAA9IwAAAyHAABmcABmTAAAAAAAAACcjQAABAIAAAUCAAAGAgAABwIAACkCAAAJAgAACgIAAAsCAAAqAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTNGdW5jdGlvblBhcmFtRQAAADCuAABojQAADIcAAGFhAGFuAGFOAGFTAGNtAGRzAGR2AGRWAGVvAGVPAGVxAGdlAGd0AGxlAGxzAGxTAGx0AG1pAG1JAG1sAG1MAG5lAG9vAG9yAG9SAHBsAHBMAHJtAHJNAHJzAHJT");
writeSegment(36364, "YI4AAAQCAAAFAgAABgIAAAcCAAArAgAACQIAAAoCAAALAgAALAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThGb2xkRXhwckUAMK4AADSOAAAMhwAALi4uIAAgLi4uAAAAAAAAAOCOAAAEAgAABQIAAAYCAAAHAgAALQIAAAkCAAAKAgAACwIAAC4CAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMlBhcmFtZXRlclBhY2tFeHBhbnNpb25FAAAwrgAApI4AAAyHAAAuLi4ALCAAAAAAAABQjwAABAIAAAUCAAAGAgAABwIAAC8CAAAJAgAACgIAAAsCAAAwAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTBCaW5hcnlFeHByRQAAMK4AACCPAAAMhwAAKSAAICgAAAAAAAAAwI8AAAQCAAAFAgAABgIAAAcCAAAxAgAACQIAAAoCAAALAgAAMgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwUHJlZml4RXhwckUAADCuAACQjwAADIcAAAAAAAAkkAAABAIAAAUCAAAGAgAABwIAADMCAAAJAgAACgIAAAsCAAA0AgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlOENhc3RFeHByRQAwrgAA+I8AAAyHAAA+KAAAAAAAAIyQAAAEAgAABQIAAAYCAAAHAgAANQIAAAkCAAAKAgAACwIAADYCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU4Q2FsbEV4cHJFADCuAABgkAAADIcAAGN2AAAAAAAA/JAAAAQCAAAFAgAABgIAAAcCAAA3AgAACQIAAAoCAAALAgAAOAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE0Q29udmVyc2lvbkV4cHJFAAAwrgAAyJAAAAyHAAApKAAAAAAAAGiRAAAEAgAABQIAAAYCAAAHAgAAOQIAAAkCAAAKAgAACwIAADoCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMERlbGV0ZUV4cHJFAAAwrgAAOJEAAAyHAABkZWxldGUAW10gAHNyTgBzcgBfR0xPQkFMX19OAChhbm9ueW1vdXMgbmFtZXNwYWNlKQAAAAAAAAiSAAAEAgAABQIAAAYCAAAHAgAAOwIAAAkCAAA8AgAACwIAAD0CAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM1F1YWxpZmllZE5hbWVFAAAAMK4AANSRAAAMhwAAZG4Ab24AAAAAAAAAdJIAAAQCAAAFAgAABgIAAAcCAAA+AgAACQIAAAoCAAALAgAAPwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThEdG9yTmFtZUUAMK4AAEiSAAAMhwAAb3BlcmF0b3ImJgBvcGVyYXRvciYAb3BlcmF0b3ImPQBvcGVyYXRvcj0Ab3BlcmF0b3IoKQBvcGVyYXRvciwAb3BlcmF0b3J+AG9wZXJhdG9yIGRlbGV0ZVtdAG9wZXJhdG9yKgBvcGVyYXRvciBkZWxldGUAb3BlcmF0b3IvAG9wZXJhdG9yLz0Ab3BlcmF0b3JeAG9wZXJhdG9yXj0Ab3BlcmF0b3I9PQBvcGVyYXRvcj49AG9wZXJhdG9yPgBvcGVyYXRvcltdAG9wZXJhdG9yPD0Ab3BlcmF0b3I8PABvcGVyYXRvcjw8PQBvcGVyYXRvcjwAb3BlcmF0b3ItAG9wZXJhdG9yLT0Ab3BlcmF0b3IqPQBvcGVyYXRvci0tAG9wZXJhdG9yIG5ld1tdAG9wZXJhdG9yIT0Ab3BlcmF0b3IhAG9wZXJhdG9yIG5ldwBvcGVyYXRvcnx8AG9wZXJhdG9yfABvcGVyYXRvcnw9AG9wZXJhdG9yLT4qAG9wZXJhdG9yKwBvcGVyYXRvcis9AG9wZXJhdG9yKysAb3BlcmF0b3ItPgBvcGVyYXRvcj8Ab3BlcmF0b3IlAG9wZXJhdG9yJT0Ab3BlcmF0b3I+PgBvcGVyYXRvcj4+PQBvcGVyYXRvcjw9PgAAAAAAANSUAAAEAgAABQIAAAYCAAAHAgAAQAIAAAkCAAAKAgAACwIAAEECAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMkNvbnZlcnNpb25PcGVyYXRvclR5cGVFAAAwrgAAmJQAAAyHAABvcGVyYXRvciAAAAAAAAAATJUAAAQCAAAFAgAABgIAAAcCAABCAgAACQIAAAoCAAALAgAAQwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1TGl0ZXJhbE9wZXJhdG9yRQAwrgAAGJUAAAyHAABvcGVyYXRvciIiIAAAAAAAyJUAAAQCAAAFAgAABgIAAAcCAABEAgAACQIAAEUCAAALAgAARgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5R2xvYmFsUXVhbGlmaWVkTmFtZUUAMK4AAJCVAAAMhwAAAAAAADCWAAAEAgAABQIAAAYCAAAHAgAARwIAAAkCAAAKAgAACwIAAEgCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxME1lbWJlckV4cHJFAAAwrgAAAJYAAAyHAAAAAAAAoJYAAAQCAAAFAgAABgIAAAcCAABJAgAACQIAAAoCAAALAgAASgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE4QXJyYXlTdWJzY3JpcHRFeHByRQAAMK4AAGiWAAAMhwAAKVsAXQ==");
writeSegment(38584, "EJcAAAQCAAAFAgAABgIAAAcCAABLAgAACQIAAAoCAAALAgAATAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwQnJhY2VkRXhwckUAADCuAADglgAADIcAACA9IAAAAAAAgJcAAAQCAAAFAgAABgIAAAcCAABNAgAACQIAAAoCAAALAgAATgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1QnJhY2VkUmFuZ2VFeHByRQAwrgAATJcAAAyHAAAgLi4uIAAAAAAAAAD0lwAABAIAAAUCAAAGAgAABwIAAE8CAAAJAgAACgIAAAsCAABQAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTJJbml0TGlzdEV4cHJFAAAAADCuAADAlwAADIcAAAAAAABcmAAABAIAAAUCAAAGAgAABwIAAFECAAAJAgAACgIAAAsCAABSAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTFQb3N0Zml4RXhwckUAMK4AACyYAAAMhwAAbncAbmEAcGk=");
writeSegment(39032, "zJgAAAQCAAAFAgAABgIAAAcCAABTAgAACQIAAAoCAAALAgAAVAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTdOZXdFeHByRQAAMK4AAKCYAAAMhwAAOjpvcGVyYXRvciAAbmV3AFtdAAAAAAAATJkAAAQCAAAFAgAABgIAAAcCAABVAgAACQIAAAoCAAALAgAAVgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEzRW5jbG9zaW5nRXhwckUAAAAwrgAAGJkAAAyHAAAAAAAAuJkAAAQCAAAFAgAABgIAAAcCAABXAgAACQIAAAoCAAALAgAAWAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1Q29uZGl0aW9uYWxFeHByRQAwrgAAhJkAAAyHAAApID8gKAApIDogKAAAAAAANJoAAAQCAAAFAgAABgIAAAcCAABZAgAACQIAAAoCAAALAgAAWgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5U2l6ZW9mUGFyYW1QYWNrRXhwckUAMK4AAPyZAAAMhwAAc2l6ZW9mLi4uKAAAAAAAAKyaAAAEAgAABQIAAAYCAAAHAgAAWwIAAAkCAAAKAgAACwIAAFwCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM05vZGVBcnJheU5vZGVFAAAAMK4AAHiaAAAMhwAAAAAAABSbAAAEAgAABQIAAAYCAAAHAgAAXQIAAAkCAAAKAgAACwIAAF4CAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5VGhyb3dFeHByRQAAAAAwrgAA5JoAAAyHAAB0aHJvdyAAAAAAAACUmwAABAIAAAUCAAAGAgAABwIAAF8CAAAJAgAAYAIAAAsCAABhAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjdFeHBhbmRlZFNwZWNpYWxTdWJzdGl0dXRpb25FADCuAABUmwAADIcAAHN0ZDo6YWxsb2NhdG9yAHN0ZDo6YmFzaWNfc3RyaW5nAHN0ZDo6YmFzaWNfc3RyaW5nPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4sIHN0ZDo6YWxsb2NhdG9yPGNoYXI+ID4Ac3RkOjpiYXNpY19pc3RyZWFtPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4gPgBzdGQ6OmJhc2ljX29zdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AHN0ZDo6YmFzaWNfaW9zdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AGFsbG9jYXRvcgBiYXNpY19zdHJpbmcAYmFzaWNfaXN0cmVhbQBiYXNpY19vc3RyZWFtAGJhc2ljX2lvc3RyZWFt");
writeSegment(40168, "RJ0AAAQCAAAFAgAABgIAAAcCAABiAgAACQIAAAoCAAALAgAAYwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEyQ3RvckR0b3JOYW1lRQAAAAAwrgAAEJ0AAAyHAAAAAAAArJ0AAAQCAAAFAgAABgIAAAcCAABkAgAACQIAAAoCAAALAgAAZQIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwQWJpVGFnQXR0ckUAADCuAAB8nQAADIcAAFthYmk6AERDAFV0AFVsAHZFAAAAAAAAACyeAAAEAgAABQIAAAYCAAAHAgAAZgIAAAkCAAAKAgAACwIAAGcCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNVVubmFtZWRUeXBlTmFtZUUAMK4AAPidAAAMhwAAJ3VubmFtZWQAJwAAAAAAAKSeAAAEAgAABQIAAAYCAAAHAgAAaAIAAAkCAAAKAgAACwIAAGkCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNUNsb3N1cmVUeXBlTmFtZUUAMK4AAHCeAAAMhwAAJ2xhbWJkYQAnKAAAAAAAACSfAAAEAgAABQIAAAYCAAAHAgAAagIAAAkCAAAKAgAACwIAAGsCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMVN0cnVjdHVyZWRCaW5kaW5nTmFtZUUAAAAwrgAA6J4AAAyHAABzdHJpbmcgbGl0ZXJhbAAAAAAAAJyfAAAEAgAABQIAAAYCAAAHAgAAbAIAAAkCAAAKAgAACwIAAG0CAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5TG9jYWxOYW1lRQAAAAAwrgAAbJ8AAAyHAAAAAAAADKAAAAQCAAAFAgAABgIAAAcCAABuAgAACQIAAG8CAAALAgAAcAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5U3BlY2lhbFN1YnN0aXR1dGlvbkUAMK4AANSfAAAMhwAAc3RkOjpzdHJpbmcAc3RkOjppc3RyZWFtAHN0ZDo6b3N0cmVhbQBzdGQ6Omlvc3RyZWFtAHN0cmluZwBpc3RyZWFtAG9zdHJlYW0AaW9zdHJlYW0AAAAAAMygAABxAgAAcgIAAHMCAAB0AgAAdQIAAHYCAAAKAgAACwIAAHcCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM1BhcmFtZXRlclBhY2tFAAAAMK4AAJigAAAMhwAAAAAAADihAAAEAgAABQIAAAYCAAAHAgAAeAIAAAkCAAAKAgAACwIAAHkCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMlRlbXBsYXRlQXJnc0UAAAAAMK4AAAShAAAMhwAAIAAAAAAAAACwoQAABAIAAAUCAAAGAgAABwIAAHoCAAAJAgAAewIAAAsCAAB8AgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBOYW1lV2l0aFRlbXBsYXRlQXJnc0UAAAAAMK4AAHShAAAMhwAAU3RMAAAAAAAkogAABAIAAAUCAAAGAgAABwIAAH0CAAAJAgAAfgIAAAsCAAB/AgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTZTdGRRdWFsaWZpZWROYW1lRQAAAAAwrgAA7KEAAAyHAABzdGQ6OgAAAAAAAACgogAABAIAAAUCAAAGAgAABwIAAIACAAAJAgAACgIAAAsCAACBAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBUZW1wbGF0ZUFyZ3VtZW50UGFja0UAAAAAMK4AAGSiAAAMhwAAAAAAAAyjAAAEAgAABQIAAAYCAAAHAgAAggIAAAkCAAAKAgAACwIAAIMCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMkVuYWJsZUlmQXR0ckUAAAAAMK4AANiiAAAMhwAAIFtlbmFibGVfaWY6");
writeSegment(41772, "jKMAAIQCAAAFAgAAhQIAAAcCAACGAgAAhwIAAAoCAAALAgAAiAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE2RnVuY3Rpb25FbmNvZGluZ0UAAAAAMK4AAFSjAAAMhwAAIGNvbnN0ACB2b2xhdGlsZQAgcmVzdHJpY3QAICYAICYmAAAAAAAAABikAAAEAgAABQIAAAYCAAAHAgAAiQIAAAkCAAAKAgAACwIAAIoCAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5RG90U3VmZml4RQAAAAAwrgAA6KMAAAyHAAB2b2lkAGJvb2wAaW50AHVuc2lnbmVkIGludABsb25nAHVuc2lnbmVkIGxvbmcAbG9uZyBsb25nAHVuc2lnbmVkIGxvbmcgbG9uZwBmbG9hdABkb3VibGUAbG9uZyBkb3VibGUAX19mbG9hdDEyOABkZWNpbWFsNjQAZGVjaW1hbDEyOABkZWNpbWFsMzIAZGVjaW1hbDE2AGNoYXIzMl90AGNoYXIxNl90AGRlY2x0eXBlKGF1dG8pAHN0ZDo6bnVsbHB0cl90ACBjb21wbGV4ACBpbWFnaW5hcnkARG8Abm9leGNlcHQARE8ARHcARHgAUkUAT0UAAAAAAAB8pQAABAIAAAUCAAAGAgAABwIAAIsCAAAJAgAACgIAAAsCAACMAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTJOb2V4Y2VwdFNwZWNFAAAAADCuAABIpQAADIcAAG5vZXhjZXB0KAAAAAAAAAD8pQAABAIAAAUCAAAGAgAABwIAAI0CAAAJAgAACgIAAAsCAACOAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBEeW5hbWljRXhjZXB0aW9uU3BlY0UAAAAAMK4AAMClAAAMhwAAdGhyb3coAAAAAAAAcKYAAI8CAAAFAgAAkAIAAAcCAACRAgAAkgIAAAoCAAALAgAAkwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEyRnVuY3Rpb25UeXBlRQAAAAAwrgAAPKYAAAyHAABvYmpjcHJvdG8AAAAAAAAA6KYAAAQCAAAFAgAABgIAAAcCAACUAgAACQIAAAoCAAALAgAAlQIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEzT2JqQ1Byb3RvTmFtZUUAAAAwrgAAtKYAAAyHAAAAAAAAWKcAAAQCAAAFAgAABgIAAAcCAACWAgAACQIAAAoCAAALAgAAlwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE3VmVuZG9yRXh0UXVhbFR5cGVFAAAAMK4AACCnAAAMhwAAAAAAALynAACYAgAAmQIAAJoCAAAHAgAAmwIAAJwCAAAKAgAACwIAAJ0CAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU4UXVhbFR5cGVFADCuAACQpwAADIcAAER2AAAAAAAALKgAAAQCAAAFAgAABgIAAAcCAACeAgAACQIAAAoCAAALAgAAnwIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1UGl4ZWxWZWN0b3JUeXBlRQAwrgAA+KcAAAyHAABwaXhlbCB2ZWN0b3JbAAAAAAAAAKSoAAAEAgAABQIAAAYCAAAHAgAAoAIAAAkCAAAKAgAACwIAAKECAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMFZlY3RvclR5cGVFAAAwrgAAdKgAAAyHAAAgdmVjdG9yWw==");
writeSegment(43200, "GKkAAKICAACjAgAABgIAAAcCAACkAgAApQIAAAoCAAALAgAApgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTlBcnJheVR5cGVFAAAAADCuAADoqAAADIcAAFsAAAAAAAAAjKkAAKcCAAAFAgAABgIAAAcCAACoAgAAqQIAAAoCAAALAgAAqgIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5UG9pbnRlclRvTWVtYmVyVHlwZUUAMK4AAFSpAAAMhwAAOjoqAFRzAHN0cnVjdABUdQB1bmlvbgBUZQBlbnVtAAAAAAAAIKoAAAQCAAAFAgAABgIAAAcCAACrAgAACQIAAAoCAAALAgAArAIAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTIyRWxhYm9yYXRlZFR5cGVTcGVmVHlwZUUAADCuAADkqQAADIcAAAAAAACIqgAArQIAAAUCAAAGAgAABwIAAK4CAACvAgAACgIAAAsCAACwAgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTFQb2ludGVyVHlwZUUAMK4AAFiqAAAMhwAAaWQ8AG9iamNfb2JqZWN0AAAAAAAEqwAAsQIAAAUCAAAGAgAABwIAALICAACzAgAACgIAAAsCAAC0AgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTNSZWZlcmVuY2VUeXBlRQAAADCuAADQqgAADIcAAAAAAAB4qwAABAIAAAUCAAAGAgAABwIAALUCAAAJAgAACgIAAAsCAAC2AgAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBQb3N0Zml4UXVhbGlmaWVkVHlwZUUAAAAAMK4AADyrAAAMhwAAn5wAAKmcAACpnAAAtpwAAMScAADSnAAAn5wAAKmcAABMoAAAU6AAAFugAABjoAAAdGVybWluYXRlX2hhbmRsZXIgdW5leHBlY3RlZGx5IHJldHVybmVkAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAHN0ZDo6ZXhjZXB0aW9u");
writeSegment(44048, "MKwAAAEAAAC3AgAAuAIAAFN0OWV4Y2VwdGlvbgAAAAAIrgAAIKwAAAAAAABcrAAAAgAAALkCAAC6AgAAU3QxMWxvZ2ljX2Vycm9yADCuAABMrAAAMKwAAAAAAACQrAAAAgAAALsCAAC6AgAAU3QxMmxlbmd0aF9lcnJvcgAAAAAwrgAAfKwAAFysAABTdDl0eXBlX2luZm8AAAAACK4AAJysAABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAAwrgAAtKwAAKysAABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAAwrgAA5KwAANisAAAAAAAAWK0AALwCAAC9AgAAvgIAAL8CAADAAgAATjEwX19jeHhhYml2MTIzX19mdW5kYW1lbnRhbF90eXBlX2luZm9FADCuAAAwrQAA2KwAAHYAAAAcrQAAZK0AAGIAAAAcrQAAcK0AAGMAAAAcrQAAfK0AAGgAAAAcrQAAiK0AAGEAAAAcrQAAlK0AAHMAAAAcrQAAoK0AAHQAAAAcrQAArK0AAGkAAAAcrQAAuK0AAGoAAAAcrQAAxK0AAGwAAAAcrQAA0K0AAG0AAAAcrQAA3K0AAGYAAAAcrQAA6K0AAGQAAAAcrQAA9K0AAAAAAAAIrQAAvAIAAMECAAC+AgAAvwIAAMICAADDAgAAxAIAAMUCAAAAAAAAeK4AALwCAADGAgAAvgIAAL8CAADCAgAAxwIAAMgCAADJAgAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAADCuAABQrgAACK0AAAAAAADUrgAAvAIAAMoCAAC+AgAAvwIAAMICAADLAgAAzAIAAM0CAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAAMK4AAKyuAAAIrQAAdm9pZABib29sAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydABpbnQAdW5zaWduZWQgaW50AGxvbmcAdW5zaWduZWQgbG9uZwBmbG9hdABkb3VibGUAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4Ac3RkOjp3c3RyaW5nAGVtc2NyaXB0ZW46OnZhbABlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0loTlNfMTFjaGFyX3RyYWl0c0loRUVOU185YWxsb2NhdG9ySWhFRUVFAACMrgAA2LEAAAAAAAABAAAAcA4AAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJd05TXzExY2hhcl90cmFpdHNJd0VFTlNfOWFsbG9jYXRvckl3RUVFRQAAjK4AADCyAAAAAAAAAQAAAHAOAAAAAAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJY0VFAAAIrgAAiLIAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWFFRQAACK4AALCyAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0loRUUAAAiuAADYsgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJc0VFAAAIrgAAALMAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXRFRQAACK4AACizAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lpRUUAAAiuAABQswAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJakVFAAAIrgAAeLMAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWxFRQAACK4AAKCzAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ltRUUAAAiuAADIswAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZkVFAAAIrgAA8LMAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWRFRQAACK4AABi0");
writeSegment(46144, "N3eQBFoAAABaAAAAWgAAAIwiAABsJAAA4iQAACQmAADYJgAAKys=");
writeSegment(46372, "wLs=");
writeSegment(46432, "CQ==");
writeSegment(46444, "8Q==");
writeSegment(46464, "8gAAAAAAAADzAAAA6LsAAAAE");
writeSegment(46508, "/////w==");
writeSegment(46576, "BQ==");
writeSegment(46588, "9A==");
writeSegment(46612, "9QAAAPYAAAD4vwAAAAQ=");
writeSegment(46636, "AQ==");
writeSegment(46651, "Cv////8=");
writeSegment(46720, "8LUAAAAAAAAF");
writeSegment(46740, "8Q==");
writeSegment(46764, "9QAAAPMAAAAAxA==");
writeSegment(46788, "Ag==");
writeSegment(46803, "//////8=");
writeSegment(46872, "AwIAAEiF");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}// EMSCRIPTEN_END_ASM




)(asmLibraryArg, wasmMemory, wasmTable);
  return {
   "exports": exports
  };
 },
 instantiate: function(binary, info) {
  return {
   then: function(ok, err) {
    ok({
     "instance": new WebAssembly.Instance(new WebAssembly.Module(binary, info))
    });
   }
  };
 },
 RuntimeError: Error
};

wasmBinary = [];

if (typeof WebAssembly !== "object") {
 err("no native wasm support detected");
}

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;

 case "i8":
  HEAP8[ptr >> 0] = value;
  break;

 case "i16":
  HEAP16[ptr >> 1] = value;
  break;

 case "i32":
  HEAP32[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  HEAPF32[ptr >> 2] = value;
  break;

 case "double":
  HEAPF64[ptr >> 3] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

var wasmMemory;

var wasmTable = new WebAssembly.Table({
 "initial": 719,
 "maximum": 719 + 0,
 "element": "anyfunc"
});

var ABORT = false;

var EXITSTATUS = 0;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

var ALLOC_NONE = 3;

function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, stackAlloc, dynamicAlloc ][allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var stop;
  ptr = ret;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (;ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = u8Array[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

function writeArrayToMemory(array, buffer) {
 HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}

var WASM_PAGE_SIZE = 65536;

var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferAndViews(buf) {
 buffer = buf;
 Module["HEAP8"] = HEAP8 = new Int8Array(buf);
 Module["HEAP16"] = HEAP16 = new Int16Array(buf);
 Module["HEAP32"] = HEAP32 = new Int32Array(buf);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}

var DYNAMIC_BASE = 5296864, DYNAMICTOP_PTR = 53824;

var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 67108864;

if (Module["wasmMemory"]) {
 wasmMemory = Module["wasmMemory"];
} else {
 wasmMemory = new WebAssembly.Memory({
  "initial": INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE,
  "maximum": INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
 });
}

if (wasmMemory) {
 buffer = wasmMemory.buffer;
}

INITIAL_TOTAL_MEMORY = buffer.byteLength;

updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 runtimeInitialized = true;
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
 TTY.init();
 callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
 FS.ignorePermissions = false;
 callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
 runtimeExited = true;
}

function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

var Math_abs = Math.abs;

var Math_ceil = Math.ceil;

var Math_floor = Math.floor;

var Math_min = Math.min;

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

function getUniqueRunDependency(id) {
 return id;
}

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 what += "";
 out(what);
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
 throw new WebAssembly.RuntimeError(what);
}

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}

var wasmBinaryFile = "js_main.wasm";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
 try {
  if (wasmBinary) {
   return new Uint8Array(wasmBinary);
  }
  var binary = tryParseAsDataURI(wasmBinaryFile);
  if (binary) {
   return binary;
  }
  if (readBinary) {
   return readBinary(wasmBinaryFile);
  } else {
   throw "both async and sync fetching of the wasm failed";
  }
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise() {
 if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
  return fetch(wasmBinaryFile, {
   credentials: "same-origin"
  }).then(function(response) {
   if (!response["ok"]) {
    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
   }
   return response["arrayBuffer"]();
  }).catch(function() {
   return getBinary();
  });
 }
 return new Promise(function(resolve, reject) {
  resolve(getBinary());
 });
}

function createWasm() {
 var info = {
  "env": asmLibraryArg,
  "wasi_snapshot_preview1": asmLibraryArg
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  Module["asm"] = exports;
  removeRunDependency("wasm-instantiate");
 }
 addRunDependency("wasm-instantiate");
 function receiveInstantiatedSource(output) {
  receiveInstance(output["instance"]);
 }
 function instantiateArrayBuffer(receiver) {
  return getBinaryPromise().then(function(binary) {
   return WebAssembly.instantiate(binary, info);
  }).then(receiver, function(reason) {
   err("failed to asynchronously prepare wasm: " + reason);
   abort(reason);
  });
 }
 function instantiateAsync() {
  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
   fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    var result = WebAssembly.instantiateStreaming(response, info);
    return result.then(receiveInstantiatedSource, function(reason) {
     err("wasm streaming compile failed: " + reason);
     err("falling back to ArrayBuffer instantiation");
     instantiateArrayBuffer(receiveInstantiatedSource);
    });
   });
  } else {
   return instantiateArrayBuffer(receiveInstantiatedSource);
  }
 }
 if (Module["instantiateWasm"]) {
  try {
   var exports = Module["instantiateWasm"](info, receiveInstance);
   return exports;
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   return false;
  }
 }
 instantiateAsync();
 return {};
}

var tempDouble;

var tempI64;

var ASM_CONSTS = {
 1032: function($0) {
  notifyError(UTF8ToString($0));
 },
 1064: function() {
  hideError();
 },
 1077: function($0, $1) {
  slvStat($0, $1);
 },
 1096: function($0) {
  updateIsRunning($0);
 },
 1128: function() {
  return editingCubeId;
 },
 1178: function($0, $1) {
  lastFamAdded = picsAddFamily(UTF8ToString($0), UTF8ToString($1));
 },
 1246: function($0, $1, $2) {
  picsAddCube(UTF8ToString($0), UTF8ToString($1), $2, false, lastFamAdded);
 },
 1376: function($0) {
  setFamCheck(UTF8ToString($0), true);
 },
 1614: function($0, $1, $2) {
  cube[$0][$1] = $2;
 },
 1636: function($0, $1) {
  return cube[$0][$1];
 },
 1895: function() {
  enableKey();
 },
 1907: function() {
  passPrompt(Module.aboutContinue);
 },
 1940: function() {
  return new Date().valueOf();
 },
 2007: function() {
  start_from_cpp();
 },
 2692: function() {
  requestAnim();
 },
 3432: function() {
  requestSlvRun();
 },
 3448: function($0) {
  updateShapeFcn($0);
 },
 4542: function($0) {
  GLctx.bufferData(GLctx.ARRAY_BUFFER, window[UTF8ToString($0)].vtx, GLctx.STATIC_DRAW);
 },
 4628: function($0) {
  return window[UTF8ToString($0)].vtx.length;
 },
 4671: function($0) {
  GLctx.bufferData(GLctx.ARRAY_BUFFER, window[UTF8ToString($0)].norm, GLctx.STATIC_DRAW);
 },
 4758: function($0) {
  return window[UTF8ToString($0)].norm.length;
 },
 4802: function($0) {
  GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, window[UTF8ToString($0)].idx, GLctx.STATIC_DRAW);
 },
 4896: function($0) {
  return window[UTF8ToString($0)].idx.length;
 },
 6052: function($0, $1, $2, $3) {
  testRect($0, $1, $2, $3);
 },
 6686: function($0) {
  readFrameBuf = new Uint8Array($0);
  readFrameView = new DataView(readFrameBuf.buffer);
 },
 6771: function($0, $1) {
  GLctx.readPixels(0, 0, $0, $1, GLctx.RGBA, GLctx.UNSIGNED_BYTE, readFrameBuf);
 },
 6849: function($0) {
  return readFrameView.getUint32($0, true);
 },
 7146: function() {
  GLctx.bufferData(GLctx.ARRAY_BUFFER, unimesh.vtx, GLctx.STATIC_DRAW);
 },
 7215: function() {
  return unimesh.vtx.length;
 },
 7243: function() {
  GLctx.bufferData(GLctx.ARRAY_BUFFER, unimesh.norm, GLctx.STATIC_DRAW);
 },
 7313: function() {
  return unimesh.norm.length;
 },
 7342: function() {
  return unimesh_keys.length;
 },
 7371: function($0) {
  return parseInt(unimesh_keys[$0]);
 },
 7405: function($0) {
  GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, unimesh[$0], GLctx.STATIC_DRAW);
 },
 7484: function($0) {
  return unimesh[$0].length;
 },
 16312: function($0, $1) {
  registerTexBind(UTF8ToString($0), $1);
 }
};

var _readAsmConstArgsArray = [];

function readAsmConstArgs(sigPtr, buf) {
 var args = _readAsmConstArgsArray;
 args.length = 0;
 while (1) {
  var ch = HEAPU8[sigPtr++];
  if (!ch) return args;
  if (ch === "d".charCodeAt(0) || ch === "f".charCodeAt(0)) {
   buf = alignMemory(buf, 8);
   args.push(HEAPF64[buf >> 3]);
   buf += 8;
  } else if (ch === "i".charCodeAt(0)) {
   buf = alignMemory(buf, 4);
   args.push(HEAP32[buf >> 2]);
   buf += 4;
  }
 }
}

function _emscripten_asm_const_dii(code, sigPtr, argbuf) {
 var args = readAsmConstArgs(sigPtr, argbuf);
 return ASM_CONSTS[code].apply(null, args);
}

function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
 var args = readAsmConstArgs(sigPtr, argbuf);
 return ASM_CONSTS[code].apply(null, args);
}

__ATINIT__.push({
 func: function() {
  ___wasm_call_ctors();
 }
});

function demangle(func) {
 var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
 assert(__cxa_demangle_func);
 try {
  var s = func;
  if (s.startsWith("__Z")) s = s.substr(1);
  var len = lengthBytesUTF8(s) + 1;
  var buf = _malloc(len);
  stringToUTF8(s, buf, len);
  var status = _malloc(4);
  var ret = __cxa_demangle_func(buf, 0, 0, status);
  if (HEAP32[status >> 2] === 0 && ret) {
   return UTF8ToString(ret);
  }
 } catch (e) {} finally {
  if (buf) _free(buf);
  if (status) _free(status);
  if (ret) _free(ret);
 }
 return func;
}

function demangleAll(text) {
 var regex = /\b_Z[\w\d_]+/g;
 return text.replace(regex, function(x) {
  var y = demangle(x);
  return x === y ? x : y + " [" + x + "]";
 });
}

function jsStackTrace() {
 var err = new Error();
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}

function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}

function ___assert_fail(condition, filename, line, func) {
 abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [ filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function" ]);
}

function ___cxa_allocate_exception(size) {
 return _malloc(size);
}

var ___exception_infos = {};

var ___exception_last = 0;

function ___cxa_throw(ptr, type, destructor) {
 ___exception_infos[ptr] = {
  ptr: ptr,
  adjusted: [ ptr ],
  type: type,
  destructor: destructor,
  refcount: 0,
  caught: false,
  rethrown: false
 };
 ___exception_last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exceptions++;
 }
 throw ptr;
}

function ___lock() {}

function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}

function ___map_file(pathname, size) {
 ___setErrNo(63);
 return -1;
}

var PATH = {
 splitPath: function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 },
 normalizeArray: function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (;up; up--) {
    parts.unshift("..");
   }
  }
  return parts;
 },
 normalize: function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 },
 dirname: function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 },
 basename: function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 },
 extname: function(path) {
  return PATH.splitPath(path)[3];
 },
 join: function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 },
 join2: function(l, r) {
  return PATH.normalize(l + "/" + r);
 }
};

var PATH_FS = {
 resolve: function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
   return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 },
 relative: function(from, to) {
  from = PATH_FS.resolve(from).substr(1);
  to = PATH_FS.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (;start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (;end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 }
};

var TTY = {
 ttys: [],
 init: function() {},
 shutdown: function() {},
 register: function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 },
 stream_ops: {
  open: function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(43);
   }
   stream.tty = tty;
   stream.seekable = false;
  },
  close: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  flush: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  read: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(60);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(29);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(6);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  },
  write: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(60);
   }
   try {
    for (var i = 0; i < length; i++) {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    }
   } catch (e) {
    throw new FS.ErrnoError(29);
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  }
 },
 default_tty_ops: {
  get_char: function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
     var bytesRead = 0;
     try {
      bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
     } catch (e) {
      if (e.toString().indexOf("EOF") != -1) bytesRead = 0; else throw e;
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  },
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 },
 default_tty1_ops: {
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 }
};

var MEMFS = {
 ops_table: null,
 mount: function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 },
 createNode: function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(63);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 },
 getFileDataAsRegularArray: function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 },
 getFileDataAsTypedArray: function(node) {
  if (!node.contents) return new Uint8Array();
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 },
 expandFileStorage: function(node, newCapacity) {
  var prevCapacity = node.contents ? node.contents.length : 0;
  if (prevCapacity >= newCapacity) return;
  var CAPACITY_DOUBLING_MAX = 1024 * 1024;
  newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
  if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
  var oldContents = node.contents;
  node.contents = new Uint8Array(newCapacity);
  if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
  return;
 },
 resizeFileStorage: function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 },
 node_ops: {
  getattr: function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  },
  setattr: function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  },
  lookup: function(parent, name) {
   throw FS.genericErrors[44];
  },
  mknod: function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  },
  rename: function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(55);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  },
  unlink: function(parent, name) {
   delete parent.contents[name];
  },
  rmdir: function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(55);
   }
   delete parent.contents[name];
  },
  readdir: function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  },
  symlink: function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  },
  readlink: function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(28);
   }
   return node.link;
  }
 },
 stream_ops: {
  read: function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  },
  write: function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  },
  llseek: function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(28);
   }
   return position;
  },
  allocate: function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  },
  mmap: function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && contents.buffer === buffer.buffer) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    var fromHeap = buffer.buffer == HEAP8.buffer;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(48);
    }
    (fromHeap ? HEAP8 : buffer).set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  },
  msync: function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  }
 }
};

var FS = {
 root: null,
 mounts: [],
 devices: {},
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 syncFSRequests: 0,
 handleFSError: function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 },
 lookupPath: function(path, opts) {
  path = PATH_FS.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(32);
  }
  var parts = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(32);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 },
 getPath: function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 },
 hashName: function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 },
 hashAddNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 },
 hashRemoveNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 },
 lookupNode: function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 },
 createNode: function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   };
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: function() {
      return (this.mode & readMode) === readMode;
     },
     set: function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     }
    },
    write: {
     get: function() {
      return (this.mode & writeMode) === writeMode;
     },
     set: function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     }
    },
    isFolder: {
     get: function() {
      return FS.isDir(this.mode);
     }
    },
    isDevice: {
     get: function() {
      return FS.isChrdev(this.mode);
     }
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 },
 destroyNode: function(node) {
  FS.hashRemoveNode(node);
 },
 isRoot: function(node) {
  return node === node.parent;
 },
 isMountpoint: function(node) {
  return !!node.mounted;
 },
 isFile: function(mode) {
  return (mode & 61440) === 32768;
 },
 isDir: function(mode) {
  return (mode & 61440) === 16384;
 },
 isLink: function(mode) {
  return (mode & 61440) === 40960;
 },
 isChrdev: function(mode) {
  return (mode & 61440) === 8192;
 },
 isBlkdev: function(mode) {
  return (mode & 61440) === 24576;
 },
 isFIFO: function(mode) {
  return (mode & 61440) === 4096;
 },
 isSocket: function(mode) {
  return (mode & 49152) === 49152;
 },
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 },
 flagsToPermissionString: function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 },
 nodePermissions: function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return 2;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return 2;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return 2;
  }
  return 0;
 },
 mayLookup: function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return 2;
  return 0;
 },
 mayCreate: function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return 20;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 },
 mayDelete: function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return 54;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return 10;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return 31;
   }
  }
  return 0;
 },
 mayOpen: function(node, flags) {
  if (!node) {
   return 44;
  }
  if (FS.isLink(node.mode)) {
   return 32;
  } else if (FS.isDir(node.mode)) {
   if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
    return 31;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 },
 MAX_OPEN_FDS: 4096,
 nextfd: function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(33);
 },
 getStream: function(fd) {
  return FS.streams[fd];
 },
 createStream: function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = function() {};
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: function() {
      return this.node;
     },
     set: function(val) {
      this.node = val;
     }
    },
    isRead: {
     get: function() {
      return (this.flags & 2097155) !== 1;
     }
    },
    isWrite: {
     get: function() {
      return (this.flags & 2097155) !== 0;
     }
    },
    isAppend: {
     get: function() {
      return this.flags & 1024;
     }
    }
   });
  }
  var newStream = new FS.FSStream();
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 },
 closeStream: function(fd) {
  FS.streams[fd] = null;
 },
 chrdev_stream_ops: {
  open: function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  },
  llseek: function() {
   throw new FS.ErrnoError(70);
  }
 },
 major: function(dev) {
  return dev >> 8;
 },
 minor: function(dev) {
  return dev & 255;
 },
 makedev: function(ma, mi) {
  return ma << 8 | mi;
 },
 registerDevice: function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 },
 getDevice: function(dev) {
  return FS.devices[dev];
 },
 getMounts: function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 },
 syncfs: function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  FS.syncFSRequests++;
  if (FS.syncFSRequests > 1) {
   console.log("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function doCallback(err) {
   FS.syncFSRequests--;
   return callback(err);
  }
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return doCallback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    doCallback(null);
   }
  }
  mounts.forEach(function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  });
 },
 mount: function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(10);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(10);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(54);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 },
 unmount: function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(28);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach(function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  });
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  node.mount.mounts.splice(idx, 1);
 },
 lookup: function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 },
 mknod: function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(28);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(63);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 },
 create: function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 },
 mkdir: function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 },
 mkdirTree: function(path, mode) {
  var dirs = path.split("/");
  var d = "";
  for (var i = 0; i < dirs.length; ++i) {
   if (!dirs[i]) continue;
   d += "/" + dirs[i];
   try {
    FS.mkdir(d, mode);
   } catch (e) {
    if (e.errno != 20) throw e;
   }
  }
 },
 mkdev: function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 },
 symlink: function(oldpath, newpath) {
  if (!PATH_FS.resolve(oldpath)) {
   throw new FS.ErrnoError(44);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(44);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(63);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 },
 rename: function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(10);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(75);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH_FS.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(28);
  }
  relative = PATH_FS.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(55);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(10);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 },
 rmdir: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 },
 readdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(54);
  }
  return node.node_ops.readdir(node);
 },
 unlink: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 },
 readlink: function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(44);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(28);
  }
  return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 },
 stat: function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(63);
  }
  return node.node_ops.getattr(node);
 },
 lstat: function(path) {
  return FS.stat(path, true);
 },
 chmod: function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 },
 lchmod: function(path, mode) {
  FS.chmod(path, mode, true);
 },
 fchmod: function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chmod(stream.node, mode);
 },
 chown: function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 },
 lchown: function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 },
 fchown: function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chown(stream.node, uid, gid);
 },
 truncate: function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(28);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(28);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 },
 ftruncate: function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(28);
  }
  FS.truncate(stream.node, len);
 },
 utime: function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 },
 open: function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(44);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(20);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(54);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    console.log("FS.trackingDelegate error on read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 },
 close: function(stream) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
  stream.fd = null;
 },
 isClosed: function(stream) {
  return stream.fd === null;
 },
 llseek: function(stream, offset, whence) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(70);
  }
  if (whence != 0 && whence != 1 && whence != 2) {
   throw new FS.ErrnoError(28);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 },
 read: function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(28);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 },
 write: function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(28);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 },
 allocate: function(stream, offset, length) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(28);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(43);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(138);
  }
  stream.stream_ops.allocate(stream, offset, length);
 },
 mmap: function(stream, buffer, offset, length, position, prot, flags) {
  if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
   throw new FS.ErrnoError(2);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(2);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(43);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 },
 msync: function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 },
 munmap: function(stream) {
  return 0;
 },
 ioctl: function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(59);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 },
 readFile: function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 },
 writeFile: function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  var stream = FS.open(path, opts.flags, opts.mode);
  if (typeof data === "string") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
  } else if (ArrayBuffer.isView(data)) {
   FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
  } else {
   throw new Error("Unsupported data type");
  }
  FS.close(stream);
 },
 cwd: function() {
  return FS.currentPath;
 },
 chdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (lookup.node === null) {
   throw new FS.ErrnoError(44);
  }
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(54);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 },
 createDefaultDirectories: function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 },
 createDefaultDevices: function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: function() {
    return 0;
   },
   write: function(stream, buffer, offset, length, pos) {
    return length;
   }
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
   var randomBuffer = new Uint8Array(1);
   random_device = function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   };
  } else if (ENVIRONMENT_IS_NODE) {
   try {
    var crypto_module = require("crypto");
    random_device = function() {
     return crypto_module["randomBytes"](1)[0];
    };
   } catch (e) {}
  } else {}
  if (!random_device) {
   random_device = function() {
    abort("random_device");
   };
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 },
 createSpecialDirectories: function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(8);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: function() {
         return stream.path;
        }
       }
      };
      ret.parent = ret;
      return ret;
     }
    };
    return node;
   }
  }, {}, "/proc/self/fd");
 },
 createStandardStreams: function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  var stdout = FS.open("/dev/stdout", "w");
  var stderr = FS.open("/dev/stderr", "w");
 },
 ensureErrnoError: function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = function(errno) {
    this.errno = errno;
   };
   this.setErrno(errno);
   this.message = "FS error";
  };
  FS.ErrnoError.prototype = new Error();
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ 44 ].forEach(function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  });
 },
 staticInit: function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS
  };
 },
 init: function(input, output, error) {
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 },
 quit: function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 },
 getMode: function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 },
 joinPath: function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 },
 absolutePath: function(relative, base) {
  return PATH_FS.resolve(base, relative);
 },
 standardizePath: function(path) {
  return PATH.normalize(path);
 },
 findObject: function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 },
 analyzePath: function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 },
 createFolder: function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 },
 createPath: function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 },
 createFile: function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 },
 createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 },
 createDevice: function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: function(stream) {
    stream.seekable = false;
   },
   close: function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   },
   read: function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(6);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   },
   write: function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   }
  });
  return FS.mkdev(path, mode, dev);
 },
 createLink: function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 },
 forceLoadFile: function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (read_) {
   try {
    obj.contents = intArrayFromString(read_(obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(29);
  return success;
 },
 createLazyFile: function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest();
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   };
   var lazyArray = this;
   lazyArray.setDataGetter(function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   });
   if (usesGzip || !datalength) {
    chunkSize = datalength = 1;
    datalength = this.getter(0).length;
    chunkSize = datalength;
    console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
   }
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array();
   Object.defineProperties(lazyArray, {
    length: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._length;
     }
    },
    chunkSize: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._chunkSize;
     }
    }
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperties(node, {
   usedBytes: {
    get: function() {
     return this.contents.length;
    }
   }
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach(function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(29);
    }
    return fn.apply(null, arguments);
   };
  });
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(29);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 },
 createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach(function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     });
     handled = true;
    }
   });
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, function(byteArray) {
    processData(byteArray);
   }, onerror);
  } else {
   processData(url);
  }
 },
 indexedDB: function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 },
 DB_NAME: function() {
  return "EM_FS_" + window.location.pathname;
 },
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 },
 loadFilesFromDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }
};

var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(8);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 },
 doStat: function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -54;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  tempI64 = [ stat.size >>> 0, (tempDouble = stat.size, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
  HEAP32[buf + 48 >> 2] = 4096;
  HEAP32[buf + 52 >> 2] = stat.blocks;
  HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 76 >> 2] = 0;
  tempI64 = [ stat.ino >>> 0, (tempDouble = stat.ino, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
  return 0;
 },
 doMsync: function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
  FS.msync(stream, buffer, 0, len, flags);
 },
 doMkdir: function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 },
 doMknod: function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;

  default:
   return -28;
  }
  FS.mknod(path, mode, dev);
  return 0;
 },
 doReadlink: function(path, buf, bufsize) {
  if (bufsize <= 0) return -28;
  var ret = FS.readlink(path);
  var len = Math.min(bufsize, lengthBytesUTF8(ret));
  var endChar = HEAP8[buf + len];
  stringToUTF8(ret, buf, bufsize + 1);
  HEAP8[buf + len] = endChar;
  return len;
 },
 doAccess: function(path, amode) {
  if (amode & ~7) {
   return -28;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  if (!node) {
   return -44;
  }
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -2;
  }
  return 0;
 },
 doDup: function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 },
 doReadv: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 },
 doWritev: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 },
 varargs: 0,
 get: function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 },
 getStr: function() {
  var ret = UTF8ToString(SYSCALLS.get());
  return ret;
 },
 getStreamFromFD: function(fd) {
  if (fd === undefined) fd = SYSCALLS.get();
  var stream = FS.getStream(fd);
  if (!stream) throw new FS.ErrnoError(8);
  return stream;
 },
 get64: function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  return low;
 },
 getZero: function() {
  SYSCALLS.get();
 }
};

function __emscripten_syscall_munmap(addr, len) {
 if (addr === -1 || len === 0) {
  return -28;
 }
 var info = SYSCALLS.mappings[addr];
 if (!info) return 0;
 if (len === info.len) {
  var stream = FS.getStream(info.fd);
  SYSCALLS.doMsync(addr, stream, len, info.flags);
  FS.munmap(stream);
  SYSCALLS.mappings[addr] = null;
  if (info.allocated) {
   _free(info.malloc);
  }
 }
 return 0;
}

function ___syscall91(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var addr = SYSCALLS.get(), len = SYSCALLS.get();
  return __emscripten_syscall_munmap(addr, len);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___unlock() {}

var structRegistrations = {};

function runDestructors(destructors) {
 while (destructors.length) {
  var ptr = destructors.pop();
  var del = destructors.pop();
  del(ptr);
 }
}

function simpleReadValueFromPointer(pointer) {
 return this["fromWireType"](HEAPU32[pointer >> 2]);
}

var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};

var char_0 = 48;

var char_9 = 57;

function makeLegalFunctionName(name) {
 if (undefined === name) {
  return "_unknown";
 }
 name = name.replace(/[^a-zA-Z0-9_]/g, "$");
 var f = name.charCodeAt(0);
 if (f >= char_0 && f <= char_9) {
  return "_" + name;
 } else {
  return name;
 }
}

function createNamedFunction(name, body) {
 name = makeLegalFunctionName(name);
 return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body);
}

function extendError(baseErrorType, errorName) {
 var errorClass = createNamedFunction(errorName, function(message) {
  this.name = errorName;
  this.message = message;
  var stack = new Error(message).stack;
  if (stack !== undefined) {
   this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
  }
 });
 errorClass.prototype = Object.create(baseErrorType.prototype);
 errorClass.prototype.constructor = errorClass;
 errorClass.prototype.toString = function() {
  if (this.message === undefined) {
   return this.name;
  } else {
   return this.name + ": " + this.message;
  }
 };
 return errorClass;
}

var InternalError = undefined;

function throwInternalError(message) {
 throw new InternalError(message);
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
 myTypes.forEach(function(type) {
  typeDependencies[type] = dependentTypes;
 });
 function onComplete(typeConverters) {
  var myTypeConverters = getTypeConverters(typeConverters);
  if (myTypeConverters.length !== myTypes.length) {
   throwInternalError("Mismatched type converter count");
  }
  for (var i = 0; i < myTypes.length; ++i) {
   registerType(myTypes[i], myTypeConverters[i]);
  }
 }
 var typeConverters = new Array(dependentTypes.length);
 var unregisteredTypes = [];
 var registered = 0;
 dependentTypes.forEach(function(dt, i) {
  if (registeredTypes.hasOwnProperty(dt)) {
   typeConverters[i] = registeredTypes[dt];
  } else {
   unregisteredTypes.push(dt);
   if (!awaitingDependencies.hasOwnProperty(dt)) {
    awaitingDependencies[dt] = [];
   }
   awaitingDependencies[dt].push(function() {
    typeConverters[i] = registeredTypes[dt];
    ++registered;
    if (registered === unregisteredTypes.length) {
     onComplete(typeConverters);
    }
   });
  }
 });
 if (0 === unregisteredTypes.length) {
  onComplete(typeConverters);
 }
}

function __embind_finalize_value_object(structType) {
 var reg = structRegistrations[structType];
 delete structRegistrations[structType];
 var rawConstructor = reg.rawConstructor;
 var rawDestructor = reg.rawDestructor;
 var fieldRecords = reg.fields;
 var fieldTypes = fieldRecords.map(function(field) {
  return field.getterReturnType;
 }).concat(fieldRecords.map(function(field) {
  return field.setterArgumentType;
 }));
 whenDependentTypesAreResolved([ structType ], fieldTypes, function(fieldTypes) {
  var fields = {};
  fieldRecords.forEach(function(field, i) {
   var fieldName = field.fieldName;
   var getterReturnType = fieldTypes[i];
   var getter = field.getter;
   var getterContext = field.getterContext;
   var setterArgumentType = fieldTypes[i + fieldRecords.length];
   var setter = field.setter;
   var setterContext = field.setterContext;
   fields[fieldName] = {
    read: function(ptr) {
     return getterReturnType["fromWireType"](getter(getterContext, ptr));
    },
    write: function(ptr, o) {
     var destructors = [];
     setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
     runDestructors(destructors);
    }
   };
  });
  return [ {
   name: reg.name,
   "fromWireType": function(ptr) {
    var rv = {};
    for (var i in fields) {
     rv[i] = fields[i].read(ptr);
    }
    rawDestructor(ptr);
    return rv;
   },
   "toWireType": function(destructors, o) {
    for (var fieldName in fields) {
     if (!(fieldName in o)) {
      throw new TypeError("Missing field");
     }
    }
    var ptr = rawConstructor();
    for (fieldName in fields) {
     fields[fieldName].write(ptr, o[fieldName]);
    }
    if (destructors !== null) {
     destructors.push(rawDestructor, ptr);
    }
    return ptr;
   },
   "argPackAdvance": 8,
   "readValueFromPointer": simpleReadValueFromPointer,
   destructorFunction: rawDestructor
  } ];
 });
}

function getShiftFromSize(size) {
 switch (size) {
 case 1:
  return 0;

 case 2:
  return 1;

 case 4:
  return 2;

 case 8:
  return 3;

 default:
  throw new TypeError("Unknown type size: " + size);
 }
}

function embind_init_charCodes() {
 var codes = new Array(256);
 for (var i = 0; i < 256; ++i) {
  codes[i] = String.fromCharCode(i);
 }
 embind_charCodes = codes;
}

var embind_charCodes = undefined;

function readLatin1String(ptr) {
 var ret = "";
 var c = ptr;
 while (HEAPU8[c]) {
  ret += embind_charCodes[HEAPU8[c++]];
 }
 return ret;
}

var BindingError = undefined;

function throwBindingError(message) {
 throw new BindingError(message);
}

function registerType(rawType, registeredInstance, options) {
 options = options || {};
 if (!("argPackAdvance" in registeredInstance)) {
  throw new TypeError("registerType registeredInstance requires argPackAdvance");
 }
 var name = registeredInstance.name;
 if (!rawType) {
  throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
 }
 if (registeredTypes.hasOwnProperty(rawType)) {
  if (options.ignoreDuplicateRegistrations) {
   return;
  } else {
   throwBindingError("Cannot register type '" + name + "' twice");
  }
 }
 registeredTypes[rawType] = registeredInstance;
 delete typeDependencies[rawType];
 if (awaitingDependencies.hasOwnProperty(rawType)) {
  var callbacks = awaitingDependencies[rawType];
  delete awaitingDependencies[rawType];
  callbacks.forEach(function(cb) {
   cb();
  });
 }
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(wt) {
   return !!wt;
  },
  "toWireType": function(destructors, o) {
   return o ? trueValue : falseValue;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": function(pointer) {
   var heap;
   if (size === 1) {
    heap = HEAP8;
   } else if (size === 2) {
    heap = HEAP16;
   } else if (size === 4) {
    heap = HEAP32;
   } else {
    throw new TypeError("Unknown boolean type size: " + name);
   }
   return this["fromWireType"](heap[pointer >> shift]);
  },
  destructorFunction: null
 });
}

var emval_free_list = [];

var emval_handle_array = [ {}, {
 value: undefined
}, {
 value: null
}, {
 value: true
}, {
 value: false
} ];

function __emval_decref(handle) {
 if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
  emval_handle_array[handle] = undefined;
  emval_free_list.push(handle);
 }
}

function count_emval_handles() {
 var count = 0;
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   ++count;
  }
 }
 return count;
}

function get_first_emval() {
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   return emval_handle_array[i];
  }
 }
 return null;
}

function init_emval() {
 Module["count_emval_handles"] = count_emval_handles;
 Module["get_first_emval"] = get_first_emval;
}

function __emval_register(value) {
 switch (value) {
 case undefined:
  {
   return 1;
  }

 case null:
  {
   return 2;
  }

 case true:
  {
   return 3;
  }

 case false:
  {
   return 4;
  }

 default:
  {
   var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
   emval_handle_array[handle] = {
    refcount: 1,
    value: value
   };
   return handle;
  }
 }
}

function __embind_register_emval(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(handle) {
   var rv = emval_handle_array[handle].value;
   __emval_decref(handle);
   return rv;
  },
  "toWireType": function(destructors, value) {
   return __emval_register(value);
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: null
 });
}

function _embind_repr(v) {
 if (v === null) {
  return "null";
 }
 var t = typeof v;
 if (t === "object" || t === "array" || t === "function") {
  return v.toString();
 } else {
  return "" + v;
 }
}

function floatReadValueFromPointer(name, shift) {
 switch (shift) {
 case 2:
  return function(pointer) {
   return this["fromWireType"](HEAPF32[pointer >> 2]);
  };

 case 3:
  return function(pointer) {
   return this["fromWireType"](HEAPF64[pointer >> 3]);
  };

 default:
  throw new TypeError("Unknown float type: " + name);
 }
}

function __embind_register_float(rawType, name, size) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   return value;
  },
  "toWireType": function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   return value;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": floatReadValueFromPointer(name, shift),
  destructorFunction: null
 });
}

function new_(constructor, argumentList) {
 if (!(constructor instanceof Function)) {
  throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
 }
 var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {});
 dummy.prototype = constructor.prototype;
 var obj = new dummy();
 var r = constructor.apply(obj, argumentList);
 return r instanceof Object ? r : obj;
}

function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
 var argCount = argTypes.length;
 if (argCount < 2) {
  throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
 }
 var isClassMethodFunc = argTypes[1] !== null && classType !== null;
 var needsDestructorStack = false;
 for (var i = 1; i < argTypes.length; ++i) {
  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
   needsDestructorStack = true;
   break;
  }
 }
 var returns = argTypes[0].name !== "void";
 var argsList = "";
 var argsListWired = "";
 for (var i = 0; i < argCount - 2; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
 }
 var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";
 if (needsDestructorStack) {
  invokerFnBody += "var destructors = [];\n";
 }
 var dtorStack = needsDestructorStack ? "destructors" : "null";
 var args1 = [ "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam" ];
 var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];
 if (isClassMethodFunc) {
  invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
 }
 for (var i = 0; i < argCount - 2; ++i) {
  invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
  args1.push("argType" + i);
  args2.push(argTypes[i + 2]);
 }
 if (isClassMethodFunc) {
  argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
 }
 invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
 if (needsDestructorStack) {
  invokerFnBody += "runDestructors(destructors);\n";
 } else {
  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
   var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
   if (argTypes[i].destructorFunction !== null) {
    invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
    args1.push(paramName + "_dtor");
    args2.push(argTypes[i].destructorFunction);
   }
  }
 }
 if (returns) {
  invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
 } else {}
 invokerFnBody += "}\n";
 args1.push(invokerFnBody);
 var invokerFunction = new_(Function, args1).apply(null, args2);
 return invokerFunction;
}

function ensureOverloadTable(proto, methodName, humanName) {
 if (undefined === proto[methodName].overloadTable) {
  var prevFunc = proto[methodName];
  proto[methodName] = function() {
   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
    throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
   }
   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
  };
  proto[methodName].overloadTable = [];
  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
 }
}

function exposePublicSymbol(name, value, numArguments) {
 if (Module.hasOwnProperty(name)) {
  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
   throwBindingError("Cannot register public name '" + name + "' twice");
  }
  ensureOverloadTable(Module, name, name);
  if (Module.hasOwnProperty(numArguments)) {
   throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
  }
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  if (undefined !== numArguments) {
   Module[name].numArguments = numArguments;
  }
 }
}

function heap32VectorToArray(count, firstElement) {
 var array = [];
 for (var i = 0; i < count; i++) {
  array.push(HEAP32[(firstElement >> 2) + i]);
 }
 return array;
}

function replacePublicSymbol(name, value, numArguments) {
 if (!Module.hasOwnProperty(name)) {
  throwInternalError("Replacing nonexistant public symbol");
 }
 if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  Module[name].argCount = numArguments;
 }
}

function embind__requireFunction(signature, rawFunction) {
 signature = readLatin1String(signature);
 function makeDynCaller(dynCall) {
  var args = [];
  for (var i = 1; i < signature.length; ++i) {
   args.push("a" + i);
  }
  var name = "dynCall_" + signature + "_" + rawFunction;
  var body = "return function " + name + "(" + args.join(", ") + ") {\n";
  body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
  body += "};\n";
  return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
 }
 var fp;
 if (Module["FUNCTION_TABLE_" + signature] !== undefined) {
  fp = Module["FUNCTION_TABLE_" + signature][rawFunction];
 } else if (typeof FUNCTION_TABLE !== "undefined") {
  fp = FUNCTION_TABLE[rawFunction];
 } else {
  var dc = Module["dynCall_" + signature];
  if (dc === undefined) {
   dc = Module["dynCall_" + signature.replace(/f/g, "d")];
   if (dc === undefined) {
    throwBindingError("No dynCall invoker for signature: " + signature);
   }
  }
  fp = makeDynCaller(dc);
 }
 if (typeof fp !== "function") {
  throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
 }
 return fp;
}

var UnboundTypeError = undefined;

function getTypeName(type) {
 var ptr = ___getTypeName(type);
 var rv = readLatin1String(ptr);
 _free(ptr);
 return rv;
}

function throwUnboundTypeError(message, types) {
 var unboundTypes = [];
 var seen = {};
 function visit(type) {
  if (seen[type]) {
   return;
  }
  if (registeredTypes[type]) {
   return;
  }
  if (typeDependencies[type]) {
   typeDependencies[type].forEach(visit);
   return;
  }
  unboundTypes.push(type);
  seen[type] = true;
 }
 types.forEach(visit);
 throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([ ", " ]));
}

function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
 var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 name = readLatin1String(name);
 rawInvoker = embind__requireFunction(signature, rawInvoker);
 exposePublicSymbol(name, function() {
  throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
 }, argCount - 1);
 whenDependentTypesAreResolved([], argTypes, function(argTypes) {
  var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));
  replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
  return [];
 });
}

function integerReadValueFromPointer(name, shift, signed) {
 switch (shift) {
 case 0:
  return signed ? function readS8FromPointer(pointer) {
   return HEAP8[pointer];
  } : function readU8FromPointer(pointer) {
   return HEAPU8[pointer];
  };

 case 1:
  return signed ? function readS16FromPointer(pointer) {
   return HEAP16[pointer >> 1];
  } : function readU16FromPointer(pointer) {
   return HEAPU16[pointer >> 1];
  };

 case 2:
  return signed ? function readS32FromPointer(pointer) {
   return HEAP32[pointer >> 2];
  } : function readU32FromPointer(pointer) {
   return HEAPU32[pointer >> 2];
  };

 default:
  throw new TypeError("Unknown integer type: " + name);
 }
}

function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
 name = readLatin1String(name);
 if (maxRange === -1) {
  maxRange = 4294967295;
 }
 var shift = getShiftFromSize(size);
 var fromWireType = function(value) {
  return value;
 };
 if (minRange === 0) {
  var bitshift = 32 - 8 * size;
  fromWireType = function(value) {
   return value << bitshift >>> bitshift;
  };
 }
 var isUnsignedType = name.indexOf("unsigned") != -1;
 registerType(primitiveType, {
  name: name,
  "fromWireType": fromWireType,
  "toWireType": function(destructors, value) {
   if (typeof value !== "number" && typeof value !== "boolean") {
    throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
   }
   if (value < minRange || value > maxRange) {
    throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
   }
   return isUnsignedType ? value >>> 0 : value | 0;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
  destructorFunction: null
 });
}

function __embind_register_memory_view(rawType, dataTypeIndex, name) {
 var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
 var TA = typeMapping[dataTypeIndex];
 function decodeMemoryView(handle) {
  handle = handle >> 2;
  var heap = HEAPU32;
  var size = heap[handle];
  var data = heap[handle + 1];
  return new TA(heap["buffer"], data, size);
 }
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": decodeMemoryView,
  "argPackAdvance": 8,
  "readValueFromPointer": decodeMemoryView
 }, {
  ignoreDuplicateRegistrations: true
 });
}

function __embind_register_std_string(rawType, name) {
 name = readLatin1String(name);
 var stdStringIsUTF8 = name === "std::string";
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var length = HEAPU32[value >> 2];
   var str;
   if (stdStringIsUTF8) {
    var endChar = HEAPU8[value + 4 + length];
    var endCharSwap = 0;
    if (endChar != 0) {
     endCharSwap = endChar;
     HEAPU8[value + 4 + length] = 0;
    }
    var decodeStartPtr = value + 4;
    for (var i = 0; i <= length; ++i) {
     var currentBytePtr = value + 4 + i;
     if (HEAPU8[currentBytePtr] == 0) {
      var stringSegment = UTF8ToString(decodeStartPtr);
      if (str === undefined) str = stringSegment; else {
       str += String.fromCharCode(0);
       str += stringSegment;
      }
      decodeStartPtr = currentBytePtr + 1;
     }
    }
    if (endCharSwap != 0) HEAPU8[value + 4 + length] = endCharSwap;
   } else {
    var a = new Array(length);
    for (var i = 0; i < length; ++i) {
     a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
    }
    str = a.join("");
   }
   _free(value);
   return str;
  },
  "toWireType": function(destructors, value) {
   if (value instanceof ArrayBuffer) {
    value = new Uint8Array(value);
   }
   var getLength;
   var valueIsOfTypeString = typeof value === "string";
   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
    throwBindingError("Cannot pass non-string to std::string");
   }
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    getLength = function() {
     return lengthBytesUTF8(value);
    };
   } else {
    getLength = function() {
     return value.length;
    };
   }
   var length = getLength();
   var ptr = _malloc(4 + length + 1);
   HEAPU32[ptr >> 2] = length;
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    stringToUTF8(value, ptr + 4, length + 1);
   } else {
    if (valueIsOfTypeString) {
     for (var i = 0; i < length; ++i) {
      var charCode = value.charCodeAt(i);
      if (charCode > 255) {
       _free(ptr);
       throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
      }
      HEAPU8[ptr + 4 + i] = charCode;
     }
    } else {
     for (var i = 0; i < length; ++i) {
      HEAPU8[ptr + 4 + i] = value[i];
     }
    }
   }
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

function __embind_register_std_wstring(rawType, charSize, name) {
 name = readLatin1String(name);
 var getHeap, shift;
 if (charSize === 2) {
  getHeap = function() {
   return HEAPU16;
  };
  shift = 1;
 } else if (charSize === 4) {
  getHeap = function() {
   return HEAPU32;
  };
  shift = 2;
 }
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var HEAP = getHeap();
   var length = HEAPU32[value >> 2];
   var a = new Array(length);
   var start = value + 4 >> shift;
   for (var i = 0; i < length; ++i) {
    a[i] = String.fromCharCode(HEAP[start + i]);
   }
   _free(value);
   return a.join("");
  },
  "toWireType": function(destructors, value) {
   var length = value.length;
   var ptr = _malloc(4 + length * charSize);
   var HEAP = getHeap();
   HEAPU32[ptr >> 2] = length;
   var start = ptr + 4 >> shift;
   for (var i = 0; i < length; ++i) {
    HEAP[start + i] = value.charCodeAt(i);
   }
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
 structRegistrations[rawType] = {
  name: readLatin1String(name),
  rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
  rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
  fields: []
 };
}

function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
 structRegistrations[structType].fields.push({
  fieldName: readLatin1String(fieldName),
  getterReturnType: getterReturnType,
  getter: embind__requireFunction(getterSignature, getter),
  getterContext: getterContext,
  setterArgumentType: setterArgumentType,
  setter: embind__requireFunction(setterSignature, setter),
  setterContext: setterContext
 });
}

function __embind_register_void(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  isVoid: true,
  name: name,
  "argPackAdvance": 0,
  "fromWireType": function() {
   return undefined;
  },
  "toWireType": function(destructors, o) {
   return undefined;
  }
 });
}

function requireHandle(handle) {
 if (!handle) {
  throwBindingError("Cannot use deleted val. handle = " + handle);
 }
 return emval_handle_array[handle].value;
}

function requireRegisteredType(rawType, humanName) {
 var impl = registeredTypes[rawType];
 if (undefined === impl) {
  throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
 }
 return impl;
}

function __emval_as(handle, returnType, destructorsRef) {
 handle = requireHandle(handle);
 returnType = requireRegisteredType(returnType, "emval::as");
 var destructors = [];
 var rd = __emval_register(destructors);
 HEAP32[destructorsRef >> 2] = rd;
 return returnType["toWireType"](destructors, handle);
}

var emval_symbols = {};

function getStringOrSymbol(address) {
 var symbol = emval_symbols[address];
 if (symbol === undefined) {
  return readLatin1String(address);
 } else {
  return symbol;
 }
}

var emval_methodCallers = [];

function __emval_call_void_method(caller, handle, methodName, args) {
 caller = emval_methodCallers[caller];
 handle = requireHandle(handle);
 methodName = getStringOrSymbol(methodName);
 caller(handle, methodName, null, args);
}

function emval_get_global() {
 if (typeof globalThis === "object") {
  return globalThis;
 }
 return function() {
  return Function;
 }()("return this")();
}

function __emval_get_global(name) {
 if (name === 0) {
  return __emval_register(emval_get_global());
 } else {
  name = getStringOrSymbol(name);
  return __emval_register(emval_get_global()[name]);
 }
}

function __emval_addMethodCaller(caller) {
 var id = emval_methodCallers.length;
 emval_methodCallers.push(caller);
 return id;
}

function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
 var a = new Array(argCount);
 for (var i = 0; i < argCount; ++i) {
  a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
 }
 return a;
}

function __emval_get_method_caller(argCount, argTypes) {
 var types = __emval_lookupTypes(argCount, argTypes);
 var retType = types[0];
 var signatureName = retType.name + "_$" + types.slice(1).map(function(t) {
  return t.name;
 }).join("_") + "$";
 var params = [ "retType" ];
 var args = [ retType ];
 var argsList = "";
 for (var i = 0; i < argCount - 1; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  params.push("argType" + i);
  args.push(types[1 + i]);
 }
 var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
 var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
 var offset = 0;
 for (var i = 0; i < argCount - 1; ++i) {
  functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
  offset += types[i + 1]["argPackAdvance"];
 }
 functionBody += "    var rv = handle[name](" + argsList + ");\n";
 for (var i = 0; i < argCount - 1; ++i) {
  if (types[i + 1]["deleteObject"]) {
   functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
  }
 }
 if (!retType.isVoid) {
  functionBody += "    return retType.toWireType(destructors, rv);\n";
 }
 functionBody += "};\n";
 params.push(functionBody);
 var invokerFunction = new_(Function, params).apply(null, args);
 return __emval_addMethodCaller(invokerFunction);
}

function __emval_get_property(handle, key) {
 handle = requireHandle(handle);
 key = requireHandle(key);
 return __emval_register(handle[key]);
}

function __emval_incref(handle) {
 if (handle > 4) {
  emval_handle_array[handle].refcount += 1;
 }
}

function craftEmvalAllocator(argCount) {
 var argsList = "";
 for (var i = 0; i < argCount; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
 }
 var functionBody = "return function emval_allocator_" + argCount + "(constructor, argTypes, args) {\n";
 for (var i = 0; i < argCount; ++i) {
  functionBody += "var argType" + i + " = requireRegisteredType(Module['HEAP32'][(argTypes >> 2) + " + i + '], "parameter ' + i + '");\n' + "var arg" + i + " = argType" + i + ".readValueFromPointer(args);\n" + "args += argType" + i + "['argPackAdvance'];\n";
 }
 functionBody += "var obj = new constructor(" + argsList + ");\n" + "return __emval_register(obj);\n" + "}\n";
 return new Function("requireRegisteredType", "Module", "__emval_register", functionBody)(requireRegisteredType, Module, __emval_register);
}

var emval_newers = {};

function __emval_new(handle, argCount, argTypes, args) {
 handle = requireHandle(handle);
 var newer = emval_newers[argCount];
 if (!newer) {
  newer = craftEmvalAllocator(argCount);
  emval_newers[argCount] = newer;
 }
 return newer(handle, argTypes, args);
}

function __emval_new_cstring(v) {
 return __emval_register(getStringOrSymbol(v));
}

function __emval_run_destructors(handle) {
 var destructors = emval_handle_array[handle].value;
 runDestructors(destructors);
 __emval_decref(handle);
}

function __emval_set_property(handle, key, value) {
 handle = requireHandle(handle);
 key = requireHandle(key);
 value = requireHandle(value);
 handle[key] = value;
}

function __emval_take_value(type, argv) {
 type = requireRegisteredType(type, "_emval_take_value");
 var v = type["readValueFromPointer"](argv);
 return __emval_register(v);
}

function _abort() {
 abort();
}

function _emscripten_get_now() {
 abort();
}

function _emscripten_get_now_is_monotonic() {
 return 0 || ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || 1;
}

function _clock_gettime(clk_id, tp) {
 var now;
 if (clk_id === 0) {
  now = Date.now();
 } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
  now = _emscripten_get_now();
 } else {
  ___setErrNo(28);
  return -1;
 }
 HEAP32[tp >> 2] = now / 1e3 | 0;
 HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
 return 0;
}

function _emscripten_get_heap_size() {
 return HEAP8.length;
}

function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}

function abortOnCannotGrowMemory(requestedSize) {
 abort("OOM");
}

function _emscripten_resize_heap(requestedSize) {
 abortOnCannotGrowMemory(requestedSize);
}

var JSEvents = {
 keyEvent: 0,
 mouseEvent: 0,
 wheelEvent: 0,
 uiEvent: 0,
 focusEvent: 0,
 deviceOrientationEvent: 0,
 deviceMotionEvent: 0,
 fullscreenChangeEvent: 0,
 pointerlockChangeEvent: 0,
 visibilityChangeEvent: 0,
 touchEvent: 0,
 previousFullscreenElement: null,
 previousScreenX: null,
 previousScreenY: null,
 removeEventListenersRegistered: false,
 removeAllEventListeners: function() {
  for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
   JSEvents._removeHandler(i);
  }
  JSEvents.eventHandlers = [];
  JSEvents.deferredCalls = [];
 },
 registerRemoveEventListeners: function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push(JSEvents.removeAllEventListeners);
   JSEvents.removeEventListenersRegistered = true;
  }
 },
 deferredCalls: [],
 deferCall: function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort(function(x, y) {
   return x.precedence < y.precedence;
  });
 },
 removeDeferredCalls: function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 },
 canPerformEventHandlerRequests: function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 },
 runDeferredCalls: function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(this, call.argsList);
  }
 },
 inEventHandler: 0,
 currentEventHandler: null,
 eventHandlers: [],
 removeAllHandlersOnTarget: function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 },
 _removeHandler: function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 },
 registerOrRemoveHandler: function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 },
 getNodeNameForTarget: function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 },
 fullscreenEnabled: function() {
  return document.fullscreenEnabled || document.webkitFullscreenEnabled;
 }
};

var __emscripten_webgl_power_preferences = [ "default", "low-power", "high-performance" ];

function __maybeCStringToJsString(cString) {
 return cString === cString + 0 ? UTF8ToString(cString) : cString;
}

var __specialEventTargets = [ 0, typeof document !== "undefined" ? document : 0, typeof window !== "undefined" ? window : 0 ];

function __findEventTarget(target) {
 var domElement = __specialEventTargets[target] || (typeof document !== "undefined" ? document.querySelector(__maybeCStringToJsString(target)) : undefined);
 return domElement;
}

function __findCanvasEventTarget(target) {
 return __findEventTarget(target);
}

var GL = {
 counter: 1,
 lastError: 0,
 buffers: [],
 mappedBuffers: {},
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 uniforms: [],
 shaders: [],
 vaos: [],
 contexts: {},
 currentContext: null,
 offscreenCanvases: {},
 timerQueriesEXT: [],
 programInfos: {},
 stringCache: {},
 unpackAlignment: 4,
 init: function() {
  var miniTempFloatBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferFloatViews[i] = miniTempFloatBuffer.subarray(0, i + 1);
  }
  var miniTempIntBuffer = new Int32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferIntViews[i] = miniTempIntBuffer.subarray(0, i + 1);
  }
 },
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 },
 MINI_TEMP_BUFFER_SIZE: 256,
 miniTempBufferFloatViews: [ 0 ],
 miniTempBufferIntViews: [ 0 ],
 getSource: function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var len = length ? HEAP32[length + i * 4 >> 2] : -1;
   source += UTF8ToString(HEAP32[string + i * 4 >> 2], len < 0 ? undefined : len);
  }
  return source;
 },
 createContext: function(canvas, webGLContextAttributes) {
  var ctx = canvas.getContext("webgl", webGLContextAttributes);
  if (!ctx) return 0;
  var handle = GL.registerContext(ctx, webGLContextAttributes);
  return handle;
 },
 registerContext: function(ctx, webGLContextAttributes) {
  var handle = _malloc(8);
  var context = {
   handle: handle,
   attributes: webGLContextAttributes,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes.enableExtensionsByDefault === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 },
 makeContextCurrent: function(contextHandle) {
  GL.currentContext = GL.contexts[contextHandle];
  Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
  return !(contextHandle && !GLctx);
 },
 getContext: function(contextHandle) {
  return GL.contexts[contextHandle];
 },
 deleteContext: function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  _free(GL.contexts[contextHandle]);
  GL.contexts[contextHandle] = null;
 },
 acquireInstancedArraysExtension: function(ctx) {
  var ext = ctx.getExtension("ANGLE_instanced_arrays");
  if (ext) {
   ctx["vertexAttribDivisor"] = function(index, divisor) {
    ext["vertexAttribDivisorANGLE"](index, divisor);
   };
   ctx["drawArraysInstanced"] = function(mode, first, count, primcount) {
    ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
   };
   ctx["drawElementsInstanced"] = function(mode, count, type, indices, primcount) {
    ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
   };
  }
 },
 acquireVertexArrayObjectExtension: function(ctx) {
  var ext = ctx.getExtension("OES_vertex_array_object");
  if (ext) {
   ctx["createVertexArray"] = function() {
    return ext["createVertexArrayOES"]();
   };
   ctx["deleteVertexArray"] = function(vao) {
    ext["deleteVertexArrayOES"](vao);
   };
   ctx["bindVertexArray"] = function(vao) {
    ext["bindVertexArrayOES"](vao);
   };
   ctx["isVertexArray"] = function(vao) {
    return ext["isVertexArrayOES"](vao);
   };
  }
 },
 acquireDrawBuffersExtension: function(ctx) {
  var ext = ctx.getExtension("WEBGL_draw_buffers");
  if (ext) {
   ctx["drawBuffers"] = function(n, bufs) {
    ext["drawBuffersWEBGL"](n, bufs);
   };
  }
 },
 initExtensions: function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  if (context.version < 2) {
   GL.acquireInstancedArraysExtension(GLctx);
   GL.acquireVertexArrayObjectExtension(GLctx);
   GL.acquireDrawBuffersExtension(GLctx);
  }
  GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth", "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float", "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2", "WEBKIT_WEBGL_compressed_texture_pvrtc" ];
  var exts = GLctx.getSupportedExtensions() || [];
  exts.forEach(function(ext) {
   if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
    GLctx.getExtension(ext);
   }
  });
 },
 populateUniformTable: function(program) {
  var p = GL.programs[program];
  var ptable = GL.programInfos[program] = {
   uniforms: {},
   maxUniformLength: 0,
   maxAttributeLength: -1,
   maxUniformBlockNameLength: -1
  };
  var utable = ptable.uniforms;
  var numUniforms = GLctx.getProgramParameter(p, 35718);
  for (var i = 0; i < numUniforms; ++i) {
   var u = GLctx.getActiveUniform(p, i);
   var name = u.name;
   ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
   if (name.slice(-1) == "]") {
    name = name.slice(0, name.lastIndexOf("["));
   }
   var loc = GLctx.getUniformLocation(p, name);
   if (loc) {
    var id = GL.getNewId(GL.uniforms);
    utable[name] = [ u.size, id ];
    GL.uniforms[id] = loc;
    for (var j = 1; j < u.size; ++j) {
     var n = name + "[" + j + "]";
     loc = GLctx.getUniformLocation(p, n);
     id = GL.getNewId(GL.uniforms);
     GL.uniforms[id] = loc;
    }
   }
  }
 }
};

function _emscripten_webgl_do_create_context(target, attributes) {
 var contextAttributes = {};
 var a = attributes >> 2;
 contextAttributes["alpha"] = !!HEAP32[a + (0 >> 2)];
 contextAttributes["depth"] = !!HEAP32[a + (4 >> 2)];
 contextAttributes["stencil"] = !!HEAP32[a + (8 >> 2)];
 contextAttributes["antialias"] = !!HEAP32[a + (12 >> 2)];
 contextAttributes["premultipliedAlpha"] = !!HEAP32[a + (16 >> 2)];
 contextAttributes["preserveDrawingBuffer"] = !!HEAP32[a + (20 >> 2)];
 var powerPreference = HEAP32[a + (24 >> 2)];
 contextAttributes["powerPreference"] = __emscripten_webgl_power_preferences[powerPreference];
 contextAttributes["failIfMajorPerformanceCaveat"] = !!HEAP32[a + (28 >> 2)];
 contextAttributes.majorVersion = HEAP32[a + (32 >> 2)];
 contextAttributes.minorVersion = HEAP32[a + (36 >> 2)];
 contextAttributes.enableExtensionsByDefault = HEAP32[a + (40 >> 2)];
 contextAttributes.explicitSwapControl = HEAP32[a + (44 >> 2)];
 contextAttributes.proxyContextToMainThread = HEAP32[a + (48 >> 2)];
 contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52 >> 2)];
 var canvas = __findCanvasEventTarget(target);
 if (!canvas) {
  return 0;
 }
 if (contextAttributes.explicitSwapControl) {
  return 0;
 }
 var contextHandle = GL.createContext(canvas, contextAttributes);
 return contextHandle;
}

function _emscripten_webgl_create_context(a0, a1) {
 return _emscripten_webgl_do_create_context(a0, a1);
}

function _emscripten_webgl_init_context_attributes(attributes) {
 var a = attributes >> 2;
 for (var i = 0; i < 56 >> 2; ++i) {
  HEAP32[a + i] = 0;
 }
 HEAP32[a + (0 >> 2)] = HEAP32[a + (4 >> 2)] = HEAP32[a + (12 >> 2)] = HEAP32[a + (16 >> 2)] = HEAP32[a + (32 >> 2)] = HEAP32[a + (40 >> 2)] = 1;
}

function _emscripten_webgl_make_context_current(contextHandle) {
 var success = GL.makeContextCurrent(contextHandle);
 return success ? 0 : -5;
}

var ENV = {};

function _emscripten_get_environ() {
 if (!_emscripten_get_environ.strings) {
  var env = {
   "USER": "web_user",
   "LOGNAME": "web_user",
   "PATH": "/",
   "PWD": "/",
   "HOME": "/home/web_user",
   "LANG": (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
   "_": thisProgram
  };
  for (var x in ENV) {
   env[x] = ENV[x];
  }
  var strings = [];
  for (var x in env) {
   strings.push(x + "=" + env[x]);
  }
  _emscripten_get_environ.strings = strings;
 }
 return _emscripten_get_environ.strings;
}

function _environ_get(__environ, environ_buf) {
 var strings = _emscripten_get_environ();
 var bufSize = 0;
 strings.forEach(function(string, i) {
  var ptr = environ_buf + bufSize;
  HEAP32[__environ + i * 4 >> 2] = ptr;
  writeAsciiToMemory(string, ptr);
  bufSize += string.length + 1;
 });
 return 0;
}

function _environ_sizes_get(penviron_count, penviron_buf_size) {
 var strings = _emscripten_get_environ();
 HEAP32[penviron_count >> 2] = strings.length;
 var bufSize = 0;
 strings.forEach(function(string) {
  bufSize += string.length + 1;
 });
 HEAP32[penviron_buf_size >> 2] = bufSize;
 return 0;
}

function _fd_close(fd) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_read(fd, iov, iovcnt, pnum) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doReadv(stream, iov, iovcnt);
  HEAP32[pnum >> 2] = num;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var HIGH_OFFSET = 4294967296;
  var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  var DOUBLE_LIMIT = 9007199254740992;
  if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
   return -61;
  }
  FS.llseek(stream, offset, whence);
  tempI64 = [ stream.position >>> 0, (tempDouble = stream.position, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _fd_write(fd, iov, iovcnt, pnum) {
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doWritev(stream, iov, iovcnt);
  HEAP32[pnum >> 2] = num;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return e.errno;
 }
}

function _glActiveTexture(x0) {
 GLctx["activeTexture"](x0);
}

function _glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}

function _glBindBuffer(target, buffer) {
 GLctx.bindBuffer(target, GL.buffers[buffer]);
}

function _glBindTexture(target, texture) {
 GLctx.bindTexture(target, GL.textures[texture]);
}

function _glBlendFunc(x0, x1) {
 GLctx["blendFunc"](x0, x1);
}

function _glBufferData(target, size, data, usage) {
 GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage);
}

function _glClear(x0) {
 GLctx["clear"](x0);
}

function _glClearColor(x0, x1, x2, x3) {
 GLctx["clearColor"](x0, x1, x2, x3);
}

function _glClearDepthf(x0) {
 GLctx["clearDepth"](x0);
}

function _glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}

function _glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 GL.programs[id] = program;
 return id;
}

function _glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}

function _glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
 GL.programInfos[id] = null;
}

function _glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}

function _glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}

function _glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}

function _glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}

function _glDrawElements(mode, count, type, indices) {
 GLctx.drawElements(mode, count, type, indices);
}

function _glEnable(x0) {
 GLctx["enable"](x0);
}

function _glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}

function __glGenObject(n, buffers, createFunction, objectTable) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx[createFunction]();
  var id = buffer && GL.getNewId(objectTable);
  if (buffer) {
   buffer.name = id;
   objectTable[id] = buffer;
  } else {
   GL.recordError(1282);
  }
  HEAP32[buffers + i * 4 >> 2] = id;
 }
}

function _glGenBuffers(n, buffers) {
 __glGenObject(n, buffers, "createBuffer", GL.buffers);
}

function _glGenTextures(n, textures) {
 __glGenObject(n, textures, "createTexture", GL.textures);
}

function _glGetAttribLocation(program, name) {
 return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
}

function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
}

function _glGetProgramiv(program, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (program >= GL.counter) {
  GL.recordError(1281);
  return;
 }
 var ptable = GL.programInfos[program];
 if (!ptable) {
  GL.recordError(1282);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  HEAP32[p >> 2] = ptable.maxUniformLength;
 } else if (pname == 35722) {
  if (ptable.maxAttributeLength == -1) {
   program = GL.programs[program];
   var numAttribs = GLctx.getProgramParameter(program, 35721);
   ptable.maxAttributeLength = 0;
   for (var i = 0; i < numAttribs; ++i) {
    var activeAttrib = GLctx.getActiveAttrib(program, i);
    ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
   }
  }
  HEAP32[p >> 2] = ptable.maxAttributeLength;
 } else if (pname == 35381) {
  if (ptable.maxUniformBlockNameLength == -1) {
   program = GL.programs[program];
   var numBlocks = GLctx.getProgramParameter(program, 35382);
   ptable.maxUniformBlockNameLength = 0;
   for (var i = 0; i < numBlocks; ++i) {
    var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
    ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length + 1);
   }
  }
  HEAP32[p >> 2] = ptable.maxUniformBlockNameLength;
 } else {
  HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
 }
}

function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
}

function _glGetShaderiv(shader, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35720) {
  var source = GLctx.getShaderSource(GL.shaders[shader]);
  var sourceLength = source === null || source.length == 0 ? 0 : source.length + 1;
  HEAP32[p >> 2] = sourceLength;
 } else {
  HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}

function _glGetUniformLocation(program, name) {
 name = UTF8ToString(name);
 var arrayIndex = 0;
 if (name[name.length - 1] == "]") {
  var leftBrace = name.lastIndexOf("[");
  arrayIndex = name[leftBrace + 1] != "]" ? parseInt(name.slice(leftBrace + 1)) : 0;
  name = name.slice(0, leftBrace);
 }
 var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name];
 if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) {
  return uniformInfo[1] + arrayIndex;
 } else {
  return -1;
 }
}

function _glLinkProgram(program) {
 GLctx.linkProgram(GL.programs[program]);
 GL.populateUniformTable(program);
}

function _glPolygonOffset(x0, x1) {
 GLctx["polygonOffset"](x0, x1);
}

function _glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}

function _glTexParameteri(x0, x1, x2) {
 GLctx["texParameteri"](x0, x1, x2);
}

function _glUniform1f(location, v0) {
 GLctx.uniform1f(GL.uniforms[location], v0);
}

function _glUniform1i(location, v0) {
 GLctx.uniform1i(GL.uniforms[location], v0);
}

function _glUniform2fv(location, count, value) {
 if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferFloatViews[2 * count - 1];
  for (var i = 0; i < 2 * count; i += 2) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2);
 }
 GLctx.uniform2fv(GL.uniforms[location], view);
}

function _glUniform3fv(location, count, value) {
 if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferFloatViews[3 * count - 1];
  for (var i = 0; i < 3 * count; i += 3) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
   view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2);
 }
 GLctx.uniform3fv(GL.uniforms[location], view);
}

function _glUniformMatrix2fv(location, count, transpose, value) {
 if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferFloatViews[4 * count - 1];
  for (var i = 0; i < 4 * count; i += 4) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
   view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
   view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
}

function _glUniformMatrix3fv(location, count, transpose, value) {
 if (9 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferFloatViews[9 * count - 1];
  for (var i = 0; i < 9 * count; i += 9) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
   view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
   view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
   view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
   view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
   view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
   view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
   view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
 }
 GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
}

function _glUniformMatrix4fv(location, count, transpose, value) {
 if (16 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
  var view = GL.miniTempBufferFloatViews[16 * count - 1];
  for (var i = 0; i < 16 * count; i += 16) {
   view[i] = HEAPF32[value + 4 * i >> 2];
   view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
   view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
   view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
   view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
   view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
   view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
   view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
   view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
   view[i + 9] = HEAPF32[value + (4 * i + 36) >> 2];
   view[i + 10] = HEAPF32[value + (4 * i + 40) >> 2];
   view[i + 11] = HEAPF32[value + (4 * i + 44) >> 2];
   view[i + 12] = HEAPF32[value + (4 * i + 48) >> 2];
   view[i + 13] = HEAPF32[value + (4 * i + 52) >> 2];
   view[i + 14] = HEAPF32[value + (4 * i + 56) >> 2];
   view[i + 15] = HEAPF32[value + (4 * i + 60) >> 2];
  }
 } else {
  var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
 }
 GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
}

function _glUseProgram(program) {
 GLctx.useProgram(GL.programs[program]);
}

function _glVertexAttrib1f(x0, x1) {
 GLctx["vertexAttrib1f"](x0, x1);
}

function _glVertexAttrib4fv(index, v) {
 GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2]);
}

function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
}

function _glViewport(x0, x1, x2, x3) {
 GLctx["viewport"](x0, x1, x2, x3);
}

function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) ;
 return sum;
}

var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}

function _strftime(s, maxsize, format, tm) {
 var tm_zone = HEAP32[tm + 40 >> 2];
 var date = {
  tm_sec: HEAP32[tm >> 2],
  tm_min: HEAP32[tm + 4 >> 2],
  tm_hour: HEAP32[tm + 8 >> 2],
  tm_mday: HEAP32[tm + 12 >> 2],
  tm_mon: HEAP32[tm + 16 >> 2],
  tm_year: HEAP32[tm + 20 >> 2],
  tm_wday: HEAP32[tm + 24 >> 2],
  tm_yday: HEAP32[tm + 28 >> 2],
  tm_isdst: HEAP32[tm + 32 >> 2],
  tm_gmtoff: HEAP32[tm + 36 >> 2],
  tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
 };
 var pattern = UTF8ToString(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S",
  "%Ec": "%c",
  "%EC": "%C",
  "%Ex": "%m/%d/%y",
  "%EX": "%H:%M:%S",
  "%Ey": "%y",
  "%EY": "%Y",
  "%Od": "%d",
  "%Oe": "%e",
  "%OH": "%H",
  "%OI": "%I",
  "%Om": "%m",
  "%OM": "%M",
  "%OS": "%S",
  "%Ou": "%u",
  "%OU": "%U",
  "%OV": "%V",
  "%Ow": "%w",
  "%OW": "%W",
  "%Oy": "%y"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);

  case 1:
   return janFourth;

  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);

  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);

  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);

  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);

  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  },
  "%A": function(date) {
   return WEEKDAYS[date.tm_wday];
  },
  "%b": function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  },
  "%B": function(date) {
   return MONTHS[date.tm_mon];
  },
  "%C": function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  },
  "%d": function(date) {
   return leadingNulls(date.tm_mday, 2);
  },
  "%e": function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  },
  "%g": function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  },
  "%G": function(date) {
   return getWeekBasedYear(date);
  },
  "%H": function(date) {
   return leadingNulls(date.tm_hour, 2);
  },
  "%I": function(date) {
   var twelveHour = date.tm_hour;
   if (twelveHour == 0) twelveHour = 12; else if (twelveHour > 12) twelveHour -= 12;
   return leadingNulls(twelveHour, 2);
  },
  "%j": function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  },
  "%m": function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  },
  "%M": function(date) {
   return leadingNulls(date.tm_min, 2);
  },
  "%n": function() {
   return "\n";
  },
  "%p": function(date) {
   if (date.tm_hour >= 0 && date.tm_hour < 12) {
    return "AM";
   } else {
    return "PM";
   }
  },
  "%S": function(date) {
   return leadingNulls(date.tm_sec, 2);
  },
  "%t": function() {
   return "\t";
  },
  "%u": function(date) {
   return date.tm_wday || 7;
  },
  "%U": function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  },
  "%V": function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  },
  "%w": function(date) {
   return date.tm_wday;
  },
  "%W": function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  },
  "%y": function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  },
  "%Y": function(date) {
   return date.tm_year + 1900;
  },
  "%z": function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  },
  "%Z": function(date) {
   return date.tm_zone;
  },
  "%%": function() {
   return "%";
  }
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.indexOf(rule) >= 0) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}

function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}

function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}

FS.staticInit();

InternalError = Module["InternalError"] = extendError(Error, "InternalError");

embind_init_charCodes();

BindingError = Module["BindingError"] = extendError(Error, "BindingError");

init_emval();

UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");

if (ENVIRONMENT_IS_NODE) {
 _emscripten_get_now = function _emscripten_get_now_actual() {
  var t = process["hrtime"]();
  return t[0] * 1e3 + t[1] / 1e6;
 };
} else if (typeof dateNow !== "undefined") {
 _emscripten_get_now = dateNow;
} else _emscripten_get_now = function() {
 return performance["now"]();
};

var GLctx;

GL.init();

var ASSERTIONS = false;

function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}

function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}

var decodeBase64 = typeof atob === "function" ? atob : function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
};

function intArrayFromBase64(s) {
 if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
  var buf;
  try {
   buf = Buffer.from(s, "base64");
  } catch (_) {
   buf = new Buffer(s, "base64");
  }
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
 }
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}

function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

var asmLibraryArg = {
 "__assert_fail": ___assert_fail,
 "__cxa_allocate_exception": ___cxa_allocate_exception,
 "__cxa_throw": ___cxa_throw,
 "__lock": ___lock,
 "__map_file": ___map_file,
 "__syscall91": ___syscall91,
 "__unlock": ___unlock,
 "_embind_finalize_value_object": __embind_finalize_value_object,
 "_embind_register_bool": __embind_register_bool,
 "_embind_register_emval": __embind_register_emval,
 "_embind_register_float": __embind_register_float,
 "_embind_register_function": __embind_register_function,
 "_embind_register_integer": __embind_register_integer,
 "_embind_register_memory_view": __embind_register_memory_view,
 "_embind_register_std_string": __embind_register_std_string,
 "_embind_register_std_wstring": __embind_register_std_wstring,
 "_embind_register_value_object": __embind_register_value_object,
 "_embind_register_value_object_field": __embind_register_value_object_field,
 "_embind_register_void": __embind_register_void,
 "_emval_as": __emval_as,
 "_emval_call_void_method": __emval_call_void_method,
 "_emval_decref": __emval_decref,
 "_emval_get_global": __emval_get_global,
 "_emval_get_method_caller": __emval_get_method_caller,
 "_emval_get_property": __emval_get_property,
 "_emval_incref": __emval_incref,
 "_emval_new": __emval_new,
 "_emval_new_cstring": __emval_new_cstring,
 "_emval_run_destructors": __emval_run_destructors,
 "_emval_set_property": __emval_set_property,
 "_emval_take_value": __emval_take_value,
 "abort": _abort,
 "clock_gettime": _clock_gettime,
 "emscripten_asm_const_dii": _emscripten_asm_const_dii,
 "emscripten_asm_const_iii": _emscripten_asm_const_iii,
 "emscripten_memcpy_big": _emscripten_memcpy_big,
 "emscripten_resize_heap": _emscripten_resize_heap,
 "emscripten_webgl_create_context": _emscripten_webgl_create_context,
 "emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
 "emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
 "environ_get": _environ_get,
 "environ_sizes_get": _environ_sizes_get,
 "fd_close": _fd_close,
 "fd_read": _fd_read,
 "fd_seek": _fd_seek,
 "fd_write": _fd_write,
 "glActiveTexture": _glActiveTexture,
 "glAttachShader": _glAttachShader,
 "glBindBuffer": _glBindBuffer,
 "glBindTexture": _glBindTexture,
 "glBlendFunc": _glBlendFunc,
 "glBufferData": _glBufferData,
 "glClear": _glClear,
 "glClearColor": _glClearColor,
 "glClearDepthf": _glClearDepthf,
 "glCompileShader": _glCompileShader,
 "glCreateProgram": _glCreateProgram,
 "glCreateShader": _glCreateShader,
 "glDeleteProgram": _glDeleteProgram,
 "glDeleteShader": _glDeleteShader,
 "glDeleteTextures": _glDeleteTextures,
 "glDisableVertexAttribArray": _glDisableVertexAttribArray,
 "glDrawArrays": _glDrawArrays,
 "glDrawElements": _glDrawElements,
 "glEnable": _glEnable,
 "glEnableVertexAttribArray": _glEnableVertexAttribArray,
 "glGenBuffers": _glGenBuffers,
 "glGenTextures": _glGenTextures,
 "glGetAttribLocation": _glGetAttribLocation,
 "glGetProgramInfoLog": _glGetProgramInfoLog,
 "glGetProgramiv": _glGetProgramiv,
 "glGetShaderInfoLog": _glGetShaderInfoLog,
 "glGetShaderiv": _glGetShaderiv,
 "glGetUniformLocation": _glGetUniformLocation,
 "glLinkProgram": _glLinkProgram,
 "glPolygonOffset": _glPolygonOffset,
 "glShaderSource": _glShaderSource,
 "glTexParameteri": _glTexParameteri,
 "glUniform1f": _glUniform1f,
 "glUniform1i": _glUniform1i,
 "glUniform2fv": _glUniform2fv,
 "glUniform3fv": _glUniform3fv,
 "glUniformMatrix2fv": _glUniformMatrix2fv,
 "glUniformMatrix3fv": _glUniformMatrix3fv,
 "glUniformMatrix4fv": _glUniformMatrix4fv,
 "glUseProgram": _glUseProgram,
 "glVertexAttrib1f": _glVertexAttrib1f,
 "glVertexAttrib4fv": _glVertexAttrib4fv,
 "glVertexAttribPointer": _glVertexAttribPointer,
 "glViewport": _glViewport,
 "memory": wasmMemory,
 "setTempRet0": setTempRet0,
 "strftime_l": _strftime_l,
 "table": wasmTable,
 "time": _time
};

var asm = createWasm();

Module["asm"] = asm;

var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
 return Module["asm"]["__wasm_call_ctors"].apply(null, arguments);
};

var _malloc = Module["_malloc"] = function() {
 return Module["asm"]["malloc"].apply(null, arguments);
};

var _main = Module["_main"] = function() {
 return Module["asm"]["main"].apply(null, arguments);
};

var ___errno_location = Module["___errno_location"] = function() {
 return Module["asm"]["__errno_location"].apply(null, arguments);
};

var _free = Module["_free"] = function() {
 return Module["asm"]["free"].apply(null, arguments);
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
 return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments);
};

var ___cxa_demangle = Module["___cxa_demangle"] = function() {
 return Module["asm"]["__cxa_demangle"].apply(null, arguments);
};

var ___getTypeName = Module["___getTypeName"] = function() {
 return Module["asm"]["__getTypeName"].apply(null, arguments);
};

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
 return Module["asm"]["__embind_register_native_and_builtin_types"].apply(null, arguments);
};

var stackAlloc = Module["stackAlloc"] = function() {
 return Module["asm"]["stackAlloc"].apply(null, arguments);
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
 return Module["asm"]["__growWasmMemory"].apply(null, arguments);
};

var dynCall_ii = Module["dynCall_ii"] = function() {
 return Module["asm"]["dynCall_ii"].apply(null, arguments);
};

var dynCall_i = Module["dynCall_i"] = function() {
 return Module["asm"]["dynCall_i"].apply(null, arguments);
};

var dynCall_iif = Module["dynCall_iif"] = function() {
 return Module["asm"]["dynCall_iif"].apply(null, arguments);
};

var dynCall_if = Module["dynCall_if"] = function() {
 return Module["asm"]["dynCall_if"].apply(null, arguments);
};

var dynCall_vii = Module["dynCall_vii"] = function() {
 return Module["asm"]["dynCall_vii"].apply(null, arguments);
};

var dynCall_vi = Module["dynCall_vi"] = function() {
 return Module["asm"]["dynCall_vi"].apply(null, arguments);
};

var dynCall_viii = Module["dynCall_viii"] = function() {
 return Module["asm"]["dynCall_viii"].apply(null, arguments);
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
 return Module["asm"]["dynCall_viiii"].apply(null, arguments);
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
 return Module["asm"]["dynCall_viiiii"].apply(null, arguments);
};

var dynCall_di = Module["dynCall_di"] = function() {
 return Module["asm"]["dynCall_di"].apply(null, arguments);
};

var dynCall_d = Module["dynCall_d"] = function() {
 return Module["asm"]["dynCall_d"].apply(null, arguments);
};

var dynCall_v = Module["dynCall_v"] = function() {
 return Module["asm"]["dynCall_v"].apply(null, arguments);
};

var dynCall_iii = Module["dynCall_iii"] = function() {
 return Module["asm"]["dynCall_iii"].apply(null, arguments);
};

var dynCall_fii = Module["dynCall_fii"] = function() {
 return Module["asm"]["dynCall_fii"].apply(null, arguments);
};

var dynCall_viif = Module["dynCall_viif"] = function() {
 return Module["asm"]["dynCall_viif"].apply(null, arguments);
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
 return Module["asm"]["dynCall_iiiii"].apply(null, arguments);
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
 return Module["asm"]["dynCall_iiii"].apply(null, arguments);
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
 return Module["asm"]["dynCall_viiiiii"].apply(null, arguments);
};

var dynCall_viiiffffffiiiiiiii = Module["dynCall_viiiffffffiiiiiiii"] = function() {
 return Module["asm"]["dynCall_viiiffffffiiiiiiii"].apply(null, arguments);
};

var dynCall_viiffffffiiiiiiii = Module["dynCall_viiffffffiiiiiiii"] = function() {
 return Module["asm"]["dynCall_viiffffffiiiiiiii"].apply(null, arguments);
};

var dynCall_viiiidiii = Module["dynCall_viiiidiii"] = function() {
 return Module["asm"]["dynCall_viiiidiii"].apply(null, arguments);
};

var dynCall_viiidiii = Module["dynCall_viiidiii"] = function() {
 return Module["asm"]["dynCall_viiidiii"].apply(null, arguments);
};

var dynCall_viijii = Module["dynCall_viijii"] = function() {
 return Module["asm"]["dynCall_viijii"].apply(null, arguments);
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
 return Module["asm"]["dynCall_iiiiii"].apply(null, arguments);
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
 return Module["asm"]["dynCall_iidiiii"].apply(null, arguments);
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
 return Module["asm"]["dynCall_jiji"].apply(null, arguments);
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
 return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments);
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
 return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments);
};

var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
 return Module["asm"]["dynCall_iiiiij"].apply(null, arguments);
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
 return Module["asm"]["dynCall_iiiiid"].apply(null, arguments);
};

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
 return Module["asm"]["dynCall_iiiiijj"].apply(null, arguments);
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
 return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments);
};

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
 return Module["asm"]["dynCall_iiiiiijj"].apply(null, arguments);
};

Module["asm"] = asm;

var calledRun;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function callMain(args) {
 var entryFunction = Module["_main"];
 var argc = 0;
 var argv = 0;
 try {
  var ret = entryFunction(argc, argv);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "unwind") {
   noExitRuntime = true;
   return;
  } else {
   var toLog = e;
   if (e && typeof e === "object" && e.stack) {
    toLog = [ e, e.stack ];
   }
   err("exception thrown: " + toLog);
   quit_(1, e);
  }
 } finally {
  calledMain = true;
 }
}

function run(args) {
 args = args || arguments_;
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  if (ABORT) return;
  initRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (shouldRunNow) callMain(args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
}

Module["run"] = run;

function exit(status, implicit) {
 if (implicit && noExitRuntime && status === 0) {
  return;
 }
 if (noExitRuntime) {} else {
  ABORT = true;
  EXITSTATUS = status;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 quit_(status, new ExitStatus(status));
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

var shouldRunNow = true;

if (Module["noInitialRun"]) shouldRunNow = false;

noExitRuntime = true;

run();
