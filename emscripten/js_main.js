var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 if (!Module["thisProgram"]) {
  if (process["argv"].length > 1) {
   Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
  } else {
   Module["thisProgram"] = "unknown-program";
  }
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
 }
 if (typeof Module["setWindowTitle"] === "undefined") {
  Module["setWindowTitle"] = (function(title) {
   document.title = title;
  });
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 prepVararg: (function(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }),
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   sigCache[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return sigCache[func];
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 15 & -16;
  if (DYNAMICTOP >= TOTAL_MEMORY) {
   var success = enlargeMemory();
   if (!success) {
    DYNAMICTOP = ret;
    return 0;
   }
  }
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var JSfuncs = {
  "stackSave": (function() {
   Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore();
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc((str.length << 2) + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) {
   if (opts && opts.async) {
    EmterpreterAsync.asyncFinalizers.push((function() {
     Runtime.stackRestore(stack);
    }));
    return;
   }
   Runtime.stackRestore(stack);
  }
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += "var stack = " + JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
 if (!staticSealed) return Runtime.staticAlloc(size);
 if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized) return Runtime.dynamicAlloc(size);
 return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = HEAP8[ptr++ >> 0];
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
function UTF8ArrayToString(u8Array, idx) {
 var u0, u1, u2, u3, u4, u5;
 var str = "";
 while (1) {
  u0 = u8Array[idx++];
  if (!u0) return str;
  if (!(u0 & 128)) {
   str += String.fromCharCode(u0);
   continue;
  }
  u1 = u8Array[idx++] & 63;
  if ((u0 & 224) == 192) {
   str += String.fromCharCode((u0 & 31) << 6 | u1);
   continue;
  }
  u2 = u8Array[idx++] & 63;
  if ((u0 & 240) == 224) {
   u0 = (u0 & 15) << 12 | u1 << 6 | u2;
  } else {
   u3 = u8Array[idx++] & 63;
   if ((u0 & 248) == 240) {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
   } else {
    u4 = u8Array[idx++] & 63;
    if ((u0 & 252) == 248) {
     u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
    } else {
     u5 = u8Array[idx++] & 63;
     u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
    }
   }
  }
  if (u0 < 65536) {
   str += String.fromCharCode(u0);
  } else {
   var ch = u0 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  }
 }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr >> 1] = codeUnit;
  outPtr += 2;
 }
 HEAP16[outPtr >> 1] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;
function lengthBytesUTF16(str) {
 return str.length * 2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr >> 2] = codeUnit;
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 HEAP32[outPtr >> 2] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;
function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;
function demangle(func) {
 var hasLibcxxabi = !!Module["___cxa_demangle"];
 if (hasLibcxxabi) {
  try {
   var buf = _malloc(func.length);
   writeStringToMemory(func.substr(1), buf);
   var status = _malloc(4);
   var ret = Module["___cxa_demangle"](buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
 }
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 var parsed = func;
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  parsed = parse();
 } catch (e) {
  parsed += "?";
 }
 if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
  Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 }
 return parsed;
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 if (x % 4096 > 0) {
  x += 4096 - x % 4096;
 }
 return x;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function abortOnCannotGrowMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
 abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
if (totalMemory !== TOTAL_MEMORY) {
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer++ >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
 x = x >>> 0;
 for (var i = 0; i < 32; i++) {
  if (x & 1 << 31 - i) return i;
 }
 return 32;
});
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
 return id;
}
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var ASM_CONSTS = [ (function() {
 requestAnim();
}), (function($0, $1) {
 picsAddFamily(Pointer_stringify($0), Pointer_stringify($1));
}), (function($0, $1, $2) {
 picsAddCube(Pointer_stringify($0), Pointer_stringify($1), $2);
}), (function($0) {
 setFamCheck(Pointer_stringify($0), true);
}), (function() {
 requestSlvRun();
}), (function($0, $1) {
 registerTexBind(Pointer_stringify($0), $1);
}), (function() {
 GLctx.bufferData(GLctx.ARRAY_BUFFER, unimesh.vtx, GLctx.STATIC_DRAW);
}), (function() {
 return unimesh.vtx.length;
}), (function() {
 GLctx.bufferData(GLctx.ARRAY_BUFFER, unimesh.norm, GLctx.STATIC_DRAW);
}), (function() {
 return unimesh.norm.length;
}), (function($0) {
 GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, unimesh[$0], GLctx.STATIC_DRAW);
}), (function($0) {
 return unimesh[$0].length;
}) ];
function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}
function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}
function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}
function _emscripten_asm_const_3(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 37632;
__ATINIT__.push({
 func: (function() {
  __GLOBAL__I_000101();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_js_main_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_iostream_cpp();
 })
});
allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
allocate([ 208, 34, 0, 0, 180, 80, 0, 0, 248, 34, 0, 0, 167, 80, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 195, 80, 0, 0, 248, 34, 0, 0, 209, 80, 0, 0, 64, 9, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 7, 81, 0, 0, 248, 34, 0, 0, 23, 81, 0, 0, 40, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 38, 81, 0, 0, 40, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 52, 81, 0, 0, 48, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 67, 81, 0, 0, 48, 9, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 85, 81, 0, 0, 208, 34, 0, 0, 100, 81, 0, 0, 248, 34, 0, 0, 114, 81, 0, 0, 48, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 128, 81, 0, 0, 64, 10, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 147, 81, 0, 0, 64, 10, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 186, 81, 0, 0, 248, 34, 0, 0, 166, 81, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 206, 81, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 230, 81, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 2, 82, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 26, 82, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 50, 82, 0, 0, 200, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 220, 113, 0, 0, 72, 11, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 194, 110, 0, 0, 248, 34, 0, 0, 205, 110, 0, 0, 88, 9, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 219, 110, 0, 0, 248, 34, 0, 0, 35, 111, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 167, 111, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 253, 111, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 25, 112, 0, 0, 248, 34, 0, 0, 45, 112, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 73, 112, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 101, 112, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 162, 112, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 18, 113, 0, 0, 72, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 33, 113, 0, 0, 88, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 46, 113, 0, 0, 72, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 133, 113, 0, 0, 72, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 147, 113, 0, 0, 72, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 161, 113, 0, 0, 72, 9, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 234, 113, 0, 0, 72, 11, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 247, 113, 0, 0, 208, 34, 0, 0, 4, 114, 0, 0, 248, 34, 0, 0, 17, 114, 0, 0, 80, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 50, 114, 0, 0, 88, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 120, 114, 0, 0, 88, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 84, 114, 0, 0, 120, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 154, 114, 0, 0, 104, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 191, 114, 0, 0, 104, 11, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 238, 135, 0, 0, 72, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 45, 136, 0, 0, 72, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 69, 136, 0, 0, 64, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 94, 136, 0, 0, 64, 12, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 118, 136, 0, 0, 32, 35, 0, 0, 143, 136, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 248, 11, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 211, 136, 0, 0, 248, 34, 0, 0, 229, 136, 0, 0, 24, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 15, 137, 0, 0, 24, 12, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 57, 137, 0, 0, 208, 34, 0, 0, 106, 137, 0, 0, 32, 35, 0, 0, 155, 137, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 12, 0, 0, 3, 244, 255, 255, 32, 35, 0, 0, 202, 137, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 12, 0, 0, 3, 244, 255, 255, 32, 35, 0, 0, 249, 137, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 12, 0, 0, 3, 244, 255, 255, 32, 35, 0, 0, 40, 138, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 12, 0, 0, 3, 244, 255, 255, 248, 34, 0, 0, 120, 138, 0, 0, 248, 11, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 142, 138, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 208, 18, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 160, 138, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 216, 18, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 194, 138, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 216, 18, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 229, 138, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 216, 18, 0, 0, 2, 0, 0, 0, 248, 34, 0, 0, 8, 139, 0, 0, 32, 13, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 42, 139, 0, 0, 32, 13, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 77, 139, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 216, 18, 0, 0, 2, 0, 0, 0, 248, 34, 0, 0, 111, 139, 0, 0, 176, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 133, 139, 0, 0, 176, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 153, 139, 0, 0, 176, 12, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 173, 139, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 208, 18, 0, 0, 2, 0, 0, 0, 248, 34, 0, 0, 191, 139, 0, 0, 176, 12, 0, 0, 0, 0, 0, 0, 248, 34, 0, 0, 212, 139, 0, 0, 176, 12, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 233, 139, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 224, 18, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 45, 140, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 248, 18, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 113, 140, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 16, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 181, 140, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 40, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 249, 140, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 64, 19, 0, 0, 2, 0, 0, 0, 72, 19, 0, 0, 0, 8, 0, 0, 32, 35, 0, 0, 62, 141, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 64, 19, 0, 0, 2, 0, 0, 0, 80, 19, 0, 0, 0, 8, 0, 0, 32, 35, 0, 0, 131, 141, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 88, 19, 0, 0, 0, 8, 0, 0, 32, 35, 0, 0, 200, 141, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 88, 19, 0, 0, 0, 8, 0, 0, 32, 35, 0, 0, 13, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 96, 19, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 41, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 96, 19, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 69, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 96, 19, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 97, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 96, 19, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 125, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 104, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 195, 142, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 112, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 9, 143, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 120, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 79, 143, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 128, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 149, 143, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 136, 19, 0, 0, 2, 0, 0, 0, 32, 35, 0, 0, 170, 143, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 176, 12, 0, 0, 2, 0, 0, 0, 136, 19, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 225, 146, 0, 0, 208, 34, 0, 0, 202, 146, 0, 0, 32, 35, 0, 0, 180, 146, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 152, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 133, 146, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 152, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 111, 146, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 144, 19, 0, 0, 0, 0, 0, 0, 32, 35, 0, 0, 64, 146, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 144, 19, 0, 0, 0, 0, 0, 0, 208, 34, 0, 0, 45, 146, 0, 0, 208, 34, 0, 0, 11, 146, 0, 0, 208, 34, 0, 0, 233, 145, 0, 0, 208, 34, 0, 0, 212, 145, 0, 0, 208, 34, 0, 0, 191, 145, 0, 0, 208, 34, 0, 0, 166, 145, 0, 0, 208, 34, 0, 0, 141, 145, 0, 0, 208, 34, 0, 0, 116, 145, 0, 0, 208, 34, 0, 0, 91, 145, 0, 0, 208, 34, 0, 0, 67, 145, 0, 0, 208, 34, 0, 0, 86, 146, 0, 0, 208, 34, 0, 0, 155, 146, 0, 0, 0, 0, 0, 0, 24, 9, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 40, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 9, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 9, 0, 0, 3, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 9, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 55, 119, 144, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 90, 0, 0, 0, 90, 0, 0, 0, 198, 89, 0, 0, 160, 91, 0, 0, 22, 92, 0, 0, 32, 93, 0, 0, 212, 93, 0, 0, 35, 96, 0, 0, 0, 0, 0, 0, 200, 9, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 224, 9, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 14, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 15, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 240, 9, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 17, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 18, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 16, 10, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 21, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 32, 10, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 23, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 168, 9, 0, 0, 9, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 72, 9, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 88, 9, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 64, 9, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 104, 9, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 120, 9, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 35, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 144, 9, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 6, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 152, 9, 0, 0, 7, 0, 0, 0, 41, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 42, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 208, 9, 0, 0, 2, 0, 0, 0, 25, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 26, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 7, 0, 0, 0, 16, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 48, 10, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 200, 10, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 19, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 184, 10, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 168, 10, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 152, 10, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 128, 10, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 112, 10, 0, 0, 46, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 20, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 96, 10, 0, 0, 46, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 21, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 252, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 252, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 0, 0, 0, 0, 107, 89, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 112, 89, 0, 0, 3, 0, 0, 0, 38, 0, 0, 0, 116, 89, 0, 0, 4, 0, 0, 0, 39, 0, 0, 0, 121, 89, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 124, 89, 0, 0, 2, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 240, 0, 0, 0, 248, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 88, 10, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 72, 10, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 216, 10, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 232, 10, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 248, 10, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 8, 11, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 24, 11, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 40, 11, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 56, 11, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 11, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 152, 11, 0, 0, 68, 0, 0, 0, 72, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 168, 11, 0, 0, 68, 0, 0, 0, 73, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 192, 3, 0, 0, 192, 4, 0, 0, 192, 5, 0, 0, 192, 6, 0, 0, 192, 7, 0, 0, 192, 8, 0, 0, 192, 9, 0, 0, 192, 10, 0, 0, 192, 11, 0, 0, 192, 12, 0, 0, 192, 13, 0, 0, 192, 14, 0, 0, 192, 15, 0, 0, 192, 16, 0, 0, 192, 17, 0, 0, 192, 18, 0, 0, 192, 19, 0, 0, 192, 20, 0, 0, 192, 21, 0, 0, 192, 22, 0, 0, 192, 23, 0, 0, 192, 24, 0, 0, 192, 25, 0, 0, 192, 26, 0, 0, 192, 27, 0, 0, 192, 28, 0, 0, 192, 29, 0, 0, 192, 30, 0, 0, 192, 31, 0, 0, 192, 0, 0, 0, 179, 1, 0, 0, 195, 2, 0, 0, 195, 3, 0, 0, 195, 4, 0, 0, 195, 5, 0, 0, 195, 6, 0, 0, 195, 7, 0, 0, 195, 8, 0, 0, 195, 9, 0, 0, 195, 10, 0, 0, 195, 11, 0, 0, 195, 12, 0, 0, 195, 13, 0, 0, 211, 14, 0, 0, 195, 15, 0, 0, 195, 0, 0, 12, 187, 1, 0, 12, 195, 2, 0, 12, 195, 3, 0, 12, 195, 4, 0, 12, 211, 252, 36, 0, 0, 108, 37, 0, 0, 220, 37, 0, 0, 220, 37, 0, 0, 204, 77, 0, 0, 76, 46, 0, 0, 76, 40, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 100, 0, 0, 0, 232, 3, 0, 0, 16, 39, 0, 0, 160, 134, 1, 0, 64, 66, 15, 0, 128, 150, 152, 0, 0, 225, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 215, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 207, 129, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 199, 125, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 127 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 2312);
allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 97, 0, 0, 0, 98, 0, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 97, 0, 0, 0, 98, 0, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 127 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 11848);
allocate([ 184, 11, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 19, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 15, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 22, 0, 0, 0, 16, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 200, 11, 0, 0, 74, 0, 0, 0, 76, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 42, 0, 0, 0, 39, 0, 0, 0, 15, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 24, 0, 0, 0, 17, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 216, 11, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 21, 0, 0, 0, 18, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 19, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 26, 0, 0, 0, 20, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 232, 11, 0, 0, 77, 0, 0, 0, 79, 0, 0, 0, 22, 0, 0, 0, 18, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 49, 0, 0, 0, 46, 0, 0, 0, 19, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 28, 0, 0, 0, 21, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 12, 0, 0, 77, 0, 0, 0, 80, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 49, 0, 0, 0, 46, 0, 0, 0, 19, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 26, 0, 0, 0, 21, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 72, 12, 0, 0, 74, 0, 0, 0, 81, 0, 0, 0, 24, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 42, 0, 0, 0, 39, 0, 0, 0, 15, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 22, 0, 0, 0, 17, 0, 0, 0, 25, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 80, 12, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 248, 255, 255, 255, 248, 255, 255, 255, 80, 12, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 104, 12, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 248, 255, 255, 255, 248, 255, 255, 255, 104, 12, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 12, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 252, 255, 255, 255, 252, 255, 255, 255, 128, 12, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 152, 12, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 252, 255, 255, 255, 252, 255, 255, 255, 152, 12, 0, 0, 96, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 24, 12, 0, 0, 98, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 144, 13, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 13, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 102, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 13, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 102, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 102, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 14, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 102, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 23, 0, 0, 0, 7, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 14, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 102, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 25, 0, 0, 0, 11, 0, 0, 0, 26, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 14, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 102, 0, 0, 0, 52, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 1, 0, 0, 0, 248, 255, 255, 255, 112, 14, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 14, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 102, 0, 0, 0, 60, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 2, 0, 0, 0, 248, 255, 255, 255, 152, 14, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 14, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 102, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 14, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 102, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 102, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 70, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 15, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 102, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 73, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 15, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 102, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 76, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 15, 0, 0, 127, 0, 0, 0, 128, 0, 0, 0, 102, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 79, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 15, 0, 0, 129, 0, 0, 0, 130, 0, 0, 0, 102, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 15, 0, 0, 131, 0, 0, 0, 132, 0, 0, 0, 102, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 15, 0, 0, 133, 0, 0, 0, 134, 0, 0, 0, 102, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 15, 0, 0, 135, 0, 0, 0, 136, 0, 0, 0, 102, 0, 0, 0, 2, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 137, 0, 0, 0, 138, 0, 0, 0, 102, 0, 0, 0, 24, 0, 0, 0, 6, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 0, 0, 139, 0, 0, 0, 140, 0, 0, 0, 102, 0, 0, 0, 25, 0, 0, 0, 7, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 13, 0, 0, 141, 0, 0, 0, 142, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 13, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 102, 0, 0, 0, 30, 0, 0, 0, 26, 0, 0, 0, 31, 0, 0, 0, 27, 0, 0, 0, 32, 0, 0, 0, 3, 0, 0, 0, 28, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 13, 0, 0, 145, 0, 0, 0, 146, 0, 0, 0, 102, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 15, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 13, 0, 0, 147, 0, 0, 0, 148, 0, 0, 0, 102, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 224, 13, 0, 0, 149, 0, 0, 0, 150, 0, 0, 0, 102, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 176, 12, 0, 0, 151, 0, 0, 0, 152, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 192, 12, 0, 0, 151, 0, 0, 0, 153, 0, 0, 0, 102, 0, 0, 0, 29, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 33, 0, 0, 0, 30, 0, 0, 0, 34, 0, 0, 0, 31, 0, 0, 0, 35, 0, 0, 0, 7, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 224, 12, 0, 0, 151, 0, 0, 0, 154, 0, 0, 0, 102, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 17, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 18, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 151, 0, 0, 0, 155, 0, 0, 0, 102, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 19, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 20, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 32, 13, 0, 0, 151, 0, 0, 0, 156, 0, 0, 0, 102, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 22, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 64, 13, 0, 0, 151, 0, 0, 0, 157, 0, 0, 0, 102, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 22, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 80, 13, 0, 0, 151, 0, 0, 0, 158, 0, 0, 0, 102, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 22, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 121, 0, 0, 0, 37, 0, 0, 0, 89, 0, 0, 0, 45, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 45, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 37, 0, 0, 0, 73, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 112, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 114, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 97, 0, 0, 0, 108, 0, 0, 0, 115, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 111, 0, 0, 0, 110, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 101, 0, 0, 0, 100, 0, 0, 0, 110, 0, 0, 0, 101, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 104, 0, 0, 0, 117, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 97, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 114, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 111, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 101, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 104, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 97, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 97, 0, 0, 0, 110, 0, 0, 0, 117, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 101, 0, 0, 0, 98, 0, 0, 0, 114, 0, 0, 0, 117, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 99, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 108, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 117, 0, 0, 0, 103, 0, 0, 0, 117, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 101, 0, 0, 0, 112, 0, 0, 0, 116, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 99, 0, 0, 0, 116, 0, 0, 0, 111, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 111, 0, 0, 0, 118, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 101, 0, 0, 0, 99, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 97, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 101, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 117, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 101, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 99, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 111, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 101, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 97, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 98, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 73, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 96, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 213, 8, 213, 8, 213, 8, 213, 8, 213, 8, 213, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 214, 8, 214, 8, 214, 8, 214, 8, 214, 8, 214, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 4, 192, 4, 192, 4, 192, 4, 192, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 0, 83, 108, 118, 45, 110, 111, 116, 105, 102, 121, 0, 101, 114, 114, 111, 114, 58, 32, 0, 100, 111, 99, 32, 114, 101, 97, 108, 79, 112, 101, 110, 32, 102, 97, 105, 108, 101, 100, 0, 112, 105, 99, 115, 65, 100, 100, 70, 97, 109, 105, 108, 121, 40, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 48, 41, 44, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 49, 41, 41, 0, 112, 105, 99, 115, 65, 100, 100, 67, 117, 98, 101, 40, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 48, 41, 44, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 49, 41, 44, 32, 36, 50, 41, 0, 115, 101, 116, 70, 97, 109, 67, 104, 101, 99, 107, 40, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 48, 41, 44, 32, 116, 114, 117, 101, 41, 0, 109, 121, 99, 97, 110, 118, 97, 115, 0, 49, 48, 82, 117, 110, 67, 111, 110, 116, 101, 120, 116, 0, 49, 50, 83, 111, 108, 118, 101, 67, 111, 110, 116, 101, 120, 116, 0, 49, 49, 83, 104, 97, 100, 101, 114, 80, 97, 114, 97, 109, 0, 49, 49, 66, 97, 115, 101, 80, 114, 111, 103, 114, 97, 109, 0, 114, 101, 113, 117, 101, 115, 116, 65, 110, 105, 109, 40, 41, 0, 70, 117, 108, 108, 45, 101, 110, 117, 109, 0, 114, 101, 113, 117, 101, 115, 116, 83, 108, 118, 82, 117, 110, 40, 41, 0, 49, 51, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 0, 49, 50, 85, 110, 105, 102, 111, 114, 109, 80, 97, 114, 97, 109, 0, 49, 49, 65, 116, 116, 114, 105, 98, 80, 97, 114, 97, 109, 0, 49, 50, 66, 117, 105, 108, 100, 80, 114, 111, 103, 114, 97, 109, 0, 49, 53, 78, 111, 105, 115, 101, 83, 108, 118, 80, 114, 111, 103, 114, 97, 109, 0, 49, 50, 66, 97, 115, 101, 71, 76, 87, 105, 100, 103, 101, 116, 0, 49, 49, 67, 117, 98, 101, 68, 111, 99, 66, 97, 115, 101, 0, 49, 49, 70, 108, 97, 116, 80, 114, 111, 103, 114, 97, 109, 0, 49, 54, 66, 117, 105, 108, 100, 67, 111, 110, 116, 114, 111, 108, 66, 97, 115, 101, 0, 49, 54, 77, 111, 100, 101, 108, 67, 111, 110, 116, 114, 111, 108, 66, 97, 115, 101, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 55, 88, 77, 76, 84, 101, 120, 116, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 55, 88, 77, 76, 78, 111, 100, 101, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 48, 88, 77, 76, 67, 111, 109, 109, 101, 110, 116, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 52, 88, 77, 76, 68, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 48, 88, 77, 76, 85, 110, 107, 110, 111, 119, 110, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 48, 88, 77, 76, 69, 108, 101, 109, 101, 110, 116, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 49, 88, 77, 76, 68, 111, 99, 117, 109, 101, 110, 116, 69, 0, 0, 83, 104, 97, 100, 101, 114, 32, 73, 110, 102, 111, 32, 76, 111, 103, 58, 10, 0, 83, 104, 97, 100, 101, 114, 32, 99, 111, 109, 112, 105, 108, 101, 32, 102, 97, 105, 108, 101, 100, 0, 80, 114, 111, 103, 114, 97, 109, 32, 73, 110, 102, 111, 32, 76, 111, 103, 58, 10, 0, 80, 114, 111, 103, 114, 97, 109, 32, 99, 111, 109, 112, 105, 108, 101, 32, 102, 97, 105, 108, 101, 100, 0, 99, 111, 100, 101, 115, 32, 0, 80, 49, 51, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 0, 118, 116, 120, 32, 0, 102, 114, 97, 103, 32, 0, 108, 105, 110, 107, 32, 0, 67, 111, 109, 112, 105, 108, 101, 100, 32, 79, 75, 32, 0, 112, 114, 111, 103, 105, 110, 102, 111, 32, 0, 118, 97, 114, 115, 32, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 117, 110, 105, 102, 111, 114, 109, 32, 39, 0, 39, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 105, 115, 32, 45, 49, 33, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 39, 0, 98, 97, 100, 32, 109, 101, 115, 104, 32, 116, 121, 112, 101, 0, 0, 114, 101, 103, 105, 115, 116, 101, 114, 84, 101, 120, 66, 105, 110, 100, 40, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 36, 48, 41, 44, 32, 36, 49, 41, 0, 110, 111, 105, 115, 101, 51, 100, 105, 109, 103, 0, 116, 101, 120, 116, 117, 114, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 109, 97, 116, 114, 105, 120, 32, 115, 116, 97, 99, 107, 32, 117, 110, 100, 101, 114, 102, 108, 111, 119, 0, 99, 117, 114, 0, 112, 97, 105, 110, 116, 0, 98, 97, 100, 32, 99, 104, 111, 105, 115, 101, 0, 67, 72, 83, 32, 0, 69, 114, 114, 111, 114, 32, 111, 112, 101, 110, 105, 110, 103, 32, 115, 111, 108, 117, 116, 105, 111, 110, 32, 102, 105, 108, 101, 46, 10, 102, 105, 108, 101, 58, 32, 0, 10, 10, 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 114, 101, 97, 100, 32, 115, 104, 97, 112, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 102, 97, 105, 108, 101, 100, 32, 115, 104, 97, 112, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 44, 32, 98, 117, 103, 46, 0, 102, 97, 105, 108, 101, 100, 32, 114, 101, 97, 100, 105, 110, 103, 0, 10, 10, 70, 105, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 115, 104, 97, 112, 101, 32, 102, 97, 99, 101, 115, 32, 105, 110, 99, 111, 110, 115, 105, 115, 116, 101, 110, 99, 121, 10, 83, 111, 108, 117, 116, 105, 111, 110, 115, 32, 110, 111, 116, 32, 108, 111, 97, 100, 101, 100, 0, 71, 101, 110, 101, 114, 97, 116, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0, 37, 99, 37, 115, 0, 83, 105, 122, 101, 0, 60, 0, 61, 0, 60, 58, 0, 76, 105, 109, 105, 116, 115, 88, 0, 76, 105, 109, 105, 116, 115, 89, 0, 76, 105, 109, 105, 116, 115, 90, 0, 89, 90, 32, 112, 97, 103, 101, 115, 32, 100, 97, 116, 97, 0, 88, 90, 32, 112, 97, 103, 101, 115, 32, 100, 97, 116, 97, 0, 88, 89, 32, 112, 97, 103, 101, 115, 32, 100, 97, 116, 97, 0, 83, 104, 97, 112, 101, 32, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0, 70, 97, 99, 101, 78, 117, 109, 0, 83, 105, 100, 101, 78, 117, 109, 0, 67, 111, 114, 110, 101, 114, 78, 117, 109, 0, 82, 111, 116, 97, 116, 101, 32, 70, 105, 114, 115, 116, 0, 70, 97, 99, 101, 115, 0, 83, 105, 100, 101, 115, 0, 67, 111, 114, 110, 101, 114, 115, 0, 83, 111, 108, 117, 116, 105, 111, 110, 115, 0, 118, 101, 99, 116, 111, 114, 32, 115, 105, 122, 101, 0, 99, 111, 117, 110, 116, 0, 115, 35, 37, 100, 0, 114, 101, 97, 100, 105, 110, 103, 32, 115, 111, 108, 117, 116, 105, 111, 110, 32, 0, 32, 102, 97, 105, 108, 101, 100, 0, 114, 101, 97, 100, 32, 0, 32, 115, 111, 108, 117, 116, 105, 111, 110, 115, 0, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 115, 104, 97, 112, 101, 32, 102, 97, 105, 108, 101, 100, 46, 10, 77, 97, 107, 101, 32, 115, 117, 114, 101, 32, 121, 111, 117, 114, 32, 115, 104, 97, 112, 101, 32, 104, 97, 115, 32, 97, 32, 121, 101, 108, 108, 111, 119, 32, 115, 116, 97, 114, 116, 105, 110, 103, 32, 112, 105, 101, 99, 101, 46, 0, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 115, 104, 97, 112, 101, 32, 102, 97, 105, 108, 101, 100, 46, 10, 83, 104, 97, 112, 101, 32, 105, 115, 32, 109, 97, 100, 101, 32, 111, 102, 32, 115, 101, 118, 101, 114, 97, 108, 32, 100, 105, 115, 99, 111, 110, 110, 101, 99, 116, 101, 100, 32, 112, 97, 114, 116, 115, 46, 10, 84, 104, 101, 32, 115, 104, 97, 112, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 118, 111, 108, 117, 109, 101, 32, 111, 114, 32, 115, 117, 114, 102, 97, 99, 101, 46, 0, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 115, 104, 97, 112, 101, 32, 102, 97, 105, 108, 101, 100, 46, 10, 73, 108, 108, 101, 103, 97, 108, 32, 115, 105, 100, 101, 32, 100, 105, 115, 99, 111, 118, 101, 114, 101, 100, 46, 0, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 115, 104, 97, 112, 101, 32, 102, 97, 105, 108, 101, 100, 46, 10, 85, 110, 107, 110, 111, 119, 110, 32, 101, 114, 114, 111, 114, 44, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 98, 117, 103, 33, 33, 33, 0, 115, 111, 108, 118, 101, 71, 111, 33, 0, 66, 111, 117, 110, 100, 45, 68, 101, 108, 116, 97, 61, 0, 44, 0, 105, 110, 105, 116, 32, 115, 116, 97, 114, 116, 0, 105, 110, 105, 116, 32, 101, 110, 100, 0, 101, 114, 114, 111, 114, 32, 112, 97, 114, 115, 105, 110, 103, 32, 88, 77, 76, 32, 102, 105, 108, 101, 58, 0, 116, 101, 120, 116, 117, 114, 101, 115, 0, 116, 101, 120, 116, 117, 114, 101, 0, 105, 110, 51, 100, 0, 102, 105, 108, 101, 110, 97, 109, 101, 0, 111, 117, 116, 108, 105, 110, 101, 115, 0, 102, 97, 109, 105, 108, 121, 0, 105, 110, 100, 101, 120, 0, 110, 97, 109, 101, 0, 111, 110, 82, 101, 115, 101, 116, 83, 101, 116, 67, 111, 117, 110, 116, 0, 105, 99, 111, 110, 0, 103, 114, 111, 117, 112, 0, 102, 105, 108, 108, 0, 116, 121, 112, 101, 0, 67, 79, 76, 79, 82, 0, 84, 69, 88, 84, 85, 82, 69, 95, 78, 79, 82, 77, 0, 84, 69, 88, 84, 85, 82, 69, 95, 66, 76, 69, 78, 68, 0, 84, 69, 88, 84, 85, 82, 69, 95, 77, 65, 82, 66, 76, 69, 0, 84, 69, 88, 84, 85, 82, 69, 95, 73, 78, 68, 73, 86, 73, 68, 85, 65, 76, 95, 72, 65, 76, 70, 0, 84, 69, 88, 84, 85, 82, 69, 95, 73, 78, 68, 73, 86, 73, 68, 85, 65, 76, 95, 87, 72, 79, 76, 69, 0, 116, 101, 120, 105, 110, 100, 0, 109, 105, 115, 115, 105, 110, 103, 32, 116, 101, 120, 116, 117, 114, 101, 32, 0, 114, 0, 103, 0, 98, 0, 101, 120, 82, 0, 101, 120, 71, 0, 101, 120, 66, 0, 107, 0, 112, 105, 101, 99, 101, 0, 120, 49, 0, 121, 49, 0, 112, 105, 101, 99, 101, 115, 0, 99, 111, 112, 121, 0, 99, 97, 110, 39, 116, 32, 99, 111, 112, 121, 32, 112, 105, 101, 99, 101, 32, 102, 114, 111, 109, 58, 32, 0, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 109, 101, 115, 104, 101, 115, 32, 111, 117, 116, 32, 111, 102, 32, 0, 32, 112, 105, 101, 99, 101, 115, 10, 0, 71, 76, 99, 116, 120, 46, 98, 117, 102, 102, 101, 114, 68, 97, 116, 97, 40, 71, 76, 99, 116, 120, 46, 65, 82, 82, 65, 89, 95, 66, 85, 70, 70, 69, 82, 44, 32, 117, 110, 105, 109, 101, 115, 104, 46, 118, 116, 120, 44, 32, 71, 76, 99, 116, 120, 46, 83, 84, 65, 84, 73, 67, 95, 68, 82, 65, 87, 41, 0, 114, 101, 116, 117, 114, 110, 32, 117, 110, 105, 109, 101, 115, 104, 46, 118, 116, 120, 46, 108, 101, 110, 103, 116, 104, 0, 71, 76, 99, 116, 120, 46, 98, 117, 102, 102, 101, 114, 68, 97, 116, 97, 40, 71, 76, 99, 116, 120, 46, 65, 82, 82, 65, 89, 95, 66, 85, 70, 70, 69, 82, 44, 32, 117, 110, 105, 109, 101, 115, 104, 46, 110, 111, 114, 109, 44, 32, 71, 76, 99, 116, 120, 46, 83, 84, 65, 84, 73, 67, 95, 68, 82, 65, 87, 41, 0, 114, 101, 116, 117, 114, 110, 32, 117, 110, 105, 109, 101, 115, 104, 46, 110, 111, 114, 109, 46, 108, 101, 110, 103, 116, 104, 0, 71, 76, 99, 116, 120, 46, 98, 117, 102, 102, 101, 114, 68, 97, 116, 97, 40, 71, 76, 99, 116, 120, 46, 69, 76, 69, 77, 69, 78, 84, 95, 65, 82, 82, 65, 89, 95, 66, 85, 70, 70, 69, 82, 44, 32, 117, 110, 105, 109, 101, 115, 104, 91, 36, 48, 93, 44, 32, 71, 76, 99, 116, 120, 46, 83, 84, 65, 84, 73, 67, 95, 68, 82, 65, 87, 41, 0, 114, 101, 116, 117, 114, 110, 32, 117, 110, 105, 109, 101, 115, 104, 91, 36, 48, 93, 46, 108, 101, 110, 103, 116, 104, 0, 115, 99, 0, 114, 116, 0, 115, 121, 109, 109, 0, 110, 117, 109, 112, 105, 99, 0, 103, 114, 112, 0, 112, 105, 99, 0, 37, 100, 0, 62, 0, 112, 61, 32, 0, 100, 111, 110, 101, 32, 0, 32, 0, 47, 0, 99, 105, 61, 0, 113, 117, 111, 116, 0, 97, 109, 112, 0, 97, 112, 111, 115, 0, 108, 116, 0, 103, 116, 0, 60, 63, 0, 60, 33, 45, 45, 0, 60, 33, 91, 67, 68, 65, 84, 65, 91, 0, 60, 33, 0, 93, 93, 62, 0, 45, 45, 62, 0, 63, 62, 0, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 85, 84, 70, 45, 56, 34, 0, 116, 97, 103, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 59, 32, 10, 32, 32, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 116, 114, 97, 110, 115, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 118, 116, 120, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 102, 108, 111, 97, 116, 32, 116, 97, 103, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 10, 32, 32, 123, 9, 32, 10, 32, 32, 9, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 9, 105, 102, 32, 40, 116, 97, 103, 32, 61, 61, 32, 49, 46, 48, 41, 32, 32, 10, 32, 32, 9, 9, 99, 111, 108, 111, 114, 32, 42, 61, 32, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 59, 32, 10, 32, 32, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 116, 97, 103, 32, 61, 61, 32, 50, 46, 48, 41, 32, 32, 10, 32, 32, 9, 9, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 49, 46, 48, 44, 32, 49, 46, 48, 44, 32, 49, 46, 48, 44, 32, 49, 46, 48, 41, 32, 45, 32, 99, 111, 108, 111, 114, 42, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 59, 32, 10, 32, 32, 9, 101, 108, 115, 101, 32, 105, 102, 32, 40, 116, 97, 103, 32, 33, 61, 32, 48, 46, 48, 41, 32, 10, 32, 32, 9, 9, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 48, 46, 48, 44, 32, 49, 46, 48, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 116, 114, 97, 110, 115, 32, 42, 32, 118, 101, 99, 52, 40, 118, 116, 120, 44, 32, 49, 46, 48, 41, 59, 32, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 52, 32, 99, 111, 108, 111, 114, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 32, 40, 118, 111, 105, 100, 41, 32, 10, 32, 32, 123, 9, 9, 9, 9, 9, 32, 10, 32, 32, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 116, 114, 97, 110, 115, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 118, 116, 120, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 10, 32, 32, 123, 9, 32, 10, 32, 32, 9, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 9, 47, 47, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 116, 114, 97, 110, 115, 32, 42, 32, 118, 101, 99, 52, 40, 118, 116, 120, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 116, 114, 97, 110, 115, 32, 42, 32, 118, 101, 99, 52, 40, 118, 116, 120, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 32, 40, 118, 111, 105, 100, 41, 32, 10, 32, 32, 123, 9, 9, 9, 9, 9, 32, 10, 32, 32, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 9, 47, 47, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 48, 46, 53, 44, 32, 48, 46, 53, 44, 32, 48, 46, 53, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 59, 32, 10, 32, 32, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 116, 114, 97, 110, 115, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 109, 111, 100, 101, 108, 77, 97, 116, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 51, 32, 110, 111, 114, 109, 97, 108, 77, 97, 116, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 118, 116, 120, 59, 32, 10, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 110, 111, 114, 109, 97, 108, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 108, 105, 103, 104, 116, 80, 111, 115, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 10, 32, 32, 123, 32, 10, 32, 32, 9, 118, 101, 99, 51, 32, 69, 67, 112, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 118, 101, 99, 51, 40, 109, 111, 100, 101, 108, 77, 97, 116, 32, 42, 32, 118, 101, 99, 52, 40, 118, 116, 120, 44, 32, 49, 46, 48, 41, 41, 59, 32, 10, 32, 32, 9, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 61, 32, 118, 116, 120, 59, 32, 10, 32, 32, 9, 118, 101, 99, 51, 32, 116, 110, 111, 114, 109, 32, 32, 32, 32, 32, 32, 61, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 110, 111, 114, 109, 97, 108, 77, 97, 116, 32, 42, 32, 110, 111, 114, 109, 97, 108, 41, 59, 32, 32, 10, 32, 32, 9, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 32, 32, 61, 32, 100, 111, 116, 40, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 108, 105, 103, 104, 116, 80, 111, 115, 32, 45, 32, 69, 67, 112, 111, 115, 105, 116, 105, 111, 110, 41, 44, 32, 116, 110, 111, 114, 109, 41, 59, 32, 47, 47, 32, 103, 108, 95, 76, 105, 103, 104, 116, 83, 111, 117, 114, 99, 101, 91, 48, 93, 46, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 121, 122, 32, 10, 32, 32, 9, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 32, 42, 61, 32, 49, 46, 50, 59, 32, 10, 32, 32, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 32, 32, 32, 32, 61, 32, 116, 114, 97, 110, 115, 32, 42, 32, 118, 101, 99, 52, 40, 118, 116, 120, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 32, 32, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 104, 105, 103, 104, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 10, 32, 32, 118, 97, 114, 121 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 14400);
allocate([ 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 51, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 59, 32, 10, 32, 32, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 66, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 110, 111, 105, 115, 101, 102, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 100, 114, 97, 119, 116, 121, 112, 101, 59, 32, 10, 32, 32, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 105, 110, 116, 32, 102, 108, 97, 103, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 59, 32, 10, 32, 32, 32, 10, 32, 32, 102, 108, 111, 97, 116, 32, 111, 102, 102, 115, 101, 116, 61, 32, 52, 46, 55, 50, 59, 32, 10, 32, 32, 102, 108, 111, 97, 116, 32, 111, 102, 102, 115, 101, 116, 50, 32, 61, 32, 48, 46, 53, 59, 32, 10, 32, 32, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 51, 32, 116, 101, 120, 79, 102, 102, 115, 101, 116, 59, 32, 47, 47, 32, 122, 32, 110, 111, 110, 45, 122, 101, 114, 111, 32, 109, 101, 97, 110, 115, 32, 119, 101, 32, 110, 101, 101, 100, 32, 116, 111, 32, 105, 110, 118, 101, 114, 116, 32, 120, 32, 10, 32, 32, 32, 10, 32, 32, 102, 108, 111, 97, 116, 32, 109, 111, 100, 40, 105, 110, 116, 32, 120, 44, 32, 102, 108, 111, 97, 116, 32, 121, 41, 123, 32, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 108, 111, 97, 116, 40, 120, 41, 32, 45, 32, 121, 32, 42, 32, 102, 108, 111, 111, 114, 40, 102, 108, 111, 97, 116, 40, 120, 41, 32, 47, 32, 121, 41, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 32, 10, 32, 32, 118, 101, 99, 52, 32, 102, 108, 97, 116, 95, 116, 101, 120, 116, 117, 114, 101, 51, 68, 40, 118, 101, 99, 51, 32, 112, 41, 32, 10, 32, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 50, 32, 105, 110, 105, 109, 103, 32, 61, 32, 112, 46, 120, 121, 59, 32, 10, 32, 32, 32, 32, 32, 32, 105, 110, 105, 109, 103, 46, 121, 32, 61, 32, 109, 97, 120, 40, 105, 110, 105, 109, 103, 46, 121, 44, 32, 48, 46, 48, 48, 51, 57, 48, 54, 50, 53, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 105, 110, 105, 109, 103, 46, 121, 32, 61, 32, 109, 105, 110, 40, 105, 110, 105, 109, 103, 46, 121, 44, 32, 48, 46, 57, 57, 54, 48, 57, 51, 55, 53, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 102, 112, 122, 32, 61, 32, 112, 46, 122, 42, 49, 50, 56, 46, 48, 59, 32, 10, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 49, 32, 61, 32, 105, 110, 116, 40, 102, 112, 122, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 120, 49, 32, 61, 32, 109, 111, 100, 40, 100, 49, 44, 32, 56, 46, 48, 41, 59, 32, 32, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 121, 49, 32, 61, 32, 102, 108, 111, 97, 116, 40, 100, 49, 32, 47, 32, 56, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 50, 32, 111, 99, 49, 32, 61, 32, 105, 110, 105, 109, 103, 32, 43, 32, 118, 101, 99, 50, 40, 105, 120, 49, 44, 32, 105, 121, 49, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 111, 99, 49, 32, 42, 61, 32, 118, 101, 99, 50, 40, 48, 46, 49, 50, 53, 44, 32, 48, 46, 50, 53, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 50, 32, 61, 32, 100, 49, 32, 43, 32, 49, 59, 32, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 120, 50, 32, 61, 32, 109, 111, 100, 40, 100, 50, 44, 32, 56, 46, 48, 41, 59, 32, 32, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 121, 50, 32, 61, 32, 102, 108, 111, 97, 116, 40, 100, 50, 32, 47, 32, 56, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 50, 32, 111, 99, 50, 32, 61, 32, 105, 110, 105, 109, 103, 32, 43, 32, 118, 101, 99, 50, 40, 105, 120, 50, 44, 32, 105, 121, 50, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 111, 99, 50, 32, 42, 61, 32, 118, 101, 99, 50, 40, 48, 46, 49, 50, 53, 44, 32, 48, 46, 50, 53, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 52, 32, 116, 49, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 110, 111, 105, 115, 101, 102, 44, 32, 111, 99, 49, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 52, 32, 116, 50, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 110, 111, 105, 115, 101, 102, 44, 32, 111, 99, 50, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 118, 101, 99, 52, 32, 116, 32, 61, 32, 109, 105, 120, 40, 116, 49, 44, 32, 116, 50, 44, 32, 102, 114, 97, 99, 116, 40, 102, 112, 122, 41, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 32, 10, 32, 32, 118, 111, 105, 100, 32, 109, 97, 105, 110, 32, 40, 118, 111, 105, 100, 41, 32, 10, 32, 32, 123, 32, 10, 32, 32, 32, 32, 32, 47, 47, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 49, 46, 48, 44, 32, 48, 46, 48, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 47, 47, 32, 114, 101, 116, 117, 114, 110, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 118, 101, 99, 51, 32, 99, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 51, 40, 48, 46, 53, 44, 32, 48, 46, 53, 44, 32, 48, 46, 53, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 48, 41, 32, 123, 32, 47, 47, 32, 68, 82, 65, 87, 95, 67, 79, 76, 79, 82, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 65, 32, 42, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 50, 41, 32, 123, 32, 47, 47, 32, 98, 108, 101, 110, 100, 32, 98, 108, 97, 99, 107, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 51, 32, 112, 32, 61, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 121, 122, 120, 32, 42, 32, 48, 46, 50, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 52, 32, 110, 111, 105, 115, 101, 118, 101, 99, 32, 61, 32, 102, 108, 97, 116, 95, 116, 101, 120, 116, 117, 114, 101, 51, 68, 40, 112, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 110, 116, 101, 110, 115, 105, 116, 121, 32, 61, 32, 40, 110, 111, 105, 115, 101, 118, 101, 99, 91, 48, 93, 32, 45, 32, 111, 102, 102, 115, 101, 116, 50, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 115, 105, 110, 101, 118, 97, 108, 32, 61, 32, 115, 105, 110, 40, 105, 110, 116, 101, 110, 115, 105, 116, 121, 32, 42, 32, 111, 102, 102, 115, 101, 116, 41, 32, 42, 32, 50, 46, 48, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 105, 110, 101, 118, 97, 108, 32, 61, 32, 99, 108, 97, 109, 112, 40, 115, 105, 110, 101, 118, 97, 108, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 109, 105, 120, 40, 99, 111, 108, 111, 114, 65, 44, 32, 99, 111, 108, 111, 114, 66, 44, 32, 115, 105, 110, 101, 118, 97, 108, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 42, 61, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 48, 120, 49, 52, 41, 32, 123, 32, 32, 47, 47, 32, 68, 82, 65, 87, 95, 84, 69, 88, 84, 85, 82, 69, 95, 73, 78, 68, 73, 86, 73, 68, 85, 65, 76, 95, 72, 65, 76, 70, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 84, 95, 72, 73, 71, 72, 32, 61, 32, 48, 46, 53, 50, 53, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 84, 95, 76, 79, 87, 32, 61, 32, 48, 46, 52, 55, 53, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 116, 120, 32, 61, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 101, 120, 79, 102, 102, 115, 101, 116, 46, 122, 32, 33, 61, 32, 48, 46, 48, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 120, 32, 61, 32, 49, 46, 48, 32, 45, 32, 116, 120, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 120, 32, 62, 32, 84, 95, 72, 73, 71, 72, 41, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 65, 32, 42, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 50, 32, 116, 32, 61, 32, 116, 101, 120, 79, 102, 102, 115, 101, 116, 46, 120, 121, 32, 43, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 121, 122, 32, 47, 32, 40, 56, 46, 48, 42, 53, 46, 48, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 110, 111, 105, 115, 101, 102, 44, 32, 116, 41, 46, 114, 103, 98, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 120, 32, 62, 32, 84, 95, 76, 79, 87, 32, 38, 38, 32, 116, 120, 32, 60, 61, 32, 84, 95, 72, 73, 71, 72, 41, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 109, 105, 120, 40, 99, 111, 108, 111, 114, 44, 32, 99, 111, 108, 111, 114, 65, 44, 32, 115, 109, 111, 111, 116, 104, 115, 116, 101, 112, 40, 84, 95, 76, 79, 87, 44, 32, 84, 95, 72, 73, 71, 72, 44, 32, 116, 120, 41, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 42, 61, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 48, 120, 49, 56, 41, 32, 123, 32, 47, 47, 32, 32, 68, 82, 65, 87, 95, 84, 69, 88, 84, 85, 82, 69, 95, 73, 78, 68, 73, 86, 73, 68, 85, 65, 76, 95, 87, 72, 79, 76, 69, 44, 32, 110, 111, 32, 110, 101, 101, 100, 32, 102, 111, 114, 32, 115, 109, 111, 111, 116, 104, 115, 116, 101, 112, 32, 115, 105, 110, 99, 101, 32, 105, 116, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 99, 111, 108, 111, 114, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 116, 120, 32, 61, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 120, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 101, 120, 79, 102, 102, 115, 101, 116, 46, 122, 32, 33, 61, 32, 48, 46, 48, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 120, 32, 61, 32, 49, 46, 48, 32, 45, 32, 116, 120, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 120, 32, 62, 32, 48, 46, 50, 41, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 65, 32, 42, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 50, 32, 116, 32, 61, 32, 116, 101, 120, 79, 102, 102, 115, 101, 116, 46, 120, 121, 32, 43, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 121, 122, 32, 47, 32, 40, 56, 46, 48, 42, 53, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 110, 111, 105, 115, 101, 102, 44, 32, 116, 41, 46, 114, 103, 98, 32, 42, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 52, 41, 32, 123, 32, 47, 47, 32, 68, 82, 65, 87, 95, 84, 69, 88, 84, 85, 82, 69, 95, 77, 65, 82, 66, 76, 69, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 51, 32, 112, 32, 61, 32, 77, 67, 112, 111, 115, 105, 116, 105, 111, 110, 46, 121, 122, 120, 32, 42, 32, 48, 46, 50, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 101, 99, 52, 32, 110, 111, 105, 115, 101, 118, 101, 99, 32, 61, 32, 102, 108, 97, 116, 95, 116, 101, 120, 116, 117, 114, 101, 51, 68, 40, 112, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 120, 32, 61, 32, 110, 111, 105, 115, 101, 118, 101, 99, 91, 48, 93, 32, 45, 32, 48, 46, 53, 52, 59, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 121, 32, 61, 32, 110, 111, 105, 115, 101, 118, 101, 99, 91, 49, 93, 32, 45, 32, 48, 46, 53, 52, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 105, 110, 116, 101, 110, 115, 105, 116, 121, 32, 61, 32, 97, 98, 115, 40, 120, 41, 42, 48, 46, 53, 32, 43, 32, 97, 98, 115, 40, 121, 41, 42, 48, 46, 53, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 115, 105, 110, 101, 118, 97, 108, 32, 61, 32, 115, 105, 110, 40, 105, 110, 116, 101, 110, 115, 105, 116, 121, 41, 32, 42, 32, 50, 46, 57, 56, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 105, 110, 101, 118, 97, 108, 32, 61, 32, 99, 108, 97, 109, 112, 40, 115, 105, 110, 101, 118, 97, 108, 44, 32, 48, 46, 48, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 109, 105, 120, 40, 99, 111, 108, 111, 114, 65, 44, 32, 99, 111, 108, 111, 114, 66, 44, 32, 115, 105, 110, 101, 118, 97, 108, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 42, 61, 32, 76, 105, 103, 104, 116, 73, 110, 116, 101, 110, 115, 105, 116, 121, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 97, 119, 116, 121, 112, 101, 32, 61, 61, 32, 48, 120, 49, 48, 48, 41, 32, 123, 32, 47, 47, 32, 102, 108, 97, 116, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 61, 32, 99, 111, 108, 111, 114, 65, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 102, 108, 97, 103, 32, 33, 61, 32, 48, 41, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 46, 103, 32, 43, 32, 40, 48, 46, 56, 32, 45, 32, 99, 111, 108, 111, 114, 46, 103, 41, 42, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 44, 32, 99, 111, 108, 111, 114, 46, 103, 32, 45, 32, 40, 48, 46, 51, 32, 42, 32, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 41, 44, 32, 99, 111, 108, 111, 114, 46, 98, 32, 45, 32, 40, 48, 46, 51, 32, 42, 32, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 41, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 118, 101, 99, 52, 40, 99, 111, 108, 111, 114, 44, 32, 49, 46, 48, 41, 59, 32, 10, 32, 32, 125, 32, 10, 32, 32, 0, 57, 71, 76, 72, 97, 110, 100, 108, 101, 114, 0, 49, 49, 70, 108, 111, 97, 116, 65, 116, 116, 114, 105, 98, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 49, 50, 88, 77, 76, 65, 116, 116, 114, 105, 98, 117, 116, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 78, 52, 77, 101, 115, 104, 49, 48, 67, 111, 109, 109, 111, 110, 68, 97, 116, 97, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 78, 52, 77, 101, 115, 104, 49, 48, 67, 111, 109, 109, 111, 110, 68, 97, 116, 97, 69, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 50, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 50, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 55, 80, 105, 99, 68, 105, 115, 112, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 55, 80, 105, 99, 68, 105, 115, 112, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 56, 77, 101, 109, 80, 111, 111, 108, 84, 73, 76, 105, 52, 52, 69, 69, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 55, 77, 101, 109, 80, 111, 111, 108, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 56, 77, 101, 109, 80, 111, 111, 108, 84, 73, 76, 105, 52, 56, 69, 69, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 56, 77, 101, 109, 80, 111, 111, 108, 84, 73, 76, 105, 51, 54, 69, 69, 69, 0, 78, 56, 116, 105, 110, 121, 120, 109, 108, 50, 56, 77, 101, 109, 80, 111, 111, 108, 84, 73, 76, 105, 53, 50, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 53, 83, 104, 97, 112, 101, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 53, 83, 104, 97, 112, 101, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 116, 114, 97, 110, 115, 0, 99, 111, 108, 111, 114, 65, 0, 118, 116, 120, 0, 102, 97, 100, 101, 70, 97, 99, 116, 111, 114, 0, 49, 50, 70, 108, 111, 97, 116, 85, 110, 105, 102, 111, 114, 109, 0, 49, 48, 86, 101, 99, 51, 65, 116, 116, 114, 105, 98, 0, 49, 49, 77, 97, 116, 52, 85, 110, 105, 102, 111, 114, 109, 0, 110, 111, 105, 115, 101, 102, 0, 99, 111, 108, 111, 114, 66, 0, 100, 114, 97, 119, 116, 121, 112, 101, 0, 109, 111, 100, 101, 108, 77, 97, 116, 0, 110, 111, 114, 109, 97, 108, 77, 97, 116, 0, 110, 111, 114, 109, 97, 108, 0, 116, 101, 120, 79, 102, 102, 115, 101, 116, 0, 108, 105, 103, 104, 116, 80, 111, 115, 0, 102, 108, 97, 103, 0, 49, 49, 77, 97, 116, 51, 85, 110, 105, 102, 111, 114, 109, 0, 49, 49, 86, 101, 99, 51, 85, 110, 105, 102, 111, 114, 109, 0, 49, 48, 73, 110, 116, 85, 110, 105, 102, 111, 114, 109, 0, 69, 82, 82, 79, 82, 58, 32, 87, 114, 111, 110, 103, 32, 112, 114, 111, 103, 114, 97, 109, 32, 116, 121, 112, 101, 33, 0, 87, 114, 111, 110, 103, 32, 112, 114, 111, 103, 114, 97, 109, 32, 116, 121, 112, 101, 0, 49, 49, 72, 67, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 83, 116, 57, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 83, 116, 57, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 83, 116, 57, 116, 121, 112, 101, 95, 105, 110, 102, 111, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 54, 95, 95, 115, 104, 105, 109, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 57, 95, 95, 112, 111, 105, 110, 116, 101, 114, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 112, 98, 97, 115, 101, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 48, 95, 95, 115, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 49, 95, 95, 118, 109, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 33, 34, 118, 101, 99, 116, 111, 114, 32, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 34, 0, 67, 58, 92, 108, 105, 98, 92, 69, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 49, 46, 51, 53, 46, 48, 92, 115, 121, 115, 116, 101, 109, 92, 105, 110, 99, 108, 117, 100, 101, 92, 108, 105, 98, 99, 120, 120, 92, 118, 101, 99, 116, 111, 114, 0, 95, 95, 116, 104, 114, 111, 119, 95, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 0, 112, 116, 104, 114, 101, 97, 100, 95, 111, 110, 99, 101, 32, 102, 97, 105, 108, 117, 114, 101, 32, 105, 110, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 95, 102, 97, 115, 116, 40, 41, 0, 115, 116, 100, 58, 58, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 116, 101, 114, 109, 105, 110, 97, 116, 101, 95, 104, 97, 110, 100, 108, 101, 114, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 108, 121, 32, 114, 101, 116, 117, 114, 110, 101, 100, 0, 99, 97, 110, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 112, 116, 104, 114, 101, 97, 100, 32, 107, 101, 121, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 99, 97, 110, 110, 111, 116, 32, 122, 101, 114, 111, 32, 111, 117, 116, 32, 116, 104, 114, 101, 97, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 33, 34, 98, 97, 115, 105, 99, 95, 115, 116, 114, 105, 110, 103, 32, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 34, 0, 67, 58, 92, 108, 105, 98, 92, 69, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 49, 46, 51, 53, 46, 48, 92, 115, 121, 115, 116, 101, 109, 92, 105, 110, 99, 108, 117, 100, 101, 92, 108, 105, 98, 99, 120, 120, 92, 115, 116, 114, 105, 110, 103, 0, 33, 34, 98, 97, 115, 105, 99, 95, 115, 116, 114, 105, 110, 103, 32, 111, 117, 116, 95, 111, 102, 95, 114, 97, 110, 103, 101, 34, 0, 95, 95, 116, 104, 114, 111, 119, 95, 111, 117, 116, 95, 111, 102, 95, 114, 97, 110, 103, 101, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 58, 32, 37, 115, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 102, 111, 114, 101, 105, 103, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 0, 117, 110, 99, 97, 117, 103, 104, 116, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0, 105, 110, 102, 105, 110, 105, 116, 121, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 4, 7, 3, 6, 5, 0, 80, 79, 83, 73, 88 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 24640);
allocate([ 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 46, 0, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 115, 116, 100, 111, 117, 116, 98, 117, 102, 73, 119, 69, 69, 0, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 108, 111, 99, 97, 108, 101, 32, 102, 111, 114, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 105, 110, 112, 117, 116, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 115, 116, 100, 105, 110, 98, 117, 102, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 115, 116, 100, 111, 117, 116, 98, 117, 102, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 115, 116, 100, 105, 110, 98, 117, 102, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 115, 104, 97, 114, 101, 100, 95, 99, 111, 117, 110, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 57, 95, 95, 115, 104, 97, 114, 101, 100, 95, 119, 101, 97, 107, 95, 99, 111, 117, 110, 116, 69, 0, 99, 108, 111, 99, 107, 95, 103, 101, 116, 116, 105, 109, 101, 40, 67, 76, 79, 67, 75, 95, 77, 79, 78, 79, 84, 79, 78, 73, 67, 41, 32, 102, 97, 105, 108, 101, 100, 0, 78, 83, 116, 51, 95, 95, 49, 56, 105, 111, 115, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 98, 97, 115, 105, 99, 95, 105, 111, 115, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 98, 97, 115, 105, 99, 95, 105, 111, 115, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 53, 98, 97, 115, 105, 99, 95, 115, 116, 114, 101, 97, 109, 98, 117, 102, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 53, 98, 97, 115, 105, 99, 95, 115, 116, 114, 101, 97, 109, 98, 117, 102, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 105, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 105, 115, 116, 114, 101, 97, 109, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 111, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 111, 115, 116, 114, 101, 97, 109, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 65, 66, 67, 68, 69, 70, 120, 88, 43, 45, 112, 80, 105, 73, 110, 78, 0, 78, 83, 116, 51, 95, 95, 49, 54, 108, 111, 99, 97, 108, 101, 53, 102, 97, 99, 101, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 53, 99, 116, 121, 112, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 99, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 68, 115, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 68, 105, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 54, 95, 95, 110, 97, 114, 114, 111, 119, 95, 116, 111, 95, 117, 116, 102, 56, 73, 76, 106, 51, 50, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 55, 95, 95, 119, 105, 100, 101, 110, 95, 102, 114, 111, 109, 95, 117, 116, 102, 56, 73, 76, 106, 51, 50, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 119, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 54, 108, 111, 99, 97, 108, 101, 53, 95, 95, 105, 109, 112, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 108, 108, 97, 116, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 108, 108, 97, 116, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 53, 99, 116, 121, 112, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 110, 117, 109, 112, 117, 110, 99, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 110, 117, 109, 112, 117, 110, 99, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 99, 76, 98, 48, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 99, 76, 98, 49, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 119, 76, 98, 48, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 119, 76, 98, 49, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 109, 101, 115, 115, 97, 103, 101, 115, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 109, 101, 115, 115, 97, 103, 101, 115, 73, 119, 69, 69, 0, 37, 112, 0, 67, 0, 37, 0, 0, 0, 0, 0, 108, 0, 108, 108, 0, 0, 76, 0, 37, 112, 0, 0, 0, 0, 37, 72, 58, 37, 77, 58, 37, 83, 37, 109, 47, 37, 100, 47, 37, 121, 37, 89, 45, 37, 109, 45, 37, 100, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 37, 72, 58, 37, 77, 37, 72, 58, 37, 77, 58, 37, 83, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 37, 76, 102, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 37, 46, 48, 76, 102, 0, 116, 114, 117, 101, 0, 102, 97, 108, 115, 101, 0, 83, 117, 110, 100, 97, 121, 0, 77, 111, 110, 100, 97, 121, 0, 84, 117, 101, 115, 100, 97, 121, 0, 87, 101, 100, 110, 101, 115, 100, 97, 121, 0, 84, 104, 117, 114, 115, 100, 97, 121, 0, 70, 114, 105, 100, 97, 121, 0, 83, 97, 116, 117, 114, 100, 97, 121, 0, 83, 117, 110, 0, 77, 111, 110, 0, 84, 117, 101, 0, 87, 101, 100, 0, 84, 104, 117, 0, 70, 114, 105, 0, 83, 97, 116, 0, 74, 97, 110, 117, 97, 114, 121, 0, 70, 101, 98, 114, 117, 97, 114, 121, 0, 77, 97, 114, 99, 104, 0, 65, 112, 114, 105, 108, 0, 77, 97, 121, 0, 74, 117, 110, 101, 0, 74, 117, 108, 121, 0, 65, 117, 103, 117, 115, 116, 0, 83, 101, 112, 116, 101, 109, 98, 101, 114, 0, 79, 99, 116, 111, 98, 101, 114, 0, 78, 111, 118, 101, 109, 98, 101, 114, 0, 68, 101, 99, 101, 109, 98, 101, 114, 0, 74, 97, 110, 0, 70, 101, 98, 0, 77, 97, 114, 0, 65, 112, 114, 0, 74, 117, 110, 0, 74, 117, 108, 0, 65, 117, 103, 0, 83, 101, 112, 0, 79, 99, 116, 0, 78, 111, 118, 0, 68, 101, 99, 0, 65, 77, 0, 80, 77, 0, 37, 109, 47, 37, 100, 47, 37, 121, 0, 37, 72, 58, 37, 77, 58, 37, 83, 0, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 72, 58, 37, 77, 58, 37, 83, 32, 37, 89, 0, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 109, 101, 115, 115, 97, 103, 101, 115, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 116, 105, 109, 101, 95, 112, 117, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 116, 105, 109, 101, 95, 103, 101, 116, 95, 99, 95, 115, 116, 111, 114, 97, 103, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 116, 105, 109, 101, 95, 103, 101, 116, 95, 99, 95, 115, 116, 111, 114, 97, 103, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 116, 105, 109, 101, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 112, 117, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 110, 117, 109, 95, 112, 117, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 112, 117, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 103, 101, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 110, 117, 109, 95, 103, 101, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 103, 101, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 50, 99, 111, 100, 101, 99, 118, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 99, 116, 121, 112, 101, 95, 98, 97, 115, 101, 69, 0 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 34255);
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
function _atexit(func, arg) {
 __ATEXIT__.unshift({
  func: func,
  arg: arg
 });
}
function ___cxa_atexit() {
 return _atexit.apply(null, arguments);
}
Module["_i64Subtract"] = _i64Subtract;
var GL = {
 counter: 1,
 lastError: 0,
 buffers: [],
 mappedBuffers: {},
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 uniforms: [],
 shaders: [],
 vaos: [],
 contexts: [],
 currentContext: null,
 byteSizeByTypeRoot: 5120,
 byteSizeByType: [ 1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8 ],
 programInfos: {},
 stringCache: {},
 packAlignment: 4,
 unpackAlignment: 4,
 init: (function() {
  GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
  }
 }),
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: (function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 }),
 MINI_TEMP_BUFFER_SIZE: 16,
 miniTempBuffer: null,
 miniTempBufferViews: [ 0 ],
 getSource: (function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var frag;
   if (length) {
    var len = HEAP32[length + i * 4 >> 2];
    if (len < 0) {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
    } else {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2], len);
    }
   } else {
    frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
   }
   source += frag;
  }
  return source;
 }),
 createContext: (function(canvas, webGLContextAttributes) {
  if (typeof webGLContextAttributes.majorVersion === "undefined" && typeof webGLContextAttributes.minorVersion === "undefined") {
   webGLContextAttributes.majorVersion = 1;
   webGLContextAttributes.minorVersion = 0;
  }
  var ctx;
  var errorInfo = "?";
  function onContextCreationError(event) {
   errorInfo = event.statusMessage || errorInfo;
  }
  try {
   canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
   try {
    if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
    } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
    } else {
     throw "Unsupported WebGL context version " + majorVersion + "." + minorVersion + "!";
    }
   } finally {
    canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
   }
   if (!ctx) throw ":(";
  } catch (e) {
   Module.print("Could not create canvas: " + [ errorInfo, e, JSON.stringify(webGLContextAttributes) ]);
   return 0;
  }
  if (!ctx) return 0;
  return GL.registerContext(ctx, webGLContextAttributes);
 }),
 registerContext: (function(ctx, webGLContextAttributes) {
  var handle = GL.getNewId(GL.contexts);
  var context = {
   handle: handle,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes["enableExtensionsByDefault"] === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 }),
 makeContextCurrent: (function(contextHandle) {
  var context = GL.contexts[contextHandle];
  if (!context) return false;
  GLctx = Module.ctx = context.GLctx;
  GL.currentContext = context;
  return true;
 }),
 getContext: (function(contextHandle) {
  return GL.contexts[contextHandle];
 }),
 deleteContext: (function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  GL.contexts[contextHandle] = null;
 }),
 initExtensions: (function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  if (context.version < 2) {
   var instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");
   if (instancedArraysExt) {
    GLctx["vertexAttribDivisor"] = (function(index, divisor) {
     instancedArraysExt["vertexAttribDivisorANGLE"](index, divisor);
    });
    GLctx["drawArraysInstanced"] = (function(mode, first, count, primcount) {
     instancedArraysExt["drawArraysInstancedANGLE"](mode, first, count, primcount);
    });
    GLctx["drawElementsInstanced"] = (function(mode, count, type, indices, primcount) {
     instancedArraysExt["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
    });
   }
   var vaoExt = GLctx.getExtension("OES_vertex_array_object");
   if (vaoExt) {
    GLctx["createVertexArray"] = (function() {
     return vaoExt["createVertexArrayOES"]();
    });
    GLctx["deleteVertexArray"] = (function(vao) {
     vaoExt["deleteVertexArrayOES"](vao);
    });
    GLctx["bindVertexArray"] = (function(vao) {
     vaoExt["bindVertexArrayOES"](vao);
    });
    GLctx["isVertexArray"] = (function(vao) {
     return vaoExt["isVertexArrayOES"](vao);
    });
   }
   var drawBuffersExt = GLctx.getExtension("WEBGL_draw_buffers");
   if (drawBuffersExt) {
    GLctx["drawBuffers"] = (function(n, bufs) {
     drawBuffersExt["drawBuffersWEBGL"](n, bufs);
    });
   }
  }
  var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod" ];
  function shouldEnableAutomatically(extension) {
   var ret = false;
   automaticallyEnabledExtensions.forEach((function(include) {
    if (ext.indexOf(include) != -1) {
     ret = true;
    }
   }));
   return ret;
  }
  var exts = GLctx.getSupportedExtensions();
  if (exts && exts.length > 0) {
   GLctx.getSupportedExtensions().forEach((function(ext) {
    if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
     GLctx.getExtension(ext);
    }
   }));
  }
 }),
 populateUniformTable: (function(program) {
  var p = GL.programs[program];
  GL.programInfos[program] = {
   uniforms: {},
   maxUniformLength: 0,
   maxAttributeLength: -1
  };
  var ptable = GL.programInfos[program];
  var utable = ptable.uniforms;
  var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; ++i) {
   var u = GLctx.getActiveUniform(p, i);
   var name = u.name;
   ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
   if (name.indexOf("]", name.length - 1) !== -1) {
    var ls = name.lastIndexOf("[");
    name = name.slice(0, ls);
   }
   var loc = GLctx.getUniformLocation(p, name);
   var id = GL.getNewId(GL.uniforms);
   utable[name] = [ u.size, id ];
   GL.uniforms[id] = loc;
   for (var j = 1; j < u.size; ++j) {
    var n = name + "[" + j + "]";
    loc = GLctx.getUniformLocation(p, n);
    id = GL.getNewId(GL.uniforms);
    GL.uniforms[id] = loc;
   }
  }
 })
};
function _glClearColor(x0, x1, x2, x3) {
 GLctx.clearColor(x0, x1, x2, x3);
}
Module["_i64Add"] = _i64Add;
function _emscripten_get_now() {
 if (!_emscripten_get_now.actual) {
  if (ENVIRONMENT_IS_NODE) {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
   };
  } else if (typeof dateNow !== "undefined") {
   _emscripten_get_now.actual = dateNow;
  } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return self["performance"]["now"]();
   };
  } else if (typeof performance === "object" && typeof performance["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return performance["now"]();
   };
  } else {
   _emscripten_get_now.actual = Date.now;
  }
 }
 return _emscripten_get_now.actual();
}
function _emscripten_get_now_is_monotonic() {
 return ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self["performance"] && self["performance"]["now"];
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
function _clock_gettime(clk_id, tp) {
 var now;
 if (clk_id === 0) {
  now = Date.now();
 } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
  now = _emscripten_get_now();
 } else {
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
 }
 HEAP32[tp >> 2] = now / 1e3 | 0;
 HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
 return 0;
}
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var ptr in EXCEPTIONS.infos) {
   var info = EXCEPTIONS.infos[ptr];
   if (info.adjusted === adjusted) {
    return ptr;
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0) {
   if (info.destructor) {
    Runtime.dynCall("vi", info.destructor, [ ptr ]);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (asm["setTempRet0"](0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (asm["setTempRet0"](0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted = thrown;
   return (asm["setTempRet0"](typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (asm["setTempRet0"](throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: ptr,
  type: type,
  destructor: destructor,
  refcount: 0
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_begin_catch(ptr) {
 __ZSt18uncaught_exceptionv.uncaught_exception--;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
function _glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}
function _pthread_mutex_lock() {}
function _glLinkProgram(program) {
 GLctx.linkProgram(GL.programs[program]);
 GL.programInfos[program] = null;
 GL.populateUniformTable(program);
}
function _glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}
function _glBindTexture(target, texture) {
 GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
}
function _glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}
var _fabsf = Math_abs;
function _glVertexAttrib1f(x0, x1) {
 GLctx.vertexAttrib1f(x0, x1);
}
var PTHREAD_SPECIFIC = {};
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
function _glClear(x0) {
 GLctx.clear(x0);
}
function _glVertexAttrib4fv(index, v) {
 v = HEAPF32.subarray(v >> 2, v + 16 >> 2);
 GLctx.vertexAttrib4fv(index, v);
}
function _glActiveTexture(x0) {
 GLctx.activeTexture(x0);
}
function _glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}
function _glUniform3fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[2];
  view[0] = HEAPF32[value >> 2];
  view[1] = HEAPF32[value + 4 >> 2];
  view[2] = HEAPF32[value + 8 >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2);
 }
 GLctx.uniform3fv(location, view);
}
function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
 function roundedToNextMultipleOf(x, y) {
  return Math.floor((x + y - 1) / y) * y;
 }
 var plainRowSize = width * sizePerPixel;
 var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
 return height <= 0 ? 0 : (height - 1) * alignedRowSize + plainRowSize;
}
function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
 var sizePerPixel;
 var numChannels;
 switch (format) {
 case 6406:
 case 6409:
 case 6402:
 case 6403:
  numChannels = 1;
  break;
 case 6410:
 case 33319:
  numChannels = 2;
  break;
 case 6407:
 case 35904:
  numChannels = 3;
  break;
 case 6408:
 case 35906:
  numChannels = 4;
  break;
 default:
  GL.recordError(1280);
  return {
   pixels: null,
   internalFormat: 0
  };
 }
 switch (type) {
 case 5121:
  sizePerPixel = numChannels * 1;
  break;
 case 5123:
 case 36193:
  sizePerPixel = numChannels * 2;
  break;
 case 5125:
 case 5126:
  sizePerPixel = numChannels * 4;
  break;
 case 34042:
  sizePerPixel = 4;
  break;
 case 33635:
 case 32819:
 case 32820:
  sizePerPixel = 2;
  break;
 default:
  GL.recordError(1280);
  return {
   pixels: null,
   internalFormat: 0
  };
 }
 var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
 if (type == 5121) {
  pixels = HEAPU8.subarray(pixels, pixels + bytes);
 } else if (type == 5126) {
  pixels = HEAPF32.subarray(pixels >> 2, pixels + bytes >> 2);
 } else if (type == 5125 || type == 34042) {
  pixels = HEAPU32.subarray(pixels >> 2, pixels + bytes >> 2);
 } else {
  pixels = HEAPU16.subarray(pixels >> 1, pixels + bytes >> 1);
 }
 return {
  pixels: pixels,
  internalFormat: internalFormat
 };
}
function _glReadPixels(x, y, width, height, format, type, pixels) {
 var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
 if (!data.pixels) {
  GL.recordError(1280);
  return;
 }
 GLctx.readPixels(x, y, width, height, format, type, data.pixels);
}
function _glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}
var ERRNO_MESSAGES = {
 0: "Success",
 1: "Not super-user",
 2: "No such file or directory",
 3: "No such process",
 4: "Interrupted system call",
 5: "I/O error",
 6: "No such device or address",
 7: "Arg list too long",
 8: "Exec format error",
 9: "Bad file number",
 10: "No children",
 11: "No more processes",
 12: "Not enough core",
 13: "Permission denied",
 14: "Bad address",
 15: "Block device required",
 16: "Mount device busy",
 17: "File exists",
 18: "Cross-device link",
 19: "No such device",
 20: "Not a directory",
 21: "Is a directory",
 22: "Invalid argument",
 23: "Too many open files in system",
 24: "Too many open files",
 25: "Not a typewriter",
 26: "Text file busy",
 27: "File too large",
 28: "No space left on device",
 29: "Illegal seek",
 30: "Read only file system",
 31: "Too many links",
 32: "Broken pipe",
 33: "Math arg out of domain of func",
 34: "Math result not representable",
 35: "File locking deadlock error",
 36: "File or path name too long",
 37: "No record locks available",
 38: "Function not implemented",
 39: "Directory not empty",
 40: "Too many symbolic links",
 42: "No message of desired type",
 43: "Identifier removed",
 44: "Channel number out of range",
 45: "Level 2 not synchronized",
 46: "Level 3 halted",
 47: "Level 3 reset",
 48: "Link number out of range",
 49: "Protocol driver not attached",
 50: "No CSI structure available",
 51: "Level 2 halted",
 52: "Invalid exchange",
 53: "Invalid request descriptor",
 54: "Exchange full",
 55: "No anode",
 56: "Invalid request code",
 57: "Invalid slot",
 59: "Bad font file fmt",
 60: "Device not a stream",
 61: "No data (for no delay io)",
 62: "Timer expired",
 63: "Out of streams resources",
 64: "Machine is not on the network",
 65: "Package not installed",
 66: "The object is remote",
 67: "The link has been severed",
 68: "Advertise error",
 69: "Srmount error",
 70: "Communication error on send",
 71: "Protocol error",
 72: "Multihop attempted",
 73: "Cross mount point (not really error)",
 74: "Trying to read unreadable message",
 75: "Value too large for defined data type",
 76: "Given log. name not unique",
 77: "f.d. invalid for this operation",
 78: "Remote address changed",
 79: "Can   access a needed shared lib",
 80: "Accessing a corrupted shared lib",
 81: ".lib section in a.out corrupted",
 82: "Attempting to link in too many libs",
 83: "Attempting to exec a shared library",
 84: "Illegal byte sequence",
 86: "Streams pipe error",
 87: "Too many users",
 88: "Socket operation on non-socket",
 89: "Destination address required",
 90: "Message too long",
 91: "Protocol wrong type for socket",
 92: "Protocol not available",
 93: "Unknown protocol",
 94: "Socket type not supported",
 95: "Not supported",
 96: "Protocol family not supported",
 97: "Address family not supported by protocol family",
 98: "Address already in use",
 99: "Address not available",
 100: "Network interface is not configured",
 101: "Network is unreachable",
 102: "Connection reset by network",
 103: "Connection aborted",
 104: "Connection reset by peer",
 105: "No buffer space available",
 106: "Socket is already connected",
 107: "Socket is not connected",
 108: "Can't send after socket shutdown",
 109: "Too many references",
 110: "Connection timed out",
 111: "Connection refused",
 112: "Host is down",
 113: "Host is unreachable",
 114: "Socket already connected",
 115: "Connection already in progress",
 116: "Stale file handle",
 122: "Quota exceeded",
 123: "No medium (in tape drive)",
 125: "Operation canceled",
 130: "Previous owner died",
 131: "State not recoverable"
};
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up--; up) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  flush: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   for (var i = 0; i < length; i++) {
    try {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = new Buffer(BUFSIZE);
     var bytesRead = 0;
     var fd = process.stdin.fd;
     var usingDevice = false;
     try {
      fd = fs.openSync("/dev/stdin", "r");
      usingDevice = true;
     } catch (e) {}
     bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
     if (usingDevice) {
      fs.closeSync(fd);
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (!node.contents) return new Uint8Array;
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  }),
  msync: (function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
   transaction.onerror = (function(e) {
    callback(this.error);
    e.preventDefault();
   });
   var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = (function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   });
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     encoding: "binary",
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry.mode);
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function(e) {
   done(this.error);
   e.preventDefault();
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 146) >> 1;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsToPermissionStringMap: {
  0: "r",
  1: "r+",
  2: "r+",
  64: "r",
  65: "r+",
  66: "r+",
  129: "rx+",
  193: "rx+",
  514: "w+",
  577: "w",
  578: "w+",
  705: "wx",
  706: "wx+",
  1024: "a",
  1025: "a",
  1026: "a+",
  1089: "a",
  1090: "a+",
  1153: "ax",
  1154: "ax+",
  1217: "ax",
  1218: "ax+",
  4096: "rs",
  4098: "rs+"
 },
 flagsToPermissionString: (function(flags) {
  flags &= ~32768;
  if (flags in NODEFS.flagsToPermissionStringMap) {
   return NODEFS.flagsToPermissionStringMap[flags];
  } else {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    path = fs.readlinkSync(path);
    path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
    return path;
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   if (length === 0) return 0;
   var nbuffer = new Buffer(length);
   var res;
   try {
    res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (res > 0) {
    for (var i = 0; i < res; i++) {
     buffer[offset + i] = nbuffer[i];
    }
   }
   return res;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
   var res;
   try {
    res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return res;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var WORKERFS = {
 DIR_MODE: 16895,
 FILE_MODE: 33279,
 reader: null,
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_WORKER);
  if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
  var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
  var createdParents = {};
  function ensureParent(path) {
   var parts = path.split("/");
   var parent = root;
   for (var i = 0; i < parts.length - 1; i++) {
    var curr = parts.slice(0, i + 1).join("/");
    if (!createdParents[curr]) {
     createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
    }
    parent = createdParents[curr];
   }
   return parent;
  }
  function base(path) {
   var parts = path.split("/");
   return parts[parts.length - 1];
  }
  Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
   WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
  }));
  (mount.opts["blobs"] || []).forEach((function(obj) {
   WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
  }));
  (mount.opts["packages"] || []).forEach((function(pack) {
   pack["metadata"].files.forEach((function(file) {
    var name = file.filename.substr(1);
    WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
   }));
  }));
  return root;
 }),
 createNode: (function(parent, name, mode, dev, contents, mtime) {
  var node = FS.createNode(parent, name, mode);
  node.mode = mode;
  node.node_ops = WORKERFS.node_ops;
  node.stream_ops = WORKERFS.stream_ops;
  node.timestamp = (mtime || new Date).getTime();
  assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
  if (mode === WORKERFS.FILE_MODE) {
   node.size = contents.size;
   node.contents = contents;
  } else {
   node.size = 4096;
   node.contents = {};
  }
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 node_ops: {
  getattr: (function(node) {
   return {
    dev: 1,
    ino: undefined,
    mode: node.mode,
    nlink: 1,
    uid: 0,
    gid: 0,
    rdev: undefined,
    size: node.size,
    atime: new Date(node.timestamp),
    mtime: new Date(node.timestamp),
    ctime: new Date(node.timestamp),
    blksize: 4096,
    blocks: Math.ceil(node.size / 4096)
   };
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
  }),
  lookup: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }),
  mknod: (function(parent, name, mode, dev) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rename: (function(oldNode, newDir, newName) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  unlink: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rmdir: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readdir: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  symlink: (function(parent, newName, oldPath) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readlink: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   if (position >= stream.node.size) return 0;
   var chunk = stream.node.contents.slice(position, position + length);
   var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
   buffer.set(new Uint8Array(ab), offset);
   return chunk.size;
  }),
  write: (function(stream, buffer, offset, length, position) {
   throw new FS.ErrnoError(ERRNO_CODES.EIO);
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.size;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
var FS = {
 root: null,
 mounts: [],
 devices: [ null ],
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
  return 0;
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return ERRNO_CODES.EEXIST;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return ERRNO_CODES.ENOTDIR;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return ERRNO_CODES.EBUSY;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return ERRNO_CODES.ENOENT;
  }
  if (FS.isLink(node.mode)) {
   return ERRNO_CODES.ELOOP;
  } else if (FS.isDir(node.mode)) {
   if ((flags & 2097155) !== 0 || flags & 512) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    callback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  if (!PATH.resolve(oldpath)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    Module["printErr"]("read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
 }),
 llseek: (function(stream, offset, whence) {
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EACCES);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 msync: (function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 }),
 munmap: (function(stream) {
  return 0;
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  opts.encoding = opts.encoding || "utf8";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var stream = FS.open(path, opts.flags, opts.mode);
  if (opts.encoding === "utf8") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
  } else if (opts.encoding === "binary") {
   FS.write(stream, data, 0, data.length, 0, opts.canOwn);
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    return length;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto").randomBytes(1)[0];
   });
  } else {
   random_device = (function() {
    return Math.random() * 256 | 0;
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createSpecialDirectories: (function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: (function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: (function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: (function() {
         return stream.path;
        })
       }
      };
      ret.parent = ret;
      return ret;
     })
    };
    return node;
   })
  }, {}, "/proc/self/fd");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = (function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   });
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ ERRNO_CODES.ENOENT ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS,
   "NODEFS": NODEFS,
   "WORKERFS": WORKERFS
  };
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(ERRNO_CODES.EIO);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperty(lazyArray, "length", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._length;
    })
   });
   Object.defineProperty(lazyArray, "chunkSize", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._chunkSize;
    })
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperty(node, "usedBytes", {
   get: (function() {
    return this.contents.length;
   })
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: (function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 }),
 doStat: (function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -ERRNO_CODES.ENOTDIR;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  HEAP32[buf + 36 >> 2] = stat.size;
  HEAP32[buf + 40 >> 2] = 4096;
  HEAP32[buf + 44 >> 2] = stat.blocks;
  HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 52 >> 2] = 0;
  HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ino;
  return 0;
 }),
 doMsync: (function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
  FS.msync(stream, buffer, 0, len, flags);
 }),
 doMkdir: (function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 }),
 doMknod: (function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;
  default:
   return -ERRNO_CODES.EINVAL;
  }
  FS.mknod(path, mode, dev);
  return 0;
 }),
 doReadlink: (function(path, buf, bufsize) {
  if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
  var ret = FS.readlink(path);
  ret = ret.slice(0, Math.max(0, bufsize));
  writeStringToMemory(ret, buf, true);
  return ret.length;
 }),
 doAccess: (function(path, amode) {
  if (amode & ~7) {
   return -ERRNO_CODES.EINVAL;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 doDup: (function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 }),
 doReadv: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 }),
 doWritev: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 }),
 varargs: 0,
 get: (function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 }),
 getStr: (function() {
  var ret = Pointer_stringify(SYSCALLS.get());
  return ret;
 }),
 getStreamFromFD: (function() {
  var stream = FS.getStream(SYSCALLS.get());
  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return stream;
 }),
 getSocketFromFD: (function() {
  var socket = SOCKFS.getSocket(SYSCALLS.get());
  if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return socket;
 }),
 getSocketAddress: (function(allowNull) {
  var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
  if (allowNull && addrp === 0) return null;
  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) throw new FS.ErrnoError(info.errno);
  info.addr = DNS.lookup_addr(info.addr) || info.addr;
  return info;
 }),
 get64: (function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }),
 getZero: (function() {
  assert(SYSCALLS.get() === 0);
 })
};
function ___syscall54(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
  switch (op) {
  case 21505:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21506:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21519:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    var argp = SYSCALLS.get();
    HEAP32[argp >> 2] = 0;
    return 0;
   }
  case 21520:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return -ERRNO_CODES.EINVAL;
   }
  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }
  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
function _glBindBuffer(target, buffer) {
 var bufferObj = buffer ? GL.buffers[buffer] : null;
 GLctx.bindBuffer(target, bufferObj);
}
function _glBufferData(target, size, data, usage) {
 switch (usage) {
 case 35041:
 case 35042:
  usage = 35040;
  break;
 case 35045:
 case 35046:
  usage = 35044;
  break;
 case 35049:
 case 35050:
  usage = 35048;
  break;
 }
 if (!data) {
  GLctx.bufferData(target, size, usage);
 } else {
  GLctx.bufferData(target, HEAPU8.subarray(data, data + size), usage);
 }
}
var _BDtoIHigh = true;
function _pthread_cleanup_push(routine, arg) {
 __ATEXIT__.push((function() {
  Runtime.dynCall("vi", routine, [ arg ]);
 }));
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _pthread_cond_broadcast() {
 return 0;
}
var JSEvents = {
 keyEvent: 0,
 mouseEvent: 0,
 wheelEvent: 0,
 uiEvent: 0,
 focusEvent: 0,
 deviceOrientationEvent: 0,
 deviceMotionEvent: 0,
 fullscreenChangeEvent: 0,
 pointerlockChangeEvent: 0,
 visibilityChangeEvent: 0,
 touchEvent: 0,
 previousFullscreenElement: null,
 previousScreenX: null,
 previousScreenY: null,
 removeEventListenersRegistered: false,
 registerRemoveEventListeners: (function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push((function() {
    for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
     JSEvents._removeHandler(i);
    }
   }));
   JSEvents.removeEventListenersRegistered = true;
  }
 }),
 findEventTarget: (function(target) {
  if (target) {
   if (typeof target == "number") {
    target = Pointer_stringify(target);
   }
   if (target == "#window") return window; else if (target == "#document") return document; else if (target == "#screen") return window.screen; else if (target == "#canvas") return Module["canvas"];
   if (typeof target == "string") return document.getElementById(target); else return target;
  } else {
   return window;
  }
 }),
 deferredCalls: [],
 deferCall: (function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort((function(x, y) {
   return x.precedence < y.precedence;
  }));
 }),
 removeDeferredCalls: (function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 }),
 canPerformEventHandlerRequests: (function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 }),
 runDeferredCalls: (function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(this, call.argsList);
  }
 }),
 inEventHandler: 0,
 currentEventHandler: null,
 eventHandlers: [],
 isInternetExplorer: (function() {
  return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > 0;
 }),
 removeAllHandlersOnTarget: (function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 }),
 _removeHandler: (function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 }),
 registerOrRemoveHandler: (function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 }),
 registerKeyEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.keyEvent) {
   JSEvents.keyEvent = _malloc(164);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0);
   writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32);
   HEAP32[JSEvents.keyEvent + 64 >> 2] = e.location;
   HEAP32[JSEvents.keyEvent + 68 >> 2] = e.ctrlKey;
   HEAP32[JSEvents.keyEvent + 72 >> 2] = e.shiftKey;
   HEAP32[JSEvents.keyEvent + 76 >> 2] = e.altKey;
   HEAP32[JSEvents.keyEvent + 80 >> 2] = e.metaKey;
   HEAP32[JSEvents.keyEvent + 84 >> 2] = e.repeat;
   writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88);
   writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120);
   HEAP32[JSEvents.keyEvent + 152 >> 2] = e.charCode;
   HEAP32[JSEvents.keyEvent + 156 >> 2] = e.keyCode;
   HEAP32[JSEvents.keyEvent + 160 >> 2] = e.which;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.keyEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getBoundingClientRectOrZeros: (function(target) {
  return target.getBoundingClientRect ? target.getBoundingClientRect() : {
   left: 0,
   top: 0
  };
 }),
 fillMouseEventData: (function(eventStruct, e, target) {
  HEAPF64[eventStruct >> 3] = JSEvents.tick();
  HEAP32[eventStruct + 8 >> 2] = e.screenX;
  HEAP32[eventStruct + 12 >> 2] = e.screenY;
  HEAP32[eventStruct + 16 >> 2] = e.clientX;
  HEAP32[eventStruct + 20 >> 2] = e.clientY;
  HEAP32[eventStruct + 24 >> 2] = e.ctrlKey;
  HEAP32[eventStruct + 28 >> 2] = e.shiftKey;
  HEAP32[eventStruct + 32 >> 2] = e.altKey;
  HEAP32[eventStruct + 36 >> 2] = e.metaKey;
  HEAP16[eventStruct + 40 >> 1] = e.button;
  HEAP16[eventStruct + 42 >> 1] = e.buttons;
  HEAP32[eventStruct + 44 >> 2] = e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || e.screenX - JSEvents.previousScreenX;
  HEAP32[eventStruct + 48 >> 2] = e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || e.screenY - JSEvents.previousScreenY;
  if (Module["canvas"]) {
   var rect = Module["canvas"].getBoundingClientRect();
   HEAP32[eventStruct + 60 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 64 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 60 >> 2] = 0;
   HEAP32[eventStruct + 64 >> 2] = 0;
  }
  if (target) {
   var rect = JSEvents.getBoundingClientRectOrZeros(target);
   HEAP32[eventStruct + 52 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 56 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 52 >> 2] = 0;
   HEAP32[eventStruct + 56 >> 2] = 0;
  }
  JSEvents.previousScreenX = e.screenX;
  JSEvents.previousScreenY = e.screenY;
 }),
 registerMouseEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.mouseEvent) {
   JSEvents.mouseEvent = _malloc(72);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.mouseEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  if (JSEvents.isInternetExplorer() && eventTypeString == "mousedown") eventHandler.allowsDeferredCalls = false;
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWheelEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.wheelEvent) {
   JSEvents.wheelEvent = _malloc(104);
  }
  target = JSEvents.findEventTarget(target);
  var wheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["deltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = e["deltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = e["deltaZ"];
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = e["deltaMode"];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var mouseWheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["wheelDeltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = -e["wheelDeltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = 0;
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = 0;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: eventTypeString == "wheel" ? wheelHandlerFunc : mouseWheelHandlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 pageScrollPos: (function() {
  if (window.pageXOffset > 0 || window.pageYOffset > 0) {
   return [ window.pageXOffset, window.pageYOffset ];
  }
  if (typeof document.documentElement.scrollLeft !== "undefined" || typeof document.documentElement.scrollTop !== "undefined") {
   return [ document.documentElement.scrollLeft, document.documentElement.scrollTop ];
  }
  return [ document.body.scrollLeft | 0, document.body.scrollTop | 0 ];
 }),
 registerUiEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.uiEvent) {
   JSEvents.uiEvent = _malloc(36);
  }
  if (eventTypeString == "scroll" && !target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   if (e.target != target) {
    return;
   }
   var scrollPos = JSEvents.pageScrollPos();
   HEAP32[JSEvents.uiEvent >> 2] = e.detail;
   HEAP32[JSEvents.uiEvent + 4 >> 2] = document.body.clientWidth;
   HEAP32[JSEvents.uiEvent + 8 >> 2] = document.body.clientHeight;
   HEAP32[JSEvents.uiEvent + 12 >> 2] = window.innerWidth;
   HEAP32[JSEvents.uiEvent + 16 >> 2] = window.innerHeight;
   HEAP32[JSEvents.uiEvent + 20 >> 2] = window.outerWidth;
   HEAP32[JSEvents.uiEvent + 24 >> 2] = window.outerHeight;
   HEAP32[JSEvents.uiEvent + 28 >> 2] = scrollPos[0];
   HEAP32[JSEvents.uiEvent + 32 >> 2] = scrollPos[1];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.uiEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getNodeNameForTarget: (function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == window.screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 }),
 registerFocusEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.focusEvent) {
   JSEvents.focusEvent = _malloc(256);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var nodeName = JSEvents.getNodeNameForTarget(e.target);
   var id = e.target.id ? e.target.id : "";
   writeStringToMemory(nodeName, JSEvents.focusEvent + 0);
   writeStringToMemory(id, JSEvents.focusEvent + 128);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.focusEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 tick: (function() {
  if (window["performance"] && window["performance"]["now"]) return window["performance"]["now"](); else return Date.now();
 }),
 registerDeviceOrientationEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceOrientationEvent) {
   JSEvents.deviceOrientationEvent = _malloc(40);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceOrientationEvent + 8 >> 3] = e.alpha;
   HEAPF64[JSEvents.deviceOrientationEvent + 16 >> 3] = e.beta;
   HEAPF64[JSEvents.deviceOrientationEvent + 24 >> 3] = e.gamma;
   HEAP32[JSEvents.deviceOrientationEvent + 32 >> 2] = e.absolute;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceOrientationEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerDeviceMotionEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceMotionEvent) {
   JSEvents.deviceMotionEvent = _malloc(80);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceMotionEvent + 8 >> 3] = e.acceleration.x;
   HEAPF64[JSEvents.deviceMotionEvent + 16 >> 3] = e.acceleration.y;
   HEAPF64[JSEvents.deviceMotionEvent + 24 >> 3] = e.acceleration.z;
   HEAPF64[JSEvents.deviceMotionEvent + 32 >> 3] = e.accelerationIncludingGravity.x;
   HEAPF64[JSEvents.deviceMotionEvent + 40 >> 3] = e.accelerationIncludingGravity.y;
   HEAPF64[JSEvents.deviceMotionEvent + 48 >> 3] = e.accelerationIncludingGravity.z;
   HEAPF64[JSEvents.deviceMotionEvent + 56 >> 3] = e.rotationRate.alpha;
   HEAPF64[JSEvents.deviceMotionEvent + 64 >> 3] = e.rotationRate.beta;
   HEAPF64[JSEvents.deviceMotionEvent + 72 >> 3] = e.rotationRate.gamma;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceMotionEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 screenOrientation: (function() {
  if (!window.screen) return undefined;
  return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
 }),
 fillOrientationChangeEventData: (function(eventStruct, e) {
  var orientations = [ "portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary" ];
  var orientations2 = [ "portrait", "portrait", "landscape", "landscape" ];
  var orientationString = JSEvents.screenOrientation();
  var orientation = orientations.indexOf(orientationString);
  if (orientation == -1) {
   orientation = orientations2.indexOf(orientationString);
  }
  HEAP32[eventStruct >> 2] = 1 << orientation;
  HEAP32[eventStruct + 4 >> 2] = window.orientation;
 }),
 registerOrientationChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.orientationChangeEvent) {
   JSEvents.orientationChangeEvent = _malloc(8);
  }
  if (!target) {
   target = window.screen;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.orientationChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
   eventTypeString = "mozorientationchange";
  }
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fullscreenEnabled: (function() {
  return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
 }),
 fillFullscreenChangeEventData: (function(eventStruct, e) {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  var isFullscreen = !!fullscreenElement;
  HEAP32[eventStruct >> 2] = isFullscreen;
  HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
  var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
  var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
  var id = reportedElement && reportedElement.id ? reportedElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 8);
  writeStringToMemory(id, eventStruct + 136);
  HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
  HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
  HEAP32[eventStruct + 272 >> 2] = screen.width;
  HEAP32[eventStruct + 276 >> 2] = screen.height;
  if (isFullscreen) {
   JSEvents.previousFullscreenElement = fullscreenElement;
  }
 }),
 registerFullscreenChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.fullscreenChangeEvent) {
   JSEvents.fullscreenChangeEvent = _malloc(280);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.fullscreenChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 resizeCanvasForFullscreen: (function(target, strategy) {
  var restoreOldStyle = __registerRestoreOldStyle(target);
  var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
  var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
  var rect = target.getBoundingClientRect();
  var windowedCssWidth = rect.right - rect.left;
  var windowedCssHeight = rect.bottom - rect.top;
  var windowedRttWidth = target.width;
  var windowedRttHeight = target.height;
  if (strategy.scaleMode == 3) {
   __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
   cssWidth = windowedCssWidth;
   cssHeight = windowedCssHeight;
  } else if (strategy.scaleMode == 2) {
   if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
    var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
    __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
    cssHeight = desiredCssHeight;
   } else {
    var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
    __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
    cssWidth = desiredCssWidth;
   }
  }
  if (!target.style.backgroundColor) target.style.backgroundColor = "black";
  if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
  target.style.width = cssWidth + "px";
  target.style.height = cssHeight + "px";
  if (strategy.filteringMode == 1) {
   target.style.imageRendering = "optimizeSpeed";
   target.style.imageRendering = "-moz-crisp-edges";
   target.style.imageRendering = "-o-crisp-edges";
   target.style.imageRendering = "-webkit-optimize-contrast";
   target.style.imageRendering = "optimize-contrast";
   target.style.imageRendering = "crisp-edges";
   target.style.imageRendering = "pixelated";
  }
  var dpiScale = strategy.canvasResolutionScaleMode == 2 ? window.devicePixelRatio : 1;
  if (strategy.canvasResolutionScaleMode != 0) {
   target.width = cssWidth * dpiScale;
   target.height = cssHeight * dpiScale;
   if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
  }
  return restoreOldStyle;
 }),
 requestFullscreen: (function(target, strategy) {
  if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
   JSEvents.resizeCanvasForFullscreen(target, strategy);
  }
  if (target.requestFullscreen) {
   target.requestFullscreen();
  } else if (target.msRequestFullscreen) {
   target.msRequestFullscreen();
  } else if (target.mozRequestFullScreen) {
   target.mozRequestFullScreen();
  } else if (target.mozRequestFullscreen) {
   target.mozRequestFullscreen();
  } else if (target.webkitRequestFullscreen) {
   target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
   if (typeof JSEvents.fullscreenEnabled() === "undefined") {
    return -1;
   } else {
    return -3;
   }
  }
  if (strategy.canvasResizedCallback) {
   Runtime.dynCall("iiii", strategy.canvasResizedCallback, [ 37, 0, strategy.canvasResizedCallbackUserData ]);
  }
  return 0;
 }),
 fillPointerlockChangeEventData: (function(eventStruct, e) {
  var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
  var isPointerlocked = !!pointerLockElement;
  HEAP32[eventStruct >> 2] = isPointerlocked;
  var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
  var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 4);
  writeStringToMemory(id, eventStruct + 132);
 }),
 registerPointerlockChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.pointerlockChangeEvent) {
   JSEvents.pointerlockChangeEvent = _malloc(260);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.pointerlockChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 requestPointerLock: (function(target) {
  if (target.requestPointerLock) {
   target.requestPointerLock();
  } else if (target.mozRequestPointerLock) {
   target.mozRequestPointerLock();
  } else if (target.webkitRequestPointerLock) {
   target.webkitRequestPointerLock();
  } else if (target.msRequestPointerLock) {
   target.msRequestPointerLock();
  } else {
   if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
    return -3;
   } else {
    return -1;
   }
  }
  return 0;
 }),
 fillVisibilityChangeEventData: (function(eventStruct, e) {
  var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
  var visibilityState = visibilityStates.indexOf(document.visibilityState);
  HEAP32[eventStruct >> 2] = document.hidden;
  HEAP32[eventStruct + 4 >> 2] = visibilityState;
 }),
 registerVisibilityChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.visibilityChangeEvent) {
   JSEvents.visibilityChangeEvent = _malloc(8);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.visibilityChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerTouchEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.touchEvent) {
   JSEvents.touchEvent = _malloc(1684);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var touches = {};
   for (var i = 0; i < e.touches.length; ++i) {
    var touch = e.touches[i];
    touches[touch.identifier] = touch;
   }
   for (var i = 0; i < e.changedTouches.length; ++i) {
    var touch = e.changedTouches[i];
    touches[touch.identifier] = touch;
    touch.changed = true;
   }
   for (var i = 0; i < e.targetTouches.length; ++i) {
    var touch = e.targetTouches[i];
    touches[touch.identifier].onTarget = true;
   }
   var ptr = JSEvents.touchEvent;
   HEAP32[ptr + 4 >> 2] = e.ctrlKey;
   HEAP32[ptr + 8 >> 2] = e.shiftKey;
   HEAP32[ptr + 12 >> 2] = e.altKey;
   HEAP32[ptr + 16 >> 2] = e.metaKey;
   ptr += 20;
   var canvasRect = Module["canvas"] ? Module["canvas"].getBoundingClientRect() : undefined;
   var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
   var numTouches = 0;
   for (var i in touches) {
    var t = touches[i];
    HEAP32[ptr >> 2] = t.identifier;
    HEAP32[ptr + 4 >> 2] = t.screenX;
    HEAP32[ptr + 8 >> 2] = t.screenY;
    HEAP32[ptr + 12 >> 2] = t.clientX;
    HEAP32[ptr + 16 >> 2] = t.clientY;
    HEAP32[ptr + 20 >> 2] = t.pageX;
    HEAP32[ptr + 24 >> 2] = t.pageY;
    HEAP32[ptr + 28 >> 2] = t.changed;
    HEAP32[ptr + 32 >> 2] = t.onTarget;
    if (canvasRect) {
     HEAP32[ptr + 44 >> 2] = t.clientX - canvasRect.left;
     HEAP32[ptr + 48 >> 2] = t.clientY - canvasRect.top;
    } else {
     HEAP32[ptr + 44 >> 2] = 0;
     HEAP32[ptr + 48 >> 2] = 0;
    }
    HEAP32[ptr + 36 >> 2] = t.clientX - targetRect.left;
    HEAP32[ptr + 40 >> 2] = t.clientY - targetRect.top;
    ptr += 52;
    if (++numTouches >= 32) {
     break;
    }
   }
   HEAP32[JSEvents.touchEvent >> 2] = numTouches;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.touchEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fillGamepadEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.timestamp;
  for (var i = 0; i < e.axes.length; ++i) {
   HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i];
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value;
   } else {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i];
   }
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed;
   } else {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1;
   }
  }
  HEAP32[eventStruct + 1296 >> 2] = e.connected;
  HEAP32[eventStruct + 1300 >> 2] = e.index;
  HEAP32[eventStruct + 8 >> 2] = e.axes.length;
  HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
  writeStringToMemory(e.id, eventStruct + 1304);
  writeStringToMemory(e.mapping, eventStruct + 1368);
 }),
 registerGamepadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.gamepadEvent) {
   JSEvents.gamepadEvent = _malloc(1432);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.gamepadEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerBeforeUnloadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var confirmationMessage = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (confirmationMessage) {
    confirmationMessage = Pointer_stringify(confirmationMessage);
   }
   if (confirmationMessage) {
    e.preventDefault();
    e.returnValue = confirmationMessage;
    return confirmationMessage;
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 battery: (function() {
  return navigator.battery || navigator.mozBattery || navigator.webkitBattery;
 }),
 fillBatteryEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.chargingTime;
  HEAPF64[eventStruct + 8 >> 3] = e.dischargingTime;
  HEAPF64[eventStruct + 16 >> 3] = e.level;
  HEAP32[eventStruct + 24 >> 2] = e.charging;
 }),
 registerBatteryEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.batteryEvent) {
   JSEvents.batteryEvent = _malloc(32);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.batteryEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWebGlEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!target) {
   target = Module["canvas"];
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 })
};
function _emscripten_webgl_create_context(target, attributes) {
 var contextAttributes = {};
 contextAttributes.alpha = !!HEAP32[attributes >> 2];
 contextAttributes.depth = !!HEAP32[attributes + 4 >> 2];
 contextAttributes.stencil = !!HEAP32[attributes + 8 >> 2];
 contextAttributes.antialias = !!HEAP32[attributes + 12 >> 2];
 contextAttributes.premultipliedAlpha = !!HEAP32[attributes + 16 >> 2];
 contextAttributes.preserveDrawingBuffer = !!HEAP32[attributes + 20 >> 2];
 contextAttributes.preferLowPowerToHighPerformance = !!HEAP32[attributes + 24 >> 2];
 contextAttributes.failIfMajorPerformanceCaveat = !!HEAP32[attributes + 28 >> 2];
 contextAttributes.majorVersion = HEAP32[attributes + 32 >> 2];
 contextAttributes.minorVersion = HEAP32[attributes + 36 >> 2];
 var enableExtensionsByDefault = HEAP32[attributes + 40 >> 2];
 if (!target) {
  target = Module["canvas"];
 } else {
  target = JSEvents.findEventTarget(target);
 }
 var contextHandle = GL.createContext(target, contextAttributes);
 return contextHandle;
}
function _glClearDepthf(x0) {
 GLctx.clearDepth(x0);
}
function _pthread_mutex_unlock() {}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
var _llvm_pow_f64 = Math_pow;
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) {
  var success = self.alloc(bytes);
  if (!success) return -1 >>> 0;
 }
 return ret;
}
Module["_memmove"] = _memmove;
function _glGenTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var texture = GLctx.createTexture();
  if (!texture) {
   GL.recordError(1282);
   while (i < n) HEAP32[textures + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.textures);
  texture.name = id;
  GL.textures[id] = texture;
  HEAP32[textures + i * 4 >> 2] = id;
 }
}
var _BItoD = true;
function _glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}
function _pthread_cond_wait() {
 return 0;
}
function _glUniform1f(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1f(location, v0);
}
function ___cxa_guard_release() {}
function _glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}
function _glUniform1i(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1i(location, v0);
}
var _cosf = Math_cos;
function _glUseProgram(program) {
 GLctx.useProgram(program ? GL.programs[program] : null);
}
function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
 var pixelData;
 if (pixels) {
  var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
  pixelData = data.pixels;
  internalFormat = data.internalFormat;
 } else {
  pixelData = null;
 }
 GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
}
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 85:
  return totalMemory / PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 79:
  return 0;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
function _pthread_self() {
 return 0;
}
var _SItoD = true;
Module["_memset"] = _memset;
var _BDtoILow = true;
function _glGetProgramiv(program, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   HEAP32[p >> 2] = ptable.maxUniformLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else if (pname == 35722) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   if (ptable.maxAttributeLength == -1) {
    var program = GL.programs[program];
    var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
    ptable.maxAttributeLength = 0;
    for (var i = 0; i < numAttribs; ++i) {
     var activeAttrib = GLctx.getActiveAttrib(program, i);
     ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
    }
   }
   HEAP32[p >> 2] = ptable.maxAttributeLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else {
  HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
 }
}
function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
}
function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
Module["_bitshift64Shl"] = _bitshift64Shl;
function _abort() {
 Module["abort"]();
}
function ___assert_fail(condition, filename, line, func) {
 ABORT = true;
 throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function" ] + " at " + stackTrace();
}
function _glGetUniformLocation(program, name) {
 name = Pointer_stringify(name);
 var arrayOffset = 0;
 if (name.indexOf("]", name.length - 1) !== -1) {
  var ls = name.lastIndexOf("[");
  var arrayIndex = name.slice(ls + 1, -1);
  if (arrayIndex.length > 0) {
   arrayOffset = parseInt(arrayIndex);
   if (arrayOffset < 0) {
    return -1;
   }
  }
  name = name.slice(0, ls);
 }
 var ptable = GL.programInfos[program];
 if (!ptable) {
  return -1;
 }
 var utable = ptable.uniforms;
 var uniformInfo = utable[name];
 if (uniformInfo && arrayOffset < uniformInfo[0]) {
  return uniformInfo[1] + arrayOffset;
 } else {
  return -1;
 }
}
function ___lock() {}
function ___unlock() {}
function _glUniformMatrix3fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[8];
  for (var i = 0; i < 9; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
 }
 GLctx.uniformMatrix3fv(location, transpose, view);
}
var _emscripten_asm_const = true;
function _glEnable(x0) {
 GLctx.enable(x0);
}
function _glUniform4fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[3];
  view[0] = HEAPF32[value >> 2];
  view[1] = HEAPF32[value + 4 >> 2];
  view[2] = HEAPF32[value + 8 >> 2];
  view[3] = HEAPF32[value + 12 >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniform4fv(location, view);
}
var _fabs = Math_abs;
var _floor = Math_floor;
var _emscripten_asm_const_int = true;
function _glGenBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx.createBuffer();
  if (!buffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[buffers + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.buffers);
  buffer.name = id;
  GL.buffers[id] = buffer;
  HEAP32[buffers + i * 4 >> 2] = id;
 }
}
function _glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
 GL.programInfos[id] = null;
}
function _emscripten_set_main_loop_timing(mode, value) {
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  return 1;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   setTimeout(Browser.mainLoop.runner, value);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (!window["setImmediate"]) {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "__emcc";
   function Browser_setImmediate_messageHandler(event) {
    if (event.source === window && event.data === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   }
   window.addEventListener("message", Browser_setImmediate_messageHandler, true);
   window["setImmediate"] = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    window.postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   window["setImmediate"](Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}
function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
 Module["noExitRuntime"] = true;
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = func;
 Browser.mainLoop.arg = arg;
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  Browser.mainLoop.runIter((function() {
   if (typeof arg !== "undefined") {
    Runtime.dynCall("vi", func, [ arg ]);
   } else {
    Runtime.dynCall("v", func);
   }
  }));
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "SimulateInfiniteLoop";
 }
}
var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: (function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  }),
  resume: (function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  }),
  updateStatus: (function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  }),
  runIter: (function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  })
 },
 isFullScreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: (function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob;
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder;
    bb.append((new Uint8Array(byteArray)).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image;
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio;
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio;
    audio.addEventListener("canplaythrough", (function() {
     finish(audio);
    }), false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout((function() {
     finish(audio);
    }), 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  var canvas = Module["canvas"];
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
  }
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", (function(ev) {
     if (!Browser.pointerLock && canvas.requestPointerLock) {
      canvas.requestPointerLock();
      ev.preventDefault();
     }
    }), false);
   }
  }
 }),
 createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   contextHandle = GL.createContext(canvas, contextAttributes);
   if (contextHandle) {
    ctx = GL.getContext(contextHandle).GLctx;
   }
   canvas.style.backgroundColor = "black";
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
    callback();
   }));
   Browser.init();
  }
  return ctx;
 }),
 destroyContext: (function(canvas, useWebGL, setInModule) {}),
 fullScreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  Browser.vrDevice = vrDevice;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
  var canvas = Module["canvas"];
  function fullScreenChange() {
   Browser.isFullScreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
    canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullScreen = true;
    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
   Browser.updateCanvasDimensions(canvas);
  }
  if (!Browser.fullScreenHandlersInstalled) {
   Browser.fullScreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullScreenChange, false);
   document.addEventListener("mozfullscreenchange", fullScreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
   document.addEventListener("MSFullscreenChange", fullScreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  }) : null);
  if (vrDevice) {
   canvasContainer.requestFullScreen({
    vrDisplay: vrDevice
   });
  } else {
   canvasContainer.requestFullScreen();
  }
 }),
 nextRAF: 0,
 fakeRequestAnimationFrame: (function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 }),
 requestAnimationFrame: function requestAnimationFrame(func) {
  if (typeof window === "undefined") {
   Browser.fakeRequestAnimationFrame(func);
  } else {
   if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
   }
   window.requestAnimationFrame(func);
  }
 },
 safeCallback: (function(func) {
  return (function() {
   if (!ABORT) return func.apply(null, arguments);
  });
 }),
 allowAsyncCallbacks: true,
 queuedAsyncCallbacks: [],
 pauseAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = false;
 }),
 resumeAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = true;
  if (Browser.queuedAsyncCallbacks.length > 0) {
   var callbacks = Browser.queuedAsyncCallbacks;
   Browser.queuedAsyncCallbacks = [];
   callbacks.forEach((function(func) {
    func();
   }));
  }
 }),
 safeRequestAnimationFrame: (function(func) {
  return Browser.requestAnimationFrame((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }));
 }),
 safeSetTimeout: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setTimeout((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }), timeout);
 }),
 safeSetInterval: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setInterval((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   }
  }), timeout);
 }),
 getMimetype: (function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 }),
 getUserMedia: (function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 }),
 getMovementX: (function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 }),
 getMovementY: (function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 }),
 getMouseWheelDelta: (function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail;
   break;
  case "mousewheel":
   delta = event.wheelDelta;
   break;
  case "wheel":
   delta = event["deltaY"];
   break;
  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 }),
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: (function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 }),
 xhrLoad: (function(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 }),
 asyncLoad: (function(url, onload, onerror, noRunDep) {
  Browser.xhrLoad(url, (function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (!noRunDep) removeRunDependency("al " + url);
  }), (function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  }));
  if (!noRunDep) addRunDependency("al " + url);
 }),
 resizeListeners: [],
 updateResizeListeners: (function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach((function(listener) {
   listener(canvas.width, canvas.height);
  }));
 }),
 setCanvasSize: (function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 }),
 windowedWidth: 0,
 windowedHeight: 0,
 setFullScreenCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 setWindowedCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 updateCanvasDimensions: (function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 }),
 wgetRequests: {},
 nextWgetRequestHandle: 0,
 getNextWgetRequestHandle: (function() {
  var handle = Browser.nextWgetRequestHandle;
  Browser.nextWgetRequestHandle++;
  return handle;
 })
};
function _glGetAttribLocation(program, name) {
 program = GL.programs[program];
 name = Pointer_stringify(name);
 return GLctx.getAttribLocation(program, name);
}
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
function _glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
var _sin = Math_sin;
function _glBlendFunc(x0, x1) {
 GLctx.blendFunc(x0, x1);
}
function _glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 GL.programs[id] = program;
 return id;
}
function ___cxa_pure_virtual() {
 ABORT = true;
 throw "Pure virtual function called!";
}
function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) ;
 return sum;
}
var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}
function _strftime(s, maxsize, format, tm) {
 var tm_zone = HEAP32[tm + 40 >> 2];
 var date = {
  tm_sec: HEAP32[tm >> 2],
  tm_min: HEAP32[tm + 4 >> 2],
  tm_hour: HEAP32[tm + 8 >> 2],
  tm_mday: HEAP32[tm + 12 >> 2],
  tm_mon: HEAP32[tm + 16 >> 2],
  tm_year: HEAP32[tm + 20 >> 2],
  tm_wday: HEAP32[tm + 24 >> 2],
  tm_yday: HEAP32[tm + 28 >> 2],
  tm_isdst: HEAP32[tm + 32 >> 2],
  tm_gmtoff: HEAP32[tm + 36 >> 2],
  tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ""
 };
 var pattern = Pointer_stringify(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);
  case 1:
   return janFourth;
  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);
  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);
  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);
  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);
  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": (function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  }),
  "%A": (function(date) {
   return WEEKDAYS[date.tm_wday];
  }),
  "%b": (function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  }),
  "%B": (function(date) {
   return MONTHS[date.tm_mon];
  }),
  "%C": (function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  }),
  "%d": (function(date) {
   return leadingNulls(date.tm_mday, 2);
  }),
  "%e": (function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  }),
  "%g": (function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  }),
  "%G": (function(date) {
   return getWeekBasedYear(date);
  }),
  "%H": (function(date) {
   return leadingNulls(date.tm_hour, 2);
  }),
  "%I": (function(date) {
   return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour - 12, 2);
  }),
  "%j": (function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  }),
  "%m": (function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  }),
  "%M": (function(date) {
   return leadingNulls(date.tm_min, 2);
  }),
  "%n": (function() {
   return "\n";
  }),
  "%p": (function(date) {
   if (date.tm_hour > 0 && date.tm_hour < 13) {
    return "AM";
   } else {
    return "PM";
   }
  }),
  "%S": (function(date) {
   return leadingNulls(date.tm_sec, 2);
  }),
  "%t": (function() {
   return "\t";
  }),
  "%u": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay() || 7;
  }),
  "%U": (function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  }),
  "%V": (function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  }),
  "%w": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay();
  }),
  "%W": (function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  }),
  "%y": (function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  }),
  "%Y": (function(date) {
   return date.tm_year + 1900;
  }),
  "%z": (function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  }),
  "%Z": (function(date) {
   return date.tm_zone;
  }),
  "%%": (function() {
   return "%";
  })
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.indexOf(rule) >= 0) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}
function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}
function _glViewport(x0, x1, x2, x3) {
 GLctx.viewport(x0, x1, x2, x3);
}
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
function ___cxa_guard_acquire(variable) {
 if (!HEAP8[variable >> 0]) {
  HEAP8[variable >> 0] = 1;
  return 1;
 }
 return 0;
}
function _glDrawElements(mode, count, type, indices) {
 GLctx.drawElements(mode, count, type, indices);
}
function _emscripten_webgl_init_context_attributes(attributes) {
 HEAP32[attributes >> 2] = 1;
 HEAP32[attributes + 4 >> 2] = 1;
 HEAP32[attributes + 8 >> 2] = 0;
 HEAP32[attributes + 12 >> 2] = 1;
 HEAP32[attributes + 16 >> 2] = 1;
 HEAP32[attributes + 20 >> 2] = 0;
 HEAP32[attributes + 24 >> 2] = 0;
 HEAP32[attributes + 28 >> 2] = 0;
 HEAP32[attributes + 32 >> 2] = 1;
 HEAP32[attributes + 36 >> 2] = 0;
 HEAP32[attributes + 40 >> 2] = 1;
}
var _sinf = Math_sin;
function _glUniformMatrix4fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[15];
  for (var i = 0; i < 16; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
 }
 GLctx.uniformMatrix4fv(location, transpose, view);
}
function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var _cos = Math_cos;
function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
function _glTexParameteri(x0, x1, x2) {
 GLctx.texParameteri(x0, x1, x2);
}
function _emscripten_webgl_make_context_current(contextHandle) {
 var success = GL.makeContextCurrent(contextHandle);
 return success ? 0 : -5;
}
function _pthread_cleanup_pop() {
 assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
 __ATEXIT__.pop();
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Runtime.dynCall("v", func);
 _pthread_once.seen[ptr] = 1;
}
function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
function _glGetShaderiv(shader, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else {
  HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}
function _glPolygonOffset(x0, x1) {
 GLctx.polygonOffset(x0, x1);
}
function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  assert(offset_high === 0);
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doWritev(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall145(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doReadv(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var ___dso_handle = allocate(1, "i32*", ALLOC_STATIC);
var GLctx;
GL.init();
FS.staticInit();
__ATINIT__.unshift((function() {
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
}));
__ATMAIN__.push((function() {
 FS.ignorePermissions = false;
}));
__ATEXIT__.push((function() {
 FS.quit();
}));
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift((function() {
 TTY.init();
}));
__ATEXIT__.push((function() {
 TTY.shutdown();
}));
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 var NODEJS_PATH = require("path");
 NODEFS.staticInit();
}
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
 Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiid"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiid"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_ii(index, a1) {
 try {
  return Module["dynCall_ii"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 try {
  return Module["dynCall_iiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "invoke_iiiiiiii": invoke_iiiiiiii,
 "invoke_iiii": invoke_iiii,
 "invoke_viiiii": invoke_viiiii,
 "invoke_iiiiiid": invoke_iiiiiid,
 "invoke_vi": invoke_vi,
 "invoke_vii": invoke_vii,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_iiiiid": invoke_iiiiid,
 "invoke_ii": invoke_ii,
 "invoke_viii": invoke_viii,
 "invoke_v": invoke_v,
 "invoke_iiiiiiiii": invoke_iiiiiiiii,
 "invoke_iiiii": invoke_iiiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_iii": invoke_iii,
 "invoke_iiiiii": invoke_iiiiii,
 "invoke_viiii": invoke_viiii,
 "_glUseProgram": _glUseProgram,
 "_fabs": _fabs,
 "_glUniformMatrix3fv": _glUniformMatrix3fv,
 "_glUniformMatrix4fv": _glUniformMatrix4fv,
 "___cxa_guard_acquire": ___cxa_guard_acquire,
 "___assert_fail": ___assert_fail,
 "_glDeleteProgram": _glDeleteProgram,
 "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
 "_glBindBuffer": _glBindBuffer,
 "_glGetShaderInfoLog": _glGetShaderInfoLog,
 "_clock_gettime": _clock_gettime,
 "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
 "_sbrk": _sbrk,
 "_glBlendFunc": _glBlendFunc,
 "_glGetAttribLocation": _glGetAttribLocation,
 "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
 "___cxa_begin_catch": ___cxa_begin_catch,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_glPolygonOffset": _glPolygonOffset,
 "_sysconf": _sysconf,
 "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize,
 "_cos": _cos,
 "__isLeapYear": __isLeapYear,
 "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
 "_glGenBuffers": _glGenBuffers,
 "_glShaderSource": _glShaderSource,
 "___cxa_atexit": ___cxa_atexit,
 "_pthread_cleanup_push": _pthread_cleanup_push,
 "___syscall140": ___syscall140,
 "___syscall145": ___syscall145,
 "___syscall146": ___syscall146,
 "_pthread_cleanup_pop": _pthread_cleanup_pop,
 "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic,
 "_glGetProgramInfoLog": _glGetProgramInfoLog,
 "___cxa_find_matching_catch": ___cxa_find_matching_catch,
 "_glDrawElements": _glDrawElements,
 "___cxa_guard_release": ___cxa_guard_release,
 "_glViewport": _glViewport,
 "___setErrNo": ___setErrNo,
 "_glDeleteTextures": _glDeleteTextures,
 "___resumeException": ___resumeException,
 "_glEnable": _glEnable,
 "_glGenTextures": _glGenTextures,
 "_pthread_once": _pthread_once,
 "_emscripten_get_now": _emscripten_get_now,
 "_glAttachShader": _glAttachShader,
 "_glCreateProgram": _glCreateProgram,
 "___lock": ___lock,
 "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
 "___syscall6": ___syscall6,
 "_time": _time,
 "_pthread_mutex_lock": _pthread_mutex_lock,
 "_emscripten_asm_const_3": _emscripten_asm_const_3,
 "_emscripten_asm_const_2": _emscripten_asm_const_2,
 "_emscripten_asm_const_1": _emscripten_asm_const_1,
 "_emscripten_asm_const_0": _emscripten_asm_const_0,
 "_llvm_pow_f64": _llvm_pow_f64,
 "_glDeleteShader": _glDeleteShader,
 "_emscripten_webgl_create_context": _emscripten_webgl_create_context,
 "_glClearColor": _glClearColor,
 "___cxa_allocate_exception": ___cxa_allocate_exception,
 "_glVertexAttribPointer": _glVertexAttribPointer,
 "_floor": _floor,
 "_glUniform3fv": _glUniform3fv,
 "_glClearDepthf": _glClearDepthf,
 "_fabsf": _fabsf,
 "_glBindTexture": _glBindTexture,
 "_glUniform1f": _glUniform1f,
 "_glUniform1i": _glUniform1i,
 "_strftime": _strftime,
 "_glDrawArrays": _glDrawArrays,
 "_glReadPixels": _glReadPixels,
 "_glCreateShader": _glCreateShader,
 "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
 "_pthread_key_create": _pthread_key_create,
 "_glActiveTexture": _glActiveTexture,
 "_pthread_cond_broadcast": _pthread_cond_broadcast,
 "_glCompileShader": _glCompileShader,
 "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
 "_abort": _abort,
 "_glVertexAttrib4fv": _glVertexAttrib4fv,
 "_glBufferData": _glBufferData,
 "_glTexImage2D": _glTexImage2D,
 "___cxa_pure_virtual": ___cxa_pure_virtual,
 "_pthread_getspecific": _pthread_getspecific,
 "_pthread_cond_wait": _pthread_cond_wait,
 "_sin": _sin,
 "_cosf": _cosf,
 "_glGetProgramiv": _glGetProgramiv,
 "_glLinkProgram": _glLinkProgram,
 "_strftime_l": _strftime_l,
 "_glGetShaderiv": _glGetShaderiv,
 "_glGetUniformLocation": _glGetUniformLocation,
 "_glClear": _glClear,
 "_glUniform4fv": _glUniform4fv,
 "_sinf": _sinf,
 "__arraySum": __arraySum,
 "_pthread_self": _pthread_self,
 "_pthread_mutex_unlock": _pthread_mutex_unlock,
 "___syscall54": ___syscall54,
 "___unlock": ___unlock,
 "_emscripten_set_main_loop": _emscripten_set_main_loop,
 "_pthread_setspecific": _pthread_setspecific,
 "___cxa_throw": ___cxa_throw,
 "__addDays": __addDays,
 "_glTexParameteri": _glTexParameteri,
 "_atexit": _atexit,
 "_glVertexAttrib1f": _glVertexAttrib1f,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "___dso_handle": ___dso_handle
};
// EMSCRIPTEN_START_ASM

var asm = (function(global,env,buffer) {

  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _glUniformMatrix3fv=env._glUniformMatrix3fv;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _glPolygonOffset=env._glPolygonOffset;
  var _sysconf=env._sysconf;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _cos=env._cos;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glDrawElements=env._glDrawElements;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var ___resumeException=env.___resumeException;
  var _glEnable=env._glEnable;
  var _glGenTextures=env._glGenTextures;
  var _pthread_once=env._pthread_once;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _emscripten_asm_const_3=env._emscripten_asm_const_3;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_webgl_create_context=env._emscripten_webgl_create_context;
  var _glClearColor=env._glClearColor;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _floor=env._floor;
  var _glUniform3fv=env._glUniform3fv;
  var _glClearDepthf=env._glClearDepthf;
  var _fabsf=env._fabsf;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1f=env._glUniform1f;
  var _glUniform1i=env._glUniform1i;
  var _strftime=env._strftime;
  var _glDrawArrays=env._glDrawArrays;
  var _glReadPixels=env._glReadPixels;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes;
  var _pthread_key_create=env._pthread_key_create;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glVertexAttrib4fv=env._glVertexAttrib4fv;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glLinkProgram=env._glLinkProgram;
  var _strftime_l=env._strftime_l;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glClear=env._glClear;
  var _glUniform4fv=env._glUniform4fv;
  var _sinf=env._sinf;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var __addDays=env.__addDays;
  var _glTexParameteri=env._glTexParameteri;
  var _atexit=env._atexit;
  var _glVertexAttrib1f=env._glVertexAttrib1f;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN9PicBucket7loadXMLEPKc(i61, i3) {
 i61 = i61 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i62 = 0, i63 = 0, d64 = 0.0, d65 = 0.0;
 i63 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i53 = i63 + 476 | 0;
 i54 = i63 + 472 | 0;
 i62 = i63 + 64 | 0;
 i1 = i63 + 460 | 0;
 i58 = i63 + 456 | 0;
 i56 = i63;
 i55 = i63 + 444 | 0;
 i59 = i63 + 432 | 0;
 i57 = i63 + 420 | 0;
 i2 = i62 + 4 | 0;
 i14 = i2;
 i15 = i14 + 36 | 0;
 do {
  HEAP32[i14 >> 2] = 0;
  i14 = i14 + 4 | 0;
 } while ((i14 | 0) < (i15 | 0));
 HEAP32[i62 >> 2] = 6752;
 HEAP8[i62 + 44 >> 0] = 0;
 HEAP8[i62 + 45 >> 0] = 1;
 i60 = i62 + 48 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i62 + 68 >> 2] = 7328;
 HEAP32[i62 + 72 >> 2] = i62 + 76;
 HEAP32[i62 + 116 >> 2] = 10;
 i60 = i62 + 120 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i62 + 140 >> 2] = 7356;
 HEAP32[i62 + 144 >> 2] = i62 + 148;
 HEAP32[i62 + 188 >> 2] = 10;
 i60 = i62 + 192 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i62 + 212 >> 2] = 7384;
 HEAP32[i62 + 216 >> 2] = i62 + 220;
 HEAP32[i62 + 260 >> 2] = 10;
 i60 = i62 + 264 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i62 + 284 >> 2] = 7412;
 HEAP32[i62 + 288 >> 2] = i62 + 292;
 HEAP32[i62 + 332 >> 2] = 10;
 i60 = i62 + 336 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = i62;
 if (__ZN8tinyxml211XMLDocument5ParseEPKcj(i62, i3, -1) | 0) {
  i61 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22205, 23) | 0;
  HEAP32[i53 >> 2] = __ZNKSt3__18ios_base6getlocEv(i61 + (HEAP32[(HEAP32[i61 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i60 = __ZNKSt3__16locale9use_facetERNS0_2idE(i53, 16144) | 0;
  i60 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i60 >> 2] | 0) + 28 >> 2] & 63](i60, 10) | 0;
  __ZNSt3__16localeD2Ev(i53);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i61, i60) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i61) | 0;
  i61 = 0;
  __ZN8tinyxml211XMLDocumentD2Ev(i62);
  STACKTOP = i63;
  return i61 | 0;
 }
 i2 = HEAP32[i62 + 24 >> 2] | 0;
 L5 : do if (!i2) i2 = 0; else while (1) {
  i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i2 >> 2] >> 2] & 127](i2) | 0;
  if (i3) {
   i2 = i3;
   break L5;
  }
  i2 = HEAP32[i2 + 36 >> 2] | 0;
  if (!i2) {
   i2 = 0;
   break;
  }
 } while (0);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i60 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i60;
 i2 = i2 + 24 | 0;
 i3 = i2;
 L10 : while (1) {
  i8 = HEAP32[i3 >> 2] | 0;
  i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](i8) | 0;
  do if (i3) {
   i5 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 12 | 0) | 0;
   if ((i5 | 0) == 22229) break L10;
   i6 = HEAP8[i5 >> 0] | 0;
   if (i6 << 24 >> 24) {
    i4 = 22229;
    i7 = 0;
    while (1) {
     i47 = HEAP8[i4 >> 0] | 0;
     if (!(i47 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
      i5 = i7;
      break;
     }
     i5 = i5 + 1 | 0;
     i4 = i4 + 1 | 0;
     i7 = i7 + 1 | 0;
     i6 = HEAP8[i5 >> 0] | 0;
     if (!(i6 << 24 >> 24)) {
      i6 = 0;
      i5 = i7;
      break;
     }
    }
    if ((i5 | 0) == 2147483647) break L10;
    if (i6 << 24 >> 24) break;
   } else i4 = 22229;
   if (!(HEAP8[i4 >> 0] | 0)) break L10;
  } while (0);
  i3 = i8 + 36 | 0;
 }
 i3 = HEAP32[i3 + 24 >> 2] | 0;
 L24 : do if (i3) {
  i8 = i3;
  L25 : while (1) {
   i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](i8) | 0;
   do if (i3) {
    i5 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 12 | 0) | 0;
    if ((i5 | 0) == 22238) break L25;
    i6 = HEAP8[i5 >> 0] | 0;
    if (i6 << 24 >> 24) {
     i4 = 22238;
     i7 = 0;
     while (1) {
      i47 = HEAP8[i4 >> 0] | 0;
      if (!(i47 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
       i5 = i7;
       break;
      }
      i5 = i5 + 1 | 0;
      i4 = i4 + 1 | 0;
      i7 = i7 + 1 | 0;
      i6 = HEAP8[i5 >> 0] | 0;
      if (!(i6 << 24 >> 24)) {
       i6 = 0;
       i5 = i7;
       break;
      }
     }
     if ((i5 | 0) == 2147483647) {
      i48 = 26;
      break L25;
     }
     if (i6 << 24 >> 24) break;
    } else i4 = 22238;
    if (!(HEAP8[i4 >> 0] | 0)) {
     i48 = 26;
     break L25;
    }
   } while (0);
   i8 = HEAP32[i8 + 36 >> 2] | 0;
   if (!i8) break L24;
  }
  if ((i48 | 0) == 26) if (!i3) break;
  do {
   __ZNK8tinyxml210XMLElement9AttributeEPKcS2_(i3, 22246, 36904) | 0;
   i4 = HEAP32[i3 + 48 >> 2] | 0;
   L42 : do if (i4) {
    while (1) {
     i5 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 4 | 0) | 0;
     if ((i5 | 0) == 22251) break;
     i6 = HEAP8[i5 >> 0] | 0;
     if (i6 << 24 >> 24) {
      i7 = 22251;
      i8 = 0;
      while (1) {
       i47 = HEAP8[i7 >> 0] | 0;
       if (!(i47 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
        i5 = i8;
        break;
       }
       i5 = i5 + 1 | 0;
       i7 = i7 + 1 | 0;
       i8 = i8 + 1 | 0;
       i6 = HEAP8[i5 >> 0] | 0;
       if (!(i6 << 24 >> 24)) {
        i6 = 0;
        i5 = i8;
        break;
       }
      }
      if ((i5 | 0) == 2147483647) {
       i48 = 36;
       break;
      }
      if (!(i6 << 24 >> 24)) {
       i9 = i7;
       i48 = 34;
      }
     } else {
      i9 = 22251;
      i48 = 34;
     }
     if ((i48 | 0) == 34 ? (i48 = 0, (HEAP8[i9 >> 0] | 0) == 0) : 0) {
      i48 = 36;
      break;
     }
     i4 = HEAP32[i4 + 28 >> 2] | 0;
     if (!i4) break L42;
    }
    if ((i48 | 0) == 36) {
     i48 = 0;
     if (!i4) break;
    }
    __ZN8tinyxml27StrPair6GetStrEv(i4 + 16 | 0) | 0;
   } while (0);
   i3 = HEAP32[i3 + 36 >> 2] | 0;
   if (!i3) break L24;
   while (1) {
    if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i3) | 0) {
     i4 = i3;
     break;
    }
    i3 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i3) break L24;
   }
   i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i3) | 0;
  } while ((i3 | 0) != 0);
 } while (0);
 L63 : while (1) {
  i7 = HEAP32[i2 >> 2] | 0;
  i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i7 >> 2] >> 2] & 127](i7) | 0;
  do if (i2) {
   i4 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
   if ((i4 | 0) == 22260) break L63;
   i5 = HEAP8[i4 >> 0] | 0;
   if (i5 << 24 >> 24) {
    i3 = 22260;
    i6 = 0;
    while (1) {
     i47 = HEAP8[i3 >> 0] | 0;
     if (!(i47 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
      i4 = i6;
      break;
     }
     i4 = i4 + 1 | 0;
     i3 = i3 + 1 | 0;
     i6 = i6 + 1 | 0;
     i5 = HEAP8[i4 >> 0] | 0;
     if (!(i5 << 24 >> 24)) {
      i5 = 0;
      i4 = i6;
      break;
     }
    }
    if ((i4 | 0) == 2147483647) break L63;
    if (i5 << 24 >> 24) break;
   } else i3 = 22260;
   if (!(HEAP8[i3 >> 0] | 0)) break L63;
  } while (0);
  i2 = i7 + 36 | 0;
 }
 i14 = i2 + 24 | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 L77 : do if (!i2) i2 = 0; else {
  i7 = i2;
  L78 : while (1) {
   i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i7 >> 2] >> 2] & 127](i7) | 0;
   do if (i2) {
    i4 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
    if ((i4 | 0) == 22269) {
     i3 = i2;
     break L78;
    }
    i5 = HEAP8[i4 >> 0] | 0;
    if (i5 << 24 >> 24) {
     i3 = 22269;
     i6 = 0;
     while (1) {
      i47 = HEAP8[i3 >> 0] | 0;
      if (!(i47 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
       i4 = i6;
       break;
      }
      i4 = i4 + 1 | 0;
      i3 = i3 + 1 | 0;
      i6 = i6 + 1 | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (!(i5 << 24 >> 24)) {
       i5 = 0;
       i4 = i6;
       break;
      }
     }
     if ((i4 | 0) == 2147483647) {
      i48 = 61;
      break L78;
     }
     if (i5 << 24 >> 24) break;
    } else i3 = 22269;
    if (!(HEAP8[i3 >> 0] | 0)) {
     i48 = 61;
     break L78;
    }
   } while (0);
   i7 = HEAP32[i7 + 36 >> 2] | 0;
   if (!i7) {
    i2 = 0;
    break L77;
   }
  }
  if ((i48 | 0) == 61) if (!i2) {
   i2 = 0;
   break;
  } else i3 = i2;
  i12 = i61 + 52 | 0;
  i13 = i61 + 56 | 0;
  i2 = 0;
  i11 = i3;
  L94 : while (1) {
   i10 = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22276) | 0;
   i3 = HEAP32[i13 >> 2] | 0;
   i4 = HEAP32[i12 >> 2] | 0;
   i5 = (i3 - i4 | 0) / 56 | 0;
   do if (i10 >>> 0 >= i5 >>> 0) {
    i6 = i10 + 1 | 0;
    if (i6 >>> 0 > i5 >>> 0) {
     __ZNSt3__16vectorI9PicFamilyNS_9allocatorIS1_EEE8__appendEj(i12, i6 - i5 | 0);
     break;
    }
    if (i6 >>> 0 < i5 >>> 0 ? (i18 = i4 + (i6 * 56 | 0) | 0, (i3 | 0) != (i18 | 0)) : 0) do {
     i47 = i3 + -56 | 0;
     HEAP32[i13 >> 2] = i47;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3 + -20 | 0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3 + -32 | 0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
     i3 = HEAP32[i13 >> 2] | 0;
    } while ((i3 | 0) != (i18 | 0));
   } while (0);
   i9 = HEAP32[i12 >> 2] | 0;
   HEAP32[i9 + (i10 * 56 | 0) + 12 >> 2] = i2;
   i8 = i11 + 48 | 0;
   i3 = HEAP32[i8 >> 2] | 0;
   L105 : do if (!i3) i3 = 0; else {
    while (1) {
     i4 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 4 | 0) | 0;
     if ((i4 | 0) == 22282) break;
     i5 = HEAP8[i4 >> 0] | 0;
     if (i5 << 24 >> 24) {
      i6 = 22282;
      i7 = 0;
      while (1) {
       i47 = HEAP8[i6 >> 0] | 0;
       if (!(i47 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
        i4 = i7;
        break;
       }
       i4 = i4 + 1 | 0;
       i6 = i6 + 1 | 0;
       i7 = i7 + 1 | 0;
       i5 = HEAP8[i4 >> 0] | 0;
       if (!(i5 << 24 >> 24)) {
        i5 = 0;
        i4 = i7;
        break;
       }
      }
      if ((i4 | 0) == 2147483647) {
       i48 = 78;
       break;
      }
      if (!(i5 << 24 >> 24)) {
       i16 = i6;
       i48 = 76;
      }
     } else {
      i16 = 22282;
      i48 = 76;
     }
     if ((i48 | 0) == 76 ? (i48 = 0, (HEAP8[i16 >> 0] | 0) == 0) : 0) {
      i48 = 78;
      break;
     }
     i3 = HEAP32[i3 + 28 >> 2] | 0;
     if (!i3) {
      i3 = 0;
      break L105;
     }
    }
    if ((i48 | 0) == 78) {
     i48 = 0;
     if (!i3) {
      i3 = 0;
      break;
     }
    }
    i3 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 16 | 0) | 0;
   } while (0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i9 + (i10 * 56 | 0) | 0, i3) | 0;
   HEAP32[i9 + (i10 * 56 | 0) + 20 >> 2] = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22287) | 0;
   i3 = HEAP32[i8 >> 2] | 0;
   L122 : do if (!i3) i3 = 0; else {
    while (1) {
     i4 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 4 | 0) | 0;
     if ((i4 | 0) == 22303) break;
     i5 = HEAP8[i4 >> 0] | 0;
     if (i5 << 24 >> 24) {
      i6 = 22303;
      i7 = 0;
      while (1) {
       i47 = HEAP8[i6 >> 0] | 0;
       if (!(i47 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i47 << 24 >> 24 : 0)) {
        i4 = i7;
        break;
       }
       i4 = i4 + 1 | 0;
       i6 = i6 + 1 | 0;
       i7 = i7 + 1 | 0;
       i5 = HEAP8[i4 >> 0] | 0;
       if (!(i5 << 24 >> 24)) {
        i5 = 0;
        i4 = i7;
        break;
       }
      }
      if ((i4 | 0) == 2147483647) {
       i48 = 89;
       break;
      }
      if (!(i5 << 24 >> 24)) {
       i17 = i6;
       i48 = 87;
      }
     } else {
      i17 = 22303;
      i48 = 87;
     }
     if ((i48 | 0) == 87 ? (i48 = 0, (HEAP8[i17 >> 0] | 0) == 0) : 0) {
      i48 = 89;
      break;
     }
     i3 = HEAP32[i3 + 28 >> 2] | 0;
     if (!i3) {
      i3 = 0;
      break L122;
     }
    }
    if ((i48 | 0) == 89) {
     i48 = 0;
     if (!i3) {
      i3 = 0;
      break;
     }
    }
    i3 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 16 | 0) | 0;
   } while (0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i9 + (i10 * 56 | 0) + 24 | 0, i3) | 0;
   i9 = i9 + (i10 * 56 | 0) + 16 | 0;
   HEAP32[i9 >> 2] = 0;
   i3 = HEAP32[i11 + 24 >> 2] | 0;
   L139 : do if (!i3) i3 = 0; else {
    L140 : while (1) {
     i8 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i3) | 0;
     do if (i8) {
      i5 = __ZN8tinyxml27StrPair6GetStrEv(i8 + 12 | 0) | 0;
      if ((i5 | 0) == 22308) {
       i4 = i8;
       i48 = 94;
       break L140;
      }
      i6 = HEAP8[i5 >> 0] | 0;
      if (i6 << 24 >> 24) {
       i4 = 22308;
       i7 = 0;
       while (1) {
        i48 = HEAP8[i4 >> 0] | 0;
        if (!(i48 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i48 << 24 >> 24 : 0)) {
         i5 = i7;
         break;
        }
        i5 = i5 + 1 | 0;
        i4 = i4 + 1 | 0;
        i7 = i7 + 1 | 0;
        i6 = HEAP8[i5 >> 0] | 0;
        if (!(i6 << 24 >> 24)) {
         i6 = 0;
         i5 = i7;
         break;
        }
       }
       if ((i5 | 0) == 2147483647) {
        i4 = i8;
        i48 = 103;
        break L140;
       }
       if (i6 << 24 >> 24) break;
      } else i4 = 22308;
      if (!(HEAP8[i4 >> 0] | 0)) {
       i4 = i8;
       i48 = 103;
       break L140;
      }
     } while (0);
     i3 = HEAP32[i3 + 36 >> 2] | 0;
     if (!i3) {
      i48 = 102;
      break;
     }
    }
    if ((i48 | 0) == 94) {
     i48 = 0;
     i3 = HEAP32[i9 >> 2] | 0;
    } else if ((i48 | 0) == 102) {
     i48 = 0;
     i3 = HEAP32[i9 >> 2] | 0;
     break;
    } else if ((i48 | 0) == 103) {
     i48 = 0;
     i3 = HEAP32[i9 >> 2] | 0;
     if (!i4) break;
    }
    L157 : while (1) {
     HEAP32[i9 >> 2] = i3 + 1;
     i3 = HEAP32[i4 + 36 >> 2] | 0;
     if (!i3) break;
     L159 : while (1) {
      do if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i3) | 0) {
       i4 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 12 | 0) | 0;
       if ((i4 | 0) == 22308) {
        i4 = i3;
        break L159;
       }
       if (((HEAP8[i4 >> 0] | 0) == 103 ? (HEAP8[i4 + 1 >> 0] | 0) == 114 : 0) ? (HEAP8[i4 + 2 >> 0] | 0) == 111 : 0) {
        if ((HEAP8[i4 + 3 >> 0] | 0) != 117) break;
        if ((HEAP8[i4 + 4 >> 0] | 0) != 112) break;
        if (!(HEAP8[i4 + 5 >> 0] | 0)) {
         i4 = i3;
         break L159;
        }
       }
      } while (0);
      i3 = HEAP32[i3 + 36 >> 2] | 0;
      if (!i3) break L157;
     }
     i4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i3) | 0;
     i3 = HEAP32[i9 >> 2] | 0;
     if (!i4) break L139;
    }
    i3 = HEAP32[i9 >> 2] | 0;
   } while (0);
   i4 = HEAP32[i11 + 36 >> 2] | 0;
   if (!i4) break;
   while (1) {
    if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i4) | 0) {
     i5 = i4;
     break;
    }
    i4 = HEAP32[i4 + 36 >> 2] | 0;
    if (!i4) break L94;
   }
   i11 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i4) | 0;
   i2 = i3 + i2 | 0;
   if (!i11) break L77;
  }
  i2 = i3 + i2 | 0;
 } while (0);
 i47 = i61 + 16 | 0;
 i7 = i2 * 6 | 0;
 i6 = i61 + 20 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i3 = HEAP32[i47 >> 2] | 0;
 i5 = (i4 - i3 | 0) / 1328 | 0;
 if (i7 >>> 0 <= i5 >>> 0) {
  if (i7 >>> 0 < i5 >>> 0 ? (i19 = i3 + (i7 * 1328 | 0) | 0, (i4 | 0) != (i19 | 0)) : 0) while (1) {
   i3 = i4 + -1328 | 0;
   HEAP32[i6 >> 2] = i3;
   i4 = HEAP32[i4 + -320 >> 2] | 0;
   if (i4) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv(i4);
    i3 = HEAP32[i6 >> 2] | 0;
   }
   if ((i3 | 0) == (i19 | 0)) break; else i4 = i3;
  }
 } else __ZNSt3__16vectorI6PicDefNS_9allocatorIS1_EEE8__appendEj(i47, i7 - i5 | 0);
 if ((i2 | 0) > 0) {
  i2 = 0;
  do {
   i46 = HEAP32[i47 >> 2] | 0;
   HEAP32[i46 + (i2 * 1328 | 0) + 992 >> 2] = i46 + (i2 * 1328 | 0);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i7 | 0));
 }
 HEAP32[i61 >> 2] = 0;
 HEAP32[i58 >> 2] = 0;
 i2 = HEAP32[i14 >> 2] | 0;
 L193 : do if (!i2) i48 = 314; else {
  i7 = i2;
  L194 : while (1) {
   i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i7 >> 2] >> 2] & 127](i7) | 0;
   do if (i2) {
    i4 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
    if ((i4 | 0) == 22269) break L194;
    i5 = HEAP8[i4 >> 0] | 0;
    if (i5 << 24 >> 24) {
     i3 = 22269;
     i6 = 0;
     while (1) {
      i46 = HEAP8[i3 >> 0] | 0;
      if (!(i46 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i46 << 24 >> 24 : 0)) {
       i4 = i6;
       break;
      }
      i4 = i4 + 1 | 0;
      i3 = i3 + 1 | 0;
      i6 = i6 + 1 | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (!(i5 << 24 >> 24)) {
       i5 = 0;
       i4 = i6;
       break;
      }
     }
     if ((i4 | 0) == 2147483647) {
      i48 = 137;
      break L194;
     }
     if (i5 << 24 >> 24) break;
    } else i3 = 22269;
    if (!(HEAP8[i3 >> 0] | 0)) {
     i48 = 137;
     break L194;
    }
   } while (0);
   i7 = HEAP32[i7 + 36 >> 2] | 0;
   if (!i7) {
    i48 = 314;
    break L193;
   }
  }
  if ((i48 | 0) == 137) if (!i2) {
   i48 = 314;
   break;
  }
  i16 = i56 + 20 | 0;
  i17 = i56 + 32 | 0;
  i18 = i56 + 36 | 0;
  i19 = i56 + 40 | 0;
  i20 = i56 + 44 | 0;
  i21 = i56 + 48 | 0;
  i22 = i56 + 16 | 0;
  i23 = i56 + 52 | 0;
  i24 = i56 + 56 | 0;
  i25 = i56 + 60 | 0;
  i26 = i56 + 4 | 0;
  i27 = i61 + 8 | 0;
  i28 = i61 + 12 | 0;
  i29 = i61 + 4 | 0;
  i30 = i56 + 12 | 0;
  i31 = i59 + 8 | 0;
  i32 = i59 + 1 | 0;
  i33 = i59 + 4 | 0;
  i34 = i56 + 8 | 0;
  i35 = i61 + 32 | 0;
  i36 = i61 + 36 | 0;
  i37 = i61 + 28 | 0;
  i38 = i61 + 44 | 0;
  i39 = i61 + 48 | 0;
  i40 = i61 + 40 | 0;
  i41 = i57 + 8 | 0;
  i42 = i57 + 1 | 0;
  i43 = i57 + 4 | 0;
  i44 = i61 + 4 | 0;
  i45 = i61 + 40 | 0;
  i46 = i61 + 28 | 0;
  i7 = 0;
  while (1) {
   i3 = HEAP32[i2 + 24 >> 2] | 0;
   L212 : do if (!i3) i3 = 0; else while (1) {
    i9 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i3) | 0;
    do if (i9) {
     i5 = __ZN8tinyxml27StrPair6GetStrEv(i9 + 12 | 0) | 0;
     if ((i5 | 0) == 22308) {
      i3 = i9;
      break L212;
     }
     i6 = HEAP8[i5 >> 0] | 0;
     if (i6 << 24 >> 24) {
      i4 = 22308;
      i8 = 0;
      while (1) {
       i15 = HEAP8[i4 >> 0] | 0;
       if (!(i15 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
        i5 = i8;
        break;
       }
       i5 = i5 + 1 | 0;
       i4 = i4 + 1 | 0;
       i8 = i8 + 1 | 0;
       i6 = HEAP8[i5 >> 0] | 0;
       if (!(i6 << 24 >> 24)) {
        i6 = 0;
        i5 = i8;
        break;
       }
      }
      if ((i5 | 0) == 2147483647) {
       i3 = i9;
       break L212;
      }
      if (i6 << 24 >> 24) break;
     } else i4 = 22308;
     if (!(HEAP8[i4 >> 0] | 0)) {
      i3 = i9;
      break L212;
     }
    } while (0);
    i3 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i3) {
     i3 = 0;
     break;
    }
   } while (0);
   while (1) {
    if (!i3) {
     i4 = i7;
     break;
    };
    HEAP32[i16 >> 2] = 0;
    HEAP32[i16 + 4 >> 2] = 0;
    HEAP32[i16 + 8 >> 2] = 0;
    HEAP32[i56 >> 2] = 0;
    HEAP32[i56 + 4 >> 2] = 0;
    HEAP32[i56 + 8 >> 2] = 0;
    HEAP32[i56 + 12 >> 2] = 0;
    HEAP32[i17 >> 2] = -1;
    HEAPF32[i18 >> 2] = 1.0;
    HEAPF32[i19 >> 2] = 1.0;
    HEAPF32[i20 >> 2] = 1.0;
    HEAP32[i21 >> 2] = 0;
    HEAP32[i21 + 4 >> 2] = 0;
    HEAP32[i21 + 8 >> 2] = 0;
    HEAP32[i21 + 12 >> 2] = 0;
    i4 = HEAP32[i3 + 48 >> 2] | 0;
    L229 : do if (!i4) i4 = 0; else {
     while (1) {
      i5 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 4 | 0) | 0;
      if ((i5 | 0) == 22282) break;
      i6 = HEAP8[i5 >> 0] | 0;
      if (i6 << 24 >> 24) {
       i8 = 22282;
       i9 = 0;
       while (1) {
        i15 = HEAP8[i8 >> 0] | 0;
        if (!(i15 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
         i5 = i9;
         break;
        }
        i5 = i5 + 1 | 0;
        i8 = i8 + 1 | 0;
        i9 = i9 + 1 | 0;
        i6 = HEAP8[i5 >> 0] | 0;
        if (!(i6 << 24 >> 24)) {
         i6 = 0;
         i5 = i9;
         break;
        }
       }
       if ((i5 | 0) == 2147483647) {
        i48 = 159;
        break;
       }
       if (!(i6 << 24 >> 24)) {
        i49 = i8;
        i48 = 157;
       }
      } else {
       i49 = 22282;
       i48 = 157;
      }
      if ((i48 | 0) == 157 ? (i48 = 0, (HEAP8[i49 >> 0] | 0) == 0) : 0) {
       i48 = 159;
       break;
      }
      i4 = HEAP32[i4 + 28 >> 2] | 0;
      if (!i4) {
       i4 = 0;
       break L229;
      }
     }
     if ((i48 | 0) == 159) {
      i48 = 0;
      if (!i4) {
       i4 = 0;
       break;
      }
     }
     i4 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 16 | 0) | 0;
    } while (0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i16, i4) | 0;
    HEAP32[(__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEEixERSA_(i1, i16) | 0) >> 2] = i7;
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    L246 : do if (!i5) i11 = 0; else while (1) {
     i11 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
     do if (i11) {
      i8 = __ZN8tinyxml27StrPair6GetStrEv(i11 + 12 | 0) | 0;
      if ((i8 | 0) == 22314) break L246;
      i9 = HEAP8[i8 >> 0] | 0;
      if (i9 << 24 >> 24) {
       i6 = 22314;
       i10 = 0;
       while (1) {
        i15 = HEAP8[i6 >> 0] | 0;
        if (!(i15 << 24 >> 24 != 0 ? i9 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
         i8 = i10;
         break;
        }
        i8 = i8 + 1 | 0;
        i6 = i6 + 1 | 0;
        i10 = i10 + 1 | 0;
        i9 = HEAP8[i8 >> 0] | 0;
        if (!(i9 << 24 >> 24)) {
         i9 = 0;
         i8 = i10;
         break;
        }
       }
       if ((i8 | 0) == 2147483647) break L246;
       if (i9 << 24 >> 24) break;
      } else i6 = 22314;
      if (!(HEAP8[i6 >> 0] | 0)) break L246;
     } while (0);
     i5 = HEAP32[i5 + 36 >> 2] | 0;
     if (!i5) {
      i11 = 0;
      break;
     }
    } while (0);
    i12 = i11 + 48 | 0;
    i5 = HEAP32[i12 >> 2] | 0;
    L261 : do if (!i5) i5 = 0; else {
     while (1) {
      i6 = __ZN8tinyxml27StrPair6GetStrEv(i5 + 4 | 0) | 0;
      if ((i6 | 0) == 22319) break;
      i8 = HEAP8[i6 >> 0] | 0;
      if (i8 << 24 >> 24) {
       i9 = 22319;
       i10 = 0;
       while (1) {
        i15 = HEAP8[i9 >> 0] | 0;
        if (!(i15 << 24 >> 24 != 0 ? i8 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
         i6 = i10;
         break;
        }
        i6 = i6 + 1 | 0;
        i9 = i9 + 1 | 0;
        i10 = i10 + 1 | 0;
        i8 = HEAP8[i6 >> 0] | 0;
        if (!(i8 << 24 >> 24)) {
         i8 = 0;
         i6 = i10;
         break;
        }
       }
       if ((i6 | 0) == 2147483647) {
        i48 = 180;
        break;
       }
       if (!(i8 << 24 >> 24)) {
        i50 = i9;
        i48 = 178;
       }
      } else {
       i50 = 22319;
       i48 = 178;
      }
      if ((i48 | 0) == 178 ? (i48 = 0, (HEAP8[i50 >> 0] | 0) == 0) : 0) {
       i48 = 180;
       break;
      }
      i5 = HEAP32[i5 + 28 >> 2] | 0;
      if (!i5) {
       i5 = 0;
       break L261;
      }
     }
     if ((i48 | 0) == 180) {
      i48 = 0;
      if (!i5) {
       i5 = 0;
       break;
      }
     }
     i5 = __ZN8tinyxml27StrPair6GetStrEv(i5 + 16 | 0) | 0;
    } while (0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i55, i5, _strlen(i5) | 0);
    do if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22324) | 0) if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22330) | 0) if (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22343) | 0) if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22357) | 0)) i5 = 4; else {
     if (!(__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22372) | 0)) {
      i5 = 20;
      break;
     }
     i5 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i55, 22396) | 0) == 0;
     i5 = i5 ? 24 : 0;
    } else i5 = 2; else i5 = 1; else i5 = 0; while (0);
    HEAP32[i17 >> 2] = i5;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i55);
    i5 = HEAP32[i12 >> 2] | 0;
    L285 : do if (i5) {
     while (1) {
      i6 = __ZN8tinyxml27StrPair6GetStrEv(i5 + 4 | 0) | 0;
      if ((i6 | 0) == 22421) break;
      i8 = HEAP8[i6 >> 0] | 0;
      if (i8 << 24 >> 24) {
       i9 = 22421;
       i10 = 0;
       while (1) {
        i15 = HEAP8[i9 >> 0] | 0;
        if (!(i15 << 24 >> 24 != 0 ? i8 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
         i6 = i10;
         break;
        }
        i6 = i6 + 1 | 0;
        i9 = i9 + 1 | 0;
        i10 = i10 + 1 | 0;
        i8 = HEAP8[i6 >> 0] | 0;
        if (!(i8 << 24 >> 24)) {
         i8 = 0;
         i6 = i10;
         break;
        }
       }
       if ((i6 | 0) == 2147483647) {
        i48 = 197;
        break;
       }
       if (!(i8 << 24 >> 24)) {
        i51 = i9;
        i48 = 195;
       }
      } else {
       i51 = 22421;
       i48 = 195;
      }
      if ((i48 | 0) == 195 ? (i48 = 0, (HEAP8[i51 >> 0] | 0) == 0) : 0) {
       i48 = 197;
       break;
      }
      i5 = HEAP32[i5 + 28 >> 2] | 0;
      if (!i5) {
       i8 = 0;
       i6 = 0;
       break L285;
      }
     }
     if ((i48 | 0) == 197) if (!i5) {
      i8 = 0;
      i6 = 0;
      break;
     }
     if (__ZN8tinyxml27StrPair6GetStrEv(i5 + 16 | 0) | 0) {
      i5 = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22421) | 0;
      do if ((i5 | 0) > -1) {
       i6 = HEAP32[i46 >> 2] | 0;
       if (i5 >>> 0 >= (HEAP32[i35 >> 2] | 0) - i6 >> 2 >>> 0) break;
       i8 = HEAP32[(HEAP32[i45 >> 2] | 0) + (i5 + 1 << 2) >> 2] | 0;
       i6 = HEAP32[i6 + (i5 << 2) >> 2] | 0;
       break L285;
      } while (0);
      i8 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22428, 16) | 0, i5) | 0;
      HEAP32[i53 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
      i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i53, 16144) | 0;
      i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i6, 10) | 0;
      __ZNSt3__16localeD2Ev(i53);
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i8, i6) | 0;
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
      i8 = 0;
      i6 = 0;
     } else {
      i8 = 0;
      i6 = 0;
     }
    } else {
     i8 = 0;
     i6 = 0;
    } while (0);
    HEAP32[i22 >> 2] = i6;
    d64 = +(__ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22445) | 0) / 255.0;
    i48 = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22447) | 0;
    d65 = +(__ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22449) | 0) / 255.0;
    HEAPF32[i18 >> 2] = d64;
    HEAPF32[i19 >> 2] = +(i48 | 0) / 255.0;
    HEAPF32[i20 >> 2] = d65;
    d65 = +(__ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22451) | 0) / 255.0;
    i48 = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22455) | 0;
    d64 = +(__ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22459) | 0) / 255.0;
    HEAPF32[i21 >> 2] = d65;
    HEAPF32[i23 >> 2] = +(i48 | 0) / 255.0;
    HEAPF32[i24 >> 2] = d64;
    HEAP32[i25 >> 2] = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22463) | 0;
    L307 : do if (i6) {
     i5 = HEAP32[i17 >> 2] | 0;
     switch (i5 | 0) {
     case 4:
     case 2:
      break;
     default:
      {
       if (!(i5 & 16)) break L307;
       HEAP32[i30 >> 2] = i8;
       break L307;
      }
     }
     i6 = __ZN11PicGroupDef10blendImageEP6ImgBuf(i56, i6) | 0;
     HEAP32[i53 >> 2] = i6;
     i5 = HEAP32[i35 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i36 >> 2] | 0)) __ZNSt3__16vectorIP6ImgBufNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i37, i53); else {
      HEAP32[i5 >> 2] = i6;
      HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 4;
     }
     HEAP32[i54 >> 2] = 0;
     i5 = HEAP32[i38 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i39 >> 2] | 0) >>> 0) {
      HEAP32[i5 >> 2] = 0;
      HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 4;
     } else __ZNSt3__16vectorIP9GlTextureNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i40, i54);
     HEAP32[i22 >> 2] = i6;
     HEAP32[i30 >> 2] = HEAP32[HEAP32[i45 >> 2] >> 2];
    } while (0);
    i10 = HEAP32[i4 >> 2] | 0;
    L322 : while (1) {
     i11 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i10 >> 2] >> 2] & 127](i10) | 0;
     do if (i11) {
      i6 = __ZN8tinyxml27StrPair6GetStrEv(i11 + 12 | 0) | 0;
      if ((i6 | 0) == 22465) {
       i14 = 0;
       i48 = 224;
       break L322;
      }
      i8 = HEAP8[i6 >> 0] | 0;
      if (i8 << 24 >> 24) {
       i5 = 22465;
       i9 = 0;
       while (1) {
        i48 = HEAP8[i5 >> 0] | 0;
        if (!(i48 << 24 >> 24 != 0 ? i8 << 24 >> 24 == i48 << 24 >> 24 : 0)) {
         i6 = i9;
         break;
        }
        i6 = i6 + 1 | 0;
        i5 = i5 + 1 | 0;
        i9 = i9 + 1 | 0;
        i8 = HEAP8[i6 >> 0] | 0;
        if (!(i8 << 24 >> 24)) {
         i8 = 0;
         i6 = i9;
         break;
        }
       }
       if ((i6 | 0) == 2147483647) {
        i14 = 0;
        i48 = 224;
        break L322;
       }
       if (i8 << 24 >> 24) break;
      } else i5 = 22465;
      if (!(HEAP8[i5 >> 0] | 0)) {
       i14 = 0;
       i48 = 224;
       break L322;
      }
     } while (0);
     i10 = HEAP32[i10 + 36 >> 2] | 0;
     if (!i10) {
      i48 = 259;
      break;
     }
    }
    L335 : do if ((i48 | 0) == 224) {
     L391 : while (1) {
      i48 = 0;
      i12 = HEAP32[i58 >> 2] | 0;
      i13 = HEAP32[i47 >> 2] | 0;
      HEAP32[i13 + (i12 * 1328 | 0) >> 2] = i7;
      HEAP32[i13 + (i12 * 1328 | 0) + 4 >> 2] = i14;
      i4 = i11 + 24 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      do if (!i5) i4 = 0; else {
       if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5) | 0)) {
        i4 = 0;
        break;
       }
       i4 = HEAP32[i4 >> 2] | 0;
       i4 = __ZN8tinyxml27StrPair6GetStrEv((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) + 12 | 0) | 0;
      } while (0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i59, i4, _strlen(i4) | 0);
      i6 = HEAP8[i59 >> 0] | 0;
      i15 = (i6 & 1) == 0;
      i8 = HEAP32[i31 >> 2] | 0;
      i4 = i15 ? i32 : i8;
      i5 = HEAP32[i33 >> 2] | 0;
      i15 = i15 ? (i6 & 255) >>> 1 : i5;
      i10 = i4 + i15 | 0;
      L397 : do if (!i15) {
       i9 = i4;
       i48 = 230;
      } else while (1) {
       if ((HEAP8[i4 >> 0] | 0) == 32) {
        i9 = i4;
        i48 = 230;
        break L397;
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i10 | 0)) {
        i4 = i10;
        break;
       }
      } while (0);
      do if ((i48 | 0) == 230) {
       if ((i9 | 0) == (i10 | 0)) {
        i4 = i10;
        break;
       }
       i4 = i9 + 1 | 0;
       if ((i4 | 0) == (i10 | 0)) {
        i4 = i9;
        break;
       }
       i8 = i4;
       i4 = i9;
       i5 = i9;
       do {
        i6 = HEAP8[i8 >> 0] | 0;
        if (i6 << 24 >> 24 != 32) {
         HEAP8[i4 >> 0] = i6;
         i4 = i5 + 1 | 0;
         i5 = i4;
        }
        i8 = i8 + 1 | 0;
       } while ((i8 | 0) != (i10 | 0));
       i6 = HEAP8[i59 >> 0] | 0;
       i8 = HEAP32[i31 >> 2] | 0;
       i5 = HEAP32[i33 >> 2] | 0;
      } while (0);
      i48 = (i6 & 1) == 0;
      i15 = i48 ? i32 : i8;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj(i59, i4 - i15 | 0, i15 + (i48 ? (i6 & 255) >>> 1 : i5) - i4 | 0) | 0;
      i4 = 0;
      i5 = 0;
      while (1) {
       HEAP32[i13 + (i12 * 1328 | 0) + 8 + (i5 << 2) >> 2] = (HEAP8[(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i59, i4) | 0) >> 0] | 0) != 48 & 1;
       HEAP32[i13 + (i12 * 1328 | 0) + 8 + (i5 + 5 << 2) >> 2] = (HEAP8[(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i59, i4 + 1 | 0) | 0) >> 0] | 0) != 48 & 1;
       HEAP32[i13 + (i12 * 1328 | 0) + 8 + (i5 + 10 << 2) >> 2] = (HEAP8[(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i59, i4 + 2 | 0) | 0) >> 0] | 0) != 48 & 1;
       HEAP32[i13 + (i12 * 1328 | 0) + 8 + (i5 + 15 << 2) >> 2] = (HEAP8[(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i59, i4 + 3 | 0) | 0) >> 0] | 0) != 48 & 1;
       HEAP32[i13 + (i12 * 1328 | 0) + 8 + (i5 + 20 << 2) >> 2] = (HEAP8[(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i59, i4 + 4 | 0) | 0) >> 0] | 0) != 48 & 1;
       i5 = i5 + 1 | 0;
       if ((i5 | 0) >= 5) break; else i4 = i4 + 5 | 0;
      }
      if (!((HEAP32[i17 >> 2] & 16 | 0) == 0 | (HEAP32[i22 >> 2] | 0) == 0)) {
       i4 = i13 + (i12 * 1328 | 0) + 984 | 0;
       HEAP32[i4 >> 2] = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22471) | 0;
       i5 = __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i11, 22474) | 0;
       HEAP32[i13 + (i12 * 1328 | 0) + 988 >> 2] = i5;
       i5 = __ZN6ImgBuf4copyEiiii(HEAP32[i22 >> 2] | 0, HEAP32[i4 >> 2] | 0, i5, 128, 128) | 0;
       HEAP32[i53 >> 2] = i5;
       i4 = HEAP32[i35 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i36 >> 2] | 0)) __ZNSt3__16vectorIP6ImgBufNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i37, i53); else {
        HEAP32[i4 >> 2] = i5;
        HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 4;
       }
       HEAP32[i54 >> 2] = 0;
       i4 = HEAP32[i38 >> 2] | 0;
       if (i4 >>> 0 < (HEAP32[i39 >> 2] | 0) >>> 0) {
        HEAP32[i4 >> 2] = 0;
        HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 4;
       } else __ZNSt3__16vectorIP9GlTextureNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i40, i54);
       HEAP32[i13 + (i12 * 1328 | 0) + 980 >> 2] = i5;
      }
      __ZNK6PicArr8makeRtnsEPS_(i13 + (i12 * 1328 | 0) + 8 | 0, i13 + (i12 * 1328 | 0) + 116 | 0);
      i4 = HEAP32[i26 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i34 >> 2] | 0)) {
       __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(i56, i58);
       i4 = HEAP32[i58 >> 2] | 0;
      } else {
       i48 = HEAP32[i58 >> 2] | 0;
       HEAP32[i4 >> 2] = i48;
       HEAP32[i26 >> 2] = i4 + 4;
       i4 = i48;
      }
      HEAP32[i58 >> 2] = i4 + 1;
      i4 = HEAP32[i11 + 36 >> 2] | 0;
      if (!i4) break;
      L430 : while (1) {
       do if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i4) | 0) {
        i5 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 12 | 0) | 0;
        if ((i5 | 0) == 22465) {
         i5 = i4;
         break L430;
        }
        if ((HEAP8[i5 >> 0] | 0) != 112) break;
        if ((HEAP8[i5 + 1 >> 0] | 0) != 105) break;
        if ((HEAP8[i5 + 2 >> 0] | 0) != 101) break;
        if ((HEAP8[i5 + 3 >> 0] | 0) != 99) break;
        if ((HEAP8[i5 + 4 >> 0] | 0) != 101) break;
        if (!(HEAP8[i5 + 5 >> 0] | 0)) {
         i5 = i4;
         break L430;
        }
       } while (0);
       i4 = HEAP32[i4 + 36 >> 2] | 0;
       if (!i4) break L391;
      }
      i11 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i4) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i59);
      if (!i11) {
       i48 = 297;
       break L335;
      } else {
       i14 = i14 + 1 | 0;
       i48 = 224;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i59);
     i48 = 297;
    } else if ((i48 | 0) == 259) {
     L336 : while (1) {
      i48 = 0;
      i10 = HEAP32[i4 >> 2] | 0;
      i4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i10 >> 2] >> 2] & 127](i10) | 0;
      do if (i4) {
       i6 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 12 | 0) | 0;
       if ((i6 | 0) == 22477) break L336;
       i8 = HEAP8[i6 >> 0] | 0;
       if (i8 << 24 >> 24) {
        i5 = 22477;
        i9 = 0;
        while (1) {
         i15 = HEAP8[i5 >> 0] | 0;
         if (!(i15 << 24 >> 24 != 0 ? i8 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
          i6 = i9;
          break;
         }
         i6 = i6 + 1 | 0;
         i5 = i5 + 1 | 0;
         i9 = i9 + 1 | 0;
         i8 = HEAP8[i6 >> 0] | 0;
         if (!(i8 << 24 >> 24)) {
          i8 = 0;
          i6 = i9;
          break;
         }
        }
        if ((i6 | 0) == 2147483647) break L336;
        if (i8 << 24 >> 24) break;
       } else i5 = 22477;
       if (!(HEAP8[i5 >> 0] | 0)) break L336;
      } while (0);
      i4 = i10 + 36 | 0;
      i48 = 259;
     }
     i4 = HEAP32[i4 + 48 >> 2] | 0;
     L350 : do if (!i4) i4 = 0; else {
      while (1) {
       i5 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 4 | 0) | 0;
       if ((i5 | 0) == 22484) break;
       i6 = HEAP8[i5 >> 0] | 0;
       if (i6 << 24 >> 24) {
        i8 = 22484;
        i9 = 0;
        while (1) {
         i15 = HEAP8[i8 >> 0] | 0;
         if (!(i15 << 24 >> 24 != 0 ? i6 << 24 >> 24 == i15 << 24 >> 24 : 0)) {
          i5 = i9;
          break;
         }
         i5 = i5 + 1 | 0;
         i8 = i8 + 1 | 0;
         i9 = i9 + 1 | 0;
         i6 = HEAP8[i5 >> 0] | 0;
         if (!(i6 << 24 >> 24)) {
          i6 = 0;
          i5 = i9;
          break;
         }
        }
        if ((i5 | 0) == 2147483647) {
         i48 = 277;
         break;
        }
        if (!(i6 << 24 >> 24)) {
         i52 = i8;
         i48 = 275;
        }
       } else {
        i52 = 22484;
        i48 = 275;
       }
       if ((i48 | 0) == 275 ? (i48 = 0, (HEAP8[i52 >> 0] | 0) == 0) : 0) {
        i48 = 277;
        break;
       }
       i4 = HEAP32[i4 + 28 >> 2] | 0;
       if (!i4) {
        i4 = 0;
        break L350;
       }
      }
      if ((i48 | 0) == 277) {
       i48 = 0;
       if (!i4) {
        i4 = 0;
        break;
       }
      }
      i4 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 16 | 0) | 0;
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i57, i4, _strlen(i4) | 0);
     if ((__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(i1, i57) | 0) == (i60 | 0)) {
      i14 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22489, 23) | 0;
      i8 = HEAP8[i57 >> 0] | 0;
      i15 = (i8 & 1) == 0;
      i8 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i14, i15 ? i42 : HEAP32[i41 >> 2] | 0, i15 ? (i8 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) | 0;
      HEAP32[i53 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
      i15 = __ZNKSt3__16locale9use_facetERNS0_2idE(i53, 16144) | 0;
      i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, 10) | 0;
      __ZNSt3__16localeD2Ev(i53);
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i8, i15) | 0;
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i57);
      i8 = 1;
      break;
     }
     i12 = HEAP32[(__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEEixERSA_(i1, i57) | 0) >> 2] | 0;
     i48 = HEAP32[i44 >> 2] | 0;
     i4 = HEAP32[i48 + (i12 << 6) >> 2] | 0;
     i48 = (HEAP32[i48 + (i12 << 6) + 4 >> 2] | 0) - i4 | 0;
     i13 = i48 >> 2;
     L370 : do if ((i48 | 0) > 0) {
      i11 = HEAP32[i58 >> 2] | 0;
      i5 = 0;
      while (1) {
       i10 = HEAP32[i47 >> 2] | 0;
       HEAP32[i10 + (i11 * 1328 | 0) >> 2] = i7;
       HEAP32[i10 + (i11 * 1328 | 0) + 4 >> 2] = i5;
       i4 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
       i6 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
       i9 = i10 + (i11 * 1328 | 0) + 8 | 0;
       i14 = i9;
       i8 = i6 + (i4 * 1328 | 0) + 8 | 0;
       i15 = i14 + 108 | 0;
       do {
        HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
        i14 = i14 + 4 | 0;
        i8 = i8 + 4 | 0;
       } while ((i14 | 0) < (i15 | 0));
       if (HEAP32[i17 >> 2] & 16) {
        i48 = HEAP32[i6 + (i4 * 1328 | 0) + 984 >> 2] | 0;
        HEAP32[i10 + (i11 * 1328 | 0) + 984 >> 2] = i48;
        i6 = HEAP32[i6 + (i4 * 1328 | 0) + 988 >> 2] | 0;
        HEAP32[i10 + (i11 * 1328 | 0) + 988 >> 2] = i6;
        i6 = __ZN6ImgBuf4copyEiiii(HEAP32[i22 >> 2] | 0, i48, i6, 128, 128) | 0;
        HEAP32[i53 >> 2] = i6;
        i4 = HEAP32[i35 >> 2] | 0;
        if ((i4 | 0) == (HEAP32[i36 >> 2] | 0)) __ZNSt3__16vectorIP6ImgBufNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i37, i53); else {
         HEAP32[i4 >> 2] = i6;
         HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 4;
        }
        HEAP32[i54 >> 2] = 0;
        i4 = HEAP32[i38 >> 2] | 0;
        if (i4 >>> 0 < (HEAP32[i39 >> 2] | 0) >>> 0) {
         HEAP32[i4 >> 2] = 0;
         HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 4;
        } else __ZNSt3__16vectorIP9GlTextureNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i40, i54);
        HEAP32[i10 + (i11 * 1328 | 0) + 980 >> 2] = i6;
       }
       __ZNK6PicArr8makeRtnsEPS_(i9, i10 + (i11 * 1328 | 0) + 116 | 0);
       i4 = HEAP32[i26 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i34 >> 2] | 0)) __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(i56, i58); else {
        HEAP32[i4 >> 2] = i11;
        HEAP32[i26 >> 2] = i4 + 4;
       }
       i4 = i11 + 1 | 0;
       HEAP32[i58 >> 2] = i4;
       i5 = i5 + 1 | 0;
       if ((i5 | 0) >= (i13 | 0)) break L370;
       i11 = i4;
       i4 = HEAP32[(HEAP32[i44 >> 2] | 0) + (i12 << 6) >> 2] | 0;
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i57);
     i48 = 297;
    } while (0);
    if ((i48 | 0) == 297) {
     i48 = 0;
     i4 = HEAP32[i27 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i28 >> 2] | 0)) __ZNSt3__16vectorI11PicGroupDefNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i29, i56); else {
      __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_(i4, i56);
      i13 = i30;
      i14 = HEAP32[i13 + 4 >> 2] | 0;
      i15 = i4 + 12 | 0;
      HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
      HEAP32[i15 + 4 >> 2] = i14;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i4 + 20 | 0, i16);
      i15 = i4 + 32 | 0;
      HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
      HEAP32[i15 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
      HEAP32[i15 + 16 >> 2] = HEAP32[i17 + 16 >> 2];
      HEAP32[i15 + 20 >> 2] = HEAP32[i17 + 20 >> 2];
      HEAP32[i15 + 24 >> 2] = HEAP32[i17 + 24 >> 2];
      HEAP32[i15 + 28 >> 2] = HEAP32[i17 + 28 >> 2];
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 64;
     }
     HEAP32[i61 >> 2] = ((HEAP32[i26 >> 2] | 0) - (HEAP32[i56 >> 2] | 0) >> 2) + (HEAP32[i61 >> 2] | 0);
     i3 = HEAP32[i3 + 36 >> 2] | 0;
     L449 : do if (!i3) i3 = 0; else {
      while (1) {
       if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i3) | 0) {
        i4 = i3;
        break;
       }
       i3 = HEAP32[i3 + 36 >> 2] | 0;
       if (!i3) {
        i3 = 0;
        break L449;
       }
      }
      i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i3) | 0;
     } while (0);
     i8 = 0;
     i7 = i7 + 1 | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i16);
    i4 = HEAP32[i56 >> 2] | 0;
    i5 = i4;
    if (i4) {
     i6 = HEAP32[i26 >> 2] | 0;
     if ((i6 | 0) != (i4 | 0)) HEAP32[i26 >> 2] = i6 + (~((i6 + -4 - i5 | 0) >>> 2) << 2);
     __ZdlPv(i4);
    }
    if (i8) {
     i2 = 0;
     break L193;
    }
   }
   i2 = HEAP32[i2 + 36 >> 2] | 0;
   if (!i2) {
    i48 = 314;
    break L193;
   }
   while (1) {
    if (FUNCTION_TABLE_ii[HEAP32[HEAP32[i2 >> 2] >> 2] & 127](i2) | 0) {
     i3 = i2;
     break;
    }
    i2 = HEAP32[i2 + 36 >> 2] | 0;
    if (!i2) {
     i48 = 314;
     break L193;
    }
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i2) | 0;
   if (!i2) {
    i48 = 314;
    break;
   } else i7 = i4;
  }
 } while (0);
 if ((i48 | 0) == 314) {
  i2 = HEAP32[i61 + 56 >> 2] | 0;
  i14 = HEAP32[i61 + 52 >> 2] | 0;
  if ((i2 | 0) != (i14 | 0)) {
   i9 = (i2 - i14 | 0) / 56 | 0;
   i10 = i61 + 4 | 0;
   i11 = (HEAP32[1556] | 0) + 16 | 0;
   i13 = 0;
   do {
    i12 = HEAP32[i14 + (i13 * 56 | 0) + 20 >> 2] | 0;
    i2 = HEAP32[i14 + (i13 * 56 | 0) + 16 >> 2] | 0;
    if ((i2 | 0) > 0) {
     i7 = HEAP32[i14 + (i13 * 56 | 0) + 12 >> 2] | 0;
     i8 = HEAP32[i10 >> 2] | 0;
     i4 = i7 + i2 | 0;
     do {
      i5 = HEAP32[i8 + (i7 << 6) >> 2] | 0;
      i2 = (HEAP32[i8 + (i7 << 6) + 4 >> 2] | 0) - i5 | 0;
      if ((i2 | 0) > 0) {
       i6 = HEAP32[i11 >> 2] | 0;
       i2 = i2 >> 2;
       i3 = 0;
       do {
        HEAP32[i6 + ((HEAP32[i5 + (i3 << 2) >> 2] | 0) * 1328 | 0) + 1024 >> 2] = i12;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) < (i2 | 0));
      }
      i7 = i7 + 1 | 0;
     } while ((i7 | 0) < (i4 | 0));
    }
    i13 = i13 + 1 | 0;
   } while (i13 >>> 0 < i9 >>> 0);
  }
  __ZN9PicBucket11makeAllCompEv(i61);
  i2 = 1;
 }
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i1, HEAP32[i60 >> 2] | 0);
 i61 = i2;
 __ZN8tinyxml211XMLDocumentD2Ev(i62);
 STACKTOP = i63;
 return i61 | 0;
}

function _malloc(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 do if (i2 >>> 0 < 245) {
  i14 = i2 >>> 0 < 11 ? 16 : i2 + 11 & -8;
  i2 = i14 >>> 3;
  i8 = HEAP32[3219] | 0;
  i3 = i8 >>> i2;
  if (i3 & 3) {
   i2 = (i3 & 1 ^ 1) + i2 | 0;
   i4 = i2 << 1;
   i3 = 12916 + (i4 << 2) | 0;
   i4 = 12916 + (i4 + 2 << 2) | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i6 = i5 + 8 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   do if ((i3 | 0) != (i7 | 0)) {
    if (i7 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i1 = i7 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i4 >> 2] = i7;
     break;
    } else _abort();
   } else HEAP32[3219] = i8 & ~(1 << i2); while (0);
   i38 = i2 << 3;
   HEAP32[i5 + 4 >> 2] = i38 | 3;
   i38 = i5 + (i38 | 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
   i38 = i6;
   return i38 | 0;
  }
  i7 = HEAP32[3221] | 0;
  if (i14 >>> 0 > i7 >>> 0) {
   if (i3) {
    i4 = 2 << i2;
    i4 = i3 << i2 & (i4 | 0 - i4);
    i4 = (i4 & 0 - i4) + -1 | 0;
    i9 = i4 >>> 12 & 16;
    i4 = i4 >>> i9;
    i5 = i4 >>> 5 & 8;
    i4 = i4 >>> i5;
    i6 = i4 >>> 2 & 4;
    i4 = i4 >>> i6;
    i3 = i4 >>> 1 & 2;
    i4 = i4 >>> i3;
    i2 = i4 >>> 1 & 1;
    i2 = (i5 | i9 | i6 | i3 | i2) + (i4 >>> i2) | 0;
    i4 = i2 << 1;
    i3 = 12916 + (i4 << 2) | 0;
    i4 = 12916 + (i4 + 2 << 2) | 0;
    i6 = HEAP32[i4 >> 2] | 0;
    i9 = i6 + 8 | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    do if ((i3 | 0) != (i5 | 0)) {
     if (i5 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i4 >> 2] = i5;
      i10 = HEAP32[3221] | 0;
      break;
     } else _abort();
    } else {
     HEAP32[3219] = i8 & ~(1 << i2);
     i10 = i7;
    } while (0);
    i38 = i2 << 3;
    i7 = i38 - i14 | 0;
    HEAP32[i6 + 4 >> 2] = i14 | 3;
    i8 = i6 + i14 | 0;
    HEAP32[i6 + (i14 | 4) >> 2] = i7 | 1;
    HEAP32[i6 + i38 >> 2] = i7;
    if (i10) {
     i5 = HEAP32[3224] | 0;
     i3 = i10 >>> 3;
     i1 = i3 << 1;
     i4 = 12916 + (i1 << 2) | 0;
     i2 = HEAP32[3219] | 0;
     i3 = 1 << i3;
     if (i2 & i3) {
      i2 = 12916 + (i1 + 2 << 2) | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
       i11 = i2;
       i12 = i1;
      }
     } else {
      HEAP32[3219] = i2 | i3;
      i11 = 12916 + (i1 + 2 << 2) | 0;
      i12 = i4;
     }
     HEAP32[i11 >> 2] = i5;
     HEAP32[i12 + 12 >> 2] = i5;
     HEAP32[i5 + 8 >> 2] = i12;
     HEAP32[i5 + 12 >> 2] = i4;
    }
    HEAP32[3221] = i7;
    HEAP32[3224] = i8;
    i38 = i9;
    return i38 | 0;
   }
   i2 = HEAP32[3220] | 0;
   if (i2) {
    i3 = (i2 & 0 - i2) + -1 | 0;
    i37 = i3 >>> 12 & 16;
    i3 = i3 >>> i37;
    i36 = i3 >>> 5 & 8;
    i3 = i3 >>> i36;
    i38 = i3 >>> 2 & 4;
    i3 = i3 >>> i38;
    i2 = i3 >>> 1 & 2;
    i3 = i3 >>> i2;
    i4 = i3 >>> 1 & 1;
    i4 = HEAP32[13180 + ((i36 | i37 | i38 | i2 | i4) + (i3 >>> i4) << 2) >> 2] | 0;
    i3 = (HEAP32[i4 + 4 >> 2] & -8) - i14 | 0;
    i2 = i4;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) {
       i9 = i3;
       break;
      }
     }
     i2 = (HEAP32[i1 + 4 >> 2] & -8) - i14 | 0;
     i38 = i2 >>> 0 < i3 >>> 0;
     i3 = i38 ? i2 : i3;
     i2 = i1;
     i4 = i38 ? i1 : i4;
    }
    i6 = HEAP32[3223] | 0;
    if (i4 >>> 0 < i6 >>> 0) _abort();
    i8 = i4 + i14 | 0;
    if (i4 >>> 0 >= i8 >>> 0) _abort();
    i7 = HEAP32[i4 + 24 >> 2] | 0;
    i3 = HEAP32[i4 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i4 | 0)) {
     i2 = i4 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i4 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i13 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (i5) {
       i1 = i5;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (!i5) break; else {
       i1 = i5;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i6 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i13 = i1;
      break;
     }
    } else {
     i5 = HEAP32[i4 + 8 >> 2] | 0;
     if (i5 >>> 0 < i6 >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i5;
      i13 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i7) {
     i1 = HEAP32[i4 + 28 >> 2] | 0;
     i2 = 13180 + (i1 << 2) | 0;
     if ((i4 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i13;
      if (!i13) {
       HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
       break;
      }
     } else {
      if (i7 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
      i1 = i7 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i7 + 20 >> 2] = i13;
      if (!i13) break;
     }
     i2 = HEAP32[3223] | 0;
     if (i13 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i13 + 24 >> 2] = i7;
     i1 = HEAP32[i4 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i13 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     } while (0);
     i1 = HEAP32[i4 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
      HEAP32[i13 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     }
    } while (0);
    if (i9 >>> 0 < 16) {
     i38 = i9 + i14 | 0;
     HEAP32[i4 + 4 >> 2] = i38 | 3;
     i38 = i4 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } else {
     HEAP32[i4 + 4 >> 2] = i14 | 3;
     HEAP32[i4 + (i14 | 4) >> 2] = i9 | 1;
     HEAP32[i4 + (i9 + i14) >> 2] = i9;
     i1 = HEAP32[3221] | 0;
     if (i1) {
      i6 = HEAP32[3224] | 0;
      i3 = i1 >>> 3;
      i1 = i3 << 1;
      i5 = 12916 + (i1 << 2) | 0;
      i2 = HEAP32[3219] | 0;
      i3 = 1 << i3;
      if (i2 & i3) {
       i1 = 12916 + (i1 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
        i15 = i1;
        i16 = i2;
       }
      } else {
       HEAP32[3219] = i2 | i3;
       i15 = 12916 + (i1 + 2 << 2) | 0;
       i16 = i5;
      }
      HEAP32[i15 >> 2] = i6;
      HEAP32[i16 + 12 >> 2] = i6;
      HEAP32[i6 + 8 >> 2] = i16;
      HEAP32[i6 + 12 >> 2] = i5;
     }
     HEAP32[3221] = i9;
     HEAP32[3224] = i8;
    }
    i38 = i4 + 8 | 0;
    return i38 | 0;
   } else i16 = i14;
  } else i16 = i14;
 } else if (i2 >>> 0 <= 4294967231) {
  i2 = i2 + 11 | 0;
  i12 = i2 & -8;
  i11 = HEAP32[3220] | 0;
  if (i11) {
   i3 = 0 - i12 | 0;
   i2 = i2 >>> 8;
   if (i2) if (i12 >>> 0 > 16777215) i10 = 31; else {
    i16 = (i2 + 1048320 | 0) >>> 16 & 8;
    i21 = i2 << i16;
    i15 = (i21 + 520192 | 0) >>> 16 & 4;
    i21 = i21 << i15;
    i10 = (i21 + 245760 | 0) >>> 16 & 2;
    i10 = 14 - (i15 | i16 | i10) + (i21 << i10 >>> 15) | 0;
    i10 = i12 >>> (i10 + 7 | 0) & 1 | i10 << 1;
   } else i10 = 0;
   i2 = HEAP32[13180 + (i10 << 2) >> 2] | 0;
   L123 : do if (!i2) {
    i5 = 0;
    i2 = 0;
    i21 = 86;
   } else {
    i7 = i3;
    i5 = 0;
    i8 = i12 << ((i10 | 0) == 31 ? 0 : 25 - (i10 >>> 1) | 0);
    i9 = i2;
    i2 = 0;
    while (1) {
     i6 = HEAP32[i9 + 4 >> 2] & -8;
     i3 = i6 - i12 | 0;
     if (i3 >>> 0 < i7 >>> 0) if ((i6 | 0) == (i12 | 0)) {
      i6 = i9;
      i2 = i9;
      i21 = 90;
      break L123;
     } else i2 = i9; else i3 = i7;
     i21 = HEAP32[i9 + 20 >> 2] | 0;
     i9 = HEAP32[i9 + 16 + (i8 >>> 31 << 2) >> 2] | 0;
     i5 = (i21 | 0) == 0 | (i21 | 0) == (i9 | 0) ? i5 : i21;
     if (!i9) {
      i21 = 86;
      break;
     } else {
      i7 = i3;
      i8 = i8 << 1;
     }
    }
   } while (0);
   if ((i21 | 0) == 86) {
    if ((i5 | 0) == 0 & (i2 | 0) == 0) {
     i2 = 2 << i10;
     i2 = i11 & (i2 | 0 - i2);
     if (!i2) {
      i16 = i12;
      break;
     }
     i2 = (i2 & 0 - i2) + -1 | 0;
     i13 = i2 >>> 12 & 16;
     i2 = i2 >>> i13;
     i11 = i2 >>> 5 & 8;
     i2 = i2 >>> i11;
     i15 = i2 >>> 2 & 4;
     i2 = i2 >>> i15;
     i16 = i2 >>> 1 & 2;
     i2 = i2 >>> i16;
     i5 = i2 >>> 1 & 1;
     i5 = HEAP32[13180 + ((i11 | i13 | i15 | i16 | i5) + (i2 >>> i5) << 2) >> 2] | 0;
     i2 = 0;
    }
    if (!i5) {
     i8 = i3;
     i9 = i2;
    } else {
     i6 = i5;
     i21 = 90;
    }
   }
   if ((i21 | 0) == 90) while (1) {
    i21 = 0;
    i16 = (HEAP32[i6 + 4 >> 2] & -8) - i12 | 0;
    i5 = i16 >>> 0 < i3 >>> 0;
    i3 = i5 ? i16 : i3;
    i2 = i5 ? i6 : i2;
    i5 = HEAP32[i6 + 16 >> 2] | 0;
    if (i5) {
     i6 = i5;
     i21 = 90;
     continue;
    }
    i6 = HEAP32[i6 + 20 >> 2] | 0;
    if (!i6) {
     i8 = i3;
     i9 = i2;
     break;
    } else i21 = 90;
   }
   if ((i9 | 0) != 0 ? i8 >>> 0 < ((HEAP32[3221] | 0) - i12 | 0) >>> 0 : 0) {
    i5 = HEAP32[3223] | 0;
    if (i9 >>> 0 < i5 >>> 0) _abort();
    i7 = i9 + i12 | 0;
    if (i9 >>> 0 >= i7 >>> 0) _abort();
    i6 = HEAP32[i9 + 24 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i9 | 0)) {
     i2 = i9 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i9 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i14 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i5 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i14 = i1;
      break;
     }
    } else {
     i4 = HEAP32[i9 + 8 >> 2] | 0;
     if (i4 >>> 0 < i5 >>> 0) _abort();
     i1 = i4 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i4;
      i14 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i6) {
     i1 = HEAP32[i9 + 28 >> 2] | 0;
     i2 = 13180 + (i1 << 2) | 0;
     if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i14;
      if (!i14) {
       HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
       break;
      }
     } else {
      if (i6 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
      i1 = i6 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
      if (!i14) break;
     }
     i2 = HEAP32[3223] | 0;
     if (i14 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i14 + 24 >> 2] = i6;
     i1 = HEAP32[i9 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i14 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     } while (0);
     i1 = HEAP32[i9 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
      HEAP32[i14 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     }
    } while (0);
    L199 : do if (i8 >>> 0 >= 16) {
     HEAP32[i9 + 4 >> 2] = i12 | 3;
     HEAP32[i9 + (i12 | 4) >> 2] = i8 | 1;
     HEAP32[i9 + (i8 + i12) >> 2] = i8;
     i1 = i8 >>> 3;
     if (i8 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 12916 + (i2 << 2) | 0;
      i3 = HEAP32[3219] | 0;
      i1 = 1 << i1;
      if (i3 & i1) {
       i1 = 12916 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
        i18 = i1;
        i19 = i2;
       }
      } else {
       HEAP32[3219] = i3 | i1;
       i18 = 12916 + (i2 + 2 << 2) | 0;
       i19 = i4;
      }
      HEAP32[i18 >> 2] = i7;
      HEAP32[i19 + 12 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i19;
      HEAP32[i9 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i8 >>> 8;
     if (i1) if (i8 >>> 0 > 16777215) i4 = 31; else {
      i37 = (i1 + 1048320 | 0) >>> 16 & 8;
      i38 = i1 << i37;
      i36 = (i38 + 520192 | 0) >>> 16 & 4;
      i38 = i38 << i36;
      i4 = (i38 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
      i4 = i8 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } else i4 = 0;
     i1 = 13180 + (i4 << 2) | 0;
     HEAP32[i9 + (i12 + 28) >> 2] = i4;
     HEAP32[i9 + (i12 + 20) >> 2] = 0;
     HEAP32[i9 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[3220] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[3220] = i2 | i3;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 24) >> 2] = i1;
      HEAP32[i9 + (i12 + 12) >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i7;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L217 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i8 | 0)) {
      i4 = i8 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i8 | 0)) {
        i24 = i3;
        break L217;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i7;
       HEAP32[i9 + (i12 + 24) >> 2] = i1;
       HEAP32[i9 + (i12 + 12) >> 2] = i7;
       HEAP32[i9 + (i12 + 8) >> 2] = i7;
       break L199;
      }
     } else i24 = i1; while (0);
     i1 = i24 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i38 = HEAP32[3223] | 0;
     if (i2 >>> 0 >= i38 >>> 0 & i24 >>> 0 >= i38 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i7;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i2;
      HEAP32[i9 + (i12 + 12) >> 2] = i24;
      HEAP32[i9 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = i8 + i12 | 0;
     HEAP32[i9 + 4 >> 2] = i38 | 3;
     i38 = i9 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } while (0);
    i38 = i9 + 8 | 0;
    return i38 | 0;
   } else i16 = i12;
  } else i16 = i12;
 } else i16 = -1; while (0);
 i3 = HEAP32[3221] | 0;
 if (i3 >>> 0 >= i16 >>> 0) {
  i1 = i3 - i16 | 0;
  i2 = HEAP32[3224] | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[3224] = i2 + i16;
   HEAP32[3221] = i1;
   HEAP32[i2 + (i16 + 4) >> 2] = i1 | 1;
   HEAP32[i2 + i3 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i16 | 3;
  } else {
   HEAP32[3221] = 0;
   HEAP32[3224] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i38 = i2 + (i3 + 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
  }
  i38 = i2 + 8 | 0;
  return i38 | 0;
 }
 i2 = HEAP32[3222] | 0;
 if (i2 >>> 0 > i16 >>> 0) {
  i37 = i2 - i16 | 0;
  HEAP32[3222] = i37;
  i38 = HEAP32[3225] | 0;
  HEAP32[3225] = i38 + i16;
  HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
  HEAP32[i38 + 4 >> 2] = i16 | 3;
  i38 = i38 + 8 | 0;
  return i38 | 0;
 }
 do if (!(HEAP32[3337] | 0)) {
  i2 = _sysconf(30) | 0;
  if (!(i2 + -1 & i2)) {
   HEAP32[3339] = i2;
   HEAP32[3338] = i2;
   HEAP32[3340] = -1;
   HEAP32[3341] = -1;
   HEAP32[3342] = 0;
   HEAP32[3330] = 0;
   HEAP32[3337] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 i9 = i16 + 48 | 0;
 i8 = HEAP32[3339] | 0;
 i10 = i16 + 47 | 0;
 i7 = i8 + i10 | 0;
 i8 = 0 - i8 | 0;
 i11 = i7 & i8;
 if (i11 >>> 0 <= i16 >>> 0) {
  i38 = 0;
  return i38 | 0;
 }
 i2 = HEAP32[3329] | 0;
 if ((i2 | 0) != 0 ? (i19 = HEAP32[3327] | 0, i24 = i19 + i11 | 0, i24 >>> 0 <= i19 >>> 0 | i24 >>> 0 > i2 >>> 0) : 0) {
  i38 = 0;
  return i38 | 0;
 }
 L258 : do if (!(HEAP32[3330] & 4)) {
  i2 = HEAP32[3225] | 0;
  L260 : do if (i2) {
   i5 = 13324;
   while (1) {
    i3 = HEAP32[i5 >> 2] | 0;
    if (i3 >>> 0 <= i2 >>> 0 ? (i17 = i5 + 4 | 0, (i3 + (HEAP32[i17 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) : 0) {
     i6 = i5;
     i2 = i17;
     break;
    }
    i5 = HEAP32[i5 + 8 >> 2] | 0;
    if (!i5) {
     i21 = 174;
     break L260;
    }
   }
   i3 = i7 - (HEAP32[3222] | 0) & i8;
   if (i3 >>> 0 < 2147483647) {
    i5 = _sbrk(i3 | 0) | 0;
    i24 = (i5 | 0) == ((HEAP32[i6 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) | 0);
    i2 = i24 ? i3 : 0;
    if (i24) {
     if ((i5 | 0) != (-1 | 0)) {
      i22 = i5;
      i15 = i2;
      i21 = 194;
      break L258;
     }
    } else i21 = 184;
   } else i2 = 0;
  } else i21 = 174; while (0);
  do if ((i21 | 0) == 174) {
   i6 = _sbrk(0) | 0;
   if ((i6 | 0) != (-1 | 0)) {
    i2 = i6;
    i3 = HEAP32[3338] | 0;
    i5 = i3 + -1 | 0;
    if (!(i5 & i2)) i3 = i11; else i3 = i11 - i2 + (i5 + i2 & 0 - i3) | 0;
    i2 = HEAP32[3327] | 0;
    i5 = i2 + i3 | 0;
    if (i3 >>> 0 > i16 >>> 0 & i3 >>> 0 < 2147483647) {
     i24 = HEAP32[3329] | 0;
     if ((i24 | 0) != 0 ? i5 >>> 0 <= i2 >>> 0 | i5 >>> 0 > i24 >>> 0 : 0) {
      i2 = 0;
      break;
     }
     i5 = _sbrk(i3 | 0) | 0;
     i24 = (i5 | 0) == (i6 | 0);
     i2 = i24 ? i3 : 0;
     if (i24) {
      i22 = i6;
      i15 = i2;
      i21 = 194;
      break L258;
     } else i21 = 184;
    } else i2 = 0;
   } else i2 = 0;
  } while (0);
  L280 : do if ((i21 | 0) == 184) {
   i6 = 0 - i3 | 0;
   do if (i9 >>> 0 > i3 >>> 0 & (i3 >>> 0 < 2147483647 & (i5 | 0) != (-1 | 0)) ? (i20 = HEAP32[3339] | 0, i20 = i10 - i3 + i20 & 0 - i20, i20 >>> 0 < 2147483647) : 0) if ((_sbrk(i20 | 0) | 0) == (-1 | 0)) {
    _sbrk(i6 | 0) | 0;
    break L280;
   } else {
    i3 = i20 + i3 | 0;
    break;
   } while (0);
   if ((i5 | 0) != (-1 | 0)) {
    i22 = i5;
    i15 = i3;
    i21 = 194;
    break L258;
   }
  } while (0);
  HEAP32[3330] = HEAP32[3330] | 4;
  i21 = 191;
 } else {
  i2 = 0;
  i21 = 191;
 } while (0);
 if ((((i21 | 0) == 191 ? i11 >>> 0 < 2147483647 : 0) ? (i22 = _sbrk(i11 | 0) | 0, i23 = _sbrk(0) | 0, i22 >>> 0 < i23 >>> 0 & ((i22 | 0) != (-1 | 0) & (i23 | 0) != (-1 | 0))) : 0) ? (i25 = i23 - i22 | 0, i26 = i25 >>> 0 > (i16 + 40 | 0) >>> 0, i26) : 0) {
  i15 = i26 ? i25 : i2;
  i21 = 194;
 }
 if ((i21 | 0) == 194) {
  i2 = (HEAP32[3327] | 0) + i15 | 0;
  HEAP32[3327] = i2;
  if (i2 >>> 0 > (HEAP32[3328] | 0) >>> 0) HEAP32[3328] = i2;
  i7 = HEAP32[3225] | 0;
  L299 : do if (i7) {
   i6 = 13324;
   do {
    i2 = HEAP32[i6 >> 2] | 0;
    i3 = i6 + 4 | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if ((i22 | 0) == (i2 + i5 | 0)) {
     i27 = i2;
     i28 = i3;
     i29 = i5;
     i30 = i6;
     i21 = 204;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
   } while ((i6 | 0) != 0);
   if (((i21 | 0) == 204 ? (HEAP32[i30 + 12 >> 2] & 8 | 0) == 0 : 0) ? i7 >>> 0 < i22 >>> 0 & i7 >>> 0 >= i27 >>> 0 : 0) {
    HEAP32[i28 >> 2] = i29 + i15;
    i38 = (HEAP32[3222] | 0) + i15 | 0;
    i37 = i7 + 8 | 0;
    i37 = (i37 & 7 | 0) == 0 ? 0 : 0 - i37 & 7;
    i36 = i38 - i37 | 0;
    HEAP32[3225] = i7 + i37;
    HEAP32[3222] = i36;
    HEAP32[i7 + (i37 + 4) >> 2] = i36 | 1;
    HEAP32[i7 + (i38 + 4) >> 2] = 40;
    HEAP32[3226] = HEAP32[3341];
    break;
   }
   i2 = HEAP32[3223] | 0;
   if (i22 >>> 0 < i2 >>> 0) {
    HEAP32[3223] = i22;
    i2 = i22;
   }
   i3 = i22 + i15 | 0;
   i6 = 13324;
   while (1) {
    if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) {
     i5 = i6;
     i3 = i6;
     i21 = 212;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
    if (!i6) {
     i3 = 13324;
     break;
    }
   }
   if ((i21 | 0) == 212) if (!(HEAP32[i3 + 12 >> 2] & 8)) {
    HEAP32[i5 >> 2] = i22;
    i13 = i3 + 4 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i15;
    i13 = i22 + 8 | 0;
    i13 = (i13 & 7 | 0) == 0 ? 0 : 0 - i13 & 7;
    i10 = i22 + (i15 + 8) | 0;
    i10 = (i10 & 7 | 0) == 0 ? 0 : 0 - i10 & 7;
    i1 = i22 + (i10 + i15) | 0;
    i12 = i13 + i16 | 0;
    i14 = i22 + i12 | 0;
    i11 = i1 - (i22 + i13) - i16 | 0;
    HEAP32[i22 + (i13 + 4) >> 2] = i16 | 3;
    L324 : do if ((i1 | 0) != (i7 | 0)) {
     if ((i1 | 0) == (HEAP32[3224] | 0)) {
      i38 = (HEAP32[3221] | 0) + i11 | 0;
      HEAP32[3221] = i38;
      HEAP32[3224] = i14;
      HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
      HEAP32[i22 + (i38 + i12) >> 2] = i38;
      break;
     }
     i8 = i15 + 4 | 0;
     i3 = HEAP32[i22 + (i8 + i10) >> 2] | 0;
     if ((i3 & 3 | 0) == 1) {
      i9 = i3 & -8;
      i6 = i3 >>> 3;
      L332 : do if (i3 >>> 0 >= 256) {
       i7 = HEAP32[i22 + ((i10 | 24) + i15) >> 2] | 0;
       i4 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       do if ((i4 | 0) == (i1 | 0)) {
        i5 = i10 | 16;
        i4 = i22 + (i8 + i5) | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) {
         i4 = i22 + (i5 + i15) | 0;
         i3 = HEAP32[i4 >> 2] | 0;
         if (!i3) {
          i35 = 0;
          break;
         }
        }
        while (1) {
         i5 = i3 + 20 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (i6) {
          i3 = i6;
          i4 = i5;
          continue;
         }
         i5 = i3 + 16 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (!i6) break; else {
          i3 = i6;
          i4 = i5;
         }
        }
        if (i4 >>> 0 < i2 >>> 0) _abort(); else {
         HEAP32[i4 >> 2] = 0;
         i35 = i3;
         break;
        }
       } else {
        i5 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 12 | 0;
        if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) _abort();
        i3 = i4 + 8 | 0;
        if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) {
         HEAP32[i2 >> 2] = i4;
         HEAP32[i3 >> 2] = i5;
         i35 = i4;
         break;
        } else _abort();
       } while (0);
       if (!i7) break;
       i2 = HEAP32[i22 + (i15 + 28 + i10) >> 2] | 0;
       i3 = 13180 + (i2 << 2) | 0;
       do if ((i1 | 0) != (HEAP32[i3 >> 2] | 0)) {
        if (i7 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
        i2 = i7 + 16 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) HEAP32[i2 >> 2] = i35; else HEAP32[i7 + 20 >> 2] = i35;
        if (!i35) break L332;
       } else {
        HEAP32[i3 >> 2] = i35;
        if (i35) break;
        HEAP32[3220] = HEAP32[3220] & ~(1 << i2);
        break L332;
       } while (0);
       i3 = HEAP32[3223] | 0;
       if (i35 >>> 0 < i3 >>> 0) _abort();
       HEAP32[i35 + 24 >> 2] = i7;
       i1 = i10 | 16;
       i2 = HEAP32[i22 + (i1 + i15) >> 2] | 0;
       do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
        HEAP32[i35 + 16 >> 2] = i2;
        HEAP32[i2 + 24 >> 2] = i35;
        break;
       } while (0);
       i1 = HEAP32[i22 + (i8 + i1) >> 2] | 0;
       if (!i1) break;
       if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
        HEAP32[i35 + 20 >> 2] = i1;
        HEAP32[i1 + 24 >> 2] = i35;
        break;
       }
      } else {
       i4 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
       i5 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       i3 = 12916 + (i6 << 1 << 2) | 0;
       do if ((i4 | 0) != (i3 | 0)) {
        if (i4 >>> 0 < i2 >>> 0) _abort();
        if ((HEAP32[i4 + 12 >> 2] | 0) == (i1 | 0)) break;
        _abort();
       } while (0);
       if ((i5 | 0) == (i4 | 0)) {
        HEAP32[3219] = HEAP32[3219] & ~(1 << i6);
        break;
       }
       do if ((i5 | 0) == (i3 | 0)) i31 = i5 + 8 | 0; else {
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 8 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
         i31 = i2;
         break;
        }
        _abort();
       } while (0);
       HEAP32[i4 + 12 >> 2] = i5;
       HEAP32[i31 >> 2] = i4;
      } while (0);
      i1 = i22 + ((i9 | i10) + i15) | 0;
      i5 = i9 + i11 | 0;
     } else i5 = i11;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i22 + (i12 + 4) >> 2] = i5 | 1;
     HEAP32[i22 + (i5 + i12) >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 12916 + (i2 << 2) | 0;
      i3 = HEAP32[3219] | 0;
      i1 = 1 << i1;
      do if (!(i3 & i1)) {
       HEAP32[3219] = i3 | i1;
       i36 = 12916 + (i2 + 2 << 2) | 0;
       i37 = i4;
      } else {
       i1 = 12916 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 >= (HEAP32[3223] | 0) >>> 0) {
        i36 = i1;
        i37 = i2;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i36 >> 2] = i14;
      HEAP32[i37 + 12 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i37;
      HEAP32[i22 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i36 = (i1 + 1048320 | 0) >>> 16 & 8;
      i37 = i1 << i36;
      i35 = (i37 + 520192 | 0) >>> 16 & 4;
      i37 = i37 << i35;
      i4 = (i37 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i35 | i36 | i4) + (i37 << i4 >>> 15) | 0;
      i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } while (0);
     i1 = 13180 + (i4 << 2) | 0;
     HEAP32[i22 + (i12 + 28) >> 2] = i4;
     HEAP32[i22 + (i12 + 20) >> 2] = 0;
     HEAP32[i22 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[3220] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[3220] = i2 | i3;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 24) >> 2] = i1;
      HEAP32[i22 + (i12 + 12) >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i14;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L418 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i38 = i3;
        break L418;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i14;
       HEAP32[i22 + (i12 + 24) >> 2] = i1;
       HEAP32[i22 + (i12 + 12) >> 2] = i14;
       HEAP32[i22 + (i12 + 8) >> 2] = i14;
       break L324;
      }
     } else i38 = i1; while (0);
     i1 = i38 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i37 = HEAP32[3223] | 0;
     if (i2 >>> 0 >= i37 >>> 0 & i38 >>> 0 >= i37 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i14;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i2;
      HEAP32[i22 + (i12 + 12) >> 2] = i38;
      HEAP32[i22 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = (HEAP32[3222] | 0) + i11 | 0;
     HEAP32[3222] = i38;
     HEAP32[3225] = i14;
     HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
    } while (0);
    i38 = i22 + (i13 | 8) | 0;
    return i38 | 0;
   } else i3 = 13324;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0 ? (i1 = HEAP32[i3 + 4 >> 2] | 0, i4 = i2 + i1 | 0, i4 >>> 0 > i7 >>> 0) : 0) break;
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i5 = i2 + (i1 + -39) | 0;
   i2 = i2 + (i1 + -47 + ((i5 & 7 | 0) == 0 ? 0 : 0 - i5 & 7)) | 0;
   i5 = i7 + 16 | 0;
   i2 = i2 >>> 0 < i5 >>> 0 ? i7 : i2;
   i1 = i2 + 8 | 0;
   i3 = i22 + 8 | 0;
   i3 = (i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7;
   i38 = i15 + -40 - i3 | 0;
   HEAP32[3225] = i22 + i3;
   HEAP32[3222] = i38;
   HEAP32[i22 + (i3 + 4) >> 2] = i38 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[3226] = HEAP32[3341];
   i3 = i2 + 4 | 0;
   HEAP32[i3 >> 2] = 27;
   HEAP32[i1 >> 2] = HEAP32[3331];
   HEAP32[i1 + 4 >> 2] = HEAP32[3332];
   HEAP32[i1 + 8 >> 2] = HEAP32[3333];
   HEAP32[i1 + 12 >> 2] = HEAP32[3334];
   HEAP32[3331] = i22;
   HEAP32[3332] = i15;
   HEAP32[3334] = 0;
   HEAP32[3333] = i1;
   i1 = i2 + 28 | 0;
   HEAP32[i1 >> 2] = 7;
   if ((i2 + 32 | 0) >>> 0 < i4 >>> 0) do {
    i38 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i38 + 8 | 0) >>> 0 < i4 >>> 0);
   if ((i2 | 0) != (i7 | 0)) {
    i6 = i2 - i7 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -2;
    HEAP32[i7 + 4 >> 2] = i6 | 1;
    HEAP32[i2 >> 2] = i6;
    i1 = i6 >>> 3;
    if (i6 >>> 0 < 256) {
     i2 = i1 << 1;
     i4 = 12916 + (i2 << 2) | 0;
     i3 = HEAP32[3219] | 0;
     i1 = 1 << i1;
     if (i3 & i1) {
      i1 = 12916 + (i2 + 2 << 2) | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
       i32 = i1;
       i33 = i2;
      }
     } else {
      HEAP32[3219] = i3 | i1;
      i32 = 12916 + (i2 + 2 << 2) | 0;
      i33 = i4;
     }
     HEAP32[i32 >> 2] = i7;
     HEAP32[i33 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i33;
     HEAP32[i7 + 12 >> 2] = i4;
     break;
    }
    i1 = i6 >>> 8;
    if (i1) if (i6 >>> 0 > 16777215) i4 = 31; else {
     i37 = (i1 + 1048320 | 0) >>> 16 & 8;
     i38 = i1 << i37;
     i36 = (i38 + 520192 | 0) >>> 16 & 4;
     i38 = i38 << i36;
     i4 = (i38 + 245760 | 0) >>> 16 & 2;
     i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
     i4 = i6 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    } else i4 = 0;
    i3 = 13180 + (i4 << 2) | 0;
    HEAP32[i7 + 28 >> 2] = i4;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i1 = HEAP32[3220] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[3220] = i1 | i2;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L459 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
     i4 = i6 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
     while (1) {
      i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) break;
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i34 = i3;
       break L459;
      } else {
       i4 = i4 << 1;
       i1 = i3;
      }
     }
     if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i1;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break L299;
     }
    } else i34 = i1; while (0);
    i1 = i34 + 8 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    i38 = HEAP32[3223] | 0;
    if (i2 >>> 0 >= i38 >>> 0 & i34 >>> 0 >= i38 >>> 0) {
     HEAP32[i2 + 12 >> 2] = i7;
     HEAP32[i1 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i2;
     HEAP32[i7 + 12 >> 2] = i34;
     HEAP32[i7 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } else {
   i38 = HEAP32[3223] | 0;
   if ((i38 | 0) == 0 | i22 >>> 0 < i38 >>> 0) HEAP32[3223] = i22;
   HEAP32[3331] = i22;
   HEAP32[3332] = i15;
   HEAP32[3334] = 0;
   HEAP32[3228] = HEAP32[3337];
   HEAP32[3227] = -1;
   i1 = 0;
   do {
    i38 = i1 << 1;
    i37 = 12916 + (i38 << 2) | 0;
    HEAP32[12916 + (i38 + 3 << 2) >> 2] = i37;
    HEAP32[12916 + (i38 + 2 << 2) >> 2] = i37;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 32);
   i38 = i22 + 8 | 0;
   i38 = (i38 & 7 | 0) == 0 ? 0 : 0 - i38 & 7;
   i37 = i15 + -40 - i38 | 0;
   HEAP32[3225] = i22 + i38;
   HEAP32[3222] = i37;
   HEAP32[i22 + (i38 + 4) >> 2] = i37 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[3226] = HEAP32[3341];
  } while (0);
  i1 = HEAP32[3222] | 0;
  if (i1 >>> 0 > i16 >>> 0) {
   i37 = i1 - i16 | 0;
   HEAP32[3222] = i37;
   i38 = HEAP32[3225] | 0;
   HEAP32[3225] = i38 + i16;
   HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
   HEAP32[i38 + 4 >> 2] = i16 | 3;
   i38 = i38 + 8 | 0;
   return i38 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i38 = 0;
 return i38 | 0;
}

function _printf_core(i49, i2, i50, i51, i52) {
 i49 = i49 | 0;
 i2 = i2 | 0;
 i50 = i50 | 0;
 i51 = i51 | 0;
 i52 = i52 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i53 = 0;
 i53 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i44 = i53 + 24 | 0;
 i46 = i53 + 16 | 0;
 i45 = i53 + 588 | 0;
 i39 = i53 + 576 | 0;
 i43 = i53;
 i36 = i53 + 536 | 0;
 i48 = i53 + 8 | 0;
 i47 = i53 + 528 | 0;
 i27 = (i49 | 0) != 0;
 i28 = i36 + 40 | 0;
 i35 = i28;
 i36 = i36 + 39 | 0;
 i37 = i48 + 4 | 0;
 i38 = i39 + 12 | 0;
 i39 = i39 + 11 | 0;
 i40 = i45;
 i41 = i38;
 i42 = i41 - i40 | 0;
 i29 = -2 - i40 | 0;
 i30 = i41 + 2 | 0;
 i31 = i44 + 288 | 0;
 i32 = i45 + 9 | 0;
 i33 = i32;
 i34 = i45 + 8 | 0;
 i1 = 0;
 i12 = i2;
 i3 = 0;
 i2 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i3 | 0) > (2147483647 - i1 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i3 + i1 | 0;
   break;
  } while (0);
  i3 = HEAP8[i12 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i26 = 245;
   break;
  } else i4 = i12;
  L9 : while (1) {
   switch (i3 << 24 >> 24) {
   case 37:
    {
     i3 = i4;
     i26 = 9;
     break L9;
    }
   case 0:
    {
     i3 = i4;
     break L9;
    }
   default:
    {}
   }
   i25 = i4 + 1 | 0;
   i3 = HEAP8[i25 >> 0] | 0;
   i4 = i25;
  }
  L12 : do if ((i26 | 0) == 9) while (1) {
   i26 = 0;
   if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L12;
   i4 = i4 + 1 | 0;
   i3 = i3 + 2 | 0;
   if ((HEAP8[i3 >> 0] | 0) == 37) i26 = 9; else break;
  } while (0);
  i14 = i4 - i12 | 0;
  if (i27 ? (HEAP32[i49 >> 2] & 32 | 0) == 0 : 0) ___fwritex(i12, i14, i49) | 0;
  if ((i4 | 0) != (i12 | 0)) {
   i12 = i3;
   i3 = i14;
   continue;
  }
  i7 = i3 + 1 | 0;
  i4 = HEAP8[i7 >> 0] | 0;
  i5 = (i4 << 24 >> 24) + -48 | 0;
  if (i5 >>> 0 < 10) {
   i25 = (HEAP8[i3 + 2 >> 0] | 0) == 36;
   i7 = i25 ? i3 + 3 | 0 : i7;
   i4 = HEAP8[i7 >> 0] | 0;
   i10 = i25 ? i5 : -1;
   i2 = i25 ? 1 : i2;
  } else i10 = -1;
  i3 = i4 << 24 >> 24;
  L25 : do if ((i3 & -32 | 0) == 32) {
   i5 = 0;
   while (1) {
    if (!(1 << i3 + -32 & 75913)) {
     i8 = i5;
     i3 = i7;
     break L25;
    }
    i5 = 1 << (i4 << 24 >> 24) + -32 | i5;
    i7 = i7 + 1 | 0;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i4 << 24 >> 24;
    if ((i3 & -32 | 0) != 32) {
     i8 = i5;
     i3 = i7;
     break;
    }
   }
  } else {
   i8 = 0;
   i3 = i7;
  } while (0);
  do if (i4 << 24 >> 24 == 42) {
   i5 = i3 + 1 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 2 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i2 = 1;
    i3 = i3 + 3 | 0;
    i4 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else {
    if (i2) {
     i1 = -1;
     break L1;
    }
    if (!i27) {
     i13 = i8;
     i3 = i5;
     i2 = 0;
     i25 = 0;
     break;
    }
    i2 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i4 = HEAP32[i2 >> 2] | 0;
    HEAP32[i50 >> 2] = i2 + 4;
    i2 = 0;
    i3 = i5;
   }
   if ((i4 | 0) < 0) {
    i13 = i8 | 8192;
    i25 = 0 - i4 | 0;
   } else {
    i13 = i8;
    i25 = i4;
   }
  } else {
   i5 = (i4 << 24 >> 24) + -48 | 0;
   if (i5 >>> 0 < 10) {
    i4 = 0;
    do {
     i4 = (i4 * 10 | 0) + i5 | 0;
     i3 = i3 + 1 | 0;
     i5 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
    } while (i5 >>> 0 < 10);
    if ((i4 | 0) < 0) {
     i1 = -1;
     break L1;
    } else {
     i13 = i8;
     i25 = i4;
    }
   } else {
    i13 = i8;
    i25 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[i3 >> 0] | 0) == 46) {
   i5 = i3 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (i4 << 24 >> 24 != 42) {
    i7 = (i4 << 24 >> 24) + -48 | 0;
    if (i7 >>> 0 < 10) {
     i3 = i5;
     i4 = 0;
    } else {
     i3 = i5;
     i7 = 0;
     break;
    }
    while (1) {
     i4 = (i4 * 10 | 0) + i7 | 0;
     i3 = i3 + 1 | 0;
     i7 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
     if (i7 >>> 0 >= 10) {
      i7 = i4;
      break L46;
     }
    }
   }
   i5 = i3 + 2 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 3 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i3 = i3 + 4 | 0;
    i7 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if (i2) {
    i1 = -1;
    break L1;
   }
   if (i27) {
    i3 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i7 = HEAP32[i3 >> 2] | 0;
    HEAP32[i50 >> 2] = i3 + 4;
    i3 = i5;
   } else {
    i3 = i5;
    i7 = 0;
   }
  } else i7 = -1; while (0);
  i9 = 0;
  while (1) {
   i4 = (HEAP8[i3 >> 0] | 0) + -65 | 0;
   if (i4 >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i5 = i3 + 1 | 0;
   i4 = HEAP8[34263 + (i9 * 58 | 0) + i4 >> 0] | 0;
   i8 = i4 & 255;
   if ((i8 + -1 | 0) >>> 0 < 8) {
    i3 = i5;
    i9 = i8;
   } else {
    i24 = i5;
    break;
   }
  }
  if (!(i4 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i5 = (i10 | 0) > -1;
  do if (i4 << 24 >> 24 == 19) if (i5) {
   i1 = -1;
   break L1;
  } else i26 = 52; else {
   if (i5) {
    HEAP32[i52 + (i10 << 2) >> 2] = i8;
    i22 = i51 + (i10 << 3) | 0;
    i23 = HEAP32[i22 + 4 >> 2] | 0;
    i26 = i43;
    HEAP32[i26 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i26 + 4 >> 2] = i23;
    i26 = 52;
    break;
   }
   if (!i27) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i43, i8, i50);
  } while (0);
  if ((i26 | 0) == 52 ? (i26 = 0, !i27) : 0) {
   i12 = i24;
   i3 = i14;
   continue;
  }
  i10 = HEAP8[i3 >> 0] | 0;
  i10 = (i9 | 0) != 0 & (i10 & 15 | 0) == 3 ? i10 & -33 : i10;
  i5 = i13 & -65537;
  i23 = (i13 & 8192 | 0) == 0 ? i13 : i5;
  L75 : do switch (i10 | 0) {
  case 110:
   switch (i9 | 0) {
   case 0:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 2:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i43 >> 2] >> 1] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i43 >> 2] >> 0] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 7:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   default:
    {
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   }
  case 112:
   {
    i9 = i23 | 8;
    i7 = i7 >>> 0 > 8 ? i7 : 8;
    i10 = 120;
    i26 = 64;
    break;
   }
  case 88:
  case 120:
   {
    i9 = i23;
    i26 = 64;
    break;
   }
  case 111:
   {
    i5 = i43;
    i4 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i4 | 0) == 0 & (i5 | 0) == 0) i3 = i28; else {
     i3 = i28;
     do {
      i3 = i3 + -1 | 0;
      HEAP8[i3 >> 0] = i4 & 7 | 48;
      i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 3) | 0;
      i5 = tempRet0;
     } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    }
    if (!(i23 & 8)) {
     i4 = i23;
     i9 = 0;
     i8 = 34743;
     i26 = 77;
    } else {
     i9 = i35 - i3 + 1 | 0;
     i4 = i23;
     i7 = (i7 | 0) < (i9 | 0) ? i9 : i7;
     i9 = 0;
     i8 = 34743;
     i26 = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i4 | 0) < 0) {
     i3 = _i64Subtract(0, 0, i3 | 0, i4 | 0) | 0;
     i4 = tempRet0;
     i5 = i43;
     HEAP32[i5 >> 2] = i3;
     HEAP32[i5 + 4 >> 2] = i4;
     i5 = 1;
     i8 = 34743;
     i26 = 76;
     break L75;
    }
    if (!(i23 & 2048)) {
     i8 = i23 & 1;
     i5 = i8;
     i8 = (i8 | 0) == 0 ? 34743 : 34745;
     i26 = 76;
    } else {
     i5 = 1;
     i8 = 34744;
     i26 = 76;
    }
    break;
   }
  case 117:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    i5 = 0;
    i8 = 34743;
    i26 = 76;
    break;
   }
  case 99:
   {
    HEAP8[i36 >> 0] = HEAP32[i43 >> 2];
    i12 = i36;
    i4 = 1;
    i9 = 0;
    i10 = 34743;
    i3 = i28;
    break;
   }
  case 109:
   {
    i3 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    i26 = 82;
    break;
   }
  case 115:
   {
    i3 = HEAP32[i43 >> 2] | 0;
    i3 = (i3 | 0) != 0 ? i3 : 34753;
    i26 = 82;
    break;
   }
  case 67:
   {
    HEAP32[i48 >> 2] = HEAP32[i43 >> 2];
    HEAP32[i37 >> 2] = 0;
    HEAP32[i43 >> 2] = i48;
    i7 = -1;
    i26 = 86;
    break;
   }
  case 83:
   {
    if (!i7) {
     _pad(i49, 32, i25, 0, i23);
     i3 = 0;
     i26 = 98;
    } else i26 = 86;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    d6 = +HEAPF64[i43 >> 3];
    HEAP32[i46 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = d6;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) >= 0) if (!(i23 & 2048)) {
     i22 = i23 & 1;
     i21 = i22;
     i22 = (i22 | 0) == 0 ? 34761 : 34766;
    } else {
     i21 = 1;
     i22 = 34763;
    } else {
     d6 = -d6;
     i21 = 1;
     i22 = 34760;
    }
    HEAPF64[tempDoublePtr >> 3] = d6;
    i20 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if (i20 >>> 0 < 2146435072 | (i20 | 0) == 2146435072 & 0 < 0) {
     d11 = +_frexpl(d6, i46) * 2.0;
     i4 = d11 != 0.0;
     if (i4) HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + -1;
     i18 = i10 | 32;
     if ((i18 | 0) == 97) {
      i12 = i10 & 32;
      i14 = (i12 | 0) == 0 ? i22 : i22 + 9 | 0;
      i13 = i21 | 2;
      i3 = 12 - i7 | 0;
      do if (!(i7 >>> 0 > 11 | (i3 | 0) == 0)) {
       d6 = 8.0;
       do {
        i3 = i3 + -1 | 0;
        d6 = d6 * 16.0;
       } while ((i3 | 0) != 0);
       if ((HEAP8[i14 >> 0] | 0) == 45) {
        d6 = -(d6 + (-d11 - d6));
        break;
       } else {
        d6 = d11 + d6 - d6;
        break;
       }
      } else d6 = d11; while (0);
      i4 = HEAP32[i46 >> 2] | 0;
      i3 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
      i3 = _fmt_u(i3, ((i3 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i3 | 0) == (i38 | 0)) {
       HEAP8[i39 >> 0] = 48;
       i3 = i39;
      }
      HEAP8[i3 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i9 = i3 + -2 | 0;
      HEAP8[i9 >> 0] = i10 + 15;
      i8 = (i7 | 0) < 1;
      i5 = (i23 & 8 | 0) == 0;
      i4 = i45;
      while (1) {
       i22 = ~~d6;
       i3 = i4 + 1 | 0;
       HEAP8[i4 >> 0] = HEAPU8[34727 + i22 >> 0] | i12;
       d6 = (d6 - +(i22 | 0)) * 16.0;
       do if ((i3 - i40 | 0) == 1) {
        if (i5 & (i8 & d6 == 0.0)) break;
        HEAP8[i3 >> 0] = 46;
        i3 = i4 + 2 | 0;
       } while (0);
       if (!(d6 != 0.0)) break; else i4 = i3;
      }
      i7 = (i7 | 0) != 0 & (i29 + i3 | 0) < (i7 | 0) ? i30 + i7 - i9 | 0 : i42 - i9 + i3 | 0;
      i5 = i7 + i13 | 0;
      _pad(i49, 32, i25, i5, i23);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i14, i13, i49) | 0;
      _pad(i49, 48, i25, i5, i23 ^ 65536);
      i3 = i3 - i40 | 0;
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i45, i3, i49) | 0;
      i4 = i41 - i9 | 0;
      _pad(i49, 48, i7 - (i3 + i4) | 0, 0, 0);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i9, i4, i49) | 0;
      _pad(i49, 32, i25, i5, i23 ^ 8192);
      i3 = (i5 | 0) < (i25 | 0) ? i25 : i5;
      break;
     }
     i3 = (i7 | 0) < 0 ? 6 : i7;
     if (i4) {
      i4 = (HEAP32[i46 >> 2] | 0) + -28 | 0;
      HEAP32[i46 >> 2] = i4;
      d6 = d11 * 268435456.0;
     } else {
      d6 = d11;
      i4 = HEAP32[i46 >> 2] | 0;
     }
     i20 = (i4 | 0) < 0 ? i44 : i31;
     i19 = i20;
     i4 = i20;
     do {
      i17 = ~~d6 >>> 0;
      HEAP32[i4 >> 2] = i17;
      i4 = i4 + 4 | 0;
      d6 = (d6 - +(i17 >>> 0)) * 1.0e9;
     } while (d6 != 0.0);
     i5 = i4;
     i4 = HEAP32[i46 >> 2] | 0;
     if ((i4 | 0) > 0) {
      i8 = i20;
      while (1) {
       i9 = (i4 | 0) > 29 ? 29 : i4;
       i7 = i5 + -4 | 0;
       do if (i7 >>> 0 < i8 >>> 0) i7 = i8; else {
        i4 = 0;
        do {
         i17 = _bitshift64Shl(HEAP32[i7 >> 2] | 0, 0, i9 | 0) | 0;
         i17 = _i64Add(i17 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
         i4 = tempRet0;
         i16 = ___uremdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         HEAP32[i7 >> 2] = i16;
         i4 = ___udivdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         i7 = i7 + -4 | 0;
        } while (i7 >>> 0 >= i8 >>> 0);
        if (!i4) {
         i7 = i8;
         break;
        }
        i7 = i8 + -4 | 0;
        HEAP32[i7 >> 2] = i4;
       } while (0);
       while (1) {
        if (i5 >>> 0 <= i7 >>> 0) break;
        i4 = i5 + -4 | 0;
        if (!(HEAP32[i4 >> 2] | 0)) i5 = i4; else break;
       }
       i4 = (HEAP32[i46 >> 2] | 0) - i9 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) > 0) i8 = i7; else break;
      }
     } else i7 = i20;
     if ((i4 | 0) < 0) {
      i14 = ((i3 + 25 | 0) / 9 | 0) + 1 | 0;
      i15 = (i18 | 0) == 102;
      i12 = i7;
      while (1) {
       i13 = 0 - i4 | 0;
       i13 = (i13 | 0) > 9 ? 9 : i13;
       do if (i12 >>> 0 < i5 >>> 0) {
        i4 = (1 << i13) + -1 | 0;
        i8 = 1e9 >>> i13;
        i7 = 0;
        i9 = i12;
        do {
         i17 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = (i17 >>> i13) + i7;
         i7 = Math_imul(i17 & i4, i8) | 0;
         i9 = i9 + 4 | 0;
        } while (i9 >>> 0 < i5 >>> 0);
        i4 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12;
        if (!i7) {
         i7 = i4;
         break;
        }
        HEAP32[i5 >> 2] = i7;
        i7 = i4;
        i5 = i5 + 4 | 0;
       } else i7 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12; while (0);
       i4 = i15 ? i20 : i7;
       i5 = (i5 - i4 >> 2 | 0) > (i14 | 0) ? i4 + (i14 << 2) | 0 : i5;
       i4 = (HEAP32[i46 >> 2] | 0) + i13 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) >= 0) {
        i12 = i7;
        break;
       } else i12 = i7;
      }
     } else i12 = i7;
     do if (i12 >>> 0 < i5 >>> 0) {
      i4 = (i19 - i12 >> 2) * 9 | 0;
      i8 = HEAP32[i12 >> 2] | 0;
      if (i8 >>> 0 < 10) break; else i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i4 = i4 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     } else i4 = 0; while (0);
     i16 = (i18 | 0) == 103;
     i17 = (i3 | 0) != 0;
     i7 = i3 - ((i18 | 0) != 102 ? i4 : 0) + ((i17 & i16) << 31 >> 31) | 0;
     if ((i7 | 0) < (((i5 - i19 >> 2) * 9 | 0) + -9 | 0)) {
      i9 = i7 + 9216 | 0;
      i15 = (i9 | 0) / 9 | 0;
      i7 = i20 + (i15 + -1023 << 2) | 0;
      i9 = ((i9 | 0) % 9 | 0) + 1 | 0;
      if ((i9 | 0) < 9) {
       i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i9 = i9 + 1 | 0;
       } while ((i9 | 0) != 9);
      } else i8 = 10;
      i13 = HEAP32[i7 >> 2] | 0;
      i14 = (i13 >>> 0) % (i8 >>> 0) | 0;
      if ((i14 | 0) == 0 ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) i8 = i12; else i26 = 163;
      do if ((i26 | 0) == 163) {
       i26 = 0;
       d11 = (((i13 >>> 0) / (i8 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       i9 = (i8 | 0) / 2 | 0;
       do if (i14 >>> 0 < i9 >>> 0) d6 = .5; else {
        if ((i14 | 0) == (i9 | 0) ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) {
         d6 = 1.0;
         break;
        }
        d6 = 1.5;
       } while (0);
       do if (i21) {
        if ((HEAP8[i22 >> 0] | 0) != 45) break;
        d11 = -d11;
        d6 = -d6;
       } while (0);
       i9 = i13 - i14 | 0;
       HEAP32[i7 >> 2] = i9;
       if (!(d11 + d6 != d11)) {
        i8 = i12;
        break;
       }
       i18 = i9 + i8 | 0;
       HEAP32[i7 >> 2] = i18;
       if (i18 >>> 0 > 999999999) {
        i4 = i12;
        while (1) {
         i8 = i7 + -4 | 0;
         HEAP32[i7 >> 2] = 0;
         if (i8 >>> 0 < i4 >>> 0) {
          i4 = i4 + -4 | 0;
          HEAP32[i4 >> 2] = 0;
         }
         i18 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
         HEAP32[i8 >> 2] = i18;
         if (i18 >>> 0 > 999999999) i7 = i8; else {
          i12 = i4;
          i7 = i8;
          break;
         }
        }
       }
       i4 = (i19 - i12 >> 2) * 9 | 0;
       i9 = HEAP32[i12 >> 2] | 0;
       if (i9 >>> 0 < 10) {
        i8 = i12;
        break;
       } else i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i4 = i4 + 1 | 0;
       } while (i9 >>> 0 >= i8 >>> 0);
       i8 = i12;
      } while (0);
      i18 = i7 + 4 | 0;
      i12 = i8;
      i5 = i5 >>> 0 > i18 >>> 0 ? i18 : i5;
     }
     i14 = 0 - i4 | 0;
     while (1) {
      if (i5 >>> 0 <= i12 >>> 0) {
       i15 = 0;
       i18 = i5;
       break;
      }
      i7 = i5 + -4 | 0;
      if (!(HEAP32[i7 >> 2] | 0)) i5 = i7; else {
       i15 = 1;
       i18 = i5;
       break;
      }
     }
     do if (i16) {
      i3 = (i17 & 1 ^ 1) + i3 | 0;
      if ((i3 | 0) > (i4 | 0) & (i4 | 0) > -5) {
       i10 = i10 + -1 | 0;
       i3 = i3 + -1 - i4 | 0;
      } else {
       i10 = i10 + -2 | 0;
       i3 = i3 + -1 | 0;
      }
      i5 = i23 & 8;
      if (i5) break;
      do if (i15) {
       i5 = HEAP32[i18 + -4 >> 2] | 0;
       if (!i5) {
        i7 = 9;
        break;
       }
       if (!((i5 >>> 0) % 10 | 0)) {
        i8 = 10;
        i7 = 0;
       } else {
        i7 = 0;
        break;
       }
       do {
        i8 = i8 * 10 | 0;
        i7 = i7 + 1 | 0;
       } while (((i5 >>> 0) % (i8 >>> 0) | 0 | 0) == 0);
      } else i7 = 9; while (0);
      i5 = ((i18 - i19 >> 2) * 9 | 0) + -9 | 0;
      if ((i10 | 32 | 0) == 102) {
       i5 = i5 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      } else {
       i5 = i5 + i4 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      }
     } else i5 = i23 & 8; while (0);
     i13 = i3 | i5;
     i8 = (i13 | 0) != 0 & 1;
     i9 = (i10 | 32 | 0) == 102;
     if (i9) {
      i4 = (i4 | 0) > 0 ? i4 : 0;
      i10 = 0;
     } else {
      i7 = (i4 | 0) < 0 ? i14 : i4;
      i7 = _fmt_u(i7, ((i7 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i41 - i7 | 0) < 2) do {
       i7 = i7 + -1 | 0;
       HEAP8[i7 >> 0] = 48;
      } while ((i41 - i7 | 0) < 2);
      HEAP8[i7 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i19 = i7 + -2 | 0;
      HEAP8[i19 >> 0] = i10;
      i4 = i41 - i19 | 0;
      i10 = i19;
     }
     i14 = i21 + 1 + i3 + i8 + i4 | 0;
     _pad(i49, 32, i25, i14, i23);
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i22, i21, i49) | 0;
     _pad(i49, 48, i25, i14, i23 ^ 65536);
     do if (i9) {
      i7 = i12 >>> 0 > i20 >>> 0 ? i20 : i12;
      i4 = i7;
      do {
       i5 = _fmt_u(HEAP32[i4 >> 2] | 0, 0, i32) | 0;
       do if ((i4 | 0) == (i7 | 0)) {
        if ((i5 | 0) != (i32 | 0)) break;
        HEAP8[i34 >> 0] = 48;
        i5 = i34;
       } else {
        if (i5 >>> 0 <= i45 >>> 0) break;
        do {
         i5 = i5 + -1 | 0;
         HEAP8[i5 >> 0] = 48;
        } while (i5 >>> 0 > i45 >>> 0);
       } while (0);
       if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i5, i33 - i5 | 0, i49) | 0;
       i4 = i4 + 4 | 0;
      } while (i4 >>> 0 <= i20 >>> 0);
      do if (i13) {
       if (HEAP32[i49 >> 2] & 32) break;
       ___fwritex(34795, 1, i49) | 0;
      } while (0);
      if ((i3 | 0) > 0 & i4 >>> 0 < i18 >>> 0) {
       i5 = i4;
       while (1) {
        i4 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i32) | 0;
        if (i4 >>> 0 > i45 >>> 0) do {
         i4 = i4 + -1 | 0;
         HEAP8[i4 >> 0] = 48;
        } while (i4 >>> 0 > i45 >>> 0);
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > 9 ? 9 : i3, i49) | 0;
        i5 = i5 + 4 | 0;
        i4 = i3 + -9 | 0;
        if (!((i3 | 0) > 9 & i5 >>> 0 < i18 >>> 0)) {
         i3 = i4;
         break;
        } else i3 = i4;
       }
      }
      _pad(i49, 48, i3 + 9 | 0, 9, 0);
     } else {
      i9 = i15 ? i18 : i12 + 4 | 0;
      if ((i3 | 0) > -1) {
       i8 = (i5 | 0) == 0;
       i7 = i12;
       do {
        i4 = _fmt_u(HEAP32[i7 >> 2] | 0, 0, i32) | 0;
        if ((i4 | 0) == (i32 | 0)) {
         HEAP8[i34 >> 0] = 48;
         i4 = i34;
        }
        do if ((i7 | 0) == (i12 | 0)) {
         i5 = i4 + 1 | 0;
         if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, 1, i49) | 0;
         if (i8 & (i3 | 0) < 1) {
          i4 = i5;
          break;
         }
         if (HEAP32[i49 >> 2] & 32) {
          i4 = i5;
          break;
         }
         ___fwritex(34795, 1, i49) | 0;
         i4 = i5;
        } else {
         if (i4 >>> 0 <= i45 >>> 0) break;
         do {
          i4 = i4 + -1 | 0;
          HEAP8[i4 >> 0] = 48;
         } while (i4 >>> 0 > i45 >>> 0);
        } while (0);
        i5 = i33 - i4 | 0;
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > (i5 | 0) ? i5 : i3, i49) | 0;
        i3 = i3 - i5 | 0;
        i7 = i7 + 4 | 0;
       } while (i7 >>> 0 < i9 >>> 0 & (i3 | 0) > -1);
      }
      _pad(i49, 48, i3 + 18 | 0, 18, 0);
      if (HEAP32[i49 >> 2] & 32) break;
      ___fwritex(i10, i41 - i10 | 0, i49) | 0;
     } while (0);
     _pad(i49, 32, i25, i14, i23 ^ 8192);
     i3 = (i14 | 0) < (i25 | 0) ? i25 : i14;
    } else {
     i9 = (i10 & 32 | 0) != 0;
     i8 = d6 != d6 | 0.0 != 0.0;
     i4 = i8 ? 0 : i21;
     i7 = i4 + 3 | 0;
     _pad(i49, 32, i25, i7, i5);
     i3 = HEAP32[i49 >> 2] | 0;
     if (!(i3 & 32)) {
      ___fwritex(i22, i4, i49) | 0;
      i3 = HEAP32[i49 >> 2] | 0;
     }
     if (!(i3 & 32)) ___fwritex(i8 ? (i9 ? 34787 : 34791) : i9 ? 34779 : 34783, 3, i49) | 0;
     _pad(i49, 32, i25, i7, i23 ^ 8192);
     i3 = (i7 | 0) < (i25 | 0) ? i25 : i7;
    } while (0);
    i12 = i24;
    continue L1;
   }
  default:
   {
    i5 = i23;
    i4 = i7;
    i9 = 0;
    i10 = 34743;
    i3 = i28;
   }
  } while (0);
  L313 : do if ((i26 | 0) == 64) {
   i5 = i43;
   i4 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   i8 = i10 & 32;
   if (!((i4 | 0) == 0 & (i5 | 0) == 0)) {
    i3 = i28;
    do {
     i3 = i3 + -1 | 0;
     HEAP8[i3 >> 0] = HEAPU8[34727 + (i4 & 15) >> 0] | i8;
     i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 4) | 0;
     i5 = tempRet0;
    } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    i26 = i43;
    if ((i9 & 8 | 0) == 0 | (HEAP32[i26 >> 2] | 0) == 0 & (HEAP32[i26 + 4 >> 2] | 0) == 0) {
     i4 = i9;
     i9 = 0;
     i8 = 34743;
     i26 = 77;
    } else {
     i4 = i9;
     i9 = 2;
     i8 = 34743 + (i10 >> 4) | 0;
     i26 = 77;
    }
   } else {
    i3 = i28;
    i4 = i9;
    i9 = 0;
    i8 = 34743;
    i26 = 77;
   }
  } else if ((i26 | 0) == 76) {
   i3 = _fmt_u(i3, i4, i28) | 0;
   i4 = i23;
   i9 = i5;
   i26 = 77;
  } else if ((i26 | 0) == 82) {
   i26 = 0;
   i23 = _memchr(i3, 0, i7) | 0;
   i22 = (i23 | 0) == 0;
   i12 = i3;
   i4 = i22 ? i7 : i23 - i3 | 0;
   i9 = 0;
   i10 = 34743;
   i3 = i22 ? i3 + i7 | 0 : i23;
  } else if ((i26 | 0) == 86) {
   i26 = 0;
   i4 = 0;
   i3 = 0;
   i8 = HEAP32[i43 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i8 >> 2] | 0;
    if (!i5) break;
    i3 = _wctomb(i47, i5) | 0;
    if ((i3 | 0) < 0 | i3 >>> 0 > (i7 - i4 | 0) >>> 0) break;
    i4 = i3 + i4 | 0;
    if (i7 >>> 0 > i4 >>> 0) i8 = i8 + 4 | 0; else break;
   }
   if ((i3 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad(i49, 32, i25, i4, i23);
   if (!i4) {
    i3 = 0;
    i26 = 98;
   } else {
    i5 = 0;
    i7 = HEAP32[i43 >> 2] | 0;
    while (1) {
     i3 = HEAP32[i7 >> 2] | 0;
     if (!i3) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     i3 = _wctomb(i47, i3) | 0;
     i5 = i3 + i5 | 0;
     if ((i5 | 0) > (i4 | 0)) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i47, i3, i49) | 0;
     if (i5 >>> 0 >= i4 >>> 0) {
      i3 = i4;
      i26 = 98;
      break;
     } else i7 = i7 + 4 | 0;
    }
   }
  } while (0);
  if ((i26 | 0) == 98) {
   i26 = 0;
   _pad(i49, 32, i25, i3, i23 ^ 8192);
   i12 = i24;
   i3 = (i25 | 0) > (i3 | 0) ? i25 : i3;
   continue;
  }
  if ((i26 | 0) == 77) {
   i26 = 0;
   i5 = (i7 | 0) > -1 ? i4 & -65537 : i4;
   i4 = i43;
   i4 = (HEAP32[i4 >> 2] | 0) != 0 | (HEAP32[i4 + 4 >> 2] | 0) != 0;
   if ((i7 | 0) != 0 | i4) {
    i4 = (i4 & 1 ^ 1) + (i35 - i3) | 0;
    i12 = i3;
    i4 = (i7 | 0) > (i4 | 0) ? i7 : i4;
    i10 = i8;
    i3 = i28;
   } else {
    i12 = i28;
    i4 = 0;
    i10 = i8;
    i3 = i28;
   }
  }
  i8 = i3 - i12 | 0;
  i4 = (i4 | 0) < (i8 | 0) ? i8 : i4;
  i7 = i9 + i4 | 0;
  i3 = (i25 | 0) < (i7 | 0) ? i7 : i25;
  _pad(i49, 32, i3, i7, i5);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i10, i9, i49) | 0;
  _pad(i49, 48, i3, i7, i5 ^ 65536);
  _pad(i49, 48, i4, i8, 0);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i12, i8, i49) | 0;
  _pad(i49, 32, i3, i7, i5 ^ 8192);
  i12 = i24;
 }
 L348 : do if ((i26 | 0) == 245) if (!i49) if (i2) {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i52 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i51 + (i1 << 3) | 0, i2, i50);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break L348;
   }
  }
  if ((i1 | 0) < 10) while (1) {
   if (HEAP32[i52 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L348;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break;
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 STACKTOP = i53;
 return i1 | 0;
}
function ___floatscan(i24, i2, i21) {
 i24 = i24 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 var d1 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i27 = i31;
 switch (i2 | 0) {
 case 0:
  {
   i30 = 24;
   i29 = -149;
   i19 = 4;
   break;
  }
 case 1:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 case 2:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i19 | 0) == 4) {
  i23 = i24 + 4 | 0;
  i22 = i24 + 100 | 0;
  do {
   i2 = HEAP32[i23 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i23 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i24) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i3 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i23 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
     i28 = i3;
     break L13;
    } else {
     i2 = ___shgetc(i24) | 0;
     i28 = i3;
     break L13;
    }
   }
  default:
   i28 = 1;
  } while (0);
  i3 = i2;
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[31910 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i23 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i24) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i19 = 23;
    break;
   }
  default:
   {
    i5 = (i21 | 0) != 0;
    if (i5 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i19 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[34787 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i24) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i23 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
       HEAP32[i23 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i24) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i22 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i24) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26) ? !((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26) : 0) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i22 >> 2] | 0) == 0;
      if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      if (!i5) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      do if ((i3 | 0) == 48) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 32 | 0) != 120) {
        if (!(HEAP32[i22 >> 2] | 0)) {
         i2 = 48;
         break;
        }
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i2 = 48;
        break;
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 0;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 0;
       }
       L94 : while (1) {
        switch (i2 | 0) {
        case 46:
         {
          i19 = 74;
          break L94;
         }
        case 48:
         break;
        default:
         {
          i17 = 0;
          i6 = 0;
          i16 = 0;
          i3 = 0;
          i8 = i5;
          i9 = 0;
          i15 = 0;
          d7 = 1.0;
          i5 = 0;
          d1 = 0.0;
          break L94;
         }
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
         i5 = 1;
         continue;
        } else {
         i2 = ___shgetc(i24) | 0;
         i5 = 1;
         continue;
        }
       }
       if ((i19 | 0) == 74) {
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        if ((i2 | 0) == 48) {
         i5 = 0;
         i3 = 0;
         do {
          i2 = HEAP32[i23 >> 2] | 0;
          if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
           HEAP32[i23 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i24) | 0;
          i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
          i3 = tempRet0;
         } while ((i2 | 0) == 48);
         i17 = 0;
         i6 = 0;
         i16 = i5;
         i8 = 1;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        } else {
         i17 = 0;
         i6 = 0;
         i16 = 0;
         i3 = 0;
         i8 = i5;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        }
       }
       while (1) {
        i13 = i2 + -48 | 0;
        i10 = i2 | 32;
        if (i13 >>> 0 >= 10) {
         i14 = (i2 | 0) == 46;
         if (!(i14 | (i10 + -97 | 0) >>> 0 < 6)) {
          i10 = i16;
          i13 = i17;
          break;
         }
         if (i14) if (!i9) {
          i14 = i6;
          i3 = i17;
          i13 = i17;
          i9 = 1;
          i10 = i15;
          d4 = d7;
         } else {
          i10 = i16;
          i13 = i17;
          i2 = 46;
          break;
         } else i19 = 86;
        } else i19 = 86;
        if ((i19 | 0) == 86) {
         i19 = 0;
         i2 = (i2 | 0) > 57 ? i10 + -87 | 0 : i13;
         do if (!((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 8)) {
          if ((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 14) {
           d12 = d7 * .0625;
           i10 = i15;
           d4 = d12;
           d1 = d1 + d12 * +(i2 | 0);
           break;
          }
          if ((i15 | 0) != 0 | (i2 | 0) == 0) {
           i10 = i15;
           d4 = d7;
          } else {
           i10 = 1;
           d4 = d7;
           d1 = d1 + d7 * .5;
          }
         } else {
          i10 = i15;
          d4 = d7;
          i5 = i2 + (i5 << 4) | 0;
         } while (0);
         i6 = _i64Add(i6 | 0, i17 | 0, 1, 0) | 0;
         i14 = i16;
         i13 = tempRet0;
         i8 = 1;
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i17 = i13;
         i16 = i14;
         i2 = HEAPU8[i2 >> 0] | 0;
         i15 = i10;
         d7 = d4;
         continue;
        } else {
         i17 = i13;
         i16 = i14;
         i2 = ___shgetc(i24) | 0;
         i15 = i10;
         d7 = d4;
         continue;
        }
       }
       if (!i8) {
        i2 = (HEAP32[i22 >> 2] | 0) == 0;
        if (!i2) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        if (i21) {
         if (!i2 ? (i18 = HEAP32[i23 >> 2] | 0, HEAP32[i23 >> 2] = i18 + -1, (i9 | 0) != 0) : 0) HEAP32[i23 >> 2] = i18 + -2;
        } else ___shlim(i24, 0);
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       i8 = (i9 | 0) == 0;
       i9 = i8 ? i6 : i10;
       i8 = i8 ? i13 : i3;
       if ((i13 | 0) < 0 | (i13 | 0) == 0 & i6 >>> 0 < 8) {
        i3 = i13;
        do {
         i5 = i5 << 4;
         i6 = _i64Add(i6 | 0, i3 | 0, 1, 0) | 0;
         i3 = tempRet0;
        } while ((i3 | 0) < 0 | (i3 | 0) == 0 & i6 >>> 0 < 8);
       }
       if ((i2 | 32 | 0) == 112) {
        i3 = _scanexp(i24, i21) | 0;
        i2 = tempRet0;
        if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
         if (!i21) {
          ___shlim(i24, 0);
          d1 = 0.0;
          break L4;
         }
         if (!(HEAP32[i22 >> 2] | 0)) {
          i3 = 0;
          i2 = 0;
         } else {
          HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
          i3 = 0;
          i2 = 0;
         }
        }
       } else if (!(HEAP32[i22 >> 2] | 0)) {
        i3 = 0;
        i2 = 0;
       } else {
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i3 = 0;
        i2 = 0;
       }
       i27 = _bitshift64Shl(i9 | 0, i8 | 0, 2) | 0;
       i27 = _i64Add(i27 | 0, tempRet0 | 0, -32, -1) | 0;
       i2 = _i64Add(i27 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
       i3 = tempRet0;
       if (!i5) {
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       if ((i3 | 0) > 0 | (i3 | 0) == 0 & i2 >>> 0 > (0 - i29 | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break L4;
       }
       i27 = i29 + -106 | 0;
       i26 = ((i27 | 0) < 0) << 31 >> 31;
       if ((i3 | 0) < (i26 | 0) | (i3 | 0) == (i26 | 0) & i2 >>> 0 < i27 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if ((i5 | 0) > -1) {
        do {
         i26 = !(d1 >= .5);
         i27 = i26 & 1 | i5 << 1;
         i5 = i27 ^ 1;
         d1 = d1 + (i26 ? d1 : d1 + -1.0);
         i2 = _i64Add(i2 | 0, i3 | 0, -1, -1) | 0;
         i3 = tempRet0;
        } while ((i27 | 0) > -1);
        i6 = i2;
        d7 = d1;
       } else {
        i6 = i2;
        d7 = d1;
       }
       i2 = _i64Subtract(32, 0, i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0) | 0;
       i2 = _i64Add(i6 | 0, i3 | 0, i2 | 0, tempRet0 | 0) | 0;
       i29 = tempRet0;
       if (0 > (i29 | 0) | 0 == (i29 | 0) & i30 >>> 0 > i2 >>> 0) if ((i2 | 0) < 0) {
        i2 = 0;
        i19 = 127;
       } else i19 = 125; else {
        i2 = i30;
        i19 = 125;
       }
       if ((i19 | 0) == 125) if ((i2 | 0) < 53) i19 = 127; else {
        i3 = i2;
        d4 = +(i28 | 0);
        d1 = 0.0;
       }
       if ((i19 | 0) == 127) {
        d1 = +(i28 | 0);
        i3 = i2;
        d4 = d1;
        d1 = +_copysignl(+_scalbn(1.0, 84 - i2 | 0), d1);
       }
       i30 = (i5 & 1 | 0) == 0 & (d7 != 0.0 & (i3 | 0) < 32);
       d1 = d4 * (i30 ? 0.0 : d7) + (d1 + d4 * +(((i30 & 1) + i5 | 0) >>> 0)) - d1;
       if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       d1 = +_scalbnl(d1, i6);
       break L4;
      } else i2 = i3; while (0);
      i25 = i29 + i30 | 0;
      i26 = 0 - i25 | 0;
      i5 = 0;
      L184 : while (1) {
       switch (i2 | 0) {
       case 46:
        {
         i19 = 138;
         break L184;
        }
       case 48:
        break;
       default:
        {
         i3 = 0;
         i10 = 0;
         i9 = 0;
         break L184;
        }
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 1;
        continue;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 1;
        continue;
       }
      }
      if ((i19 | 0) == 138) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 0) == 48) {
        i3 = 0;
        i2 = 0;
        while (1) {
         i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
         i5 = tempRet0;
         i2 = HEAP32[i23 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
          HEAP32[i23 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i24) | 0;
         if ((i2 | 0) == 48) i2 = i5; else {
          i10 = i5;
          i5 = 1;
          i9 = 1;
          break;
         }
        }
       } else {
        i3 = 0;
        i10 = 0;
        i9 = 1;
       }
      }
      HEAP32[i27 >> 2] = 0;
      i8 = i2 + -48 | 0;
      i6 = (i2 | 0) == 46;
      L203 : do if (i6 | i8 >>> 0 < 10) {
       i20 = i27 + 496 | 0;
       i17 = 0;
       i14 = 0;
       i15 = i6;
       i19 = i10;
       i13 = i5;
       i18 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       L205 : while (1) {
        do if (i15) if (!i18) {
         i3 = i17;
         i10 = i14;
         i18 = 1;
        } else {
         i10 = i19;
         i2 = i17;
         i8 = i14;
         break L205;
        } else {
         i15 = _i64Add(i17 | 0, i14 | 0, 1, 0) | 0;
         i14 = tempRet0;
         i16 = (i2 | 0) != 48;
         if ((i6 | 0) >= 125) {
          if (!i16) {
           i10 = i19;
           i17 = i15;
           break;
          }
          HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
          i10 = i19;
          i17 = i15;
          break;
         }
         i10 = i27 + (i6 << 2) | 0;
         if (i5) i8 = i2 + -48 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[i10 >> 2] = i8;
         i5 = i5 + 1 | 0;
         i8 = (i5 | 0) == 9;
         i10 = i19;
         i17 = i15;
         i13 = 1;
         i5 = i8 ? 0 : i5;
         i6 = (i8 & 1) + i6 | 0;
         i9 = i16 ? i15 : i9;
        } while (0);
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        i8 = i2 + -48 | 0;
        i15 = (i2 | 0) == 46;
        if (!(i15 | i8 >>> 0 < 10)) {
         i8 = i18;
         i19 = 161;
         break L203;
        } else i19 = i10;
       }
       i13 = (i13 | 0) != 0;
       i19 = 169;
      } else {
       i17 = 0;
       i14 = 0;
       i13 = i5;
       i8 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       i19 = 161;
      } while (0);
      do if ((i19 | 0) == 161) {
       i20 = (i8 | 0) == 0;
       i3 = i20 ? i17 : i3;
       i10 = i20 ? i14 : i10;
       i13 = (i13 | 0) != 0;
       if (!((i2 | 32 | 0) == 101 & i13)) if ((i2 | 0) > -1) {
        i2 = i17;
        i8 = i14;
        i19 = 169;
        break;
       } else {
        i2 = i17;
        i8 = i14;
        i19 = 171;
        break;
       }
       i8 = _scanexp(i24, i21) | 0;
       i2 = tempRet0;
       if ((i8 | 0) == 0 & (i2 | 0) == -2147483648) {
        if (!i21) {
         ___shlim(i24, 0);
         d1 = 0.0;
         break;
        }
        if (!(HEAP32[i22 >> 2] | 0)) {
         i8 = 0;
         i2 = 0;
        } else {
         HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
         i8 = 0;
         i2 = 0;
        }
       }
       i3 = _i64Add(i8 | 0, i2 | 0, i3 | 0, i10 | 0) | 0;
       i13 = i17;
       i10 = tempRet0;
       i8 = i14;
       i19 = 173;
      } while (0);
      if ((i19 | 0) == 169) if (HEAP32[i22 >> 2] | 0) {
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (i13) {
        i13 = i2;
        i19 = 173;
       } else i19 = 172;
      } else i19 = 171;
      if ((i19 | 0) == 171) if (i13) {
       i13 = i2;
       i19 = 173;
      } else i19 = 172;
      do if ((i19 | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
      } else if ((i19 | 0) == 173) {
       i2 = HEAP32[i27 >> 2] | 0;
       if (!i2) {
        d1 = +(i28 | 0) * 0.0;
        break;
       }
       if (((i8 | 0) < 0 | (i8 | 0) == 0 & i13 >>> 0 < 10) & ((i3 | 0) == (i13 | 0) & (i10 | 0) == (i8 | 0)) ? i30 >>> 0 > 30 | (i2 >>> i30 | 0) == 0 : 0) {
        d1 = +(i28 | 0) * +(i2 >>> 0);
        break;
       }
       i24 = (i29 | 0) / -2 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) > (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 > i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break;
       }
       i24 = i29 + -106 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) < (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 < i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (i5) {
        if ((i5 | 0) < 9) {
         i8 = i27 + (i6 << 2) | 0;
         i2 = HEAP32[i8 >> 2] | 0;
         do {
          i2 = i2 * 10 | 0;
          i5 = i5 + 1 | 0;
         } while ((i5 | 0) != 9);
         HEAP32[i8 >> 2] = i2;
        }
        i6 = i6 + 1 | 0;
       }
       if ((i9 | 0) < 9 ? (i9 | 0) <= (i3 | 0) & (i3 | 0) < 18 : 0) {
        if ((i3 | 0) == 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
         break;
        }
        if ((i3 | 0) < 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[9316 + (8 - i3 << 2) >> 2] | 0);
         break;
        }
        i24 = i30 + 27 + (Math_imul(i3, -3) | 0) | 0;
        i2 = HEAP32[i27 >> 2] | 0;
        if ((i24 | 0) > 30 | (i2 >>> i24 | 0) == 0) {
         d1 = +(i28 | 0) * +(i2 >>> 0) * +(HEAP32[9316 + (i3 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       i2 = (i3 | 0) % 9 | 0;
       if (!i2) {
        i5 = 0;
        i2 = 0;
       } else {
        i13 = (i3 | 0) > -1 ? i2 : i2 + 9 | 0;
        i8 = HEAP32[9316 + (8 - i13 << 2) >> 2] | 0;
        if (i6) {
         i9 = 1e9 / (i8 | 0) | 0;
         i5 = 0;
         i2 = 0;
         i10 = 0;
         do {
          i22 = i27 + (i10 << 2) | 0;
          i23 = HEAP32[i22 >> 2] | 0;
          i24 = ((i23 >>> 0) / (i8 >>> 0) | 0) + i2 | 0;
          HEAP32[i22 >> 2] = i24;
          i2 = Math_imul((i23 >>> 0) % (i8 >>> 0) | 0, i9) | 0;
          i24 = (i10 | 0) == (i5 | 0) & (i24 | 0) == 0;
          i10 = i10 + 1 | 0;
          i3 = i24 ? i3 + -9 | 0 : i3;
          i5 = i24 ? i10 & 127 : i5;
         } while ((i10 | 0) != (i6 | 0));
         if (i2) {
          HEAP32[i27 + (i6 << 2) >> 2] = i2;
          i6 = i6 + 1 | 0;
         }
        } else {
         i5 = 0;
         i6 = 0;
        }
        i2 = 0;
        i3 = 9 - i13 + i3 | 0;
       }
       L284 : while (1) {
        i14 = (i3 | 0) < 18;
        i15 = (i3 | 0) == 18;
        i16 = i27 + (i5 << 2) | 0;
        do {
         if (!i14) {
          if (!i15) break L284;
          if ((HEAP32[i16 >> 2] | 0) >>> 0 >= 9007199) {
           i3 = 18;
           break L284;
          }
         }
         i8 = 0;
         i9 = i6 + 127 | 0;
         while (1) {
          i13 = i9 & 127;
          i10 = i27 + (i13 << 2) | 0;
          i9 = _bitshift64Shl(HEAP32[i10 >> 2] | 0, 0, 29) | 0;
          i9 = _i64Add(i9 | 0, tempRet0 | 0, i8 | 0, 0) | 0;
          i8 = tempRet0;
          if (i8 >>> 0 > 0 | (i8 | 0) == 0 & i9 >>> 0 > 1e9) {
           i24 = ___udivdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i9 = ___uremdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i8 = i24;
          } else i8 = 0;
          HEAP32[i10 >> 2] = i9;
          i24 = (i13 | 0) == (i5 | 0);
          i6 = (i13 | 0) != (i6 + 127 & 127 | 0) | i24 ? i6 : (i9 | 0) == 0 ? i13 : i6;
          if (i24) break; else i9 = i13 + -1 | 0;
         }
         i2 = i2 + -29 | 0;
        } while ((i8 | 0) == 0);
        i5 = i5 + 127 & 127;
        if ((i5 | 0) == (i6 | 0)) {
         i24 = i6 + 127 & 127;
         i6 = i27 + ((i6 + 126 & 127) << 2) | 0;
         HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | HEAP32[i27 + (i24 << 2) >> 2];
         i6 = i24;
        }
        HEAP32[i27 + (i5 << 2) >> 2] = i8;
        i3 = i3 + 9 | 0;
       }
       L302 : while (1) {
        i17 = i6 + 1 & 127;
        i16 = i27 + ((i6 + 127 & 127) << 2) | 0;
        while (1) {
         i14 = (i3 | 0) == 18;
         i15 = (i3 | 0) > 27 ? 9 : 1;
         i13 = i14 ^ 1;
         while (1) {
          i9 = i5 & 127;
          i10 = (i9 | 0) == (i6 | 0);
          do if (!i10) {
           i8 = HEAP32[i27 + (i9 << 2) >> 2] | 0;
           if (i8 >>> 0 < 9007199) {
            i19 = 219;
            break;
           }
           if (i8 >>> 0 > 9007199) break;
           i8 = i5 + 1 & 127;
           if ((i8 | 0) == (i6 | 0)) {
            i19 = 219;
            break;
           }
           i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
           if (i8 >>> 0 < 254740991) {
            i19 = 219;
            break;
           }
           if (!(i8 >>> 0 > 254740991 | i13)) {
            i3 = i9;
            break L302;
           }
          } else i19 = 219; while (0);
          if ((i19 | 0) == 219 ? (i19 = 0, i14) : 0) {
           i19 = 220;
           break L302;
          }
          i2 = i2 + i15 | 0;
          if ((i5 | 0) == (i6 | 0)) i5 = i6; else break;
         }
         i13 = (1 << i15) + -1 | 0;
         i14 = 1e9 >>> i15;
         i9 = i5;
         i8 = 0;
         i10 = i5;
         while (1) {
          i23 = i27 + (i10 << 2) | 0;
          i24 = HEAP32[i23 >> 2] | 0;
          i5 = (i24 >>> i15) + i8 | 0;
          HEAP32[i23 >> 2] = i5;
          i8 = Math_imul(i24 & i13, i14) | 0;
          i5 = (i10 | 0) == (i9 | 0) & (i5 | 0) == 0;
          i10 = i10 + 1 & 127;
          i3 = i5 ? i3 + -9 | 0 : i3;
          i5 = i5 ? i10 : i9;
          if ((i10 | 0) == (i6 | 0)) break; else i9 = i5;
         }
         if (!i8) continue;
         if ((i17 | 0) != (i5 | 0)) break;
         HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1;
        }
        HEAP32[i27 + (i6 << 2) >> 2] = i8;
        i6 = i17;
       }
       if ((i19 | 0) == 220) if (i10) {
        HEAP32[i27 + (i17 + -1 << 2) >> 2] = 0;
        i3 = i6;
        i6 = i17;
       } else i3 = i9;
       d1 = +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0);
       i3 = i5 + 1 & 127;
       if ((i3 | 0) == (i6 | 0)) {
        i6 = i5 + 2 & 127;
        HEAP32[i27 + (i6 + -1 << 2) >> 2] = 0;
       }
       d12 = +(i28 | 0);
       d4 = d12 * (d1 * 1.0e9 + +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0));
       i14 = i2 + 53 | 0;
       i10 = i14 - i29 | 0;
       i13 = (i10 | 0) < (i30 | 0);
       i3 = i13 & 1;
       i9 = i13 ? ((i10 | 0) < 0 ? 0 : i10) : i30;
       if ((i9 | 0) < 53) {
        d32 = +_copysignl(+_scalbn(1.0, 105 - i9 | 0), d4);
        d7 = +_fmodl(d4, +_scalbn(1.0, 53 - i9 | 0));
        d11 = d32;
        d1 = d7;
        d7 = d32 + (d4 - d7);
       } else {
        d11 = 0.0;
        d1 = 0.0;
        d7 = d4;
       }
       i8 = i5 + 2 & 127;
       do if ((i8 | 0) == (i6 | 0)) d4 = d1; else {
        i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
        do if (i8 >>> 0 >= 5e8) {
         if (i8 >>> 0 > 5e8) {
          d1 = d12 * .75 + d1;
          break;
         }
         if ((i5 + 3 & 127 | 0) == (i6 | 0)) {
          d1 = d12 * .5 + d1;
          break;
         } else {
          d1 = d12 * .75 + d1;
          break;
         }
        } else {
         if ((i8 | 0) == 0 ? (i5 + 3 & 127 | 0) == (i6 | 0) : 0) break;
         d1 = d12 * .25 + d1;
        } while (0);
        if ((53 - i9 | 0) <= 1) {
         d4 = d1;
         break;
        }
        if (+_fmodl(d1, 1.0) != 0.0) {
         d4 = d1;
         break;
        }
        d4 = d1 + 1.0;
       } while (0);
       d1 = d7 + d4 - d11;
       do if ((i14 & 2147483647 | 0) > (-2 - i25 | 0)) {
        if (+Math_abs(+d1) >= 9007199254740992.0) {
         i3 = i13 & (i9 | 0) == (i10 | 0) ? 0 : i3;
         i2 = i2 + 1 | 0;
         d1 = d1 * .5;
        }
        if ((i2 + 50 | 0) <= (i26 | 0) ? !(d4 != 0.0 & (i3 | 0) != 0) : 0) break;
        HEAP32[(___errno_location() | 0) >> 2] = 34;
       } while (0);
       d1 = +_scalbnl(d1, i2);
      } while (0);
      break L4;
     }
    default:
     {
      if (HEAP32[i22 >> 2] | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i24, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i19 | 0) == 23) {
   i3 = (HEAP32[i22 >> 2] | 0) == 0;
   if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
   if ((i21 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +(i28 | 0) * inf;
 } while (0);
 STACKTOP = i31;
 return +d1;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i37, i38, i2, i3, i4, i39, i31, i26, i34, i35, i1) {
 i37 = i37 | 0;
 i38 = i38 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i39 = i39 | 0;
 i31 = i31 | 0;
 i26 = i26 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, i36 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i25 = i48 + 496 | 0;
 i8 = i48 + 96 | 0;
 i47 = i48 + 88 | 0;
 i30 = i48 + 80 | 0;
 i29 = i48 + 76 | 0;
 i32 = i48 + 500 | 0;
 i27 = i48 + 72 | 0;
 i33 = i48 + 68 | 0;
 i42 = i48 + 56 | 0;
 i46 = i48 + 44 | 0;
 i44 = i48 + 32 | 0;
 i43 = i48 + 20 | 0;
 i45 = i48 + 8 | 0;
 i28 = i48 + 4 | 0;
 i40 = i48;
 HEAP32[i25 >> 2] = i1;
 HEAP32[i47 >> 2] = i8;
 i41 = i47 + 4 | 0;
 HEAP32[i41 >> 2] = 164;
 HEAP32[i30 >> 2] = i8;
 HEAP32[i29 >> 2] = i8 + 400;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i2, i3, i32, i27, i33, i42, i46, i44, i43, i28);
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 i21 = i44 + 4 | 0;
 i22 = i43 + 4 | 0;
 i23 = i43 + 8 | 0;
 i24 = i44 + 8 | 0;
 i13 = (i4 & 512 | 0) != 0;
 i14 = i46 + 8 | 0;
 i15 = i46 + 4 | 0;
 i16 = i45 + 4 | 0;
 i17 = i45 + 8 | 0;
 i18 = i32 + 3 | 0;
 i19 = i42 + 4 | 0;
 i20 = 0;
 i7 = 0;
 L1 : while (1) {
  i1 = HEAP32[i37 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i37 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i37 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i38 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i12 = i2;
    break;
   } else {
    i36 = 217;
    break L1;
   } else {
    HEAP32[i38 >> 2] = 0;
    i36 = 15;
    break;
   }
  } else i36 = 15; while (0);
  if ((i36 | 0) == 15) {
   i36 = 0;
   if (i3) {
    i36 = 217;
    break;
   } else i12 = 0;
  }
  L25 : do switch (HEAP8[i32 + i20 >> 0] | 0) {
  case 1:
   {
    if ((i20 | 0) != 3) {
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, i1) | 0)) {
      i36 = 28;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      i1 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 0:
   {
    if ((i20 | 0) != 3) {
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 3:
   {
    i5 = HEAP8[i44 >> 0] | 0;
    i1 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i21 >> 2] | 0;
    i3 = HEAP8[i43 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i22 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i4 = (i1 | 0) == 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i9 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i9 | 0) == (i1 | 0);
     if (i4 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i9 >> 2] | 0;
      if (i4) {
       if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) break L25;
       i1 = HEAP32[i37 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
       HEAP8[i31 >> 0] = 1;
       i12 = HEAP8[i43 >> 0] | 0;
       i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
       break L25;
      }
      if ((i1 | 0) != (HEAP32[((HEAP8[i44 >> 0] & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
       HEAP8[i31 >> 0] = 1;
       break L25;
      }
      i1 = HEAP32[i37 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i2) {
      i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i37 >> 2] | 0;
      i5 = HEAP8[i44 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i4 = HEAP32[i9 >> 2] | 0;
      i3 = i9;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i4 | 0) == (HEAP32[((i5 & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i3 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) {
      i36 = 86;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     HEAP8[i31 >> 0] = 1;
     i12 = HEAP8[i43 >> 0] | 0;
     i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
    }
    break;
   }
  case 2:
   {
    if (!(i20 >>> 0 < 2 | (i7 | 0) != 0) ? !(i13 | (i20 | 0) == 2 & (HEAP8[i18 >> 0] | 0) != 0) : 0) {
     i7 = 0;
     break L25;
    }
    i4 = HEAP8[i46 >> 0] | 0;
    i3 = HEAP32[i14 >> 2] | 0;
    i2 = (i4 & 1) == 0 ? i15 : i3;
    i1 = i2;
    L86 : do if ((i20 | 0) != 0 ? (HEAPU8[i32 + (i20 + -1) >> 0] | 0) < 2 : 0) {
     i11 = (i4 & 1) == 0;
     L89 : do if ((i2 | 0) != ((i11 ? i15 : i3) + ((i11 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
      i4 = i2;
      while (1) {
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, HEAP32[i4 >> 2] | 0) | 0)) break;
       i4 = i4 + 4 | 0;
       i1 = i4;
       i2 = HEAP8[i46 >> 0] | 0;
       i3 = HEAP32[i14 >> 2] | 0;
       i11 = (i2 & 1) == 0;
       if ((i4 | 0) == ((i11 ? i15 : i3) + ((i11 ? (i2 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
        i4 = i2;
        break L89;
       }
      }
      i4 = HEAP8[i46 >> 0] | 0;
      i3 = HEAP32[i14 >> 2] | 0;
     } while (0);
     i6 = (i4 & 1) == 0 ? i15 : i3;
     i2 = i6;
     i9 = i1 - i2 >> 2;
     i10 = HEAP8[i45 >> 0] | 0;
     i5 = (i10 & 1) == 0;
     i10 = i5 ? (i10 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     if (i10 >>> 0 >= i9 >>> 0) {
      i5 = i5 ? i16 : HEAP32[i17 >> 2] | 0;
      i11 = i5 + (i10 << 2) | 0;
      if (!i9) i2 = i1; else {
       i5 = i5 + (i10 - i9 << 2) | 0;
       while (1) {
        if ((HEAP32[i5 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break L86;
        i5 = i5 + 4 | 0;
        if ((i5 | 0) == (i11 | 0)) {
         i2 = i1;
         break;
        } else i6 = i6 + 4 | 0;
       }
      }
     }
    } else i2 = i1; while (0);
    i1 = (i4 & 1) == 0;
    i1 = (i1 ? i15 : i3) + ((i1 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
    L101 : do if ((i2 | 0) != (i1 | 0)) {
     i5 = i12;
     i4 = i12;
     i1 = i2;
     while (1) {
      i2 = HEAP32[i37 >> 2] | 0;
      do if (i2) {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if ((i2 | 0) == -1) {
        HEAP32[i37 >> 2] = 0;
        i3 = 1;
        break;
       } else {
        i3 = (HEAP32[i37 >> 2] | 0) == 0;
        break;
       }
      } else i3 = 1; while (0);
      do if (i4) {
       i2 = HEAP32[i4 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
       if ((i2 | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L101; else {
        HEAP32[i38 >> 2] = 0;
        i2 = 0;
        i36 = 114;
        break;
       }
      } else {
       i2 = i5;
       i36 = 114;
      } while (0);
      if ((i36 | 0) == 114) {
       i36 = 0;
       if (i3) break L101; else i6 = 0;
      }
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) != (HEAP32[i1 >> 2] | 0)) break L101;
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
      i1 = i1 + 4 | 0;
      i3 = HEAP8[i46 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + ((i12 ? (i3 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i46 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + ((i11 ? (i12 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) : 0) {
     i36 = 126;
     break L1;
    }
    break;
   }
  case 4:
   {
    i9 = HEAP32[i33 >> 2] | 0;
    i4 = i12;
    i5 = i12;
    i1 = 0;
    L138 : while (1) {
     i2 = HEAP32[i37 >> 2] | 0;
     do if (i2) {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i3 = 1; while (0);
     do if (i5) {
      i2 = HEAP32[i5 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i2 = HEAP32[i2 >> 2] | 0;
      if ((i2 | 0) != -1) if (i3 ^ (i4 | 0) == 0) {
       i2 = i4;
       i6 = i4;
       break;
      } else break L138; else {
       HEAP32[i38 >> 2] = 0;
       i2 = 0;
       i36 = 140;
       break;
      }
     } else {
      i2 = i4;
      i36 = 140;
     } while (0);
     if ((i36 | 0) == 140) {
      i36 = 0;
      if (i3) {
       i4 = i2;
       break;
      } else i6 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 2048, i4) | 0) {
      i3 = HEAP32[i35 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i25 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i3 = HEAP32[i35 >> 2] | 0;
      }
      HEAP32[i35 >> 2] = i3 + 4;
      HEAP32[i3 >> 2] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i42 >> 0] | 0;
      if (!((i4 | 0) == (i9 | 0) & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i19 >> 2] | 0) | 0) != 0 : 0))) {
       i4 = i2;
       break;
      }
      if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
       i8 = HEAP32[i30 >> 2] | 0;
      }
      i12 = i8 + 4 | 0;
      HEAP32[i30 >> 2] = i12;
      HEAP32[i8 >> 2] = i1;
      i8 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i4 = i2;
      i5 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 4;
      i4 = i2;
      i5 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i47 >> 2] | 0) != (i8 | 0) : 0) {
     if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
      i8 = HEAP32[i30 >> 2] | 0;
     }
     i12 = i8 + 4 | 0;
     HEAP32[i30 >> 2] = i12;
     HEAP32[i8 >> 2] = i1;
     i8 = i12;
    }
    i6 = HEAP32[i28 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i37 >> 2] | 0;
     do if (i1) {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
      if ((i1 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i2 = 1; while (0);
     do if (i4) {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 | 0) != -1) if (i2) break; else {
       i36 = 180;
       break L1;
      } else {
       HEAP32[i38 >> 2] = 0;
       i36 = 174;
       break;
      }
     } else i36 = 174; while (0);
     if ((i36 | 0) == 174) {
      i36 = 0;
      if (i2) {
       i36 = 180;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[i27 >> 2] | 0)) {
      i36 = 180;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      i9 = i6;
      while (1) {
       i1 = HEAP32[i37 >> 2] | 0;
       do if (i1) {
        i2 = HEAP32[i1 + 12 >> 2] | 0;
        if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
        if ((i1 | 0) == -1) {
         HEAP32[i37 >> 2] = 0;
         i2 = 1;
         break;
        } else {
         i2 = (HEAP32[i37 >> 2] | 0) == 0;
         break;
        }
       } else i2 = 1; while (0);
       do if (i3) {
        i1 = HEAP32[i3 + 12 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
        if ((i1 | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i6 = i5;
         break;
        } else {
         i36 = 204;
         break L1;
        } else {
         HEAP32[i38 >> 2] = 0;
         i1 = 0;
         i36 = 198;
         break;
        }
       } else {
        i1 = i5;
        i36 = 198;
       } while (0);
       if ((i36 | 0) == 198) {
        i36 = 0;
        if (i2) {
         i36 = 204;
         break L1;
        } else i6 = 0;
       }
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 2048, i2) | 0)) {
        i36 = 204;
        break L1;
       }
       if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i25 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       i3 = HEAP32[i35 >> 2] | 0;
       HEAP32[i35 >> 2] = i3 + 4;
       HEAP32[i3 >> 2] = i2;
       i2 = i9;
       i9 = i9 + -1 | 0;
       HEAP32[i28 >> 2] = i9;
       i3 = HEAP32[i37 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i6;
       }
      }
     }
    }
    if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
     i36 = 215;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L261 : do if ((i36 | 0) == 30) while (1) {
   i36 = 0;
   i2 = HEAP32[i37 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i37 >> 2] = 0;
     i3 = 1;
     break;
    } else {
     i3 = (HEAP32[i37 >> 2] | 0) == 0;
     break;
    }
   } else i3 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) != -1) if (i3 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L261; else {
     HEAP32[i38 >> 2] = 0;
     i1 = 0;
     i36 = 43;
     break;
    }
   } else i36 = 43; while (0);
   if ((i36 | 0) == 43) {
    i36 = 0;
    if (i3) break L261; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, i1) | 0)) break L261;
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 4;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
   i1 = i5;
   i36 = 30;
  } while (0);
  i20 = i20 + 1 | 0;
  if (i20 >>> 0 >= 4) {
   i36 = 217;
   break;
  }
 }
 L296 : do if ((i36 | 0) == 28) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 86) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 126) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 180) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 204) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 215) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 217) {
  L298 : do if (i7) {
   i5 = i7 + 4 | 0;
   i6 = i7 + 8 | 0;
   i4 = 1;
   L300 : while (1) {
    i1 = HEAP8[i7 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 >> 2] | 0;
    if (i4 >>> 0 >= i1 >>> 0) break L298;
    i1 = HEAP32[i37 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) == -1) {
      HEAP32[i37 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i37 >> 2] | 0) == 0;
      break;
     }
    } else i3 = 1; while (0);
    i1 = HEAP32[i38 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != -1) if (i3) break; else break L300; else {
      HEAP32[i38 >> 2] = 0;
      i36 = 236;
      break;
     }
    } else i36 = 236; while (0);
    if ((i36 | 0) == 236 ? (i36 = 0, i3) : 0) break;
    i1 = HEAP32[i37 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
    if (!(HEAP8[i7 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 | 0) != (HEAP32[i2 + (i4 << 2) >> 2] | 0)) break;
    i1 = i4 + 1 | 0;
    i2 = HEAP32[i37 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i4 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     i4 = i1;
     continue;
    }
   }
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
   break L296;
  } while (0);
  i1 = HEAP32[i47 >> 2] | 0;
  if ((i1 | 0) != (i8 | 0) ? (HEAP32[i40 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i42, i1, i8, i40), (HEAP32[i40 >> 2] | 0) != 0) : 0) {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i45);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i43);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i44);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i46);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i42);
 i1 = HEAP32[i47 >> 2] | 0;
 HEAP32[i47 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i41 >> 2] & 255](i1);
 STACKTOP = i48;
 return i2 | 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i41, i42, i3, i4, i5, i43, i35, i2, i38, i39, i1) {
 i41 = i41 | 0;
 i42 = i42 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i43 = i43 | 0;
 i35 = i35 | 0;
 i2 = i2 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i40 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i52 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i30 = i52 + 88 | 0;
 i9 = i52 + 96 | 0;
 i51 = i52 + 80 | 0;
 i34 = i52 + 72 | 0;
 i33 = i52 + 68 | 0;
 i36 = i52 + 500 | 0;
 i31 = i52 + 497 | 0;
 i37 = i52 + 496 | 0;
 i46 = i52 + 56 | 0;
 i50 = i52 + 44 | 0;
 i48 = i52 + 32 | 0;
 i47 = i52 + 20 | 0;
 i49 = i52 + 8 | 0;
 i32 = i52 + 4 | 0;
 i44 = i52;
 HEAP32[i30 >> 2] = i1;
 HEAP32[i51 >> 2] = i9;
 i45 = i51 + 4 | 0;
 HEAP32[i45 >> 2] = 164;
 HEAP32[i34 >> 2] = i9;
 HEAP32[i33 >> 2] = i9 + 400;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 HEAP32[i50 + 4 >> 2] = 0;
 HEAP32[i50 + 8 >> 2] = 0;
 HEAP32[i48 >> 2] = 0;
 HEAP32[i48 + 4 >> 2] = 0;
 HEAP32[i48 + 8 >> 2] = 0;
 HEAP32[i47 >> 2] = 0;
 HEAP32[i47 + 4 >> 2] = 0;
 HEAP32[i47 + 8 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i49 + 4 >> 2] = 0;
 HEAP32[i49 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i3, i4, i36, i31, i37, i46, i50, i48, i47, i32);
 HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
 i23 = i2 + 8 | 0;
 i24 = i48 + 4 | 0;
 i25 = i47 + 4 | 0;
 i26 = i47 + 8 | 0;
 i27 = i47 + 1 | 0;
 i28 = i48 + 8 | 0;
 i29 = i48 + 1 | 0;
 i13 = (i5 & 512 | 0) != 0;
 i14 = i50 + 8 | 0;
 i15 = i50 + 1 | 0;
 i16 = i50 + 4 | 0;
 i17 = i49 + 4 | 0;
 i18 = i49 + 8 | 0;
 i19 = i49 + 1 | 0;
 i20 = i36 + 3 | 0;
 i21 = i46 + 4 | 0;
 i22 = 0;
 i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i41 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i41 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i41 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i42 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else {
    i40 = 202;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else {
    i40 = 202;
    break L1;
   } else {
    HEAP32[i42 >> 2] = 0;
    i40 = 12;
    break;
   }
  } else i40 = 12; while (0);
  if ((i40 | 0) == 12) {
   i40 = 0;
   if (i1) {
    i40 = 202;
    break;
   } else i2 = 0;
  }
  L21 : do switch (HEAP8[i36 + i22 >> 0] | 0) {
  case 1:
   {
    if ((i22 | 0) != 3) {
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i40 = 26;
      break L1;
     }
     if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i40 = 26;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = i1 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i3 >> 2] = i4 + 1;
      i1 = HEAPU8[i4 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 0:
   {
    if ((i22 | 0) != 3) {
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 3:
   {
    i4 = HEAP8[i48 >> 0] | 0;
    i1 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i24 >> 2] | 0;
    i3 = HEAP8[i47 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i25 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i5 = (i1 | 0) == 0;
     i6 = HEAP32[i41 >> 2] | 0;
     i7 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i7 | 0) == (i1 | 0);
     if (i5 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i7 >> 0] | 0;
      i1 = i1 & 255;
      if (i5) {
       if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) break L21;
       i1 = HEAP32[i41 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
       HEAP8[i35 >> 0] = 1;
       i12 = HEAP8[i47 >> 0] | 0;
       i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
       break L21;
      }
      if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i48 >> 0] & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
       HEAP8[i35 >> 0] = 1;
       break L21;
      }
      i1 = HEAP32[i41 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i2) {
      i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP8[i48 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i5 = HEAPU8[i7 >> 0] | 0;
      i3 = i7;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i5 & 255) << 24 >> 24 == (HEAP8[((i4 & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) {
      i40 = 82;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     HEAP8[i35 >> 0] = 1;
     i12 = HEAP8[i47 >> 0] | 0;
     i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
    }
    break;
   }
  case 2:
   {
    if (!(i22 >>> 0 < 2 | (i8 | 0) != 0) ? !(i13 | (i22 | 0) == 2 & (HEAP8[i20 >> 0] | 0) != 0) : 0) {
     i8 = 0;
     break L21;
    }
    i11 = HEAP8[i50 >> 0] | 0;
    i1 = (i11 & 1) == 0;
    i12 = HEAP32[i14 >> 2] | 0;
    i4 = i1 ? i15 : i12;
    i10 = i4;
    L83 : do if ((i22 | 0) != 0 ? (HEAPU8[i36 + (i22 + -1) >> 0] | 0) < 2 : 0) {
     i7 = i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     i5 = i4 + i7 | 0;
     i6 = HEAP32[i23 >> 2] | 0;
     L86 : do if (!i7) i3 = i10; else {
      i7 = i4;
      i3 = i10;
      do {
       i1 = HEAP8[i7 >> 0] | 0;
       if (i1 << 24 >> 24 <= -1) break L86;
       if (!(HEAP16[i6 + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L86;
       i7 = i7 + 1 | 0;
       i3 = i7;
      } while ((i7 | 0) != (i5 | 0));
     } while (0);
     i5 = i3 - i10 | 0;
     i6 = HEAP8[i49 >> 0] | 0;
     i1 = (i6 & 1) == 0;
     i6 = i1 ? (i6 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
     if (i6 >>> 0 >= i5 >>> 0) {
      i1 = i1 ? i19 : HEAP32[i18 >> 2] | 0;
      i7 = i1 + i6 | 0;
      if ((i3 | 0) != (i10 | 0)) {
       i1 = i1 + (i6 - i5) | 0;
       while (1) {
        if ((HEAP8[i1 >> 0] | 0) != (HEAP8[i4 >> 0] | 0)) {
         i3 = i10;
         break L83;
        }
        i1 = i1 + 1 | 0;
        if ((i1 | 0) == (i7 | 0)) break; else i4 = i4 + 1 | 0;
       }
      }
     } else i3 = i10;
    } else i3 = i10; while (0);
    i1 = (i11 & 1) == 0;
    i1 = (i1 ? i15 : i12) + (i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
    L98 : do if ((i3 | 0) != (i1 | 0)) {
     i5 = i2;
     i4 = i2;
     i1 = i3;
     while (1) {
      i2 = HEAP32[i41 >> 2] | 0;
      do if (i2) {
       if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
        HEAP32[i41 >> 2] = 0;
        i2 = 0;
        break;
       } else {
        i2 = HEAP32[i41 >> 2] | 0;
        break;
       }
      } else i2 = 0; while (0);
      i3 = (i2 | 0) == 0;
      do if (i4) {
       if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
        i2 = i5;
        i6 = i4;
        break;
       } else break L98;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L98; else {
        HEAP32[i42 >> 2] = 0;
        i2 = 0;
        i40 = 107;
        break;
       }
      } else {
       i2 = i5;
       i40 = 107;
      } while (0);
      if ((i40 | 0) == 107) {
       i40 = 0;
       if (i3) break L98; else i6 = 0;
      }
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 != (HEAP8[i1 >> 0] | 0)) break L98;
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
      i1 = i1 + 1 | 0;
      i3 = HEAP8[i50 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + (i12 ? (i3 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i50 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + (i11 ? (i12 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0)) : 0) {
     i40 = 119;
     break L1;
    }
    break;
   }
  case 4:
   {
    i7 = HEAP8[i37 >> 0] | 0;
    i5 = i2;
    i4 = i2;
    i1 = 0;
    L131 : while (1) {
     i2 = HEAP32[i41 >> 2] | 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i2 = 0;
       break;
      } else {
       i2 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i2 = 0; while (0);
     i3 = (i2 | 0) == 0;
     do if (i4) {
      if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
       i2 = i5;
       i6 = i4;
       break;
      } else {
       i2 = i5;
       break L131;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
       i2 = i5;
       i6 = i5;
       break;
      } else {
       i2 = i5;
       break L131;
      } else {
       HEAP32[i42 >> 2] = 0;
       i2 = 0;
       i40 = 130;
       break;
      }
     } else {
      i2 = i5;
      i40 = 130;
     } while (0);
     if ((i40 | 0) == 130) {
      i40 = 0;
      if (i3) break; else i6 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
     i4 = i3 & 255;
     if (i4 << 24 >> 24 > -1 ? (HEAP16[(HEAP32[i23 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 2048) != 0 : 0) {
      i3 = HEAP32[i39 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i30 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i3 = HEAP32[i39 >> 2] | 0;
      }
      HEAP32[i39 >> 2] = i3 + 1;
      HEAP8[i3 >> 0] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i46 >> 0] | 0;
      if (!(i4 << 24 >> 24 == i7 << 24 >> 24 & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) | 0) != 0 : 0))) break;
      if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
       i9 = HEAP32[i34 >> 2] | 0;
      }
      i12 = i9 + 4 | 0;
      HEAP32[i34 >> 2] = i12;
      HEAP32[i9 >> 2] = i1;
      i9 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i5 = i2;
      i4 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 1;
      i5 = i2;
      i4 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i51 >> 2] | 0) != (i9 | 0) : 0) {
     if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
      i9 = HEAP32[i34 >> 2] | 0;
     }
     i12 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i12;
     HEAP32[i9 >> 2] = i1;
     i9 = i12;
    }
    i6 = HEAP32[i32 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i41 >> 2] | 0;
     do if (i1) {
      if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i1 = 0;
       break;
      } else {
       i1 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i1 = 0; while (0);
     i1 = (i1 | 0) == 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
       HEAP32[i42 >> 2] = 0;
       i40 = 162;
       break;
      }
      if (i1) i4 = i2; else {
       i40 = 167;
       break L1;
      }
     } else i40 = 162; while (0);
     if ((i40 | 0) == 162) {
      i40 = 0;
      if (i1) {
       i40 = 167;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[i31 >> 0] | 0)) {
      i40 = 167;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      while (1) {
       i1 = HEAP32[i41 >> 2] | 0;
       do if (i1) {
        if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
         HEAP32[i41 >> 2] = 0;
         i1 = 0;
         break;
        } else {
         i1 = HEAP32[i41 >> 2] | 0;
         break;
        }
       } else i1 = 0; while (0);
       i2 = (i1 | 0) == 0;
       do if (i3) {
        if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
         i1 = i5;
         i7 = i3;
         break;
        } else {
         i40 = 189;
         break L1;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i7 = i5;
         break;
        } else {
         i40 = 189;
         break L1;
        } else {
         HEAP32[i42 >> 2] = 0;
         i1 = 0;
         i40 = 182;
         break;
        }
       } else {
        i1 = i5;
        i40 = 182;
       } while (0);
       if ((i40 | 0) == 182) {
        i40 = 0;
        if (i2) {
         i40 = 189;
         break L1;
        } else i7 = 0;
       }
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       if ((i2 & 255) << 24 >> 24 <= -1) {
        i40 = 189;
        break L1;
       }
       if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) {
        i40 = 189;
        break L1;
       }
       if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i30 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       i3 = HEAP32[i39 >> 2] | 0;
       HEAP32[i39 >> 2] = i3 + 1;
       HEAP8[i3 >> 0] = i2;
       i2 = i6;
       i6 = i6 + -1 | 0;
       HEAP32[i32 >> 2] = i6;
       i3 = HEAP32[i41 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i7;
       }
      }
     }
    }
    if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i38 >> 2] | 0)) {
     i40 = 200;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L243 : do if ((i40 | 0) == 28) while (1) {
   i40 = 0;
   i2 = HEAP32[i41 >> 2] | 0;
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i41 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i41 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
     i5 = i1;
     i4 = i3;
     break;
    } else break L243;
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L243; else {
     HEAP32[i42 >> 2] = 0;
     i1 = 0;
     i40 = 38;
     break;
    }
   } else i40 = 38; while (0);
   if ((i40 | 0) == 38) {
    i40 = 0;
    if (i2) break L243; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
   if ((i1 & 255) << 24 >> 24 <= -1) break L243;
   if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L243;
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 1;
    i1 = HEAPU8[i3 >> 0] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
   i1 = i5;
   i3 = i4;
   i40 = 28;
  } while (0);
  i22 = i22 + 1 | 0;
  if (i22 >>> 0 >= 4) {
   i40 = 202;
   break;
  }
 }
 L275 : do if ((i40 | 0) == 26) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 82) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 119) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 167) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 189) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 200) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 202) {
  L277 : do if (i8) {
   i5 = i8 + 1 | 0;
   i6 = i8 + 8 | 0;
   i7 = i8 + 4 | 0;
   i3 = 1;
   L279 : while (1) {
    i1 = HEAP8[i8 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i7 >> 2] | 0;
    if (i3 >>> 0 >= i1 >>> 0) break L277;
    i1 = HEAP32[i41 >> 2] | 0;
    do if (i1) {
     if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
      HEAP32[i41 >> 2] = 0;
      i1 = 0;
      break;
     } else {
      i1 = HEAP32[i41 >> 2] | 0;
      break;
     }
    } else i1 = 0; while (0);
    i1 = (i1 | 0) == 0;
    i2 = HEAP32[i42 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
      HEAP32[i42 >> 2] = 0;
      i40 = 218;
      break;
     }
     if (!i1) break L279;
    } else i40 = 218; while (0);
    if ((i40 | 0) == 218 ? (i40 = 0, i1) : 0) break;
    i1 = HEAP32[i41 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
    if (!(HEAP8[i8 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 & 255) << 24 >> 24 != (HEAP8[i2 + i3 >> 0] | 0)) break;
    i1 = i3 + 1 | 0;
    i2 = HEAP32[i41 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i3 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     i3 = i1;
     continue;
    }
   }
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
   break L275;
  } while (0);
  i1 = HEAP32[i51 >> 2] | 0;
  if ((i1 | 0) != (i9 | 0) ? (HEAP32[i44 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i46, i1, i9, i44), (HEAP32[i44 >> 2] | 0) != 0) : 0) {
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i48);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i50);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i46);
 i1 = HEAP32[i51 >> 2] | 0;
 HEAP32[i51 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i45 >> 2] & 255](i1);
 STACKTOP = i52;
 return i2 | 0;
}

function __ZN5Shape8generateEPK10BuildWorld(i38, i6) {
 i38 = i38 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i24 = i43 + 72 | 0;
 i21 = i43 + 48 | 0;
 i42 = i43 + 36 | 0;
 i41 = i43 + 24 | 0;
 i40 = i43 + 12 | 0;
 i39 = i43;
 HEAP32[i24 >> 2] = -1;
 i4 = i38 + 88 | 0;
 if ((HEAP32[i4 >> 2] | 0) == -1) {
  HEAP32[i4 >> 2] = 50;
  HEAP32[i38 + 92 >> 2] = 50;
  HEAP32[i38 + 96 >> 2] = 50;
  HEAP32[i38 + 100 >> 2] = 2500;
  HEAP32[i38 + 104 >> 2] = __Znaj(5e5) | 0;
  i4 = 2500;
  i5 = 50;
 } else {
  i4 = HEAP32[i38 + 100 >> 2] | 0;
  i5 = HEAP32[i38 + 96 >> 2] | 0;
 }
 if ((Math_imul(i5, i4) | 0) > 0) _memset(HEAP32[i38 + 104 >> 2] | 0, -1, Math_imul(i5 << 2, i4) | 0) | 0;
 i4 = i38 + 108 | 0;
 if ((HEAP32[i4 >> 2] | 0) == -1) {
  HEAP32[i4 >> 2] = 50;
  HEAP32[i38 + 112 >> 2] = 50;
  HEAP32[i38 + 116 >> 2] = 50;
  HEAP32[i38 + 120 >> 2] = 2500;
  HEAP32[i38 + 124 >> 2] = __Znaj(5e5) | 0;
  i4 = 50;
  i5 = 2500;
 } else {
  i4 = HEAP32[i38 + 116 >> 2] | 0;
  i5 = HEAP32[i38 + 120 >> 2] | 0;
 }
 if ((Math_imul(i4, i5) | 0) > 0) _memset(HEAP32[i38 + 124 >> 2] | 0, -1, Math_imul(i4 << 2, i5) | 0) | 0;
 i4 = i38 + 128 | 0;
 if ((HEAP32[i4 >> 2] | 0) == -1) {
  HEAP32[i4 >> 2] = 50;
  HEAP32[i38 + 132 >> 2] = 50;
  HEAP32[i38 + 136 >> 2] = 50;
  HEAP32[i38 + 140 >> 2] = 2500;
  HEAP32[i38 + 144 >> 2] = __Znaj(5e5) | 0;
  i4 = 50;
  i5 = 2500;
 } else {
  i4 = HEAP32[i38 + 136 >> 2] | 0;
  i5 = HEAP32[i38 + 140 >> 2] | 0;
 }
 if ((Math_imul(i4, i5) | 0) > 0) _memset(HEAP32[i38 + 144 >> 2] | 0, -1, Math_imul(i4 << 2, i5) | 0) | 0;
 i23 = i38 + 44 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 if (i4) __ZdaPv(i4);
 HEAP32[i23 >> 2] = 0;
 i25 = i38 + 48 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 if (i4) __ZdaPv(i4);
 HEAP32[i25 >> 2] = 0;
 i26 = i38 + 52 | 0;
 i4 = HEAP32[i26 >> 2] | 0;
 if (i4) __ZdaPv(i4);
 HEAP32[i26 >> 2] = 0;
 i18 = i38 + 56 | 0;
 i4 = HEAP32[i18 >> 2] | 0;
 if (i4) __ZdaPv(i4);
 HEAP32[i18 >> 2] = 0;
 i20 = i38 + 24 | 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP32[i20 + 12 >> 2] = 0;
 i13 = HEAP32[i6 >> 2] | 0;
 i12 = HEAP32[i6 + 4 >> 2] | 0;
 i8 = HEAP32[i6 + 8 >> 2] | 0;
 i28 = i38 + 28 | 0;
 i35 = i38 + 32 | 0;
 i15 = i38 + 36 | 0;
 i5 = i21 + 4 | 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP32[i20 + 12 >> 2] = 0;
 HEAP8[i20 + 16 >> 0] = 0;
 i9 = i21 + 12 | 0;
 i16 = i21 + 8 | 0;
 i10 = i21 + 20 | 0;
 i17 = i21 + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i21 >> 2] = 200;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i16 >> 2] = 200;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i17 >> 2] = 200;
 HEAP32[i42 >> 2] = i42;
 i36 = i42 + 4 | 0;
 HEAP32[i36 >> 2] = i42;
 i37 = i42 + 8 | 0;
 HEAP32[i37 >> 2] = 0;
 __ZN5Shape8readAxisEPK10BuildWorldiii6EPlaneRNSt3__14listINS_7FaceDefENS4_9allocatorIS6_EEEEPiR9SqrLimits(i38, i6, i12, i8, i13, 0, i42, i24, i21);
 __ZN5Shape8readAxisEPK10BuildWorldiii6EPlaneRNSt3__14listINS_7FaceDefENS4_9allocatorIS6_EEEEPiR9SqrLimits(i38, i6, i13, i8, i12, 1, i42, i24, i21);
 __ZN5Shape8readAxisEPK10BuildWorldiii6EPlaneRNSt3__14listINS_7FaceDefENS4_9allocatorIS6_EEEEPiR9SqrLimits(i38, i6, i13, i12, i8, 2, i42, i24, i21);
 i8 = i6 + 112 | 0;
 HEAP32[i8 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 HEAP32[i8 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
 HEAP32[i8 + 20 >> 2] = HEAP32[i21 + 20 >> 2];
 i8 = i38 + 60 | 0;
 HEAP32[i8 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 HEAP32[i8 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
 HEAP32[i8 + 20 >> 2] = HEAP32[i21 + 20 >> 2];
 i8 = HEAP32[i16 >> 2] | 0;
 i12 = i38 + 12 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + 5 - i8;
 i9 = HEAP32[i17 >> 2] | 0;
 i13 = i38 + 16 | 0;
 HEAP32[i13 >> 2] = (HEAP32[i10 >> 2] | 0) + 5 - i9;
 i10 = HEAP32[i21 >> 2] | 0;
 i14 = i38 + 20 | 0;
 HEAP32[i14 >> 2] = (HEAP32[i5 >> 2] | 0) + 5 - i10;
 i5 = HEAP32[i20 >> 2] | 0;
 i4 = __Znaj(i5 >>> 0 > 22845570 ? -1 : i5 * 188 | 0) | 0;
 if (i5) {
  i6 = i4 + (i5 * 188 | 0) | 0;
  i7 = i4;
  do {
   HEAP32[i7 >> 2] = -1;
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   HEAP32[i7 + 12 >> 2] = 0;
   HEAP32[i7 + 16 >> 2] = 2;
   HEAP32[i7 + 76 >> 2] = 0;
   HEAP32[i7 + 80 >> 2] = 0;
   HEAP32[i7 + 88 >> 2] = 0;
   HEAP32[i7 + 92 >> 2] = 0;
   HEAP32[i7 + 96 >> 2] = 0;
   HEAP32[i7 + 104 >> 2] = 0;
   HEAP32[i7 + 108 >> 2] = 0;
   HEAP32[i7 + 116 >> 2] = 0;
   HEAP32[i7 + 120 >> 2] = 0;
   HEAP32[i7 + 124 >> 2] = 0;
   HEAP32[i7 + 132 >> 2] = 0;
   HEAP32[i7 + 136 >> 2] = 0;
   HEAP32[i7 + 144 >> 2] = 0;
   HEAP32[i7 + 148 >> 2] = 0;
   HEAP32[i7 + 152 >> 2] = 0;
   HEAP32[i7 + 160 >> 2] = 0;
   HEAP32[i7 + 164 >> 2] = 0;
   HEAP32[i7 + 172 >> 2] = 0;
   HEAP32[i7 + 176 >> 2] = 0;
   HEAP32[i7 + 180 >> 2] = 0;
   i7 = i7 + 188 | 0;
  } while ((i7 | 0) != (i6 | 0));
  HEAP32[i23 >> 2] = i4;
  if ((i5 | 0) > 0) {
   i5 = HEAP32[i36 >> 2] | 0;
   i6 = 0;
   while (1) {
    i32 = i5;
    HEAP32[i4 + (i6 * 188 | 0) >> 2] = HEAP32[i32 + 8 >> 2];
    i34 = (HEAP32[i32 + 16 >> 2] | 0) - i9 | 0;
    i33 = (HEAP32[i32 + 20 >> 2] | 0) - i10 | 0;
    HEAP32[i4 + (i6 * 188 | 0) + 4 >> 2] = (HEAP32[i32 + 12 >> 2] | 0) - i8;
    HEAP32[i4 + (i6 * 188 | 0) + 8 >> 2] = i34;
    HEAP32[i4 + (i6 * 188 | 0) + 12 >> 2] = i33;
    i4 = HEAP32[i23 >> 2] | 0;
    i33 = HEAP32[i4 + (i6 * 188 | 0) >> 2] | 0;
    i34 = (Math_imul((HEAP32[i4 + (i6 * 188 | 0) + 8 >> 2] | 0) / 4 | 0, HEAP32[i38 + 88 + (i33 * 20 | 0) >> 2] | 0) | 0) + ((HEAP32[i4 + (i6 * 188 | 0) + 4 >> 2] | 0) / 4 | 0) | 0;
    i34 = i34 + (Math_imul((HEAP32[i4 + (i6 * 188 | 0) + 12 >> 2] | 0) / 4 | 0, HEAP32[i38 + 88 + (i33 * 20 | 0) + 12 >> 2] | 0) | 0) | 0;
    HEAP32[(HEAP32[i38 + 88 + (i33 * 20 | 0) + 16 >> 2] | 0) + (i34 << 2) >> 2] = i6;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) >= (HEAP32[i20 >> 2] | 0)) {
     i27 = i23;
     break;
    } else i5 = HEAP32[i5 + 4 >> 2] | 0;
   }
  } else i27 = i23;
 } else {
  HEAP32[i23 >> 2] = i4;
  i27 = i23;
 }
 if ((HEAP32[i37 >> 2] | 0) != 0 ? (i11 = HEAP32[i36 >> 2] | 0, i34 = (HEAP32[i42 >> 2] | 0) + 4 | 0, i33 = HEAP32[i11 >> 2] | 0, HEAP32[i33 + 4 >> 2] = HEAP32[i34 >> 2], HEAP32[HEAP32[i34 >> 2] >> 2] = i33, HEAP32[i37 >> 2] = 0, (i11 | 0) != (i42 | 0)) : 0) {
  i4 = i11;
  do {
   i34 = i4;
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   __ZdlPv(i34);
  } while ((i4 | 0) != (i42 | 0));
 }
 HEAP32[i41 >> 2] = i41;
 i33 = i41 + 4 | 0;
 HEAP32[i33 >> 2] = i41;
 i34 = i41 + 8 | 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i40 >> 2] = i40;
 i31 = i40 + 4 | 0;
 HEAP32[i31 >> 2] = i40;
 i32 = i40 + 8 | 0;
 HEAP32[i32 >> 2] = 0;
 HEAP32[i39 >> 2] = i39;
 i29 = i39 + 4 | 0;
 HEAP32[i29 >> 2] = i39;
 i30 = i39 + 8 | 0;
 HEAP32[i30 >> 2] = 0;
 i4 = HEAP32[i12 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i7 = HEAP32[i13 >> 2] | 0;
  i6 = i4;
  i5 = 0;
  i4 = 0;
  i9 = 0;
  while (1) {
   if ((i7 | 0) > 0) {
    i6 = HEAP32[i14 >> 2] | 0;
    i8 = 0;
    do {
     if ((i6 | 0) > 0) {
      i7 = 0;
      do {
       i10 = __ZN5Shape9checkSideE5EAxisiiiRNSt3__14listINS_7SideDefENS1_9allocatorIS3_EEEES7_(i38, 1, i9, i8, i7, i41, i40) | 0;
       i11 = __ZN5Shape9checkSideE5EAxisiiiRNSt3__14listINS_7SideDefENS1_9allocatorIS3_EEEES7_(i38, 2, i9, i8, i7, i41, i40) | 0;
       i6 = __ZN5Shape9checkSideE5EAxisiiiRNSt3__14listINS_7SideDefENS1_9allocatorIS3_EEEES7_(i38, 3, i9, i8, i7, i41, i40) | 0;
       i4 = i4 | (i10 | 0) == 0 | (i11 | 0) == 0 | (i6 | 0) == 0;
       i5 = i5 | (__ZN5Shape11checkCornerEiiiRNSt3__14listINS_9CornerDefENS0_9allocatorIS2_EEEE(i38, i9, i8, i7, i39) | 0) == 0;
       i7 = i7 + 4 | 0;
       i6 = HEAP32[i14 >> 2] | 0;
      } while ((i7 | 0) < (i6 | 0));
      i7 = HEAP32[i13 >> 2] | 0;
     }
     i8 = i8 + 4 | 0;
    } while ((i8 | 0) < (i7 | 0));
    i6 = i7;
    i8 = HEAP32[i12 >> 2] | 0;
   } else {
    i8 = i6;
    i6 = i7;
   }
   i9 = i9 + 4 | 0;
   if ((i9 | 0) >= (i8 | 0)) break; else {
    i7 = i6;
    i6 = i8;
   }
  }
  if (i4 | i5 ^ 1) if (i4) {
   i4 = HEAP32[i15 >> 2] | 0;
   i6 = __Znaj(i4 >>> 0 > 178956970 ? -1 : i4 * 24 | 0) | 0;
   if (i4) {
    i4 = i6 + (i4 * 24 | 0) | 0;
    i5 = i6;
    do {
     HEAP32[i5 >> 2] = -1;
     HEAP32[i5 + 4 >> 2] = 0;
     HEAP32[i5 + 8 >> 2] = 0;
     HEAP32[i5 + 12 >> 2] = 0;
     HEAP32[i5 + 16 >> 2] = -1;
     HEAP32[i5 + 20 >> 2] = -1;
     i5 = i5 + 24 | 0;
    } while ((i5 | 0) != (i4 | 0));
    i38 = (HEAP32[i15 >> 2] | 0) > 0;
    HEAP32[i18 >> 2] = i6;
    if (i38) {
     i4 = i6;
     i5 = HEAP32[i31 >> 2] | 0;
     i6 = 0;
     while (1) {
      i38 = i4 + (i6 * 24 | 0) | 0;
      i27 = i5 + 8 | 0;
      HEAP32[i38 >> 2] = HEAP32[i27 >> 2];
      HEAP32[i38 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
      HEAP32[i38 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
      HEAP32[i38 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
      HEAP32[i38 + 16 >> 2] = HEAP32[i27 + 16 >> 2];
      HEAP32[i38 + 20 >> 2] = HEAP32[i27 + 20 >> 2];
      i4 = HEAP32[i18 >> 2] | 0;
      i38 = i4 + (i6 * 24 | 0) + 4 | 0;
      HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
      i38 = i4 + (i6 * 24 | 0) + 8 | 0;
      HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
      i38 = i4 + (i6 * 24 | 0) + 12 | 0;
      HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + (HEAP32[i21 >> 2] | 0);
      i6 = i6 + 1 | 0;
      if ((i6 | 0) >= (HEAP32[i15 >> 2] | 0)) break; else i5 = HEAP32[i5 + 4 >> 2] | 0;
     }
    }
   } else HEAP32[i18 >> 2] = i6;
   HEAP32[i28 >> 2] = 0;
   HEAP32[i35 >> 2] = 0;
   i4 = 3;
  } else i22 = 45; else i4 = 255;
 } else i22 = 45;
 L77 : do if ((i22 | 0) == 45) {
  i4 = HEAP32[i28 >> 2] | 0;
  i6 = __Znaj(i4 >>> 0 > 178956970 ? -1 : i4 * 24 | 0) | 0;
  if (i4) {
   i4 = i6 + (i4 * 24 | 0) | 0;
   i5 = i6;
   do {
    HEAP32[i5 >> 2] = -1;
    HEAP32[i5 + 4 >> 2] = 0;
    HEAP32[i5 + 8 >> 2] = 0;
    HEAP32[i5 + 12 >> 2] = 0;
    HEAP32[i5 + 16 >> 2] = -1;
    HEAP32[i5 + 20 >> 2] = -1;
    i5 = i5 + 24 | 0;
   } while ((i5 | 0) != (i4 | 0));
   i22 = HEAP32[i28 >> 2] | 0;
   HEAP32[i25 >> 2] = i6;
   if ((i22 | 0) > 0 ? (i19 = HEAP32[i33 >> 2] | 0, i22 = i19 + 8 | 0, HEAP32[i6 >> 2] = HEAP32[i22 >> 2], HEAP32[i6 + 4 >> 2] = HEAP32[i22 + 4 >> 2], HEAP32[i6 + 8 >> 2] = HEAP32[i22 + 8 >> 2], HEAP32[i6 + 12 >> 2] = HEAP32[i22 + 12 >> 2], HEAP32[i6 + 16 >> 2] = HEAP32[i22 + 16 >> 2], HEAP32[i6 + 20 >> 2] = HEAP32[i22 + 20 >> 2], (HEAP32[i28 >> 2] | 0) > 1) : 0) {
    i4 = i19;
    i5 = 1;
    do {
     i4 = HEAP32[i4 + 4 >> 2] | 0;
     i22 = (HEAP32[i25 >> 2] | 0) + (i5 * 24 | 0) | 0;
     i21 = i4 + 8 | 0;
     HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i22 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
     HEAP32[i22 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
     HEAP32[i22 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
     HEAP32[i22 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
     HEAP32[i22 + 20 >> 2] = HEAP32[i21 + 20 >> 2];
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (HEAP32[i28 >> 2] | 0));
   }
  } else HEAP32[i25 >> 2] = i6;
  i4 = HEAP32[i35 >> 2] | 0;
  i6 = __Znaj(i4 >>> 0 > 107374182 ? -1 : i4 * 40 | 0) | 0;
  if (i4) {
   i4 = i6 + (i4 * 40 | 0) | 0;
   i5 = i6;
   do {
    i22 = i5 + 16 | 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i5 + 4 >> 2] = 0;
    HEAP32[i5 + 8 >> 2] = 0;
    HEAP32[i5 + 12 >> 2] = 0;
    HEAP32[i22 >> 2] = -1;
    HEAP32[i22 + 4 >> 2] = -1;
    HEAP32[i22 + 8 >> 2] = -1;
    HEAP32[i22 + 12 >> 2] = -1;
    HEAP32[i22 + 16 >> 2] = -1;
    HEAP32[i22 + 20 >> 2] = -1;
    i5 = i5 + 40 | 0;
   } while ((i5 | 0) != (i4 | 0));
   i22 = HEAP32[i35 >> 2] | 0;
   HEAP32[i26 >> 2] = i6;
   if ((i22 | 0) > 0) {
    i4 = HEAP32[i29 >> 2] | 0;
    i7 = i4 + 8 | 0;
    i8 = i6 + 40 | 0;
    do {
     HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    } while ((i6 | 0) < (i8 | 0));
    if ((HEAP32[i35 >> 2] | 0) > 1) {
     i5 = 1;
     do {
      i4 = HEAP32[i4 + 4 >> 2] | 0;
      i6 = (HEAP32[i26 >> 2] | 0) + (i5 * 40 | 0) | 0;
      i7 = i4 + 8 | 0;
      i8 = i6 + 40 | 0;
      do {
       HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
       i6 = i6 + 4 | 0;
       i7 = i7 + 4 | 0;
      } while ((i6 | 0) < (i8 | 0));
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (HEAP32[i35 >> 2] | 0));
    }
   }
  } else HEAP32[i26 >> 2] = i6;
  __ZN5Shape19makeVolumeAndFacingEv(i38);
  i4 = HEAP32[i24 >> 2] | 0;
  if ((i4 | 0) == -1) i4 = 1; else {
   HEAP32[i24 >> 2] = (HEAP32[i20 >> 2] | 0) + ~i4;
   __ZN5Shape18make_sides_faceneiEv(i38);
   i9 = HEAP32[i20 >> 2] | 0;
   i12 = __Znaj(i9 >>> 0 > 22845570 ? -1 : i9 * 188 | 0) | 0;
   i6 = (i9 | 0) == 0;
   if (!i6) {
    i4 = i12 + (i9 * 188 | 0) | 0;
    i5 = i12;
    do {
     HEAP32[i5 >> 2] = -1;
     HEAP32[i5 + 4 >> 2] = 0;
     HEAP32[i5 + 8 >> 2] = 0;
     HEAP32[i5 + 12 >> 2] = 0;
     HEAP32[i5 + 16 >> 2] = 2;
     HEAP32[i5 + 76 >> 2] = 0;
     HEAP32[i5 + 80 >> 2] = 0;
     HEAP32[i5 + 88 >> 2] = 0;
     HEAP32[i5 + 92 >> 2] = 0;
     HEAP32[i5 + 96 >> 2] = 0;
     HEAP32[i5 + 104 >> 2] = 0;
     HEAP32[i5 + 108 >> 2] = 0;
     HEAP32[i5 + 116 >> 2] = 0;
     HEAP32[i5 + 120 >> 2] = 0;
     HEAP32[i5 + 124 >> 2] = 0;
     HEAP32[i5 + 132 >> 2] = 0;
     HEAP32[i5 + 136 >> 2] = 0;
     HEAP32[i5 + 144 >> 2] = 0;
     HEAP32[i5 + 148 >> 2] = 0;
     HEAP32[i5 + 152 >> 2] = 0;
     HEAP32[i5 + 160 >> 2] = 0;
     HEAP32[i5 + 164 >> 2] = 0;
     HEAP32[i5 + 172 >> 2] = 0;
     HEAP32[i5 + 176 >> 2] = 0;
     HEAP32[i5 + 180 >> 2] = 0;
     i5 = i5 + 188 | 0;
    } while ((i5 | 0) != (i4 | 0));
   }
   i11 = __Znaj(i9 >>> 0 > 536870911 ? -1 : i9 << 3) | 0;
   if (!i6) {
    i4 = i11 + (i9 << 3) | 0;
    i5 = i11;
    do {
     HEAP32[i5 >> 2] = -1;
     HEAP32[i5 + 4 >> 2] = -1;
     i5 = i5 + 8 | 0;
    } while ((i5 | 0) != (i4 | 0));
   }
   i5 = HEAP32[i24 >> 2] | 0;
   i10 = HEAP32[i23 >> 2] | 0;
   i4 = i10 + (i5 * 188 | 0) | 0;
   if ((i4 | 0) != (i12 | 0)) {
    HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
    i24 = i12 + 4 | 0;
    i23 = i10 + (i5 * 188 | 0) + 4 | 0;
    HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i24 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
    HEAP32[i24 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
    HEAP32[i12 + 16 >> 2] = HEAP32[i10 + (i5 * 188 | 0) + 16 >> 2];
   }
   HEAP32[i11 + (i5 << 3) >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = i5;
   i8 = i38 + 148 | 0;
   i5 = 0;
   i4 = 0;
   while (1) {
    i7 = __ZN5Shape15faceNeiFirstOptEiPNS_9TransTypeE(i38, HEAP32[i11 + (i4 << 3) + 4 >> 2] | 0, i11) | 0;
    if ((i7 | 0) == -1) {
     i7 = i5;
     i4 = i4 + -1 | 0;
    } else {
     i6 = i5 + 1 | 0;
     i4 = i12 + (i6 * 188 | 0) | 0;
     i5 = i10 + (i7 * 188 | 0) | 0;
     if ((i5 | 0) != (i4 | 0)) {
      HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
      i24 = i12 + (i6 * 188 | 0) + 4 | 0;
      i23 = i10 + (i7 * 188 | 0) + 4 | 0;
      HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
      HEAP32[i24 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
      HEAP32[i24 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
      HEAP32[i12 + (i6 * 188 | 0) + 16 >> 2] = HEAP32[i10 + (i7 * 188 | 0) + 16 >> 2];
     }
     HEAP32[i11 + (i7 << 3) >> 2] = i6;
     HEAP32[i11 + (i6 << 3) + 4 >> 2] = i7;
     i7 = i6;
     i4 = i6;
    }
    if ((i4 | 0) > 0) {
     i5 = i7;
     continue;
    }
    if ((i7 + 1 | 0) >= (i9 | 0)) break;
    if (!(HEAP32[i8 >> 2] | 0)) {
     i4 = 2;
     break L77;
    }
    HEAP32[i8 >> 2] = 0;
    i5 = i7;
    i4 = i7;
   }
   if ((HEAP32[i28 >> 2] | 0) > 0) {
    i4 = HEAP32[i25 >> 2] | 0;
    i5 = 0;
    do {
     i25 = i4 + (i5 * 24 | 0) + 16 | 0;
     HEAP32[i25 >> 2] = HEAP32[i11 + (HEAP32[i25 >> 2] << 3) >> 2];
     i25 = i4 + (i5 * 24 | 0) + 20 | 0;
     HEAP32[i25 >> 2] = HEAP32[i11 + (HEAP32[i25 >> 2] << 3) >> 2];
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (HEAP32[i28 >> 2] | 0));
   }
   if ((HEAP32[i35 >> 2] | 0) > 0) {
    i6 = HEAP32[i26 >> 2] | 0;
    i7 = 0;
    do {
     i4 = i6 + (i7 * 40 | 0) + 16 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i4 = i6 + (i7 * 40 | 0) + 20 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i4 = i6 + (i7 * 40 | 0) + 24 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i4 = i6 + (i7 * 40 | 0) + 28 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i4 = i6 + (i7 * 40 | 0) + 32 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i4 = i6 + (i7 * 40 | 0) + 36 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != -1) HEAP32[i4 >> 2] = HEAP32[i11 + (i5 << 3) >> 2];
     i7 = i7 + 1 | 0;
    } while ((i7 | 0) < (HEAP32[i35 >> 2] | 0));
   }
   if (i10) __ZdaPv(i10);
   HEAP32[i27 >> 2] = i12;
   __ZdaPv(i11);
   __ZN5Shape14makeReverseNeiEv(i38);
   __ZN5Shape18makePieceCheckBitsEv(i38);
   __ZN5Shape17makeNeiTransformsEv(i38);
   i4 = 0;
  }
 } while (0);
 if ((HEAP32[i30 >> 2] | 0) != 0 ? (i3 = HEAP32[i29 >> 2] | 0, i38 = (HEAP32[i39 >> 2] | 0) + 4 | 0, i35 = HEAP32[i3 >> 2] | 0, HEAP32[i35 + 4 >> 2] = HEAP32[i38 >> 2], HEAP32[HEAP32[i38 >> 2] >> 2] = i35, HEAP32[i30 >> 2] = 0, (i3 | 0) != (i39 | 0)) : 0) do {
  i38 = i3;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  __ZdlPv(i38);
 } while ((i3 | 0) != (i39 | 0));
 if ((HEAP32[i32 >> 2] | 0) != 0 ? (i2 = HEAP32[i31 >> 2] | 0, i39 = (HEAP32[i40 >> 2] | 0) + 4 | 0, i38 = HEAP32[i2 >> 2] | 0, HEAP32[i38 + 4 >> 2] = HEAP32[i39 >> 2], HEAP32[HEAP32[i39 >> 2] >> 2] = i38, HEAP32[i32 >> 2] = 0, (i2 | 0) != (i40 | 0)) : 0) do {
  i39 = i2;
  i2 = HEAP32[i2 + 4 >> 2] | 0;
  __ZdlPv(i39);
 } while ((i2 | 0) != (i40 | 0));
 if ((HEAP32[i34 >> 2] | 0) != 0 ? (i1 = HEAP32[i33 >> 2] | 0, i40 = (HEAP32[i41 >> 2] | 0) + 4 | 0, i39 = HEAP32[i1 >> 2] | 0, HEAP32[i39 + 4 >> 2] = HEAP32[i40 >> 2], HEAP32[HEAP32[i40 >> 2] >> 2] = i39, HEAP32[i34 >> 2] = 0, (i1 | 0) != (i41 | 0)) : 0) do {
  i40 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i40);
 } while ((i1 | 0) != (i41 | 0));
 if (!(HEAP32[i37 >> 2] | 0)) {
  STACKTOP = i43;
  return i4 | 0;
 }
 i1 = HEAP32[i36 >> 2] | 0;
 i41 = (HEAP32[i42 >> 2] | 0) + 4 | 0;
 i40 = HEAP32[i1 >> 2] | 0;
 HEAP32[i40 + 4 >> 2] = HEAP32[i41 >> 2];
 HEAP32[HEAP32[i41 >> 2] >> 2] = i40;
 HEAP32[i37 >> 2] = 0;
 if ((i1 | 0) == (i42 | 0)) {
  STACKTOP = i43;
  return i4 | 0;
 }
 do {
  i41 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i41);
 } while ((i1 | 0) != (i42 | 0));
 STACKTOP = i43;
 return i4 | 0;
}

function __ZN16BuildControlBase11makeBuffersEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0;
 i71 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i58 = i71 + 276 | 0;
 i59 = i71 + 272 | 0;
 i60 = i71 + 268 | 0;
 i61 = i71 + 264 | 0;
 i62 = i71 + 260 | 0;
 i63 = i71 + 256 | 0;
 i69 = i71 + 224 | 0;
 i70 = i71 + 192 | 0;
 i36 = i71 + 180 | 0;
 i37 = i71 + 168 | 0;
 i38 = i71 + 156 | 0;
 i39 = i71 + 144 | 0;
 i40 = i71 + 128 | 0;
 i41 = i71 + 116 | 0;
 i42 = i71 + 104 | 0;
 i43 = i71 + 92 | 0;
 i44 = i71 + 80 | 0;
 i45 = i71 + 64 | 0;
 i53 = i71 + 52 | 0;
 i54 = i71 + 40 | 0;
 i55 = i71 + 28 | 0;
 i57 = i71 + 16 | 0;
 i56 = i71;
 i46 = i1 + 48 | 0;
 HEAP32[i62 >> 2] = i46;
 HEAP32[i1 + 152 >> 2] = 2;
 HEAP8[i1 + 145 >> 0] = 1;
 HEAP8[i1 + 146 >> 0] = 1;
 HEAP8[i1 + 147 >> 0] = 0;
 HEAP8[i1 + 149 >> 0] = 1;
 __ZN4Mesh5clearEv(i46);
 i47 = i1 + 240 | 0;
 HEAP32[i63 >> 2] = i47;
 HEAP32[i1 + 344 >> 2] = 2;
 HEAP8[i1 + 337 >> 0] = 1;
 HEAP8[i1 + 338 >> 0] = 1;
 HEAP8[i1 + 339 >> 0] = 0;
 HEAP8[i1 + 341 >> 0] = 1;
 __ZN4Mesh5clearEv(i47);
 i48 = i1 + 432 | 0;
 HEAP32[i69 >> 2] = i48;
 i49 = i69 + 4 | 0;
 HEAP32[i69 + 8 >> 2] = 0;
 HEAP32[i69 + 12 >> 2] = 0;
 i65 = i69 + 8 | 0;
 HEAP32[i49 >> 2] = i65;
 HEAP32[i69 + 16 >> 2] = i1 + 440;
 HEAP32[i69 + 24 >> 2] = 0;
 HEAP32[i69 + 28 >> 2] = 0;
 i66 = i69 + 24 | 0;
 HEAP32[i69 + 20 >> 2] = i66;
 HEAP32[i1 + 536 >> 2] = 1;
 HEAP8[i1 + 529 >> 0] = 0;
 HEAP8[i1 + 530 >> 0] = 1;
 HEAP8[i1 + 531 >> 0] = 1;
 HEAP8[i1 + 532 >> 0] = 1;
 __ZN4Mesh5clearEv(i48);
 i51 = i1 + 624 | 0;
 HEAP32[i70 >> 2] = i51;
 i52 = i70 + 4 | 0;
 HEAP32[i70 + 8 >> 2] = 0;
 HEAP32[i70 + 12 >> 2] = 0;
 i67 = i70 + 8 | 0;
 HEAP32[i52 >> 2] = i67;
 HEAP32[i70 + 16 >> 2] = i1 + 632;
 HEAP32[i70 + 24 >> 2] = 0;
 HEAP32[i70 + 28 >> 2] = 0;
 i68 = i70 + 24 | 0;
 HEAP32[i70 + 20 >> 2] = i68;
 HEAP32[i1 + 728 >> 2] = 1;
 HEAP8[i1 + 721 >> 0] = 0;
 HEAP8[i1 + 722 >> 0] = 1;
 HEAP8[i1 + 723 >> 0] = 1;
 HEAP8[i1 + 724 >> 0] = 1;
 __ZN4Mesh5clearEv(i51);
 i64 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 116 >> 2] | 0;
 if (HEAP8[i1 + 15 >> 0] | 0) {
  i35 = HEAP32[i64 + 1500184 >> 2] | 0;
  d32 = 24.0 - +(HEAP32[i35 + 4 >> 2] | 0) * .25;
  d33 = 24.0 - +(HEAP32[i35 + 8 >> 2] | 0) * .25;
  d34 = 24.0 - +(HEAP32[i35 + 12 >> 2] | 0) * .25;
  i35 = i64 + 1500144 | 0;
  i26 = i64 + 1500140 | 0;
  i1 = HEAP32[i26 >> 2] | 0;
  if ((HEAP32[i35 >> 2] | 0) == (i1 | 0)) {
   i64 = i70 + 20 | 0;
   i68 = HEAP32[i68 >> 2] | 0;
   __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i64, i68);
   i70 = i70 + 4 | 0;
   i68 = HEAP32[i67 >> 2] | 0;
   __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i70, i68);
   i68 = i69 + 20 | 0;
   i70 = HEAP32[i66 >> 2] | 0;
   __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i68, i70);
   i69 = i69 + 4 | 0;
   i70 = HEAP32[i65 >> 2] | 0;
   __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i69, i70);
   STACKTOP = i71;
   return;
  }
  i27 = i36 + 4 | 0;
  i28 = i36 + 8 | 0;
  i29 = i37 + 4 | 0;
  i30 = i37 + 8 | 0;
  i31 = i38 + 4 | 0;
  i9 = i38 + 8 | 0;
  i10 = i39 + 4 | 0;
  i11 = i39 + 8 | 0;
  i12 = i40 + 4 | 0;
  i13 = i40 + 8 | 0;
  i14 = i40 + 12 | 0;
  i15 = i41 + 4 | 0;
  i16 = i41 + 8 | 0;
  i17 = i42 + 4 | 0;
  i18 = i42 + 8 | 0;
  i19 = i43 + 4 | 0;
  i20 = i43 + 8 | 0;
  i21 = i44 + 4 | 0;
  i22 = i44 + 8 | 0;
  i23 = i45 + 4 | 0;
  i24 = i45 + 8 | 0;
  i25 = i45 + 12 | 0;
  i4 = 0;
  do {
   i3 = i4 + 4 | 0;
   d5 = +HEAPF32[i1 + (i3 * 12 | 0) >> 2];
   i2 = HEAP32[i1 + (i3 * 12 | 0) + 4 >> 2] | 0;
   i3 = HEAP32[i1 + (i3 * 12 | 0) + 8 >> 2] | 0;
   d6 = d32 + +HEAPF32[i1 + (i4 * 12 | 0) >> 2] * .25;
   d7 = d33 + +HEAPF32[i1 + (i4 * 12 | 0) + 4 >> 2] * .25;
   d8 = d34 + +HEAPF32[i1 + (i4 * 12 | 0) + 8 >> 2] * .25;
   if (d5 == 1.0) {
    HEAPF32[i36 >> 2] = d6;
    HEAPF32[i27 >> 2] = d7;
    HEAPF32[i28 >> 2] = d8;
    i64 = i4 + 1 | 0;
    d7 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d8 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i37 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i29 >> 2] = d7;
    HEAPF32[i30 >> 2] = d8;
    i64 = i4 + 2 | 0;
    d8 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d7 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i38 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i31 >> 2] = d8;
    HEAPF32[i9 >> 2] = d7;
    i64 = i4 + 3 | 0;
    d7 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d8 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i39 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i10 >> 2] = d7;
    HEAPF32[i11 >> 2] = d8;
    HEAPF32[i40 >> 2] = 1.0;
    HEAP32[i12 >> 2] = i2;
    HEAP32[i13 >> 2] = i3;
    HEAPF32[i14 >> 2] = 1.0;
    __ZN9LineAdder10addWithDirERK4Vec3S2_S2_S2_RK4Vec4(i69, i36, i37, i38, i39, i40);
   } else {
    HEAPF32[i41 >> 2] = d6;
    HEAPF32[i15 >> 2] = d7;
    HEAPF32[i16 >> 2] = d8;
    i64 = i4 + 1 | 0;
    d7 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d8 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i42 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i17 >> 2] = d7;
    HEAPF32[i18 >> 2] = d8;
    i64 = i4 + 2 | 0;
    d8 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d7 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i43 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i19 >> 2] = d8;
    HEAPF32[i20 >> 2] = d7;
    i64 = i4 + 3 | 0;
    d7 = d33 + +HEAPF32[i1 + (i64 * 12 | 0) + 4 >> 2] * .25;
    d8 = d34 + +HEAPF32[i1 + (i64 * 12 | 0) + 8 >> 2] * .25;
    HEAPF32[i44 >> 2] = d32 + +HEAPF32[i1 + (i64 * 12 | 0) >> 2] * .25;
    HEAPF32[i21 >> 2] = d7;
    HEAPF32[i22 >> 2] = d8;
    HEAPF32[i45 >> 2] = d5;
    HEAP32[i23 >> 2] = i2;
    HEAP32[i24 >> 2] = i3;
    HEAPF32[i25 >> 2] = 1.0;
    __ZN9LineAdder10addWithDirERK4Vec3S2_S2_S2_RK4Vec4(i70, i41, i42, i43, i44, i45);
   }
   i4 = i4 + 5 | 0;
   i1 = HEAP32[i26 >> 2] | 0;
  } while (i4 >>> 0 < (((HEAP32[i35 >> 2] | 0) - i1 | 0) / 12 | 0) >>> 0);
  i64 = i70 + 20 | 0;
  i68 = HEAP32[i68 >> 2] | 0;
  __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i64, i68);
  i70 = i70 + 4 | 0;
  i68 = HEAP32[i67 >> 2] | 0;
  __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i70, i68);
  i68 = i69 + 20 | 0;
  i70 = HEAP32[i66 >> 2] | 0;
  __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i68, i70);
  i69 = i69 + 4 | 0;
  i70 = HEAP32[i65 >> 2] | 0;
  __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i69, i70);
  STACKTOP = i71;
  return;
 }
 i22 = i53 + 4 | 0;
 i23 = i53 + 8 | 0;
 i24 = i54 + 4 | 0;
 i25 = i54 + 8 | 0;
 i26 = i55 + 4 | 0;
 i27 = i55 + 8 | 0;
 i28 = i57 + 4 | 0;
 i29 = i57 + 8 | 0;
 i30 = i56 + 4 | 0;
 i31 = i56 + 8 | 0;
 i35 = i56 + 12 | 0;
 i20 = i1 + 13 | 0;
 i21 = 0;
 do {
  i1 = HEAP32[i64 + 40 + (i21 * 24 | 0) >> 2] | 0;
  i15 = i64 + 40 + (i21 * 24 | 0) + 4 | 0;
  if ((i1 | 0) < (HEAP32[i15 >> 2] | 0)) {
   i16 = i64 + 40 + (i21 * 24 | 0) + 8 | 0;
   i17 = i64 + 40 + (i21 * 24 | 0) + 12 | 0;
   i18 = i64 + 40 + (i21 * 24 | 0) + 16 | 0;
   i19 = i64 + 40 + (i21 * 24 | 0) + 20 | 0;
   i2 = HEAP32[i17 >> 2] | 0;
   do {
    i3 = HEAP32[i16 >> 2] | 0;
    if ((i3 | 0) < (i2 | 0)) {
     i13 = i1 >>> 0 < 50;
     i14 = i1 << 16 & 16711680 | i21;
     d7 = +(i1 | 0);
     i4 = HEAP32[i19 >> 2] | 0;
     do {
      i2 = HEAP32[i18 >> 2] | 0;
      if ((i2 | 0) < (i4 | 0)) {
       i10 = i3 >>> 0 < 50;
       i11 = i14 | i3 << 2 & 508;
       d5 = +(i3 | 0);
       i12 = i3 + 1 | 0;
       d6 = +(i12 | 0);
       do {
        do if (i13 & (i10 & i2 >>> 0 < 50) ? (i50 = HEAP32[i64 + 136 + (i21 * 5e5 | 0) + (i1 * 1e4 | 0) + (i3 * 200 | 0) + (i2 << 2) >> 2] | 0, (i50 & 65535 | 0) != 0) : 0) {
         i9 = i11 | i2 << 9 & 65024;
         HEAPF32[i53 >> 2] = 0.0;
         HEAPF32[i22 >> 2] = 0.0;
         HEAPF32[i23 >> 2] = 0.0;
         HEAPF32[i54 >> 2] = 0.0;
         HEAPF32[i24 >> 2] = 0.0;
         HEAPF32[i25 >> 2] = 0.0;
         HEAPF32[i55 >> 2] = 0.0;
         HEAPF32[i26 >> 2] = 0.0;
         HEAPF32[i27 >> 2] = 0.0;
         HEAPF32[i57 >> 2] = 0.0;
         HEAPF32[i28 >> 2] = 0.0;
         HEAPF32[i29 >> 2] = 0.0;
         switch (i21 | 0) {
         case 0:
          {
           d34 = +(i2 | 0);
           HEAPF32[i53 >> 2] = d7;
           HEAPF32[i22 >> 2] = d5;
           HEAPF32[i23 >> 2] = d34;
           HEAPF32[i54 >> 2] = d7;
           HEAPF32[i24 >> 2] = d6;
           HEAPF32[i25 >> 2] = d34;
           d34 = +(i2 + 1 | 0);
           HEAPF32[i55 >> 2] = d7;
           HEAPF32[i26 >> 2] = d6;
           HEAPF32[i27 >> 2] = d34;
           HEAPF32[i57 >> 2] = d7;
           HEAPF32[i28 >> 2] = d5;
           HEAPF32[i29 >> 2] = d34;
           break;
          }
         case 1:
          {
           d34 = +(i2 | 0);
           HEAPF32[i53 >> 2] = d5;
           HEAPF32[i22 >> 2] = d7;
           HEAPF32[i23 >> 2] = d34;
           HEAPF32[i54 >> 2] = d6;
           HEAPF32[i24 >> 2] = d7;
           HEAPF32[i25 >> 2] = d34;
           d34 = +(i2 + 1 | 0);
           HEAPF32[i55 >> 2] = d6;
           HEAPF32[i26 >> 2] = d7;
           HEAPF32[i27 >> 2] = d34;
           HEAPF32[i57 >> 2] = d5;
           HEAPF32[i28 >> 2] = d7;
           HEAPF32[i29 >> 2] = d34;
           break;
          }
         case 2:
          {
           d34 = +(i2 | 0);
           HEAPF32[i53 >> 2] = d5;
           HEAPF32[i22 >> 2] = d34;
           HEAPF32[i23 >> 2] = d7;
           HEAPF32[i54 >> 2] = d6;
           HEAPF32[i24 >> 2] = d34;
           HEAPF32[i25 >> 2] = d7;
           d34 = +(i2 + 1 | 0);
           HEAPF32[i55 >> 2] = d6;
           HEAPF32[i26 >> 2] = d34;
           HEAPF32[i27 >> 2] = d7;
           HEAPF32[i57 >> 2] = d5;
           HEAPF32[i28 >> 2] = d34;
           HEAPF32[i29 >> 2] = d7;
           break;
          }
         default:
          {}
         }
         i4 = i50 & 16777215;
         HEAP32[i56 >> 2] = 0;
         HEAP32[i56 + 4 >> 2] = 0;
         HEAP32[i56 + 8 >> 2] = 0;
         HEAP32[i56 + 12 >> 2] = 0;
         if ((i50 & 65280 | 0) == 256) {
          HEAPF32[i56 >> 2] = .5;
          HEAPF32[i30 >> 2] = .5;
          HEAPF32[i31 >> 2] = 1.0;
          HEAPF32[i35 >> 2] = .5;
          __ZN9QuadAdder3addERK4Vec3S2_S2_S2_RK4Vec4jj(i63, i53, i54, i55, i57, i56, i9, 1);
          __ZN6VecRep3addERK4Vec3Pi(i52, i53, i58) | 0;
          __ZN6VecRep3addERK4Vec3Pi(i52, i54, i59) | 0;
          __ZN6VecRep3addERK4Vec3Pi(i52, i55, i60) | 0;
          __ZN6VecRep3addERK4Vec3Pi(i52, i57, i61) | 0;
          i45 = HEAP32[i58 >> 2] | 0;
          i44 = HEAP32[i59 >> 2] | 0;
          __ZN9LineAdder7addPairEii(i70, i45, i44);
          i43 = HEAP32[i60 >> 2] | 0;
          __ZN9LineAdder7addPairEii(i70, i44, i43);
          i44 = HEAP32[i61 >> 2] | 0;
          __ZN9LineAdder7addPairEii(i70, i43, i44);
          __ZN9LineAdder7addPairEii(i70, i44, i45);
          i45 = HEAP32[i70 >> 2] | 0;
          HEAPF32[i45 + 80 >> 2] = .20000000298023224;
          HEAPF32[i45 + 84 >> 2] = .20000000298023224;
          HEAPF32[i45 + 88 >> 2] = 1.0;
          HEAPF32[i45 + 92 >> 2] = .5;
          break;
         }
         do if ((i4 + -131585 | 0) >>> 0 < 2) {
          HEAPF32[i56 >> 2] = 0.0;
          HEAPF32[i30 >> 2] = .25;
          HEAPF32[i31 >> 2] = .25;
          HEAPF32[i35 >> 2] = 0.0;
          i4 = 2;
         } else {
          if ((i4 | 0) == 514 ? (HEAP8[i20 >> 0] | 0) != 0 : 0) {
           HEAPF32[i56 >> 2] = 1.0;
           HEAPF32[i30 >> 2] = 1.0;
           HEAPF32[i31 >> 2] = 0.0;
           HEAPF32[i35 >> 2] = 1.0;
           i4 = 0;
           break;
          }
          HEAPF32[i56 >> 2] = 1.0;
          HEAPF32[i30 >> 2] = 1.0;
          HEAPF32[i31 >> 2] = 1.0;
          HEAPF32[i35 >> 2] = 1.0;
          i4 = 0;
         } while (0);
         __ZN9QuadAdder3addERK4Vec3S2_S2_S2_RK4Vec4jj(i62, i53, i54, i55, i57, i56, i9, i4);
         __ZN6VecRep3addERK4Vec3Pi(i49, i53, i58) | 0;
         __ZN6VecRep3addERK4Vec3Pi(i49, i54, i59) | 0;
         __ZN6VecRep3addERK4Vec3Pi(i49, i55, i60) | 0;
         __ZN6VecRep3addERK4Vec3Pi(i49, i57, i61) | 0;
         i45 = HEAP32[i58 >> 2] | 0;
         i44 = HEAP32[i59 >> 2] | 0;
         __ZN9LineAdder7addPairEii(i69, i45, i44);
         i43 = HEAP32[i60 >> 2] | 0;
         __ZN9LineAdder7addPairEii(i69, i44, i43);
         i44 = HEAP32[i61 >> 2] | 0;
         __ZN9LineAdder7addPairEii(i69, i43, i44);
         __ZN9LineAdder7addPairEii(i69, i44, i45);
         i45 = HEAP32[i69 >> 2] | 0;
         HEAPF32[i45 + 80 >> 2] = .20000000298023224;
         HEAPF32[i45 + 84 >> 2] = .20000000298023224;
         HEAPF32[i45 + 88 >> 2] = .20000000298023224;
         HEAPF32[i45 + 92 >> 2] = 1.0;
        } while (0);
        i2 = i2 + 1 | 0;
        i4 = HEAP32[i19 >> 2] | 0;
       } while ((i2 | 0) < (i4 | 0));
       i3 = i12;
      } else i3 = i3 + 1 | 0;
      i2 = HEAP32[i17 >> 2] | 0;
     } while ((i3 | 0) < (i2 | 0));
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i15 >> 2] | 0));
  }
  i21 = i21 + 1 | 0;
 } while ((i21 | 0) < 3);
 __ZN4Mesh11makeSelfBosEv(i46);
 __ZN4Mesh11makeSelfBosEv(i47);
 __ZN4Mesh11makeSelfBosEv(i48);
 __ZN4Mesh11makeSelfBosEv(i51);
 i64 = i70 + 20 | 0;
 i68 = HEAP32[i68 >> 2] | 0;
 __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i64, i68);
 i70 = i70 + 4 | 0;
 i68 = HEAP32[i67 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i70, i68);
 i68 = i69 + 20 | 0;
 i70 = HEAP32[i66 >> 2] | 0;
 __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i68, i70);
 i69 = i69 + 4 | 0;
 i70 = HEAP32[i65 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i69, i70);
 STACKTOP = i71;
 return;
}

function _vfscanf(i33, i2, i24) {
 i33 = i33 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i25 = i34 + 16 | 0;
 i27 = i34 + 8 | 0;
 i26 = i34 + 33 | 0;
 i28 = i34;
 i16 = i34 + 32 | 0;
 if ((HEAP32[i33 + 76 >> 2] | 0) > -1) i32 = ___lockfile(i33) | 0; else i32 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i1 << 24 >> 24) {
  i29 = i33 + 4 | 0;
  i30 = i33 + 100 | 0;
  i23 = i33 + 108 | 0;
  i17 = i33 + 8 | 0;
  i18 = i26 + 10 | 0;
  i19 = i26 + 33 | 0;
  i20 = i27 + 4 | 0;
  i21 = i26 + 46 | 0;
  i22 = i26 + 94 | 0;
  i4 = i1;
  i1 = 0;
  i5 = i2;
  i10 = 0;
  i3 = 0;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i4 = (HEAP8[i5 >> 0] | 0) == 37;
    L10 : do if (i4) {
     i8 = i5 + 1 | 0;
     i6 = HEAP8[i8 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i15 = 0;
       i6 = i5 + 2 | 0;
       break;
      }
     default:
      {
       i6 = (i6 & 255) + -48 | 0;
       if (i6 >>> 0 < 10 ? (HEAP8[i5 + 2 >> 0] | 0) == 36 : 0) {
        HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
        while (1) {
         i15 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i4 = HEAP32[i15 >> 2] | 0;
         HEAP32[i25 >> 2] = i15 + 4;
         if (i6 >>> 0 > 1) i6 = i6 + -1 | 0; else break;
        }
        i15 = i4;
        i6 = i5 + 3 | 0;
        break L12;
       }
       i6 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i15 = HEAP32[i6 >> 2] | 0;
       HEAP32[i24 >> 2] = i6 + 4;
       i6 = i8;
      }
     } while (0);
     i4 = HEAP8[i6 >> 0] | 0;
     i5 = i4 & 255;
     if ((i5 + -48 | 0) >>> 0 < 10) {
      i4 = 0;
      while (1) {
       i8 = (i4 * 10 | 0) + -48 + i5 | 0;
       i6 = i6 + 1 | 0;
       i4 = HEAP8[i6 >> 0] | 0;
       i5 = i4 & 255;
       if ((i5 + -48 | 0) >>> 0 >= 10) break; else i4 = i8;
      }
     } else i8 = 0;
     if (i4 << 24 >> 24 == 109) {
      i6 = i6 + 1 | 0;
      i9 = HEAP8[i6 >> 0] | 0;
      i4 = (i15 | 0) != 0 & 1;
      i3 = 0;
      i2 = 0;
     } else {
      i9 = i4;
      i4 = 0;
     }
     i5 = i6 + 1 | 0;
     switch (i9 & 255 | 0) {
     case 104:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 104;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? -2 : -1;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 108;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? 3 : 1;
       break;
      }
     case 106:
      {
       i6 = 3;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       break;
      }
     case 76:
      {
       i6 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i5 = i6;
       i6 = 0;
       break;
      }
     default:
      {
       i31 = 152;
       break L6;
      }
     }
     i9 = HEAPU8[i5 >> 0] | 0;
     i11 = (i9 & 47 | 0) == 3;
     i9 = i11 ? i9 | 32 : i9;
     i11 = i11 ? 1 : i6;
     switch (i9 | 0) {
     case 99:
      {
       i14 = i10;
       i13 = (i8 | 0) < 1 ? 1 : i8;
       break;
      }
     case 91:
      {
       i14 = i10;
       i13 = i8;
       break;
      }
     case 110:
      {
       if (!i15) {
        i6 = i10;
        break L8;
       }
       switch (i11 | 0) {
       case -2:
        {
         HEAP8[i15 >> 0] = i10;
         i6 = i10;
         break L8;
        }
       case -1:
        {
         HEAP16[i15 >> 1] = i10;
         i6 = i10;
         break L8;
        }
       case 0:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 1:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 3:
        {
         i6 = i15;
         HEAP32[i6 >> 2] = i10;
         HEAP32[i6 + 4 >> 2] = ((i10 | 0) < 0) << 31 >> 31;
         i6 = i10;
         break L8;
        }
       default:
        {
         i6 = i10;
         break L8;
        }
       }
      }
     default:
      {
       ___shlim(i33, 0);
       do {
        i6 = HEAP32[i29 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
         HEAP32[i29 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i33) | 0;
       } while ((_isspace(i6) | 0) != 0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i14 = (HEAP32[i23 >> 2] | 0) + i10 + i6 - (HEAP32[i17 >> 2] | 0) | 0;
       i13 = i8;
      }
     }
     ___shlim(i33, i13);
     i6 = HEAP32[i29 >> 2] | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     if (i6 >>> 0 < i8 >>> 0) HEAP32[i29 >> 2] = i6 + 1; else {
      if ((___shgetc(i33) | 0) < 0) {
       i31 = 152;
       break L6;
      }
      i8 = HEAP32[i30 >> 2] | 0;
     }
     if (i8) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
     L67 : do switch (i9 | 0) {
     case 91:
     case 99:
     case 115:
      {
       i12 = (i9 | 0) == 99;
       L69 : do if ((i9 & 239 | 0) == 99) {
        _memset(i26 | 0, -1, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        if ((i9 | 0) == 115) {
         HEAP8[i19 >> 0] = 0;
         HEAP8[i18 >> 0] = 0;
         HEAP8[i18 + 1 >> 0] = 0;
         HEAP8[i18 + 2 >> 0] = 0;
         HEAP8[i18 + 3 >> 0] = 0;
         HEAP8[i18 + 4 >> 0] = 0;
        }
       } else {
        i35 = i5 + 1 | 0;
        i10 = (HEAP8[i35 >> 0] | 0) == 94;
        i6 = i10 & 1;
        i9 = i10 ? i35 : i5;
        i5 = i10 ? i5 + 2 | 0 : i35;
        _memset(i26 | 0, i10 & 1 | 0, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i21 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        case 93:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i22 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        default:
         i10 = (i6 ^ 1) & 255;
        }
        while (1) {
         i6 = HEAP8[i5 >> 0] | 0;
         L80 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i31 = 152;
           break L6;
          }
         case 93:
          break L69;
         case 45:
          {
           i9 = i5 + 1 | 0;
           i6 = HEAP8[i9 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L80;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i26 + i5 >> 0] = i10;
             i6 = HEAP8[i9 >> 0] | 0;
            } while ((i5 | 0) < (i6 & 255 | 0));
            i5 = i9;
           } else i5 = i9;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i26 + ((i6 & 255) + 1) >> 0] = i10;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i9 = i12 ? i13 + 1 | 0 : 31;
       i10 = (i11 | 0) == 1;
       i11 = (i4 | 0) != 0;
       L88 : do if (i10) {
        if (i11) {
         i2 = _malloc(i9 << 2) | 0;
         if (!i2) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
        } else i2 = i15;
        HEAP32[i27 >> 2] = 0;
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        L94 : while (1) {
         i8 = (i2 | 0) == 0;
         do {
          L98 : while (1) {
           i6 = HEAP32[i29 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i6 + 1) >> 0] | 0)) break L94;
           HEAP8[i16 >> 0] = i6;
           switch (_mbrtowc(i28, i16, 1, i27) | 0) {
           case -1:
            {
             i3 = 0;
             i31 = 152;
             break L6;
            }
           case -2:
            break;
           default:
            break L98;
           }
          }
          if (!i8) {
           HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i28 >> 2];
           i3 = i3 + 1 | 0;
          }
         } while (!(i11 & (i3 | 0) == (i9 | 0)));
         i3 = i9 << 1 | 1;
         i6 = _realloc(i2, i3 << 2) | 0;
         if (!i6) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
         i35 = i9;
         i9 = i3;
         i2 = i6;
         i3 = i35;
        }
        if (!(_mbsinit(i27) | 0)) {
         i3 = 0;
         i31 = 152;
         break L6;
        } else {
         i8 = i3;
         i3 = 0;
        }
       } else {
        if (i11) {
         i3 = _malloc(i9) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i31 = 152;
          break L6;
         } else i6 = 0;
         while (1) {
          do {
           i2 = HEAP32[i29 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
            i8 = i6;
            i2 = 0;
            break L88;
           }
           HEAP8[i3 + i6 >> 0] = i2;
           i6 = i6 + 1 | 0;
          } while ((i6 | 0) != (i9 | 0));
          i2 = i9 << 1 | 1;
          i6 = _realloc(i3, i2) | 0;
          if (!i6) {
           i2 = 0;
           i31 = 152;
           break L6;
          } else {
           i35 = i9;
           i9 = i2;
           i3 = i6;
           i6 = i35;
          }
         }
        }
        if (!i15) {
         i3 = i8;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i3 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = 0;
           i3 = 0;
           i2 = 0;
           break L88;
          }
          i3 = HEAP32[i30 >> 2] | 0;
         }
        } else {
         i3 = 0;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i8 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = i3;
           i3 = i15;
           i2 = 0;
           break L88;
          }
          HEAP8[i15 + i3 >> 0] = i2;
          i8 = HEAP32[i30 >> 2] | 0;
          i3 = i3 + 1 | 0;
         }
        }
       } while (0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i6 = i6 - (HEAP32[i17 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0;
       if (!i6) break L6;
       if (!((i6 | 0) == (i13 | 0) | i12 ^ 1)) break L6;
       do if (i11) if (i10) {
        HEAP32[i15 >> 2] = i2;
        break;
       } else {
        HEAP32[i15 >> 2] = i3;
        break;
       } while (0);
       if (!i12) {
        if (i2) HEAP32[i2 + (i8 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L67;
        }
        HEAP8[i3 + i8 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i31 = 134;
       break;
      }
     case 111:
      {
       i6 = 8;
       i31 = 134;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i31 = 134;
       break;
      }
     case 105:
      {
       i6 = 0;
       i31 = 134;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i33, i11, 0);
       if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
       if (i15) switch (i11 | 0) {
       case 0:
        {
         HEAPF32[i15 >> 2] = d7;
         break L67;
        }
       case 1:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       case 2:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       default:
        break L67;
       }
       break;
      }
     default:
      {}
     } while (0);
     L168 : do if ((i31 | 0) == 134) {
      i31 = 0;
      i6 = ___intscan(i33, i6, 0, -1, -1) | 0;
      if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
      if ((i15 | 0) != 0 & (i9 | 0) == 112) {
       HEAP32[i15 >> 2] = i6;
       break;
      }
      if (i15) switch (i11 | 0) {
      case -2:
       {
        HEAP8[i15 >> 0] = i6;
        break L168;
       }
      case -1:
       {
        HEAP16[i15 >> 1] = i6;
        break L168;
       }
      case 0:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 1:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 3:
       {
        i35 = i15;
        HEAP32[i35 >> 2] = i6;
        HEAP32[i35 + 4 >> 2] = tempRet0;
        break L168;
       }
      default:
       break L168;
      }
     } while (0);
     i1 = ((i15 | 0) != 0 & 1) + i1 | 0;
     i6 = (HEAP32[i23 >> 2] | 0) + i14 + (HEAP32[i29 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i4 & 1) | 0;
    ___shlim(i33, 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
     HEAP32[i29 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i33) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i31 = 21;
     break L6;
    }
    i6 = i10 + 1 | 0;
   } else {
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i33, 0);
    do {
     i4 = HEAP32[i29 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
      HEAP32[i29 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i33) | 0;
    } while ((_isspace(i4) | 0) != 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (HEAP32[i30 >> 2] | 0) {
     i4 = i4 + -1 | 0;
     HEAP32[i29 >> 2] = i4;
    }
    i6 = (HEAP32[i23 >> 2] | 0) + i10 + i4 - (HEAP32[i17 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i10 = i6;
  }
  if ((i31 | 0) == 21) {
   if (HEAP32[i30 >> 2] | 0) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = 0;
    i31 = 153;
   }
  } else if ((i31 | 0) == 152) if (!i1) {
   i1 = i4;
   i31 = 153;
  }
  if ((i31 | 0) == 153) {
   i4 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } else i1 = 0; while (0);
 if (i32) ___unlockfile(i33);
 STACKTOP = i34;
 return i1 | 0;
}

function __ZN16BuildControlBase13boxedDblClickEiii(i34, i3, i32, i33) {
 i34 = i34 | 0;
 i3 = i3 | 0;
 i32 = i32 | 0;
 i33 = i33 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i19 = i35 + 192 | 0;
 i24 = i35;
 if ((i3 | 0) == -1) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 if (!(HEAP8[i34 + 12 >> 0] | 0)) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 i29 = i34 + 8 | 0;
 i2 = (HEAP32[i29 >> 2] | 0) + 116 | 0;
 i30 = HEAP32[i2 >> 2] | 0;
 i31 = i34 + 14 | 0;
 i28 = (HEAP8[i34 + 15 >> 0] | 0) != 0 ^ (HEAP8[i31 >> 0] | 0) != 0;
 if (i28 ? (HEAP32[i30 + 32 >> 2] | 0) < 7 : 0) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 i6 = i19 + 32 | 0;
 HEAP32[i19 >> 2] = -1;
 HEAP32[i19 + 4 >> 2] = -1;
 HEAP32[i19 + 8 >> 2] = -1;
 HEAP32[i19 + 12 >> 2] = -1;
 HEAP32[i19 + 16 >> 2] = -1;
 HEAP32[i19 + 20 >> 2] = -1;
 HEAP32[i19 + 24 >> 2] = -1;
 HEAP32[i19 + 28 >> 2] = -1;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 i6 = i19 + 48 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 i6 = i19 + 64 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 i6 = i19 + 80 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 i6 = i3 >>> 16 & 255;
 i4 = i3 >>> 2 & 127;
 i7 = i3 >>> 9 & 127;
 i10 = HEAP32[i2 >> 2] | 0;
 switch (i3 & 3 | 0) {
 case 0:
  {
   i8 = i4;
   i3 = i6;
   i9 = i7;
   i5 = i6 + -1 | 0;
   i2 = i7;
   break;
  }
 case 1:
  {
   i8 = i6;
   i3 = i4;
   i9 = i7;
   i5 = i4;
   i4 = i6 + -1 | 0;
   i2 = i7;
   break;
  }
 case 2:
  {
   i8 = i7;
   i3 = i4;
   i9 = i6;
   i5 = i4;
   i4 = i7;
   i2 = i6 + -1 | 0;
   break;
  }
 default:
  {
   i8 = 0;
   i3 = 0;
   i9 = 0;
   i5 = 0;
   i4 = 0;
   i2 = 0;
  }
 }
 i20 = HEAP32[i10 + 12 >> 2] | 0;
 i25 = (Math_imul(i20, i8) | 0) + i3 | 0;
 i25 = i25 + (Math_imul(HEAP32[i10 + 24 >> 2] | 0, i9) | 0) | 0;
 i25 = i28 ^ (HEAP32[(HEAP32[i10 + 28 >> 2] | 0) + (i25 * 12 | 0) >> 2] | 0) == 1;
 i27 = i25 ? i5 : i3;
 i26 = i25 ? i4 : i8;
 i25 = i25 ? i2 : i9;
 if ((((i27 | 0) >= 1 ? !((i27 | 0) >= (i20 + -2 | 0) | (i26 | 0) < 1) : 0) ? !((i25 | 0) < 1 ? 1 : (i26 | 0) >= ((HEAP32[i10 + 16 >> 2] | 0) + -2 | 0)) : 0) ? (i25 | 0) < ((HEAP32[i10 + 20 >> 2] | 0) + -2 | 0) : 0) {
  HEAP32[i19 >> 2] = 2;
  HEAP32[i19 + 4 >> 2] = i25;
  i2 = i19 + 8 | 0;
  HEAP32[i2 >> 2] = i27;
  HEAP32[i19 + 12 >> 2] = i26;
  HEAP32[i19 + 16 >> 2] = 2;
  i3 = i25 + 1 | 0;
  HEAP32[i19 + 20 >> 2] = i3;
  i5 = i19 + 24 | 0;
  HEAP32[i5 >> 2] = i27;
  HEAP32[i19 + 28 >> 2] = i26;
  HEAP32[i19 + 32 >> 2] = 1;
  HEAP32[i19 + 36 >> 2] = i26;
  i6 = i19 + 40 | 0;
  HEAP32[i6 >> 2] = i27;
  HEAP32[i19 + 44 >> 2] = i25;
  HEAP32[i19 + 48 >> 2] = 1;
  i4 = i26 + 1 | 0;
  HEAP32[i19 + 52 >> 2] = i4;
  i7 = i19 + 56 | 0;
  HEAP32[i7 >> 2] = i27;
  HEAP32[i19 + 60 >> 2] = i25;
  HEAP32[i19 + 64 >> 2] = 0;
  HEAP32[i19 + 68 >> 2] = i27;
  i10 = i19 + 72 | 0;
  HEAP32[i10 >> 2] = i26;
  HEAP32[i19 + 76 >> 2] = i25;
  HEAP32[i19 + 80 >> 2] = 0;
  i8 = i27 + 1 | 0;
  HEAP32[i19 + 84 >> 2] = i8;
  i11 = i19 + 88 | 0;
  HEAP32[i11 >> 2] = i26;
  HEAP32[i19 + 92 >> 2] = i25;
  i9 = i27 >>> 0 < 50;
  do if (i9) {
   if (i26 >>> 0 < 50) {
    if (i25 >>> 0 < 50 ? (HEAP32[i30 + 1000136 + (i25 * 1e4 | 0) + (i27 * 200 | 0) + (i26 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i19;
     i3 = 0;
     i20 = 17;
     break;
    }
    if (i3 >>> 0 < 50 ? (HEAP32[i30 + 1000136 + (i3 * 1e4 | 0) + (i27 * 200 | 0) + (i26 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i19 + 16 | 0;
     i2 = i5;
     i3 = 1;
     i20 = 17;
     break;
    }
   }
   i2 = i19 + 32 | 0;
   if (i25 >>> 0 < 50) {
    if (i26 >>> 0 < 50 ? (HEAP32[i30 + 500136 + (i26 * 1e4 | 0) + (i27 * 200 | 0) + (i25 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i2;
     i2 = i6;
     i3 = 2;
     i20 = 17;
     break;
    }
    if (i4 >>> 0 < 50 ? (HEAP32[i30 + 500136 + (i4 * 1e4 | 0) + (i27 * 200 | 0) + (i25 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i19 + 48 | 0;
     i2 = i7;
     i3 = 3;
     i20 = 17;
    } else i20 = 105;
   } else i20 = 105;
  } else i20 = 105; while (0);
  do if ((i20 | 0) == 105) {
   i2 = i19 + 64 | 0;
   if (i26 >>> 0 < 50 & i25 >>> 0 < 50) {
    if (i9 ? (HEAP32[i30 + 136 + (i27 * 1e4 | 0) + (i26 * 200 | 0) + (i25 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i2;
     i2 = i10;
     i3 = 4;
     i20 = 17;
     break;
    }
    if (i8 >>> 0 < 50 ? (HEAP32[i30 + 136 + (i8 * 1e4 | 0) + (i26 * 200 | 0) + (i25 << 2) >> 2] & 65535 | 0) == 514 : 0) {
     i4 = i19 + 80 | 0;
     i2 = i11;
     i3 = 5;
     i20 = 17;
    } else {
     i8 = -1;
     i9 = -1;
     i7 = -1;
     i2 = -1;
     i10 = 0;
    }
   } else {
    i8 = -1;
    i9 = -1;
    i7 = -1;
    i2 = -1;
    i10 = 0;
   }
  } while (0);
  if ((i20 | 0) == 17) {
   i8 = HEAP32[i4 >> 2] | 0;
   i9 = HEAP32[i19 + (i3 << 4) + 4 >> 2] | 0;
   i7 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i19 + (i3 << 4) + 12 >> 2] | 0;
   i10 = 1;
  }
  i11 = i24 + 32 | 0;
  HEAP32[i24 >> 2] = -1;
  HEAP32[i24 + 4 >> 2] = -1;
  HEAP32[i24 + 8 >> 2] = -1;
  HEAP32[i24 + 12 >> 2] = -1;
  HEAP32[i24 + 16 >> 2] = -1;
  HEAP32[i24 + 20 >> 2] = -1;
  HEAP32[i24 + 24 >> 2] = -1;
  HEAP32[i24 + 28 >> 2] = -1;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 48 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 64 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 80 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 96 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 112 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 128 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 144 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 160 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  i11 = i24 + 176 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  HEAP32[i11 + 8 >> 2] = -1;
  HEAP32[i11 + 12 >> 2] = -1;
  if (i10) {
   i3 = 0;
   i5 = 0;
   while (1) {
    i4 = i3;
    i6 = 0;
    while (1) {
     HEAP32[i24 + (i4 << 4) >> 2] = HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) >> 2];
     i11 = HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 4 >> 2] | 0;
     HEAP32[i24 + (i4 << 4) + 4 >> 2] = ((i11 | 0) == 0 ? i9 : 0) + (HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 8 >> 2] | 0) + ((i11 | 0) == 1 ? i7 : 0) + ((i11 | 0) == 2 ? i2 : 0);
     i11 = HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 12 >> 2] | 0;
     HEAP32[i24 + (i4 << 4) + 8 >> 2] = ((i11 | 0) == 0 ? i9 : 0) + (HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 16 >> 2] | 0) + ((i11 | 0) == 1 ? i7 : 0) + ((i11 | 0) == 2 ? i2 : 0);
     i11 = HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 20 >> 2] | 0;
     HEAP32[i24 + (i4 << 4) + 12 >> 2] = ((i11 | 0) == 0 ? i9 : 0) + (HEAP32[7488 + (i8 * 336 | 0) + (i5 * 84 | 0) + (i6 * 28 | 0) + 24 >> 2] | 0) + ((i11 | 0) == 1 ? i7 : 0) + ((i11 | 0) == 2 ? i2 : 0);
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == 3) break; else i4 = i4 + 1 | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == 4) {
     i4 = 0;
     break;
    } else i3 = i3 + 3 | 0;
   }
   do {
    i2 = i24 + (i4 << 4) | 0;
    i3 = HEAP32[i24 + (i4 << 4) + 8 >> 2] | 0;
    if (!((((i3 >>> 0 < 50 ? (i12 = HEAP32[i24 + (i4 << 4) + 12 >> 2] | 0, i12 >>> 0 < 50) : 0) ? (i13 = HEAP32[i24 + (i4 << 4) + 4 >> 2] | 0, i13 >>> 0 < 50) : 0) ? (i14 = HEAP32[i2 >> 2] | 0, i14 >>> 0 < 3) : 0) ? (HEAP32[i30 + 136 + (i14 * 5e5 | 0) + (i13 * 1e4 | 0) + (i3 * 200 | 0) + (i12 << 2) >> 2] & 65280 | 0) == 512 : 0)) HEAP32[i2 >> 2] = -1;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 12);
  }
  i13 = i30 + 32 | 0;
  i5 = i27;
  i2 = 0;
  while (1) {
   i4 = i19 + (i2 << 4) | 0;
   do if (i5 >>> 0 < 50 ? (i15 = HEAP32[i19 + (i2 << 4) + 12 >> 2] | 0, i15 >>> 0 < 50) : 0) {
    i3 = HEAP32[i19 + (i2 << 4) + 4 >> 2] | 0;
    if ((i3 >>> 0 < 50 ? (i16 = HEAP32[i4 >> 2] | 0, i16 >>> 0 < 3) : 0) ? (i17 = i30 + 136 + (i16 * 5e5 | 0) + (i3 * 1e4 | 0) + (i5 * 200 | 0) + (i15 << 2) | 0, (HEAP32[i17 >> 2] & 65280 | 0) == 512) : 0) {
     HEAP32[i17 >> 2] = 0;
     i3 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
     break;
    }
    i3 = HEAP32[i19 + (i2 << 4) + 4 >> 2] | 0;
    if (i3 >>> 0 < 50 ? (i18 = HEAP32[i4 >> 2] | 0, i18 >>> 0 < 3) : 0) {
     HEAP32[i30 + 136 + (i18 * 5e5 | 0) + (i3 * 1e4 | 0) + (i5 * 200 | 0) + (i15 << 2) >> 2] = 513;
     i20 = 39;
    } else i20 = 39;
   } else i20 = 39; while (0);
   if ((i20 | 0) == 39) {
    i20 = 0;
    i3 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i13 >> 2] = i3;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == 6) break;
   i5 = HEAP32[i19 + (i2 << 4) + 8 >> 2] | 0;
  }
  L79 : do if (i10) {
   i2 = 0;
   while (1) {
    i3 = HEAP32[i24 + (i2 << 4) >> 2] | 0;
    if (((((i3 | 0) != -1 ? (i21 = HEAP32[i24 + (i2 << 4) + 8 >> 2] | 0, i21 >>> 0 < 50) : 0) ? (i22 = HEAP32[i24 + (i2 << 4) + 12 >> 2] | 0, i22 >>> 0 < 50) : 0) ? (i23 = HEAP32[i24 + (i2 << 4) + 4 >> 2] | 0, i3 >>> 0 < 3 & i23 >>> 0 < 50) : 0) ? (i1 = i30 + 136 + (i3 * 5e5 | 0) + (i23 * 1e4 | 0) + (i21 * 200 | 0) + (i22 << 2) | 0, (HEAP32[i1 >> 2] & 65280 | 0) == 512) : 0) {
     i20 = 48;
     break;
    }
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= 12) {
     i1 = i2;
     break;
    }
   }
   if ((i20 | 0) == 48) {
    HEAP32[i1 >> 2] = 514;
    break;
   }
   if ((i1 | 0) == 12) {
    i1 = HEAP32[i30 + 40 >> 2] | 0;
    i6 = HEAP32[i30 + 44 >> 2] | 0;
    i7 = HEAP32[i30 + 48 >> 2] | 0;
    i8 = HEAP32[i30 + 52 >> 2] | 0;
    i9 = HEAP32[i30 + 56 >> 2] | 0;
    i10 = HEAP32[i30 + 60 >> 2] | 0;
    L92 : do if ((i1 | 0) < (i6 | 0)) {
     i11 = (i7 | 0) < (i8 | 0);
     i12 = (i9 | 0) < (i10 | 0);
     i3 = i1;
     while (1) {
      if (i11) {
       i4 = i3 >>> 0 < 50;
       i2 = i7;
       do {
        if (i12) {
         i5 = i2 >>> 0 < 50;
         i1 = i9;
         do {
          if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i30 + 136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 513 : 0) {
           i4 = 0;
           break L92;
          }
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) < (i10 | 0));
        }
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) < (i8 | 0));
      }
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i6 | 0)) {
       i20 = 63;
       break;
      }
     }
    } else i20 = 63; while (0);
    L109 : do if ((i20 | 0) == 63) {
     i1 = HEAP32[i30 + 64 >> 2] | 0;
     i6 = HEAP32[i30 + 68 >> 2] | 0;
     i7 = HEAP32[i30 + 72 >> 2] | 0;
     i8 = HEAP32[i30 + 76 >> 2] | 0;
     i9 = HEAP32[i30 + 80 >> 2] | 0;
     i10 = HEAP32[i30 + 84 >> 2] | 0;
     if ((i1 | 0) < (i6 | 0)) {
      i11 = (i7 | 0) < (i8 | 0);
      i12 = (i9 | 0) < (i10 | 0);
      i3 = i1;
      do {
       if (i11) {
        i4 = i3 >>> 0 < 50;
        i2 = i7;
        do {
         if (i12) {
          i5 = i2 >>> 0 < 50;
          i1 = i9;
          do {
           if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i30 + 500136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 513 : 0) {
            i4 = 1;
            break L109;
           }
           i1 = i1 + 1 | 0;
          } while ((i1 | 0) < (i10 | 0));
         }
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) < (i8 | 0));
       }
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i6 | 0));
     }
     i1 = HEAP32[i30 + 88 >> 2] | 0;
     i6 = HEAP32[i30 + 92 >> 2] | 0;
     i7 = HEAP32[i30 + 96 >> 2] | 0;
     i8 = HEAP32[i30 + 100 >> 2] | 0;
     i9 = HEAP32[i30 + 104 >> 2] | 0;
     i10 = HEAP32[i30 + 108 >> 2] | 0;
     if ((i1 | 0) >= (i6 | 0)) break L79;
     i11 = (i7 | 0) < (i8 | 0);
     i12 = (i9 | 0) < (i10 | 0);
     i3 = i1;
     while (1) {
      if (i11) {
       i4 = i3 >>> 0 < 50;
       i2 = i7;
       do {
        if (i12) {
         i5 = i2 >>> 0 < 50;
         i1 = i9;
         do {
          if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i30 + 1000136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 513 : 0) {
           i4 = 2;
           break L109;
          }
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) < (i10 | 0));
        }
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) < (i8 | 0));
      }
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i6 | 0)) break L79;
     }
    } while (0);
    HEAP32[i30 + 136 + (i4 * 5e5 | 0) + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] = 514;
   }
  } while (0);
  i1 = (Math_imul(HEAP32[i30 + 12 >> 2] | 0, i26) | 0) + i27 | 0;
  i1 = i1 + (Math_imul(HEAP32[i30 + 24 >> 2] | 0, i25) | 0) | 0;
  HEAP32[(HEAP32[i30 + 28 >> 2] | 0) + (i1 * 12 | 0) >> 2] = i28 & 1 ^ 1;
  HEAP8[i30 + 1500136 >> 0] = 1;
  HEAP8[i30 + 1500137 >> 0] = 1;
  HEAP8[i30 + 1500296 >> 0] = 0;
  __ZN10BuildWorld12reClacLimitsEv(i30);
  i1 = HEAP32[(HEAP32[i29 >> 2] | 0) + 116 >> 2] | 0;
  i2 = i1 + 1500296 | 0;
  if (!(HEAP8[i2 >> 0] | 0)) {
   i30 = __ZN5Shape8generateEPK10BuildWorld(i1 + 1500140 | 0, i1) | 0;
   HEAP32[i1 + 1500292 >> 2] = i30;
   HEAP8[i2 >> 0] = 1;
   i1 = i30;
  } else i1 = HEAP32[i1 + 1500292 >> 2] | 0;
  if ((i1 | 0) == 3) {
   HEAPF32[i34 + 40 >> 2] = 1.0;
   HEAPF32[i34 + 44 >> 2] = -.10000000149011612;
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i34 >> 2] | 0) + 36 >> 2] & 63](i34, HEAP32[i13 >> 2] | 0);
  __ZN16BuildControlBase11makeBuffersEv(i34);
  i2 = (HEAP8[i31 >> 0] | 0) != 0;
  if (!(HEAP8[i34 + 13 >> 0] | 0)) {
   if ((i32 | 0) == -1) i1 = HEAP32[i34 + 20 >> 2] | 0; else i1 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i34 + 4 >> 2] | 0, i32, i33) | 0;
   __ZN16BuildControlBase15choiseMouseMoveEib(i34, i1, i2) | 0;
  }
  i1 = 1;
 } else i1 = 0;
 i34 = i1;
 STACKTOP = i35;
 return i34 | 0;
}

function __ZN5Shape8loadFromEP6MyFile(i25, i24) {
 i25 = i25 | 0;
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 i32 = i38 + 224 | 0;
 i31 = i38 + 216 | 0;
 i30 = i38 + 208 | 0;
 i29 = i38 + 200 | 0;
 i28 = i38 + 192 | 0;
 i27 = i38 + 184 | 0;
 i26 = i38 + 168 | 0;
 i22 = i38 + 160 | 0;
 i21 = i38 + 136 | 0;
 i18 = i38 + 128 | 0;
 i17 = i38 + 112 | 0;
 i15 = i38 + 96 | 0;
 i13 = i38 + 88 | 0;
 i12 = i38 + 80 | 0;
 i11 = i38 + 72 | 0;
 i10 = i38 + 56 | 0;
 i9 = i38 + 48 | 0;
 i8 = i38 + 40 | 0;
 i5 = i38 + 32 | 0;
 i6 = i38 + 24 | 0;
 i4 = i38 + 16 | 0;
 i3 = i38 + 8 | 0;
 i2 = i38;
 i20 = i38 + 232 | 0;
 i7 = i38 + 228 | 0;
 i33 = i25 + 44 | 0;
 i1 = HEAP32[i33 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i33 >> 2] = 0;
 i34 = i25 + 48 | 0;
 i1 = HEAP32[i34 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i34 >> 2] = 0;
 i35 = i25 + 52 | 0;
 i1 = HEAP32[i35 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i35 >> 2] = 0;
 i37 = i25 + 56 | 0;
 i1 = HEAP32[i37 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i37 >> 2] = 0;
 i36 = i25 + 24 | 0;
 HEAP32[i36 >> 2] = 0;
 HEAP32[i36 + 4 >> 2] = 0;
 HEAP32[i36 + 8 >> 2] = 0;
 HEAP32[i36 + 12 >> 2] = 0;
 i19 = i24 + 12 | 0;
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if (!(__ZN6MyFile10seekHeaderEPKc(i24, 21699) | 0)) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i2 >> 2] = 58;
 HEAP32[i2 + 4 >> 2] = 21716;
 _sprintf(i20, 21616, i2) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i3 >> 2] = i36;
 __ZN6MyFile8readNumsEiz(i24, 1, i3) | 0;
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i4 >> 2] = 58;
 HEAP32[i4 + 4 >> 2] = 21724;
 _sprintf(i20, 21616, i4) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i16 = i25 + 28 | 0;
 HEAP32[i6 >> 2] = i16;
 __ZN6MyFile8readNumsEiz(i24, 1, i6) | 0;
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i5 >> 2] = 58;
 HEAP32[i5 + 4 >> 2] = 21732;
 _sprintf(i20, 21616, i5) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i23 = i25 + 32 | 0;
 HEAP32[i8 >> 2] = i23;
 __ZN6MyFile8readNumsEiz(i24, 1, i8) | 0;
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i9 >> 2] = 58;
 HEAP32[i9 + 4 >> 2] = 21621;
 _sprintf(i20, 21616, i9) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i10 >> 2] = i25 + 12;
 HEAP32[i10 + 4 >> 2] = i25 + 16;
 HEAP32[i10 + 8 >> 2] = i25 + 20;
 __ZN6MyFile8readNumsEiz(i24, 3, i10) | 0;
 do if ((HEAP32[i19 >> 2] | 0) == 1) {
  HEAP32[i11 >> 2] = 58;
  HEAP32[i11 + 4 >> 2] = 21742;
  _sprintf(i20, 21616, i11) | 0;
  if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
   i14 = 32;
   break;
  }
  if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
   i14 = 32;
   break;
  }
  HEAP32[i12 >> 2] = i7;
  __ZN6MyFile8readNumsEiz(i24, 1, i12) | 0;
  HEAP8[i25 + 40 >> 0] = (HEAP32[i7 >> 2] | 0) != 0 & 1;
 } else i14 = 32; while (0);
 if ((i14 | 0) == 32) HEAP8[i25 + 40 >> 0] = 0;
 if ((HEAP32[i19 >> 2] | 0) != 1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i13 >> 2] = 58;
 HEAP32[i13 + 4 >> 2] = 21755;
 _sprintf(i20, 21616, i13) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i1 = HEAP32[i36 >> 2] | 0;
 i2 = __Znaj(i1 >>> 0 > 22845570 ? -1 : i1 * 188 | 0) | 0;
 L78 : do if (!i1) HEAP32[i33 >> 2] = i2; else {
  i3 = i2 + (i1 * 188 | 0) | 0;
  i4 = i2;
  do {
   HEAP32[i4 >> 2] = -1;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = 0;
   HEAP32[i4 + 16 >> 2] = 2;
   HEAP32[i4 + 76 >> 2] = 0;
   HEAP32[i4 + 80 >> 2] = 0;
   HEAP32[i4 + 88 >> 2] = 0;
   HEAP32[i4 + 92 >> 2] = 0;
   HEAP32[i4 + 96 >> 2] = 0;
   HEAP32[i4 + 104 >> 2] = 0;
   HEAP32[i4 + 108 >> 2] = 0;
   HEAP32[i4 + 116 >> 2] = 0;
   HEAP32[i4 + 120 >> 2] = 0;
   HEAP32[i4 + 124 >> 2] = 0;
   HEAP32[i4 + 132 >> 2] = 0;
   HEAP32[i4 + 136 >> 2] = 0;
   HEAP32[i4 + 144 >> 2] = 0;
   HEAP32[i4 + 148 >> 2] = 0;
   HEAP32[i4 + 152 >> 2] = 0;
   HEAP32[i4 + 160 >> 2] = 0;
   HEAP32[i4 + 164 >> 2] = 0;
   HEAP32[i4 + 172 >> 2] = 0;
   HEAP32[i4 + 176 >> 2] = 0;
   HEAP32[i4 + 180 >> 2] = 0;
   i4 = i4 + 188 | 0;
  } while ((i4 | 0) != (i3 | 0));
  HEAP32[i33 >> 2] = i2;
  if ((i1 | 0) <= 0) break;
  HEAP32[i15 >> 2] = i2;
  HEAP32[i15 + 4 >> 2] = i2 + 4;
  HEAP32[i15 + 8 >> 2] = i2 + 8;
  HEAP32[i15 + 12 >> 2] = i2 + 12;
  if ((__ZN6MyFile8readNumsEiz(i24, 4, i15) | 0) >= 4) {
   i1 = 1;
   while (1) {
    if ((i1 | 0) >= (HEAP32[i36 >> 2] | 0)) break L78;
    i15 = HEAP32[i33 >> 2] | 0;
    HEAP32[i17 >> 2] = i15 + (i1 * 188 | 0);
    HEAP32[i17 + 4 >> 2] = i15 + (i1 * 188 | 0) + 4;
    HEAP32[i17 + 8 >> 2] = i15 + (i1 * 188 | 0) + 8;
    HEAP32[i17 + 12 >> 2] = i15 + (i1 * 188 | 0) + 12;
    if ((__ZN6MyFile8readNumsEiz(i24, 4, i17) | 0) < 4) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = HEAP32[i33 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i33 >> 2] = 0;
  i1 = HEAP32[i34 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i34 >> 2] = 0;
  i1 = HEAP32[i35 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i35 >> 2] = 0;
  i1 = HEAP32[i37 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i37 >> 2] = 0;
  HEAP32[i36 >> 2] = 0;
  HEAP32[i36 + 4 >> 2] = 0;
  HEAP32[i36 + 8 >> 2] = 0;
  HEAP32[i36 + 12 >> 2] = 0;
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 } while (0);
 do if ((HEAP32[i19 >> 2] | 0) == 1) {
  HEAP32[i18 >> 2] = 58;
  HEAP32[i18 + 4 >> 2] = 21761;
  _sprintf(i20, 21616, i18) | 0;
  if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) break;
  if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) break;
  i1 = HEAP32[i16 >> 2] | 0;
  i3 = __Znaj(i1 >>> 0 > 178956970 ? -1 : i1 * 24 | 0) | 0;
  L110 : do if (!i1) HEAP32[i34 >> 2] = i3; else {
   i1 = i3 + (i1 * 24 | 0) | 0;
   i2 = i3;
   do {
    HEAP32[i2 >> 2] = -1;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = 0;
    HEAP32[i2 + 12 >> 2] = 0;
    HEAP32[i2 + 16 >> 2] = -1;
    HEAP32[i2 + 20 >> 2] = -1;
    i2 = i2 + 24 | 0;
   } while ((i2 | 0) != (i1 | 0));
   i18 = HEAP32[i16 >> 2] | 0;
   HEAP32[i34 >> 2] = i3;
   if ((i18 | 0) <= 0) break;
   i2 = i3;
   i1 = 0;
   while (1) {
    HEAP32[i21 >> 2] = i2 + (i1 * 24 | 0);
    HEAP32[i21 + 4 >> 2] = i2 + (i1 * 24 | 0) + 4;
    HEAP32[i21 + 8 >> 2] = i2 + (i1 * 24 | 0) + 8;
    HEAP32[i21 + 12 >> 2] = i2 + (i1 * 24 | 0) + 12;
    HEAP32[i21 + 16 >> 2] = i2 + (i1 * 24 | 0) + 16;
    HEAP32[i21 + 20 >> 2] = i2 + (i1 * 24 | 0) + 20;
    i1 = i1 + 1 | 0;
    if ((__ZN6MyFile8readNumsEiz(i24, 6, i21) | 0) < 6) break;
    if ((i1 | 0) >= (HEAP32[i16 >> 2] | 0)) break L110;
    i2 = HEAP32[i34 >> 2] | 0;
   }
   i1 = HEAP32[i33 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i33 >> 2] = 0;
   i1 = HEAP32[i34 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i34 >> 2] = 0;
   i1 = HEAP32[i35 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i35 >> 2] = 0;
   i1 = HEAP32[i37 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i37 >> 2] = 0;
   HEAP32[i36 >> 2] = 0;
   HEAP32[i36 + 4 >> 2] = 0;
   HEAP32[i36 + 8 >> 2] = 0;
   HEAP32[i36 + 12 >> 2] = 0;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  } while (0);
  do if ((HEAP32[i19 >> 2] | 0) == 1) {
   HEAP32[i22 >> 2] = 58;
   HEAP32[i22 + 4 >> 2] = 21767;
   _sprintf(i20, 21616, i22) | 0;
   if ((__ZN6MyFile10seekStringEPKcS1_(i24, i20, 21626) | 0) == -1) break;
   if ((__ZN6MyFile10seekStringEPKcS1_(i24, 21628, 21630) | 0) == -1) break;
   i1 = HEAP32[i23 >> 2] | 0;
   i3 = __Znaj(i1 >>> 0 > 107374182 ? -1 : i1 * 40 | 0) | 0;
   L142 : do if (i1) {
    i1 = i3 + (i1 * 40 | 0) | 0;
    i2 = i3;
    do {
     i22 = i2 + 16 | 0;
     HEAP32[i2 >> 2] = 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = 0;
     HEAP32[i2 + 12 >> 2] = 0;
     HEAP32[i22 >> 2] = -1;
     HEAP32[i22 + 4 >> 2] = -1;
     HEAP32[i22 + 8 >> 2] = -1;
     HEAP32[i22 + 12 >> 2] = -1;
     HEAP32[i22 + 16 >> 2] = -1;
     HEAP32[i22 + 20 >> 2] = -1;
     i2 = i2 + 40 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i22 = (HEAP32[i23 >> 2] | 0) > 0;
    HEAP32[i35 >> 2] = i3;
    if (!i22) break;
    i7 = 0;
    while (1) {
     HEAP32[i26 >> 2] = i3 + (i7 * 40 | 0);
     HEAP32[i26 + 4 >> 2] = i3 + (i7 * 40 | 0) + 4;
     HEAP32[i26 + 8 >> 2] = i3 + (i7 * 40 | 0) + 8;
     if ((__ZN6MyFile8readNumsEiz(i24, 3, i26) | 0) < 3) {
      i14 = 106;
      break;
     }
     HEAP32[i27 >> 2] = (HEAP32[i35 >> 2] | 0) + (i7 * 40 | 0) + 16;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i27) | 0) < 1) {
      i14 = 115;
      break;
     }
     i22 = HEAP32[i35 >> 2] | 0;
     i1 = HEAP32[i22 + (i7 * 40 | 0) + 16 >> 2] | 0;
     HEAP32[i28 >> 2] = i22 + (i7 * 40 | 0) + 20;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i28) | 0) < 1) {
      i14 = 115;
      break;
     }
     i22 = HEAP32[i35 >> 2] | 0;
     i2 = HEAP32[i22 + (i7 * 40 | 0) + 20 >> 2] | 0;
     HEAP32[i29 >> 2] = i22 + (i7 * 40 | 0) + 24;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i29) | 0) < 1) {
      i14 = 115;
      break;
     }
     i22 = HEAP32[i35 >> 2] | 0;
     i4 = HEAP32[i22 + (i7 * 40 | 0) + 24 >> 2] | 0;
     HEAP32[i30 >> 2] = i22 + (i7 * 40 | 0) + 28;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i30) | 0) < 1) {
      i14 = 115;
      break;
     }
     i22 = HEAP32[i35 >> 2] | 0;
     i5 = HEAP32[i22 + (i7 * 40 | 0) + 28 >> 2] | 0;
     HEAP32[i31 >> 2] = i22 + (i7 * 40 | 0) + 32;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i31) | 0) < 1) {
      i14 = 115;
      break;
     }
     i22 = HEAP32[i35 >> 2] | 0;
     i6 = HEAP32[i22 + (i7 * 40 | 0) + 32 >> 2] | 0;
     HEAP32[i32 >> 2] = i22 + (i7 * 40 | 0) + 36;
     if ((__ZN6MyFile8readNumsEiz(i24, 1, i32) | 0) < 1) {
      i14 = 115;
      break;
     }
     i3 = HEAP32[i35 >> 2] | 0;
     HEAP32[i3 + (i7 * 40 | 0) + 12 >> 2] = ((HEAP32[i3 + (i7 * 40 | 0) + 36 >> 2] | 0) != -1 & 1) + (((i6 | 0) != -1 & 1) + (((i5 | 0) != -1 & 1) + (((i4 | 0) != -1 & 1) + (((i2 | 0) != -1 & 1) + ((i1 | 0) != -1 & 1)))));
     i7 = i7 + 1 | 0;
     if ((i7 | 0) >= (HEAP32[i23 >> 2] | 0)) break L142;
    }
    if ((i14 | 0) == 106) {
     i1 = HEAP32[i33 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i33 >> 2] = 0;
     i1 = HEAP32[i34 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i34 >> 2] = 0;
     i1 = HEAP32[i35 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i35 >> 2] = 0;
     i1 = HEAP32[i37 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i37 >> 2] = 0;
     HEAP32[i36 >> 2] = 0;
     HEAP32[i36 + 4 >> 2] = 0;
     HEAP32[i36 + 8 >> 2] = 0;
     HEAP32[i36 + 12 >> 2] = 0;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    } else if ((i14 | 0) == 115) {
     i1 = HEAP32[i33 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i33 >> 2] = 0;
     i1 = HEAP32[i34 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i34 >> 2] = 0;
     i1 = HEAP32[i35 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i35 >> 2] = 0;
     i1 = HEAP32[i37 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i37 >> 2] = 0;
     HEAP32[i36 >> 2] = 0;
     HEAP32[i36 + 4 >> 2] = 0;
     HEAP32[i36 + 8 >> 2] = 0;
     HEAP32[i36 + 12 >> 2] = 0;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   } else HEAP32[i35 >> 2] = i3; while (0);
   __ZN5Shape14makeReverseNeiEv(i25);
   __ZN5Shape19makeVolumeAndFacingEv(i25);
   i37 = 1;
   STACKTOP = i38;
   return i37 | 0;
  } while (0);
  i1 = HEAP32[i33 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i33 >> 2] = 0;
  i1 = HEAP32[i34 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i34 >> 2] = 0;
  i1 = HEAP32[i35 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i35 >> 2] = 0;
  i1 = HEAP32[i37 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i37 >> 2] = 0;
  HEAP32[i36 >> 2] = 0;
  HEAP32[i36 + 4 >> 2] = 0;
  HEAP32[i36 + 8 >> 2] = 0;
  HEAP32[i36 + 12 >> 2] = 0;
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 } while (0);
 i1 = HEAP32[i33 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i33 >> 2] = 0;
 i1 = HEAP32[i34 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i34 >> 2] = 0;
 i1 = HEAP32[i35 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i35 >> 2] = 0;
 i1 = HEAP32[i37 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i37 >> 2] = 0;
 HEAP32[i36 >> 2] = 0;
 HEAP32[i36 + 4 >> 2] = 0;
 HEAP32[i36 + 8 >> 2] = 0;
 HEAP32[i36 + 12 >> 2] = 0;
 i37 = 0;
 STACKTOP = i38;
 return i37 | 0;
}

function __ZN12BaseGLWidget9translateEii(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i23 = i25 + 128 | 0;
 i24 = i25 + 64 | 0;
 i22 = i25;
 d5 = +HEAPF64[i4 + 272 >> 3];
 d3 = +(i1 | 0) / d5;
 d5 = +(i2 | 0) / d5;
 i2 = i22;
 i20 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i20 | 0));
 i21 = i4 + 108 | 0;
 if ((i21 | 0) != (i22 | 0)) {
  i2 = i22;
  i1 = i21;
  i20 = i2 + 64 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i20 | 0));
 }
 i2 = i21;
 i20 = i2 + 60 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i20 | 0));
 HEAPF32[i21 >> 2] = 1.0;
 HEAPF32[i4 + 128 >> 2] = 1.0;
 HEAPF32[i4 + 148 >> 2] = 1.0;
 HEAPF32[i4 + 168 >> 2] = 1.0;
 switch (HEAP32[i4 + 220 >> 2] | 0) {
 case 0:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d12 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d12 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d18 + d19 + d15;
    d14 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d12 + d14 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d14 + d18) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d3 * d17 + 0.0 + d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 case 1:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d18 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d14 = d18 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d14 + d19 + d15;
    d17 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d18 + d17 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d17 + d14) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d17 + d3 * d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 case 2:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d15 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d13 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d13 * 0.0;
    i4 = i1 + 8 | 0;
    d19 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d14 = d19 * 0.0;
    i20 = i1 + 12 | 0;
    d17 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d16 = d17 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d15 + 0.0 + d18 + d14 + d16;
    d15 = d15 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d13 + d15 + d14 + d16;
    d18 = d15 + d18;
    HEAPF32[i23 + (i4 << 2) >> 2] = d19 + d18 + d16;
    HEAPF32[i23 + (i20 << 2) >> 2] = d17 + (d18 + d3 * d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 case 3:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d12 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d12 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d18 + d19 + d15;
    d14 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d12 + d14 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d14 + d18) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d3 * d17 + 0.0 + d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   d3 = d5;
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d18 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d14 = d18 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d14 + d19 + d15;
    d17 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d18 + d17 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d17 + d14) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d17 - d3 * d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 case 4:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d12 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d12 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d18 + d19 + d15;
    d14 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d12 + d14 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d14 + d18) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d3 * d17 + 0.0 + d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   d3 = d5;
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d15 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d13 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d13 * 0.0;
    i4 = i1 + 8 | 0;
    d19 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d14 = d19 * 0.0;
    i20 = i1 + 12 | 0;
    d17 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d16 = d17 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d15 + 0.0 + d18 + d14 + d16;
    d15 = d15 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d13 + d15 + d14 + d16;
    d18 = d15 + d18;
    HEAPF32[i23 + (i4 << 2) >> 2] = d19 + d18 + d16;
    HEAPF32[i23 + (i20 << 2) >> 2] = d17 + (d18 + d3 * d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 case 5:
  {
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d15 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d13 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d18 = d13 * 0.0;
    i4 = i1 + 8 | 0;
    d19 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d14 = d19 * 0.0;
    i20 = i1 + 12 | 0;
    d17 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d16 = d17 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d15 + 0.0 + d18 + d14 + d16;
    d15 = d15 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d13 + d15 + d14 + d16;
    d18 = d15 + d18;
    HEAPF32[i23 + (i4 << 2) >> 2] = d19 + d18 + d16;
    HEAPF32[i23 + (i20 << 2) >> 2] = d17 + (d18 + d3 * d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   d3 = d5;
   i2 = i24;
   i1 = i21;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i2 = i23;
   i20 = i2 + 64 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i20 | 0));
   i1 = 0;
   do {
    d17 = +HEAPF32[i24 + (i1 << 2) >> 2];
    i2 = i1 + 4 | 0;
    d18 = +HEAPF32[i24 + (i2 << 2) >> 2];
    d14 = d18 * 0.0;
    i4 = i1 + 8 | 0;
    d13 = +HEAPF32[i24 + (i4 << 2) >> 2];
    d19 = d13 * 0.0;
    i20 = i1 + 12 | 0;
    d16 = +HEAPF32[i24 + (i20 << 2) >> 2];
    d15 = d16 * 0.0;
    HEAPF32[i23 + (i1 << 2) >> 2] = d17 + 0.0 + d14 + d19 + d15;
    d17 = d17 * 0.0 + 0.0;
    HEAPF32[i23 + (i2 << 2) >> 2] = d18 + d17 + d19 + d15;
    HEAPF32[i23 + (i4 << 2) >> 2] = d13 + (d17 + d14) + d15;
    HEAPF32[i23 + (i20 << 2) >> 2] = d16 + (d17 - d3 * d18 + d19);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 4);
   if ((i23 | 0) != (i21 | 0)) {
    i2 = i21;
    i1 = i23;
    i20 = i2 + 64 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i20 | 0));
   }
   break;
  }
 default:
  {}
 }
 i2 = i24;
 i1 = i21;
 i20 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i20 | 0));
 d5 = +HEAPF32[i22 >> 2];
 d6 = +HEAPF32[i22 + 4 >> 2];
 d7 = +HEAPF32[i22 + 8 >> 2];
 d8 = +HEAPF32[i22 + 12 >> 2];
 d9 = +HEAPF32[i22 + 16 >> 2];
 d10 = +HEAPF32[i22 + 20 >> 2];
 d11 = +HEAPF32[i22 + 24 >> 2];
 d12 = +HEAPF32[i22 + 28 >> 2];
 d13 = +HEAPF32[i22 + 32 >> 2];
 d14 = +HEAPF32[i22 + 36 >> 2];
 d15 = +HEAPF32[i22 + 40 >> 2];
 d16 = +HEAPF32[i22 + 44 >> 2];
 d17 = +HEAPF32[i22 + 48 >> 2];
 d18 = +HEAPF32[i22 + 52 >> 2];
 d19 = +HEAPF32[i22 + 56 >> 2];
 d3 = +HEAPF32[i22 + 60 >> 2];
 i2 = i23;
 i20 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i20 | 0));
 i1 = 0;
 do {
  d29 = +HEAPF32[i24 + (i1 << 2) >> 2];
  i4 = i1 + 4 | 0;
  d28 = +HEAPF32[i24 + (i4 << 2) >> 2];
  i20 = i1 + 8 | 0;
  d27 = +HEAPF32[i24 + (i20 << 2) >> 2];
  i22 = i1 + 12 | 0;
  d26 = +HEAPF32[i24 + (i22 << 2) >> 2];
  HEAPF32[i23 + (i1 << 2) >> 2] = d5 * d29 + 0.0 + d6 * d28 + d7 * d27 + d8 * d26;
  HEAPF32[i23 + (i4 << 2) >> 2] = d9 * d29 + 0.0 + d10 * d28 + d11 * d27 + d12 * d26;
  HEAPF32[i23 + (i20 << 2) >> 2] = d13 * d29 + 0.0 + d14 * d28 + d15 * d27 + d16 * d26;
  HEAPF32[i23 + (i22 << 2) >> 2] = d17 * d29 + 0.0 + d18 * d28 + d19 * d27 + d3 * d26;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i23 | 0) == (i21 | 0)) {
  STACKTOP = i25;
  return;
 }
 i2 = i21;
 i1 = i23;
 i20 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i20 | 0));
 STACKTOP = i25;
 return;
}

function __ZN11CubeDocBase8realOpenERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPb(i19, i11, i18) {
 i19 = i19 | 0;
 i11 = i11 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i21 = i22 + 60 | 0;
 i2 = i22 + 48 | 0;
 i3 = i22 + 36 | 0;
 i13 = i22 + 24 | 0;
 i5 = i22 + 96 | 0;
 i6 = i22 + 12 | 0;
 i8 = i22;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 HEAP32[i21 + 16 >> 2] = -1;
 i20 = i21 + 20 | 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP8[i20 + 12 >> 0] = 0;
 i10 = i11 + 8 | 0;
 i9 = i11 + 1 | 0;
 i15 = (HEAP8[i11 >> 0] & 1) == 0 ? i9 : HEAP32[i10 >> 2] | 0;
 HEAP32[i21 + 24 >> 2] = i15;
 HEAP32[i21 + 28 >> 2] = i15;
 HEAP32[i21 + 12 >> 2] = 1;
 i15 = __Znwj(1500300) | 0;
 __ZN10BuildWorldC2Ev(i15);
 if (__ZN10BuildWorld8loadFromEP6MyFile(i15, i21) | 0) {
  i2 = __Znwj(152) | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = -1;
  HEAP32[i2 + 16 >> 2] = -1;
  HEAP32[i2 + 20 >> 2] = -1;
  i4 = i2 + 24 | 0;
  i3 = i2 + 44 | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP8[i4 + 16 >> 0] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i2 + 64 >> 2] = 50;
  HEAP32[i2 + 60 >> 2] = 0;
  HEAP32[i2 + 72 >> 2] = 50;
  HEAP32[i2 + 68 >> 2] = 0;
  HEAP32[i2 + 80 >> 2] = 50;
  HEAP32[i2 + 76 >> 2] = 0;
  i3 = i2 + 84 | 0;
  HEAP32[i3 >> 2] = -1;
  HEAP32[i3 + 4 >> 2] = -1;
  HEAP32[i3 + 8 >> 2] = -1;
  HEAP32[i3 + 12 >> 2] = -1;
  HEAP32[i3 + 16 >> 2] = -1;
  HEAP32[i2 + 104 >> 2] = 0;
  i3 = i2 + 108 | 0;
  HEAP32[i3 >> 2] = -1;
  HEAP32[i3 + 4 >> 2] = -1;
  HEAP32[i3 + 8 >> 2] = -1;
  HEAP32[i3 + 12 >> 2] = -1;
  HEAP32[i2 + 124 >> 2] = 0;
  i3 = i2 + 128 | 0;
  HEAP32[i3 >> 2] = -1;
  HEAP32[i3 + 4 >> 2] = -1;
  HEAP32[i3 + 8 >> 2] = -1;
  HEAP32[i3 + 12 >> 2] = -1;
  HEAP32[i2 + 144 >> 2] = 0;
  HEAP32[i2 + 148 >> 2] = 0;
  __ZN5Shape8generateEPK10BuildWorld(i2, i15) | 0;
  i3 = __Znwj(152) | 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = -1;
  HEAP32[i3 + 16 >> 2] = -1;
  HEAP32[i3 + 20 >> 2] = -1;
  i1 = i3 + 24 | 0;
  i12 = i3 + 44 | 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP8[i1 + 16 >> 0] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  HEAP32[i12 + 12 >> 2] = 0;
  HEAP32[i3 + 64 >> 2] = 50;
  HEAP32[i3 + 60 >> 2] = 0;
  HEAP32[i3 + 72 >> 2] = 50;
  HEAP32[i3 + 68 >> 2] = 0;
  HEAP32[i3 + 80 >> 2] = 50;
  HEAP32[i3 + 76 >> 2] = 0;
  i12 = i3 + 84 | 0;
  HEAP32[i12 >> 2] = -1;
  HEAP32[i12 + 4 >> 2] = -1;
  HEAP32[i12 + 8 >> 2] = -1;
  HEAP32[i12 + 12 >> 2] = -1;
  HEAP32[i12 + 16 >> 2] = -1;
  HEAP32[i3 + 104 >> 2] = 0;
  i12 = i3 + 108 | 0;
  HEAP32[i12 >> 2] = -1;
  HEAP32[i12 + 4 >> 2] = -1;
  HEAP32[i12 + 8 >> 2] = -1;
  HEAP32[i12 + 12 >> 2] = -1;
  HEAP32[i3 + 124 >> 2] = 0;
  i12 = i3 + 128 | 0;
  HEAP32[i12 >> 2] = -1;
  HEAP32[i12 + 4 >> 2] = -1;
  HEAP32[i12 + 8 >> 2] = -1;
  HEAP32[i12 + 12 >> 2] = -1;
  HEAP32[i3 + 144 >> 2] = 0;
  HEAP32[i3 + 148 >> 2] = 0;
  if (__ZN5Shape8loadFromEP6MyFile(i3, i21) | 0) {
   i1 = HEAP32[i1 >> 2] | 0;
   HEAP32[i13 >> 2] = 0;
   i12 = i13 + 4 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i13 + 8 >> 2] = 0;
   do if (i1) if (i1 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i13); else {
    i23 = i1 << 2;
    i24 = __Znwj(i23) | 0;
    HEAP32[i13 >> 2] = i24;
    i7 = i24 + (i1 << 2) | 0;
    HEAP32[i13 + 8 >> 2] = i7;
    _memset(i24 | 0, 0, i23 | 0) | 0;
    HEAP32[i12 >> 2] = i7;
    break;
   } while (0);
   HEAP8[i5 >> 0] = 0;
   L11 : do if (__ZN5Shape16createTrasformToEPKS_RNSt3__16vectorIiNS2_9allocatorIiEEEEPb(i3, i2, i13, i5) | 0) {
    __ZN5ShapeD2Ev(i3);
    __ZdlPv(i3);
    HEAP8[i15 + 1500136 >> 0] = 0;
    i7 = __Znwj(24) | 0;
    HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
    i24 = i7 + 4 | 0;
    HEAP32[i24 >> 2] = 0;
    HEAP32[i24 + 4 >> 2] = 0;
    HEAP32[i24 + 8 >> 2] = 0;
    HEAP32[i24 + 12 >> 2] = 0;
    HEAP8[i24 + 16 >> 0] = 0;
    if (!(__ZN9Solutions8readFromEP6MyFilePK5Shape(i7, i21, i2) | 0)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i19 + 76 | 0, 21518) | 0;
     __ZN9SolutionsD2Ev(i7);
     __ZdlPv(i7);
     i3 = 0;
     i6 = 0;
     i7 = 0;
     break;
    }
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
     if (HEAP8[i5 >> 0] | 0) {
      i3 = 0;
      i6 = 1;
      break;
     }
     i1 = HEAP32[i7 + 8 >> 2] | 0;
     i3 = HEAP32[i7 + 12 >> 2] | 0;
     if ((i1 | 0) == (i3 | 0)) {
      i3 = 0;
      i6 = 1;
      break;
     }
     while (1) {
      __ZN7SlvCube9transformERKNSt3__16vectorIiNS0_9allocatorIiEEEE(HEAP32[i1 >> 2] | 0, i13);
      i1 = i1 + 4 | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i3 = 0;
       i6 = 1;
       break L11;
      }
     }
    }
    i1 = i19 + 76 | 0;
    HEAP32[i8 >> 2] = 0;
    HEAP32[i8 + 4 >> 2] = 0;
    HEAP32[i8 + 8 >> 2] = 0;
    i24 = HEAP8[i11 >> 0] | 0;
    i24 = (i24 & 1) == 0 ? (i24 & 255) >>> 1 : HEAP32[i11 + 4 >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj(i8, 21418, 35, i24 + 35 | 0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i8, (HEAP8[i11 >> 0] & 1) == 0 ? i9 : HEAP32[i10 >> 2] | 0, i24) | 0;
    i24 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i8, 21533) | 0;
    HEAP32[i6 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
    HEAP32[i24 >> 2] = 0;
    HEAP32[i24 + 4 >> 2] = 0;
    HEAP32[i24 + 8 >> 2] = 0;
    if (!(HEAP8[i1 >> 0] & 1)) {
     HEAP8[i1 + 1 >> 0] = 0;
     HEAP8[i1 >> 0] = 0;
    } else {
     HEAP8[HEAP32[i19 + 84 >> 2] >> 0] = 0;
     HEAP32[i19 + 80 >> 2] = 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i1, 0);
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i6 >> 2] = 0;
    HEAP32[i6 + 4 >> 2] = 0;
    HEAP32[i6 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
    __ZN9SolutionsD2Ev(i7);
    __ZdlPv(i7);
    i3 = 0;
    i6 = 0;
    i7 = 0;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i19 + 76 | 0, 21489) | 0;
    i6 = 0;
    i7 = 0;
   } while (0);
   i1 = HEAP32[i13 >> 2] | 0;
   i4 = i1;
   if (i1) {
    i5 = HEAP32[i12 >> 2] | 0;
    if ((i5 | 0) != (i1 | 0)) HEAP32[i12 >> 2] = i5 + (~((i5 + -4 - i4 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   if (i6) {
    i6 = 1;
    i14 = 33;
   } else i1 = 0;
  } else {
   __ZN5ShapeD2Ev(i3);
   __ZdlPv(i3);
   i3 = 0;
   i6 = 0;
   i7 = 0;
   i14 = 33;
  }
  if ((i14 | 0) == 33) {
   i1 = i19 + 116 | 0;
   i4 = HEAP32[i1 >> 2] | 0;
   if (i4) {
    __ZN5ShapeD2Ev(i4 + 1500140 | 0);
    i5 = HEAP32[i4 + 28 >> 2] | 0;
    if (i5) __ZdaPv(i5);
    __ZdlPv(i4);
   }
   HEAP32[i1 >> 2] = i15;
   i4 = i19 + 104 | 0;
   i24 = i2;
   i23 = __Znwj(16) | 0;
   HEAP32[i23 + 4 >> 2] = 0;
   HEAP32[i23 + 8 >> 2] = 0;
   HEAP32[i23 >> 2] = 7172;
   HEAP32[i23 + 12 >> 2] = i24;
   HEAP32[i4 >> 2] = i24;
   i24 = i19 + 108 | 0;
   i1 = HEAP32[i24 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   if (!i1) i1 = i4; else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
    i1 = i4;
    i2 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i19 + 124 >> 2] = HEAP32[i2 + 24 >> 2];
   if (i6) {
    i1 = i19 + 112 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2) {
     __ZN9SolutionsD2Ev(i2);
     __ZdlPv(i2);
    }
    HEAP32[i1 >> 2] = i7;
    HEAP32[i19 + 120 >> 2] = 0;
    i1 = 1;
   } else {
    i1 = HEAP32[i1 >> 2] | 0;
    i8 = HEAP32[i19 + 112 >> 2] | 0;
    if (!i1) {
     i5 = i8 + 8 | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i6 = i8 + 12 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
     if ((i1 | 0) != (i2 | 0)) {
      do {
       i4 = HEAP32[i1 >> 2] | 0;
       if (i4) {
        __ZN7SlvCubeD2Ev(i4);
        __ZdlPv(i4);
        i2 = HEAP32[i6 >> 2] | 0;
       }
       i1 = i1 + 4 | 0;
      } while ((i1 | 0) != (i2 | 0));
      i1 = HEAP32[i5 >> 2] | 0;
      if ((i2 | 0) != (i1 | 0)) HEAP32[i6 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
     }
     HEAP32[i8 >> 2] = -1;
     i1 = i8 + 20 | 0;
     if ((HEAP8[i1 >> 0] | 0) != 0 ? (HEAP8[i1 >> 0] = 0, i16 = HEAP32[i8 + 4 >> 2] | 0, (i16 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i16 >> 2] >> 2] & 63](i16, 0);
    } else {
     i6 = HEAP32[i1 + 24 >> 2] | 0;
     i5 = i8 + 8 | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i7 = i8 + 12 | 0;
     i2 = HEAP32[i7 >> 2] | 0;
     if ((i1 | 0) != (i2 | 0)) {
      do {
       i4 = HEAP32[i1 >> 2] | 0;
       if (i4) {
        __ZN7SlvCubeD2Ev(i4);
        __ZdlPv(i4);
        i2 = HEAP32[i7 >> 2] | 0;
       }
       i1 = i1 + 4 | 0;
      } while ((i1 | 0) != (i2 | 0));
      i1 = HEAP32[i5 >> 2] | 0;
      if ((i2 | 0) != (i1 | 0)) HEAP32[i7 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
     }
     HEAP32[i8 >> 2] = i6;
     i1 = i8 + 20 | 0;
     if ((HEAP8[i1 >> 0] | 0) != 0 ? (HEAP8[i1 >> 0] = 0, i17 = HEAP32[i8 + 4 >> 2] | 0, (i17 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i17 >> 2] >> 2] & 63](i17, 0);
    }
    HEAP32[i19 + 120 >> 2] = 0;
    i1 = 0;
   }
   HEAP8[i18 >> 0] = i1;
   i1 = HEAP32[i20 >> 2] | 0;
   if (!i1) {
    i1 = 1;
    i2 = 0;
   } else {
    _fclose(i1) | 0;
    HEAP32[i20 >> 2] = 0;
    i1 = 1;
    i2 = 0;
   }
  }
  if (i3) {
   __ZN5ShapeD2Ev(i3);
   __ZdlPv(i3);
  }
  if (i2) {
   __ZN5ShapeD2Ev(i2);
   __ZdlPv(i2);
  }
 } else {
  __ZN5ShapeD2Ev(i15 + 1500140 | 0);
  i1 = HEAP32[i15 + 28 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  __ZdlPv(i15);
  i1 = HEAP32[i20 >> 2] | 0;
  if (i1) {
   _fclose(i1) | 0;
   HEAP32[i20 >> 2] = 0;
  }
  i1 = i19 + 76 | 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  i24 = HEAP8[i11 >> 0] | 0;
  i24 = (i24 & 1) == 0 ? (i24 & 255) >>> 1 : HEAP32[i11 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj(i3, 21418, 35, i24 + 35 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i3, (HEAP8[i11 >> 0] & 1) == 0 ? i9 : HEAP32[i10 >> 2] | 0, i24) | 0;
  i24 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i3, 21454) | 0;
  HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  HEAP32[i24 + 8 >> 2] = 0;
  if (!(HEAP8[i1 >> 0] & 1)) {
   HEAP8[i1 + 1 >> 0] = 0;
   HEAP8[i1 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 84 >> 2] >> 0] = 0;
   HEAP32[i19 + 80 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i1, 0);
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3);
  i1 = 0;
 }
 i2 = HEAP32[i20 >> 2] | 0;
 if (!i2) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
  STACKTOP = i22;
  return i1 | 0;
 }
 _fclose(i2) | 0;
 HEAP32[i20 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i1 | 0;
}

function __ZN16BuildControlBase11initializedEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 i23 = i35 + 1048 | 0;
 i24 = i35 + 48 | 0;
 i2 = i35 + 36 | 0;
 i3 = i35 + 24 | 0;
 i21 = i35 + 12 | 0;
 i22 = i35;
 __ZN13ShaderProgram4initERK15ProgCompileConf(i7 + 1008 | 0, 0) | 0;
 __ZN16BuildControlBase11makeBuffersEv(i7);
 _memset(i23 | 0, 0, 1e3) | 0;
 _memset(i24 | 0, 0, 1e3) | 0;
 i1 = 0;
 do {
  d36 = +(i1 | 0) * 6.283185307179586 / 20.0;
  HEAPF32[i23 + (i1 << 2) >> 2] = +Math_cos(+d36) * .10000000149011612;
  HEAPF32[i24 + (i1 << 2) >> 2] = +Math_sin(+d36) * .10000000149011612;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 20);
 i34 = i7 + 816 | 0;
 HEAP32[i7 + 920 >> 2] = 4;
 HEAP8[i7 + 915 >> 0] = 1;
 __ZN4Mesh6addIdxENS_4TypeE(i34, 5) | 0;
 __ZN4Mesh6addIdxENS_4TypeE(i34, 5) | 0;
 i34 = HEAP32[i7 + 924 >> 2] | 0;
 i18 = i7 + 824 | 0;
 HEAPF32[i2 >> 2] = 0.0;
 HEAPF32[i2 + 4 >> 2] = 0.0;
 HEAPF32[i2 + 8 >> 2] = 0.0;
 i19 = i7 + 828 | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i20 = i7 + 832 | 0;
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
  HEAP32[i19 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i18, i2);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 HEAPF32[i3 >> 2] = 0.0;
 HEAPF32[i3 + 4 >> 2] = 0.0;
 HEAPF32[i3 + 8 >> 2] = 1.2000000476837158;
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 12;
 } else __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i18, i3);
 i32 = i34 + 4 | 0;
 i3 = HEAP32[i32 >> 2] | 0;
 i33 = i34 + 8 | 0;
 i1 = HEAP32[i33 >> 2] | 0;
 if (i3 >>> 0 >= i1 >>> 0) {
  i5 = HEAP32[i34 >> 2] | 0;
  i6 = i5;
  i31 = i3 - i6 | 0;
  i2 = (i31 >> 1) + 1 | 0;
  if ((i31 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i34);
  i31 = i5;
  i4 = i1 - i31 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
  i1 = i3 - i31 | 0;
  i2 = i1 >> 1;
  if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
  HEAP16[i3 + (i2 << 1) >> 1] = 0;
  _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
  HEAP32[i34 >> 2] = i3;
  HEAP32[i32 >> 2] = i3 + (i2 + 1 << 1);
  HEAP32[i33 >> 2] = i3 + (i4 << 1);
  if (i6) __ZdlPv(i6);
 } else {
  HEAP16[i3 >> 1] = 0;
  HEAP32[i32 >> 2] = i3 + 2;
 }
 i31 = i34 + 20 | 0;
 i30 = i34 + 24 | 0;
 i3 = HEAP32[i30 >> 2] | 0;
 i29 = i34 + 28 | 0;
 i1 = HEAP32[i29 >> 2] | 0;
 if (i3 >>> 0 >= i1 >>> 0) {
  i5 = HEAP32[i31 >> 2] | 0;
  i6 = i5;
  i28 = i3 - i6 | 0;
  i2 = (i28 >> 1) + 1 | 0;
  if ((i28 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i31);
  i28 = i5;
  i4 = i1 - i28 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
  i2 = i3 - i28 | 0;
  i3 = i2 >> 1;
  if (!i4) i1 = 0; else i1 = __Znwj(i4 << 1) | 0;
  HEAP16[i1 + (i3 << 1) >> 1] = 1;
  _memcpy(i1 | 0, i5 | 0, i2 | 0) | 0;
  HEAP32[i31 >> 2] = i1;
  HEAP32[i30 >> 2] = i1 + (i3 + 1 << 1);
  HEAP32[i29 >> 2] = i1 + (i4 << 1);
  if (!i6) {
   i25 = i31;
   i26 = i31;
   i27 = i30;
   i28 = i29;
  } else {
   __ZdlPv(i6);
   i25 = i31;
   i26 = i31;
   i27 = i30;
   i28 = i29;
  }
 } else {
  HEAP16[i3 >> 1] = 1;
  HEAP32[i30 >> 2] = i3 + 2;
  i25 = i31;
  i26 = i31;
  i27 = i30;
  i28 = i29;
 }
 i11 = i21 + 4 | 0;
 i12 = i21 + 8 | 0;
 i13 = i22 + 4 | 0;
 i14 = i22 + 8 | 0;
 i16 = i7 + 884 | 0;
 i17 = i7 + 888 | 0;
 i15 = i7 + 892 | 0;
 i10 = 0;
 while (1) {
  i2 = HEAP32[i24 + (i10 << 2) >> 2] | 0;
  i3 = HEAP32[i23 + (i10 << 2) >> 2] | 0;
  HEAP32[i21 >> 2] = i2;
  HEAP32[i11 >> 2] = i3;
  HEAPF32[i12 >> 2] = 0.0;
  i1 = HEAP32[i19 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = HEAP32[i21 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
   i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
   HEAP32[i19 >> 2] = i1;
  } else {
   __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i18, i21);
   i1 = HEAP32[i19 >> 2] | 0;
  }
  HEAP32[i22 >> 2] = i2;
  HEAP32[i13 >> 2] = i3;
  HEAPF32[i14 >> 2] = 1.2000000476837158;
  if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 12;
  } else __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i18, i22);
  i8 = i10 << 1;
  i9 = i8 + 2 & 65535;
  i2 = HEAP32[i17 >> 2] | 0;
  i3 = HEAP32[i15 >> 2] | 0;
  if (i2 >>> 0 >= i3 >>> 0) {
   i6 = HEAP32[i16 >> 2] | 0;
   i7 = i6;
   i5 = i2 - i7 | 0;
   i1 = (i5 >> 1) + 1 | 0;
   if ((i5 | 0) < -2) {
    i1 = 35;
    break;
   }
   i4 = i6;
   i5 = i3 - i4 | 0;
   i1 = i5 >> 1 >>> 0 < 1073741823 ? (i5 >>> 0 < i1 >>> 0 ? i1 : i5) : 2147483647;
   i4 = i2 - i4 | 0;
   i2 = i4 >> 1;
   if (!i1) i5 = 0; else i5 = __Znwj(i1 << 1) | 0;
   i3 = i5 + (i1 << 1) | 0;
   HEAP16[i5 + (i2 << 1) >> 1] = i9;
   i1 = i5 + (i2 + 1 << 1) | 0;
   _memcpy(i5 | 0, i6 | 0, i4 | 0) | 0;
   HEAP32[i16 >> 2] = i5;
   HEAP32[i17 >> 2] = i1;
   HEAP32[i15 >> 2] = i3;
   if (!i7) i2 = i1; else {
    __ZdlPv(i7);
    i2 = HEAP32[i17 >> 2] | 0;
    i3 = HEAP32[i15 >> 2] | 0;
   }
  } else {
   HEAP16[i2 >> 1] = i9;
   i2 = i2 + 2 | 0;
   HEAP32[i17 >> 2] = i2;
  }
  i7 = i8 + 3 & 65535;
  if (i2 >>> 0 >= i3 >>> 0) {
   i5 = HEAP32[i16 >> 2] | 0;
   i6 = i5;
   i8 = i2 - i6 | 0;
   i1 = (i8 >> 1) + 1 | 0;
   if ((i8 | 0) < -2) {
    i1 = 43;
    break;
   }
   i8 = i5;
   i4 = i3 - i8 | 0;
   i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i1 >>> 0 ? i1 : i4) : 2147483647;
   i1 = i2 - i8 | 0;
   i2 = i1 >> 1;
   if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
   HEAP16[i3 + (i2 << 1) >> 1] = i7;
   _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
   HEAP32[i16 >> 2] = i3;
   HEAP32[i17 >> 2] = i3 + (i2 + 1 << 1);
   HEAP32[i15 >> 2] = i3 + (i4 << 1);
   if (i6) __ZdlPv(i6);
  } else {
   HEAP16[i2 >> 1] = i7;
   HEAP32[i17 >> 2] = i2 + 2;
  }
  i3 = HEAP32[i32 >> 2] | 0;
  i1 = HEAP32[i33 >> 2] | 0;
  if (i3 >>> 0 >= i1 >>> 0) {
   i5 = HEAP32[i34 >> 2] | 0;
   i6 = i5;
   i8 = i3 - i6 | 0;
   i2 = (i8 >> 1) + 1 | 0;
   if ((i8 | 0) < -2) {
    i1 = 51;
    break;
   }
   i8 = i5;
   i4 = i1 - i8 | 0;
   i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
   i1 = i3 - i8 | 0;
   i2 = i1 >> 1;
   if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
   HEAP16[i3 + (i2 << 1) >> 1] = i9;
   _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
   HEAP32[i34 >> 2] = i3;
   HEAP32[i32 >> 2] = i3 + (i2 + 1 << 1);
   HEAP32[i33 >> 2] = i3 + (i4 << 1);
   if (i6) __ZdlPv(i6);
  } else {
   HEAP16[i3 >> 1] = i9;
   HEAP32[i32 >> 2] = i3 + 2;
  }
  i3 = HEAP32[i30 >> 2] | 0;
  i1 = HEAP32[i29 >> 2] | 0;
  if (i3 >>> 0 >= i1 >>> 0) {
   i5 = HEAP32[i25 >> 2] | 0;
   i6 = i5;
   i9 = i3 - i6 | 0;
   i2 = (i9 >> 1) + 1 | 0;
   if ((i9 | 0) < -2) {
    i1 = 59;
    break;
   }
   i9 = i5;
   i4 = i1 - i9 | 0;
   i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
   i1 = i3 - i9 | 0;
   i2 = i1 >> 1;
   if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
   HEAP16[i3 + (i2 << 1) >> 1] = i7;
   _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
   HEAP32[i26 >> 2] = i3;
   HEAP32[i27 >> 2] = i3 + (i2 + 1 << 1);
   HEAP32[i28 >> 2] = i3 + (i4 << 1);
   if (i6) __ZdlPv(i6);
  } else {
   HEAP16[i3 >> 1] = i7;
   HEAP32[i30 >> 2] = i3 + 2;
  }
  i10 = i10 + 1 | 0;
  if ((i10 | 0) == 20) {
   i1 = 65;
   break;
  }
 }
 if ((i1 | 0) == 35) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i16); else if ((i1 | 0) == 43) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i16); else if ((i1 | 0) == 51) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i34); else if ((i1 | 0) == 59) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i31); else if ((i1 | 0) == 65) {
  i2 = HEAP32[i17 >> 2] | 0;
  i3 = HEAP32[i15 >> 2] | 0;
  if (i2 >>> 0 >= i3 >>> 0) {
   i5 = HEAP32[i16 >> 2] | 0;
   i6 = i5;
   i24 = i2 - i6 | 0;
   i1 = (i24 >> 1) + 1 | 0;
   if ((i24 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i16);
   i24 = i5;
   i3 = i3 - i24 | 0;
   i1 = i3 >> 1 >>> 0 < 1073741823 ? (i3 >>> 0 < i1 >>> 0 ? i1 : i3) : 2147483647;
   i3 = i2 - i24 | 0;
   i2 = i3 >> 1;
   if (!i1) i4 = 0; else i4 = __Znwj(i1 << 1) | 0;
   i1 = i4 + (i1 << 1) | 0;
   HEAP16[i4 + (i2 << 1) >> 1] = 2;
   i2 = i4 + (i2 + 1 << 1) | 0;
   _memcpy(i4 | 0, i5 | 0, i3 | 0) | 0;
   HEAP32[i16 >> 2] = i4;
   HEAP32[i17 >> 2] = i2;
   HEAP32[i15 >> 2] = i1;
   if (!i6) i5 = i2; else {
    __ZdlPv(i6);
    i5 = HEAP32[i17 >> 2] | 0;
    i1 = HEAP32[i15 >> 2] | 0;
   }
  } else {
   HEAP16[i2 >> 1] = 2;
   i5 = i2 + 2 | 0;
   HEAP32[i17 >> 2] = i5;
   i1 = i3;
  }
  if (i5 >>> 0 >= i1 >>> 0) {
   i6 = HEAP32[i16 >> 2] | 0;
   i7 = i6;
   i24 = i5 - i7 | 0;
   i2 = (i24 >> 1) + 1 | 0;
   if ((i24 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i16);
   i24 = i6;
   i4 = i1 - i24 | 0;
   i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
   i1 = i5 - i24 | 0;
   i2 = i1 >> 1;
   if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
   HEAP16[i3 + (i2 << 1) >> 1] = 3;
   _memcpy(i3 | 0, i6 | 0, i1 | 0) | 0;
   HEAP32[i16 >> 2] = i3;
   HEAP32[i17 >> 2] = i3 + (i2 + 1 << 1);
   HEAP32[i15 >> 2] = i3 + (i4 << 1);
   if (i7) __ZdlPv(i7);
  } else {
   HEAP16[i5 >> 1] = 3;
   HEAP32[i17 >> 2] = i5 + 2;
  }
  i3 = HEAP32[i32 >> 2] | 0;
  i1 = HEAP32[i33 >> 2] | 0;
  if (i3 >>> 0 >= i1 >>> 0) {
   i5 = HEAP32[i34 >> 2] | 0;
   i6 = i5;
   i24 = i3 - i6 | 0;
   i2 = (i24 >> 1) + 1 | 0;
   if ((i24 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i34);
   i24 = i5;
   i4 = i1 - i24 | 0;
   i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
   i1 = i3 - i24 | 0;
   i2 = i1 >> 1;
   if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
   HEAP16[i3 + (i2 << 1) >> 1] = 2;
   _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
   HEAP32[i34 >> 2] = i3;
   HEAP32[i32 >> 2] = i3 + (i2 + 1 << 1);
   HEAP32[i33 >> 2] = i3 + (i4 << 1);
   if (i6) __ZdlPv(i6);
  } else {
   HEAP16[i3 >> 1] = 2;
   HEAP32[i32 >> 2] = i3 + 2;
  }
  i3 = HEAP32[i30 >> 2] | 0;
  i2 = HEAP32[i29 >> 2] | 0;
  if (i3 >>> 0 < i2 >>> 0) {
   HEAP16[i3 >> 1] = 3;
   HEAP32[i30 >> 2] = i3 + 2;
   STACKTOP = i35;
   return;
  }
  i5 = HEAP32[i25 >> 2] | 0;
  i6 = i5;
  i34 = i3 - i6 | 0;
  i1 = (i34 >> 1) + 1 | 0;
  if ((i34 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i31);
  i34 = i5;
  i4 = i2 - i34 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i1 >>> 0 ? i1 : i4) : 2147483647;
  i1 = i3 - i34 | 0;
  i2 = i1 >> 1;
  if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
  HEAP16[i3 + (i2 << 1) >> 1] = 3;
  _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
  HEAP32[i26 >> 2] = i3;
  HEAP32[i27 >> 2] = i3 + (i2 + 1 << 1);
  HEAP32[i28 >> 2] = i3 + (i4 << 1);
  if (!i6) {
   STACKTOP = i35;
   return;
  }
  __ZdlPv(i6);
  STACKTOP = i35;
  return;
 }
}

function __ZN16BuildControlBase15choiseMouseMoveEib(i30, i29, i1) {
 i30 = i30 | 0;
 i29 = i29 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i26 = i31;
 HEAP8[i30 + 14 >> 0] = i1 & 1;
 i18 = (HEAP8[i30 + 15 >> 0] | 0) != 0 ^ i1;
 i3 = i30 + 20 | 0;
 if ((HEAP32[i3 >> 2] | 0) == (i29 | 0)) {
  i2 = i18 & 1;
  i1 = i30 + 16 | 0;
  if ((i2 | 0) == (HEAPU8[i1 >> 0] | 0)) {
   i30 = 0;
   STACKTOP = i31;
   return i30 | 0;
  } else i28 = i2;
 } else {
  i28 = i18 & 1;
  i1 = i30 + 16 | 0;
 }
 HEAP32[i3 >> 2] = i29;
 HEAP8[i1 >> 0] = i18 & 1;
 i17 = i30 + 8 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 i1 = i16 + 116 | 0;
 i27 = HEAP32[i1 >> 2] | 0;
 if ((i29 | 0) <= -1) {
  i13 = 0;
  do {
   i1 = HEAP32[i27 + 40 + (i13 * 24 | 0) >> 2] | 0;
   i6 = HEAP32[i27 + 40 + (i13 * 24 | 0) + 4 >> 2] | 0;
   i7 = HEAP32[i27 + 40 + (i13 * 24 | 0) + 8 >> 2] | 0;
   i8 = HEAP32[i27 + 40 + (i13 * 24 | 0) + 12 >> 2] | 0;
   i9 = HEAP32[i27 + 40 + (i13 * 24 | 0) + 16 >> 2] | 0;
   i10 = HEAP32[i27 + 40 + (i13 * 24 | 0) + 20 >> 2] | 0;
   if ((i1 | 0) < (i6 | 0)) {
    i11 = (i7 | 0) < (i8 | 0);
    i12 = (i9 | 0) < (i10 | 0);
    do {
     if (i11) {
      i2 = i1 >>> 0 < 50;
      i4 = i7;
      do {
       if (i12) {
        i3 = i4 >>> 0 < 50;
        i5 = i9;
        do {
         do if (i2 & (i3 & i5 >>> 0 < 50) ? (i14 = i27 + 136 + (i13 * 5e5 | 0) + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) | 0, i15 = HEAP32[i14 >> 2] | 0, (i15 | 0) != 0) : 0) if ((i15 & 65280 | 0) == 256) {
          HEAP32[i14 >> 2] = 0;
          break;
         } else {
          HEAP32[i14 >> 2] = i15 & 65535;
          break;
         } while (0);
         i5 = i5 + 1 | 0;
        } while ((i5 | 0) != (i10 | 0));
       }
       i4 = i4 + 1 | 0;
      } while ((i4 | 0) != (i8 | 0));
     }
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i6 | 0));
   }
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != 3);
  i2 = HEAP32[i16 + 92 >> 2] | 0;
  i1 = (HEAP32[i16 + 96 >> 2] | 0) - i2 | 0;
  if ((i1 | 0) > 0) {
   i27 = i1 >> 2;
   _memset(i2 | 0, 0, (((i1 | 0) < 4 ? i27 ^ 1073741823 : 1073741822) + i27 << 2) + 8 | 0) | 0;
  }
  HEAP32[i30 + 24 >> 2] = -1;
  HEAP32[i30 + 28 >> 2] = -1;
  HEAP32[i30 + 32 >> 2] = -1;
  __ZN16BuildControlBase11makeBuffersEv(i30);
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] & 1](i30, i29, i28);
  i30 = 1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i3 = i26 + 32 | 0;
 HEAP32[i26 >> 2] = -1;
 HEAP32[i26 + 4 >> 2] = -1;
 HEAP32[i26 + 8 >> 2] = -1;
 HEAP32[i26 + 12 >> 2] = -1;
 HEAP32[i26 + 16 >> 2] = -1;
 HEAP32[i26 + 20 >> 2] = -1;
 HEAP32[i26 + 24 >> 2] = -1;
 HEAP32[i26 + 28 >> 2] = -1;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 i3 = i26 + 48 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 i3 = i26 + 64 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 i3 = i26 + 80 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 i3 = i29 >>> 16 & 255;
 i2 = i29 >>> 2 & 127;
 i4 = i29 >>> 9 & 127;
 i9 = HEAP32[i1 >> 2] | 0;
 switch (i29 & 3 | 0) {
 case 0:
  {
   i7 = i2;
   i5 = i3;
   i8 = i4;
   i6 = i3 + -1 | 0;
   i1 = i4;
   break;
  }
 case 1:
  {
   i7 = i3;
   i5 = i2;
   i8 = i4;
   i6 = i2;
   i2 = i3 + -1 | 0;
   i1 = i4;
   break;
  }
 case 2:
  {
   i7 = i4;
   i5 = i2;
   i8 = i3;
   i6 = i2;
   i2 = i4;
   i1 = i3 + -1 | 0;
   break;
  }
 default:
  {
   i7 = 0;
   i5 = 0;
   i8 = 0;
   i6 = 0;
   i2 = 0;
   i1 = 0;
  }
 }
 i20 = HEAP32[i9 + 12 >> 2] | 0;
 i21 = (Math_imul(i20, i7) | 0) + i5 | 0;
 i21 = i21 + (Math_imul(HEAP32[i9 + 24 >> 2] | 0, i8) | 0) | 0;
 i21 = i18 ^ (HEAP32[(HEAP32[i9 + 28 >> 2] | 0) + (i21 * 12 | 0) >> 2] | 0) == 1;
 i23 = i21 ? i6 : i5;
 i22 = i21 ? i2 : i7;
 i21 = i21 ? i1 : i8;
 do if ((((i23 | 0) >= 1 ? !((i23 | 0) >= (i20 + -2 | 0) | (i22 | 0) < 1) : 0) ? !((i21 | 0) < 1 ? 1 : (i22 | 0) >= ((HEAP32[i9 + 16 >> 2] | 0) + -2 | 0)) : 0) ? (i21 | 0) < ((HEAP32[i9 + 20 >> 2] | 0) + -2 | 0) : 0) {
  HEAP32[i26 >> 2] = 2;
  HEAP32[i26 + 4 >> 2] = i21;
  HEAP32[i26 + 8 >> 2] = i23;
  HEAP32[i26 + 12 >> 2] = i22;
  HEAP32[i26 + 16 >> 2] = 2;
  HEAP32[i26 + 20 >> 2] = i21 + 1;
  HEAP32[i26 + 24 >> 2] = i23;
  HEAP32[i26 + 28 >> 2] = i22;
  HEAP32[i26 + 32 >> 2] = 1;
  HEAP32[i26 + 36 >> 2] = i22;
  HEAP32[i26 + 40 >> 2] = i23;
  HEAP32[i26 + 44 >> 2] = i21;
  HEAP32[i26 + 48 >> 2] = 1;
  HEAP32[i26 + 52 >> 2] = i22 + 1;
  HEAP32[i26 + 56 >> 2] = i23;
  HEAP32[i26 + 60 >> 2] = i21;
  HEAP32[i26 + 64 >> 2] = 0;
  HEAP32[i26 + 68 >> 2] = i23;
  HEAP32[i26 + 72 >> 2] = i22;
  HEAP32[i26 + 76 >> 2] = i21;
  HEAP32[i26 + 80 >> 2] = 0;
  HEAP32[i26 + 84 >> 2] = i23 + 1;
  HEAP32[i26 + 88 >> 2] = i22;
  HEAP32[i26 + 92 >> 2] = i21;
  i20 = i30 + 24 | 0;
  if (((i23 | 0) == (HEAP32[i20 >> 2] | 0) ? (i22 | 0) == (HEAP32[i30 + 28 >> 2] | 0) : 0) ? (i21 | 0) == (HEAP32[i30 + 32 >> 2] | 0) : 0) break;
  i2 = HEAP32[i16 + 92 >> 2] | 0;
  i1 = (HEAP32[i16 + 96 >> 2] | 0) - i2 | 0;
  if ((i1 | 0) > 0) {
   i16 = i1 >> 2;
   _memset(i2 | 0, 0, (((i1 | 0) < 4 ? i16 ^ 1073741823 : 1073741822) + i16 << 2) + 8 | 0) | 0;
  }
  if ((i29 | 0) < 65536) {
   i31 = ___cxa_allocate_exception(8) | 0;
   HEAP32[i31 >> 2] = 7152;
   HEAP32[i31 + 4 >> 2] = 21402;
   ___cxa_throw(i31 | 0, 2608, 44);
  }
  if (!(HEAP8[i30 + 12 >> 0] | 0)) i1 = 3; else {
   i15 = 0;
   do {
    i1 = HEAP32[i27 + 40 + (i15 * 24 | 0) >> 2] | 0;
    i8 = HEAP32[i27 + 40 + (i15 * 24 | 0) + 4 >> 2] | 0;
    i9 = HEAP32[i27 + 40 + (i15 * 24 | 0) + 8 >> 2] | 0;
    i10 = HEAP32[i27 + 40 + (i15 * 24 | 0) + 12 >> 2] | 0;
    i11 = HEAP32[i27 + 40 + (i15 * 24 | 0) + 16 >> 2] | 0;
    i12 = HEAP32[i27 + 40 + (i15 * 24 | 0) + 20 >> 2] | 0;
    if ((i1 | 0) < (i8 | 0)) {
     i13 = (i9 | 0) < (i10 | 0);
     i14 = (i11 | 0) < (i12 | 0);
     do {
      if (i13) {
       i2 = i1 >>> 0 < 50;
       i6 = i9;
       do {
        if (i14) {
         i3 = i6 >>> 0 < 50;
         i7 = i11;
         do {
          do if (i2 & (i3 & i7 >>> 0 < 50)) {
           i4 = i27 + 136 + (i15 * 5e5 | 0) + (i1 * 1e4 | 0) + (i6 * 200 | 0) + (i7 << 2) | 0;
           i5 = HEAP32[i4 >> 2] | 0;
           if (!i5) break;
           if ((i5 & 65280 | 0) == 256) {
            HEAP32[i4 >> 2] = 0;
            break;
           } else {
            HEAP32[i4 >> 2] = i5 & 65535;
            break;
           }
          } while (0);
          i7 = i7 + 1 | 0;
         } while ((i7 | 0) != (i12 | 0));
        }
        i6 = i6 + 1 | 0;
       } while ((i6 | 0) != (i10 | 0));
      }
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i8 | 0));
    }
    i15 = i15 + 1 | 0;
   } while ((i15 | 0) != 3);
   if (i18) if ((HEAP32[i27 + 32 >> 2] | 0) > 6) {
    i14 = HEAP32[i17 >> 2] | 0;
    i13 = HEAP32[i14 + 104 >> 2] | 0;
    i8 = (i13 | 0) == 0;
    i9 = i13 + 68 | 0;
    i10 = i13 + 76 | 0;
    i11 = i13 + 60 | 0;
    i12 = i13 + 24 | 0;
    i13 = i13 + 44 | 0;
    i14 = i14 + 92 | 0;
    i15 = 0;
    do {
     i3 = i26 + (i15 << 4) | 0;
     i4 = i26 + (i15 << 4) + 8 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     do if ((i1 >>> 0 < 50 ? (i24 = HEAP32[i26 + (i15 << 4) + 12 >> 2] | 0, i24 >>> 0 < 50) : 0) ? (i25 = HEAP32[i26 + (i15 << 4) + 4 >> 2] | 0, i25 >>> 0 < 50) : 0) {
      i2 = HEAP32[i3 >> 2] | 0;
      if (i2 >>> 0 >= 3) break;
      i1 = i27 + 136 + (i2 * 5e5 | 0) + (i25 * 1e4 | 0) + (i1 * 200 | 0) + (i24 << 2) | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if ((i2 & 65280 | 0) != 512) break;
      HEAP32[i1 >> 2] = i2 | 131072;
     } while (0);
     L95 : do if (!i8) {
      i7 = HEAP32[i3 >> 2] | 0;
      i3 = HEAP32[i26 + (i15 << 4) + 4 >> 2] | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      i2 = HEAP32[i26 + (i15 << 4) + 12 >> 2] | 0;
      switch (i7 | 0) {
      case 0:
       {
        i4 = i3;
        break;
       }
      case 1:
       {
        i4 = i1;
        i1 = i3;
        break;
       }
      case 2:
       {
        i4 = i1;
        i1 = i2;
        i2 = i3;
        break;
       }
      default:
       {
        i4 = 0;
        i1 = 0;
        i2 = 0;
       }
      }
      i6 = (i4 << 2) - (HEAP32[i9 >> 2] | 0) | 0;
      i5 = (i1 << 2) - (HEAP32[i10 >> 2] | 0) | 0;
      i2 = (i2 << 2) - (HEAP32[i11 >> 2] | 0) | 0;
      i3 = HEAP32[i12 >> 2] | 0;
      if ((i3 | 0) > 0) {
       i4 = HEAP32[i13 >> 2] | 0;
       i1 = 0;
       L103 : while (1) {
        do if ((HEAP32[i4 + (i1 * 188 | 0) >> 2] | 0) == (i7 | 0)) {
         if ((HEAP32[i4 + (i1 * 188 | 0) + 4 >> 2] | 0) != (i6 | 0)) break;
         if ((HEAP32[i4 + (i1 * 188 | 0) + 8 >> 2] | 0) != (i5 | 0)) break;
         if ((HEAP32[i4 + (i1 * 188 | 0) + 12 >> 2] | 0) == (i2 | 0)) break L103;
        } while (0);
        i1 = i1 + 1 | 0;
        if ((i1 | 0) >= (i3 | 0)) break L95;
       }
       if ((i1 | 0) == -1) break;
       HEAP32[(HEAP32[i14 >> 2] | 0) + (i1 << 2) >> 2] = 1;
      }
     } while (0);
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) != 6);
    HEAPF32[i30 + 1232 >> 2] = 0.0;
    HEAP8[i30 + 36 >> 0] = 1;
    i1 = i28;
   } else i1 = 2; else {
    i5 = 0;
    do {
     i3 = i26 + (i5 << 4) | 0;
     i4 = HEAP32[i26 + (i5 << 4) + 8 >> 2] | 0;
     L116 : do if (i4 >>> 0 < 50 ? (i19 = HEAP32[i26 + (i5 << 4) + 12 >> 2] | 0, i19 >>> 0 < 50) : 0) {
      i1 = HEAP32[i26 + (i5 << 4) + 4 >> 2] | 0;
      do if (i1 >>> 0 < 50) {
       i2 = HEAP32[i3 >> 2] | 0;
       if (i2 >>> 0 >= 3) break;
       if ((HEAP32[i27 + 136 + (i2 * 5e5 | 0) + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i19 << 2) >> 2] & 65280 | 0) == 512) break L116;
      } while (0);
      i2 = HEAP32[i26 + (i5 << 4) + 4 >> 2] | 0;
      if (i2 >>> 0 < 50) {
       i1 = HEAP32[i3 >> 2] | 0;
       if (i1 >>> 0 >= 3) break;
       HEAP32[i27 + 136 + (i1 * 5e5 | 0) + (i2 * 1e4 | 0) + (i4 * 200 | 0) + (i19 << 2) >> 2] = 259;
      }
     } while (0);
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 6);
    HEAPF32[i30 + 1232 >> 2] = 0.0;
    HEAP8[i30 + 36 >> 0] = 1;
    i1 = i28;
   }
   __ZN16BuildControlBase11makeBuffersEv(i30);
  }
  HEAP32[i20 >> 2] = i23;
  HEAP32[i30 + 28 >> 2] = i22;
  HEAP32[i30 + 32 >> 2] = i21;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] & 1](i30, i29, i1);
 } while (0);
 i30 = 1;
 STACKTOP = i31;
 return i30 | 0;
}

function __ZN10BuildWorld13doTransparentEv(i61) {
 i61 = i61 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i62 = 0;
 i62 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i59 = i62;
 i15 = 0;
 do {
  i1 = HEAP32[i61 + 40 + (i15 * 24 | 0) >> 2] | 0;
  i11 = HEAP32[i61 + 40 + (i15 * 24 | 0) + 4 >> 2] | 0;
  i12 = HEAP32[i61 + 40 + (i15 * 24 | 0) + 8 >> 2] | 0;
  i13 = HEAP32[i61 + 40 + (i15 * 24 | 0) + 12 >> 2] | 0;
  i14 = HEAP32[i61 + 40 + (i15 * 24 | 0) + 16 >> 2] | 0;
  i6 = HEAP32[i61 + 40 + (i15 * 24 | 0) + 20 >> 2] | 0;
  if ((i1 | 0) < (i11 | 0)) {
   i7 = (i12 | 0) < (i13 | 0);
   i8 = (i14 | 0) < (i6 | 0);
   do {
    if (i7) {
     i2 = i1 >>> 0 < 50;
     i4 = i12;
     do {
      if (i8) {
       i3 = i4 >>> 0 < 50;
       i5 = i14;
       do {
        if (i2 & (i3 & i5 >>> 0 < 50) ? (i9 = i61 + 136 + (i15 * 5e5 | 0) + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) | 0, i10 = HEAP32[i9 >> 2] | 0, (i10 | 0) != 0 & (i10 & 65280 | 0) == 256) : 0) HEAP32[i9 >> 2] = i10 & 16711680;
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) != (i6 | 0));
      }
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i13 | 0));
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i11 | 0));
  }
  i15 = i15 + 1 | 0;
 } while ((i15 | 0) != 3);
 i12 = i59 + 16 | 0;
 i13 = i59 + 36 | 0;
 i14 = i59 + 56 | 0;
 i15 = i59 + 40 | 0;
 i16 = i59 + 44 | 0;
 i17 = i59 + 48 | 0;
 i18 = i59 + 52 | 0;
 i19 = i59 + 20 | 0;
 i20 = i59 + 24 | 0;
 i21 = i59 + 28 | 0;
 i22 = i59 + 32 | 0;
 i23 = i59 + 4 | 0;
 i24 = i59 + 8 | 0;
 i25 = i59 + 12 | 0;
 i26 = i59 + 40 | 0;
 i27 = i59 + 44 | 0;
 i28 = i59 + 48 | 0;
 i29 = i59 + 52 | 0;
 i30 = i59 + 20 | 0;
 i31 = i59 + 24 | 0;
 i32 = i59 + 28 | 0;
 i33 = i59 + 32 | 0;
 i34 = i59 + 4 | 0;
 i35 = i59 + 8 | 0;
 i36 = i59 + 12 | 0;
 i42 = 0;
 do {
  i2 = HEAP32[i61 + 40 + (i42 * 24 | 0) >> 2] | 0;
  i37 = i61 + 40 + (i42 * 24 | 0) + 4 | 0;
  i1 = HEAP32[i37 >> 2] | 0;
  if ((i2 | 0) < (i1 | 0)) {
   i38 = i61 + 40 + (i42 * 24 | 0) + 8 | 0;
   i39 = i61 + 40 + (i42 * 24 | 0) + 12 | 0;
   i40 = i61 + 40 + (i42 * 24 | 0) + 16 | 0;
   i41 = i61 + 40 + (i42 * 24 | 0) + 20 | 0;
   do {
    i4 = HEAP32[i38 >> 2] | 0;
    i3 = HEAP32[i39 >> 2] | 0;
    if ((i4 | 0) < (i3 | 0)) {
     i11 = i2 >>> 0 < 50;
     i1 = i3;
     do {
      i5 = HEAP32[i40 >> 2] | 0;
      i3 = HEAP32[i41 >> 2] | 0;
      if ((i5 | 0) < (i3 | 0)) {
       i10 = i4 >>> 0 < 50;
       i1 = i3;
       do {
        if (i11 & (i10 & i5 >>> 0 < 50) ? (HEAP32[i61 + 136 + (i42 * 5e5 | 0) + (i2 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) >> 2] & 65280 | 0) == 512 : 0) {
         i9 = 0;
         do {
          i8 = 0;
          do {
           i6 = HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) >> 2] | 0;
           HEAP32[i59 + (i8 * 20 | 0) >> 2] = i6;
           i7 = HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 4 >> 2] | 0;
           i7 = ((i7 | 0) == 1 ? i4 : 0) + (HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 8 >> 2] | 0) + ((i7 | 0) == 0 ? i2 : 0) + ((i7 | 0) == 2 ? i5 : 0) | 0;
           HEAP32[i59 + (i8 * 20 | 0) + 4 >> 2] = i7;
           i1 = HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 12 >> 2] | 0;
           i1 = ((i1 | 0) == 1 ? i4 : 0) + (HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 16 >> 2] | 0) + ((i1 | 0) == 0 ? i2 : 0) + ((i1 | 0) == 2 ? i5 : 0) | 0;
           HEAP32[i59 + (i8 * 20 | 0) + 8 >> 2] = i1;
           i3 = HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 20 >> 2] | 0;
           i3 = ((i3 | 0) == 1 ? i4 : 0) + (HEAP32[7488 + (i42 * 336 | 0) + (i9 * 84 | 0) + (i8 * 28 | 0) + 24 >> 2] | 0) + ((i3 | 0) == 0 ? i2 : 0) + ((i3 | 0) == 2 ? i5 : 0) | 0;
           HEAP32[i59 + (i8 * 20 | 0) + 12 >> 2] = i3;
           if (i6 >>> 0 < 3 & (i7 >>> 0 < 50 & (i1 >>> 0 < 50 & i3 >>> 0 < 50))) i1 = HEAP32[i61 + 136 + (i6 * 5e5 | 0) + (i7 * 1e4 | 0) + (i1 * 200 | 0) + (i3 << 2) >> 2] | 0; else i1 = 0;
           HEAP32[i59 + (i8 * 20 | 0) + 16 >> 2] = i1;
           i8 = i8 + 1 | 0;
          } while ((i8 | 0) != 3);
          i8 = HEAP32[i12 >> 2] | 0;
          i1 = i8 & 65535;
          i3 = i8 & 65280;
          do if (((i1 | 0) == 0 | (i3 | 0) == 256 ? (i43 = HEAP32[i13 >> 2] | 0, i44 = i43 & 65535, (i44 | 0) == 0 | (i43 & 65280 | 0) == 256) : 0) ? (i45 = HEAP32[i14 >> 2] | 0, i46 = i45 & 65535, (i46 | 0) == 0 | (i45 & 65280 | 0) == 256) : 0) {
           do if ((i1 | 0) != 258) {
            i1 = HEAP32[i59 >> 2] | 0;
            i3 = HEAP32[i23 >> 2] | 0;
            i6 = HEAP32[i24 >> 2] | 0;
            i7 = HEAP32[i25 >> 2] | 0;
            if (!(i1 >>> 0 < 3 & (i3 >>> 0 < 50 & (i6 >>> 0 < 50 & i7 >>> 0 < 50)))) break;
            HEAP32[i61 + 136 + (i1 * 5e5 | 0) + (i3 * 1e4 | 0) + (i6 * 200 | 0) + (i7 << 2) >> 2] = i8 & 16711680 | 257;
           } while (0);
           do if ((i44 | 0) != 258) {
            i1 = HEAP32[i19 >> 2] | 0;
            i3 = HEAP32[i20 >> 2] | 0;
            i6 = HEAP32[i21 >> 2] | 0;
            i7 = HEAP32[i22 >> 2] | 0;
            if (!(i1 >>> 0 < 3 & (i3 >>> 0 < 50 & (i6 >>> 0 < 50 & i7 >>> 0 < 50)))) break;
            HEAP32[i61 + 136 + (i1 * 5e5 | 0) + (i3 * 1e4 | 0) + (i6 * 200 | 0) + (i7 << 2) >> 2] = i43 & 16711680 | 257;
           } while (0);
           if ((i46 | 0) == 258) break;
           i1 = HEAP32[i15 >> 2] | 0;
           i3 = HEAP32[i16 >> 2] | 0;
           i6 = HEAP32[i17 >> 2] | 0;
           i7 = HEAP32[i18 >> 2] | 0;
           if (!(i1 >>> 0 < 3 & (i3 >>> 0 < 50 & (i6 >>> 0 < 50 & i7 >>> 0 < 50)))) break;
           HEAP32[i61 + 136 + (i1 * 5e5 | 0) + (i3 * 1e4 | 0) + (i6 * 200 | 0) + (i7 << 2) >> 2] = i45 & 16711680 | 257;
          } else i60 = 29; while (0);
          if ((i60 | 0) == 29) {
           i60 = 0;
           if ((i3 | 0) != 512 ? (i47 = HEAP32[i59 >> 2] | 0, i48 = HEAP32[i34 >> 2] | 0, i49 = HEAP32[i35 >> 2] | 0, i50 = HEAP32[i36 >> 2] | 0, i47 >>> 0 < 3 & (i48 >>> 0 < 50 & (i49 >>> 0 < 50 & i50 >>> 0 < 50))) : 0) HEAP32[i61 + 136 + (i47 * 5e5 | 0) + (i48 * 1e4 | 0) + (i49 * 200 | 0) + (i50 << 2) >> 2] = 258;
           if ((HEAP32[i13 >> 2] & 65280 | 0) != 512 ? (i51 = HEAP32[i30 >> 2] | 0, i52 = HEAP32[i31 >> 2] | 0, i53 = HEAP32[i32 >> 2] | 0, i54 = HEAP32[i33 >> 2] | 0, i51 >>> 0 < 3 & (i52 >>> 0 < 50 & (i53 >>> 0 < 50 & i54 >>> 0 < 50))) : 0) HEAP32[i61 + 136 + (i51 * 5e5 | 0) + (i52 * 1e4 | 0) + (i53 * 200 | 0) + (i54 << 2) >> 2] = 258;
           if ((HEAP32[i14 >> 2] & 65280 | 0) != 512 ? (i55 = HEAP32[i26 >> 2] | 0, i56 = HEAP32[i27 >> 2] | 0, i57 = HEAP32[i28 >> 2] | 0, i58 = HEAP32[i29 >> 2] | 0, i55 >>> 0 < 3 & (i56 >>> 0 < 50 & (i57 >>> 0 < 50 & i58 >>> 0 < 50))) : 0) HEAP32[i61 + 136 + (i55 * 5e5 | 0) + (i56 * 1e4 | 0) + (i57 * 200 | 0) + (i58 << 2) >> 2] = 258;
          }
          i9 = i9 + 1 | 0;
         } while ((i9 | 0) != 4);
         i1 = HEAP32[i41 >> 2] | 0;
        }
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) < (i1 | 0));
       i1 = HEAP32[i39 >> 2] | 0;
      }
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) < (i1 | 0));
     i1 = HEAP32[i37 >> 2] | 0;
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i1 | 0));
  }
  i42 = i42 + 1 | 0;
 } while ((i42 | 0) != 3);
 __ZN10BuildWorld12reClacLimitsEv(i61);
 i1 = HEAP32[i61 + 40 >> 2] | 0;
 i6 = HEAP32[i61 + 44 >> 2] | 0;
 i7 = HEAP32[i61 + 48 >> 2] | 0;
 i8 = HEAP32[i61 + 52 >> 2] | 0;
 i9 = HEAP32[i61 + 56 >> 2] | 0;
 i10 = HEAP32[i61 + 60 >> 2] | 0;
 L82 : do if ((i1 | 0) < (i6 | 0)) {
  i11 = (i7 | 0) < (i8 | 0);
  i12 = (i9 | 0) < (i10 | 0);
  L84 : while (1) {
   if (i11) {
    i2 = i1 >>> 0 < 50;
    i4 = i7;
    do {
     if (i12) {
      i3 = i4 >>> 0 < 50;
      i5 = i9;
      do {
       if (i2 & (i3 & i5 >>> 0 < 50) ? (HEAP32[i61 + 136 + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) >> 2] & 65535 | 0) == 257 : 0) {
        i1 = 0;
        break L84;
       }
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) < (i10 | 0));
     }
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) < (i8 | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) break L82;
  }
  i61 = i61 + 36 | 0;
  HEAP8[i61 >> 0] = i1;
  STACKTOP = i62;
  return;
 } while (0);
 i1 = HEAP32[i61 + 64 >> 2] | 0;
 i6 = HEAP32[i61 + 68 >> 2] | 0;
 i7 = HEAP32[i61 + 72 >> 2] | 0;
 i8 = HEAP32[i61 + 76 >> 2] | 0;
 i9 = HEAP32[i61 + 80 >> 2] | 0;
 i10 = HEAP32[i61 + 84 >> 2] | 0;
 L101 : do if ((i1 | 0) < (i6 | 0)) {
  i11 = (i7 | 0) < (i8 | 0);
  i12 = (i9 | 0) < (i10 | 0);
  L103 : while (1) {
   if (i11) {
    i2 = i1 >>> 0 < 50;
    i4 = i7;
    do {
     if (i12) {
      i3 = i4 >>> 0 < 50;
      i5 = i9;
      do {
       if (i2 & (i3 & i5 >>> 0 < 50) ? (HEAP32[i61 + 500136 + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) >> 2] & 65535 | 0) == 257 : 0) {
        i1 = 0;
        break L103;
       }
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) < (i10 | 0));
     }
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) < (i8 | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) break L101;
  }
  i61 = i61 + 36 | 0;
  HEAP8[i61 >> 0] = i1;
  STACKTOP = i62;
  return;
 } while (0);
 i1 = HEAP32[i61 + 88 >> 2] | 0;
 i6 = HEAP32[i61 + 92 >> 2] | 0;
 i7 = HEAP32[i61 + 96 >> 2] | 0;
 i8 = HEAP32[i61 + 100 >> 2] | 0;
 i9 = HEAP32[i61 + 104 >> 2] | 0;
 i10 = HEAP32[i61 + 108 >> 2] | 0;
 if ((i1 | 0) >= (i6 | 0)) {
  i60 = 1;
  i61 = i61 + 36 | 0;
  HEAP8[i61 >> 0] = i60;
  STACKTOP = i62;
  return;
 }
 i11 = (i7 | 0) < (i8 | 0);
 i12 = (i9 | 0) < (i10 | 0);
 L123 : while (1) {
  if (i11) {
   i2 = i1 >>> 0 < 50;
   i4 = i7;
   do {
    if (i12) {
     i3 = i4 >>> 0 < 50;
     i5 = i9;
     do {
      if (i2 & (i3 & i5 >>> 0 < 50) ? (HEAP32[i61 + 1000136 + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) >> 2] & 65535 | 0) == 257 : 0) {
       i1 = 0;
       i60 = 59;
       break L123;
      }
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i10 | 0));
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i8 | 0));
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i6 | 0)) {
   i1 = 1;
   i60 = 59;
   break;
  }
 }
 if ((i60 | 0) == 59) {
  i61 = i61 + 36 | 0;
  HEAP8[i61 >> 0] = i1;
  STACKTOP = i62;
  return;
 }
}

function __ZN4Cube11genLinesIFSEP7SlvCubeR15LinesCollection(i45, i2, i40) {
 i45 = i45 | 0;
 i2 = i2 | 0;
 i40 = i40 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i46 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i42 = i47 + 120 | 0;
 i43 = i47 + 72 | 0;
 i44 = i47 + 24 | 0;
 i41 = i47;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i42 + 12 >> 2] = 0;
 HEAPF32[i42 + 16 >> 2] = 0.0;
 HEAPF32[i42 + 20 >> 2] = 0.0;
 HEAPF32[i42 + 24 >> 2] = 0.0;
 HEAPF32[i42 + 28 >> 2] = 0.0;
 HEAPF32[i42 + 32 >> 2] = 0.0;
 HEAPF32[i42 + 36 >> 2] = 0.0;
 HEAPF32[i42 + 40 >> 2] = 0.0;
 HEAPF32[i42 + 44 >> 2] = 0.0;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 HEAP32[i43 + 12 >> 2] = 0;
 HEAPF32[i43 + 16 >> 2] = 0.0;
 HEAPF32[i43 + 20 >> 2] = 0.0;
 HEAPF32[i43 + 24 >> 2] = 0.0;
 HEAPF32[i43 + 28 >> 2] = 0.0;
 HEAPF32[i43 + 32 >> 2] = 0.0;
 HEAPF32[i43 + 36 >> 2] = 0.0;
 HEAPF32[i43 + 40 >> 2] = 0.0;
 HEAPF32[i43 + 44 >> 2] = 0.0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 HEAP32[i44 + 12 >> 2] = 0;
 HEAPF32[i44 + 16 >> 2] = 0.0;
 HEAPF32[i44 + 20 >> 2] = 0.0;
 HEAPF32[i44 + 24 >> 2] = 0.0;
 HEAPF32[i44 + 28 >> 2] = 0.0;
 HEAPF32[i44 + 32 >> 2] = 0.0;
 HEAPF32[i44 + 36 >> 2] = 0.0;
 HEAPF32[i44 + 40 >> 2] = 0.0;
 HEAPF32[i44 + 44 >> 2] = 0.0;
 __ZN4Cube5clearEi(i45, -1);
 i38 = i45 + 36 | 0;
 i3 = HEAP32[i38 >> 2] | 0;
 i21 = i3 + 24 | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i18 = i45 + 40 | 0;
  i19 = i45 + 52 | 0;
  i20 = i45 + 56 | 0;
  i15 = HEAP32[i2 >> 2] | 0;
  i16 = HEAP32[i45 + 60 >> 2] | 0;
  i17 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
  i13 = HEAP32[i3 + 44 >> 2] | 0;
  i14 = 0;
  do {
   i1 = HEAP32[i15 + (i14 * 20 | 0) >> 2] | 0;
   i2 = HEAP32[i15 + (i14 * 20 | 0) + 4 >> 2] | 0;
   HEAP32[i16 + (i14 * 52 | 0) >> 2] = i1;
   HEAP32[i16 + (i14 * 52 | 0) + 4 >> 2] = i2;
   i9 = HEAP32[i13 + (i14 * 188 | 0) >> 2] | 0;
   i3 = HEAP32[i13 + (i14 * 188 | 0) + 4 >> 2] | 0;
   i4 = HEAP32[i13 + (i14 * 188 | 0) + 8 >> 2] | 0;
   i5 = HEAP32[i13 + (i14 * 188 | 0) + 12 >> 2] | 0;
   i6 = 6232 + (i9 * 24 | 0) | 0;
   i7 = 6232 + (i9 * 24 | 0) + 16 | 0;
   i8 = 6232 + (i9 * 24 | 0) + 8 | 0;
   i9 = 6232 + (i9 * 24 | 0) + 20 | 0;
   i12 = 0;
   do {
    i10 = HEAP32[7192 + (i12 << 2) >> 2] | 0;
    i11 = HEAP32[7256 + (i12 << 2) >> 2] | 0;
    if (HEAP32[i17 + (i1 * 1328 | 0) + 116 + (i2 * 108 | 0) + ((i11 * 5 | 0) + i10 << 2) >> 2] | 0) {
     i35 = (Math_imul(HEAP32[i6 >> 2] | 0, i11) | 0) + i3 | 0;
     i36 = (Math_imul(HEAP32[i7 >> 2] | 0, i10) | 0) + i4 | 0;
     i37 = (Math_imul(HEAP32[i8 >> 2] | 0, i11) | 0) + i5 | 0;
     i37 = i37 + (Math_imul(HEAP32[i9 >> 2] | 0, i10) | 0) | 0;
     i36 = i35 + (Math_imul(HEAP32[i18 >> 2] | 0, i36) | 0) | 0;
     i37 = i36 + (Math_imul(HEAP32[i19 >> 2] | 0, i37) | 0) | 0;
     HEAP32[(HEAP32[i20 >> 2] | 0) + (i37 << 2) >> 2] = i14;
    }
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != 16);
   i14 = i14 + 1 | 0;
   i2 = HEAP32[i21 >> 2] | 0;
  } while ((i14 | 0) < (i2 | 0));
 } else i2 = i1;
 i5 = i40 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i40 >> 2] | 0;
 i4 = (i1 - i3 | 0) / 192 | 0;
 if (i2 >>> 0 <= i4 >>> 0) {
  if (i2 >>> 0 < i4 >>> 0 ? (i22 = i3 + (i2 * 192 | 0) | 0, (i1 | 0) != (i22 | 0)) : 0) do {
   i37 = i1 + -192 | 0;
   HEAP32[i5 >> 2] = i37;
   __ZN4MeshD2Ev(i37);
   i1 = HEAP32[i5 >> 2] | 0;
  } while ((i1 | 0) != (i22 | 0));
 } else __ZNSt3__16vectorI4MeshNS_9allocatorIS1_EEE8__appendEj(i40, i2 - i4 | 0);
 i1 = HEAP32[i38 >> 2] | 0;
 if ((HEAP32[i1 + 24 >> 2] | 0) <= 0) {
  STACKTOP = i47;
  return;
 }
 i17 = i45 + 60 | 0;
 i18 = i41 + 4 | 0;
 i19 = i41 + 8 | 0;
 i20 = i41 + 12 | 0;
 i21 = i41 + 8 | 0;
 i22 = i41 + 16 | 0;
 i23 = i45 + 40 | 0;
 i24 = i45 + 52 | 0;
 i25 = i45 + 56 | 0;
 i26 = i44 + 4 | 0;
 i27 = i44 + 8 | 0;
 i28 = i44 + 12 | 0;
 i29 = i44 + 16 | 0;
 i30 = i44 + 20 | 0;
 i31 = i42 + 8 | 0;
 i32 = i42 + 12 | 0;
 i33 = i42 + 20 | 0;
 i34 = i43 + 8 | 0;
 i35 = i43 + 20 | 0;
 i36 = i43 + 12 | 0;
 i37 = i41 + 4 | 0;
 i16 = 0;
 do {
  i2 = HEAP32[i17 >> 2] | 0;
  i15 = HEAP32[i2 + (i16 * 52 | 0) >> 2] | 0;
  i3 = HEAP32[i40 >> 2] | 0;
  HEAP32[i41 >> 2] = i3 + (i16 * 192 | 0);
  HEAP32[i19 >> 2] = 0;
  HEAP32[i20 >> 2] = 0;
  HEAP32[i18 >> 2] = i21;
  HEAP32[i22 >> 2] = i3 + (i16 * 192 | 0) + 8;
  HEAP32[i3 + (i16 * 192 | 0) + 104 >> 2] = 1;
  HEAP8[i3 + (i16 * 192 | 0) + 99 >> 0] = 1;
  i3 = HEAP32[i1 + 44 >> 2] | 0;
  i4 = HEAP32[i3 + (i16 * 188 | 0) + 4 >> 2] | 0;
  i6 = HEAP32[i3 + (i16 * 188 | 0) + 8 >> 2] | 0;
  i8 = HEAP32[i3 + (i16 * 188 | 0) + 12 >> 2] | 0;
  i3 = HEAP32[i3 + (i16 * 188 | 0) >> 2] | 0;
  i5 = HEAP32[6232 + (i3 * 24 | 0) + 16 >> 2] | 0;
  i10 = HEAP32[6232 + (i3 * 24 | 0) + 20 >> 2] | 0;
  i9 = HEAP32[i23 >> 2] | 0;
  i1 = (Math_imul(i9, i5 + i6 | 0) | 0) + i4 | 0;
  i7 = HEAP32[i24 >> 2] | 0;
  i1 = i1 + (Math_imul(i7, i10 + i8 | 0) | 0) | 0;
  i12 = HEAP32[i25 >> 2] | 0;
  i1 = HEAP32[i12 + (i1 << 2) >> 2] | 0;
  if ((i1 | 0) == -1) i11 = -1; else i11 = HEAP32[i2 + (i1 * 52 | 0) >> 2] | 0;
  i14 = (i15 | 0) == -1;
  i2 = i12;
  i13 = 0;
  while (1) {
   i12 = HEAP32[5124 + (i13 * 60 | 0) >> 2] | 0;
   i1 = HEAP32[5124 + (i13 * 60 | 0) + 4 >> 2] | 0;
   i4 = (Math_imul(HEAP32[6232 + (i3 * 24 | 0) >> 2] | 0, i12) | 0) + i4 | 0;
   i6 = (Math_imul(i5, i1) | 0) + i6 | 0;
   i1 = HEAP32[i2 + (i4 + (Math_imul(i9, i6) | 0) + (Math_imul(i7, (Math_imul(HEAP32[6232 + (i3 * 24 | 0) + 8 >> 2] | 0, i12) | 0) + i8 + (Math_imul(i10, i1) | 0) | 0) | 0) << 2) >> 2] | 0;
   if ((i1 | 0) == -1) i12 = -1; else i12 = HEAP32[(HEAP32[i17 >> 2] | 0) + (i1 * 52 | 0) >> 2] | 0;
   if ((i11 | 0) != (i12 | 0)) {
    i2 = (i12 | 0) == -1;
    if (i2) i3 = 0; else {
     i3 = HEAP32[1556] | 0;
     i3 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i12 * 1328 | 0) >> 2] << 6) + 60 >> 2] | 0;
    }
    if ((i11 | 0) == -1) if (i2) {
     i1 = 0;
     i2 = 0;
     i46 = 28;
    } else i1 = (i3 | 0) > 1; else {
     i1 = HEAP32[1556] | 0;
     i1 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i11 * 1328 | 0) >> 2] << 6) + 60 >> 2] | 0;
     if (i2) {
      i2 = 1;
      i46 = 28;
     } else i1 = (i3 | 0) > 0 & (i1 | 0) > 0;
    }
    if ((i46 | 0) == 28) {
     i46 = 0;
     i1 = i2 & (i1 | 0) > 1;
    }
    HEAPF32[i44 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 8 >> 2] | 0);
    HEAPF32[i26 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 12 >> 2] | 0);
    HEAPF32[i27 >> 2] = 0.0;
    HEAPF32[i28 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 16 >> 2] | 0);
    HEAPF32[i29 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 20 >> 2] | 0);
    HEAPF32[i30 >> 2] = 0.0;
    __ZN4Cube9placeIntoEiiP4Vec3S1_S1_(i45, 2, i16, i44, i42, i43);
    HEAPF32[i31 >> 2] = +HEAPF32[i31 >> 2] + -1.0;
    HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] + -1.0;
    HEAPF32[i34 >> 2] = +HEAPF32[i34 >> 2] + -1.0;
    HEAPF32[i35 >> 2] = +HEAPF32[i35 >> 2] + -1.0;
    i10 = (i11 | 0) == (i15 | 0) | (i12 | 0) == (i15 | 0);
    i9 = i10 & 1 ^ 1;
    __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i41, i42, i32, i1, i9);
    __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i41, i43, i36, i1, i9);
    if (i10) __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i41, i42, i36, i1, (i11 | 0) != -1 & (i12 | 0) != -1 ? 2 : 0);
   }
   if ((i12 | 0) != (i15 | 0) ? (i39 = 5124 + (i13 * 60 | 0) + 24 | 0, (4369 >>> i13 & 1 | 0) == 0) : 0) {
    i2 = (i12 | 0) == -1;
    if (i2) i3 = 0; else {
     i3 = HEAP32[1556] | 0;
     i3 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i12 * 1328 | 0) >> 2] << 6) + 60 >> 2] | 0;
    }
    if (i14) if (i2) {
     i1 = 0;
     i2 = 0;
     i46 = 40;
    } else i1 = (i3 | 0) > 1; else {
     i1 = HEAP32[1556] | 0;
     i1 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i15 * 1328 | 0) >> 2] << 6) + 60 >> 2] | 0;
     if (i2) {
      i2 = 1;
      i46 = 40;
     } else i1 = (i3 | 0) > 0 & (i1 | 0) > 0;
    }
    if ((i46 | 0) == 40) {
     i46 = 0;
     i1 = i2 & (i1 | 0) > 1;
    }
    HEAPF32[i44 >> 2] = +(HEAP32[i39 >> 2] | 0);
    HEAPF32[i26 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 28 >> 2] | 0);
    HEAPF32[i27 >> 2] = 0.0;
    HEAPF32[i28 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 32 >> 2] | 0);
    HEAPF32[i29 >> 2] = +(HEAP32[5124 + (i13 * 60 | 0) + 36 >> 2] | 0);
    HEAPF32[i30 >> 2] = 0.0;
    __ZN4Cube9placeIntoEiiP4Vec3S1_S1_(i45, 2, i16, i44, i42, i43);
    HEAPF32[i31 >> 2] = +HEAPF32[i31 >> 2] + -1.0;
    HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] + -1.0;
    HEAPF32[i34 >> 2] = +HEAPF32[i34 >> 2] + -1.0;
    HEAPF32[i35 >> 2] = +HEAPF32[i35 >> 2] + -1.0;
    __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i41, i42, i32, i1, 0);
    __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i41, i43, i36, i1, 0);
   }
   i1 = i13 + 1 | 0;
   if ((i1 | 0) >= 16) break;
   i8 = HEAP32[(HEAP32[i38 >> 2] | 0) + 44 >> 2] | 0;
   i10 = HEAP32[i8 + (i16 * 188 | 0) >> 2] | 0;
   i3 = i10;
   i4 = HEAP32[i8 + (i16 * 188 | 0) + 4 >> 2] | 0;
   i5 = HEAP32[6232 + (i10 * 24 | 0) + 16 >> 2] | 0;
   i6 = HEAP32[i8 + (i16 * 188 | 0) + 8 >> 2] | 0;
   i8 = HEAP32[i8 + (i16 * 188 | 0) + 12 >> 2] | 0;
   i10 = HEAP32[6232 + (i10 * 24 | 0) + 20 >> 2] | 0;
   i9 = HEAP32[i23 >> 2] | 0;
   i7 = HEAP32[i24 >> 2] | 0;
   i2 = HEAP32[i25 >> 2] | 0;
   i13 = i1;
   i11 = i12;
  }
  __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i37, HEAP32[i21 >> 2] | 0);
  i16 = i16 + 1 | 0;
  i1 = HEAP32[i38 >> 2] | 0;
 } while ((i16 | 0) < (HEAP32[i1 + 24 >> 2] | 0));
 STACKTOP = i47;
 return;
}

function __ZNK10SlvPainter10paintPieceEiP12BaseGLWidgetb(i4, i26, i32, i30) {
 i4 = i4 | 0;
 i26 = i26 | 0;
 i32 = i32 | 0;
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i27 = i33 + 80 | 0;
 i23 = i33 + 16 | 0;
 i31 = i33;
 i3 = HEAP32[HEAP32[i4 + 36 >> 2] >> 2] | 0;
 i28 = HEAP32[i3 + (i26 * 20 | 0) + 8 >> 2] | 0;
 i3 = HEAP32[i3 + (i26 * 20 | 0) + 4 >> 2] | 0;
 i29 = i28 + 1012 | 0;
 i1 = HEAP32[i29 >> 2] | 0;
 i2 = (i3 | 0) < 4;
 do if ((i1 | 0) < 4) if (i2) {
  i2 = (i3 + 4 + i1 | 0) % 4 | 0;
  break;
 } else {
  i2 = ((i3 - i1 | 0) % 4 | 0) + 4 | 0;
  break;
 } else if (i2) {
  i2 = ((i1 + i3 | 0) % 4 | 0) + 4 | 0;
  break;
 } else {
  i2 = (i3 + 4 - i1 | 0) % 4 | 0;
  break;
 } while (0);
 i24 = i32 + 108 | 0;
 i21 = i27;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 HEAP32[i27 + 64 >> 2] = 0;
 i25 = i32 + 180 | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i32 + 184 >> 2] | 0) >>> 0) {
  i21 = i1;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
  HEAP32[i1 + 64 >> 2] = 0;
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 68;
 } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i32 + 176 | 0, i27);
 i21 = i23;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i21 = i27;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i1 = 0;
 do {
  d18 = +HEAPF32[i23 + (i1 << 2) >> 2];
  i3 = i1 + 4 | 0;
  d19 = +HEAPF32[i23 + (i3 << 2) >> 2];
  d15 = d19 * 0.0;
  i21 = i1 + 8 | 0;
  d20 = +HEAPF32[i23 + (i21 << 2) >> 2];
  d13 = d20 * 0.0;
  i22 = i1 + 12 | 0;
  d17 = +HEAPF32[i23 + (i22 << 2) >> 2];
  d16 = d17 * 0.0;
  HEAPF32[i27 + (i1 << 2) >> 2] = d18 + 0.0 + d15 + d13 + d16;
  d14 = d18 * 0.0 + 0.0;
  HEAPF32[i27 + (i3 << 2) >> 2] = d19 + d14 + d13 + d16;
  HEAPF32[i27 + (i21 << 2) >> 2] = d20 + (d14 + d15) + d16;
  HEAPF32[i27 + (i22 << 2) >> 2] = d17 + (d18 * .5 + 0.0 + d19 * .5 - d20 * .5);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i27 | 0) != (i24 | 0)) {
  i21 = i24;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
 }
 i1 = HEAP32[i4 + 40 >> 2] | 0;
 i21 = i23;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 d10 = +HEAPF32[i1 + (i26 << 6) >> 2];
 d11 = +HEAPF32[i1 + (i26 << 6) + 4 >> 2];
 d12 = +HEAPF32[i1 + (i26 << 6) + 8 >> 2];
 d13 = +HEAPF32[i1 + (i26 << 6) + 12 >> 2];
 d14 = +HEAPF32[i1 + (i26 << 6) + 16 >> 2];
 d15 = +HEAPF32[i1 + (i26 << 6) + 20 >> 2];
 d16 = +HEAPF32[i1 + (i26 << 6) + 24 >> 2];
 d17 = +HEAPF32[i1 + (i26 << 6) + 28 >> 2];
 d18 = +HEAPF32[i1 + (i26 << 6) + 32 >> 2];
 d19 = +HEAPF32[i1 + (i26 << 6) + 36 >> 2];
 d20 = +HEAPF32[i1 + (i26 << 6) + 40 >> 2];
 d6 = +HEAPF32[i1 + (i26 << 6) + 44 >> 2];
 d7 = +HEAPF32[i1 + (i26 << 6) + 48 >> 2];
 d8 = +HEAPF32[i1 + (i26 << 6) + 52 >> 2];
 d9 = +HEAPF32[i1 + (i26 << 6) + 56 >> 2];
 d5 = +HEAPF32[i1 + (i26 << 6) + 60 >> 2];
 i21 = i27;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i1 = 0;
 do {
  d37 = +HEAPF32[i23 + (i1 << 2) >> 2];
  i4 = i1 + 4 | 0;
  d36 = +HEAPF32[i23 + (i4 << 2) >> 2];
  i21 = i1 + 8 | 0;
  d35 = +HEAPF32[i23 + (i21 << 2) >> 2];
  i22 = i1 + 12 | 0;
  d34 = +HEAPF32[i23 + (i22 << 2) >> 2];
  HEAPF32[i27 + (i1 << 2) >> 2] = d10 * d37 + 0.0 + d11 * d36 + d12 * d35 + d13 * d34;
  HEAPF32[i27 + (i4 << 2) >> 2] = d14 * d37 + 0.0 + d15 * d36 + d16 * d35 + d17 * d34;
  HEAPF32[i27 + (i21 << 2) >> 2] = d18 * d37 + 0.0 + d19 * d36 + d20 * d35 + d6 * d34;
  HEAPF32[i27 + (i22 << 2) >> 2] = d7 * d37 + 0.0 + d8 * d36 + d9 * d35 + d5 * d34;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i27 | 0) != (i24 | 0)) {
  i21 = i24;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
 }
 i21 = i23;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i21 = i27;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i1 = 0;
 do {
  d35 = +HEAPF32[i23 + (i1 << 2) >> 2];
  i4 = i1 + 4 | 0;
  d36 = +HEAPF32[i23 + (i4 << 2) >> 2];
  d19 = d36 * 0.0;
  i21 = i1 + 8 | 0;
  d37 = +HEAPF32[i23 + (i21 << 2) >> 2];
  d17 = d37 * 0.0;
  i22 = i1 + 12 | 0;
  d34 = +HEAPF32[i23 + (i22 << 2) >> 2];
  d20 = d34 * 0.0;
  HEAPF32[i27 + (i1 << 2) >> 2] = d35 + 0.0 + d19 + d17 + d20;
  d18 = d35 * 0.0 + 0.0;
  HEAPF32[i27 + (i4 << 2) >> 2] = d36 + d18 + d17 + d20;
  HEAPF32[i27 + (i21 << 2) >> 2] = d37 + (d18 + d19) + d20;
  HEAPF32[i27 + (i22 << 2) >> 2] = d34 + (0.0 - d35 * .5 - d36 * .5 + d37 * .5);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i27 | 0) != (i24 | 0)) {
  i21 = i24;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
 }
 __ZN4Mat46rotateEffff(i24, 90.0, 0.0, 1.0, 0.0);
 i21 = i23;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i21 = i27;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i1 = 0;
 do {
  d35 = +HEAPF32[i23 + (i1 << 2) >> 2];
  i4 = i1 + 4 | 0;
  d36 = +HEAPF32[i23 + (i4 << 2) >> 2];
  d19 = d36 * 0.0;
  i21 = i1 + 8 | 0;
  d37 = +HEAPF32[i23 + (i21 << 2) >> 2];
  d17 = d37 * 0.0;
  i22 = i1 + 12 | 0;
  d34 = +HEAPF32[i23 + (i22 << 2) >> 2];
  d20 = d34 * 0.0;
  HEAPF32[i27 + (i1 << 2) >> 2] = d35 + 0.0 + d19 + d17 + d20;
  d18 = d35 * 0.0 + 0.0;
  HEAPF32[i27 + (i4 << 2) >> 2] = d36 + d18 + d17 + d20;
  HEAPF32[i27 + (i21 << 2) >> 2] = d37 + (d18 + d19) + d20;
  HEAPF32[i27 + (i22 << 2) >> 2] = d34 + (d35 * .5 + 0.0 + d36 * 2.5 + d37 * 2.5);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i27 | 0) != (i24 | 0)) {
  i21 = i24;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
 }
 __ZN4Mat46rotateEffff(i24, +(Math_imul(i2, -90) | 0), 1.0, 0.0, 0.0);
 if ((i2 | 0) > 3) {
  __ZN4Mat46rotateEffff(i24, 180.0, 0.0, 0.0, 1.0);
  __ZN4Mat46rotateEffff(i24, 90.0, 1.0, 0.0, 0.0);
 }
 i21 = i23;
 i3 = i24;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i21 = i27;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i1 = 0;
 do {
  d35 = +HEAPF32[i23 + (i1 << 2) >> 2];
  i4 = i1 + 4 | 0;
  d36 = +HEAPF32[i23 + (i4 << 2) >> 2];
  d19 = d36 * 0.0;
  i21 = i1 + 8 | 0;
  d37 = +HEAPF32[i23 + (i21 << 2) >> 2];
  d17 = d37 * 0.0;
  i22 = i1 + 12 | 0;
  d34 = +HEAPF32[i23 + (i22 << 2) >> 2];
  d20 = d34 * 0.0;
  HEAPF32[i27 + (i1 << 2) >> 2] = d35 + 0.0 + d19 + d17 + d20;
  d18 = d35 * 0.0 + 0.0;
  HEAPF32[i27 + (i4 << 2) >> 2] = d36 + d18 + d17 + d20;
  HEAPF32[i27 + (i21 << 2) >> 2] = d37 + (d18 + d19) + d20;
  HEAPF32[i27 + (i22 << 2) >> 2] = d34 + (0.0 - d35 * .5 - d36 * 2.5 - d37 * 2.5);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i27 | 0) != (i24 | 0)) {
  i21 = i24;
  i3 = i27;
  i22 = i21 + 64 | 0;
  do {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   i21 = i21 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i21 | 0) < (i22 | 0));
 }
 i23 = i26 + 1 | 0;
 HEAPF32[i31 >> 2] = +(i23 & 255 | 0) / 255.0;
 HEAPF32[i31 + 4 >> 2] = +(i23 >>> 8 & 255 | 0) / 255.0;
 HEAPF32[i31 + 8 >> 2] = +(i23 >>> 16 & 255 | 0) / 255.0;
 i23 = HEAP32[1549] | 0;
 i1 = HEAP32[i23 + 92 >> 2] | 0;
 if ((HEAP32[i23 + 96 >> 2] | 0) - i1 >> 2 >>> 0 > i26 >>> 0) i1 = HEAP32[i1 + (i26 << 2) >> 2] | 0; else i1 = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 __ZNK10PicPainter5paintEbRK4Vec3P12BaseGLWidgetbi(i28 + 992 | 0, i30, i31, i32, (HEAP32[i29 >> 2] | 0) < 4, i1);
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 i1 = HEAP32[i25 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i32 + 176 >> 2] | 0)) {
  i33 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i33 >> 2] = 7152;
  HEAP32[i33 + 4 >> 2] = 21369;
  ___cxa_throw(i33 | 0, 2608, 44);
 }
 i2 = i1 + -68 | 0;
 if ((i2 | 0) == (i24 | 0)) {
  i31 = i1 + -4 | 0;
  i31 = HEAP32[i31 >> 2] | 0;
  i32 = i32 + 172 | 0;
  HEAP32[i32 >> 2] = i31;
  HEAP32[i25 >> 2] = i2;
  STACKTOP = i33;
  return;
 }
 i21 = i24;
 i3 = i2;
 i22 = i21 + 64 | 0;
 do {
  HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
  i21 = i21 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i21 | 0) < (i22 | 0));
 i31 = i1 + -4 | 0;
 i31 = HEAP32[i31 >> 2] | 0;
 i32 = i32 + 172 | 0;
 HEAP32[i32 >> 2] = i31;
 HEAP32[i25 >> 2] = i2;
 STACKTOP = i33;
 return;
}

function _free(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if (!i15) return;
 i1 = i15 + -8 | 0;
 i7 = HEAP32[3223] | 0;
 if (i1 >>> 0 < i7 >>> 0) _abort();
 i2 = HEAP32[i15 + -4 >> 2] | 0;
 i3 = i2 & 3;
 if ((i3 | 0) == 1) _abort();
 i13 = i2 & -8;
 i16 = i15 + (i13 + -8) | 0;
 do if (!(i2 & 1)) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i3) return;
  i8 = -8 - i1 | 0;
  i10 = i15 + i8 | 0;
  i11 = i1 + i13 | 0;
  if (i10 >>> 0 < i7 >>> 0) _abort();
  if ((i10 | 0) == (HEAP32[3224] | 0)) {
   i1 = i15 + (i13 + -4) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i20 = i10;
    i5 = i11;
    break;
   }
   HEAP32[3221] = i11;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i15 + (i8 + 4) >> 2] = i11 | 1;
   HEAP32[i16 >> 2] = i11;
   return;
  }
  i4 = i1 >>> 3;
  if (i1 >>> 0 < 256) {
   i3 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   i2 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
   i1 = 12916 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i10 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[3219] = HEAP32[3219] & ~(1 << i4);
    i20 = i10;
    i5 = i11;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i20 = i10;
   i5 = i11;
   break;
  }
  i6 = HEAP32[i15 + (i8 + 24) >> 2] | 0;
  i3 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
  do if ((i3 | 0) == (i10 | 0)) {
   i2 = i15 + (i8 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i8 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i10 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i15 + (i8 + 28) >> 2] | 0;
   i2 = 13180 + (i1 << 2) | 0;
   if ((i10 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
     i20 = i10;
     i5 = i11;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i20 = i10;
     i5 = i11;
     break;
    }
   }
   i2 = HEAP32[3223] | 0;
   if (i9 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = HEAP32[i15 + (i8 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i8 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i20 = i10;
    i5 = i11;
    break;
   } else {
    i20 = i10;
    i5 = i11;
   }
  } else {
   i20 = i10;
   i5 = i11;
  }
 } else {
  i20 = i1;
  i5 = i13;
 } while (0);
 if (i20 >>> 0 >= i16 >>> 0) _abort();
 i1 = i15 + (i13 + -4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) _abort();
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[3225] | 0)) {
   i19 = (HEAP32[3222] | 0) + i5 | 0;
   HEAP32[3222] = i19;
   HEAP32[3225] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   if ((i20 | 0) != (HEAP32[3224] | 0)) return;
   HEAP32[3224] = 0;
   HEAP32[3221] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[3224] | 0)) {
   i19 = (HEAP32[3221] | 0) + i5 | 0;
   HEAP32[3221] = i19;
   HEAP32[3224] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   HEAP32[i20 + i19 >> 2] = i19;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i15 + (i13 + 16) >> 2] | 0;
   i1 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   do if ((i1 | 0) == (i16 | 0)) {
    i2 = i15 + (i13 + 12) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i15 + (i13 + 8) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i14 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i14 = i1;
     break;
    }
   } else {
    i2 = HEAP32[i15 + i13 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i3 = i2 + 12 | 0;
    if ((HEAP32[i3 >> 2] | 0) != (i16 | 0)) _abort();
    i4 = i1 + 8 | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i3 >> 2] = i1;
     HEAP32[i4 >> 2] = i2;
     i14 = i1;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i15 + (i13 + 20) >> 2] | 0;
    i2 = 13180 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i14;
     if (!i14) {
      HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
     if (!i14) break;
    }
    i2 = HEAP32[3223] | 0;
    if (i14 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i14 + 24 >> 2] = i6;
    i1 = HEAP32[i15 + (i13 + 8) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i14 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    } while (0);
    i1 = HEAP32[i15 + (i13 + 12) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
     HEAP32[i14 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    }
   }
  } else {
   i3 = HEAP32[i15 + i13 >> 2] | 0;
   i2 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   i1 = 12916 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[3219] = HEAP32[3219] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
  if ((i20 | 0) == (HEAP32[3224] | 0)) {
   HEAP32[3221] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 12916 + (i2 << 2) | 0;
  i3 = HEAP32[3219] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 12916 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[3219] = i3 | i1;
   i17 = 12916 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i20;
  HEAP32[i18 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i18;
  HEAP32[i20 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 13180 + (i4 << 2) | 0;
 HEAP32[i20 + 28 >> 2] = i4;
 HEAP32[i20 + 20 >> 2] = 0;
 HEAP32[i20 + 16 >> 2] = 0;
 i2 = HEAP32[3220] | 0;
 i3 = 1 << i4;
 L199 : do if (i2 & i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  L202 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) break;
    if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i19 = i3;
     break L202;
    } else {
     i4 = i4 << 1;
     i1 = i3;
    }
   }
   if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = i20;
    HEAP32[i20 + 24 >> 2] = i1;
    HEAP32[i20 + 12 >> 2] = i20;
    HEAP32[i20 + 8 >> 2] = i20;
    break L199;
   }
  } else i19 = i1; while (0);
  i1 = i19 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i18 = HEAP32[3223] | 0;
  if (i2 >>> 0 >= i18 >>> 0 & i19 >>> 0 >= i18 >>> 0) {
   HEAP32[i2 + 12 >> 2] = i20;
   HEAP32[i1 >> 2] = i20;
   HEAP32[i20 + 8 >> 2] = i2;
   HEAP32[i20 + 12 >> 2] = i19;
   HEAP32[i20 + 24 >> 2] = 0;
   break;
  } else _abort();
 } else {
  HEAP32[3220] = i2 | i3;
  HEAP32[i1 >> 2] = i20;
  HEAP32[i20 + 24 >> 2] = i1;
  HEAP32[i20 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i20;
 } while (0);
 i20 = (HEAP32[3227] | 0) + -1 | 0;
 HEAP32[3227] = i20;
 if (!i20) i1 = 13332; else return;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[3227] = -1;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] & 127](i44) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 16744, 16776) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 16776, 16808) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 16808, 16852) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 16852, 16872) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 16872, 16904) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 24 >> 2] & 127](i44) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 12 >> 2] & 127](i43) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 36832, 36840) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 36840, 36848) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 36848, 36859) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 36859, 36864) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 36864, 36872) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 24 >> 2] & 127](i43) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function _dispose_chunk(i14, i15) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = i14 + i15 | 0;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i8 = HEAP32[i14 >> 2] | 0;
  if (!(i1 & 3)) return;
  i11 = i14 + (0 - i8) | 0;
  i10 = i8 + i15 | 0;
  i7 = HEAP32[3223] | 0;
  if (i11 >>> 0 < i7 >>> 0) _abort();
  if ((i11 | 0) == (HEAP32[3224] | 0)) {
   i2 = i14 + (i15 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i19 = i11;
    i5 = i10;
    break;
   }
   HEAP32[3221] = i10;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i14 + (4 - i8) >> 2] = i10 | 1;
   HEAP32[i16 >> 2] = i10;
   return;
  }
  i4 = i8 >>> 3;
  if (i8 >>> 0 < 256) {
   i3 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   i2 = HEAP32[i14 + (12 - i8) >> 2] | 0;
   i1 = 12916 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i11 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[3219] = HEAP32[3219] & ~(1 << i4);
    i19 = i11;
    i5 = i10;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i19 = i11;
   i5 = i10;
   break;
  }
  i6 = HEAP32[i14 + (24 - i8) >> 2] | 0;
  i3 = HEAP32[i14 + (12 - i8) >> 2] | 0;
  do if ((i3 | 0) == (i11 | 0)) {
   i3 = 16 - i8 | 0;
   i2 = i14 + (i3 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i14 + i3 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i11 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i11 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i14 + (28 - i8) >> 2] | 0;
   i2 = 13180 + (i1 << 2) | 0;
   if ((i11 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
     i19 = i11;
     i5 = i10;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i19 = i11;
     i5 = i10;
     break;
    }
   }
   i3 = HEAP32[3223] | 0;
   if (i9 >>> 0 < i3 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = 16 - i8 | 0;
   i2 = HEAP32[i14 + i1 >> 2] | 0;
   do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i14 + (i1 + 4) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i19 = i11;
    i5 = i10;
    break;
   } else {
    i19 = i11;
    i5 = i10;
   }
  } else {
   i19 = i11;
   i5 = i10;
  }
 } else {
  i19 = i14;
  i5 = i15;
 } while (0);
 i7 = HEAP32[3223] | 0;
 if (i16 >>> 0 < i7 >>> 0) _abort();
 i1 = i14 + (i15 + 4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[3225] | 0)) {
   i18 = (HEAP32[3222] | 0) + i5 | 0;
   HEAP32[3222] = i18;
   HEAP32[3225] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   if ((i19 | 0) != (HEAP32[3224] | 0)) return;
   HEAP32[3224] = 0;
   HEAP32[3221] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[3224] | 0)) {
   i18 = (HEAP32[3221] | 0) + i5 | 0;
   HEAP32[3221] = i18;
   HEAP32[3224] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   HEAP32[i19 + i18 >> 2] = i18;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i14 + (i15 + 24) >> 2] | 0;
   i3 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   do if ((i3 | 0) == (i16 | 0)) {
    i2 = i14 + (i15 + 20) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i14 + (i15 + 16) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i13 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < i7 >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i13 = i1;
     break;
    }
   } else {
    i4 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
    if (i4 >>> 0 < i7 >>> 0) _abort();
    i1 = i4 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) != (i16 | 0)) _abort();
    i2 = i3 + 8 | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i2 >> 2] = i4;
     i13 = i3;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i14 + (i15 + 28) >> 2] | 0;
    i2 = 13180 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i13;
     if (!i13) {
      HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i6 + 20 >> 2] = i13;
     if (!i13) break;
    }
    i2 = HEAP32[3223] | 0;
    if (i13 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i13 + 24 >> 2] = i6;
    i1 = HEAP32[i14 + (i15 + 16) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i13 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    } while (0);
    i1 = HEAP32[i14 + (i15 + 20) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
     HEAP32[i13 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    }
   }
  } else {
   i3 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
   i2 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   i1 = 12916 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[3219] = HEAP32[3219] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
  if ((i19 | 0) == (HEAP32[3224] | 0)) {
   HEAP32[3221] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 12916 + (i2 << 2) | 0;
  i3 = HEAP32[3219] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 12916 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[3219] = i3 | i1;
   i17 = 12916 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i19;
  HEAP32[i18 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i18;
  HEAP32[i19 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 13180 + (i4 << 2) | 0;
 HEAP32[i19 + 28 >> 2] = i4;
 HEAP32[i19 + 20 >> 2] = 0;
 HEAP32[i19 + 16 >> 2] = 0;
 i2 = HEAP32[3220] | 0;
 i3 = 1 << i4;
 if (!(i2 & i3)) {
  HEAP32[3220] = i2 | i3;
  HEAP32[i1 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 L191 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
  i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
  while (1) {
   i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) break;
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = i3;
    break L191;
   } else {
    i4 = i4 << 1;
    i1 = i3;
   }
  }
  if (i2 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
  HEAP32[i2 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 } while (0);
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i18 = HEAP32[3223] | 0;
 if (!(i3 >>> 0 >= i18 >>> 0 & i1 >>> 0 >= i18 >>> 0)) _abort();
 HEAP32[i3 + 12 >> 2] = i19;
 HEAP32[i2 >> 2] = i19;
 HEAP32[i19 + 8 >> 2] = i3;
 HEAP32[i19 + 12 >> 2] = i1;
 HEAP32[i19 + 24 >> 2] = 0;
 return;
}

function __ZN13ShaderProgram4initERK15ProgCompileConf(i32, i1) {
 i32 = i32 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i17 = i31 + 184 | 0;
 i28 = i31 + 172 | 0;
 i1 = i31 + 160 | 0;
 i2 = i31 + 148 | 0;
 i16 = i31 + 144 | 0;
 i15 = i31 + 136 | 0;
 i13 = i31 + 120 | 0;
 i14 = i31 + 108 | 0;
 i29 = i31 + 104 | 0;
 i30 = i31 + 96 | 0;
 i23 = i31 + 84 | 0;
 i24 = i31 + 72 | 0;
 i25 = i31 + 60 | 0;
 i26 = i31 + 48 | 0;
 i27 = i31 + 36 | 0;
 i18 = i31 + 24 | 0;
 i19 = i31 + 12 | 0;
 i20 = i31;
 if (!(HEAP8[21067] | 0)) HEAP8[21067] = 1;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 i21 = i32 + 4 | 0;
 HEAP32[i21 >> 2] = _glCreateProgram() | 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i28 + 4 >> 2] = 0;
 HEAP32[i28 + 8 >> 2] = 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i32 >> 2] | 0) + 16 >> 2] & 255](i32);
 i22 = i32 + 48 | 0;
 HEAP8[i22 >> 0] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, 21150, 6);
 i3 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i2, 21157) | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
 i3 = i32 + 16 | 0;
 i4 = i32 + 12 | 0;
 if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i4 >> 2] | 0)) {
  i5 = i28 + 8 | 0;
  i6 = i28 + 1 | 0;
  i7 = i15 + 4 | 0;
  i8 = i32 + 56 | 0;
  i9 = i32 + 60 | 0;
  i10 = i32 + 52 | 0;
  i12 = 0;
  do {
   i11 = _glCreateShader(35633) | 0;
   HEAP32[i16 >> 2] = i11;
   HEAP32[i15 >> 2] = (HEAP8[i28 >> 0] & 1) == 0 ? i6 : HEAP32[i5 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = i1 + (i12 * 12 | 0) | 0;
   if (!(HEAP8[i2 >> 0] & 1)) i1 = i2 + 1 | 0; else i1 = HEAP32[i1 + (i12 * 12 | 0) + 8 >> 2] | 0;
   HEAP32[i7 >> 2] = i1;
   _glShaderSource(i11 | 0, 2, i15 | 0, 0);
   _glCompileShader(i11 | 0);
   _glAttachShader(HEAP32[i21 >> 2] | 0, i11 | 0);
   __ZN13ShaderProgram18printShaderInfoLogEj(i11) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i9 >> 2] | 0)) __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_(i10, i16); else {
    HEAP32[i1 >> 2] = i11;
    HEAP32[i8 >> 2] = i1 + 4;
   }
   i12 = i12 + 1 | 0;
  } while (i12 >>> 0 < (((HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0) / 12 | 0) >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i14, 21174, 4);
 i3 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i14, 21157) | 0;
 HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
 i3 = i32 + 40 | 0;
 i4 = i32 + 36 | 0;
 if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i4 >> 2] | 0)) {
  i5 = i28 + 8 | 0;
  i6 = i28 + 1 | 0;
  i7 = i30 + 4 | 0;
  i8 = i32 + 56 | 0;
  i9 = i32 + 60 | 0;
  i10 = i32 + 52 | 0;
  i12 = 0;
  do {
   i11 = _glCreateShader(35632) | 0;
   HEAP32[i29 >> 2] = i11;
   HEAP32[i30 >> 2] = (HEAP8[i28 >> 0] & 1) == 0 ? i6 : HEAP32[i5 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = i1 + (i12 * 12 | 0) | 0;
   if (!(HEAP8[i2 >> 0] & 1)) i1 = i2 + 1 | 0; else i1 = HEAP32[i1 + (i12 * 12 | 0) + 8 >> 2] | 0;
   HEAP32[i7 >> 2] = i1;
   _glShaderSource(i11 | 0, 2, i30 | 0, 0);
   _glCompileShader(i11 | 0);
   _glAttachShader(HEAP32[i21 >> 2] | 0, i11 | 0);
   __ZN13ShaderProgram18printShaderInfoLogEj(i11) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i9 >> 2] | 0)) __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_(i10, i29); else {
    HEAP32[i1 >> 2] = i11;
    HEAP32[i8 >> 2] = i1 + 4;
   }
   i12 = i12 + 1 | 0;
  } while (i12 >>> 0 < (((HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0) / 12 | 0) >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i24, 21179, 5);
 i30 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i24, 21157) | 0;
 HEAP32[i23 >> 2] = HEAP32[i30 >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i30 >> 2] = 0;
 HEAP32[i30 + 4 >> 2] = 0;
 HEAP32[i30 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 if ((HEAP32[i32 + 56 >> 2] | 0) == (HEAP32[i32 + 52 >> 2] | 0)) {
  i32 = HEAP8[i22 >> 0] | 0;
  i32 = i32 << 24 >> 24 != 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i28);
  STACKTOP = i31;
  return i32 | 0;
 }
 _glLinkProgram(HEAP32[i21 >> 2] | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i26, 21185, 5);
 i30 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i26, 21157) | 0;
 HEAP32[i25 >> 2] = HEAP32[i30 >> 2];
 HEAP32[i25 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i25 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i30 >> 2] = 0;
 HEAP32[i30 + 4 >> 2] = 0;
 HEAP32[i30 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 i30 = __ZN13ShaderProgram19printProgramInfoLogEj(HEAP32[i21 >> 2] | 0) | 0;
 HEAP8[i22 >> 0] = i30 & 1;
 if (i30) {
  i30 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21191, 12) | 0;
  i30 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i30, HEAP32[i21 >> 2] | 0) | 0;
  HEAP32[i17 >> 2] = __ZNKSt3__18ios_base6getlocEv(i30 + (HEAP32[(HEAP32[i30 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i29 = __ZNKSt3__16locale9use_facetERNS0_2idE(i17, 16144) | 0;
  i29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i29 >> 2] | 0) + 28 >> 2] & 63](i29, 10) | 0;
  __ZNSt3__16localeD2Ev(i17);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i30, i29) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i30) | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i18, 21204, 9);
 i30 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i18, 21157) | 0;
 HEAP32[i27 >> 2] = HEAP32[i30 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i27 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i30 >> 2] = 0;
 HEAP32[i30 + 4 >> 2] = 0;
 HEAP32[i30 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i32 >> 2] | 0) + 20 >> 2] & 255](i32);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i20, 21214, 5);
 i32 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i20, 21157) | 0;
 HEAP32[i19 >> 2] = HEAP32[i32 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i32 >> 2] = 0;
 HEAP32[i32 + 4 >> 2] = 0;
 HEAP32[i32 + 8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 i32 = HEAP8[i22 >> 0] | 0;
 i32 = i32 << 24 >> 24 != 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i28);
 STACKTOP = i31;
 return i32 | 0;
}

function __ZN5Shape17makeNeiTransformsEv(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i33 = i35 + 128 | 0;
 i32 = i35 + 116 | 0;
 i31 = i35 + 104 | 0;
 i26 = i35;
 i34 = i35 + 24 | 0;
 i27 = i35 + 20 | 0;
 i24 = i30 + 24 | 0;
 if ((HEAP32[i24 >> 2] | 0) > 0) {
  i23 = i30 + 44 | 0;
  i2 = 0;
  i3 = 0;
  i5 = 0;
  i4 = 0;
  do {
   i19 = HEAP32[i23 >> 2] | 0;
   i20 = i19 + (i4 * 188 | 0) + 4 | 0;
   i21 = i19 + (i4 * 188 | 0) + 8 | 0;
   i22 = i19 + (i4 * 188 | 0) + 12 | 0;
   i18 = i19 + (i4 * 188 | 0) | 0;
   i17 = 0;
   do {
    i6 = HEAP32[i19 + (i4 * 188 | 0) + 60 + (i17 << 2) >> 2] | 0;
    if ((i6 | 0) != -1) {
     i10 = HEAP32[i23 >> 2] | 0;
     i7 = i10 + (i6 * 188 | 0) | 0;
     i12 = HEAP32[i10 + (i6 * 188 | 0) + 4 >> 2] | 0;
     i13 = HEAP32[i20 >> 2] | 0;
     i8 = i12 - i13 | 0;
     i14 = HEAP32[i10 + (i6 * 188 | 0) + 8 >> 2] | 0;
     i16 = HEAP32[i21 >> 2] | 0;
     i9 = i14 - i16 | 0;
     i10 = HEAP32[i10 + (i6 * 188 | 0) + 12 >> 2] | 0;
     i11 = HEAP32[i22 >> 2] | 0;
     i6 = i10 - i11 | 0;
     L9 : do switch (HEAP32[i18 >> 2] | 0) {
     case 2:
      switch (HEAP32[i7 >> 2] | 0) {
      case 2:
       {
        i2 = 0;
        i6 = 0;
        i7 = 0;
        i3 = 0;
        i5 = 0;
        break L9;
       }
      case 1:
       {
        i3 = (i10 | 0) == (i11 | 0);
        i2 = (i14 | 0) == (i16 | 0) ? (i3 ? 4 : 3) : i3 ? 2 : 1;
        i6 = 1;
        i7 = 0;
        i3 = i3 & 1 ^ 1;
        i5 = 0;
        break L9;
       }
      case 0:
       {
        i3 = (i10 | 0) != (i11 | 0);
        i2 = (i12 | 0) == (i13 | 0) ? (i3 ? 4 : 3) : i3 ? 2 : 1;
        i6 = 0;
        i7 = 1;
        i3 = i3 & 1;
        i5 = 0;
        break L9;
       }
      default:
       {
        i8 = 0;
        i9 = 0;
        i6 = 0;
        i7 = 0;
        break L9;
       }
      }
     case 1:
      switch (HEAP32[i7 >> 2] | 0) {
      case 1:
       {
        i9 = i6;
        i2 = 0;
        i6 = 0;
        i7 = 0;
        i3 = 0;
        i5 = 0;
        break L9;
       }
      case 2:
       {
        i3 = (i14 | 0) == (i16 | 0);
        i8 = 0;
        i9 = i6;
        i2 = (i10 | 0) == (i11 | 0) ? (i3 ? 3 : 4) : i3 ? 1 : 2;
        i6 = 1;
        i7 = 0;
        i3 = i3 & 1 ^ 1;
        i5 = 0;
        break L9;
       }
      case 0:
       {
        i3 = (i14 | 0) == (i16 | 0);
        i9 = i6;
        i2 = (i12 | 0) == (i13 | 0) ? (i3 ? 4 : 3) : i3 ? 2 : 1;
        i6 = 0;
        i7 = 1;
        i3 = i3 & 1 ^ 1;
        i5 = 1;
        break L9;
       }
      default:
       {
        i8 = 0;
        i9 = 0;
        i6 = 0;
        i7 = 0;
        break L9;
       }
      }
     case 0:
      switch (HEAP32[i7 >> 2] | 0) {
      case 0:
       {
        i8 = i6;
        i2 = 0;
        i6 = 0;
        i7 = 0;
        i3 = 0;
        i5 = 0;
        break L9;
       }
      case 2:
       {
        i3 = (i12 | 0) == (i13 | 0);
        i2 = (i10 | 0) == (i11 | 0);
        i8 = i6;
        i2 = i3 ? (i2 ? 4 : 2) : i2 ? 3 : 1;
        i6 = 0;
        i7 = 1;
        i3 = i3 & 1 ^ 1;
        i5 = 0;
        break L9;
       }
      case 1:
       {
        i3 = (i12 | 0) == (i13 | 0);
        i8 = i6;
        i2 = (i14 | 0) == (i16 | 0) ? (i3 ? 3 : 4) : i3 ? 1 : 2;
        i6 = 1;
        i7 = 0;
        i3 = i3 & 1 ^ 1;
        i5 = 1;
        break L9;
       }
      default:
       {
        i8 = 0;
        i9 = 0;
        i6 = 0;
        i7 = 0;
        break L9;
       }
      }
     default:
      {
       i8 = 0;
       i9 = 0;
       i6 = 0;
       i7 = 0;
      }
     } while (0);
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) >> 2] = i8;
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 4 >> 2] = i9;
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 8 >> 2] = i2;
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 12 >> 2] = i6;
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 16 >> 2] = i7;
     HEAP32[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 20 >> 2] = 0;
     HEAP8[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 24 >> 0] = i3;
     HEAP8[i19 + (i4 * 188 | 0) + 76 + (i17 * 28 | 0) + 25 >> 0] = i5;
    }
    i17 = i17 + 1 | 0;
   } while ((i17 | 0) != 4);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i24 >> 2] | 0));
 }
 i5 = HEAP32[1577] | 0;
 HEAP32[1576] = 0;
 i2 = HEAP32[i30 >> 2] | 0;
 i3 = i30 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != (i2 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
 i2 = i34;
 i3 = i2 + 80 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 __ZNK5Shape17startNeiTransformER8MatStack(i30, i34);
 d15 = +(i5 | 0);
 HEAP32[i27 >> 2] = i30;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i33 + 4 >> 2] = -1;
 i2 = i33 + 8 | 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i33 + 12 >> 2] = i2;
 HEAP32[i33 + 16 >> 2] = 0;
 i2 = HEAP32[i24 >> 2] | 0;
 HEAP32[i32 >> 2] = 0;
 i16 = i32 + 4 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i32 + 8 >> 2] = 0;
 do if (i2) if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i32); else {
  i23 = i2 << 2;
  i25 = __Znwj(i23) | 0;
  HEAP32[i32 >> 2] = i25;
  i24 = i25 + (i2 << 2) | 0;
  HEAP32[i32 + 8 >> 2] = i24;
  _memset(i25 | 0, 0, i23 | 0) | 0;
  HEAP32[i16 >> 2] = i24;
  break;
 } else i25 = 0; while (0);
 HEAP32[i31 >> 2] = i31;
 i13 = i31 + 4 | 0;
 HEAP32[i13 >> 2] = i31;
 i14 = i31 + 8 | 0;
 HEAP32[i14 >> 2] = 0;
 i3 = __Znwj(12) | 0;
 HEAP32[i3 + 8 >> 2] = i33;
 HEAP32[i3 + 4 >> 2] = i31;
 HEAP32[i3 >> 2] = i31;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i31 >> 2] = i3;
 HEAP32[i14 >> 2] = 1;
 i8 = i25 + (HEAP32[i33 >> 2] << 2) | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 i8 = i30 + 44 | 0;
 i9 = i26 + 4 | 0;
 i10 = i26 + 8 | 0;
 i11 = i26 + 12 | 0;
 i12 = i26 + 16 | 0;
 i2 = 1;
 while (1) {
  i4 = HEAP32[i3 + 8 >> 2] | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  i6 = i3 + 4 | 0;
  i25 = HEAP32[i3 >> 2] | 0;
  HEAP32[i25 + 4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[HEAP32[i6 >> 2] >> 2] = i25;
  HEAP32[i14 >> 2] = i2 + -1;
  __ZdlPv(i3);
  i2 = HEAP32[i8 >> 2] | 0;
  i3 = i4 + 8 | 0;
  i4 = i4 + 16 | 0;
  i6 = 0;
  do {
   i5 = HEAP32[i2 + (i7 * 188 | 0) + 60 + (i6 << 2) >> 2] | 0;
   if ((i5 | 0) != -1 ? (i28 = (HEAP32[i32 >> 2] | 0) + (i5 << 2) | 0, i29 = HEAP32[i28 >> 2] | 0, (i29 | 0) <= 0) : 0) {
    HEAP32[i28 >> 2] = i29 + 1;
    HEAP32[i26 >> 2] = i5;
    HEAP32[i9 >> 2] = i6;
    HEAP32[i10 >> 2] = i10;
    HEAP32[i11 >> 2] = i10;
    HEAP32[i12 >> 2] = 0;
    i25 = __Znwj(28) | 0;
    i22 = i26;
    i24 = HEAP32[i22 + 4 >> 2] | 0;
    i23 = i25 + 8 | 0;
    HEAP32[i23 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i23 + 4 >> 2] = i24;
    i23 = i25 + 16 | 0;
    HEAP32[i23 >> 2] = i23;
    HEAP32[i25 + 20 >> 2] = i23;
    HEAP32[i25 + 24 >> 2] = 0;
    i23 = HEAP32[i3 >> 2] | 0;
    i24 = HEAP32[i4 >> 2] | 0;
    HEAP32[i25 + 4 >> 2] = i3;
    HEAP32[i25 >> 2] = i23;
    HEAP32[i23 + 4 >> 2] = i25;
    HEAP32[i3 >> 2] = i25;
    HEAP32[i4 >> 2] = i24 + 1;
    __ZN5BNodeD2Ev(i26);
    i24 = HEAP32[i3 >> 2] | 0;
    i25 = __Znwj(12) | 0;
    HEAP32[i25 + 8 >> 2] = i24 + 8;
    HEAP32[i25 + 4 >> 2] = i31;
    i24 = HEAP32[i31 >> 2] | 0;
    HEAP32[i25 >> 2] = i24;
    HEAP32[i24 + 4 >> 2] = i25;
    HEAP32[i31 >> 2] = i25;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < 4);
  i2 = HEAP32[i14 >> 2] | 0;
  if (!i2) break;
  i3 = HEAP32[i13 >> 2] | 0;
 }
 __ZNK5Shape10runBFSTreeIKZNS_17makeNeiTransformsEvE3__0EEvR8MatStackRK5BNodefRT_(i30, i34, i33, d15, i27);
 if ((HEAP32[i14 >> 2] | 0) != 0 ? (i1 = HEAP32[i13 >> 2] | 0, i30 = (HEAP32[i31 >> 2] | 0) + 4 | 0, i29 = HEAP32[i1 >> 2] | 0, HEAP32[i29 + 4 >> 2] = HEAP32[i30 >> 2], HEAP32[HEAP32[i30 >> 2] >> 2] = i29, HEAP32[i14 >> 2] = 0, (i1 | 0) != (i31 | 0)) : 0) do {
  i30 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i30);
 } while ((i1 | 0) != (i31 | 0));
 i1 = HEAP32[i32 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i16 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i16 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 __ZN5BNodeD2Ev(i33);
 i3 = HEAP32[i34 + 68 >> 2] | 0;
 if (!i3) {
  STACKTOP = i35;
  return;
 }
 i1 = i34 + 72 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -68 - i3 | 0) >>> 0) / 68 | 0) * 68 | 0);
 __ZdlPv(i3);
 STACKTOP = i35;
 return;
}

function __ZN5Shape14makeReverseNeiEv(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i29 + 16 | 0;
 i28 = i29;
 __ZN5Shape18make_sides_faceneiEv(i8);
 i26 = i8 + 24 | 0;
 i1 = HEAP32[i26 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 i27 = i2 + 4 | 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 if (i1) {
  if (i1 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i2);
  i5 = __Znwj(i1 << 2) | 0;
  HEAP32[i2 >> 2] = i5;
  i4 = i5 + (i1 << 2) | 0;
  HEAP32[i2 + 8 >> 2] = i4;
  _memset(i5 | 0, 0, i1 << 2 | 0) | 0;
  HEAP32[i27 >> 2] = i4;
  i1 = HEAP32[i26 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i2 = HEAP32[i8 + 44 >> 2] | 0;
   i3 = 0;
   do {
    i1 = i2 + (i3 * 188 | 0) + 28 | 0;
    HEAP32[i1 >> 2] = -1;
    HEAP32[i1 + 4 >> 2] = -1;
    HEAP32[i1 + 8 >> 2] = -1;
    HEAP32[i1 + 12 >> 2] = -1;
    i3 = i3 + 1 | 0;
    i1 = HEAP32[i26 >> 2] | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
 } else {
  i4 = 0;
  i1 = 0;
  i5 = 0;
 }
 i7 = i8 + 32 | 0;
 if ((HEAP32[i7 >> 2] | 0) > 0) {
  i2 = HEAP32[i8 + 52 >> 2] | 0;
  i3 = i8 + 44 | 0;
  i6 = 0;
  do {
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 16 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 20 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 24 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 28 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 32 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i1 = HEAP32[i2 + (i6 * 40 | 0) + 36 >> 2] | 0;
   if ((i1 | 0) != -1) {
    i24 = i5 + (i1 << 2) | 0;
    i25 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i25 + 1;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 * 188 | 0) + 28 + (i25 << 2) >> 2] = i6;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i7 >> 2] | 0));
  i1 = HEAP32[i26 >> 2] | 0;
 }
 if ((i1 | 0) > 0) {
  i21 = i8 + 44 | 0;
  i22 = i8 + 48 | 0;
  i23 = i28 + 12 | 0;
  i24 = i28 + 8 | 0;
  i25 = i28 + 4 | 0;
  i15 = i8 + 52 | 0;
  i20 = 0;
  do {
   HEAP32[i28 >> 2] = -1;
   HEAP32[i28 + 4 >> 2] = -1;
   HEAP32[i28 + 8 >> 2] = -1;
   HEAP32[i28 + 12 >> 2] = -1;
   i16 = HEAP32[i21 >> 2] | 0;
   i17 = i16 + (i20 * 188 | 0) + 4 | 0;
   i18 = i16 + (i20 * 188 | 0) + 8 | 0;
   i19 = i16 + (i20 * 188 | 0) + 12 | 0;
   i11 = i16 + (i20 * 188 | 0) | 0;
   i8 = -1;
   i9 = -1;
   i6 = -1;
   i1 = -1;
   i12 = 0;
   while (1) {
    i10 = HEAP32[i16 + (i20 * 188 | 0) + 44 + (i12 << 2) >> 2] | 0;
    do if ((i10 | 0) != -1) {
     i2 = HEAP32[i22 >> 2] | 0;
     if ((HEAP32[i2 + (i10 * 24 | 0) + 4 >> 2] | 0) == (HEAP32[i17 >> 2] | 0) ? (HEAP32[i2 + (i10 * 24 | 0) + 8 >> 2] | 0) == (HEAP32[i18 >> 2] | 0) : 0) i7 = (HEAP32[i2 + (i10 * 24 | 0) + 12 >> 2] | 0) == (HEAP32[i19 >> 2] | 0); else i7 = 0;
     i14 = HEAP32[i2 + (i10 * 24 | 0) >> 2] | 0;
     i2 = HEAP32[i11 >> 2] | 0;
     i3 = (i14 | 0) == 1;
     if (!(i3 & (i2 | 0) == 2) ? !((i14 | 0) == 3 & (i2 | 0) == 0) : 0) i2 = i3 & (i2 | 0) == 1; else i2 = 1;
     if (i7 & i2) {
      HEAP32[i28 >> 2] = i10;
      i2 = i8;
      i3 = i9;
      i1 = i10;
      break;
     }
     if (i7) {
      HEAP32[i23 >> 2] = i10;
      i2 = i10;
      i3 = i9;
      break;
     }
     if (i2) {
      HEAP32[i24 >> 2] = i10;
      i2 = i8;
      i3 = i10;
      break;
     } else {
      HEAP32[i25 >> 2] = i10;
      i2 = i8;
      i3 = i9;
      i6 = i10;
      break;
     }
    } else {
     i2 = i8;
     i3 = i9;
    } while (0);
    i12 = i12 + 1 | 0;
    if ((i12 | 0) == 4) {
     i7 = i2;
     i14 = i3;
     break;
    } else {
     i8 = i2;
     i9 = i3;
    }
   }
   HEAP32[i16 + (i20 * 188 | 0) + 44 >> 2] = i1;
   HEAP32[i28 >> 2] = -1;
   HEAP32[i16 + (i20 * 188 | 0) + 48 >> 2] = i6;
   HEAP32[i25 >> 2] = -1;
   HEAP32[i16 + (i20 * 188 | 0) + 52 >> 2] = i14;
   HEAP32[i24 >> 2] = -1;
   HEAP32[i16 + (i20 * 188 | 0) + 56 >> 2] = i7;
   HEAP32[i23 >> 2] = -1;
   i2 = i16 + (i20 * 188 | 0) + 60 | 0;
   i13 = HEAP32[i22 >> 2] | 0;
   i3 = HEAP32[i13 + (i1 * 24 | 0) + 16 >> 2] | 0;
   i1 = HEAP32[i13 + (i1 * 24 | 0) + 20 >> 2] | 0;
   do if ((i3 | 0) != (i20 | 0)) if ((i1 | 0) == (i20 | 0)) {
    HEAP32[i2 >> 2] = i3;
    break;
   } else {
    HEAP32[i2 >> 2] = -1;
    break;
   } else HEAP32[i2 >> 2] = i1; while (0);
   i1 = HEAP32[i13 + (i6 * 24 | 0) + 16 >> 2] | 0;
   i2 = HEAP32[i13 + (i6 * 24 | 0) + 20 >> 2] | 0;
   do if ((i1 | 0) != (i20 | 0)) {
    i3 = i16 + (i20 * 188 | 0) + 64 | 0;
    if ((i2 | 0) == (i20 | 0)) {
     HEAP32[i3 >> 2] = i1;
     break;
    } else {
     HEAP32[i3 >> 2] = -1;
     break;
    }
   } else HEAP32[i16 + (i20 * 188 | 0) + 64 >> 2] = i2; while (0);
   i3 = HEAP32[i13 + (i14 * 24 | 0) + 16 >> 2] | 0;
   i1 = HEAP32[i13 + (i14 * 24 | 0) + 20 >> 2] | 0;
   do if ((i3 | 0) != (i20 | 0)) {
    i2 = i16 + (i20 * 188 | 0) + 68 | 0;
    if ((i1 | 0) == (i20 | 0)) {
     HEAP32[i2 >> 2] = i3;
     break;
    } else {
     HEAP32[i2 >> 2] = -1;
     break;
    }
   } else HEAP32[i16 + (i20 * 188 | 0) + 68 >> 2] = i1; while (0);
   i3 = HEAP32[i13 + (i7 * 24 | 0) + 16 >> 2] | 0;
   i1 = HEAP32[i13 + (i7 * 24 | 0) + 20 >> 2] | 0;
   do if ((i3 | 0) != (i20 | 0)) {
    i2 = i16 + (i20 * 188 | 0) + 72 | 0;
    if ((i1 | 0) == (i20 | 0)) {
     HEAP32[i2 >> 2] = i3;
     break;
    } else {
     HEAP32[i2 >> 2] = -1;
     break;
    }
   } else HEAP32[i16 + (i20 * 188 | 0) + 72 >> 2] = i1; while (0);
   i11 = i13 + (i6 * 24 | 0) + 4 | 0;
   i12 = i13 + (i6 * 24 | 0) + 8 | 0;
   i8 = i13 + (i6 * 24 | 0) + 12 | 0;
   i9 = i13 + (i14 * 24 | 0) + 4 | 0;
   i10 = i13 + (i14 * 24 | 0) + 8 | 0;
   i1 = i13 + (i14 * 24 | 0) + 12 | 0;
   i7 = 0;
   do {
    i2 = HEAP32[i16 + (i20 * 188 | 0) + 28 + (i7 << 2) >> 2] | 0;
    do if ((i2 | 0) != -1) {
     i3 = HEAP32[i15 >> 2] | 0;
     i6 = HEAP32[i3 + (i2 * 40 | 0) >> 2] | 0;
     if (((i6 | 0) == (HEAP32[i17 >> 2] | 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 4 >> 2] | 0) == (HEAP32[i18 >> 2] | 0) : 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 8 >> 2] | 0) == (HEAP32[i19 >> 2] | 0) : 0) {
      HEAP32[i28 >> 2] = i2;
      break;
     }
     if (((i6 | 0) == (HEAP32[i11 >> 2] | 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 4 >> 2] | 0) == (HEAP32[i12 >> 2] | 0) : 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 8 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) {
      HEAP32[i25 >> 2] = i2;
      break;
     }
     if (((i6 | 0) == (HEAP32[i9 >> 2] | 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 4 >> 2] | 0) == (HEAP32[i10 >> 2] | 0) : 0) ? (HEAP32[i3 + (i2 * 40 | 0) + 8 >> 2] | 0) == (HEAP32[i1 >> 2] | 0) : 0) {
      HEAP32[i23 >> 2] = i2;
      break;
     }
     HEAP32[i24 >> 2] = i2;
    } while (0);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != 4);
   i19 = i16 + (i20 * 188 | 0) + 28 | 0;
   HEAP32[i19 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
   HEAP32[i19 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
   i20 = i20 + 1 | 0;
  } while ((i20 | 0) < (HEAP32[i26 >> 2] | 0));
 }
 if (!i5) {
  STACKTOP = i29;
  return;
 }
 if ((i4 | 0) != (i5 | 0)) HEAP32[i27 >> 2] = i4 + (~((i4 + -4 - i5 | 0) >>> 2) << 2);
 __ZdlPv(i5);
 STACKTOP = i29;
 return;
}

function __ZN10BuildWorld8loadFromEP6MyFile(i33, i27) {
 i33 = i33 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i32 = i35 + 144 | 0;
 i31 = i35 + 136 | 0;
 i30 = i35 + 128 | 0;
 i29 = i35 + 120 | 0;
 i23 = i35 + 96 | 0;
 i22 = i35 + 88 | 0;
 i21 = i35 + 64 | 0;
 i20 = i35 + 56 | 0;
 i19 = i35 + 32 | 0;
 i24 = i35 + 24 | 0;
 i2 = i35 + 8 | 0;
 i1 = i35;
 i28 = i35 + 152 | 0;
 i26 = i35 + 148 | 0;
 i25 = i27 + 12 | 0;
 if ((HEAP32[i25 >> 2] | 0) != 1) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 __ZN10BuildWorld5cleanENS_12ECleanMethodE(i33, 0);
 if (!(__ZN6MyFile10seekHeaderEPKc(i27, 21596) | 0)) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 if ((HEAP32[i25 >> 2] | 0) != 1) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 HEAP32[i1 >> 2] = 58;
 HEAP32[i1 + 4 >> 2] = 21621;
 _sprintf(i28, 21616, i1) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) == -1) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) == -1) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 HEAP32[i2 >> 2] = i33;
 HEAP32[i2 + 4 >> 2] = i33 + 4;
 HEAP32[i2 + 8 >> 2] = i33 + 8;
 __ZN6MyFile8readNumsEiz(i27, 3, i2) | 0;
 i18 = HEAP32[i33 >> 2] | 0;
 i1 = i33 + 44 | 0;
 HEAP32[i1 >> 2] = i18;
 i2 = i33 + 40 | 0;
 HEAP32[i2 >> 2] = 0;
 i3 = i33 + 52 | 0;
 HEAP32[i3 >> 2] = i18;
 i4 = i33 + 48 | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = i33 + 60 | 0;
 HEAP32[i5 >> 2] = i18;
 i6 = i33 + 56 | 0;
 HEAP32[i6 >> 2] = 0;
 i7 = i33 + 68 | 0;
 HEAP32[i7 >> 2] = i18;
 i8 = i33 + 64 | 0;
 HEAP32[i8 >> 2] = 0;
 i9 = i33 + 76 | 0;
 HEAP32[i9 >> 2] = i18;
 i10 = i33 + 72 | 0;
 HEAP32[i10 >> 2] = 0;
 i11 = i33 + 84 | 0;
 HEAP32[i11 >> 2] = i18;
 i12 = i33 + 80 | 0;
 HEAP32[i12 >> 2] = 0;
 i13 = i33 + 92 | 0;
 HEAP32[i13 >> 2] = i18;
 i14 = i33 + 88 | 0;
 HEAP32[i14 >> 2] = 0;
 i15 = i33 + 100 | 0;
 HEAP32[i15 >> 2] = i18;
 i16 = i33 + 96 | 0;
 HEAP32[i16 >> 2] = 0;
 i17 = i33 + 108 | 0;
 HEAP32[i17 >> 2] = i18;
 i18 = i33 + 104 | 0;
 HEAP32[i18 >> 2] = 0;
 do if ((HEAP32[i25 >> 2] | 0) == 1) {
  HEAP32[i24 >> 2] = 58;
  HEAP32[i24 + 4 >> 2] = 21633;
  _sprintf(i28, 21616, i24) | 0;
  if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) != -1) if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) != -1) {
   HEAP32[i19 >> 2] = i2;
   HEAP32[i19 + 4 >> 2] = i1;
   HEAP32[i19 + 8 >> 2] = i4;
   HEAP32[i19 + 12 >> 2] = i3;
   HEAP32[i19 + 16 >> 2] = i6;
   HEAP32[i19 + 20 >> 2] = i5;
   __ZN6MyFile8readNumsEiz(i27, 6, i19) | 0;
  }
  if ((HEAP32[i25 >> 2] | 0) == 1) {
   HEAP32[i20 >> 2] = 58;
   HEAP32[i20 + 4 >> 2] = 21641;
   _sprintf(i28, 21616, i20) | 0;
   if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) != -1) if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) != -1) {
    HEAP32[i21 >> 2] = i8;
    HEAP32[i21 + 4 >> 2] = i7;
    HEAP32[i21 + 8 >> 2] = i10;
    HEAP32[i21 + 12 >> 2] = i9;
    HEAP32[i21 + 16 >> 2] = i12;
    HEAP32[i21 + 20 >> 2] = i11;
    __ZN6MyFile8readNumsEiz(i27, 6, i21) | 0;
   }
   if ((HEAP32[i25 >> 2] | 0) == 1) {
    HEAP32[i22 >> 2] = 58;
    HEAP32[i22 + 4 >> 2] = 21649;
    _sprintf(i28, 21616, i22) | 0;
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) == -1) break;
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) != -1) {
     HEAP32[i23 >> 2] = i14;
     HEAP32[i23 + 4 >> 2] = i13;
     HEAP32[i23 + 8 >> 2] = i16;
     HEAP32[i23 + 12 >> 2] = i15;
     HEAP32[i23 + 16 >> 2] = i18;
     HEAP32[i23 + 20 >> 2] = i17;
     __ZN6MyFile8readNumsEiz(i27, 6, i23) | 0;
    }
   }
  }
 } while (0);
 __ZN6MyFile9seekValueEPKcib(i27, 21621, 0, 1) | 0;
 i13 = i33 + 32 | 0;
 i14 = 0;
 i1 = 0;
 L36 : while (1) {
  switch (i14 | 0) {
  case 0:
   {
    if ((HEAP32[i25 >> 2] | 0) != 1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    HEAP32[i29 >> 2] = 58;
    HEAP32[i29 + 4 >> 2] = 21657;
    _sprintf(i28, 21616, i29) | 0;
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) == -1) {
     i34 = 26;
     break L36;
    }
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) == -1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    break;
   }
  case 1:
   {
    if ((HEAP32[i25 >> 2] | 0) != 1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    HEAP32[i30 >> 2] = 58;
    HEAP32[i30 + 4 >> 2] = 21671;
    _sprintf(i28, 21616, i30) | 0;
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) == -1) {
     i34 = 30;
     break L36;
    }
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) == -1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    break;
   }
  case 2:
   {
    if ((HEAP32[i25 >> 2] | 0) != 1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    HEAP32[i31 >> 2] = 58;
    HEAP32[i31 + 4 >> 2] = 21685;
    _sprintf(i28, 21616, i31) | 0;
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, i28, 21626) | 0) == -1) {
     i34 = 34;
     break L36;
    }
    if ((__ZN6MyFile10seekStringEPKcS1_(i27, 21628, 21630) | 0) == -1) {
     i1 = 0;
     i34 = 58;
     break L36;
    }
    break;
   }
  default:
   {}
  }
  i3 = HEAP32[i33 + 40 + (i14 * 24 | 0) >> 2] | 0;
  i8 = i33 + 40 + (i14 * 24 | 0) + 4 | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  if ((i3 | 0) < (i2 | 0)) {
   i9 = i33 + 40 + (i14 * 24 | 0) + 8 | 0;
   i10 = i33 + 40 + (i14 * 24 | 0) + 12 | 0;
   i11 = i33 + 40 + (i14 * 24 | 0) + 16 | 0;
   i12 = i33 + 40 + (i14 * 24 | 0) + 20 | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   do {
    i5 = HEAP32[i9 >> 2] | 0;
    if ((i5 | 0) < (i4 | 0)) {
     i7 = i3 >>> 0 < 50;
     i2 = i4;
     i4 = HEAP32[i12 >> 2] | 0;
     do {
      i6 = HEAP32[i11 >> 2] | 0;
      if ((i6 | 0) < (i4 | 0)) {
       i4 = i5 >>> 0 < 50;
       do {
        HEAP32[i32 >> 2] = i26;
        if ((__ZN6MyFile8readNumsEiz(i27, 1, i32) | 0) < 1) {
         i1 = 0;
         i34 = 58;
         break L36;
        }
        switch (HEAP32[i26 >> 2] | 0) {
        case 0:
         break;
        case 1:
         {
          if (i7 & (i4 & i6 >>> 0 < 50)) {
           HEAP32[i33 + 136 + (i14 * 5e5 | 0) + (i3 * 1e4 | 0) + (i5 * 200 | 0) + (i6 << 2) >> 2] = 513;
           i34 = 49;
          } else i34 = 49;
          break;
         }
        case 2:
         {
          if (i7 & (i4 & i6 >>> 0 < 50)) HEAP32[i33 + 136 + (i14 * 5e5 | 0) + (i3 * 1e4 | 0) + (i5 * 200 | 0) + (i6 << 2) >> 2] = 514;
          i1 = i1 + 1 | 0;
          i34 = 49;
          break;
         }
        default:
         i34 = 49;
        }
        if ((i34 | 0) == 49) {
         i34 = 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
        }
        i6 = i6 + 1 | 0;
        i2 = HEAP32[i12 >> 2] | 0;
       } while ((i6 | 0) < (i2 | 0));
       i4 = i2;
       i2 = HEAP32[i10 >> 2] | 0;
      }
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i2 | 0));
     i4 = i2;
     i2 = HEAP32[i8 >> 2] | 0;
    }
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i2 | 0));
  }
  i14 = i14 + 1 | 0;
  if ((i14 | 0) >= 3) {
   i34 = 56;
   break;
  }
 }
 if ((i34 | 0) == 26) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 } else if ((i34 | 0) == 30) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 } else if ((i34 | 0) == 34) {
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 } else if ((i34 | 0) == 56) {
  if ((i1 | 0) != 1) {
   i34 = 0;
   STACKTOP = i35;
   return i34 | 0;
  }
  __ZN10BuildWorld14bootstrapSpaceEv(i33);
  HEAP8[i33 + 1500137 >> 0] = 0;
  HEAP8[i33 + 1500296 >> 0] = 0;
  i34 = 1;
  STACKTOP = i35;
  return i34 | 0;
 } else if ((i34 | 0) == 58) {
  STACKTOP = i35;
  return i1 | 0;
 }
 return 0;
}

function ___intscan(i13, i3, i6, i1, i2) {
 i13 = i13 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i3 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
  } while ((_isspace(i4) | 0) != 0);
  L11 : do switch (i4 | 0) {
  case 43:
  case 45:
   {
    i5 = ((i4 | 0) == 45) << 31 >> 31;
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
     i12 = i5;
     break L11;
    } else {
     i4 = ___shgetc(i13) | 0;
     i12 = i5;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i3 | 0) == 0;
  do if ((i3 & -17 | 0) == 0 & (i4 | 0) == 48) {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((i4 | 32 | 0) != 120) if (i5) {
    i3 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i4 = HEAPU8[i3 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((HEAPU8[31919 + (i4 + 1) >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i3 = 16;
    i10 = 46;
   }
  } else {
   i3 = i5 ? 10 : i3;
   if ((HEAPU8[31919 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  if ((i10 | 0) == 32) if ((i3 | 0) == 10) {
   i3 = i4 + -48 | 0;
   if (i3 >>> 0 < 10) {
    i4 = 0;
    while (1) {
     i5 = (i4 * 10 | 0) + i3 | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i4 = HEAPU8[i3 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i3 = i4 + -48 | 0;
     if (!(i3 >>> 0 < 10 & i5 >>> 0 < 429496729)) {
      i3 = i5;
      break;
     } else i4 = i5;
    }
    i5 = 0;
   } else {
    i3 = 0;
    i5 = 0;
   }
   i6 = i4 + -48 | 0;
   if (i6 >>> 0 < 10) {
    while (1) {
     i7 = ___muldi3(i3 | 0, i5 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i6 | 0) < 0) << 31 >> 31;
     i11 = ~i9;
     if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i7 >>> 0 > ~i6 >>> 0) {
      i7 = i3;
      break;
     }
     i3 = _i64Add(i7 | 0, i8 | 0, i6 | 0, i9 | 0) | 0;
     i5 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i6 = i4 + -48 | 0;
     if (!(i6 >>> 0 < 10 & (i5 >>> 0 < 429496729 | (i5 | 0) == 429496729 & i3 >>> 0 < 2576980378))) {
      i7 = i3;
      break;
     }
    }
    if (i6 >>> 0 > 9) {
     i4 = i7;
     i3 = i12;
    } else {
     i3 = 10;
     i10 = 72;
    }
   } else {
    i4 = i3;
    i3 = i12;
   }
  } else i10 = 46;
  L63 : do if ((i10 | 0) == 46) {
   if (!(i3 + -1 & i3)) {
    i10 = HEAP8[32176 + ((i3 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
    i6 = i5 & 255;
    if (i6 >>> 0 < i3 >>> 0) {
     i4 = 0;
     while (1) {
      i7 = i6 | i4 << i10;
      i4 = HEAP32[i15 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i4 + 1;
       i4 = HEAPU8[i4 >> 0] | 0;
      } else i4 = ___shgetc(i13) | 0;
      i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
      i6 = i5 & 255;
      if (!(i7 >>> 0 < 134217728 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
     }
     i6 = 0;
    } else {
     i6 = 0;
     i7 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = tempRet0;
    if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
     i5 = i6;
     i10 = 72;
     break;
    } else i4 = i6;
    while (1) {
     i7 = _bitshift64Shl(i7 | 0, i4 | 0, i10 | 0) | 0;
     i6 = tempRet0;
     i7 = i5 & 255 | i7;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
      i5 = i6;
      i10 = 72;
      break L63;
     } else i4 = i6;
    }
   }
   i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
   i6 = i5 & 255;
   if (i6 >>> 0 < i3 >>> 0) {
    i4 = 0;
    while (1) {
     i7 = i6 + (Math_imul(i4, i3) | 0) | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
     i6 = i5 & 255;
     if (!(i7 >>> 0 < 119304647 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
    }
    i6 = 0;
   } else {
    i7 = 0;
    i6 = 0;
   }
   if ((i5 & 255) >>> 0 < i3 >>> 0) {
    i10 = ___udivdi3(-1, -1, i3 | 0, 0) | 0;
    i11 = tempRet0;
    i9 = i6;
    while (1) {
     if (i9 >>> 0 > i11 >>> 0 | (i9 | 0) == (i11 | 0) & i7 >>> 0 > i10 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i6 = ___muldi3(i7 | 0, i9 | 0, i3 | 0, 0) | 0;
     i8 = tempRet0;
     i5 = i5 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i6 >>> 0 > ~i5 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i7 = _i64Add(i5 | 0, 0, i6 | 0, i8 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[31919 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0) {
      i5 = i6;
      i10 = 72;
      break;
     } else i9 = i6;
    }
   } else {
    i5 = i6;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if ((HEAPU8[31919 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) {
   do {
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i13) | 0;
   } while ((HEAPU8[31919 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = i2;
   i4 = i1;
   i3 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
  } else {
   i4 = i7;
   i3 = i12;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i5 >>> 0 < i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i3 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i5 >>> 0 > i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i4 ^ i3 | 0, i5 ^ i1 | 0, i3 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i15, i2, i16, i18, i21, i19, i20, i17, i22) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i21 = i21 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i17 = i17 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i5 = i23 + 92 | 0;
 i6 = i23 + 80 | 0;
 i13 = i23 + 68 | 0;
 i14 = i23 + 56 | 0;
 i7 = i23 + 52 | 0;
 i8 = i23 + 40 | 0;
 i9 = i23 + 36 | 0;
 i10 = i23 + 24 | 0;
 i11 = i23 + 12 | 0;
 i12 = i23;
 if (i1) {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15752) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 63](i3, i2);
   i15 = HEAP32[i3 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i4, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 63](i5, i2);
   i15 = HEAP32[i5 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i6, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i14, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 } else {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15688) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 63](i7, i2);
   i15 = HEAP32[i7 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i8, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 63](i9, i2);
   i15 = HEAP32[i9 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i10, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function __ZN7PicsSet3addEib(i19, i17, i2) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 928 | 0;
 i10 = i20 + 16 | 0;
 i16 = i20 + 24 | 0;
 i14 = i20 + 8 | 0;
 i18 = i20;
 i1 = HEAP32[1556] | 0;
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i13 = i8 + (i17 * 1328 | 0) | 0;
 if (i2) i12 = (HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i13 >> 2] << 6) + 32 >> 2] & 16 | 0) != 0; else i12 = 0;
 i15 = i19 + 4 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 i9 = HEAP32[i19 >> 2] | 0;
 L4 : do if ((i1 | 0) != (i9 | 0)) {
  i7 = i8 + (i17 * 1328 | 0) + 108 | 0;
  i5 = (i1 - i9 | 0) / 900 | 0;
  i1 = 0;
  while (1) {
   if (!(i12 ? (HEAP8[i9 + (i1 * 900 | 0) + 884 >> 0] | 0) == 0 : 0)) {
    i6 = HEAP32[i9 + (i1 * 900 | 0) >> 2] | 0;
    L12 : do if ((i6 | 0) > 0) {
     i3 = 0;
     do {
      i4 = 0;
      while (1) {
       i2 = i4 * 5 | 0;
       if ((HEAP32[i8 + (i17 * 1328 | 0) + 8 + (i2 << 2) >> 2] | 0) != (HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + (i2 << 2) >> 2] | 0)) break;
       i21 = i2 + 1 | 0;
       if ((HEAP32[i8 + (i17 * 1328 | 0) + 8 + (i21 << 2) >> 2] | 0) != (HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + (i21 << 2) >> 2] | 0)) break;
       i21 = i2 + 2 | 0;
       if ((HEAP32[i8 + (i17 * 1328 | 0) + 8 + (i21 << 2) >> 2] | 0) != (HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + (i21 << 2) >> 2] | 0)) break;
       i21 = i2 + 3 | 0;
       if ((HEAP32[i8 + (i17 * 1328 | 0) + 8 + (i21 << 2) >> 2] | 0) != (HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + (i21 << 2) >> 2] | 0)) break;
       i21 = i2 + 4 | 0;
       if ((HEAP32[i8 + (i17 * 1328 | 0) + 8 + (i21 << 2) >> 2] | 0) != (HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + (i21 << 2) >> 2] | 0)) break;
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= 5) {
        i11 = 11;
        break;
       }
      }
      if ((i11 | 0) == 11) {
       i11 = 0;
       if (!i12) break L12;
       if ((HEAP8[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + 100 >> 0] | 0) == (HEAP8[i7 >> 0] | 0)) break L12;
      }
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) < (i6 | 0));
    } else i3 = 0; while (0);
    if ((i3 | 0) < (i6 | 0)) break;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i5 >>> 0) {
    i11 = 24;
    break L4;
   }
  }
  i2 = i19 + 16 | 0;
  i5 = i19 + 12 | 0;
  i3 = HEAP32[i9 + (i1 * 900 | 0) + 4 + (i3 * 108 | 0) + 104 >> 2] | 0;
  HEAP32[i10 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) >> 3;
  HEAP32[i10 + 4 >> 2] = i3;
  i3 = i9 + (i1 * 900 | 0) + 892 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i9 + (i1 * 900 | 0) + 896 >> 2] | 0) >>> 0) {
   i9 = i10;
   i10 = HEAP32[i9 + 4 >> 2] | 0;
   i21 = i4;
   HEAP32[i21 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i21 + 4 >> 2] = i10;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 8;
  } else __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i9 + (i1 * 900 | 0) + 888 | 0, i10);
  if ((i1 | 0) == -1) {
   i4 = i5;
   i11 = 25;
  }
 } else i11 = 24; while (0);
 if ((i11 | 0) == 24) {
  i4 = i19 + 12 | 0;
  i2 = i19 + 16 | 0;
  i11 = 25;
 }
 if ((i11 | 0) == 25) {
  HEAP32[i16 >> 2] = 0;
  HEAP8[i16 + 104 >> 0] = 0;
  HEAP32[i16 + 108 >> 2] = -1;
  i1 = i16 + 4 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 212 >> 0] = 0;
  HEAP32[i16 + 216 >> 2] = -1;
  i1 = i16 + 112 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 320 >> 0] = 0;
  HEAP32[i16 + 324 >> 2] = -1;
  i1 = i16 + 220 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 428 >> 0] = 0;
  HEAP32[i16 + 432 >> 2] = -1;
  i1 = i16 + 328 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 536 >> 0] = 0;
  HEAP32[i16 + 540 >> 2] = -1;
  i1 = i16 + 436 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 644 >> 0] = 0;
  HEAP32[i16 + 648 >> 2] = -1;
  i1 = i16 + 544 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 752 >> 0] = 0;
  HEAP32[i16 + 756 >> 2] = -1;
  i1 = i16 + 652 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  HEAP8[i16 + 860 >> 0] = 0;
  HEAP32[i16 + 864 >> 2] = -1;
  i1 = i16 + 760 | 0;
  i3 = i1 + 100 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i10 = i16 + 888 | 0;
  HEAP32[i10 >> 2] = 0;
  i11 = i16 + 892 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i16 + 896 >> 2] = 0;
  i8 = i16 + 868 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAP8[i8 + 16 >> 0] = 0;
  __ZN7PicType4loadERK6PicDefb(i16, i13, i12);
  i8 = i16 + 888 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) >> 3;
  HEAP32[i14 + 4 >> 2] = 0;
  i1 = HEAP32[i11 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i16 + 896 >> 2] | 0) >>> 0) {
   i13 = i14;
   i14 = HEAP32[i13 + 4 >> 2] | 0;
   i21 = i1;
   HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i21 + 4 >> 2] = i14;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 8;
  } else __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i8, i14);
  i5 = HEAP32[i15 >> 2] | 0;
  i1 = (i5 - (HEAP32[i19 >> 2] | 0) | 0) / 900 | 0;
  if ((i5 | 0) == (HEAP32[i19 + 8 >> 2] | 0)) __ZNSt3__16vectorI7PicTypeNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i19, i16); else {
   _memcpy(i5 | 0, i16 | 0, 885) | 0;
   i6 = i5 + 888 | 0;
   HEAP32[i6 >> 2] = 0;
   i9 = i5 + 892 | 0;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i5 + 896 >> 2] = 0;
   i3 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
   i7 = i3 >> 3;
   if (i7) {
    if (i7 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i6);
    i4 = __Znwj(i3) | 0;
    HEAP32[i9 >> 2] = i4;
    HEAP32[i6 >> 2] = i4;
    HEAP32[i5 + 896 >> 2] = i4 + (i7 << 3);
    i3 = HEAP32[i8 >> 2] | 0;
    i5 = HEAP32[i11 >> 2] | 0;
    if ((i3 | 0) != (i5 | 0)) do {
     i13 = i3;
     i14 = HEAP32[i13 + 4 >> 2] | 0;
     i21 = i4;
     HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i21 + 4 >> 2] = i14;
     i4 = (HEAP32[i9 >> 2] | 0) + 8 | 0;
     HEAP32[i9 >> 2] = i4;
     i3 = i3 + 8 | 0;
    } while ((i3 | 0) != (i5 | 0));
   }
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 900;
  }
  i3 = i19 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
  i3 = HEAP32[i10 >> 2] | 0;
  i4 = i3;
  if (i3) {
   i5 = HEAP32[i11 >> 2] | 0;
   if ((i5 | 0) != (i3 | 0)) HEAP32[i11 >> 2] = i5 + (~((i5 + -8 - i4 | 0) >>> 3) << 3);
   __ZdlPv(i3);
  }
 }
 HEAP32[i18 >> 2] = i17;
 HEAP32[i18 + 4 >> 2] = i1;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i19 + 20 >> 2] | 0) >>> 0) {
  i19 = HEAP32[i18 + 4 >> 2] | 0;
  i21 = i1;
  HEAP32[i21 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i21 + 4 >> 2] = i19;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 8;
  STACKTOP = i20;
  return;
 } else {
  __ZNSt3__16vectorI8AddedPicNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i19 + 12 | 0, i18);
  STACKTOP = i20;
  return;
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i17, i2, i18, i15, i21, i16, i20, i19, i22) {
 i1 = i1 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i18 = i18 | 0;
 i15 = i15 | 0;
 i21 = i21 | 0;
 i16 = i16 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i7 = i23 + 92 | 0;
 i8 = i23 + 80 | 0;
 i9 = i23 + 68 | 0;
 i10 = i23 + 56 | 0;
 i11 = i23 + 52 | 0;
 i12 = i23 + 40 | 0;
 i13 = i23 + 36 | 0;
 i14 = i23 + 24 | 0;
 i5 = i23 + 12 | 0;
 i6 = i23;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15880) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 63](i3, i1);
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 63](i7, i1);
   i17 = HEAP32[i7 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i8, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i9, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i10, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15816) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 63](i11, i1);
   i17 = HEAP32[i11 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i12, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 63](i13, i1);
   i17 = HEAP32[i13 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i14, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i14 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i14);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i6, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i6);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function __ZNK5Shape22transformFromFaceToNeiER8MatStackiif(i1, i13, i9, i10, d2) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i11 = i14 + 64 | 0;
 i12 = i14;
 i8 = HEAP32[i1 + 44 >> 2] | 0;
 d5 = +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) >> 2] | 0);
 d6 = +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 4 >> 2] | 0);
 i1 = i12;
 i3 = i13;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i11;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = 0;
 do {
  d17 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i23 = i1 + 4 | 0;
  d16 = +HEAPF32[i12 + (i23 << 2) >> 2];
  d20 = d16 * 0.0;
  i3 = i1 + 8 | 0;
  d22 = +HEAPF32[i12 + (i3 << 2) >> 2];
  d15 = d22 * 0.0;
  i4 = i1 + 12 | 0;
  d18 = +HEAPF32[i12 + (i4 << 2) >> 2];
  d19 = d18 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d17 + 0.0 + d20 + d15 + d19;
  d21 = d17 * 0.0 + 0.0;
  HEAPF32[i11 + (i23 << 2) >> 2] = d16 + d21 + d15 + d19;
  HEAPF32[i11 + (i3 << 2) >> 2] = d22 + (d21 + d20) + d19;
  HEAPF32[i11 + (i4 << 2) >> 2] = d18 + (d5 * d17 + 0.0 + d6 * d16 + d15);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) != (i13 | 0)) {
  i1 = i13;
  i3 = i11;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
 }
 switch (HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 8 >> 2] | 0) {
 case 0:
  break;
 case 1:
  {
   i7 = 10;
   break;
  }
 case 2:
  {
   d2 = -d2;
   i7 = 10;
   break;
  }
 case 3:
  {
   d2 = 180.0 - d2;
   i7 = 10;
   break;
  }
 case 4:
  {
   d2 = d2 + 180.0;
   i7 = 10;
   break;
  }
 default:
  {
   d2 = 0.0;
   i7 = 10;
  }
 }
 if ((i7 | 0) == 10) __ZN4Mat46rotateEffff(i13, d2, +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 12 >> 2] | 0), +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 16 >> 2] | 0), +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 20 >> 2] | 0));
 if (HEAP8[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 24 >> 0] | 0) {
  i1 = i12;
  i3 = i13;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
  i1 = i11;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
  i1 = 0;
  do {
   d20 = +HEAPF32[i12 + (i1 << 2) >> 2];
   i4 = i1 + 4 | 0;
   d21 = +HEAPF32[i12 + (i4 << 2) >> 2];
   d17 = d21 * 0.0;
   i7 = i1 + 8 | 0;
   d15 = +HEAPF32[i12 + (i7 << 2) >> 2];
   d22 = d15 * 0.0;
   i23 = i1 + 12 | 0;
   d19 = +HEAPF32[i12 + (i23 << 2) >> 2];
   d18 = d19 * 0.0;
   HEAPF32[i11 + (i1 << 2) >> 2] = d20 + 0.0 + d17 + d22 + d18;
   d16 = d20 * 0.0 + 0.0;
   HEAPF32[i11 + (i4 << 2) >> 2] = d21 + d16 + d22 + d18;
   HEAPF32[i11 + (i7 << 2) >> 2] = d15 + (d16 + d17) + d18;
   HEAPF32[i11 + (i23 << 2) >> 2] = d19 + (d20 * 2.0 + 0.0 + d21 * 2.0 + d22);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 4);
  if ((i11 | 0) != (i13 | 0)) {
   i1 = i13;
   i3 = i11;
   i4 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    i1 = i1 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i1 | 0) < (i4 | 0));
  }
  __ZN4Mat46rotateEffff(i13, 180.0, +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 12 >> 2] | 0), +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 16 >> 2] | 0), +(HEAP32[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 20 >> 2] | 0));
  i1 = i12;
  i3 = i13;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
  i1 = i11;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
  i1 = 0;
  do {
   d20 = +HEAPF32[i12 + (i1 << 2) >> 2];
   i4 = i1 + 4 | 0;
   d21 = +HEAPF32[i12 + (i4 << 2) >> 2];
   d17 = d21 * 0.0;
   i7 = i1 + 8 | 0;
   d15 = +HEAPF32[i12 + (i7 << 2) >> 2];
   d22 = d15 * 0.0;
   i23 = i1 + 12 | 0;
   d19 = +HEAPF32[i12 + (i23 << 2) >> 2];
   d18 = d19 * 0.0;
   HEAPF32[i11 + (i1 << 2) >> 2] = d20 + 0.0 + d17 + d22 + d18;
   d16 = d20 * 0.0 + 0.0;
   HEAPF32[i11 + (i4 << 2) >> 2] = d21 + d16 + d22 + d18;
   HEAPF32[i11 + (i7 << 2) >> 2] = d15 + (d16 + d17) + d18;
   HEAPF32[i11 + (i23 << 2) >> 2] = d19 + (0.0 - d20 * 2.0 - d21 * 2.0 + d22);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 4);
  if ((i11 | 0) != (i13 | 0)) {
   i1 = i13;
   i3 = i11;
   i4 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    i1 = i1 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i1 | 0) < (i4 | 0));
  }
 }
 if (!(HEAP8[i8 + (i9 * 188 | 0) + 76 + (i10 * 28 | 0) + 25 >> 0] | 0)) {
  STACKTOP = i14;
  return;
 }
 i1 = i12;
 i3 = i13;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i11;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = 0;
 do {
  d20 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i9 = i1 + 4 | 0;
  d21 = +HEAPF32[i12 + (i9 << 2) >> 2];
  d17 = d21 * 0.0;
  i10 = i1 + 8 | 0;
  d15 = +HEAPF32[i12 + (i10 << 2) >> 2];
  d22 = d15 * 0.0;
  i23 = i1 + 12 | 0;
  d19 = +HEAPF32[i12 + (i23 << 2) >> 2];
  d18 = d19 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d20 + 0.0 + d17 + d22 + d18;
  d16 = d20 * 0.0 + 0.0;
  HEAPF32[i11 + (i9 << 2) >> 2] = d21 + d16 + d22 + d18;
  HEAPF32[i11 + (i10 << 2) >> 2] = d15 + (d16 + d17) + d18;
  HEAPF32[i11 + (i23 << 2) >> 2] = d19 + (d20 * 2.0 + 0.0 + d21 * 2.0 + d22);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) != (i13 | 0)) {
  i1 = i13;
  i3 = i11;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
 }
 __ZN4Mat46rotateEffff(i13, 180.0, .7071067690849304, .7071067690849304, 0.0);
 i1 = i12;
 i3 = i13;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i11;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = 0;
 do {
  d20 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i9 = i1 + 4 | 0;
  d21 = +HEAPF32[i12 + (i9 << 2) >> 2];
  d17 = d21 * 0.0;
  i10 = i1 + 8 | 0;
  d15 = +HEAPF32[i12 + (i10 << 2) >> 2];
  d22 = d15 * 0.0;
  i23 = i1 + 12 | 0;
  d19 = +HEAPF32[i12 + (i23 << 2) >> 2];
  d18 = d19 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d20 + 0.0 + d17 + d22 + d18;
  d16 = d20 * 0.0 + 0.0;
  HEAPF32[i11 + (i9 << 2) >> 2] = d21 + d16 + d22 + d18;
  HEAPF32[i11 + (i10 << 2) >> 2] = d15 + (d16 + d17) + d18;
  HEAPF32[i11 + (i23 << 2) >> 2] = d19 + (0.0 - d20 * 2.0 - d21 * 2.0 + d22);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) != (i13 | 0)) {
  i1 = i13;
  i3 = i11;
  i4 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
 }
 STACKTOP = i14;
 return;
}

function __ZN16BuildControlBase17drawErrorCylidersEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i24 = i30 + 208 | 0;
 i25 = i30 + 144 | 0;
 i26 = i30 + 128 | 0;
 i27 = i30 + 64 | 0;
 i28 = i30;
 i1 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 116 >> 2] | 0;
 i29 = i1 + 1500176 | 0;
 if ((HEAP32[i29 >> 2] | 0) <= 0) {
  STACKTOP = i30;
  return;
 }
 i15 = i1 + 1500196 | 0;
 i16 = i2 + 4 | 0;
 i17 = i24 + 64 | 0;
 i18 = i2 + 40 | 0;
 i19 = i26 + 4 | 0;
 i20 = i26 + 8 | 0;
 i21 = i26 + 12 | 0;
 i22 = i2 + 1128 | 0;
 i23 = i2 + 1088 | 0;
 i13 = i2 + 816 | 0;
 i14 = 0;
 while (1) {
  i1 = HEAP32[i15 >> 2] | 0;
  d4 = +(HEAP32[i1 + (i14 * 24 | 0) + 4 >> 2] | 0) * .25;
  d5 = +(HEAP32[i1 + (i14 * 24 | 0) + 8 >> 2] | 0) * .25;
  d6 = +(HEAP32[i1 + (i14 * 24 | 0) + 12 >> 2] | 0) * .25;
  i10 = HEAP32[i16 >> 2] | 0;
  i11 = i10 + 108 | 0;
  i7 = i24;
  i8 = i11;
  i9 = i7 + 64 | 0;
  do {
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   i7 = i7 + 4 | 0;
   i8 = i8 + 4 | 0;
  } while ((i7 | 0) < (i9 | 0));
  HEAP32[i17 >> 2] = 0;
  i12 = i10 + 180 | 0;
  i2 = HEAP32[i12 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i10 + 184 >> 2] | 0) >>> 0) {
   i7 = i2;
   i8 = i24;
   i9 = i7 + 64 | 0;
   do {
    HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
    i7 = i7 + 4 | 0;
    i8 = i8 + 4 | 0;
   } while ((i7 | 0) < (i9 | 0));
   HEAP32[i2 + 64 >> 2] = 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 68;
  } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i10 + 176 | 0, i24);
  switch (HEAP32[i1 + (i14 * 24 | 0) >> 2] | 0) {
  case 1:
   {
    d3 = d4 + -.1;
    i7 = i25;
    i8 = i11;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i7 = i24;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = 0;
     i7 = i7 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i1 = 0;
    do {
     d32 = +HEAPF32[i25 + (i1 << 2) >> 2];
     i7 = i1 + 4 | 0;
     d31 = +HEAPF32[i25 + (i7 << 2) >> 2];
     d35 = d31 * 0.0;
     i8 = i1 + 8 | 0;
     d4 = +HEAPF32[i25 + (i8 << 2) >> 2];
     d37 = d4 * 0.0;
     i9 = i1 + 12 | 0;
     d33 = +HEAPF32[i25 + (i9 << 2) >> 2];
     d34 = d33 * 0.0;
     HEAPF32[i24 + (i1 << 2) >> 2] = d32 + 0.0 + d35 + d37 + d34;
     d36 = d32 * 0.0 + 0.0;
     HEAPF32[i24 + (i7 << 2) >> 2] = d31 + d36 + d37 + d34;
     HEAPF32[i24 + (i8 << 2) >> 2] = d4 + (d36 + d35) + d34;
     HEAPF32[i24 + (i9 << 2) >> 2] = d33 + (d3 * d32 + 0.0 + d5 * d31 + d6 * d4);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 4);
    if ((i24 | 0) != (i11 | 0)) {
     i7 = i11;
     i8 = i24;
     i9 = i7 + 64 | 0;
     do {
      HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
      i7 = i7 + 4 | 0;
      i8 = i8 + 4 | 0;
     } while ((i7 | 0) < (i9 | 0));
    }
    __ZN4Mat46rotateEffff(i11, 90.0, 0.0, 1.0, 0.0);
    break;
   }
  case 2:
   {
    d3 = d5 + 1.1;
    i7 = i25;
    i8 = i11;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i7 = i24;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = 0;
     i7 = i7 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i1 = 0;
    do {
     d35 = +HEAPF32[i25 + (i1 << 2) >> 2];
     i7 = i1 + 4 | 0;
     d36 = +HEAPF32[i25 + (i7 << 2) >> 2];
     d32 = d36 * 0.0;
     i8 = i1 + 8 | 0;
     d37 = +HEAPF32[i25 + (i8 << 2) >> 2];
     d5 = d37 * 0.0;
     i9 = i1 + 12 | 0;
     d34 = +HEAPF32[i25 + (i9 << 2) >> 2];
     d33 = d34 * 0.0;
     HEAPF32[i24 + (i1 << 2) >> 2] = d35 + 0.0 + d32 + d5 + d33;
     d31 = d35 * 0.0 + 0.0;
     HEAPF32[i24 + (i7 << 2) >> 2] = d36 + d31 + d5 + d33;
     HEAPF32[i24 + (i8 << 2) >> 2] = d37 + (d31 + d32) + d33;
     HEAPF32[i24 + (i9 << 2) >> 2] = d34 + (d4 * d35 + 0.0 + d3 * d36 + d6 * d37);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 4);
    if ((i24 | 0) != (i11 | 0)) {
     i7 = i11;
     i8 = i24;
     i9 = i7 + 64 | 0;
     do {
      HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
      i7 = i7 + 4 | 0;
      i8 = i8 + 4 | 0;
     } while ((i7 | 0) < (i9 | 0));
    }
    __ZN4Mat46rotateEffff(i11, 90.0, 1.0, 0.0, 0.0);
    break;
   }
  case 3:
   {
    d3 = d6 + -.1;
    i7 = i25;
    i8 = i11;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i7 = i24;
    i9 = i7 + 64 | 0;
    do {
     HEAP32[i7 >> 2] = 0;
     i7 = i7 + 4 | 0;
    } while ((i7 | 0) < (i9 | 0));
    i1 = 0;
    do {
     d35 = +HEAPF32[i25 + (i1 << 2) >> 2];
     i7 = i1 + 4 | 0;
     d36 = +HEAPF32[i25 + (i7 << 2) >> 2];
     d32 = d36 * 0.0;
     i8 = i1 + 8 | 0;
     d37 = +HEAPF32[i25 + (i8 << 2) >> 2];
     d6 = d37 * 0.0;
     i9 = i1 + 12 | 0;
     d34 = +HEAPF32[i25 + (i9 << 2) >> 2];
     d33 = d34 * 0.0;
     HEAPF32[i24 + (i1 << 2) >> 2] = d35 + 0.0 + d32 + d6 + d33;
     d31 = d35 * 0.0 + 0.0;
     HEAPF32[i24 + (i7 << 2) >> 2] = d36 + d31 + d6 + d33;
     HEAPF32[i24 + (i8 << 2) >> 2] = d37 + (d31 + d32) + d33;
     HEAPF32[i24 + (i9 << 2) >> 2] = d34 + (d4 * d35 + 0.0 + d5 * d36 + d3 * d37);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 4);
    if ((i24 | 0) != (i11 | 0)) {
     i7 = i11;
     i8 = i24;
     i9 = i7 + 64 | 0;
     do {
      HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
      i7 = i7 + 4 | 0;
      i8 = i8 + 4 | 0;
     } while ((i7 | 0) < (i9 | 0));
    }
    break;
   }
  default:
   {}
  }
  i1 = HEAP32[i18 >> 2] | 0;
  HEAPF32[i26 >> 2] = 1.0;
  HEAPF32[i19 >> 2] = 0.0;
  HEAPF32[i20 >> 2] = 0.0;
  HEAP32[i21 >> 2] = i1;
  i1 = HEAP32[i22 >> 2] | 0;
  if ((i1 | 0) != -1) _glVertexAttrib4fv(i1 | 0, i26 | 0);
  __ZN12BaseGLWidget12transformMatEv(i27, HEAP32[i16 >> 2] | 0);
  i1 = HEAP32[i23 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniformMatrix4fv(i1 | 0, 1, 0, i27 | 0);
  __ZNK4Mesh5paintEb(i13, 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 176 >> 2] | 0)) {
   i1 = 27;
   break;
  }
  i2 = i1 + -68 | 0;
  if ((i2 | 0) != (i11 | 0)) {
   i7 = i11;
   i8 = i2;
   i9 = i7 + 64 | 0;
   do {
    HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
    i7 = i7 + 4 | 0;
    i8 = i8 + 4 | 0;
   } while ((i7 | 0) < (i9 | 0));
  }
  HEAP32[i10 + 172 >> 2] = HEAP32[i1 + -4 >> 2];
  HEAP32[i12 >> 2] = i2;
  __ZN12BaseGLWidget12transformMatEv(i28, HEAP32[i16 >> 2] | 0);
  i1 = HEAP32[i23 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniformMatrix4fv(i1 | 0, 1, 0, i28 | 0);
  i14 = i14 + 1 | 0;
  if ((i14 | 0) >= (HEAP32[i29 >> 2] | 0)) {
   i1 = 33;
   break;
  }
 }
 if ((i1 | 0) == 27) {
  i30 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i30 >> 2] = 7152;
  HEAP32[i30 + 4 >> 2] = 21369;
  ___cxa_throw(i30 | 0, 2608, 44);
 } else if ((i1 | 0) == 33) {
  STACKTOP = i30;
  return;
 }
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15752) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15688) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZN4Cube19generateConcreteSlvEP7SlvCube(i17, i13) {
 i17 = i17 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i14 = i21 + 24 | 0;
 i20 = i21 + 12 | 0;
 i18 = i21;
 i16 = i17 + 32 | 0;
 i19 = HEAP32[i16 >> 2] | 0;
 __ZNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEEC2Ej(i20, (HEAP32[i19 + 28 >> 2] | 0) - (HEAP32[i19 + 24 >> 2] | 0) >> 4);
 i19 = i20 + 4 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 if ((HEAP32[i19 >> 2] | 0) != (i1 | 0)) {
  i8 = 0;
  do {
   i3 = i1 + (i8 * 12 | 0) | 0;
   i4 = HEAP32[(HEAP32[i16 >> 2] | 0) + 24 >> 2] | 0;
   i4 = (HEAP32[i4 + (i8 << 4) + 8 >> 2] | 0) - (HEAP32[i4 + (i8 << 4) + 4 >> 2] | 0) >> 3;
   i5 = i1 + (i8 * 12 | 0) + 4 | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   i6 = HEAP32[i3 >> 2] | 0;
   i7 = i2 - i6 >> 2;
   if (i4 >>> 0 <= i7 >>> 0) {
    if (i4 >>> 0 < i7 >>> 0 ? (i9 = i6 + (i4 << 2) | 0, (i2 | 0) != (i9 | 0)) : 0) {
     i2 = i2 + (~((i2 + -4 - i9 | 0) >>> 2) << 2) | 0;
     HEAP32[i5 >> 2] = i2;
    }
   } else {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj(i3, i4 - i7 | 0);
    i2 = HEAP32[i20 >> 2] | 0;
    i1 = i2;
    i2 = HEAP32[i2 + (i8 * 12 | 0) + 4 >> 2] | 0;
   }
   i3 = HEAP32[i1 + (i8 * 12 | 0) >> 2] | 0;
   i2 = i2 - i3 | 0;
   if ((i2 | 0) > 0) {
    i1 = i2 >> 2;
    _memset(i3 | 0, 0, i1 + 2 + ((i2 | 0) < 4 ? i1 ^ 1073741823 : 1073741822) << 2 | 0) | 0;
    i1 = HEAP32[i20 >> 2] | 0;
   }
   i8 = i8 + 1 | 0;
  } while (i8 >>> 0 < (((HEAP32[i19 >> 2] | 0) - i1 | 0) / 12 | 0) >>> 0);
 }
 i15 = i17 + 60 | 0;
 i10 = i17 + 64 | 0;
 __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEEC2Ej(i18, ((HEAP32[i10 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) / 52 | 0);
 L14 : do if ((i13 | 0) != 0 ? (i11 = HEAP32[i10 >> 2] | 0, i12 = HEAP32[i15 >> 2] | 0, (i11 | 0) != (i12 | 0)) : 0) {
  i9 = HEAP32[i18 >> 2] | 0;
  i7 = (i11 - i12 | 0) / 52 | 0;
  i8 = HEAP32[i20 >> 2] | 0;
  i1 = 0;
  do {
   i6 = HEAP32[i12 + (i1 * 52 | 0) >> 2] | 0;
   if ((i6 | 0) == -2) {
    i2 = HEAP32[i12 + (i1 * 52 | 0) + 24 >> 2] | 0;
    if ((i2 | 0) == -1) break L14;
    HEAP32[i9 + (i1 * 52 | 0) >> 2] = i2;
    HEAP32[i9 + (i1 * 52 | 0) + 4 >> 2] = HEAP32[i12 + (i1 * 52 | 0) + 28 >> 2];
   } else {
    i11 = HEAP32[i12 + (i1 * 52 | 0) + 32 >> 2] | 0;
    if (!((i11 | 0) != -1 & (i6 | 0) == (i11 | 0))) break L14;
    if ((HEAP32[i12 + (i1 * 52 | 0) + 4 >> 2] | 0) != (HEAP32[i12 + (i1 * 52 | 0) + 36 >> 2] | 0)) break L14;
    i4 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i1 * 20 | 0) >> 2] | 0;
    if ((i4 | 0) == -1) break L14;
    i5 = HEAP32[(HEAP32[i16 >> 2] | 0) + 24 >> 2] | 0;
    i2 = HEAP32[i5 + (i6 << 4) + 8 >> 2] | 0;
    i5 = HEAP32[i5 + (i6 << 4) + 4 >> 2] | 0;
    L26 : do if ((i2 | 0) == (i5 | 0)) i2 = 0; else {
     i3 = i2 - i5 >> 3;
     i2 = 0;
     do {
      if ((HEAP32[i5 + (i2 << 3) >> 2] | 0) == (i4 | 0)) break L26;
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    } while (0);
    HEAP32[(HEAP32[i8 + (i6 * 12 | 0) >> 2] | 0) + (i2 << 2) >> 2] = 1;
    HEAP32[i9 + (i1 * 52 | 0) >> 2] = HEAP32[i12 + (i1 * 52 | 0) + 24 >> 2];
    HEAP32[i9 + (i1 * 52 | 0) + 4 >> 2] = HEAP32[i12 + (i1 * 52 | 0) + 28 >> 2];
   }
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i7 >>> 0);
 } else i1 = 0; while (0);
 i8 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22887, 3) | 0, i1) | 0;
 HEAP32[i14 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i14, 16144) | 0;
 i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, 10) | 0;
 __ZNSt3__16localeD2Ev(i14);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i8, i13) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i8 = ((HEAP32[i10 >> 2] | 0) - i14 | 0) / 52 | 0;
 if (i1 >>> 0 < i8 >>> 0) {
  i9 = HEAP32[(HEAP32[i16 >> 2] | 0) + 24 >> 2] | 0;
  i10 = HEAP32[(HEAP32[1556] | 0) + 76 >> 2] | 0;
  i11 = HEAP32[i20 >> 2] | 0;
  i12 = (HEAP8[i17 >> 0] | 0) == 0;
  i13 = HEAP32[i18 >> 2] | 0;
  do {
   i6 = HEAP32[i14 + (i1 * 52 | 0) >> 2] | 0;
   i7 = HEAP32[i9 + (i6 << 4) >> 2] | 0;
   i2 = i11 + (i6 * 12 | 0) | 0;
   if (i12) {
    i5 = HEAP32[i2 >> 2] | 0;
    i4 = 0;
   } else {
    i3 = ((HEAP32[1557] | 0) * 214013 | 0) + 2531011 | 0;
    HEAP32[1557] = i3;
    i4 = HEAP32[i2 >> 2] | 0;
    i5 = i4;
    i4 = (i3 >>> 16 >>> 0) % ((HEAP32[i11 + (i6 * 12 | 0) + 4 >> 2] | 0) - i4 >> 2 >>> 0) | 0;
   }
   i2 = i5 + (i4 << 2) | 0;
   if (HEAP32[i2 >> 2] | 0) {
    i3 = (HEAP32[i11 + (i6 * 12 | 0) + 4 >> 2] | 0) - i5 >> 2;
    do {
     i4 = ((i4 + 1 | 0) >>> 0) % (i3 >>> 0) | 0;
     i2 = i5 + (i4 << 2) | 0;
    } while ((HEAP32[i2 >> 2] | 0) != 0);
   }
   HEAP32[i2 >> 2] = 1;
   i2 = HEAP32[i9 + (i6 << 4) + 4 >> 2] | 0;
   HEAP32[i13 + (i1 * 52 | 0) >> 2] = HEAP32[i2 + (i4 << 3) >> 2];
   i3 = HEAP32[i10 + (i7 * 900 | 0) + 4 + ((HEAP32[i14 + (i1 * 52 | 0) + 4 >> 2] | 0) * 108 | 0) + 104 >> 2] | 0;
   i2 = HEAP32[i2 + (i4 << 3) + 4 >> 2] | 0;
   if ((i3 | 0) < 4 ^ (i2 | 0) < 4) i2 = ((i2 + i3 | 0) % 4 | 0) + 4 | 0; else i2 = (i3 + 4 - i2 | 0) % 4 | 0;
   HEAP32[i13 + (i1 * 52 | 0) + 4 >> 2] = i2;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i8 >>> 0);
 }
 i8 = __Znwj(84) | 0;
 __ZN7SlvCubeC2ERKNSt3__16vectorI10ShapePlaceNS0_9allocatorIS2_EEEES7_PK7PicsSetPK5Shape(i8, i15, i18, HEAP32[i16 >> 2] | 0, HEAP32[i17 + 36 >> 2] | 0);
 i1 = HEAP32[i18 >> 2] | 0;
 if (i1) {
  i7 = i18 + 4 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    HEAP32[i7 >> 2] = i2 + -52;
    i3 = HEAP32[i2 + -12 >> 2] | 0;
    i4 = i3;
    if (i3) {
     i5 = i2 + -8 | 0;
     i6 = HEAP32[i5 >> 2] | 0;
     if ((i6 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i6 + (~((i6 + -8 - i4 | 0) >>> 3) << 3);
     __ZdlPv(i3);
    }
    i2 = HEAP32[i2 + -32 >> 2] | 0;
    if (i2) __ZdaPv(i2);
    i2 = HEAP32[i7 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i18 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i20 >> 2] | 0;
 if (!i1) {
  STACKTOP = i21;
  return i8 | 0;
 }
 i2 = HEAP32[i19 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = i2 + -12 | 0;
   HEAP32[i19 >> 2] = i3;
   i4 = HEAP32[i3 >> 2] | 0;
   i5 = i4;
   if (!i4) i2 = i3; else {
    i2 = i2 + -8 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
    __ZdlPv(i4);
    i2 = HEAP32[i19 >> 2] | 0;
   }
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZdlPv(i1);
 STACKTOP = i21;
 return i8 | 0;
}

function __ZN4Cube10initPuttgrEP12SolveContextP7SlvCube(i24, i27, i23) {
 i24 = i24 | 0;
 i27 = i27 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1328 | 0;
 i26 = i28;
 HEAP8[i27 + 52 >> 0] = 0;
 HEAP32[i27 + 56 >> 2] = 0;
 HEAP32[i27 + 60 >> 2] = 0;
 i19 = HEAP32[i24 + 8 >> 2] | 0;
 i22 = i24 + 36 | 0;
 i18 = (HEAP32[i22 >> 2] | 0) + 24 | 0;
 i21 = ~~+Math_floor(+(+(Math_imul(HEAP32[i18 >> 2] | 0, i19) | 0) / 100.0 + .5));
 i20 = i27 + 64 | 0;
 HEAP32[i20 >> 2] = i21;
 i18 = HEAP32[i18 >> 2] | 0;
 i21 = (i18 | 0) < (i21 | 0) ? i18 : i21;
 HEAP32[i20 >> 2] = (i19 | 0) > 0 ? ((i21 | 0) > 1 ? i21 : 1) : i21;
 i20 = i27 + 32 | 0;
 HEAP32[i20 >> 2] = 1;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP8[i27 + 40 >> 0] = 0;
 i20 = __ZNSt3__16chrono12steady_clock3nowEv() | 0;
 i21 = i27 + 72 | 0;
 HEAP32[i21 >> 2] = i20;
 HEAP32[i21 + 4 >> 2] = tempRet0;
 __ZN4Cube5clearEi(i24, 0);
 HEAP32[1557] = _time(0) | 0;
 L1 : do if (!i23) i1 = 0; else {
  i15 = i24 + 60 | 0;
  i16 = i26 + 1004 | 0;
  i17 = i26 + 1008 | 0;
  i18 = i26 + 1012 | 0;
  i19 = i24 + 32 | 0;
  i20 = i24 + 72 | 0;
  i21 = i26 + 1016 | 0;
  i1 = 0;
  do {
   i2 = HEAP32[i23 >> 2] | 0;
   i12 = HEAP32[i2 + (i1 * 20 | 0) >> 2] | 0;
   if ((i12 | 0) == -1) break L1;
   i9 = HEAP32[i2 + (i1 * 20 | 0) + 4 >> 2] | 0;
   i10 = HEAP32[i15 >> 2] | 0;
   i11 = i10 + (i1 * 52 | 0) | 0;
   i2 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
   _memcpy(i26 | 0, i2 + (i12 * 1328 | 0) | 0, 1004) | 0;
   HEAP32[i16 >> 2] = HEAP32[i2 + (i12 * 1328 | 0) + 1004 >> 2];
   i13 = HEAP32[i2 + (i12 * 1328 | 0) + 1008 >> 2] | 0;
   HEAP32[i17 >> 2] = i13;
   i14 = (i13 | 0) == 0;
   if (!i14) __ZNSt3__119__shared_weak_count12__add_sharedEv(i13);
   _memcpy(i18 | 0, i2 + (i12 * 1328 | 0) + 1012 | 0, 316) | 0;
   i6 = HEAP32[i19 >> 2] | 0;
   i5 = HEAP32[i6 + 28 >> 2] | 0;
   i6 = HEAP32[i6 + 24 >> 2] | 0;
   L9 : do if ((i5 | 0) == (i6 | 0)) i8 = 0; else {
    i3 = HEAP32[i21 >> 2] | 0;
    i4 = i5 - i6 >> 4;
    i2 = 0;
    while (1) {
     if ((HEAP32[i6 + (i2 << 4) >> 2] | 0) == (i3 | 0)) {
      i8 = i2;
      break L9;
     }
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i4 >>> 0) {
      i8 = i2;
      break;
     }
    }
   } while (0);
   if (i8 >>> 0 < i5 - i6 >> 4 >>> 0) {
    i4 = HEAP32[i6 + (i8 << 4) + 8 >> 2] | 0;
    i5 = HEAP32[i6 + (i8 << 4) + 4 >> 2] | 0;
    L17 : do if ((i4 | 0) == (i5 | 0)) i2 = 0; else {
     i3 = i4 - i5 >> 3;
     i2 = 0;
     do {
      if ((HEAP32[i5 + (i2 << 3) >> 2] | 0) == (i12 | 0)) break L17;
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    } while (0);
    if (i2 >>> 0 < i4 - i5 >> 3 >>> 0) {
     i2 = HEAP32[1556] | 0;
     i5 = HEAP32[i6 + (i8 << 4) >> 2] | 0;
     i6 = HEAP32[i2 + 76 >> 2] | 0;
     i2 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i12 * 1328 | 0) + 1020 >> 2] | 0;
     i3 = (i9 | 0) < 4;
     do if ((i2 | 0) < 4) if (i3) {
      i3 = (i9 + 4 + i2 | 0) % 4 | 0;
      break;
     } else {
      i3 = ((i9 - i2 | 0) % 4 | 0) + 4 | 0;
      break;
     } else if (i3) {
      i3 = ((i2 + i9 | 0) % 4 | 0) + 4 | 0;
      break;
     } else {
      i3 = (i9 + 4 - i2 | 0) % 4 | 0;
      break;
     } while (0);
     i4 = HEAP32[i6 + (i5 * 900 | 0) >> 2] | 0;
     L34 : do if ((i4 | 0) > 0) {
      i2 = 0;
      do {
       if ((HEAP32[i6 + (i5 * 900 | 0) + 4 + (i2 * 108 | 0) + 104 >> 2] | 0) == (i3 | 0)) break L34;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < (i4 | 0));
     } else i2 = 0; while (0);
     if (__ZN4Cube18makePossibilities2EiR10ShapePlace(i24, i1, i11) | 0) {
      i5 = HEAP32[i10 + (i1 * 52 | 0) + 44 >> 2] | 0;
      i6 = HEAP32[i10 + (i1 * 52 | 0) + 40 >> 2] | 0;
      L40 : do if ((i5 | 0) == (i6 | 0)) i3 = 0; else {
       i4 = i5 - i6 >> 3;
       i3 = 0;
       do {
        if ((HEAP32[i6 + (i3 << 3) >> 2] | 0) == (i8 | 0) ? (HEAP32[i6 + (i3 << 3) + 4 >> 2] | 0) == (i2 | 0) : 0) break L40;
        i3 = i3 + 1 | 0;
       } while (i3 >>> 0 < i4 >>> 0);
      } while (0);
      if (i3 >>> 0 < i5 - i6 >> 3 >>> 0) {
       i7 = HEAP32[i6 + (i3 << 3) >> 2] | 0;
       i4 = HEAP32[i6 + (i3 << 3) + 4 >> 2] | 0;
       i5 = (HEAP32[i10 + (i1 * 52 | 0) + 20 >> 2] | 0) + (((i3 | 0) / 32 | 0) << 2) | 0;
       i6 = HEAP32[i5 >> 2] | 0;
       i3 = 1 << (i3 & 31);
       if (!(i6 & i3)) {
        HEAP32[i5 >> 2] = i6 | i3;
        i6 = i10 + (i1 * 52 | 0) + 8 | 0;
        HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       }
       HEAP32[i11 >> 2] = i7;
       HEAP32[i10 + (i1 * 52 | 0) + 4 >> 2] = i4;
       i5 = (HEAP32[i20 >> 2] | 0) + (i7 << 3) | 0;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
       i5 = HEAP32[i15 >> 2] | 0;
       i6 = i5 + (i1 * 52 | 0) + 4 | 0;
       i5 = i5 + (i1 * 52 | 0) | 0;
       i11 = (HEAP32[(HEAP32[1556] | 0) + 76 >> 2] | 0) + ((HEAP32[(HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i5 >> 2] << 4) >> 2] | 0) * 900 | 0) + 4 + ((HEAP32[i6 >> 2] | 0) * 108 | 0) | 0;
       HEAP32[i5 >> 2] = i7;
       HEAP32[i6 >> 2] = i4;
       __ZN4Cube9putPicArrERK6PicArri(i24, i11, i1);
       HEAP32[i10 + (i1 * 52 | 0) + 24 >> 2] = i12;
       HEAP32[i10 + (i1 * 52 | 0) + 28 >> 2] = i9;
       HEAP32[i10 + (i1 * 52 | 0) + 32 >> 2] = i8;
       HEAP32[i10 + (i1 * 52 | 0) + 36 >> 2] = i2;
      } else i25 = 36;
     } else i25 = 36;
    } else i25 = 36;
   } else i25 = 36;
   if ((i25 | 0) == 36) {
    i25 = 0;
    HEAP32[i11 >> 2] = -2;
    HEAP32[i10 + (i1 * 52 | 0) + 4 >> 2] = -2;
    HEAP32[i10 + (i1 * 52 | 0) + 24 >> 2] = i12;
    HEAP32[i10 + (i1 * 52 | 0) + 28 >> 2] = i9;
    HEAP32[i10 + (i1 * 52 | 0) + 32 >> 2] = -1;
    HEAP32[i10 + (i1 * 52 | 0) + 36 >> 2] = -1;
    __ZN4Cube9putPicArrERK6PicArri(i24, i26 + 116 + (i9 * 108 | 0) | 0, i1);
   }
   i1 = i1 + 1 | 0;
   i2 = (i1 | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0);
   if (!i14) __ZNSt3__119__shared_weak_count16__release_sharedEv(i13);
  } while (!i2);
 } while (0);
 i25 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22873, 3) | 0, i1) | 0;
 HEAP32[i26 >> 2] = __ZNKSt3__18ios_base6getlocEv(i25 + (HEAP32[(HEAP32[i25 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i24 = __ZNKSt3__16locale9use_facetERNS0_2idE(i26, 16144) | 0;
 i24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i24 >> 2] | 0) + 28 >> 2] & 63](i24, 10) | 0;
 __ZNSt3__16localeD2Ev(i26);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i25, i24) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i25) | 0;
 HEAP32[i27 + 68 >> 2] = i1;
 STACKTOP = i28;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i16, i17, i18, i14, i19, i15, i2, i13) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i21 + 16 | 0;
 i8 = i21 + 12 | 0;
 i12 = i21 + 8 | 0;
 i10 = i21 + 4 | 0;
 i11 = i21;
 i1 = __ZNKSt3__18ios_base6getlocEv(i14) | 0;
 HEAP32[i12 >> 2] = i1;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i19 >> 2] = 0;
 i1 = HEAP32[i17 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i13 | 0)) {
  L2 : while (1) {
   i4 = i1;
   if (i1) {
    i3 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
    if ((i3 | 0) == -1) {
     HEAP32[i17 >> 2] = 0;
     i1 = 0;
     i6 = 1;
     i7 = 0;
    } else {
     i6 = 0;
     i7 = i4;
    }
   } else {
    i1 = 0;
    i6 = 1;
    i7 = i4;
   }
   i5 = HEAP32[i18 >> 2] | 0;
   i3 = i5;
   do if (i5) {
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
    if ((i4 | 0) != -1) if (i6) break; else {
     i20 = 16;
     break L2;
    } else {
     HEAP32[i18 >> 2] = 0;
     i3 = 0;
     i20 = 14;
     break;
    }
   } else i20 = 14; while (0);
   if ((i20 | 0) == 14) {
    i20 = 0;
    if (i6) {
     i20 = 16;
     break;
    } else i5 = 0;
   }
   L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i2 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    i4 = i2 + 4 | 0;
    if ((i4 | 0) == (i13 | 0)) {
     i20 = 19;
     break L2;
    }
    i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i4 >> 2] | 0, 0) | 0;
    switch (i6 << 24 >> 24) {
    case 48:
    case 69:
     {
      i5 = i2 + 8 | 0;
      if ((i5 | 0) == (i13 | 0)) {
       i20 = 22;
       break L2;
      }
      i2 = i4;
      i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i5 >> 2] | 0, 0) | 0;
      i1 = i6;
      break;
     }
    default:
     {
      i4 = i6;
      i1 = 0;
     }
    }
    i6 = HEAP32[(HEAP32[i16 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i7;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i17 >> 2] = FUNCTION_TABLE_iiiiiiiii[i6 & 15](i16, i8, i9, i14, i19, i15, i4, i1) | 0;
    i2 = i2 + 8 | 0;
   } else {
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i2 >> 2] | 0) | 0)) {
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, i3) | 0;
     if ((i7 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, HEAP32[i2 >> 2] | 0) | 0)) {
      i20 = 59;
      break L2;
     }
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 4;
     i2 = i2 + 4 | 0;
     break;
    }
    do {
     i2 = i2 + 4 | 0;
     if ((i2 | 0) == (i13 | 0)) {
      i2 = i13;
      break;
     }
    } while (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i2 >> 2] | 0) | 0);
    i3 = i5;
    i6 = i5;
    while (1) {
     if (i1) {
      i4 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) == -1) {
       HEAP32[i17 >> 2] = 0;
       i5 = 1;
       i1 = 0;
      } else i5 = 0;
     } else {
      i5 = 1;
      i1 = 0;
     }
     do if (i6) {
      i4 = HEAP32[i6 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) != -1) if (i5 ^ (i3 | 0) == 0) {
       i7 = i3;
       i6 = i3;
       break;
      } else break L24; else {
       HEAP32[i18 >> 2] = 0;
       i3 = 0;
       i20 = 42;
       break;
      }
     } else i20 = 42; while (0);
     if ((i20 | 0) == 42) {
      i20 = 0;
      if (i5) break L24; else {
       i7 = i3;
       i6 = 0;
      }
     }
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, i3) | 0)) break L24;
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
      i3 = i7;
      continue;
     } else {
      HEAP32[i4 >> 2] = i3 + 4;
      i3 = i7;
      continue;
     }
    }
   } while (0);
   i1 = HEAP32[i17 >> 2] | 0;
   if (!((i2 | 0) != (i13 | 0) & (HEAP32[i19 >> 2] | 0) == 0)) break L1;
  }
  if ((i20 | 0) == 16) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 19) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 22) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 59) {
   HEAP32[i19 >> 2] = 4;
   i1 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i1 = 0;
   i4 = 1;
  } else i4 = 0;
 } else {
  i1 = 0;
  i4 = 1;
 }
 i2 = HEAP32[i18 >> 2] | 0;
 do if (i2) {
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) != -1) if (i4) break; else {
   i20 = 74;
   break;
  } else {
   HEAP32[i18 >> 2] = 0;
   i20 = 72;
   break;
  }
 } else i20 = 72; while (0);
 if ((i20 | 0) == 72 ? i4 : 0) i20 = 74;
 if ((i20 | 0) == 74) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 STACKTOP = i21;
 return i1 | 0;
}

function __ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE(i8, i1, i9) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i2 & 255;
 L1 : do if (!(i3 & 128)) {
  i2 = i1;
  while (1) {
   if (!(_isspace(i3) | 0)) break;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   i3 = i4 & 255;
   if (i3 & 128) {
    i7 = i2;
    i2 = i4;
    break L1;
   }
  }
  if (!i2) {
   i10 = 0;
   return i10 | 0;
  } else {
   i7 = i2;
   i2 = HEAP8[i2 >> 0] | 0;
   break;
  }
 } else i7 = i1; while (0);
 if (!(i2 << 24 >> 24)) {
  i10 = i7;
  return i10 | 0;
 }
 L13 : do if ((i7 | 0) != 22911) {
  i4 = 22911;
  i6 = i7;
  i5 = i2;
  i3 = 0;
  while (1) {
   i11 = HEAP8[i4 >> 0] | 0;
   if (!((i3 | 0) < 2 & (i11 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
   i6 = i6 + 1 | 0;
   i4 = i4 + 1 | 0;
   i3 = i3 + 1 | 0;
   i5 = HEAP8[i6 >> 0] | 0;
   if (!(i5 << 24 >> 24)) {
    i5 = 0;
    break;
   }
  }
  if ((i3 | 0) != 2) {
   if (i5 << 24 >> 24 == 0 ? (HEAP8[i4 >> 0] | 0) == 0 : 0) {
    i10 = 13;
    break;
   }
   do if ((i7 | 0) != 22914) {
    i4 = 22914;
    i6 = i7;
    i5 = i2;
    i3 = 0;
    while (1) {
     i11 = HEAP8[i4 >> 0] | 0;
     if (!((i3 | 0) < 4 & (i11 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
     i6 = i6 + 1 | 0;
     i4 = i4 + 1 | 0;
     i3 = i3 + 1 | 0;
     i5 = HEAP8[i6 >> 0] | 0;
     if (!(i5 << 24 >> 24)) {
      i5 = 0;
      break;
     }
    }
    if ((i3 | 0) != 4) {
     if (i5 << 24 >> 24 == 0 ? (HEAP8[i4 >> 0] | 0) == 0 : 0) break;
     do if ((i7 | 0) != 22919) {
      i4 = 22919;
      i6 = i7;
      i5 = i2;
      i3 = 0;
      while (1) {
       i11 = HEAP8[i4 >> 0] | 0;
       if (!((i3 | 0) < 9 & (i11 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
       i6 = i6 + 1 | 0;
       i4 = i4 + 1 | 0;
       i3 = i3 + 1 | 0;
       i5 = HEAP8[i6 >> 0] | 0;
       if (!(i5 << 24 >> 24)) {
        i5 = 0;
        break;
       }
      }
      if ((i3 | 0) != 9) {
       if (i5 << 24 >> 24 == 0 ? (HEAP8[i4 >> 0] | 0) == 0 : 0) break;
       do if ((i7 | 0) != 22929) {
        i4 = 22929;
        i6 = i7;
        i5 = i2;
        i3 = 0;
        while (1) {
         i11 = HEAP8[i4 >> 0] | 0;
         if (!((i3 | 0) < 2 & (i11 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
         i6 = i6 + 1 | 0;
         i4 = i4 + 1 | 0;
         i3 = i3 + 1 | 0;
         i5 = HEAP8[i6 >> 0] | 0;
         if (!(i5 << 24 >> 24)) {
          i5 = 0;
          break;
         }
        }
        if ((i3 | 0) != 2) {
         if (i5 << 24 >> 24 == 0 ? (HEAP8[i4 >> 0] | 0) == 0 : 0) break;
         do if ((i7 | 0) != 21626) {
          i4 = 21626;
          i5 = i7;
          i3 = 0;
          while (1) {
           i11 = HEAP8[i4 >> 0] | 0;
           if (!((i3 | 0) < 1 & (i11 << 24 >> 24 != 0 ? i2 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
           i5 = i5 + 1 | 0;
           i4 = i4 + 1 | 0;
           i3 = i3 + 1 | 0;
           i2 = HEAP8[i5 >> 0] | 0;
           if (!(i2 << 24 >> 24)) {
            i2 = 0;
            break;
           }
          }
          if ((i3 | 0) == 1) break;
          if (i2 << 24 >> 24 == 0 ? (HEAP8[i4 >> 0] | 0) == 0 : 0) break;
          i11 = i8 + 212 | 0;
          i2 = __ZN8tinyxml28MemPoolTILi48EE5AllocEv(i11) | 0;
          HEAP32[i2 + 4 >> 2] = i8;
          i8 = i2 + 8 | 0;
          HEAP32[i8 >> 2] = 0;
          HEAP32[i8 + 4 >> 2] = 0;
          HEAP32[i8 + 8 >> 2] = 0;
          HEAP32[i8 + 12 >> 2] = 0;
          HEAP32[i8 + 16 >> 2] = 0;
          HEAP32[i8 + 20 >> 2] = 0;
          HEAP32[i8 + 24 >> 2] = 0;
          HEAP32[i8 + 28 >> 2] = 0;
          HEAP32[i2 >> 2] = 7072;
          HEAP8[i2 + 44 >> 0] = 0;
          HEAP32[i2 + 40 >> 2] = i11;
          break L13;
         } while (0);
         i1 = i8 + 68 | 0;
         i2 = __ZN8tinyxml28MemPoolTILi52EE5AllocEv(i1) | 0;
         HEAP32[i2 + 4 >> 2] = i8;
         i11 = i2 + 8 | 0;
         HEAP32[i11 >> 2] = 0;
         HEAP32[i11 + 4 >> 2] = 0;
         HEAP32[i11 + 8 >> 2] = 0;
         HEAP32[i11 + 12 >> 2] = 0;
         HEAP32[i11 + 16 >> 2] = 0;
         HEAP32[i11 + 20 >> 2] = 0;
         HEAP32[i11 + 24 >> 2] = 0;
         HEAP32[i11 + 28 >> 2] = 0;
         HEAP32[i2 >> 2] = 6672;
         HEAP32[i2 + 44 >> 2] = 0;
         HEAP32[i2 + 48 >> 2] = 0;
         HEAP32[i2 + 40 >> 2] = i1;
         i1 = i7 + 1 | 0;
         break L13;
        }
       } while (0);
       i1 = i8 + 284 | 0;
       i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i1) | 0;
       HEAP32[i2 + 4 >> 2] = i8;
       i11 = i2 + 8 | 0;
       HEAP32[i11 >> 2] = 0;
       HEAP32[i11 + 4 >> 2] = 0;
       HEAP32[i11 + 8 >> 2] = 0;
       HEAP32[i11 + 12 >> 2] = 0;
       HEAP32[i11 + 16 >> 2] = 0;
       HEAP32[i11 + 20 >> 2] = 0;
       HEAP32[i11 + 24 >> 2] = 0;
       HEAP32[i11 + 28 >> 2] = 0;
       HEAP32[i2 >> 2] = 6592;
       HEAP32[i2 + 40 >> 2] = i1;
       i1 = i7 + 2 | 0;
       break L13;
      }
     } while (0);
     i1 = i8 + 212 | 0;
     i2 = __ZN8tinyxml28MemPoolTILi48EE5AllocEv(i1) | 0;
     HEAP32[i2 + 4 >> 2] = i8;
     i11 = i2 + 8 | 0;
     HEAP32[i11 >> 2] = 0;
     HEAP32[i11 + 4 >> 2] = 0;
     HEAP32[i11 + 8 >> 2] = 0;
     HEAP32[i11 + 12 >> 2] = 0;
     HEAP32[i11 + 16 >> 2] = 0;
     HEAP32[i11 + 20 >> 2] = 0;
     HEAP32[i11 + 24 >> 2] = 0;
     HEAP32[i11 + 28 >> 2] = 0;
     HEAP32[i2 >> 2] = 7072;
     HEAP32[i2 + 40 >> 2] = i1;
     HEAP8[i2 + 44 >> 0] = 1;
     i1 = i7 + 9 | 0;
     break L13;
    }
   } while (0);
   i1 = i8 + 284 | 0;
   i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i1) | 0;
   HEAP32[i2 + 4 >> 2] = i8;
   i11 = i2 + 8 | 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   HEAP32[i11 + 12 >> 2] = 0;
   HEAP32[i11 + 16 >> 2] = 0;
   HEAP32[i11 + 20 >> 2] = 0;
   HEAP32[i11 + 24 >> 2] = 0;
   HEAP32[i11 + 28 >> 2] = 0;
   HEAP32[i2 >> 2] = 6432;
   HEAP32[i2 + 40 >> 2] = i1;
   i1 = i7 + 4 | 0;
  } else i10 = 13;
 } else i10 = 13; while (0);
 if ((i10 | 0) == 13) {
  i1 = i8 + 284 | 0;
  i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i1) | 0;
  HEAP32[i2 + 4 >> 2] = i8;
  i11 = i2 + 8 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  HEAP32[i11 + 12 >> 2] = 0;
  HEAP32[i11 + 16 >> 2] = 0;
  HEAP32[i11 + 20 >> 2] = 0;
  HEAP32[i11 + 24 >> 2] = 0;
  HEAP32[i11 + 28 >> 2] = 0;
  HEAP32[i2 >> 2] = 6512;
  HEAP32[i2 + 40 >> 2] = i1;
  i1 = i7 + 2 | 0;
 }
 HEAP32[i9 >> 2] = i2;
 i11 = i1;
 return i11 | 0;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15880) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i5);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 15816) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i18, i19, i20, i16, i21, i17, i2, i15) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i21 = i21 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i23 + 16 | 0;
 i8 = i23 + 12 | 0;
 i12 = i23 + 8 | 0;
 i10 = i23 + 4 | 0;
 i11 = i23;
 i13 = __ZNKSt3__18ios_base6getlocEv(i16) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i21 >> 2] = 0;
 i13 = i12 + 8 | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i15 | 0)) {
  L2 : while (1) {
   i3 = i1;
   if (i1) {
    if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
     HEAP32[i19 >> 2] = 0;
     i1 = 0;
     i3 = 0;
    }
   } else i1 = 0;
   i6 = (i1 | 0) == 0;
   i5 = HEAP32[i20 >> 2] | 0;
   i4 = i5;
   do if (i5) {
    if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i5 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) == -1 : 0) {
     HEAP32[i20 >> 2] = 0;
     i4 = 0;
     i22 = 11;
     break;
    }
    if (!i6) {
     i22 = 12;
     break L2;
    }
   } else i22 = 11; while (0);
   if ((i22 | 0) == 11) {
    i22 = 0;
    if (i6) {
     i22 = 12;
     break;
    } else i5 = 0;
   }
   L18 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i2 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    i5 = i2 + 1 | 0;
    if ((i5 | 0) == (i15 | 0)) {
     i22 = 15;
     break L2;
    }
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i5 >> 0] | 0, 0) | 0;
    switch (i7 << 24 >> 24) {
    case 48:
    case 69:
     {
      i6 = i2 + 2 | 0;
      if ((i6 | 0) == (i15 | 0)) {
       i22 = 18;
       break L2;
      }
      i2 = i5;
      i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i6 >> 0] | 0, 0) | 0;
      i1 = i7;
      break;
     }
    default:
     {
      i5 = i7;
      i1 = 0;
     }
    }
    i7 = HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i3;
    HEAP32[i11 >> 2] = i4;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i19 >> 2] = FUNCTION_TABLE_iiiiiiiii[i7 & 15](i18, i8, i9, i16, i21, i17, i5, i1) | 0;
    i2 = i2 + 2 | 0;
   } else {
    i3 = HEAP8[i2 >> 0] | 0;
    if (i3 << 24 >> 24 > -1 ? (i14 = HEAP32[i13 >> 2] | 0, (HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0) : 0) {
     do {
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i15 | 0)) {
       i2 = i15;
       break;
      }
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 <= -1) break;
     } while ((HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0);
     i3 = i5;
     while (1) {
      if (i1) {
       if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
        HEAP32[i19 >> 2] = 0;
        i1 = 0;
       }
      } else i1 = 0;
      i4 = (i1 | 0) == 0;
      do if (i5) {
       if ((HEAP32[i5 + 12 >> 2] | 0) != (HEAP32[i5 + 16 >> 2] | 0)) if (i4) {
        i7 = i3;
        break;
       } else break L18;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) != -1) if (i4 ^ (i3 | 0) == 0) {
        i7 = i3;
        i5 = i3;
        break;
       } else break L18; else {
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        i22 = 37;
        break;
       }
      } else i22 = 37; while (0);
      if ((i22 | 0) == 37) {
       i22 = 0;
       if (i4) break L18; else {
        i7 = i3;
        i5 = 0;
       }
      }
      i4 = i1 + 12 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      i6 = i1 + 16 | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 <= -1) break L18;
      if (!(HEAP16[(HEAP32[i13 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L18;
      i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
       i3 = i7;
       continue;
      } else {
       HEAP32[i4 >> 2] = i3 + 1;
       i3 = i7;
       continue;
      }
     }
    }
    i4 = i1 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i1 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, i3 & 255) | 0;
    if (i7 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, HEAP8[i2 >> 0] | 0) | 0) << 24 >> 24) {
     i22 = 55;
     break L2;
    }
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 1;
    i2 = i2 + 1 | 0;
   } while (0);
   i1 = HEAP32[i19 >> 2] | 0;
   if (!((i2 | 0) != (i15 | 0) & (HEAP32[i21 >> 2] | 0) == 0)) break L1;
  }
  if ((i22 | 0) == 12) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 15) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 18) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 55) {
   HEAP32[i21 >> 2] = 4;
   i1 = HEAP32[i19 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i19 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i2 = (i1 | 0) == 0;
 i3 = HEAP32[i20 >> 2] | 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i2) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i2 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 STACKTOP = i23;
 return i1 | 0;
}

function __ZN9Solutions10toNewShapeEPK5Shape(i1, i22) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i25 + 24 | 0;
 i24 = i25 + 12 | 0;
 i23 = i25;
 i19 = i1 + 12 | 0;
 i18 = i1 + 8 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 if ((HEAP32[i19 >> 2] | 0) == (i1 | 0)) {
  STACKTOP = i25;
  return;
 }
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + 80 >> 2] | 0;
 i20 = i4 + 24 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 HEAP32[i24 >> 2] = 0;
 i21 = i24 + 4 | 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 do if (i1) if (i1 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i24); else {
  i17 = i1 << 2;
  i3 = __Znwj(i17) | 0;
  HEAP32[i24 >> 2] = i3;
  i2 = i3 + (i1 << 2) | 0;
  HEAP32[i24 + 8 >> 2] = i2;
  _memset(i3 | 0, 0, i17 | 0) | 0;
  HEAP32[i21 >> 2] = i2;
  break;
 } else {
  i2 = 0;
  i3 = 0;
 } while (0);
 i1 = i2 - i3 | 0;
 if ((i1 | 0) > 0) {
  i17 = i1 >> 2;
  _memset(i3 | 0, -1, (i17 + ((i1 | 0) < 4 ? i17 ^ 1073741823 : 1073741822) << 2) + 8 | 0) | 0;
 }
 i15 = (HEAP32[i22 + 68 >> 2] | 0) - (HEAP32[i4 + 68 >> 2] | 0) | 0;
 i16 = (HEAP32[i22 + 76 >> 2] | 0) - (HEAP32[i4 + 76 >> 2] | 0) | 0;
 i17 = (HEAP32[i22 + 60 >> 2] | 0) - (HEAP32[i4 + 60 >> 2] | 0) | 0;
 i1 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22170, 12) | 0, i15) | 0, 22183, 1) | 0, i16) | 0, 22183, 1) | 0, i17) | 0;
 HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
 i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i14, 10) | 0;
 __ZNSt3__16localeD2Ev(i5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i1, i14) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i11 = HEAP32[i4 + 44 >> 2] | 0;
  i12 = i22 + 24 | 0;
  i13 = i22 + 44 | 0;
  i14 = HEAP32[i24 >> 2] | 0;
  i10 = 0;
  do {
   i2 = HEAP32[i12 >> 2] | 0;
   L17 : do if ((i2 | 0) > 0) {
    i3 = HEAP32[i13 >> 2] | 0;
    i4 = (HEAP32[i11 + (i10 * 188 | 0) + 4 >> 2] | 0) - i15 | 0;
    i5 = (HEAP32[i11 + (i10 * 188 | 0) + 12 >> 2] | 0) - i17 | 0;
    i6 = i11 + (i10 * 188 | 0) + 8 | 0;
    i7 = i11 + (i10 * 188 | 0) | 0;
    i8 = i11 + (i10 * 188 | 0) + 16 | 0;
    i9 = 0;
    while (1) {
     if (((((i4 | 0) == (HEAP32[i3 + (i9 * 188 | 0) + 4 >> 2] | 0) ? ((HEAP32[i6 >> 2] | 0) - i16 | 0) == (HEAP32[i3 + (i9 * 188 | 0) + 8 >> 2] | 0) : 0) ? (i5 | 0) == (HEAP32[i3 + (i9 * 188 | 0) + 12 >> 2] | 0) : 0) ? (HEAP32[i7 >> 2] | 0) == (HEAP32[i3 + (i9 * 188 | 0) >> 2] | 0) : 0) ? (HEAP32[i8 >> 2] | 0) == (HEAP32[i3 + (i9 * 188 | 0) + 16 >> 2] | 0) : 0) {
      i1 = i9;
      break;
     }
     i9 = i9 + 1 | 0;
     if ((i9 | 0) >= (i2 | 0)) break L17;
    }
    HEAP32[i14 + (i10 << 2) >> 2] = i1;
    i1 = HEAP32[i20 >> 2] | 0;
   } while (0);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (i1 | 0));
 }
 i1 = HEAP32[i18 >> 2] | 0;
 i8 = HEAP32[i19 >> 2] | 0;
 L30 : do if ((i1 | 0) != (i8 | 0)) {
  i9 = i22 + 24 | 0;
  i10 = i23 + 4 | 0;
  i11 = i23 + 8 | 0;
  i12 = i23 + 8 | 0;
  while (1) {
   i2 = HEAP32[i9 >> 2] | 0;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   if (!i2) {
    i4 = 0;
    i5 = 0;
   } else {
    if (i2 >>> 0 > 214748364) break;
    i4 = __Znwj(i2 * 20 | 0) | 0;
    HEAP32[i10 >> 2] = i4;
    HEAP32[i23 >> 2] = i4;
    i5 = i4 + (i2 * 20 | 0) | 0;
    HEAP32[i12 >> 2] = i5;
    i3 = i4;
    while (1) {
     HEAP32[i3 >> 2] = -1;
     HEAP32[i3 + 4 >> 2] = -1;
     HEAP32[i3 + 8 >> 2] = 0;
     HEAP32[i3 + 12 >> 2] = -1;
     HEAP32[i3 + 16 >> 2] = -1;
     i2 = i2 + -1 | 0;
     if (!i2) break; else i3 = i3 + 20 | 0;
    }
    HEAP32[i10 >> 2] = i5;
   }
   i2 = HEAP32[i20 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i7 = HEAP32[i24 >> 2] | 0;
    i6 = 0;
    do {
     i3 = HEAP32[i7 + (i6 << 2) >> 2] | 0;
     if ((i3 | 0) != -1) {
      i2 = i4 + (i3 * 20 | 0) | 0;
      i19 = (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) + (i6 * 20 | 0) | 0;
      HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
      HEAP32[i2 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
      HEAP32[i2 + 16 >> 2] = HEAP32[i19 + 16 >> 2];
      i2 = HEAP32[i20 >> 2] | 0;
     }
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (i2 | 0));
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i23 | 0)) {
    __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i2, i4, i5);
    i2 = HEAP32[i1 >> 2] | 0;
    i4 = HEAP32[i23 >> 2] | 0;
   }
   HEAP32[i2 + 80 >> 2] = i22;
   i2 = i4;
   if (i4) {
    i3 = HEAP32[i10 >> 2] | 0;
    if ((i3 | 0) != (i4 | 0)) HEAP32[i10 >> 2] = i3 + (~(((i3 + -20 - i2 | 0) >>> 0) / 20 | 0) * 20 | 0);
    __ZdlPv(i4);
   }
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i8 | 0)) break L30;
  }
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i23);
 } while (0);
 i1 = HEAP32[i24 >> 2] | 0;
 if (!i1) {
  STACKTOP = i25;
  return;
 }
 i2 = HEAP32[i21 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i21 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 STACKTOP = i25;
 return;
}

function __ZN16ModelControlBase9myPaintGLEb(i16, i15) {
 i16 = i16 | 0;
 i15 = i15 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i12 = i17 + 64 | 0;
 i13 = i17;
 i14 = i16 + 4 | 0;
 i4 = HEAP32[i14 >> 2] | 0;
 d2 = +(HEAP32[i4 + 228 >> 2] | 0) / 100.0;
 if (!(d2 <= 1.0)) d8 = +Math_pow(3.0, +d2) + -2.0; else d8 = d2 * d2;
 i9 = i12;
 i10 = i4 + 108 | 0;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 HEAP32[i12 + 64 >> 2] = 0;
 i1 = i4 + 180 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i4 + 184 >> 2] | 0) >>> 0) {
  i9 = i3;
  i10 = i12;
  i11 = i9 + 64 | 0;
  do {
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   i9 = i9 + 4 | 0;
   i10 = i10 + 4 | 0;
  } while ((i9 | 0) < (i11 | 0));
  HEAP32[i3 + 64 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 68;
 } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i4 + 176 | 0, i12);
 i1 = HEAP32[i14 >> 2] | 0;
 i4 = i1 + 108 | 0;
 d2 = d8;
 i9 = i13;
 i10 = i4;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 i9 = i12;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 i3 = 0;
 do {
  d23 = +HEAPF32[i13 + (i3 << 2) >> 2];
  i9 = i3 + 4 | 0;
  d24 = +HEAPF32[i13 + (i9 << 2) >> 2];
  d19 = d24 * 0.0;
  i10 = i3 + 8 | 0;
  d22 = +HEAPF32[i13 + (i10 << 2) >> 2];
  d18 = d22 * 0.0;
  i11 = i3 + 12 | 0;
  d20 = +HEAPF32[i13 + (i11 << 2) >> 2];
  d21 = d20 * 0.0;
  HEAPF32[i12 + (i3 << 2) >> 2] = d2 * d23 + 0.0 + d19 + d18 + d21;
  d23 = d23 * 0.0 + 0.0;
  HEAPF32[i12 + (i9 << 2) >> 2] = d23 + d2 * d24 + d18 + d21;
  d19 = d23 + d19;
  HEAPF32[i12 + (i10 << 2) >> 2] = d19 + d2 * d22 + d21;
  HEAPF32[i12 + (i11 << 2) >> 2] = d20 + (d19 + d18);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 4);
 if ((i12 | 0) != (i4 | 0)) {
  i9 = i4;
  i10 = i12;
  i11 = i9 + 64 | 0;
  do {
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   i9 = i9 + 4 | 0;
   i10 = i10 + 4 | 0;
  } while ((i9 | 0) < (i11 | 0));
  i1 = HEAP32[i14 >> 2] | 0;
 }
 __ZN12BaseGLWidget11modelMinMaxERK4Vec3S2_(i1, i16 + 556 | 0, i16 + 568 | 0);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 32 >> 2] & 63](i16, i15);
 i3 = HEAP32[i14 >> 2] | 0;
 i1 = i3 + 108 | 0;
 i4 = i3 + 180 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == (HEAP32[i3 + 176 >> 2] | 0)) {
  i17 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i17 >> 2] = 7152;
  HEAP32[i17 + 4 >> 2] = 21369;
  ___cxa_throw(i17 | 0, 2608, 44);
 }
 i6 = i5 + -68 | 0;
 if ((i6 | 0) == (i1 | 0)) i7 = i3; else {
  i9 = i1;
  i10 = i6;
  i11 = i9 + 64 | 0;
  do {
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   i9 = i9 + 4 | 0;
   i10 = i10 + 4 | 0;
  } while ((i9 | 0) < (i11 | 0));
  i7 = HEAP32[i14 >> 2] | 0;
 }
 HEAP32[i3 + 172 >> 2] = HEAP32[i5 + -4 >> 2];
 HEAP32[i4 >> 2] = i6;
 i9 = i12;
 i10 = i7 + 108 | 0;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 HEAP32[i12 + 64 >> 2] = 0;
 i1 = i7 + 180 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i7 + 184 >> 2] | 0) >>> 0) {
  i9 = i3;
  i10 = i12;
  i11 = i9 + 64 | 0;
  do {
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   i9 = i9 + 4 | 0;
   i10 = i10 + 4 | 0;
  } while ((i9 | 0) < (i11 | 0));
  HEAP32[i3 + 64 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 68;
 } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i7 + 176 | 0, i12);
 i1 = HEAP32[i14 >> 2] | 0;
 i4 = i1 + 108 | 0;
 d2 = d8 * 4.0;
 i9 = i13;
 i10 = i4;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 i9 = i12;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 i3 = 0;
 do {
  d19 = +HEAPF32[i13 + (i3 << 2) >> 2];
  i9 = i3 + 4 | 0;
  d18 = +HEAPF32[i13 + (i9 << 2) >> 2];
  d23 = d18 * 0.0;
  i10 = i3 + 8 | 0;
  d20 = +HEAPF32[i13 + (i10 << 2) >> 2];
  d24 = d20 * 0.0;
  i11 = i3 + 12 | 0;
  d22 = +HEAPF32[i13 + (i11 << 2) >> 2];
  d21 = d22 * 0.0;
  HEAPF32[i12 + (i3 << 2) >> 2] = d2 * d19 + 0.0 + d23 + d24 + d21;
  d19 = d19 * 0.0 + 0.0;
  HEAPF32[i12 + (i9 << 2) >> 2] = d19 + d2 * d18 + d24 + d21;
  d23 = d19 + d23;
  HEAPF32[i12 + (i10 << 2) >> 2] = d23 + d2 * d20 + d21;
  HEAPF32[i12 + (i11 << 2) >> 2] = d22 + (d23 + d24);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 4);
 if ((i12 | 0) != (i4 | 0)) {
  i9 = i4;
  i10 = i12;
  i11 = i9 + 64 | 0;
  do {
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   i9 = i9 + 4 | 0;
   i10 = i10 + 4 | 0;
  } while ((i9 | 0) < (i11 | 0));
  i1 = HEAP32[i14 >> 2] | 0;
 }
 __ZN12BaseGLWidget11modelMinMaxERK4Vec3S2_(i1, i16 + 1784 | 0, i16 + 1796 | 0);
 __ZN16BuildControlBase11drawTargetsEb(i16 + 580 | 0, i15);
 i3 = HEAP32[i14 >> 2] | 0;
 i1 = i3 + 108 | 0;
 i4 = i3 + 180 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == (HEAP32[i3 + 176 >> 2] | 0)) {
  i17 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i17 >> 2] = 7152;
  HEAP32[i17 + 4 >> 2] = 21369;
  ___cxa_throw(i17 | 0, 2608, 44);
 }
 i6 = i5 + -68 | 0;
 if ((i6 | 0) == (i1 | 0)) {
  i15 = i5 + -4 | 0;
  i15 = HEAP32[i15 >> 2] | 0;
  i16 = i3 + 172 | 0;
  HEAP32[i16 >> 2] = i15;
  HEAP32[i4 >> 2] = i6;
  STACKTOP = i17;
  return;
 }
 i9 = i1;
 i10 = i6;
 i11 = i9 + 64 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 i15 = i5 + -4 | 0;
 i15 = HEAP32[i15 >> 2] | 0;
 i16 = i3 + 172 | 0;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i4 >> 2] = i6;
 STACKTOP = i17;
 return;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i37, i39, i38, i36, i1, i24, i23, i28, i29, i25, i32, i27, i31, i30, i26) {
 i37 = i37 | 0;
 i39 = i39 | 0;
 i38 = i38 | 0;
 i36 = i36 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i25 = i25 | 0;
 i32 = i32 | 0;
 i27 = i27 | 0;
 i31 = i31 | 0;
 i30 = i30 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i33 = 0, i34 = 0, i35 = 0;
 HEAP32[i38 >> 2] = i37;
 i33 = i30 + 4 | 0;
 i34 = i30 + 8 | 0;
 i35 = i30 + 1 | 0;
 i17 = i31 + 4 | 0;
 i18 = (i36 & 512 | 0) == 0;
 i19 = i31 + 8 | 0;
 i20 = i31 + 1 | 0;
 i21 = i23 + 8 | 0;
 i22 = (i26 | 0) > 0;
 i10 = i27 + 4 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 1 | 0;
 i13 = i26 + 1 | 0;
 i15 = -2 - i26 - ((i26 | 0) < 0 ? ~i26 : -1) | 0;
 i16 = (i26 | 0) > 0;
 i9 = 0;
 do {
  switch (HEAP8[i29 + i9 >> 0] | 0) {
  case 0:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 32) | 0;
    i8 = HEAP32[i38 >> 2] | 0;
    HEAP32[i38 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i7;
    break;
   }
  case 3:
   {
    i8 = HEAP8[i30 >> 0] | 0;
    i2 = (i8 & 1) == 0;
    if ((i2 ? (i8 & 255) >>> 1 : HEAP32[i33 >> 2] | 0) | 0) {
     i7 = HEAP8[(i2 ? i35 : HEAP32[i34 >> 2] | 0) >> 0] | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    break;
   }
  case 2:
   {
    i4 = HEAP8[i31 >> 0] | 0;
    i2 = (i4 & 1) == 0;
    i4 = i2 ? (i4 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
    if (!(i18 | (i4 | 0) == 0)) {
     i3 = i2 ? i20 : HEAP32[i19 >> 2] | 0;
     i5 = i3 + i4 | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     if (i4) do {
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      i3 = i3 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i3 | 0) != (i5 | 0));
     HEAP32[i38 >> 2] = i2;
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i38 >> 2] | 0;
    i1 = i28 ? i1 + 1 | 0 : i1;
    i6 = i1;
    i5 = HEAP32[i21 >> 2] | 0;
    L15 : do if (i1 >>> 0 < i24 >>> 0) {
     i3 = i1;
     do {
      i4 = HEAP8[i3 >> 0] | 0;
      if (i4 << 24 >> 24 <= -1) break L15;
      if (!(HEAP16[i5 + (i4 << 24 >> 24 << 1) >> 1] & 2048)) break L15;
      i3 = i3 + 1 | 0;
     } while (i3 >>> 0 < i24 >>> 0);
    } else i3 = i1; while (0);
    i4 = i3;
    if (i22) {
     i7 = -2 - i4 - ~(i4 >>> 0 > i6 >>> 0 ? i6 : i4) | 0;
     i7 = i15 >>> 0 > i7 >>> 0 ? i15 : i7;
     if (i3 >>> 0 > i1 >>> 0 & i16) {
      i4 = i3;
      i6 = i26;
      while (1) {
       i4 = i4 + -1 | 0;
       i8 = HEAP8[i4 >> 0] | 0;
       i5 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i5 + 1;
       HEAP8[i5 >> 0] = i8;
       i5 = (i6 | 0) > 1;
       if (!(i4 >>> 0 > i1 >>> 0 & i5)) break; else i6 = i6 + -1 | 0;
      }
     } else i5 = i16;
     i8 = i13 + i7 | 0;
     i4 = i3 + (i7 + 1) | 0;
     if (i5) i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 48) | 0; else i6 = 0;
     i3 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i3 + 1;
     if ((i8 | 0) > 0) {
      i5 = i8;
      while (1) {
       HEAP8[i3 >> 0] = i6;
       i3 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i3 + 1;
       if ((i5 | 0) > 1) i5 = i5 + -1 | 0; else break;
      }
     }
     HEAP8[i3 >> 0] = i25;
    } else i4 = i3;
    if ((i4 | 0) != (i1 | 0)) {
     i8 = HEAP8[i27 >> 0] | 0;
     i3 = (i8 & 1) == 0;
     if (!((i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) | 0)) i3 = -1; else i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) >> 0] | 0;
     if ((i4 | 0) != (i1 | 0)) {
      i5 = 0;
      i6 = 0;
      while (1) {
       if ((i6 | 0) == (i3 | 0)) {
        i8 = HEAP32[i38 >> 2] | 0;
        HEAP32[i38 >> 2] = i8 + 1;
        HEAP8[i8 >> 0] = i32;
        i5 = i5 + 1 | 0;
        i8 = HEAP8[i27 >> 0] | 0;
        i3 = (i8 & 1) == 0;
        if (i5 >>> 0 < (i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) >>> 0) {
         i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) + i5 >> 0] | 0;
         i3 = i3 << 24 >> 24 == 127 ? -1 : i3 << 24 >> 24;
         i6 = 0;
        } else {
         i3 = i6;
         i6 = 0;
        }
       }
       i4 = i4 + -1 | 0;
       i7 = HEAP8[i4 >> 0] | 0;
       i8 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i8 + 1;
       HEAP8[i8 >> 0] = i7;
       if ((i4 | 0) == (i1 | 0)) break; else i6 = i6 + 1 | 0;
      }
     }
    } else {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 48) | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    i3 = HEAP32[i38 >> 2] | 0;
    if ((i2 | 0) != (i3 | 0) ? (i14 = i3 + -1 | 0, i2 >>> 0 < i14 >>> 0) : 0) {
     i3 = i14;
     do {
      i8 = HEAP8[i2 >> 0] | 0;
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      HEAP8[i3 >> 0] = i8;
      i2 = i2 + 1 | 0;
      i3 = i3 + -1 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 4);
 i3 = HEAP8[i30 >> 0] | 0;
 i1 = (i3 & 1) == 0;
 i3 = i1 ? (i3 & 255) >>> 1 : HEAP32[i33 >> 2] | 0;
 if (i3 >>> 0 > 1) {
  i2 = i1 ? i35 : HEAP32[i34 >> 2] | 0;
  i4 = i2 + i3 | 0;
  i1 = HEAP32[i38 >> 2] | 0;
  if ((i3 | 0) != 1) {
   i2 = i2 + 1 | 0;
   do {
    HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i4 | 0));
  }
  HEAP32[i38 >> 2] = i1;
 }
 switch (i36 & 176 | 0) {
 case 32:
  {
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i39 >> 2] = i37;
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i33, i35, i34, i32, i1, i21, i20, i25, i26, i22, i29, i24, i28, i27, i23) {
 i33 = i33 | 0;
 i35 = i35 | 0;
 i34 = i34 | 0;
 i32 = i32 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i22 = i22 | 0;
 i29 = i29 | 0;
 i24 = i24 | 0;
 i28 = i28 | 0;
 i27 = i27 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i30 = 0, i31 = 0;
 HEAP32[i34 >> 2] = i33;
 i30 = i27 + 4 | 0;
 i31 = i27 + 8 | 0;
 i13 = i28 + 4 | 0;
 i14 = (i32 & 512 | 0) == 0;
 i15 = i28 + 8 | 0;
 i16 = (i23 | 0) > 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 8 | 0;
 i19 = i24 + 1 | 0;
 i11 = (i23 | 0) > 0;
 i10 = 0;
 do {
  switch (HEAP8[i26 + i10 >> 0] | 0) {
  case 0:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 32) | 0;
    i9 = HEAP32[i34 >> 2] | 0;
    HEAP32[i34 >> 2] = i9 + 4;
    HEAP32[i9 >> 2] = i8;
    break;
   }
  case 3:
   {
    i9 = HEAP8[i27 >> 0] | 0;
    i2 = (i9 & 1) == 0;
    if ((i2 ? (i9 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0) {
     i8 = HEAP32[(i2 ? i30 : HEAP32[i31 >> 2] | 0) >> 2] | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     HEAP32[i34 >> 2] = i9 + 4;
     HEAP32[i9 >> 2] = i8;
    }
    break;
   }
  case 2:
   {
    i6 = HEAP8[i28 >> 0] | 0;
    i2 = (i6 & 1) == 0;
    i6 = i2 ? (i6 & 255) >>> 1 : HEAP32[i13 >> 2] | 0;
    if (!(i14 | (i6 | 0) == 0)) {
     i2 = i2 ? i13 : HEAP32[i15 >> 2] | 0;
     i4 = i2 + (i6 << 2) | 0;
     i5 = HEAP32[i34 >> 2] | 0;
     if (i6) {
      i3 = i5;
      while (1) {
       HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
       i2 = i2 + 4 | 0;
       if ((i2 | 0) == (i4 | 0)) break; else i3 = i3 + 4 | 0;
      }
     }
     HEAP32[i34 >> 2] = i5 + (i6 << 2);
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i34 >> 2] | 0;
    i1 = i25 ? i1 + 4 | 0 : i1;
    L15 : do if (i1 >>> 0 < i21 >>> 0) {
     i3 = i1;
     do {
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 63](i20, 2048, HEAP32[i3 >> 2] | 0) | 0)) break L15;
      i3 = i3 + 4 | 0;
     } while (i3 >>> 0 < i21 >>> 0);
    } else i3 = i1; while (0);
    if (i16) {
     if (i3 >>> 0 > i1 >>> 0 & i11) {
      i6 = HEAP32[i34 >> 2] | 0;
      i5 = i23;
      while (1) {
       i3 = i3 + -4 | 0;
       i4 = i6 + 4 | 0;
       HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
       i7 = i5 + -1 | 0;
       i5 = (i5 | 0) > 1;
       if (i3 >>> 0 > i1 >>> 0 & i5) {
        i6 = i4;
        i5 = i7;
       } else {
        i6 = i7;
        break;
       }
      }
      HEAP32[i34 >> 2] = i4;
      i4 = i6;
     } else {
      i5 = i11;
      i4 = i23;
     }
     if (i5) i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 48) | 0; else i7 = 0;
     i8 = HEAP32[i34 >> 2] | 0;
     i5 = i4 + ((i4 | 0) < 0 ? ~i4 : -1) | 0;
     if ((i4 | 0) > 0) {
      i6 = i8;
      while (1) {
       HEAP32[i6 >> 2] = i7;
       if ((i4 | 0) > 1) {
        i6 = i6 + 4 | 0;
        i4 = i4 + -1 | 0;
       } else break;
      }
     }
     HEAP32[i34 >> 2] = i8 + (i5 + 2 << 2);
     HEAP32[i8 + (i5 + 1 << 2) >> 2] = i22;
    }
    if ((i3 | 0) == (i1 | 0)) {
     i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 48) | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     i3 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i3;
     HEAP32[i9 >> 2] = i8;
    } else {
     i8 = HEAP8[i24 >> 0] | 0;
     i4 = (i8 & 1) == 0;
     i9 = HEAP32[i17 >> 2] | 0;
     if (!((i4 ? (i8 & 255) >>> 1 : i9) | 0)) i4 = -1; else i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) >> 0] | 0;
     if ((i3 | 0) != (i1 | 0)) {
      i7 = 0;
      i8 = 0;
      while (1) {
       i5 = HEAP32[i34 >> 2] | 0;
       if ((i8 | 0) == (i4 | 0)) {
        i6 = i5 + 4 | 0;
        HEAP32[i34 >> 2] = i6;
        HEAP32[i5 >> 2] = i29;
        i7 = i7 + 1 | 0;
        i5 = HEAP8[i24 >> 0] | 0;
        i4 = (i5 & 1) == 0;
        if (i7 >>> 0 < (i4 ? (i5 & 255) >>> 1 : i9) >>> 0) {
         i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) + i7 >> 0] | 0;
         i5 = i6;
         i4 = i4 << 24 >> 24 == 127 ? -1 : i4 << 24 >> 24;
         i6 = 0;
        } else {
         i5 = i6;
         i4 = i8;
         i6 = 0;
        }
       } else i6 = i8;
       i3 = i3 + -4 | 0;
       i8 = HEAP32[i3 >> 2] | 0;
       HEAP32[i34 >> 2] = i5 + 4;
       HEAP32[i5 >> 2] = i8;
       if ((i3 | 0) == (i1 | 0)) break; else i8 = i6 + 1 | 0;
      }
     }
     i3 = HEAP32[i34 >> 2] | 0;
    }
    if ((i2 | 0) != (i3 | 0) ? (i12 = i3 + -4 | 0, i2 >>> 0 < i12 >>> 0) : 0) {
     i3 = i12;
     do {
      i9 = HEAP32[i2 >> 2] | 0;
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i3 >> 2] = i9;
      i2 = i2 + 4 | 0;
      i3 = i3 + -4 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != 4);
 i2 = HEAP8[i27 >> 0] | 0;
 i1 = (i2 & 1) == 0;
 i2 = i1 ? (i2 & 255) >>> 1 : HEAP32[i30 >> 2] | 0;
 if (i2 >>> 0 > 1) {
  i3 = i1 ? i30 : HEAP32[i31 >> 2] | 0;
  i1 = i3 + 4 | 0;
  i3 = i3 + (i2 << 2) | 0;
  i4 = HEAP32[i34 >> 2] | 0;
  i5 = i3 - i1 | 0;
  if ((i2 | 0) != 1) {
   i2 = i4;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i3 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i34 >> 2] = i4 + (i5 >>> 2 << 2);
 }
 switch (i32 & 176 | 0) {
 case 32:
  {
   HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i35 >> 2] = i33;
 }
 return;
}

function __ZN9Solutions8readFromEP6MyFilePK5Shape(i20, i12, i17) {
 i20 = i20 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i16 = i22 + 40 | 0;
 i15 = i22 + 32 | 0;
 i21 = i22 + 24 | 0;
 i8 = i22 + 16 | 0;
 i7 = i22 + 8 | 0;
 i6 = i22;
 i13 = i22 + 72 | 0;
 i19 = i22 + 48 | 0;
 i14 = i22 + 52 | 0;
 i10 = i12 + 12 | 0;
 if ((HEAP32[i10 >> 2] | 0) != 1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i4 = i20 + 8 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i11 = i20 + 12 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do {
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3) {
    __ZN7SlvCubeD2Ev(i3);
    __ZdlPv(i3);
    i2 = HEAP32[i11 >> 2] | 0;
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i2 | 0));
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i11 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 }
 HEAP32[i20 >> 2] = -1;
 i9 = i20 + 20 | 0;
 if ((HEAP8[i9 >> 0] | 0) != 0 ? (HEAP8[i9 >> 0] = 0, i5 = HEAP32[i20 + 4 >> 2] | 0, (i5 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i5 >> 2] >> 2] & 63](i5, 0);
 if (!(__ZN6MyFile10seekHeaderEPKc(i12, 21775) | 0)) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) != 1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 HEAP32[i6 >> 2] = 58;
 HEAP32[i6 + 4 >> 2] = 21785;
 _sprintf(i13, 21616, i6) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i12, i13, 21626) | 0) == -1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i12, 21628, 21630) | 0) == -1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 HEAP32[i7 >> 2] = i20;
 if ((__ZN6MyFile8readNumsEiz(i12, 1, i7) | 0) < 1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) != 1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 HEAP32[i8 >> 2] = 58;
 HEAP32[i8 + 4 >> 2] = 21797;
 _sprintf(i13, 21616, i8) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i12, i13, 21626) | 0) == -1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i12, 21628, 21630) | 0) == -1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 HEAP32[i21 >> 2] = i19;
 if ((__ZN6MyFile8readNumsEiz(i12, 1, i21) | 0) < 1) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 L46 : do if ((HEAP32[i19 >> 2] | 0) > 0) {
  i5 = i20 + 16 | 0;
  i6 = i20 + 8 | 0;
  i7 = i20 + 4 | 0;
  i1 = 0;
  while (1) {
   HEAP32[i15 >> 2] = i1;
   _sprintf(i14, 21803, i15) | 0;
   if ((HEAP32[i10 >> 2] | 0) != 1) {
    i1 = 0;
    i4 = 42;
    break;
   }
   if ((_strlen(i14) | 0) >>> 0 > 255) {
    i1 = 0;
    i4 = 42;
    break;
   }
   HEAP32[i16 >> 2] = 58;
   HEAP32[i16 + 4 >> 2] = i14;
   _sprintf(i13, 21616, i16) | 0;
   if ((__ZN6MyFile10seekStringEPKcS1_(i12, i13, 21626) | 0) == -1) {
    i4 = 27;
    break;
   }
   if ((__ZN6MyFile10seekStringEPKcS1_(i12, 21628, 21630) | 0) == -1) {
    i1 = 0;
    i4 = 42;
    break;
   }
   i8 = __Znwj(84) | 0;
   i2 = i8 + 80 | 0;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = 0;
   HEAP32[i8 + 16 >> 2] = 0;
   HEAP32[i8 + 20 >> 2] = 0;
   i3 = i8 + 28 | 0;
   i4 = i3 + 52 | 0;
   do {
    HEAP32[i3 >> 2] = 0;
    i3 = i3 + 4 | 0;
   } while ((i3 | 0) < (i4 | 0));
   HEAP32[i2 >> 2] = i17;
   if (!(__ZN7SlvCube8readFromEP6MyFilei(i8, i12, HEAP32[i20 >> 2] | 0) | 0)) {
    i3 = i8;
    i2 = i8;
    i4 = 30;
    break;
   }
   HEAP32[i21 >> 2] = i8;
   i2 = HEAP32[i11 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i5 >> 2] | 0)) __ZNSt3__16vectorIP7SlvCubeNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i6, i21); else {
    HEAP32[i2 >> 2] = i8;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
   }
   do if (!(HEAP8[i9 >> 0] | 0)) {
    HEAP8[i9 >> 0] = 1;
    i2 = HEAP32[i7 >> 2] | 0;
    if (!i2) break;
    FUNCTION_TABLE_vii[HEAP32[HEAP32[i2 >> 2] >> 2] & 63](i2, 1);
   } while (0);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (HEAP32[i19 >> 2] | 0)) break L46;
  }
  if ((i4 | 0) == 27) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  } else if ((i4 | 0) == 30) {
   __ZN7SlvCubeD2Ev(i2);
   __ZdlPv(i3);
   __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21808, 17) | 0, i1) | 0, 21826, 7) | 0;
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  } else if ((i4 | 0) == 42) {
   STACKTOP = i22;
   return i1 | 0;
  }
 } while (0);
 if ((HEAP8[i9 >> 0] | 0) != 0 ? (HEAP8[i9 >> 0] = 0, i18 = HEAP32[i20 + 4 >> 2] | 0, (i18 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i18 >> 2] >> 2] & 63](i18, 0);
 i20 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21834, 5) | 0;
 i20 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i20, HEAP32[i19 >> 2] | 0) | 0, 21840, 10) | 0;
 HEAP32[i21 >> 2] = __ZNKSt3__18ios_base6getlocEv(i20 + (HEAP32[(HEAP32[i20 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i19 = __ZNKSt3__16locale9use_facetERNS0_2idE(i21, 16144) | 0;
 i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i19 >> 2] | 0) + 28 >> 2] & 63](i19, 10) | 0;
 __ZNSt3__16localeD2Ev(i21);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i20, i19) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i20) | 0;
 i21 = 1;
 STACKTOP = i22;
 return i21 | 0;
}

function __ZN7SlvCube8readFromEP6MyFilei(i17, i23, i10) {
 i17 = i17 | 0;
 i23 = i23 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i24 = i25 + 88 | 0;
 i21 = i25 + 80 | 0;
 i20 = i25 + 72 | 0;
 i15 = i25 + 64 | 0;
 i14 = i25 + 56 | 0;
 i13 = i25 + 48 | 0;
 i12 = i25 + 40 | 0;
 i11 = i25 + 32 | 0;
 i16 = i25 + 24 | 0;
 i8 = i25 + 16 | 0;
 i7 = i25 + 8 | 0;
 i6 = i25;
 i19 = i25 + 100 | 0;
 i9 = i25 + 96 | 0;
 i22 = i25 + 92 | 0;
 i1 = i17 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i17 >> 2] | 0;
 i5 = (i2 - i4 | 0) / 20 | 0;
 if (i5 >>> 0 >= i10 >>> 0) {
  if (i5 >>> 0 > i10 >>> 0 ? (i3 = i4 + (i10 * 20 | 0) | 0, (i2 | 0) != (i3 | 0)) : 0) HEAP32[i1 >> 2] = i2 + (~(((i2 + -20 - i3 | 0) >>> 0) / 20 | 0) * 20 | 0);
 } else __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE8__appendEj(i17, i10 - i5 | 0);
 i18 = i23 + 12 | 0;
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i6 >> 2] = 59;
 HEAP32[i6 + 4 >> 2] = 22842;
 _sprintf(i19, 21616, i6) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i1 = (i10 | 0) > 0;
 L17 : do if (i1) {
  i2 = 0;
  while (1) {
   HEAP32[i7 >> 2] = (HEAP32[i17 >> 2] | 0) + (i2 * 20 | 0);
   i2 = i2 + 1 | 0;
   if ((__ZN6MyFile8readNumsEiz(i23, 1, i7) | 0) < 1) {
    i1 = 0;
    break;
   }
   if ((i2 | 0) >= (i10 | 0)) break L17;
  }
  STACKTOP = i25;
  return i1 | 0;
 } while (0);
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i8 >> 2] = 59;
 HEAP32[i8 + 4 >> 2] = 22845;
 _sprintf(i19, 21616, i8) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 L33 : do if (i1) {
  i1 = 0;
  while (1) {
   HEAP32[i16 >> 2] = (HEAP32[i17 >> 2] | 0) + (i1 * 20 | 0) + 4;
   i1 = i1 + 1 | 0;
   if ((__ZN6MyFile8readNumsEiz(i23, 1, i16) | 0) < 1) {
    i1 = 0;
    break;
   }
   if ((i1 | 0) >= (i10 | 0)) break L33;
  }
  STACKTOP = i25;
  return i1 | 0;
 } while (0);
 HEAP32[i9 >> 2] = 0;
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i11 >> 2] = 59;
 HEAP32[i11 + 4 >> 2] = 22848;
 _sprintf(i19, 21616, i11) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) != -1) if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) != -1 ? (HEAP32[i12 >> 2] = i9, (__ZN6MyFile8readNumsEiz(i23, 1, i12) | 0) < 1) : 0) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i13 >> 2] = 59;
 HEAP32[i13 + 4 >> 2] = 22853;
 _sprintf(i19, 21616, i13) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i22 >> 2] = -1;
 HEAP32[i14 >> 2] = i22;
 if ((__ZN6MyFile8readNumsEiz(i23, 1, i14) | 0) < 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i15 >> 2] = 59;
 HEAP32[i15 + 4 >> 2] = 22860;
 _sprintf(i19, 21616, i15) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i6 = i17 + 12 | 0;
 i1 = HEAP32[i22 >> 2] | 0;
 i4 = i17 + 16 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i3 = i5 - i2 >> 3;
 do if (i1 >>> 0 > i3 >>> 0) {
  __ZNSt3__16vectorIN7SlvCube6SlvPicENS_9allocatorIS2_EEE8__appendEj(i6, i1 - i3 | 0);
  i1 = HEAP32[i22 >> 2] | 0;
 } else {
  if (i1 >>> 0 >= i3 >>> 0) break;
  i2 = i2 + (i1 << 3) | 0;
  if ((i5 | 0) == (i2 | 0)) break;
  HEAP32[i4 >> 2] = i5 + (~((i5 + -8 - i2 | 0) >>> 3) << 3);
 } while (0);
 L77 : do if ((i1 | 0) > 0) {
  i1 = 0;
  while (1) {
   HEAP32[i20 >> 2] = (HEAP32[i6 >> 2] | 0) + (i1 << 3);
   i1 = i1 + 1 | 0;
   if ((__ZN6MyFile8readNumsEiz(i23, 1, i20) | 0) < 1) {
    i1 = 0;
    break;
   }
   if ((i1 | 0) >= (HEAP32[i22 >> 2] | 0)) break L77;
  }
  STACKTOP = i25;
  return i1 | 0;
 } while (0);
 if ((HEAP32[i18 >> 2] | 0) != 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[i21 >> 2] = 59;
 HEAP32[i21 + 4 >> 2] = 22864;
 _sprintf(i19, 21616, i21) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, i19, 21626) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((__ZN6MyFile10seekStringEPKcS1_(i23, 21628, 21630) | 0) == -1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((HEAP32[i22 >> 2] | 0) > 0) i1 = 0; else {
  i24 = 1;
  STACKTOP = i25;
  return i24 | 0;
 }
 while (1) {
  HEAP32[i24 >> 2] = (HEAP32[i6 >> 2] | 0) + (i1 << 3) + 4;
  i1 = i1 + 1 | 0;
  if ((__ZN6MyFile8readNumsEiz(i23, 1, i24) | 0) < 1) {
   i1 = 0;
   i2 = 49;
   break;
  }
  if ((i1 | 0) >= (HEAP32[i22 >> 2] | 0)) {
   i1 = 1;
   i2 = 49;
   break;
  }
 }
 if ((i2 | 0) == 49) {
  STACKTOP = i25;
  return i1 | 0;
 }
 return 0;
}

function __ZN4Cube6puttgrEP9SolutionsP12SolveContextP7SlvCubei(i30, i1, i34, i29, i28) {
 i30 = i30 | 0;
 i1 = i1 | 0;
 i34 = i34 | 0;
 i29 = i29 | 0;
 i28 = i28 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0;
 i36 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i36;
 i32 = i34 + 68 | 0;
 i33 = i30 + 60 | 0;
 i21 = i34 + 24 | 0;
 i22 = i34 + 52 | 0;
 i23 = i30 + 36 | 0;
 i24 = i34 + 32 | 0;
 i25 = i34 + 44 | 0;
 i27 = i30 + 2 | 0;
 i17 = i1 + 12 | 0;
 i18 = i1 + 16 | 0;
 i19 = i1 + 8 | 0;
 i20 = i1 + 20 | 0;
 i5 = i1 + 4 | 0;
 i31 = i34 + 60 | 0;
 i6 = i30 + 12 | 0;
 i7 = i30 + 20 | 0;
 i8 = i30 + 24 | 0;
 i9 = i34 + 56 | 0;
 i10 = i30 + 16 | 0;
 i11 = i30 + 1 | 0;
 i12 = i34 + 72 | 0;
 i13 = i30 + 4 | 0;
 i14 = i34 + 40 | 0;
 i15 = i34 + 64 | 0;
 i3 = 0;
 i1 = HEAP32[i32 >> 2] | 0;
 while (1) {
  i2 = (i1 | 0) == 0;
  if (i2 ? (i4 = HEAP32[i33 >> 2] | 0, (HEAP32[i4 + 8 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0)) : 0) break;
  if (HEAP32[i21 >> 2] | 0) {
   i35 = 36;
   break;
  }
  if (!((i3 | 0) != (i28 | 0) & (HEAP8[i22 >> 0] | 0) == 0)) {
   i35 = 36;
   break;
  }
  if ((i1 | 0) != (HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] | 0) ? __ZN4Cube12maskAssembleEi(i30, i1) | 0 : 0) i1 = i1 + 1 | 0; else i1 = i1 + -1 | 0;
  i4 = i3 + 1 | 0;
  i2 = i24;
  i2 = _i64Add(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, 1, 0) | 0;
  i3 = i24;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i3 + 4 >> 2] = tempRet0;
  if ((i1 | 0) > (HEAP32[i25 >> 2] | 0)) HEAP32[i25 >> 2] = i1;
  if ((HEAP8[i27 >> 0] | 0) != 0 ? (i1 | 0) >= ((HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) : 0) HEAP8[i14 >> 0] = 1;
  if ((i1 | 0) == (HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] | 0)) {
   i2 = __ZN4Cube19generateConcreteSlvEP7SlvCube(i30, i29) | 0;
   HEAP32[i16 >> 2] = i2;
   i3 = HEAP32[i17 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i18 >> 2] | 0)) __ZNSt3__16vectorIP7SlvCubeNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i19, i16); else {
    HEAP32[i3 >> 2] = i2;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 4;
   }
   if ((HEAP8[i20 >> 0] | 0) == 0 ? (HEAP8[i20 >> 0] = 1, i26 = HEAP32[i5 >> 2] | 0, (i26 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i26 >> 2] >> 2] & 63](i26, 1);
   i3 = HEAP32[i31 >> 2] | 0;
   HEAP32[i31 >> 2] = i3 + 1;
   FUNCTION_TABLE_vii[HEAP32[HEAP32[i34 >> 2] >> 2] & 63](i34, (i3 | 0) == 0);
   switch (HEAP32[i6 >> 2] | 0) {
   case 2:
    {
     i3 = (HEAP32[i9 >> 2] | 0) + 1 | 0;
     HEAP32[i9 >> 2] = i3;
     if ((i3 | 0) >= (HEAP32[i10 >> 2] | 0)) i35 = 24;
     break;
    }
   case 0:
    {
     i35 = 24;
     break;
    }
   default:
    {}
   }
   if ((i35 | 0) == 24) {
    i35 = 0;
    __ZN4Cube5clearEi(i30, 0);
    HEAP32[i9 >> 2] = 0;
    i1 = 0;
   }
   i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22877, 5) | 0;
   i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEb(i3, (HEAP8[i7 >> 0] | 0) != 0) | 0, 22883, 1) | 0;
   i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i3, HEAP32[i31 >> 2] | 0) | 0, 22885, 1) | 0;
   i3 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i3, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
   i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i16, 16144) | 0;
   i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
   __ZNSt3__16localeD2Ev(i16);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i2) | 0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
   if ((HEAP8[i7 >> 0] | 0) != 0 ? (HEAP32[i31 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0) : 0) HEAP8[i22 >> 0] = 1;
  }
  if (!(HEAP8[i30 >> 0] | 0)) {
   i3 = i4;
   continue;
  }
  if (!(HEAP8[i11 >> 0] | 0)) {
   i3 = i4;
   continue;
  }
  i3 = i24;
  i3 = ___remdi3(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, 2e5, 0) | 0;
  if (!((i3 | 0) == 0 & (tempRet0 | 0) == 0)) {
   i3 = i4;
   continue;
  }
  i2 = __ZNSt3__16chrono12steady_clock3nowEv() | 0;
  i3 = tempRet0;
  i37 = i12;
  i37 = _i64Subtract(i2 | 0, i3 | 0, HEAP32[i37 >> 2] | 0, HEAP32[i37 + 4 >> 2] | 0) | 0;
  i37 = ___divdi3(i37 | 0, tempRet0 | 0, 1e6, 0) | 0;
  if ((i37 | 0) < (HEAP32[i13 >> 2] | 0)) {
   i3 = i4;
   continue;
  }
  if (!((HEAP8[i27 >> 0] | 0) != 0 ? (HEAP8[i14 >> 0] | 0) != 0 : 0)) {
   __ZN4Cube5clearEi(i30, 0);
   HEAP32[i9 >> 2] = 0;
   i1 = 0;
  }
  HEAP8[i14 >> 0] = 0;
  i37 = i12;
  HEAP32[i37 >> 2] = i2;
  HEAP32[i37 + 4 >> 2] = i3;
  i3 = i4;
 }
 if ((i35 | 0) == 36) {
  if (!i2) {
   i37 = i1;
   HEAP32[i32 >> 2] = i37;
   STACKTOP = i36;
   return;
  }
  i37 = HEAP32[i33 >> 2] | 0;
  if ((HEAP32[i37 + 8 >> 2] | 0) != (HEAP32[i37 + 16 >> 2] | 0)) {
   i37 = 0;
   HEAP32[i32 >> 2] = i37;
   STACKTOP = i36;
   return;
  }
 }
 if (HEAP32[i31 >> 2] | 0) {
  i37 = 0;
  HEAP32[i32 >> 2] = i37;
  STACKTOP = i36;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i34 >> 2] | 0) + 4 >> 2] & 255](i34);
 i37 = 0;
 HEAP32[i32 >> 2] = i37;
 STACKTOP = i36;
 return;
}

function __ZN9PicBucket14distinctMeshesEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 960 | 0;
 i19 = i23 + 52 | 0;
 i22 = i23 + 8 | 0;
 i21 = i23;
 i4 = i22;
 i5 = i4 + 40 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 HEAP8[i22 + 40 >> 0] = 0;
 i3 = i6 + 20 | 0;
 i20 = i6 + 16 | 0;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i20 >> 2] | 0)) {
  i17 = i22;
  i18 = i22 + 4 | 0;
  i1 = 0;
  i2 = 0;
 } else {
  i1 = 0;
  do {
   __ZN7PicsSet3addEib(i22, i1, 0);
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (((HEAP32[i3 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) | 0) / 1328 | 0) >>> 0);
  i1 = i22 + 4 | 0;
  i17 = i22;
  i18 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i22 >> 2] | 0;
 }
 i15 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(13460, (i1 - i2 | 0) / 900 | 0) | 0, 22513, 24) | 0;
 i15 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i15, ((HEAP32[i3 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) | 0) / 1328 | 0) | 0, 22538, 8) | 0;
 HEAP32[i19 >> 2] = __ZNKSt3__18ios_base6getlocEv(i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i3 = __ZNKSt3__16locale9use_facetERNS0_2idE(i19, 16144) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, 10) | 0;
 __ZNSt3__16localeD2Ev(i19);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i15, i3) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i15) | 0;
 i15 = i6 + 64 | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i16 = i6 + 68 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = i1 + -8 | 0;
  HEAP32[i16 >> 2] = i2;
  i1 = HEAP32[i1 + -4 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
   i1 = HEAP32[i16 >> 2] | 0;
  }
 } while ((i1 | 0) != (i3 | 0));
 i1 = HEAP32[i17 >> 2] | 0;
 if ((HEAP32[i18 >> 2] | 0) == (i1 | 0)) {
  __ZN7PicsSetD2Ev(i22);
  STACKTOP = i23;
  return;
 }
 i11 = i19 + 888 | 0;
 i12 = i21 + 4 | 0;
 i13 = i19 + 4 | 0;
 i14 = i19 + 892 | 0;
 i9 = i6 + 72 | 0;
 i10 = i19 + 888 | 0;
 i8 = 0;
 do {
  _memcpy(i19 | 0, i1 + (i8 * 900 | 0) | 0, 885) | 0;
  __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEEC2ERKS5_(i11, i1 + (i8 * 900 | 0) + 888 | 0);
  i3 = __Znwj(300) | 0;
  i1 = i3 + 104 | 0;
  i2 = i3 + 124 | 0;
  i4 = i3;
  i5 = i4 + 100 | 0;
  do {
   HEAP32[i4 >> 2] = 0;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i5 | 0));
  HEAP16[i3 + 100 >> 1] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i2 >> 2] = 34962;
  HEAP32[i3 + 128 >> 2] = 0;
  HEAP32[i3 + 132 >> 2] = 0;
  HEAP32[i3 + 136 >> 2] = 34962;
  HEAP32[i3 + 140 >> 2] = 0;
  HEAP32[i3 + 144 >> 2] = 0;
  HEAP32[i3 + 148 >> 2] = 34962;
  HEAP32[i3 + 152 >> 2] = 0;
  HEAP32[i3 + 156 >> 2] = 0;
  HEAP32[i3 + 160 >> 2] = 34962;
  HEAP32[i3 + 164 >> 2] = 0;
  HEAP32[i3 + 168 >> 2] = 0;
  HEAP32[i3 + 172 >> 2] = 34962;
  HEAP32[i3 + 176 >> 2] = 0;
  HEAP32[i3 + 180 >> 2] = 0;
  HEAP32[i3 + 184 >> 2] = 34963;
  HEAP32[i3 + 188 >> 2] = 0;
  HEAP8[i3 + 292 >> 0] = 0;
  HEAP32[i3 + 296 >> 2] = -1;
  i4 = i3 + 192 | 0;
  i5 = i4 + 100 | 0;
  do {
   HEAP32[i4 >> 2] = 0;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i5 | 0));
  HEAP32[i21 >> 2] = i3;
  i6 = i3;
  i7 = __Znwj(16) | 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 >> 2] = 7440;
  HEAP32[i7 + 12 >> 2] = i6;
  HEAP32[i12 >> 2] = i7;
  i4 = i3 + 192 | 0;
  i1 = i13;
  i5 = i4 + 108 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i4 = i4 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i4 | 0) < (i5 | 0));
  i1 = HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) != (i1 | 0)) {
   i3 = i7;
   i2 = 0;
   do {
    i5 = HEAP32[i1 + (i2 << 3) >> 2] | 0;
    i4 = HEAP32[i20 >> 2] | 0;
    HEAP32[i4 + (i5 * 1328 | 0) + 1012 >> 2] = HEAP32[i1 + (i2 << 3) + 4 >> 2];
    __ZNSt3__119__shared_weak_count12__add_sharedEv(i7);
    HEAP32[i4 + (i5 * 1328 | 0) + 1004 >> 2] = i6;
    i5 = i4 + (i5 * 1328 | 0) + 1008 | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = i3;
    if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   } while (i2 >>> 0 < (HEAP32[i14 >> 2] | 0) - i1 >> 3 >>> 0);
  }
  i1 = HEAP32[i16 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 >> 2] | 0)) __ZNSt3__16vectorINS_10shared_ptrI7PicDispEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i15, i21); else {
   HEAP32[i1 >> 2] = i6;
   HEAP32[i1 + 4 >> 2] = i7;
   __ZNSt3__119__shared_weak_count12__add_sharedEv(i7);
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv(i7);
  i1 = HEAP32[i10 >> 2] | 0;
  i2 = i1;
  if (i1) {
   i3 = HEAP32[i14 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) HEAP32[i14 >> 2] = i3 + (~((i3 + -8 - i2 | 0) >>> 3) << 3);
   __ZdlPv(i1);
  }
  i8 = i8 + 1 | 0;
  i1 = HEAP32[i17 >> 2] | 0;
 } while (i8 >>> 0 < (((HEAP32[i18 >> 2] | 0) - i1 | 0) / 900 | 0) >>> 0);
 __ZN7PicsSetD2Ev(i22);
 STACKTOP = i23;
 return;
}

function __ZN12BaseGLWidget8doChoiseEii(i17, i6, i9) {
 i17 = i17 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i14 = i18 + 64 | 0;
 i10 = i18;
 i1 = HEAP32[i17 + 248 >> 2] | 0;
 i8 = HEAP32[i17 + 252 >> 2] | 0;
 i15 = i17 + 28 | 0;
 i11 = i14;
 i12 = i15;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
  i11 = i11 + 4 | 0;
  i12 = i12 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 HEAP32[i14 + 64 >> 2] = 0;
 i16 = i17 + 100 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i17 + 104 >> 2] | 0) >>> 0) {
  i11 = i2;
  i12 = i14;
  i13 = i11 + 64 | 0;
  do {
   HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
   i11 = i11 + 4 | 0;
   i12 = i12 + 4 | 0;
  } while ((i11 | 0) < (i13 | 0));
  HEAP32[i2 + 64 >> 2] = 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 68;
 } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17 + 96 | 0, i14);
 i11 = i15;
 i13 = i11 + 60 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 HEAPF32[i15 >> 2] = 1.0;
 HEAPF32[i17 + 48 >> 2] = 1.0;
 HEAPF32[i17 + 68 >> 2] = 1.0;
 HEAPF32[i17 + 88 >> 2] = 1.0;
 d4 = +(i1 | 0);
 d7 = d4 - +(i6 | 0) * 2.0;
 d3 = +(i8 | 0);
 d5 = d3 - +(i8 - i9 | 0) * 2.0;
 i11 = i10;
 i12 = i15;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
  i11 = i11 + 4 | 0;
  i12 = i12 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 i11 = i14;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 i1 = 0;
 do {
  d21 = +HEAPF32[i10 + (i1 << 2) >> 2];
  i11 = i1 + 4 | 0;
  d20 = +HEAPF32[i10 + (i11 << 2) >> 2];
  d24 = d20 * 0.0;
  i12 = i1 + 8 | 0;
  d26 = +HEAPF32[i10 + (i12 << 2) >> 2];
  d19 = d26 * 0.0;
  i13 = i1 + 12 | 0;
  d22 = +HEAPF32[i10 + (i13 << 2) >> 2];
  d23 = d22 * 0.0;
  HEAPF32[i14 + (i1 << 2) >> 2] = d21 + 0.0 + d24 + d19 + d23;
  d25 = d21 * 0.0 + 0.0;
  HEAPF32[i14 + (i11 << 2) >> 2] = d20 + d25 + d19 + d23;
  HEAPF32[i14 + (i12 << 2) >> 2] = d26 + (d25 + d24) + d23;
  HEAPF32[i14 + (i13 << 2) >> 2] = d22 + (d7 * d21 + 0.0 + d5 * d20 + d19);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i14 | 0) != (i15 | 0)) {
  i11 = i15;
  i12 = i14;
  i13 = i11 + 64 | 0;
  do {
   HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
   i11 = i11 + 4 | 0;
   i12 = i12 + 4 | 0;
  } while ((i11 | 0) < (i13 | 0));
 }
 i11 = i10;
 i12 = i15;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
  i11 = i11 + 4 | 0;
  i12 = i12 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 i11 = i14;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 i1 = 0;
 do {
  d21 = +HEAPF32[i10 + (i1 << 2) >> 2];
  i11 = i1 + 4 | 0;
  d20 = +HEAPF32[i10 + (i11 << 2) >> 2];
  d25 = d20 * 0.0;
  i12 = i1 + 8 | 0;
  d22 = +HEAPF32[i10 + (i12 << 2) >> 2];
  d26 = d22 * 0.0;
  i13 = i1 + 12 | 0;
  d24 = +HEAPF32[i10 + (i13 << 2) >> 2];
  d23 = d24 * 0.0;
  HEAPF32[i14 + (i1 << 2) >> 2] = d4 * d21 + 0.0 + d25 + d26 + d23;
  d21 = d21 * 0.0 + 0.0;
  HEAPF32[i14 + (i11 << 2) >> 2] = d21 + d3 * d20 + d26 + d23;
  d25 = d21 + d25;
  HEAPF32[i14 + (i12 << 2) >> 2] = d22 + d25 + d23;
  HEAPF32[i14 + (i13 << 2) >> 2] = d24 + (d25 + d26);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i14 | 0) != (i15 | 0)) {
  i11 = i15;
  i12 = i14;
  i13 = i11 + 64 | 0;
  do {
   HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
   i11 = i11 + 4 | 0;
   i12 = i12 + 4 | 0;
  } while ((i11 | 0) < (i13 | 0));
 }
 __ZN12BaseGLWidget10reCalcProjEb(i17, 0);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClear(16640);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] & 63](i17, 21392);
 i1 = HEAP32[i17 + 236 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1, 1);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] & 63](i17, 21396);
 i1 = HEAP32[i16 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i17 + 96 >> 2] | 0)) {
  i18 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i18 >> 2] = 7152;
  HEAP32[i18 + 4 >> 2] = 21369;
  ___cxa_throw(i18 | 0, 2608, 44);
 }
 i2 = i1 + -68 | 0;
 if ((i2 | 0) == (i15 | 0)) {
  i13 = i1 + -4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  i11 = i17 + 92 | 0;
  HEAP32[i11 >> 2] = i13;
  HEAP32[i16 >> 2] = i2;
  i11 = i14;
  i13 = i11 + 40 | 0;
  do {
   HEAP32[i11 >> 2] = 0;
   i11 = i11 + 4 | 0;
  } while ((i11 | 0) < (i13 | 0));
  _glReadPixels(0, 0, 1, 1, 6408, 5121, i14 | 0);
  i17 = HEAP32[i14 >> 2] | 0;
  i17 = i17 & 16777215;
  i16 = (i17 | 0) == 0;
  i17 = i16 ? -1 : i17;
  STACKTOP = i18;
  return i17 | 0;
 }
 i11 = i15;
 i12 = i2;
 i13 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
  i11 = i11 + 4 | 0;
  i12 = i12 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 i13 = i1 + -4 | 0;
 i13 = HEAP32[i13 >> 2] | 0;
 i11 = i17 + 92 | 0;
 HEAP32[i11 >> 2] = i13;
 HEAP32[i16 >> 2] = i2;
 i11 = i14;
 i13 = i11 + 40 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i13 | 0));
 _glReadPixels(0, 0, 1, 1, 6408, 5121, i14 | 0);
 i17 = HEAP32[i14 >> 2] | 0;
 i17 = i17 & 16777215;
 i16 = (i17 | 0) == 0;
 i17 = i16 ? -1 : i17;
 STACKTOP = i18;
 return i17 | 0;
}

function __ZN16BuildControlBaseC2EP12BaseGLWidgetP11CubeDocBase(i6, i1, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 HEAP32[i6 + 4 >> 2] = i1;
 HEAP32[i6 >> 2] = 6832;
 i5 = i6 + 8 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i6 + 12 >> 0] = 1;
 i3 = i6 + 13 | 0;
 HEAP8[i3 >> 0] = 0;
 HEAP8[i3 + 1 >> 0] = 0;
 HEAP8[i3 + 2 >> 0] = 0;
 HEAP8[i3 + 3 >> 0] = 0;
 HEAP32[i6 + 20 >> 2] = -1;
 i3 = i6 + 24 | 0;
 i7 = i6 + 40 | 0;
 i8 = i6 + 44 | 0;
 i4 = i6 + 152 | 0;
 i1 = i6 + 172 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP8[i3 + 12 >> 0] = 0;
 i3 = i7;
 i4 = i3 + 108 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i7 + 108 >> 1] = 0;
 HEAP32[i1 >> 2] = 34962;
 HEAP32[i6 + 176 >> 2] = 0;
 HEAP32[i6 + 180 >> 2] = 0;
 HEAP32[i6 + 184 >> 2] = 34962;
 HEAP32[i6 + 188 >> 2] = 0;
 HEAP32[i6 + 192 >> 2] = 0;
 HEAP32[i6 + 196 >> 2] = 34962;
 HEAP32[i6 + 200 >> 2] = 0;
 HEAP32[i6 + 204 >> 2] = 0;
 HEAP32[i6 + 208 >> 2] = 34962;
 HEAP32[i6 + 212 >> 2] = 0;
 HEAP32[i6 + 216 >> 2] = 0;
 HEAP32[i6 + 220 >> 2] = 34962;
 HEAP32[i6 + 224 >> 2] = 0;
 HEAP32[i6 + 228 >> 2] = 0;
 HEAP32[i6 + 232 >> 2] = 34963;
 i1 = i6 + 236 | 0;
 i3 = i6 + 344 | 0;
 i2 = i6 + 364 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = i1;
 i4 = i3 + 104 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i1 + 104 >> 1] = 0;
 HEAP32[i2 >> 2] = 34962;
 HEAP32[i6 + 368 >> 2] = 0;
 HEAP32[i6 + 372 >> 2] = 0;
 HEAP32[i6 + 376 >> 2] = 34962;
 HEAP32[i6 + 380 >> 2] = 0;
 HEAP32[i6 + 384 >> 2] = 0;
 HEAP32[i6 + 388 >> 2] = 34962;
 HEAP32[i6 + 392 >> 2] = 0;
 HEAP32[i6 + 396 >> 2] = 0;
 HEAP32[i6 + 400 >> 2] = 34962;
 HEAP32[i6 + 404 >> 2] = 0;
 HEAP32[i6 + 408 >> 2] = 0;
 HEAP32[i6 + 412 >> 2] = 34962;
 HEAP32[i6 + 416 >> 2] = 0;
 HEAP32[i6 + 420 >> 2] = 0;
 HEAP32[i6 + 424 >> 2] = 34963;
 i1 = i6 + 428 | 0;
 i3 = i6 + 536 | 0;
 i2 = i6 + 556 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = i1;
 i4 = i3 + 104 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i1 + 104 >> 1] = 0;
 HEAP32[i2 >> 2] = 34962;
 HEAP32[i6 + 560 >> 2] = 0;
 HEAP32[i6 + 564 >> 2] = 0;
 HEAP32[i6 + 568 >> 2] = 34962;
 HEAP32[i6 + 572 >> 2] = 0;
 HEAP32[i6 + 576 >> 2] = 0;
 HEAP32[i6 + 580 >> 2] = 34962;
 HEAP32[i6 + 584 >> 2] = 0;
 HEAP32[i6 + 588 >> 2] = 0;
 HEAP32[i6 + 592 >> 2] = 34962;
 HEAP32[i6 + 596 >> 2] = 0;
 HEAP32[i6 + 600 >> 2] = 0;
 HEAP32[i6 + 604 >> 2] = 34962;
 HEAP32[i6 + 608 >> 2] = 0;
 HEAP32[i6 + 612 >> 2] = 0;
 HEAP32[i6 + 616 >> 2] = 34963;
 i1 = i6 + 620 | 0;
 i3 = i6 + 728 | 0;
 i2 = i6 + 748 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = i1;
 i4 = i3 + 104 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i1 + 104 >> 1] = 0;
 HEAP32[i2 >> 2] = 34962;
 HEAP32[i6 + 752 >> 2] = 0;
 HEAP32[i6 + 756 >> 2] = 0;
 HEAP32[i6 + 760 >> 2] = 34962;
 HEAP32[i6 + 764 >> 2] = 0;
 HEAP32[i6 + 768 >> 2] = 0;
 HEAP32[i6 + 772 >> 2] = 34962;
 HEAP32[i6 + 776 >> 2] = 0;
 HEAP32[i6 + 780 >> 2] = 0;
 HEAP32[i6 + 784 >> 2] = 34962;
 HEAP32[i6 + 788 >> 2] = 0;
 HEAP32[i6 + 792 >> 2] = 0;
 HEAP32[i6 + 796 >> 2] = 34962;
 HEAP32[i6 + 800 >> 2] = 0;
 HEAP32[i6 + 804 >> 2] = 0;
 HEAP32[i6 + 808 >> 2] = 34963;
 i1 = i6 + 812 | 0;
 i3 = i6 + 920 | 0;
 i2 = i6 + 940 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = i1;
 i4 = i3 + 104 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i1 + 104 >> 1] = 0;
 HEAP32[i2 >> 2] = 34962;
 HEAP32[i6 + 944 >> 2] = 0;
 HEAP32[i6 + 948 >> 2] = 0;
 HEAP32[i6 + 952 >> 2] = 34962;
 HEAP32[i6 + 956 >> 2] = 0;
 HEAP32[i6 + 960 >> 2] = 0;
 HEAP32[i6 + 964 >> 2] = 34962;
 HEAP32[i6 + 968 >> 2] = 0;
 HEAP32[i6 + 972 >> 2] = 0;
 HEAP32[i6 + 976 >> 2] = 34962;
 HEAP32[i6 + 980 >> 2] = 0;
 HEAP32[i6 + 984 >> 2] = 0;
 HEAP32[i6 + 988 >> 2] = 34962;
 HEAP32[i6 + 992 >> 2] = 0;
 HEAP32[i6 + 996 >> 2] = 0;
 HEAP32[i6 + 1e3 >> 2] = 34963;
 HEAP32[i6 + 1004 >> 2] = 0;
 i1 = i6 + 1008 | 0;
 __ZN11BaseProgramC2Ev(i1);
 HEAP32[i1 >> 2] = 6944;
 __ZN11FloatAttribC2EPKcP13ShaderProgram(i6 + 1184 | 0, 22978, i1);
 i1 = i6 + 1204 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAPF32[i6 + 1228 >> 2] = 1.0;
 HEAPF32[i6 + 1232 >> 2] = 0.0;
 __ZN16BuildControlBase15reCalcBldMinMaxEv(i6);
 i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 116 >> 2] | 0;
 i2 = i1 + 1500296 | 0;
 if (!(HEAP8[i2 >> 0] | 0)) {
  i6 = __ZN5Shape8generateEPK10BuildWorld(i1 + 1500140 | 0, i1) | 0;
  HEAP32[i1 + 1500292 >> 2] = i6;
  HEAP8[i2 >> 0] = 1;
  i1 = i6;
 } else i1 = HEAP32[i1 + 1500292 >> 2] | 0;
 if ((i1 | 0) != 3) return;
 HEAPF32[i7 >> 2] = 1.0;
 HEAPF32[i8 >> 2] = -.10000000149011612;
 return;
}

function __ZN7PicType4loadERK6PicDefb(i10, i1, i7) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i11;
 __ZNK6PicArr8makeRtnsEPS_(i1 + 8 | 0, i10 + 4 | 0);
 HEAP8[i10 + 884 >> 0] = i7 & 1;
 HEAP32[i10 >> 2] = 8;
 i3 = i9;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i3 = 0;
 do {
  i4 = i3;
  i3 = i3 + 1 | 0;
  i2 = i10 + 4 + (i4 * 108 | 0) + 100 | 0;
  i5 = i3;
  do {
   i6 = 0;
   while (1) {
    i1 = i6 * 5 | 0;
    if ((HEAP32[i10 + 4 + (i5 * 108 | 0) + (i1 << 2) >> 2] | 0) != (HEAP32[i10 + 4 + (i4 * 108 | 0) + (i1 << 2) >> 2] | 0)) break;
    i12 = i1 + 1 | 0;
    if ((HEAP32[i10 + 4 + (i5 * 108 | 0) + (i12 << 2) >> 2] | 0) != (HEAP32[i10 + 4 + (i4 * 108 | 0) + (i12 << 2) >> 2] | 0)) break;
    i12 = i1 + 2 | 0;
    if ((HEAP32[i10 + 4 + (i5 * 108 | 0) + (i12 << 2) >> 2] | 0) != (HEAP32[i10 + 4 + (i4 * 108 | 0) + (i12 << 2) >> 2] | 0)) break;
    i12 = i1 + 3 | 0;
    if ((HEAP32[i10 + 4 + (i5 * 108 | 0) + (i12 << 2) >> 2] | 0) != (HEAP32[i10 + 4 + (i4 * 108 | 0) + (i12 << 2) >> 2] | 0)) break;
    i12 = i1 + 4 | 0;
    if ((HEAP32[i10 + 4 + (i5 * 108 | 0) + (i12 << 2) >> 2] | 0) != (HEAP32[i10 + 4 + (i4 * 108 | 0) + (i12 << 2) >> 2] | 0)) break;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) >= 5) {
     i8 = 7;
     break;
    }
   }
   do if ((i8 | 0) == 7) {
    i8 = 0;
    if (i7 ? (HEAP8[i2 >> 0] | 0) != (HEAP8[i10 + 4 + (i5 * 108 | 0) + 100 >> 0] | 0) : 0) break;
    HEAP8[i9 + i5 >> 0] = 1;
   } while (0);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 8);
 } while ((i3 | 0) != 7);
 i2 = 7;
 while (1) {
  if (HEAP8[i9 + i2 >> 0] | 0) {
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
   if ((i2 | 0) < 7) {
    i1 = i2;
    do {
     i12 = i1;
     i1 = i1 + 1 | 0;
     HEAP32[i10 + 4 + (i12 * 108 | 0) >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 4 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 4 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 8 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 8 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 12 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 12 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 16 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 16 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 20 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 20 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 24 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 24 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 28 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 28 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 32 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 32 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 36 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 36 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 40 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 40 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 44 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 44 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 48 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 48 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 52 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 52 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 56 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 56 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 60 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 60 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 64 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 64 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 68 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 68 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 72 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 72 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 76 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 76 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 80 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 80 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 84 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 84 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 88 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 88 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 92 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 92 >> 2];
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 96 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 96 >> 2];
     HEAP8[i10 + 4 + (i12 * 108 | 0) + 100 >> 0] = HEAP8[i10 + 4 + (i1 * 108 | 0) + 100 >> 0] | 0;
     HEAP32[i10 + 4 + (i12 * 108 | 0) + 104 >> 2] = HEAP32[i10 + 4 + (i1 * 108 | 0) + 104 >> 2];
    } while ((i1 | 0) != 7);
    i8 = 18;
   }
  } else i8 = 18;
  if ((i8 | 0) == 18 ? (i8 = 0, (i2 | 0) <= 0) : 0) {
   i5 = 0;
   break;
  }
  i2 = i2 + -1 | 0;
 }
 do {
  i3 = i10 + 868 + (i5 << 1) | 0;
  HEAP16[i3 >> 1] = 0;
  if ((i5 | 0) < (HEAP32[i10 >> 2] | 0)) {
   i1 = 0;
   i2 = 15;
   while (1) {
    i1 = (HEAP32[i10 + 4 + (i5 * 108 | 0) + (((HEAP32[7192 + (i2 << 2) >> 2] | 0) * 5 | 0) + (HEAP32[7256 + (i2 << 2) >> 2] | 0) << 2) >> 2] | 0) != 0 | i1 << 1 & 131070;
    if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break;
   }
   HEAP16[i3 >> 1] = i1;
  } else {
   i1 = i10 + 4 + (i5 * 108 | 0) | 0;
   i2 = i10 + 4 + (i5 * 108 | 0) + 104 | 0;
   i3 = i1;
   i4 = i3 + 100 | 0;
   do {
    HEAP32[i3 >> 2] = 0;
    i3 = i3 + 4 | 0;
   } while ((i3 | 0) < (i4 | 0));
   HEAP8[i1 + 100 >> 0] = 0;
   HEAP32[i2 >> 2] = -1;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 8);
 STACKTOP = i11;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i16, i17, i1, i19, i15, i18, i14) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i22;
 i4 = (i19 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i20 = i3;
   i2 = i3;
  }
 } else {
  i20 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i19 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i19 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i12 = (i1 | 0) == (i19 | 0);
 i13 = (i1 | 0) == (i19 | 0);
 i11 = 0;
 i8 = i4;
 L17 : while (1) {
  i4 = HEAP32[i16 >> 2] | 0;
  do if (i4) {
   i5 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i16 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i16 >> 2] | 0) == 0;
    break;
   }
  } else i7 = 1; while (0);
  i5 = HEAP32[i17 >> 2] | 0;
  if (i5) {
   i4 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i5 = 0;
    i6 = 1;
   } else i6 = 0;
  } else {
   i5 = 0;
   i6 = 1;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  if (!((i8 | 0) != 0 & (i7 ^ i6))) break;
  i5 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
  if (!i14) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, i4) | 0;
  i10 = i11 + 1 | 0;
  if (i12) {
   i4 = 0;
   i7 = i8;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i5 = i9 + 4 | 0; else i5 = HEAP32[i9 + 8 >> 2] | 0;
     i5 = HEAP32[i5 + (i11 << 2) >> 2] | 0;
     if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, i5) | 0;
     if ((i4 | 0) != (i5 | 0)) {
      HEAP8[i8 >> 0] = 0;
      i5 = i7;
      i6 = i6 + -1 | 0;
      break;
     }
     i5 = HEAP8[i9 >> 0] | 0;
     if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i5 | 0) == (i10 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i5 = 1;
      i3 = i3 + 1 | 0;
      i6 = i6 + -1 | 0;
     } else i5 = 1;
    } else i5 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i19 | 0)) {
     i4 = i5;
     i7 = i6;
     break;
    } else {
     i7 = i5;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i4) {
   i11 = i10;
   i8 = i7;
   continue;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  i5 = i4 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4) | 0; else HEAP32[i5 >> 2] = i6 + 4;
  if ((i3 + i7 | 0) >>> 0 < 2 | i13) {
   i11 = i10;
   i8 = i7;
   continue;
  } else {
   i4 = i1;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i5 = HEAP8[i4 >> 0] | 0;
    if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i5 | 0) != (i10 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i3 = i3 + -1 | 0;
    }
   }
   i4 = i4 + 12 | 0;
   if ((i4 | 0) == (i19 | 0)) {
    i11 = i10;
    i8 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i4) {
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) == -1) {
   HEAP32[i16 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i16 >> 2] | 0) == 0;
   break;
  }
 } else i4 = 1; while (0);
 do if (i5) {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) != -1) if (i4) break; else {
   i21 = 74;
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   i21 = 72;
   break;
  }
 } else i21 = 72; while (0);
 if ((i21 | 0) == 72 ? i4 : 0) i21 = 74;
 if ((i21 | 0) == 74) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 L107 : do if ((i1 | 0) == (i19 | 0)) i21 = 78; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L107;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i19 | 0)) {
   i21 = 78;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i21 | 0) == 78) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i19;
 }
 _free(i20);
 STACKTOP = i22;
 return i1 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i17, i18, i1, i20, i16, i19, i15) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23;
 i4 = (i20 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i21 = i3;
   i2 = i3;
  }
 } else {
  i21 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i20 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i20 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i13 = (i1 | 0) == (i20 | 0);
 i14 = (i1 | 0) == (i20 | 0);
 i12 = 0;
 i8 = i3;
 i10 = i4;
 L17 : while (1) {
  i3 = HEAP32[i17 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i3 = 0;
    break;
   } else {
    i3 = HEAP32[i17 >> 2] | 0;
    break;
   }
  } else i3 = 0; while (0);
  i6 = (i3 | 0) == 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i18 >> 2] = 0;
    i4 = 0;
   }
  } else i4 = 0;
  i5 = (i4 | 0) == 0;
  i3 = HEAP32[i17 >> 2] | 0;
  if (!((i10 | 0) != 0 & (i6 ^ i5))) break;
  i4 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
  i3 = i3 & 255;
  if (!i15) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 63](i16, i3) | 0;
  i11 = i12 + 1 | 0;
  if (i13) {
   i3 = 0;
   i6 = i8;
   i7 = i10;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i5 = i10;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
     i4 = HEAP8[i4 + i12 >> 0] | 0;
     if (!i15) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 63](i16, i4) | 0;
     if (i3 << 24 >> 24 != i4 << 24 >> 24) {
      HEAP8[i8 >> 0] = 0;
      i4 = i7;
      i5 = i5 + -1 | 0;
      break;
     }
     i4 = HEAP8[i9 >> 0] | 0;
     if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i4 | 0) == (i11 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i4 = 1;
      i6 = i6 + 1 | 0;
      i5 = i5 + -1 | 0;
     } else i4 = 1;
    } else i4 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i20 | 0)) {
     i3 = i4;
     i7 = i5;
     break;
    } else {
     i7 = i4;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i3) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  }
  i3 = HEAP32[i17 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
  if ((i6 + i7 | 0) >>> 0 < 2 | i14) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  } else {
   i3 = i1;
   i5 = i6;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i4 | 0) != (i11 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i5 = i5 + -1 | 0;
    }
   }
   i3 = i3 + 12 | 0;
   if ((i3 | 0) == (i20 | 0)) {
    i12 = i11;
    i8 = i5;
    i10 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i3 = 0;
   break;
  } else {
   i3 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } else i3 = 0; while (0);
 i3 = (i3 | 0) == 0;
 do if (!i5) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i18 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i3) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i3 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 L95 : do if ((i1 | 0) == (i20 | 0)) i22 = 70; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L95;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i20 | 0)) {
   i22 = 70;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i22 | 0) == 70) {
  HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 4;
  i1 = i20;
 }
 _free(i21);
 STACKTOP = i23;
 return i1 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i16, i15, i17, i19, i18, i1) {
 i14 = i14 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i20;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16136) | 0;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16292) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 63](i13, i10);
 HEAP32[i18 >> 2] = i17;
 i1 = HEAP8[i14 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i11 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, i1) | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 4;
   HEAP32[i3 >> 2] = i11;
   i3 = i14 + 1 | 0;
   break;
  }
 default:
  i3 = i14;
 }
 i11 = i15;
 L4 : do if ((i11 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
  i1 = i3 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i4 = 4;
    break L4;
   }
  }
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, 48) | 0;
  i8 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i8 + 4;
  HEAP32[i8 >> 2] = i9;
  i3 = i3 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, HEAP8[i1 >> 0] | 0) | 0;
  i9 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i9 + 4;
  HEAP32[i9 >> 2] = i8;
  if (i3 >>> 0 < i15 >>> 0) {
   i1 = i3;
   while (1) {
    i9 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
     i9 = i3;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i15 >>> 0) {
     i9 = i3;
     break;
    }
   }
  } else {
   i9 = i3;
   i1 = i3;
  }
 } else i4 = 4; while (0);
 L11 : do if ((i4 | 0) == 4) if (i3 >>> 0 < i15 >>> 0) {
  i1 = i3;
  while (1) {
   i9 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
    i9 = i3;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) {
    i9 = i3;
    break;
   }
  }
 } else {
  i9 = i3;
  i1 = i3;
 } while (0);
 i7 = HEAP8[i13 >> 0] | 0;
 i8 = i13 + 4 | 0;
 if (((i7 & 1) == 0 ? (i7 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0) {
  if ((i9 | 0) != (i1 | 0) ? (i2 = i1 + -1 | 0, i9 >>> 0 < i2 >>> 0) : 0) {
   i3 = i9;
   do {
    i7 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i7;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
  }
  i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 127](i10) | 0;
  i5 = i13 + 8 | 0;
  i6 = i13 + 1 | 0;
  if (i9 >>> 0 < i1 >>> 0) {
   i2 = 0;
   i3 = 0;
   i7 = i9;
   while (1) {
    i21 = HEAP8[((HEAP8[i13 >> 0] & 1) == 0 ? i6 : HEAP32[i5 >> 2] | 0) + i3 >> 0] | 0;
    if (i21 << 24 >> 24 > 0 & (i2 | 0) == (i21 << 24 >> 24 | 0)) {
     i21 = HEAP32[i18 >> 2] | 0;
     HEAP32[i18 >> 2] = i21 + 4;
     HEAP32[i21 >> 2] = i4;
     i21 = HEAP8[i13 >> 0] | 0;
     i2 = 0;
     i3 = (i3 >>> 0 < (((i21 & 1) == 0 ? (i21 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i3 | 0;
    }
    i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, HEAP8[i7 >> 0] | 0) | 0;
    i21 = HEAP32[i18 >> 2] | 0;
    HEAP32[i18 >> 2] = i21 + 4;
    HEAP32[i21 >> 2] = i22;
    i7 = i7 + 1 | 0;
    if (i7 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 1 | 0;
   }
  }
  i2 = i17 + (i9 - i14 << 2) | 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if ((i2 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    do {
     i22 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i22;
     i2 = i2 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i2 >>> 0 < i3 >>> 0);
    i3 = i12;
    i2 = i4;
   } else {
    i3 = i12;
    i2 = i4;
   }
  } else i3 = i12;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i9, i1, HEAP32[i18 >> 2] | 0) | 0;
  i2 = (HEAP32[i18 >> 2] | 0) + (i1 - i9 << 2) | 0;
  HEAP32[i18 >> 2] = i2;
  i3 = i12;
 }
 L36 : do if (i1 >>> 0 < i15 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 63](i12, i2) | 0;
   i22 = HEAP32[i18 >> 2] | 0;
   i2 = i22 + 4 | 0;
   HEAP32[i18 >> 2] = i2;
   HEAP32[i22 >> 2] = i21;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) break L36;
  }
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 127](i10) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  i2 = i22 + 4 | 0;
  HEAP32[i18 >> 2] = i2;
  HEAP32[i22 >> 2] = i21;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i1, i15, i2) | 0;
 i22 = (HEAP32[i18 >> 2] | 0) + (i11 - i1 << 2) | 0;
 HEAP32[i18 >> 2] = i22;
 HEAP32[i19 >> 2] = (i16 | 0) == (i15 | 0) ? i22 : i17 + (i16 - i14 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i20;
 return;
}

function __ZNK6PicArr8makeRtnsEPS_(i4, i51) {
 i4 = i4 | 0;
 i51 = i51 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i52 = 0, i53 = 0;
 i53 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i52 = i53;
 i50 = i52 + 100 | 0;
 HEAP8[i50 >> 0] = 0;
 i3 = i52 + 104 | 0;
 HEAP32[i3 >> 2] = -1;
 i1 = i52;
 i2 = i1 + 100 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i52 >> 2] = HEAP32[i4 >> 2];
 i39 = i52 + 4 | 0;
 HEAP32[i39 >> 2] = HEAP32[i4 + 4 >> 2];
 i17 = HEAP32[i4 + 8 >> 2] | 0;
 i49 = i52 + 8 | 0;
 HEAP32[i49 >> 2] = i17;
 i18 = HEAP32[i4 + 12 >> 2] | 0;
 i26 = i52 + 12 | 0;
 HEAP32[i26 >> 2] = i18;
 i19 = HEAP32[i4 + 16 >> 2] | 0;
 i27 = i52 + 16 | 0;
 HEAP32[i27 >> 2] = i19;
 i20 = HEAP32[i4 + 20 >> 2] | 0;
 i28 = i52 + 20 | 0;
 HEAP32[i28 >> 2] = i20;
 i21 = HEAP32[i4 + 24 >> 2] | 0;
 i29 = i52 + 24 | 0;
 HEAP32[i29 >> 2] = i21;
 i22 = HEAP32[i4 + 28 >> 2] | 0;
 i30 = i52 + 28 | 0;
 HEAP32[i30 >> 2] = i22;
 i23 = HEAP32[i4 + 32 >> 2] | 0;
 i31 = i52 + 32 | 0;
 HEAP32[i31 >> 2] = i23;
 i24 = HEAP32[i4 + 36 >> 2] | 0;
 i32 = i52 + 36 | 0;
 HEAP32[i32 >> 2] = i24;
 i25 = HEAP32[i4 + 40 >> 2] | 0;
 i33 = i52 + 40 | 0;
 HEAP32[i33 >> 2] = i25;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i34 = i52 + 44 | 0;
 HEAP32[i34 >> 2] = i2;
 i1 = HEAP32[i4 + 48 >> 2] | 0;
 i35 = i52 + 48 | 0;
 HEAP32[i35 >> 2] = i1;
 i16 = HEAP32[i4 + 52 >> 2] | 0;
 i36 = i52 + 52 | 0;
 HEAP32[i36 >> 2] = i16;
 i5 = HEAP32[i4 + 56 >> 2] | 0;
 i37 = i52 + 56 | 0;
 HEAP32[i37 >> 2] = i5;
 i6 = HEAP32[i4 + 60 >> 2] | 0;
 i38 = i52 + 60 | 0;
 HEAP32[i38 >> 2] = i6;
 i7 = HEAP32[i4 + 64 >> 2] | 0;
 i40 = i52 + 64 | 0;
 HEAP32[i40 >> 2] = i7;
 i8 = HEAP32[i4 + 68 >> 2] | 0;
 i41 = i52 + 68 | 0;
 HEAP32[i41 >> 2] = i8;
 i9 = HEAP32[i4 + 72 >> 2] | 0;
 i42 = i52 + 72 | 0;
 HEAP32[i42 >> 2] = i9;
 i10 = HEAP32[i4 + 76 >> 2] | 0;
 i43 = i52 + 76 | 0;
 HEAP32[i43 >> 2] = i10;
 i11 = HEAP32[i4 + 80 >> 2] | 0;
 i44 = i52 + 80 | 0;
 HEAP32[i44 >> 2] = i11;
 i12 = HEAP32[i4 + 84 >> 2] | 0;
 i45 = i52 + 84 | 0;
 HEAP32[i45 >> 2] = i12;
 i13 = HEAP32[i4 + 88 >> 2] | 0;
 i46 = i52 + 88 | 0;
 HEAP32[i46 >> 2] = i13;
 i14 = HEAP32[i4 + 92 >> 2] | 0;
 i47 = i52 + 92 | 0;
 HEAP32[i47 >> 2] = i14;
 i15 = HEAP32[i4 + 96 >> 2] | 0;
 i48 = i52 + 96 | 0;
 HEAP32[i48 >> 2] = i15;
 HEAP32[i3 >> 2] = HEAP32[i4 + 104 >> 2];
 HEAP8[i50 >> 0] = 0;
 i3 = i1;
 i4 = i16;
 i16 = 0;
 i1 = 0;
 while (1) {
  HEAP32[i51 + (i1 * 108 | 0) >> 2] = HEAP32[i52 >> 2];
  HEAP32[i51 + (i1 * 108 | 0) + 4 >> 2] = HEAP32[i39 >> 2];
  HEAP32[i51 + (i1 * 108 | 0) + 8 >> 2] = i17;
  HEAP32[i51 + (i1 * 108 | 0) + 12 >> 2] = i18;
  HEAP32[i51 + (i1 * 108 | 0) + 16 >> 2] = i19;
  HEAP32[i51 + (i1 * 108 | 0) + 20 >> 2] = i20;
  HEAP32[i51 + (i1 * 108 | 0) + 24 >> 2] = i21;
  HEAP32[i51 + (i1 * 108 | 0) + 28 >> 2] = i22;
  HEAP32[i51 + (i1 * 108 | 0) + 32 >> 2] = i23;
  HEAP32[i51 + (i1 * 108 | 0) + 36 >> 2] = i24;
  HEAP32[i51 + (i1 * 108 | 0) + 40 >> 2] = i25;
  HEAP32[i51 + (i1 * 108 | 0) + 44 >> 2] = i2;
  HEAP32[i51 + (i1 * 108 | 0) + 48 >> 2] = i3;
  HEAP32[i51 + (i1 * 108 | 0) + 52 >> 2] = i4;
  HEAP32[i51 + (i1 * 108 | 0) + 56 >> 2] = i5;
  HEAP32[i51 + (i1 * 108 | 0) + 60 >> 2] = i6;
  HEAP32[i51 + (i1 * 108 | 0) + 64 >> 2] = i7;
  HEAP32[i51 + (i1 * 108 | 0) + 68 >> 2] = i8;
  HEAP32[i51 + (i1 * 108 | 0) + 72 >> 2] = i9;
  HEAP32[i51 + (i1 * 108 | 0) + 76 >> 2] = i10;
  HEAP32[i51 + (i1 * 108 | 0) + 80 >> 2] = i11;
  HEAP32[i51 + (i1 * 108 | 0) + 84 >> 2] = i12;
  HEAP32[i51 + (i1 * 108 | 0) + 88 >> 2] = i13;
  HEAP32[i51 + (i1 * 108 | 0) + 92 >> 2] = i14;
  HEAP32[i51 + (i1 * 108 | 0) + 96 >> 2] = i15;
  HEAP8[i51 + (i1 * 108 | 0) + 100 >> 0] = i16;
  HEAP32[i51 + (i1 * 108 | 0) + 104 >> 2] = i1;
  if ((i1 | 0) != 3) {
   __ZN6PicArr4turnEv(i52);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == 8) break;
  } else {
   HEAP8[i50 >> 0] = 1;
   __ZN6PicArr4revYEv(i52);
   i1 = 4;
  }
  i2 = HEAP32[i34 >> 2] | 0;
  i3 = HEAP32[i35 >> 2] | 0;
  i4 = HEAP32[i36 >> 2] | 0;
  i5 = HEAP32[i37 >> 2] | 0;
  i6 = HEAP32[i38 >> 2] | 0;
  i7 = HEAP32[i40 >> 2] | 0;
  i8 = HEAP32[i41 >> 2] | 0;
  i9 = HEAP32[i42 >> 2] | 0;
  i10 = HEAP32[i43 >> 2] | 0;
  i11 = HEAP32[i44 >> 2] | 0;
  i12 = HEAP32[i45 >> 2] | 0;
  i13 = HEAP32[i46 >> 2] | 0;
  i14 = HEAP32[i47 >> 2] | 0;
  i15 = HEAP32[i48 >> 2] | 0;
  i16 = HEAP8[i50 >> 0] | 0;
  i17 = HEAP32[i49 >> 2] | 0;
  i18 = HEAP32[i26 >> 2] | 0;
  i19 = HEAP32[i27 >> 2] | 0;
  i20 = HEAP32[i28 >> 2] | 0;
  i21 = HEAP32[i29 >> 2] | 0;
  i22 = HEAP32[i30 >> 2] | 0;
  i23 = HEAP32[i31 >> 2] | 0;
  i24 = HEAP32[i32 >> 2] | 0;
  i25 = HEAP32[i33 >> 2] | 0;
 }
 STACKTOP = i53;
 return;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i15, i17, i16, i18, i20, i19, i1) {
 i15 = i15 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i21;
 i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16144) | 0;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16284) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 63](i14, i11);
 HEAP32[i19 >> 2] = i18;
 i1 = HEAP8[i15 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, i1) | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i12;
   i4 = i15 + 1 | 0;
   break;
  }
 default:
  i4 = i15;
 }
 i12 = i16;
 L4 : do if ((i12 - i4 | 0) > 1 ? (HEAP8[i4 >> 0] | 0) == 48 : 0) {
  i1 = i4 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i5 = 4;
    break L4;
   }
  }
  i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, 48) | 0;
  i9 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = i10;
  i4 = i4 + 2 | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, HEAP8[i1 >> 0] | 0) | 0;
  i10 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i10 + 1;
  HEAP8[i10 >> 0] = i9;
  if (i4 >>> 0 < i16 >>> 0) {
   i1 = i4;
   while (1) {
    i10 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
     i10 = i4;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i16 >>> 0) {
     i10 = i4;
     break;
    }
   }
  } else {
   i10 = i4;
   i1 = i4;
  }
 } else i5 = 4; while (0);
 L11 : do if ((i5 | 0) == 4) if (i4 >>> 0 < i16 >>> 0) {
  i1 = i4;
  while (1) {
   i10 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
    i10 = i4;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) {
    i10 = i4;
    break;
   }
  }
 } else {
  i10 = i4;
  i1 = i4;
 } while (0);
 i8 = HEAP8[i14 >> 0] | 0;
 i9 = i14 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  if ((i10 | 0) != (i1 | 0) ? (i3 = i1 + -1 | 0, i10 >>> 0 < i3 >>> 0) : 0) {
   i4 = i10;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i4 >>> 0 < i3 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 127](i11) | 0;
  i6 = i14 + 8 | 0;
  i7 = i14 + 1 | 0;
  if (i10 >>> 0 < i1 >>> 0) {
   i3 = 0;
   i4 = 0;
   i8 = i10;
   while (1) {
    i22 = HEAP8[((HEAP8[i14 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i22 << 24 >> 24 > 0 & (i3 | 0) == (i22 << 24 >> 24 | 0)) {
     i22 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i22 + 1;
     HEAP8[i22 >> 0] = i5;
     i22 = HEAP8[i14 >> 0] | 0;
     i3 = 0;
     i4 = (i4 >>> 0 < (((i22 & 1) == 0 ? (i22 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, HEAP8[i8 >> 0] | 0) | 0;
    i22 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i22 + 1;
    HEAP8[i22 >> 0] = i23;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i1 >>> 0) break; else i3 = i3 + 1 | 0;
   }
  }
  i3 = i18 + (i10 - i15) | 0;
  i4 = HEAP32[i19 >> 2] | 0;
  if ((i3 | 0) != (i4 | 0) ? (i2 = i4 + -1 | 0, i3 >>> 0 < i2 >>> 0) : 0) {
   do {
    i23 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i23;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
   i3 = i13;
  } else i3 = i13;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 7](i13, i10, i1, HEAP32[i19 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (i1 - i10);
  i3 = i13;
 }
 L36 : do if (i1 >>> 0 < i16 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i13, i2) | 0;
   i23 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i23 + 1;
   HEAP8[i23 >> 0] = i22;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) break L36;
  }
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 127](i11) | 0;
  i23 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i23 + 1;
  HEAP8[i23 >> 0] = i22;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 7](i13, i1, i16, HEAP32[i19 >> 2] | 0) | 0;
 i23 = (HEAP32[i19 >> 2] | 0) + (i12 - i1) | 0;
 HEAP32[i19 >> 2] = i23;
 HEAP32[i20 >> 2] = (i17 | 0) == (i16 | 0) ? i23 : i18 + (i17 - i15) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
 STACKTOP = i21;
 return;
}

function __ZN12BaseGLWidget10reCalcProjEb(i10, i1) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i11 = i13 + 64 | 0;
 i12 = i13;
 if (i1) {
  d2 = +HEAPF32[i10 + 208 >> 2] - +HEAPF32[i10 + 196 >> 2];
  d14 = +(HEAP32[i10 + 188 >> 2] | 0);
  d2 = d2 < d14 ? d14 : d2;
  d4 = +HEAPF32[i10 + 212 >> 2] - +HEAPF32[i10 + 200 >> 2];
  d4 = d4 < d14 ? d14 : d4;
  d5 = +HEAPF32[i10 + 216 >> 2] - +HEAPF32[i10 + 204 >> 2];
  d5 = d5 < d14 ? d14 : d5;
  d14 = 4.0 / d2;
  d7 = 4.0 / d4;
  d6 = 4.0 / d5;
  d7 = d14 < d7 ? d14 : d7;
  HEAPF64[i10 + 264 >> 3] = (d7 < d6 ? d7 : d6) * .7;
  i8 = HEAP32[i10 + 248 >> 2] | 0;
  d6 = +(i8 | 0);
  d2 = d6 / d2;
  i3 = HEAP32[i10 + 252 >> 2] | 0;
  d7 = +(i3 | 0);
  d4 = d7 / d4;
  d5 = d6 / d5;
  d4 = d2 < d4 ? d2 : d4;
  HEAPF64[i10 + 272 >> 3] = (d4 < d5 ? d4 : d5) * .7;
  i1 = i10 + 256 | 0;
  HEAPF64[i1 >> 3] = d6 / d7;
  _glViewport(0, 0, i8 | 0, i3 | 0);
  i3 = i10 + 28 | 0;
  i8 = i3;
  i9 = i8 + 60 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAPF32[i3 >> 2] = 1.0;
  HEAPF32[i10 + 48 >> 2] = 1.0;
  HEAPF32[i10 + 68 >> 2] = 1.0;
  HEAPF32[i10 + 88 >> 2] = 1.0;
 } else i1 = i10 + 256 | 0;
 d2 = +HEAPF64[i1 >> 3];
 if (d2 == 0.0) {
  d7 = 0.0;
  d2 = 0.0;
  d4 = 0.0;
  d5 = 0.0;
  d6 = 0.0;
 } else {
  d7 = -2.222222328186035;
  d2 = 1.7320508075688776 / d2;
  d4 = 1.7320507764816284;
  d5 = -1.2222222089767456;
  d6 = -1.0;
 }
 i3 = i10 + 28 | 0;
 i8 = i12;
 i1 = i3;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  i8 = i8 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i8 = i11;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i1 = 0;
 do {
  d18 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i19 = i1 + 4 | 0;
  d21 = +HEAPF32[i12 + (i19 << 2) >> 2];
  d16 = d21 * 0.0;
  i8 = i1 + 8 | 0;
  d15 = +HEAPF32[i12 + (i8 << 2) >> 2];
  d20 = d15 * 0.0;
  i9 = i1 + 12 | 0;
  d17 = +HEAPF32[i12 + (i9 << 2) >> 2];
  d14 = d17 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d2 * d18 + 0.0 + d16 + d20 + d14;
  d18 = d18 * 0.0 + 0.0;
  HEAPF32[i11 + (i19 << 2) >> 2] = d18 + d4 * d21 + d20 + d14;
  d16 = d18 + d16;
  HEAPF32[i11 + (i8 << 2) >> 2] = d16 + d5 * d15 + d6 * d17;
  HEAPF32[i11 + (i9 << 2) >> 2] = d16 + d7 * d15 + d14;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) != (i3 | 0)) {
  i8 = i3;
  i1 = i11;
  i9 = i8 + 64 | 0;
  do {
   HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
   i8 = i8 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
 }
 i8 = i12;
 i1 = i3;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  i8 = i8 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i8 = i11;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i1 = 0;
 do {
  d16 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i8 = i1 + 4 | 0;
  d14 = +HEAPF32[i12 + (i8 << 2) >> 2];
  d20 = d14 * 0.0;
  i9 = i1 + 8 | 0;
  d21 = +HEAPF32[i12 + (i9 << 2) >> 2];
  d15 = d21 * 0.0;
  i19 = i1 + 12 | 0;
  d18 = +HEAPF32[i12 + (i19 << 2) >> 2];
  d17 = d18 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d16 + 0.0 + d20 + d15 + d17;
  d16 = d16 * 0.0 + 0.0;
  HEAPF32[i11 + (i8 << 2) >> 2] = d14 + d16 + d15 + d17;
  d20 = d16 + d20;
  HEAPF32[i11 + (i9 << 2) >> 2] = d21 + d20 + d17;
  HEAPF32[i11 + (i19 << 2) >> 2] = d18 + (d20 - d21 * 4.0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) != (i3 | 0)) {
  i8 = i3;
  i1 = i11;
  i9 = i8 + 64 | 0;
  do {
   HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
   i8 = i8 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
 }
 d2 = +HEAPF64[i10 + 264 >> 3];
 i8 = i12;
 i1 = i3;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  i8 = i8 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i8 = i11;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i1 = 0;
 do {
  d15 = +HEAPF32[i12 + (i1 << 2) >> 2];
  i9 = i1 + 4 | 0;
  d14 = +HEAPF32[i12 + (i9 << 2) >> 2];
  d20 = d14 * 0.0;
  i10 = i1 + 8 | 0;
  d16 = +HEAPF32[i12 + (i10 << 2) >> 2];
  d21 = d16 * 0.0;
  i19 = i1 + 12 | 0;
  d18 = +HEAPF32[i12 + (i19 << 2) >> 2];
  d17 = d18 * 0.0;
  HEAPF32[i11 + (i1 << 2) >> 2] = d2 * d15 + 0.0 + d20 + d21 + d17;
  d15 = d15 * 0.0 + 0.0;
  HEAPF32[i11 + (i9 << 2) >> 2] = d15 + d2 * d14 + d21 + d17;
  d20 = d15 + d20;
  HEAPF32[i11 + (i10 << 2) >> 2] = d20 + d2 * d16 + d17;
  HEAPF32[i11 + (i19 << 2) >> 2] = d18 + (d20 + d21);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i11 | 0) == (i3 | 0)) {
  STACKTOP = i13;
  return;
 }
 i8 = i3;
 i1 = i11;
 i9 = i8 + 64 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  i8 = i8 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 STACKTOP = i13;
 return;
}

function _try_realloc_chunk(i15, i14) {
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = i15 + 4 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i7 = i13 & -8;
 i9 = i15 + i7 | 0;
 i6 = HEAP32[3223] | 0;
 i1 = i13 & 3;
 if (!((i1 | 0) != 1 & i15 >>> 0 >= i6 >>> 0 & i15 >>> 0 < i9 >>> 0)) _abort();
 i2 = i15 + (i7 | 4) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 1)) _abort();
 if (!i1) {
  if (i14 >>> 0 < 256) {
   i15 = 0;
   return i15 | 0;
  }
  if (i7 >>> 0 >= (i14 + 4 | 0) >>> 0 ? (i7 - i14 | 0) >>> 0 <= HEAP32[3339] << 1 >>> 0 : 0) return i15 | 0;
  i15 = 0;
  return i15 | 0;
 }
 if (i7 >>> 0 >= i14 >>> 0) {
  i1 = i7 - i14 | 0;
  if (i1 >>> 0 <= 15) return i15 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i1 | 3;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i1);
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[3225] | 0)) {
  i1 = (HEAP32[3222] | 0) + i7 | 0;
  if (i1 >>> 0 <= i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i11 = i1 - i14 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 1;
  HEAP32[3225] = i15 + i14;
  HEAP32[3222] = i11;
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[3224] | 0)) {
  i2 = (HEAP32[3221] | 0) + i7 | 0;
  if (i2 >>> 0 < i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i1 = i2 - i14 | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
   HEAP32[i15 + (i14 + 4) >> 2] = i1 | 1;
   HEAP32[i15 + i2 >> 2] = i1;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i15 + i14 | 0;
  } else {
   HEAP32[i12 >> 2] = i13 & 1 | i2 | 2;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[3221] = i1;
  HEAP32[3224] = i2;
  return i15 | 0;
 }
 if (i3 & 2) {
  i15 = 0;
  return i15 | 0;
 }
 i10 = (i3 & -8) + i7 | 0;
 if (i10 >>> 0 < i14 >>> 0) {
  i15 = 0;
  return i15 | 0;
 }
 i11 = i10 - i14 | 0;
 i4 = i3 >>> 3;
 do if (i3 >>> 0 >= 256) {
  i5 = HEAP32[i15 + (i7 + 24) >> 2] | 0;
  i4 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  do if ((i4 | 0) == (i9 | 0)) {
   i2 = i15 + (i7 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i7 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i8 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i6 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i8 = i1;
    break;
   }
  } else {
   i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
   if (i3 >>> 0 < i6 >>> 0) _abort();
   i1 = i3 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
   i2 = i4 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
    HEAP32[i1 >> 2] = i4;
    HEAP32[i2 >> 2] = i3;
    i8 = i4;
    break;
   } else _abort();
  } while (0);
  if (i5) {
   i1 = HEAP32[i15 + (i7 + 28) >> 2] | 0;
   i2 = 13180 + (i1 << 2) | 0;
   if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i8;
    if (!i8) {
     HEAP32[3220] = HEAP32[3220] & ~(1 << i1);
     break;
    }
   } else {
    if (i5 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort();
    i1 = i5 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i8; else HEAP32[i5 + 20 >> 2] = i8;
    if (!i8) break;
   }
   i2 = HEAP32[3223] | 0;
   if (i8 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i8 + 24 >> 2] = i5;
   i1 = HEAP32[i15 + (i7 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i8 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i7 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[3223] | 0) >>> 0) _abort(); else {
    HEAP32[i8 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   }
  }
 } else {
  i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
  i2 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  i1 = 12916 + (i4 << 1 << 2) | 0;
  if ((i3 | 0) != (i1 | 0)) {
   if (i3 >>> 0 < i6 >>> 0) _abort();
   if ((HEAP32[i3 + 12 >> 2] | 0) != (i9 | 0)) _abort();
  }
  if ((i2 | 0) == (i3 | 0)) {
   HEAP32[3219] = HEAP32[3219] & ~(1 << i4);
   break;
  }
  if ((i2 | 0) != (i1 | 0)) {
   if (i2 >>> 0 < i6 >>> 0) _abort();
   i1 = i2 + 8 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) i5 = i1; else _abort();
  } else i5 = i2 + 8 | 0;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i5 >> 2] = i3;
 } while (0);
 if (i11 >>> 0 < 16) {
  HEAP32[i12 >> 2] = i10 | i13 & 1 | 2;
  i14 = i15 + (i10 | 4) | 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  return i15 | 0;
 } else {
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 3;
  i13 = i15 + (i10 | 4) | 0;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i11);
  return i15 | 0;
 }
 return 0;
}

function __ZN16BuildControlBase13tiledDblClickEi(i16, i1) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 if ((i1 | 0) == -1) {
  i16 = 0;
  return i16 | 0;
 }
 i15 = HEAP32[(HEAP32[i16 + 8 >> 2] | 0) + 116 >> 2] | 0;
 i2 = i1 & 3;
 i3 = i1 >>> 16 & 255;
 i4 = i1 >>> 2 & 127;
 i1 = i1 >>> 9 & 127;
 do if ((i2 | 0) != 3 & (i3 >>> 0 < 50 & (i4 >>> 0 < 50 & i1 >>> 0 < 50))) {
  i14 = i15 + 136 + (i2 * 5e5 | 0) + (i3 * 1e4 | 0) + (i4 * 200 | 0) + (i1 << 2) | 0;
  i1 = HEAP32[i14 >> 2] | 0;
  if ((i1 & 65535 | 0) == 257) {
   HEAP32[i14 >> 2] = 513;
   i14 = i15 + 32 | 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   HEAP8[i15 + 1500136 >> 0] = 1;
   HEAP8[i15 + 1500137 >> 0] = 1;
   HEAP8[i15 + 1500296 >> 0] = 0;
   __ZN10BuildWorld13doTransparentEv(i15);
   break;
  }
  if ((i1 & 65280 | 0) == 512) {
   if (!(HEAP8[i16 + 13 >> 0] | 0)) {
    i1 = i15 + 32 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) <= 1) break;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i1 >> 2] = i2 + -1;
    HEAP8[i15 + 1500136 >> 0] = 1;
    HEAP8[i15 + 1500137 >> 0] = 1;
    HEAP8[i15 + 1500296 >> 0] = 0;
    __ZN10BuildWorld13doTransparentEv(i15);
    break;
   }
   if ((i1 | 0) != 514) {
    i1 = HEAP32[i15 + 40 >> 2] | 0;
    i6 = HEAP32[i15 + 44 >> 2] | 0;
    i7 = HEAP32[i15 + 48 >> 2] | 0;
    i8 = HEAP32[i15 + 52 >> 2] | 0;
    i9 = HEAP32[i15 + 56 >> 2] | 0;
    i10 = HEAP32[i15 + 60 >> 2] | 0;
    L15 : do if ((i1 | 0) < (i6 | 0)) {
     i11 = (i7 | 0) < (i8 | 0);
     i12 = (i9 | 0) < (i10 | 0);
     i3 = i1;
     while (1) {
      if (i11) {
       i4 = i3 >>> 0 < 50;
       i2 = i7;
       do {
        if (i12) {
         i5 = i2 >>> 0 < 50;
         i1 = i9;
         do {
          if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i15 + 136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 514 : 0) {
           i4 = 0;
           i13 = 18;
           break L15;
          }
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) < (i10 | 0));
        }
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) < (i8 | 0));
      }
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i6 | 0)) {
       i13 = 22;
       break;
      }
     }
    } else i13 = 22; while (0);
    L32 : do if ((i13 | 0) == 22) {
     i1 = HEAP32[i15 + 64 >> 2] | 0;
     i6 = HEAP32[i15 + 68 >> 2] | 0;
     i7 = HEAP32[i15 + 72 >> 2] | 0;
     i8 = HEAP32[i15 + 76 >> 2] | 0;
     i9 = HEAP32[i15 + 80 >> 2] | 0;
     i10 = HEAP32[i15 + 84 >> 2] | 0;
     if ((i1 | 0) < (i6 | 0)) {
      i11 = (i7 | 0) < (i8 | 0);
      i12 = (i9 | 0) < (i10 | 0);
      i3 = i1;
      do {
       if (i11) {
        i4 = i3 >>> 0 < 50;
        i2 = i7;
        do {
         if (i12) {
          i5 = i2 >>> 0 < 50;
          i1 = i9;
          do {
           if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i15 + 500136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 514 : 0) {
            i4 = 1;
            i13 = 18;
            break L32;
           }
           i1 = i1 + 1 | 0;
          } while ((i1 | 0) < (i10 | 0));
         }
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) < (i8 | 0));
       }
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i6 | 0));
     }
     i1 = HEAP32[i15 + 88 >> 2] | 0;
     i6 = HEAP32[i15 + 92 >> 2] | 0;
     i7 = HEAP32[i15 + 96 >> 2] | 0;
     i8 = HEAP32[i15 + 100 >> 2] | 0;
     i9 = HEAP32[i15 + 104 >> 2] | 0;
     i10 = HEAP32[i15 + 108 >> 2] | 0;
     if ((i1 | 0) < (i6 | 0)) {
      i11 = (i7 | 0) < (i8 | 0);
      i12 = (i9 | 0) < (i10 | 0);
      i3 = i1;
      do {
       if (i11) {
        i4 = i3 >>> 0 < 50;
        i2 = i7;
        do {
         if (i12) {
          i5 = i2 >>> 0 < 50;
          i1 = i9;
          do {
           if (i4 & (i5 & i1 >>> 0 < 50) ? (HEAP32[i15 + 1000136 + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] & 65535 | 0) == 514 : 0) {
            i4 = 2;
            i13 = 18;
            break L32;
           }
           i1 = i1 + 1 | 0;
          } while ((i1 | 0) < (i10 | 0));
         }
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) < (i8 | 0));
       }
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i6 | 0));
     }
    } while (0);
    if ((i13 | 0) == 18) HEAP32[i15 + 136 + (i4 * 5e5 | 0) + (i3 * 1e4 | 0) + (i2 * 200 | 0) + (i1 << 2) >> 2] = 513;
    HEAP32[i14 >> 2] = 514;
    HEAP8[i15 + 1500136 >> 0] = 1;
    HEAP8[i15 + 1500137 >> 0] = 1;
    i13 = i15 + 1500296 | 0;
    HEAP8[i13 >> 0] = 0;
    i14 = __ZN5Shape8generateEPK10BuildWorld(i15 + 1500140 | 0, i15) | 0;
    HEAP32[i15 + 1500292 >> 2] = i14;
    HEAP8[i13 >> 0] = 1;
    if ((i14 | 0) == 3) {
     HEAPF32[i16 + 40 >> 2] = 1.0;
     HEAPF32[i16 + 44 >> 2] = -.10000000149011612;
    }
   }
  }
 } while (0);
 __ZN16BuildControlBase11makeBuffersEv(i16);
 i16 = 1;
 return i16 | 0;
}

function __ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE(i20, i2, i19) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i19 = i19 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i18 = i22 + 12 | 0;
 i17 = i22;
 i10 = i20 + 4 | 0;
 i11 = i17 + 4 | 0;
 i13 = i17 + 8 | 0;
 i14 = i20 + 28 | 0;
 i15 = i20 + 24 | 0;
 i16 = (i19 | 0) == 0;
 i1 = 0;
 L1 : while (1) {
  if (!i2) {
   i21 = 36;
   break;
  }
  if (!(HEAP8[i2 >> 0] | 0)) {
   i21 = 36;
   break;
  }
  HEAP32[i18 >> 2] = 0;
  i2 = __ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE(HEAP32[i10 >> 2] | 0, i2, i18) | 0;
  i8 = HEAP32[i18 >> 2] | 0;
  if ((i2 | 0) == 0 | (i8 | 0) == 0) {
   i21 = 36;
   break;
  }
  HEAP32[i17 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 60 >> 2] & 63](i8, i2, i17) | 0;
  L6 : do if (!i2) {
   i2 = HEAP32[i8 + 40 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i8 >> 2] | 0) + 64 >> 2] & 255](i8);
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2, i8);
   HEAP32[i18 >> 2] = 0;
   i2 = HEAP32[i10 >> 2] | 0;
   i3 = i2 + 48 | 0;
   if (!(HEAP32[i3 >> 2] | 0)) {
    HEAP32[i3 >> 2] = 17;
    HEAP32[i2 + 56 >> 2] = 0;
    HEAP32[i2 + 60 >> 2] = 0;
    i3 = 3;
    i2 = 0;
   } else {
    i3 = 3;
    i2 = 0;
   }
  } else {
   if ((FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](i8) | 0) != 0 ? (HEAP32[(FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](i8) | 0) + 44 >> 2] | 0) == 2 : 0) {
    if (!i16) {
     i7 = i8 + 12 | 0;
     HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i19 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
     HEAP32[i19 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    }
    i3 = HEAP32[i8 + 40 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i8 >> 2] | 0) + 64 >> 2] & 255](i8);
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 63](i3, i8);
    i3 = 1;
    i1 = i2;
    break;
   }
   i3 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](i8) | 0;
   L17 : do if (i3) {
    i3 = (HEAP32[i3 + 44 >> 2] | 0) == 0;
    do if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
     if (!i3) break L17;
     i7 = HEAP32[i10 >> 2] | 0;
     i6 = __ZN8tinyxml27StrPair6GetStrEv(i8 + 12 | 0) | 0;
     HEAP32[i7 + 48 >> 2] = 16;
     HEAP32[i7 + 56 >> 2] = i6;
     HEAP32[i7 + 60 >> 2] = 0;
    } else {
     if (!i3) {
      i7 = HEAP32[i10 >> 2] | 0;
      i6 = __ZN8tinyxml27StrPair6GetStrEv(i8 + 12 | 0) | 0;
      HEAP32[i7 + 48 >> 2] = 16;
      HEAP32[i7 + 56 >> 2] = i6;
      HEAP32[i7 + 60 >> 2] = 0;
      break;
     }
     i4 = __ZN8tinyxml27StrPair6GetStrEv(i17) | 0;
     i7 = i8 + 12 | 0;
     i3 = __ZN8tinyxml27StrPair6GetStrEv(i7) | 0;
     if ((i4 | 0) == (i3 | 0)) break L17;
     i5 = HEAP8[i4 >> 0] | 0;
     if (i5 << 24 >> 24) {
      i6 = i4;
      i4 = 0;
      while (1) {
       i23 = HEAP8[i3 >> 0] | 0;
       if (!((i4 | 0) != 2147483647 & (i23 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i23 << 24 >> 24 : 0))) break;
       i6 = i6 + 1 | 0;
       i3 = i3 + 1 | 0;
       i4 = i4 + 1 | 0;
       i5 = HEAP8[i6 >> 0] | 0;
       if (!(i5 << 24 >> 24)) {
        i5 = 0;
        break;
       }
      }
      if ((i4 | 0) == 2147483647) break L17;
      if (!(i5 << 24 >> 24)) {
       i9 = i3;
       i21 = 25;
      }
     } else {
      i9 = i3;
      i21 = 25;
     }
     if ((i21 | 0) == 25 ? (i21 = 0, (HEAP8[i9 >> 0] | 0) == 0) : 0) break L17;
     i23 = HEAP32[i10 >> 2] | 0;
     i7 = __ZN8tinyxml27StrPair6GetStrEv(i7) | 0;
     HEAP32[i23 + 48 >> 2] = 16;
     HEAP32[i23 + 56 >> 2] = i7;
     HEAP32[i23 + 60 >> 2] = 0;
    } while (0);
    i3 = HEAP32[i8 + 40 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i8 >> 2] | 0) + 64 >> 2] & 255](i8);
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 63](i3, i8);
    HEAP32[i18 >> 2] = 0;
    i3 = 0;
    i2 = 0;
    break L6;
   } while (0);
   i3 = HEAP32[i14 >> 2] | 0;
   if (!i3) {
    HEAP32[i14 >> 2] = i8;
    HEAP32[i15 >> 2] = i8;
    HEAP32[i8 + 32 >> 2] = 0;
   } else {
    HEAP32[i3 + 36 >> 2] = i8;
    HEAP32[i8 + 32 >> 2] = i3;
    HEAP32[i14 >> 2] = i8;
   }
   HEAP32[i8 + 36 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = i20;
   i3 = 0;
  } while (0);
  if ((HEAP32[i17 >> 2] & 512 | 0) != 0 ? (i12 = HEAP32[i11 >> 2] | 0, (i12 | 0) != 0) : 0) __ZdaPv(i12);
  HEAP32[i17 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  switch (i3 | 0) {
  case 0:
   break;
  case 3:
   {
    i21 = 36;
    break L1;
   }
  case 1:
   {
    i21 = 37;
    break L1;
   }
  default:
   {
    i21 = 38;
    break L1;
   }
  }
 }
 if ((i21 | 0) == 36) {
  i23 = 0;
  STACKTOP = i22;
  return i23 | 0;
 } else if ((i21 | 0) == 37) {
  STACKTOP = i22;
  return i1 | 0;
 }
 return 0;
}

function __ZNK5Shape21makeTransformsMatricsEfRNSt3__16vectorI4Mat4NS0_9allocatorIS2_EEEE(i23, d4, i11) {
 i23 = i23 | 0;
 d4 = +d4;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i24 = i26 + 128 | 0;
 i22 = i26 + 116 | 0;
 i21 = i26 + 104 | 0;
 i17 = i26;
 i25 = i26 + 24 | 0;
 i18 = i26 + 20 | 0;
 i9 = HEAP32[1577] | 0;
 i10 = i23 + 24 | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i5 = i11 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i2 = i6 - i7 >> 6;
 if (i3 >>> 0 <= i2 >>> 0) {
  if (i3 >>> 0 < i2 >>> 0 ? (i8 = i7 + (i3 << 6) | 0, (i6 | 0) != (i8 | 0)) : 0) HEAP32[i5 >> 2] = i6 + (~((i6 + -64 - i8 | 0) >>> 6) << 6);
 } else __ZNSt3__16vectorI4Mat4NS_9allocatorIS1_EEE8__appendEj(i11, i3 - i2 | 0);
 i2 = i25;
 i3 = i2 + 80 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 __ZNK5Shape17startNeiTransformER8MatStack(i23, i25);
 d4 = +(i9 | 0);
 HEAP32[i18 >> 2] = i11;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = -1;
 i2 = i24 + 8 | 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i24 + 12 >> 2] = i2;
 HEAP32[i24 + 16 >> 2] = 0;
 i2 = HEAP32[i10 >> 2] | 0;
 HEAP32[i22 >> 2] = 0;
 i16 = i22 + 4 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 do if (i2) if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i22); else {
  i14 = i2 << 2;
  i12 = __Znwj(i14) | 0;
  HEAP32[i22 >> 2] = i12;
  i15 = i12 + (i2 << 2) | 0;
  HEAP32[i22 + 8 >> 2] = i15;
  _memset(i12 | 0, 0, i14 | 0) | 0;
  HEAP32[i16 >> 2] = i15;
  break;
 } else i12 = 0; while (0);
 HEAP32[i21 >> 2] = i21;
 i14 = i21 + 4 | 0;
 HEAP32[i14 >> 2] = i21;
 i15 = i21 + 8 | 0;
 HEAP32[i15 >> 2] = 0;
 i3 = __Znwj(12) | 0;
 HEAP32[i3 + 8 >> 2] = i24;
 HEAP32[i3 + 4 >> 2] = i21;
 HEAP32[i3 >> 2] = i21;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i21 >> 2] = i3;
 HEAP32[i15 >> 2] = 1;
 i9 = i12 + (HEAP32[i24 >> 2] << 2) | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i9 = i23 + 44 | 0;
 i10 = i17 + 4 | 0;
 i11 = i17 + 8 | 0;
 i12 = i17 + 12 | 0;
 i13 = i17 + 16 | 0;
 i2 = 1;
 while (1) {
  i5 = HEAP32[i3 + 8 >> 2] | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  i7 = i3 + 4 | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 + 4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[HEAP32[i7 >> 2] >> 2] = i6;
  HEAP32[i15 >> 2] = i2 + -1;
  __ZdlPv(i3);
  i2 = HEAP32[i9 >> 2] | 0;
  i3 = i5 + 8 | 0;
  i5 = i5 + 16 | 0;
  i7 = 0;
  do {
   i6 = HEAP32[i2 + (i8 * 188 | 0) + 60 + (i7 << 2) >> 2] | 0;
   if ((i6 | 0) != -1 ? (i19 = (HEAP32[i22 >> 2] | 0) + (i6 << 2) | 0, i20 = HEAP32[i19 >> 2] | 0, (i20 | 0) <= 0) : 0) {
    HEAP32[i19 >> 2] = i20 + 1;
    HEAP32[i17 >> 2] = i6;
    HEAP32[i10 >> 2] = i7;
    HEAP32[i11 >> 2] = i11;
    HEAP32[i12 >> 2] = i11;
    HEAP32[i13 >> 2] = 0;
    i6 = __Znwj(28) | 0;
    i29 = i17;
    i27 = HEAP32[i29 + 4 >> 2] | 0;
    i28 = i6 + 8 | 0;
    HEAP32[i28 >> 2] = HEAP32[i29 >> 2];
    HEAP32[i28 + 4 >> 2] = i27;
    i28 = i6 + 16 | 0;
    HEAP32[i28 >> 2] = i28;
    HEAP32[i6 + 20 >> 2] = i28;
    HEAP32[i6 + 24 >> 2] = 0;
    i28 = HEAP32[i3 >> 2] | 0;
    i27 = HEAP32[i5 >> 2] | 0;
    HEAP32[i6 + 4 >> 2] = i3;
    HEAP32[i6 >> 2] = i28;
    HEAP32[i28 + 4 >> 2] = i6;
    HEAP32[i3 >> 2] = i6;
    HEAP32[i5 >> 2] = i27 + 1;
    __ZN5BNodeD2Ev(i17);
    i27 = HEAP32[i3 >> 2] | 0;
    i6 = __Znwj(12) | 0;
    HEAP32[i6 + 8 >> 2] = i27 + 8;
    HEAP32[i6 + 4 >> 2] = i21;
    i27 = HEAP32[i21 >> 2] | 0;
    HEAP32[i6 >> 2] = i27;
    HEAP32[i27 + 4 >> 2] = i6;
    HEAP32[i21 >> 2] = i6;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < 4);
  i2 = HEAP32[i15 >> 2] | 0;
  if (!i2) break;
  i3 = HEAP32[i14 >> 2] | 0;
 }
 __ZNK5Shape10runBFSTreeIKZNKS_21makeTransformsMatricsEfRNSt3__16vectorI4Mat4NS1_9allocatorIS3_EEEEE3__1EEvR8MatStackRK5BNodefRT_(i23, i25, i24, d4, i18);
 if ((HEAP32[i15 >> 2] | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, i29 = (HEAP32[i21 >> 2] | 0) + 4 | 0, i28 = HEAP32[i1 >> 2] | 0, HEAP32[i28 + 4 >> 2] = HEAP32[i29 >> 2], HEAP32[HEAP32[i29 >> 2] >> 2] = i28, HEAP32[i15 >> 2] = 0, (i1 | 0) != (i21 | 0)) : 0) do {
  i29 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i29);
 } while ((i1 | 0) != (i21 | 0));
 i1 = HEAP32[i22 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i16 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i16 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 __ZN5BNodeD2Ev(i24);
 i3 = HEAP32[i25 + 68 >> 2] | 0;
 if (!i3) {
  STACKTOP = i26;
  return;
 }
 i1 = i25 + 72 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -68 - i3 | 0) >>> 0) / 68 | 0) * 68 | 0);
 __ZdlPv(i3);
 STACKTOP = i26;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 192 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 32 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16136) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, 35415, 35441, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i20 >> 2] = 0;
    i2 = 0;
    i5 = 1;
   } else {
    i2 = i3;
    i5 = 0;
   }
  } else {
   i2 = 0;
   i5 = 1;
  }
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   i4 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 16;
    break;
   }
  } else i23 = 16; while (0);
  if ((i23 | 0) == 16) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i1 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
   i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + i4;
  }
  i5 = i2 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i2 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i4 = HEAP32[i4 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i4, 16, i1, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
   i3 = i2;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 4;
   i3 = i2;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i1 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 36799, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i20 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i23 = 45;
   break;
  } else {
   HEAP32[i21 >> 2] = 0;
   i23 = 43;
   break;
  }
 } else i23 = 43; while (0);
 if ((i23 | 0) == 43 ? i2 : 0) i23 = 45;
 if ((i23 | 0) == 45) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNSt3__16vectorI4MeshNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i6 = i9 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i8 + 4 | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i4 = i7;
  i3 = i9;
  i2 = HEAP32[i7 >> 2] | 0;
  i7 = i5;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i4 >> 2] = i7;
  i7 = i8 + 8 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i7 >> 2] = i5;
  i6 = i9 + 8 | 0;
  i9 = i8 + 12 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i9 >> 2] = i7;
  i9 = HEAP32[i4 >> 2] | 0;
  HEAP32[i8 >> 2] = i9;
  return;
 }
 i4 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 do {
  i2 = i4;
  i4 = i4 + -192 | 0;
  HEAP32[i1 + -192 >> 2] = HEAP32[i4 >> 2];
  i10 = i2 + -188 | 0;
  HEAP32[i1 + -188 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i10 = i1 + -184 | 0;
  i3 = i2 + -184 | 0;
  HEAP32[i10 >> 2] = 0;
  i11 = i1 + -180 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -176 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  i10 = i2 + -180 | 0;
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i11 = i2 + -176 | 0;
  HEAP32[i1 + -176 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i3 = i1 + -172 | 0;
  i10 = i2 + -172 | 0;
  HEAP32[i3 >> 2] = 0;
  i11 = i1 + -168 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -164 >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
  i3 = i2 + -168 | 0;
  HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
  i11 = i2 + -164 | 0;
  HEAP32[i1 + -164 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i10 = i1 + -160 | 0;
  i3 = i2 + -160 | 0;
  HEAP32[i10 >> 2] = 0;
  i11 = i1 + -156 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -152 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  i10 = i2 + -156 | 0;
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i11 = i2 + -152 | 0;
  HEAP32[i1 + -152 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i3 = i1 + -148 | 0;
  i10 = i2 + -148 | 0;
  HEAP32[i3 >> 2] = 0;
  i11 = i1 + -144 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -140 >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
  i3 = i2 + -144 | 0;
  HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
  i11 = i2 + -140 | 0;
  HEAP32[i1 + -140 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i10 = i1 + -136 | 0;
  i3 = i2 + -136 | 0;
  HEAP32[i10 >> 2] = 0;
  i11 = i1 + -132 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -128 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  i10 = i2 + -132 | 0;
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i11 = i2 + -128 | 0;
  HEAP32[i1 + -128 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i3 = i1 + -124 | 0;
  i10 = i2 + -124 | 0;
  HEAP32[i3 >> 2] = 0;
  i11 = i1 + -120 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -116 >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
  i3 = i2 + -120 | 0;
  HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
  i11 = i2 + -116 | 0;
  HEAP32[i1 + -116 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i10 = i1 + -112 | 0;
  i3 = i2 + -112 | 0;
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i10 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i10 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  HEAP32[i10 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
  i10 = i1 + -84 | 0;
  i3 = i2 + -84 | 0;
  HEAP32[i10 >> 2] = 0;
  i11 = i1 + -80 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 + -76 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  i10 = i2 + -80 | 0;
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i11 = i2 + -76 | 0;
  HEAP32[i1 + -76 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i1 = i1 + -72 | 0;
  i2 = i2 + -72 | 0;
  i3 = i1 + 72 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i1 = (HEAP32[i7 >> 2] | 0) + -192 | 0;
  HEAP32[i7 >> 2] = i1;
 } while ((i4 | 0) != (i5 | 0));
 i11 = i7;
 i10 = i9;
 i5 = i1;
 i7 = HEAP32[i9 >> 2] | 0;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i11 >> 2] = i7;
 i7 = i8 + 8 | 0;
 i10 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i7 >> 2] = i10;
 i7 = i9 + 8 | 0;
 i10 = i8 + 12 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i10 >> 2] = i9;
 i11 = HEAP32[i11 >> 2] | 0;
 HEAP32[i8 >> 2] = i11;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i13, i14, i10, i6) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i13 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i11 = 17;
   break;
  } else {
   i11 = 16;
   break;
  } else {
   HEAP32[i13 >> 2] = 0;
   i11 = 14;
   break;
  }
 } else i11 = 14; while (0);
 if ((i11 | 0) == 14) if (i3) i11 = 16; else {
  i2 = 0;
  i11 = 17;
 }
 L22 : do if ((i11 | 0) == 16) {
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 6;
  i1 = 0;
 } else if ((i11 | 0) == 17) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i3 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 63](i10, 2048, i1) | 0)) {
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4;
   i1 = 0;
   break;
  }
  i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 63](i10, i1, 0) | 0) << 24 >> 24;
  i3 = HEAP32[i12 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  } else {
   HEAP32[i4 >> 2] = i5 + 4;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  }
  while (1) {
   i1 = i1 + -48 | 0;
   i9 = i8 + -1 | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i5 = 1;
     break;
    } else {
     i5 = (HEAP32[i12 >> 2] | 0) == 0;
     break;
    }
   } else i5 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i13 >> 2] = 0;
     i4 = 0;
     i6 = 0;
     i2 = 1;
     break;
    } else {
     i4 = i7;
     i6 = i7;
     i2 = (i7 | 0) == 0;
     break;
    }
   } else {
    i4 = i7;
    i6 = 0;
    i2 = 1;
   } while (0);
   i3 = HEAP32[i12 >> 2] | 0;
   if (!((i8 | 0) > 1 & (i5 ^ i2))) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 63](i10, 2048, i2) | 0)) break L22;
   i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 63](i10, i2, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   } else {
    HEAP32[i3 >> 2] = i5 + 4;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   }
  }
  do if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i12 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i12 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  do if (i4) {
   i2 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) != -1) if (i3) break L22; else break; else {
    HEAP32[i13 >> 2] = 0;
    i11 = 60;
    break;
   }
  } else i11 = 60; while (0);
  if ((i11 | 0) == 60 ? !i3 : 0) break;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 2;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZN5Shape12checkAddQuadERK4Mat4(i21, i17) {
 i21 = i21 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = i22 + 48 | 0;
 i3 = i22 + 36 | 0;
 i4 = i22 + 24 | 0;
 i10 = i22 + 12 | 0;
 i18 = i22;
 i16 = i17 + 16 | 0;
 i5 = i17 + 32 | 0;
 i6 = i17 + 48 | 0;
 HEAPF32[i1 >> 2] = +HEAPF32[i6 >> 2] + (+HEAPF32[i17 >> 2] * .10000000149011612 + +HEAPF32[i16 >> 2] * .10000000149011612 + +HEAPF32[i5 >> 2] * 0.0);
 i7 = i17 + 4 | 0;
 i8 = i17 + 20 | 0;
 i9 = i17 + 36 | 0;
 i11 = i17 + 52 | 0;
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i11 >> 2] + (+HEAPF32[i7 >> 2] * .10000000149011612 + +HEAPF32[i8 >> 2] * .10000000149011612 + +HEAPF32[i9 >> 2] * 0.0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 24 | 0;
 i14 = i17 + 40 | 0;
 i15 = i17 + 56 | 0;
 HEAPF32[i1 + 8 >> 2] = +HEAPF32[i15 >> 2] + (+HEAPF32[i12 >> 2] * .10000000149011612 + +HEAPF32[i13 >> 2] * .10000000149011612 + +HEAPF32[i14 >> 2] * 0.0);
 i19 = i21 + 4 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = i21 + 8 | 0;
 if (i2 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
  HEAP32[i19 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i21, i1);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 HEAPF32[i3 >> 2] = +HEAPF32[i6 >> 2] + (+HEAPF32[i17 >> 2] * 3.9000000953674316 + +HEAPF32[i16 >> 2] * .10000000149011612 + +HEAPF32[i5 >> 2] * 0.0);
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i11 >> 2] + (+HEAPF32[i7 >> 2] * 3.9000000953674316 + +HEAPF32[i8 >> 2] * .10000000149011612 + +HEAPF32[i9 >> 2] * 0.0);
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i15 >> 2] + (+HEAPF32[i12 >> 2] * 3.9000000953674316 + +HEAPF32[i13 >> 2] * .10000000149011612 + +HEAPF32[i14 >> 2] * 0.0);
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
  HEAP32[i19 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i21, i3);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 HEAPF32[i4 >> 2] = +HEAPF32[i6 >> 2] + (+HEAPF32[i17 >> 2] * 3.9000000953674316 + +HEAPF32[i16 >> 2] * 3.9000000953674316 + +HEAPF32[i5 >> 2] * 0.0);
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i11 >> 2] + (+HEAPF32[i7 >> 2] * 3.9000000953674316 + +HEAPF32[i8 >> 2] * 3.9000000953674316 + +HEAPF32[i9 >> 2] * 0.0);
 HEAPF32[i4 + 8 >> 2] = +HEAPF32[i15 >> 2] + (+HEAPF32[i12 >> 2] * 3.9000000953674316 + +HEAPF32[i13 >> 2] * 3.9000000953674316 + +HEAPF32[i14 >> 2] * 0.0);
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
  HEAP32[i19 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i21, i4);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 HEAPF32[i10 >> 2] = +HEAPF32[i6 >> 2] + (+HEAPF32[i17 >> 2] * .10000000149011612 + +HEAPF32[i16 >> 2] * 3.9000000953674316 + +HEAPF32[i5 >> 2] * 0.0);
 HEAPF32[i10 + 4 >> 2] = +HEAPF32[i11 >> 2] + (+HEAPF32[i7 >> 2] * .10000000149011612 + +HEAPF32[i8 >> 2] * 3.9000000953674316 + +HEAPF32[i9 >> 2] * 0.0);
 HEAPF32[i10 + 8 >> 2] = +HEAPF32[i15 >> 2] + (+HEAPF32[i12 >> 2] * .10000000149011612 + +HEAPF32[i13 >> 2] * 3.9000000953674316 + +HEAPF32[i14 >> 2] * 0.0);
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  i1 = (HEAP32[i19 >> 2] | 0) + 12 | 0;
  HEAP32[i19 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i21, i10);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 HEAPF32[i18 >> 2] = .30000001192092896;
 HEAPF32[i18 + 4 >> 2] = .30000001192092896;
 HEAPF32[i18 + 8 >> 2] = 1.0;
 if (i1 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 12;
  STACKTOP = i22;
  return;
 } else {
  __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i21, i18);
  STACKTOP = i22;
  return;
 }
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZN16BuildControlBase15reCalcBldMinMaxEv(i23) {
 i23 = i23 | 0;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i24 = i35 + 36 | 0;
 i25 = i35 + 32 | 0;
 i26 = i35 + 28 | 0;
 i27 = i35 + 24 | 0;
 i28 = i35 + 20 | 0;
 i29 = i35 + 16 | 0;
 i30 = i35 + 12 | 0;
 i31 = i35 + 8 | 0;
 i33 = i35 + 4 | 0;
 i34 = i35;
 i32 = HEAP32[(HEAP32[i23 + 8 >> 2] | 0) + 116 >> 2] | 0;
 i22 = 0;
 do {
  i7 = HEAP32[i32 + 40 + (i22 * 24 | 0) >> 2] | 0;
  i20 = HEAP32[i32 + 40 + (i22 * 24 | 0) + 4 >> 2] | 0;
  i21 = HEAP32[i32 + 40 + (i22 * 24 | 0) + 8 >> 2] | 0;
  i12 = HEAP32[i32 + 40 + (i22 * 24 | 0) + 12 >> 2] | 0;
  i13 = HEAP32[i32 + 40 + (i22 * 24 | 0) + 16 >> 2] | 0;
  i14 = HEAP32[i32 + 40 + (i22 * 24 | 0) + 20 >> 2] | 0;
  if ((i7 | 0) < (i20 | 0)) {
   i15 = (i21 | 0) < (i12 | 0);
   i16 = (i13 | 0) < (i14 | 0);
   do {
    if (i15) {
     i8 = i7 >>> 0 < 50;
     i10 = i21;
     do {
      if (i16 ? (i17 = i10 >>> 0 < 50, i8) : 0) {
       i11 = i13;
       do {
        do if (i17 & i11 >>> 0 < 50 ? (i18 = i32 + 136 + (i22 * 5e5 | 0) + (i7 * 1e4 | 0) + (i10 * 200 | 0) + (i11 << 2) | 0, i19 = HEAP32[i18 >> 2] | 0, (i19 | 0) != 0) : 0) if ((i19 & 65280 | 0) == 256) {
         HEAP32[i18 >> 2] = 0;
         break;
        } else {
         HEAP32[i18 >> 2] = i19 & 65535;
         break;
        } while (0);
        i11 = i11 + 1 | 0;
       } while ((i11 | 0) != (i14 | 0));
      }
      i10 = i10 + 1 | 0;
     } while ((i10 | 0) != (i12 | 0));
    }
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i20 | 0));
  }
  i22 = i22 + 1 | 0;
 } while ((i22 | 0) != 3);
 __ZN10BuildWorld12reClacLimitsEv(i32);
 i14 = i23 + 1204 | 0;
 d37 = +(HEAP32[i32 + 40 >> 2] | 0);
 d4 = +(HEAP32[i32 + 48 >> 2] | 0);
 d3 = +(HEAP32[i32 + 56 >> 2] | 0);
 HEAPF32[i23 + 1204 >> 2] = d37;
 i15 = i23 + 1208 | 0;
 HEAPF32[i15 >> 2] = d4;
 i16 = i23 + 1212 | 0;
 HEAPF32[i16 >> 2] = d3;
 i17 = i23 + 1216 | 0;
 d5 = +(HEAP32[i32 + 44 >> 2] | 0);
 d9 = +(HEAP32[i32 + 52 >> 2] | 0);
 d2 = +(HEAP32[i32 + 60 >> 2] | 0);
 HEAPF32[i23 + 1216 >> 2] = d5;
 i18 = i23 + 1220 | 0;
 HEAPF32[i18 >> 2] = d9;
 i13 = i23 + 1224 | 0;
 HEAPF32[i13 >> 2] = d2;
 d36 = +(HEAP32[i32 + 72 >> 2] | 0);
 d1 = +(HEAP32[i32 + 64 >> 2] | 0);
 d6 = +(HEAP32[i32 + 80 >> 2] | 0);
 HEAPF32[i24 >> 2] = d36;
 HEAPF32[i25 >> 2] = d1;
 HEAPF32[i26 >> 2] = d6;
 i24 = HEAP32[(d37 < d36 ? i14 : i24) >> 2] | 0;
 HEAP32[i14 >> 2] = i24;
 i7 = HEAP32[(d4 < d1 ? i15 : i25) >> 2] | 0;
 HEAP32[i15 >> 2] = i7;
 i8 = HEAP32[(d3 < d6 ? i16 : i26) >> 2] | 0;
 HEAP32[i16 >> 2] = i8;
 d6 = +(HEAP32[i32 + 76 >> 2] | 0);
 d3 = +(HEAP32[i32 + 68 >> 2] | 0);
 d1 = +(HEAP32[i32 + 84 >> 2] | 0);
 HEAPF32[i27 >> 2] = d6;
 HEAPF32[i28 >> 2] = d3;
 HEAPF32[i29 >> 2] = d1;
 i10 = HEAP32[(d5 < d6 ? i27 : i17) >> 2] | 0;
 HEAP32[i17 >> 2] = i10;
 i11 = HEAP32[(d9 < d3 ? i28 : i18) >> 2] | 0;
 HEAP32[i18 >> 2] = i11;
 i12 = HEAP32[(d2 < d1 ? i29 : i13) >> 2] | 0;
 HEAP32[i13 >> 2] = i12;
 d1 = +(HEAP32[i32 + 96 >> 2] | 0);
 d2 = +(HEAP32[i32 + 104 >> 2] | 0);
 d3 = +(HEAP32[i32 + 88 >> 2] | 0);
 HEAPF32[i30 >> 2] = d2;
 HEAPF32[i31 >> 2] = d3;
 d9 = (HEAP32[tempDoublePtr >> 2] = i24, +HEAPF32[tempDoublePtr >> 2]) < d1 ? +HEAPF32[i14 >> 2] : d1;
 d6 = (HEAP32[tempDoublePtr >> 2] = i7, +HEAPF32[tempDoublePtr >> 2]) < d2 ? +HEAPF32[i15 >> 2] : +HEAPF32[i30 >> 2];
 d5 = (HEAP32[tempDoublePtr >> 2] = i8, +HEAPF32[tempDoublePtr >> 2]) < d3 ? +HEAPF32[i16 >> 2] : +HEAPF32[i31 >> 2];
 d1 = +(HEAP32[i32 + 100 >> 2] | 0);
 d3 = +(HEAP32[i32 + 108 >> 2] | 0);
 d4 = +(HEAP32[i32 + 92 >> 2] | 0);
 HEAPF32[i33 >> 2] = d3;
 HEAPF32[i34 >> 2] = d4;
 d2 = (HEAP32[tempDoublePtr >> 2] = i10, +HEAPF32[tempDoublePtr >> 2]) < d1 ? d1 : +HEAPF32[i17 >> 2];
 d1 = (HEAP32[tempDoublePtr >> 2] = i11, +HEAPF32[tempDoublePtr >> 2]) < d3 ? +HEAPF32[i33 >> 2] : +HEAPF32[i18 >> 2];
 d37 = (HEAP32[tempDoublePtr >> 2] = i12, +HEAPF32[tempDoublePtr >> 2]) < d4 ? +HEAPF32[i34 >> 2] : +HEAPF32[i13 >> 2];
 HEAPF32[i17 >> 2] = d2 + -1.0;
 HEAPF32[i18 >> 2] = d1 + -1.0;
 HEAPF32[i13 >> 2] = d37 + -1.0;
 HEAPF32[i14 >> 2] = d9 + 1.0 + -1.0;
 HEAPF32[i15 >> 2] = d6 + 1.0 + -1.0;
 HEAPF32[i16 >> 2] = d5 + 1.0 + -1.0;
 STACKTOP = i35;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 32 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 48 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16144) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, 35415, 35441, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i20 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i4 = (i1 | 0) == 0;
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i4) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i4) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 13;
    break;
   }
  } else i23 = 13; while (0);
  if ((i23 | 0) == 13) {
   i23 = 0;
   if (i4) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i2, 0);
   i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i2 + i4;
  }
  i5 = i1 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAPU8[i4 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i4 & 255, 16, i2, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i2 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 36799, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i23 = 37;
   break;
  }
  if (!i1) i23 = 38;
 } else i23 = 37; while (0);
 if ((i23 | 0) == 37 ? i1 : 0) i23 = 38;
 if ((i23 | 0) == 38) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNSt3__16locale5__impC2Ej(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 16120;
 i2 = i4 + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4 + 144 | 0, 36802, 1);
 i2 = HEAP32[i2 >> 2] | 0;
 i3 = i4 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 HEAP32[1043] = 0;
 HEAP32[1042] = 15048;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i4, 4168);
 HEAP32[1045] = 0;
 HEAP32[1044] = 15088;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i4, 4176);
 __ZNSt3__15ctypeIcEC2EPKtbj(4184, 0, 0, 1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i4, 4184);
 HEAP32[1051] = 0;
 HEAP32[1050] = 16408;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i4, 4200);
 HEAP32[1053] = 0;
 HEAP32[1052] = 16476;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i4, 4208);
 HEAP32[1055] = 0;
 HEAP32[1054] = 16228;
 HEAP32[1056] = __ZNSt3__16__clocEv() | 0;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i4, 4216);
 HEAP32[1059] = 0;
 HEAP32[1058] = 16524;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i4, 4232);
 HEAP32[1061] = 0;
 HEAP32[1060] = 16572;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i4, 4240);
 __ZNSt3__18numpunctIcEC2Ej(4248, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i4, 4248);
 __ZNSt3__18numpunctIwEC2Ej(4272, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i4, 4272);
 HEAP32[1077] = 0;
 HEAP32[1076] = 15128;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4304);
 HEAP32[1079] = 0;
 HEAP32[1078] = 15200;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4312);
 HEAP32[1081] = 0;
 HEAP32[1080] = 15272;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4320);
 HEAP32[1083] = 0;
 HEAP32[1082] = 15332;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4328);
 HEAP32[1085] = 0;
 HEAP32[1084] = 15640;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i4, 4336);
 HEAP32[1087] = 0;
 HEAP32[1086] = 15704;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i4, 4344);
 HEAP32[1089] = 0;
 HEAP32[1088] = 15768;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i4, 4352);
 HEAP32[1091] = 0;
 HEAP32[1090] = 15832;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i4, 4360);
 HEAP32[1093] = 0;
 HEAP32[1092] = 15896;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4368);
 HEAP32[1095] = 0;
 HEAP32[1094] = 15932;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4376);
 HEAP32[1097] = 0;
 HEAP32[1096] = 15968;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4384);
 HEAP32[1099] = 0;
 HEAP32[1098] = 16004;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4392);
 HEAP32[1101] = 0;
 HEAP32[1100] = 15392;
 HEAP32[1102] = 15440;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4400);
 HEAP32[1105] = 0;
 HEAP32[1104] = 15484;
 HEAP32[1106] = 15532;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4416);
 HEAP32[1109] = 0;
 HEAP32[1108] = 16388;
 HEAP32[1110] = __ZNSt3__16__clocEv() | 0;
 HEAP32[1108] = 15576;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 4432);
 HEAP32[1113] = 0;
 HEAP32[1112] = 16388;
 HEAP32[1114] = __ZNSt3__16__clocEv() | 0;
 HEAP32[1112] = 15608;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 4448);
 HEAP32[1117] = 0;
 HEAP32[1116] = 16040;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i4, 4464);
 HEAP32[1119] = 0;
 HEAP32[1118] = 16080;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i4, 4472);
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i14, i15, i11, i6) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i12 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i14 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i14 >> 2] = 0;
   i13 = 11;
   break;
  }
  if (i2) i13 = 13; else i13 = 12;
 } else i13 = 11; while (0);
 if ((i13 | 0) == 11) if (i2) i13 = 12; else {
  i1 = 0;
  i13 = 13;
 }
 L16 : do if ((i13 | 0) == 12) {
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 6;
  i1 = 0;
 } else if ((i13 | 0) == 13) {
  i2 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
  i3 = i2 & 255;
  if (i3 << 24 >> 24 > -1 ? (i10 = i11 + 8 | 0, (HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048) != 0) : 0) {
   i5 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 63](i11, i3, 0) | 0) << 24 >> 24;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   } else {
    HEAP32[i3 >> 2] = i4 + 1;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   }
   while (1) {
    i1 = i1 + -48 | 0;
    i9 = i8 + -1 | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
      HEAP32[i12 >> 2] = 0;
      i2 = 0;
      break;
     } else {
      i2 = HEAP32[i12 >> 2] | 0;
      break;
     }
    } else i2 = 0; while (0);
    i4 = (i2 | 0) == 0;
    if (i6) if ((HEAP32[i6 + 12 >> 2] | 0) == (HEAP32[i6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0) == -1) {
     HEAP32[i14 >> 2] = 0;
     i3 = 0;
     i6 = 0;
    } else {
     i3 = i7;
     i6 = i7;
    } else i3 = i7; else {
     i3 = i7;
     i6 = 0;
    }
    i2 = HEAP32[i12 >> 2] | 0;
    if (!((i8 | 0) > 1 & (i4 ^ (i6 | 0) == 0))) break;
    i4 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i4 >> 0] | 0;
    i4 = i2 & 255;
    if (i4 << 24 >> 24 <= -1) break L16;
    if (!(HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break L16;
    i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 63](i11, i4, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    i4 = i2 + 12 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i8 = i9;
     i7 = i3;
     continue;
    } else {
     HEAP32[i4 >> 2] = i5 + 1;
     i8 = i9;
     i7 = i3;
     continue;
    }
   }
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i12 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
     HEAP32[i14 >> 2] = 0;
     i13 = 50;
     break;
    }
    if (i2) break L16;
   } else i13 = 50; while (0);
   if ((i13 | 0) == 50 ? !i2 : 0) break;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
   break;
  }
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 4;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNK4Mesh5paintEb(i14, i4) {
 i14 = i14 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 i3 = HEAP32[i14 >> 2] | 0;
 i12 = (i3 | 0) != 0;
 i5 = i12 ? i3 + 36 | 0 : i14 + 132 | 0;
 i3 = i12 ? i3 + 24 | 0 : i14 + 120 | 0;
 i12 = i3 + 8 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  STACKTOP = i15;
  return;
 }
 i9 = __ZN13ShaderProgram8currenttI11BaseProgramEEPT_v() | 0;
 i1 = HEAP32[1280] | 0;
 if (!i1) {
  i2 = 0;
  i10 = 0;
 } else {
  i2 = ___dynamic_cast(i1, 2368, 2424, 0) | 0;
  i10 = ___dynamic_cast(i1, 2368, 2408, 0) | 0;
 };
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 i1 = i9 + 140 | 0;
 if ((HEAP32[i1 >> 2] | 0) != -1) {
  _glBindBuffer(34962, HEAP32[i3 >> 2] | 0);
  _glEnableVertexAttribArray(HEAP32[i1 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 3, 5126, 0, 0, 0);
 }
 do if (i2) {
  i1 = i2 + 280 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = (i2 | 0) == -1;
  if (!(HEAP8[i14 + 96 >> 0] | 0)) {
   if (i3) break;
   _glDisableVertexAttribArray(i2 | 0);
   _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 1, 5121, 0, 0, 0);
   break;
  } else {
   if (i3) break;
   _glBindBuffer(34962, HEAP32[i5 >> 2] | 0);
   _glEnableVertexAttribArray(HEAP32[i1 >> 2] | 0);
   _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 3, 5126, 0, 0, 0);
   break;
  }
 } while (0);
 do if (i4) {
  i1 = i9 + 120 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = (i2 | 0) == -1;
  if (!(HEAP8[i14 + 98 >> 0] | 0)) {
   if (!i3) {
    _glDisableVertexAttribArray(i2 | 0);
    _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 1, 5121, 0, 0, 0);
   }
  } else if (!i3) {
   _glBindBuffer(34962, HEAP32[i14 + 156 >> 2] | 0);
   _glEnableVertexAttribArray(HEAP32[i1 >> 2] | 0);
   _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 4, 5121, 1, 0, 0);
  }
  if (((i10 | 0) != 0 ? (i7 = i10 + 180 | 0, i8 = HEAP32[i7 >> 2] | 0, (i8 | 0) != -1) : 0) ? (_glVertexAttrib1f(i8 | 0, 0.0), i6 = HEAP32[i7 >> 2] | 0, (i6 | 0) != -1) : 0) {
   _glDisableVertexAttribArray(i6 | 0);
   _glVertexAttribPointer(HEAP32[i7 >> 2] | 0, 1, 5121, 0, 0, 0);
  }
 } else {
  i3 = i9 + 120 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = (i1 | 0) == -1;
  do if (!(HEAP8[i14 + 97 >> 0] | 0)) {
   if (!i2) {
    _glDisableVertexAttribArray(i1 | 0);
    _glVertexAttribPointer(HEAP32[i3 >> 2] | 0, 1, 5121, 0, 0, 0);
   }
   if (HEAP8[i14 + 100 >> 0] | 0) {
    i1 = HEAP32[i9 + 100 >> 2] | 0;
    i2 = i14 + 80 | 0;
    if ((i1 | 0) != -1) {
     _glUniform4fv(i1 | 0, 1, i2 | 0);
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    if ((i1 | 0) != -1) _glVertexAttrib4fv(i1 | 0, i2 | 0);
   }
  } else if (!i2) {
   _glBindBuffer(34962, HEAP32[i14 + 144 >> 2] | 0);
   _glEnableVertexAttribArray(HEAP32[i3 >> 2] | 0);
   _glVertexAttribPointer(HEAP32[i3 >> 2] | 0, 4, 5126, 0, 0, 0);
  } while (0);
  if (i10) {
   i1 = i10 + 180 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = (i2 | 0) == -1;
   if (HEAP8[i14 + 101 >> 0] | 0) {
    if (i3) break;
    _glBindBuffer(34962, HEAP32[i14 + 168 >> 2] | 0);
    _glEnableVertexAttribArray(HEAP32[i1 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 1, 5126, 0, 0, 0);
    break;
   }
   if (!i3 ? (_glVertexAttrib1f(i2 | 0, 0.0), i11 = HEAP32[i1 >> 2] | 0, (i11 | 0) != -1) : 0) {
    _glDisableVertexAttribArray(i11 | 0);
    _glVertexAttribPointer(HEAP32[i1 >> 2] | 0, 1, 5121, 0, 0, 0);
   }
  }
 } while (0);
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 switch (HEAP32[i14 + 104 >> 2] | 0) {
 case 1:
  {
   i1 = 1;
   break;
  }
 case 2:
  {
   i1 = 4;
   break;
  }
 case 4:
  {
   i1 = 5;
   break;
  }
 case 5:
  {
   i1 = 6;
   break;
  }
 default:
  {
   i15 = ___cxa_allocate_exception(8) | 0;
   HEAP32[i15 >> 2] = 7152;
   HEAP32[i15 + 4 >> 2] = 21278;
   ___cxa_throw(i15 | 0, 2608, 44);
  }
 }
 if (!(HEAP8[i14 + 99 >> 0] | 0)) _glDrawArrays(i1 | 0, 0, HEAP32[i12 >> 2] | 0); else {
  _glBindBuffer(34963, HEAP32[i14 + 180 >> 2] | 0);
  _glDrawElements(i1 | 0, HEAP32[i14 + 188 >> 2] | 0, 5123, 0);
 };
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i15;
 return;
}

function _mbsrtowcs(i5, i10, i1, i3) {
 i5 = i5 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i4 = HEAP32[i3 >> 2] | 0, (i4 | 0) != 0) : 0) if (!i5) {
  i3 = i1;
  i6 = i2;
  i9 = 16;
 } else {
  HEAP32[i3 >> 2] = 0;
  i8 = i5;
  i3 = i1;
  i7 = i4;
  i9 = 37;
 } else if (!i5) {
  i3 = i1;
  i9 = 7;
 } else {
  i4 = i5;
  i3 = i1;
  i9 = 6;
 }
 L7 : while (1) if ((i9 | 0) == 6) {
  if (!i3) {
   i9 = 26;
   break;
  } else i5 = i4;
  while (1) {
   i4 = HEAP8[i2 >> 0] | 0;
   do if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? i3 >>> 0 > 4 & (i2 & 3 | 0) == 0 : 0) {
    i6 = i2;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if ((i2 + -16843009 | i2) & -2139062144) {
      i4 = i2;
      i2 = i6;
      i9 = 32;
      break;
     }
     HEAP32[i5 >> 2] = i2 & 255;
     HEAP32[i5 + 4 >> 2] = HEAPU8[i6 + 1 >> 0];
     HEAP32[i5 + 8 >> 2] = HEAPU8[i6 + 2 >> 0];
     i2 = i6 + 4 | 0;
     i4 = i5 + 16 | 0;
     HEAP32[i5 + 12 >> 2] = HEAPU8[i6 + 3 >> 0];
     i3 = i3 + -4 | 0;
     if (i3 >>> 0 > 4) {
      i5 = i4;
      i6 = i2;
     } else {
      i9 = 31;
      break;
     }
    }
    if ((i9 | 0) == 31) {
     i5 = i4;
     i4 = HEAP8[i2 >> 0] | 0;
     break;
    } else if ((i9 | 0) == 32) {
     i4 = i4 & 255;
     break;
    }
   } while (0);
   i4 = i4 & 255;
   if ((i4 + -1 | 0) >>> 0 >= 127) break;
   i2 = i2 + 1 | 0;
   HEAP32[i5 >> 2] = i4;
   i3 = i3 + -1 | 0;
   if (!i3) {
    i9 = 26;
    break L7;
   } else i5 = i5 + 4 | 0;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i8 = i5;
  i7 = HEAP32[9080 + (i4 << 2) >> 2] | 0;
  i2 = i2 + 1 | 0;
  i9 = 37;
  continue;
 } else if ((i9 | 0) == 7) {
  i4 = HEAP8[i2 >> 0] | 0;
  if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? (i2 & 3 | 0) == 0 : 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   if (!((i4 + -16843009 | i4) & -2139062144)) do {
    i2 = i2 + 4 | 0;
    i3 = i3 + -4 | 0;
    i4 = HEAP32[i2 >> 2] | 0;
   } while (((i4 + -16843009 | i4) & -2139062144 | 0) == 0);
   i4 = i4 & 255;
  }
  i4 = i4 & 255;
  if ((i4 + -1 | 0) >>> 0 < 127) {
   i3 = i3 + -1 | 0;
   i2 = i2 + 1 | 0;
   i9 = 7;
   continue;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i4 = HEAP32[9080 + (i4 << 2) >> 2] | 0;
  i6 = i2 + 1 | 0;
  i9 = 16;
  continue;
 } else if ((i9 | 0) == 16) {
  i9 = (HEAPU8[i6 >> 0] | 0) >>> 3;
  if ((i9 + -16 | i9 + (i4 >> 26)) >>> 0 > 7) {
   i9 = 17;
   break;
  }
  i2 = i6 + 1 | 0;
  if (i4 & 33554432) {
   if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
    i9 = 20;
    break;
   }
   i2 = i6 + 2 | 0;
   if (i4 & 524288) {
    if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
     i9 = 23;
     break;
    }
    i2 = i6 + 3 | 0;
   }
  }
  i3 = i3 + -1 | 0;
  i9 = 7;
  continue;
 } else if ((i9 | 0) == 37) {
  i4 = HEAPU8[i2 >> 0] | 0;
  i9 = i4 >>> 3;
  if ((i9 + -16 | i9 + (i7 >> 26)) >>> 0 > 7) {
   i9 = 38;
   break;
  }
  i6 = i2 + 1 | 0;
  i5 = i4 + -128 | i7 << 6;
  if ((i5 | 0) < 0) {
   i4 = HEAPU8[i6 >> 0] | 0;
   if ((i4 & 192 | 0) != 128) {
    i9 = 41;
    break;
   }
   i6 = i2 + 2 | 0;
   i5 = i4 + -128 | i5 << 6;
   if ((i5 | 0) < 0) {
    i4 = HEAPU8[i6 >> 0] | 0;
    if ((i4 & 192 | 0) != 128) {
     i9 = 44;
     break;
    }
    i5 = i4 + -128 | i5 << 6;
    i2 = i2 + 3 | 0;
   } else i2 = i6;
  } else i2 = i6;
  HEAP32[i8 >> 2] = i5;
  i4 = i8 + 4 | 0;
  i3 = i3 + -1 | 0;
  i9 = 6;
  continue;
 }
 if ((i9 | 0) == 17) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 20) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 23) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 26) HEAP32[i10 >> 2] = i2; else if ((i9 | 0) == 38) {
  i5 = i8;
  i4 = i7;
  i2 = i2 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 41) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 } else if ((i9 | 0) == 44) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 }
 if ((i9 | 0) == 47) if (!i4) i9 = 48; else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 48) if (!(HEAP8[i2 >> 0] | 0)) {
  if (i5) {
   HEAP32[i5 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
  }
  i1 = i1 - i3 | 0;
 } else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 52) {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  if (!i3) i1 = -1; else {
   HEAP32[i10 >> 2] = i1;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function __ZN4Cube12maskAssembleEi(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 1328 | 0;
 i6 = i12;
 i7 = i11 + 60 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i8 + (i10 * 52 | 0) | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 do if ((i1 | 0) >= 0) {
  __ZN4Cube9rmvPicArrERK6PicArri(i11, (HEAP32[(HEAP32[1556] | 0) + 76 >> 2] | 0) + ((HEAP32[(HEAP32[(HEAP32[i11 + 32 >> 2] | 0) + 24 >> 2] | 0) + (i1 << 4) >> 2] | 0) * 900 | 0) + 4 + ((HEAP32[i8 + (i10 * 52 | 0) + 4 >> 2] | 0) * 108 | 0) | 0, i10);
  i2 = (HEAP32[i11 + 72 >> 2] | 0) + (HEAP32[i9 >> 2] << 3) | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  i2 = HEAP32[i8 + (i10 * 52 | 0) + 40 >> 2] | 0;
  i4 = (HEAP32[i8 + (i10 * 52 | 0) + 44 >> 2] | 0) - i2 >> 3;
  i1 = i8 + (i10 * 52 | 0) + 8 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) {
   HEAP32[i9 >> 2] = -1;
   HEAP32[i8 + (i10 * 52 | 0) + 4 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   if (!(HEAP32[i8 + (i10 * 52 | 0) + 16 >> 2] | 0)) {
    i11 = 0;
    STACKTOP = i12;
    return i11 | 0;
   }
   _memset(HEAP32[i8 + (i10 * 52 | 0) + 20 >> 2] | 0, 0, HEAP32[i8 + (i10 * 52 | 0) + 12 >> 2] << 2 | 0) | 0;
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  } else {
   if (!(HEAP8[i11 >> 0] | 0)) i1 = 1; else {
    i1 = ((HEAP32[1557] | 0) * 214013 | 0) + 2531011 | 0;
    HEAP32[1557] = i1;
    i1 = (i1 >>> 16 >>> 0) % (i4 >>> 0) | 0;
   }
   i3 = HEAP32[i8 + (i10 * 52 | 0) + 20 >> 2] | 0;
   if (!(HEAP32[i3 + (((i1 | 0) / 32 | 0) << 2) >> 2] & 1 << (i1 & 31))) break;
   do i1 = (i1 + 1 | 0) % (i4 | 0) | 0; while ((HEAP32[i3 + (((i1 | 0) / 32 | 0) << 2) >> 2] & 1 << (i1 & 31) | 0) != 0);
  }
 } else {
  if ((i1 | 0) == -2) {
   i4 = i8 + (i10 * 52 | 0) + 24 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i2 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
   _memcpy(i6 | 0, i2 + (i5 * 1328 | 0) | 0, 1004) | 0;
   HEAP32[i6 + 1004 >> 2] = HEAP32[i2 + (i5 * 1328 | 0) + 1004 >> 2];
   i3 = HEAP32[i2 + (i5 * 1328 | 0) + 1008 >> 2] | 0;
   HEAP32[i6 + 1008 >> 2] = i3;
   i1 = (i3 | 0) == 0;
   if (i1) i1 = 1; else __ZNSt3__119__shared_weak_count12__add_sharedEv(i3);
   _memcpy(i6 + 1012 | 0, i2 + (i5 * 1328 | 0) + 1012 | 0, 316) | 0;
   i5 = i8 + (i10 * 52 | 0) + 28 | 0;
   __ZN4Cube9rmvPicArrERK6PicArri(i11, i6 + 116 + ((HEAP32[i5 >> 2] | 0) * 108 | 0) | 0, i10);
   HEAP32[i4 >> 2] = -1;
   HEAP32[i5 >> 2] = -1;
   if (!i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
  }
  if (__ZN4Cube18makePossibilities2EiR10ShapePlace(i11, i10, i9) | 0) if (!(HEAP8[i11 >> 0] | 0)) {
   i2 = HEAP32[i8 + (i10 * 52 | 0) + 40 >> 2] | 0;
   i1 = 0;
   break;
  } else {
   i6 = ((HEAP32[1557] | 0) * 214013 | 0) + 2531011 | 0;
   HEAP32[1557] = i6;
   i1 = HEAP32[i8 + (i10 * 52 | 0) + 40 >> 2] | 0;
   i2 = i1;
   i1 = (i6 >>> 16 >>> 0) % ((HEAP32[i8 + (i10 * 52 | 0) + 44 >> 2] | 0) - i1 >> 3 >>> 0) | 0;
   break;
  }
  HEAP32[i9 >> 2] = -1;
  HEAP32[i8 + (i10 * 52 | 0) + 4 >> 2] = 0;
  HEAP32[i8 + (i10 * 52 | 0) + 8 >> 2] = 0;
  if (!(HEAP32[i8 + (i10 * 52 | 0) + 16 >> 2] | 0)) {
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  }
  _memset(HEAP32[i8 + (i10 * 52 | 0) + 20 >> 2] | 0, 0, HEAP32[i8 + (i10 * 52 | 0) + 12 >> 2] << 2 | 0) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } while (0);
 i5 = HEAP32[i2 + (i1 << 3) >> 2] | 0;
 i2 = HEAP32[i2 + (i1 << 3) + 4 >> 2] | 0;
 i3 = (HEAP32[i8 + (i10 * 52 | 0) + 20 >> 2] | 0) + (((i1 | 0) / 32 | 0) << 2) | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = 1 << (i1 & 31);
 if (!(i4 & i1)) {
  HEAP32[i3 >> 2] = i4 | i1;
  i6 = i8 + (i10 * 52 | 0) + 8 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 + (i10 * 52 | 0) + 4 >> 2] = i2;
 i8 = (HEAP32[i11 + 72 >> 2] | 0) + (i5 << 3) | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 i7 = HEAP32[i7 >> 2] | 0;
 i8 = i7 + (i10 * 52 | 0) + 4 | 0;
 i7 = i7 + (i10 * 52 | 0) | 0;
 i9 = (HEAP32[(HEAP32[1556] | 0) + 76 >> 2] | 0) + ((HEAP32[(HEAP32[(HEAP32[i11 + 32 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i7 >> 2] << 4) >> 2] | 0) * 900 | 0) + 4 + ((HEAP32[i8 >> 2] | 0) * 108 | 0) | 0;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i8 >> 2] = i2;
 __ZN4Cube9putPicArrERK6PicArri(i11, i9, i10);
 i11 = 1;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNK5Shape17startNeiTransformER8MatStack(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i11 + 64 | 0;
 i6 = i11;
 i3 = i10;
 i4 = i3 + 60 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAPF32[i10 >> 2] = 1.0;
 HEAPF32[i10 + 20 >> 2] = 1.0;
 HEAPF32[i10 + 40 >> 2] = 1.0;
 HEAPF32[i10 + 60 >> 2] = 1.0;
 i9 = HEAP32[i1 + 44 >> 2] | 0;
 d7 = +((HEAP32[i1 + 68 >> 2] | 0) + -96 + (HEAP32[i9 + 4 >> 2] | 0) | 0);
 d8 = +((HEAP32[i1 + 76 >> 2] | 0) + -96 + (HEAP32[i9 + 8 >> 2] | 0) | 0);
 d2 = +((HEAP32[i1 + 60 >> 2] | 0) + -96 + (HEAP32[i9 + 12 >> 2] | 0) | 0);
 i3 = i6;
 i1 = i10;
 i4 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5;
 i4 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i1 = 0;
 do {
  d14 = +HEAPF32[i6 + (i1 << 2) >> 2];
  i19 = i1 + 4 | 0;
  d13 = +HEAPF32[i6 + (i19 << 2) >> 2];
  d17 = d13 * 0.0;
  i3 = i1 + 8 | 0;
  d12 = +HEAPF32[i6 + (i3 << 2) >> 2];
  d20 = d12 * 0.0;
  i4 = i1 + 12 | 0;
  d15 = +HEAPF32[i6 + (i4 << 2) >> 2];
  d16 = d15 * 0.0;
  HEAPF32[i5 + (i1 << 2) >> 2] = d14 + 0.0 + d17 + d20 + d16;
  d18 = d14 * 0.0 + 0.0;
  HEAPF32[i5 + (i19 << 2) >> 2] = d13 + d18 + d20 + d16;
  HEAPF32[i5 + (i3 << 2) >> 2] = d12 + (d18 + d17) + d16;
  HEAPF32[i5 + (i4 << 2) >> 2] = d15 + (d7 * d14 + 0.0 + d8 * d13 + d2 * d12);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i5 | 0) != (i10 | 0)) {
  i3 = i10;
  i1 = i5;
  i4 = i3 + 64 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i4 | 0));
 }
 i3 = i6;
 i1 = i10;
 i4 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5;
 i4 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 d13 = +HEAPF32[i6 >> 2];
 d20 = +HEAPF32[i6 + 16 >> 2];
 d15 = d20 * 0.0;
 d17 = +HEAPF32[i6 + 32 >> 2];
 d18 = d17 * 0.0;
 d16 = +HEAPF32[i6 + 48 >> 2];
 d14 = d16 * 0.0;
 HEAPF32[i5 >> 2] = d13 + 0.0 + d15 + d18 + d14;
 d13 = d13 * 0.0 + 0.0;
 HEAPF32[i5 + 16 >> 2] = d20 + d13 + d18 + d14;
 d15 = d13 + d15;
 HEAPF32[i5 + 32 >> 2] = d15 - d17 + d14;
 HEAPF32[i5 + 48 >> 2] = d16 + (d15 + d18);
 d18 = +HEAPF32[i6 + 4 >> 2];
 d15 = +HEAPF32[i6 + 20 >> 2];
 d16 = d15 * 0.0;
 d14 = +HEAPF32[i6 + 36 >> 2];
 d17 = d14 * 0.0;
 d13 = +HEAPF32[i6 + 52 >> 2];
 d20 = d13 * 0.0;
 HEAPF32[i5 + 4 >> 2] = d18 + 0.0 + d16 + d17 + d20;
 d18 = d18 * 0.0 + 0.0;
 HEAPF32[i5 + 20 >> 2] = d15 + d18 + d17 + d20;
 d16 = d18 + d16;
 HEAPF32[i5 + 36 >> 2] = d16 - d14 + d20;
 HEAPF32[i5 + 52 >> 2] = d13 + (d16 + d17);
 d17 = +HEAPF32[i6 + 8 >> 2];
 d16 = +HEAPF32[i6 + 24 >> 2];
 d13 = d16 * 0.0;
 d20 = +HEAPF32[i6 + 40 >> 2];
 d14 = d20 * 0.0;
 d18 = +HEAPF32[i6 + 56 >> 2];
 d15 = d18 * 0.0;
 HEAPF32[i5 + 8 >> 2] = d17 + 0.0 + d13 + d14 + d15;
 d17 = d17 * 0.0 + 0.0;
 HEAPF32[i5 + 24 >> 2] = d16 + d17 + d14 + d15;
 d13 = d17 + d13;
 HEAPF32[i5 + 40 >> 2] = d13 - d20 + d15;
 HEAPF32[i5 + 56 >> 2] = d18 + (d13 + d14);
 d14 = +HEAPF32[i6 + 12 >> 2];
 d13 = +HEAPF32[i6 + 28 >> 2];
 d18 = d13 * 0.0;
 d15 = +HEAPF32[i6 + 44 >> 2];
 d20 = d15 * 0.0;
 d17 = +HEAPF32[i6 + 60 >> 2];
 d16 = d17 * 0.0;
 HEAPF32[i5 + 12 >> 2] = d14 + 0.0 + d18 + d20 + d16;
 d14 = d14 * 0.0 + 0.0;
 HEAPF32[i5 + 28 >> 2] = d13 + d14 + d20 + d16;
 d18 = d14 + d18;
 HEAPF32[i5 + 44 >> 2] = d18 - d15 + d16;
 HEAPF32[i5 + 60 >> 2] = d17 + (d18 + d20);
 if ((i5 | 0) != (i10 | 0)) {
  i3 = i10;
  i1 = i5;
  i4 = i3 + 64 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i4 | 0));
 }
 switch (HEAP32[i9 >> 2] | 0) {
 case 0:
  {
   __ZN4Mat46rotateEffff(i10, 90.0, 0.0, 1.0, 0.0);
   STACKTOP = i11;
   return;
  }
 case 1:
  {
   __ZN4Mat46rotateEffff(i10, -90.0, 1.0, 0.0, 0.0);
   STACKTOP = i11;
   return;
  }
 default:
  {
   STACKTOP = i11;
   return;
  }
 }
}

function __ZN6PicDefC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = -1;
 HEAP32[i1 + 4 >> 2] = -1;
 HEAP8[i1 + 108 >> 0] = 0;
 HEAP32[i1 + 112 >> 2] = -1;
 i2 = i1 + 8 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 216 >> 0] = 0;
 HEAP32[i1 + 220 >> 2] = -1;
 i2 = i1 + 116 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 324 >> 0] = 0;
 HEAP32[i1 + 328 >> 2] = -1;
 i2 = i1 + 224 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 432 >> 0] = 0;
 HEAP32[i1 + 436 >> 2] = -1;
 i2 = i1 + 332 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 540 >> 0] = 0;
 HEAP32[i1 + 544 >> 2] = -1;
 i2 = i1 + 440 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 648 >> 0] = 0;
 HEAP32[i1 + 652 >> 2] = -1;
 i2 = i1 + 548 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 756 >> 0] = 0;
 HEAP32[i1 + 760 >> 2] = -1;
 i2 = i1 + 656 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 864 >> 0] = 0;
 HEAP32[i1 + 868 >> 2] = -1;
 i2 = i1 + 764 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP8[i1 + 972 >> 0] = 0;
 HEAP32[i1 + 976 >> 2] = -1;
 i2 = i1 + 872 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i1 + 980 >> 2] = 0;
 HEAP32[i1 + 984 >> 2] = -1;
 HEAP32[i1 + 988 >> 2] = -1;
 HEAP32[i1 + 992 >> 2] = 0;
 HEAP32[i1 + 996 >> 2] = 0;
 HEAP32[i1 + 1e3 >> 2] = 1;
 HEAP32[i1 + 1004 >> 2] = 0;
 HEAP32[i1 + 1008 >> 2] = 0;
 HEAP32[i1 + 1012 >> 2] = -1;
 HEAP32[i1 + 1024 >> 2] = 0;
 HEAP32[i1 + 1028 >> 2] = 0;
 HEAP32[i1 + 1032 >> 2] = -1;
 HEAP32[i1 + 1036 >> 2] = -1;
 HEAP32[i1 + 1040 >> 2] = -1;
 HEAP32[i1 + 1044 >> 2] = -1;
 HEAP32[i1 + 1048 >> 2] = -1;
 HEAP32[i1 + 1052 >> 2] = -1;
 HEAP32[i1 + 1056 >> 2] = -1;
 HEAP32[i1 + 1060 >> 2] = -1;
 HEAP32[i1 + 1064 >> 2] = -1;
 HEAP32[i1 + 1068 >> 2] = -1;
 HEAP32[i1 + 1072 >> 2] = -1;
 HEAP32[i1 + 1076 >> 2] = -1;
 HEAP32[i1 + 1080 >> 2] = -1;
 HEAP32[i1 + 1084 >> 2] = -1;
 HEAP32[i1 + 1088 >> 2] = -1;
 HEAP32[i1 + 1092 >> 2] = -1;
 HEAP32[i1 + 1096 >> 2] = -1;
 HEAP32[i1 + 1100 >> 2] = -1;
 HEAP32[i1 + 1104 >> 2] = -1;
 HEAP32[i1 + 1108 >> 2] = -1;
 HEAP32[i1 + 1112 >> 2] = -1;
 HEAP32[i1 + 1116 >> 2] = -1;
 HEAP32[i1 + 1120 >> 2] = -1;
 HEAP32[i1 + 1124 >> 2] = -1;
 HEAP32[i1 + 1128 >> 2] = -1;
 HEAP32[i1 + 1132 >> 2] = -1;
 HEAP32[i1 + 1136 >> 2] = -1;
 HEAP32[i1 + 1140 >> 2] = -1;
 HEAP32[i1 + 1144 >> 2] = -1;
 HEAP32[i1 + 1148 >> 2] = -1;
 HEAP32[i1 + 1152 >> 2] = -1;
 HEAP32[i1 + 1156 >> 2] = -1;
 HEAP32[i1 + 1160 >> 2] = -1;
 HEAP32[i1 + 1164 >> 2] = -1;
 HEAP32[i1 + 1168 >> 2] = -1;
 HEAP32[i1 + 1172 >> 2] = -1;
 HEAP32[i1 + 1176 >> 2] = -1;
 HEAP32[i1 + 1180 >> 2] = -1;
 HEAP32[i1 + 1184 >> 2] = -1;
 HEAP32[i1 + 1188 >> 2] = -1;
 HEAP32[i1 + 1192 >> 2] = -1;
 HEAP32[i1 + 1196 >> 2] = -1;
 HEAP32[i1 + 1200 >> 2] = -1;
 HEAP32[i1 + 1204 >> 2] = -1;
 HEAP32[i1 + 1208 >> 2] = -1;
 HEAP32[i1 + 1212 >> 2] = -1;
 HEAP32[i1 + 1216 >> 2] = -1;
 HEAP32[i1 + 1220 >> 2] = -1;
 HEAP32[i1 + 1224 >> 2] = -1;
 HEAP32[i1 + 1228 >> 2] = -1;
 HEAP32[i1 + 1232 >> 2] = -1;
 HEAP32[i1 + 1236 >> 2] = -1;
 HEAP32[i1 + 1240 >> 2] = -1;
 HEAP32[i1 + 1244 >> 2] = -1;
 HEAP32[i1 + 1248 >> 2] = -1;
 HEAP32[i1 + 1252 >> 2] = -1;
 HEAP32[i1 + 1256 >> 2] = -1;
 HEAP32[i1 + 1260 >> 2] = -1;
 HEAP32[i1 + 1264 >> 2] = -1;
 HEAP32[i1 + 1268 >> 2] = -1;
 HEAP32[i1 + 1272 >> 2] = -1;
 HEAP32[i1 + 1276 >> 2] = -1;
 HEAP32[i1 + 1280 >> 2] = -1;
 HEAP32[i1 + 1284 >> 2] = -1;
 HEAP32[i1 + 1288 >> 2] = -1;
 HEAP32[i1 + 1292 >> 2] = -1;
 HEAP32[i1 + 1296 >> 2] = -1;
 HEAP32[i1 + 1300 >> 2] = -1;
 HEAP32[i1 + 1304 >> 2] = -1;
 HEAP32[i1 + 1308 >> 2] = -1;
 HEAP32[i1 + 1312 >> 2] = -1;
 HEAP32[i1 + 1316 >> 2] = -1;
 HEAP32[i1 + 1320 >> 2] = -1;
 HEAP32[i1 + 1324 >> 2] = -1;
 return;
}

function __ZN4CubeC2EPK5ShapePK7PicsSetPK10EngineConf(i16, i1, i5, i9) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 HEAP8[i16 >> 0] = 0;
 HEAP8[i16 + 1 >> 0] = 1;
 HEAP8[i16 + 2 >> 0] = 1;
 HEAP32[i16 + 4 >> 2] = 2e3;
 HEAP32[i16 + 8 >> 2] = 8;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 1;
 HEAP8[i16 + 20 >> 0] = 1;
 HEAP32[i16 + 24 >> 2] = 1;
 HEAP32[i16 + 28 >> 2] = 1;
 i15 = i16 + 32 | 0;
 HEAP32[i15 >> 2] = i5;
 i14 = i16 + 36 | 0;
 HEAP32[i14 >> 2] = i1;
 i6 = i16 + 40 | 0;
 i13 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i6 >> 2] = i13;
 i7 = i16 + 44 | 0;
 i10 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i7 >> 2] = i10;
 i8 = i16 + 48 | 0;
 HEAP32[i8 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i16 + 52 >> 2] = Math_imul(i10, i13) | 0;
 i13 = i16 + 60 | 0;
 HEAP32[i13 >> 2] = 0;
 i10 = i16 + 64 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i16 + 68 >> 2] = 0;
 i4 = i16 + 72 | 0;
 i11 = (i5 | 0) == 0;
 if (i11) i1 = 0; else i1 = (HEAP32[i5 + 28 >> 2] | 0) - (HEAP32[i5 + 24 >> 2] | 0) >> 4;
 HEAP32[i4 >> 2] = 0;
 i3 = i16 + 76 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i16 + 80 >> 2] = 0;
 if (i1) {
  if (i1 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
  i17 = __Znwj(i1 << 3) | 0;
  HEAP32[i3 >> 2] = i17;
  HEAP32[i4 >> 2] = i17;
  HEAP32[i16 + 80 >> 2] = i17 + (i1 << 3);
  i2 = i1;
  i1 = i17;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   i1 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
   HEAP32[i3 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  i4 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) != (i4 | 0)) {
   i3 = i1 - i4 >> 3;
   i1 = 0;
   do {
    HEAP32[i4 + (i1 << 3) >> 2] = 0;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
   i1 = HEAP32[i5 + 24 >> 2] | 0;
   i2 = 0;
   do {
    HEAP32[i4 + (i2 << 3) + 4 >> 2] = (HEAP32[i1 + (i2 << 4) + 8 >> 2] | 0) - (HEAP32[i1 + (i2 << 4) + 4 >> 2] | 0) >> 3;
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 < i3 >>> 0);
  }
 }
 if (i9) {
  HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
  HEAP32[i16 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
  HEAP32[i16 + 20 >> 2] = HEAP32[i9 + 20 >> 2];
  HEAP32[i16 + 24 >> 2] = HEAP32[i9 + 24 >> 2];
  HEAP32[i16 + 28 >> 2] = HEAP32[i9 + 28 >> 2];
 }
 i1 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i1 = Math_imul(i1, HEAP32[i8 >> 2] | 0) | 0;
 i2 = __Znaj(i1 >>> 0 > 1073741823 ? -1 : i1 << 2) | 0;
 if (i1) _memset(i2 | 0, 0, i1 << 2 | 0) | 0;
 HEAP32[i16 + 56 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i4 = (i2 - i3 | 0) / 52 | 0;
 if (i1 >>> 0 <= i4 >>> 0) {
  if (i1 >>> 0 < i4 >>> 0 ? (i12 = i3 + (i1 * 52 | 0) | 0, (i2 | 0) != (i12 | 0)) : 0) do {
   HEAP32[i10 >> 2] = i2 + -52;
   i1 = HEAP32[i2 + -12 >> 2] | 0;
   i3 = i1;
   if (i1) {
    i4 = i2 + -8 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -8 - i3 | 0) >>> 3) << 3);
    __ZdlPv(i1);
   }
   i1 = HEAP32[i2 + -32 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   i2 = HEAP32[i10 >> 2] | 0;
  } while ((i2 | 0) != (i12 | 0));
 } else __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEE8__appendEj(i13, i1 - i4 | 0);
 if (i11) {
  __ZN4Cube5clearEi(i16, 0);
  return;
 }
 if ((HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] | 0) > 0) i6 = 0; else {
  __ZN4Cube5clearEi(i16, 0);
  return;
 }
 do {
  i4 = HEAP32[i13 >> 2] | 0;
  i5 = HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] | 0;
  i2 = i4 + (i6 * 52 | 0) + 20 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1) __ZdlPv(i1);
  HEAP32[i4 + (i6 * 52 | 0) + 16 >> 2] = i5;
  i1 = (i5 + 31 | 0) / 32 | 0;
  HEAP32[i4 + (i6 * 52 | 0) + 12 >> 2] = i1;
  i3 = __Znaj(i1 >>> 0 > 1073741823 ? -1 : i1 << 2) | 0;
  HEAP32[i2 >> 2] = i3;
  i1 = i1 << 2;
  _memset(i3 | 0, 0, i1 | 0) | 0;
  HEAP32[i4 + (i6 * 52 | 0) + 8 >> 2] = 0;
  if (i5) _memset(i3 | 0, 0, i1 | 0) | 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] | 0));
 __ZN4Cube5clearEi(i16, 0);
 return;
}

function __ZN10BuildWorld14bootstrapSpaceEv(i31) {
 i31 = i31 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i33;
 i25 = i31 + 12 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP16[i1 + 4 >> 1] = 0;
 i26 = i31 + 24 | 0;
 i27 = i31 + 20 | 0;
 i2 = Math_imul(HEAP32[i27 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
 i30 = i31 + 28 | 0;
 if ((i2 | 0) > 0) {
  i3 = 0;
  do {
   i24 = HEAP32[i30 >> 2] | 0;
   HEAP32[i24 + (i3 * 12 | 0) >> 2] = 1;
   i24 = i24 + (i3 * 12 | 0) + 4 | 0;
   HEAP32[i24 >> 2] = HEAP32[i1 >> 2];
   HEAP16[i24 + 4 >> 1] = HEAP16[i1 + 4 >> 1] | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i2 | 0));
 }
 i17 = i31 + 16 | 0;
 i24 = 0;
 do {
  i1 = HEAP32[i31 + 40 + (i24 * 24 | 0) >> 2] | 0;
  i18 = HEAP32[i31 + 40 + (i24 * 24 | 0) + 4 >> 2] | 0;
  if ((i1 | 0) < (i18 | 0)) {
   i19 = HEAP32[i31 + 40 + (i24 * 24 | 0) + 8 >> 2] | 0;
   i20 = HEAP32[i31 + 40 + (i24 * 24 | 0) + 12 >> 2] | 0;
   i21 = (i19 | 0) < (i20 | 0);
   i22 = i31 + 40 + (i24 * 24 | 0) + 16 | 0;
   i23 = i31 + 40 + (i24 * 24 | 0) + 20 | 0;
   do {
    if (i21) {
     i9 = HEAP32[i22 >> 2] | 0;
     i10 = HEAP32[i23 >> 2] | 0;
     i11 = (i9 | 0) < (i10 | 0);
     i12 = i1 >>> 0 < 50;
     i13 = i1 + -1 | 0;
     i15 = i19;
     do {
      if (i11) {
       i14 = i15 >>> 0 < 50;
       i16 = i9;
       do {
        L19 : do if (i12 & (i14 & i16 >>> 0 < 50) ? (HEAP32[i31 + 136 + (i24 * 5e5 | 0) + (i1 * 1e4 | 0) + (i15 * 200 | 0) + (i16 << 2) >> 2] & 65280 | 0) == 512 : 0) {
         switch (i24 | 0) {
         case 0:
          {
           i3 = i15;
           i4 = i16;
           i2 = i1;
           i6 = i16;
           i5 = i15;
           i7 = i13;
           i32 = 15;
           break;
          }
         case 1:
          {
           i3 = i1;
           i4 = i16;
           i2 = i15;
           i6 = i16;
           i5 = i13;
           i7 = i15;
           i32 = 15;
           break;
          }
         case 2:
          {
           i3 = i16;
           i4 = i1;
           i2 = i15;
           i6 = i13;
           i5 = i16;
           i7 = i15;
           i32 = 15;
           break;
          }
         default:
          {
           i2 = 0;
           i3 = 0;
           i4 = 0;
           i8 = 0;
           i7 = 0;
           i6 = 0;
          }
         }
         if ((i32 | 0) == 15) {
          i32 = 0;
          if ((i3 | i4 | i2 | 0) < 0) break; else i8 = i5;
         }
         i5 = HEAP32[i25 >> 2] | 0;
         if ((((i2 | 0) < (i5 | 0) ? (i28 = HEAP32[i17 >> 2] | 0, (i3 | 0) < (i28 | 0)) : 0) ? (i29 = HEAP32[i27 >> 2] | 0, !((i8 | i7 | 0) < 0 | (i4 | 0) >= (i29 | 0))) : 0) ? (i6 | 0) > -1 & (i7 | 0) < (i5 | 0) & (i8 | 0) < (i28 | 0) & (i6 | 0) < (i29 | 0) : 0) {
          i3 = (Math_imul(i5, i3) | 0) + i2 | 0;
          i2 = HEAP32[i26 >> 2] | 0;
          i3 = i3 + (Math_imul(i2, i4) | 0) | 0;
          i4 = HEAP32[i30 >> 2] | 0;
          i2 = (Math_imul(i5, i8) | 0) + i7 + (Math_imul(i2, i6) | 0) | 0;
          switch (i24 | 0) {
          case 2:
           {
            HEAP8[i4 + (i3 * 12 | 0) + 9 >> 0] = 1;
            HEAP8[i4 + (i2 * 12 | 0) + 8 >> 0] = 1;
            break L19;
           }
          case 0:
           {
            HEAP8[i4 + (i3 * 12 | 0) + 4 >> 0] = 1;
            HEAP8[i4 + (i2 * 12 | 0) + 5 >> 0] = 1;
            break L19;
           }
          case 1:
           {
            HEAP8[i4 + (i3 * 12 | 0) + 6 >> 0] = 1;
            HEAP8[i4 + (i2 * 12 | 0) + 7 >> 0] = 1;
            break L19;
           }
          default:
           break L19;
          }
         }
        } while (0);
        i16 = i16 + 1 | 0;
       } while ((i16 | 0) < (i10 | 0));
      }
      i15 = i15 + 1 | 0;
     } while ((i15 | 0) < (i20 | 0));
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i18 | 0));
  }
  i24 = i24 + 1 | 0;
 } while ((i24 | 0) != 3);
 __ZN19BoundedBlockSpace3D9FloodFillEiii(i25, 0, 0, 0) | 0;
 STACKTOP = i33;
 return;
}

function __ZN5Shape11checkCornerEiiiRNSt3__14listINS_9CornerDefENS0_9allocatorIS2_EEEE(i15, i16, i17, i18, i13) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i14 = i19 + 192 | 0;
 i12 = i19 + 144 | 0;
 i11 = i19;
 i1 = i14;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = -1;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i12 >> 2] = 2;
 HEAP32[i11 >> 2] = i16;
 HEAP32[i11 + 4 >> 2] = i17;
 HEAP32[i11 + 8 >> 2] = i18;
 HEAP32[i12 + 4 >> 2] = 2;
 i7 = i16 + -4 | 0;
 HEAP32[i11 + 12 >> 2] = i7;
 HEAP32[i11 + 16 >> 2] = i17;
 HEAP32[i11 + 20 >> 2] = i18;
 HEAP32[i12 + 8 >> 2] = 2;
 i6 = i17 + -4 | 0;
 HEAP32[i11 + 24 >> 2] = i16;
 HEAP32[i11 + 28 >> 2] = i6;
 HEAP32[i11 + 32 >> 2] = i18;
 HEAP32[i12 + 12 >> 2] = 2;
 HEAP32[i11 + 36 >> 2] = i7;
 HEAP32[i11 + 40 >> 2] = i6;
 HEAP32[i11 + 44 >> 2] = i18;
 HEAP32[i12 + 16 >> 2] = 1;
 HEAP32[i11 + 48 >> 2] = i16;
 HEAP32[i11 + 52 >> 2] = i17;
 HEAP32[i11 + 56 >> 2] = i18;
 HEAP32[i12 + 20 >> 2] = 1;
 i5 = i18 + -4 | 0;
 HEAP32[i11 + 60 >> 2] = i16;
 HEAP32[i11 + 64 >> 2] = i17;
 HEAP32[i11 + 68 >> 2] = i5;
 HEAP32[i12 + 24 >> 2] = 1;
 HEAP32[i11 + 72 >> 2] = i7;
 HEAP32[i11 + 76 >> 2] = i17;
 HEAP32[i11 + 80 >> 2] = i18;
 HEAP32[i12 + 28 >> 2] = 1;
 HEAP32[i11 + 84 >> 2] = i7;
 HEAP32[i11 + 88 >> 2] = i17;
 HEAP32[i11 + 92 >> 2] = i5;
 HEAP32[i12 + 32 >> 2] = 0;
 HEAP32[i11 + 96 >> 2] = i16;
 HEAP32[i11 + 100 >> 2] = i17;
 HEAP32[i11 + 104 >> 2] = i18;
 HEAP32[i12 + 36 >> 2] = 0;
 HEAP32[i11 + 108 >> 2] = i16;
 HEAP32[i11 + 112 >> 2] = i17;
 HEAP32[i11 + 116 >> 2] = i5;
 HEAP32[i12 + 40 >> 2] = 0;
 HEAP32[i11 + 120 >> 2] = i16;
 HEAP32[i11 + 124 >> 2] = i6;
 HEAP32[i11 + 128 >> 2] = i18;
 HEAP32[i12 + 44 >> 2] = 0;
 HEAP32[i11 + 132 >> 2] = i16;
 HEAP32[i11 + 136 >> 2] = i6;
 HEAP32[i11 + 140 >> 2] = i5;
 i5 = i15 + 12 | 0;
 i6 = i15 + 16 | 0;
 i7 = i15 + 20 | 0;
 i8 = i17;
 i9 = i18;
 i2 = 0;
 i1 = 0;
 while (1) {
  i3 = HEAP32[i12 + (i2 << 2) >> 2] | 0;
  i4 = HEAP32[i11 + (i2 * 12 | 0) >> 2] | 0;
  if (((((i8 | i4 | i9 | 0) >= 0 ? (i4 | 0) < (HEAP32[i5 >> 2] | 0) : 0) ? (i8 | 0) < (HEAP32[i6 >> 2] | 0) : 0) ? (i9 | 0) < (HEAP32[i7 >> 2] | 0) : 0) ? (i10 = (Math_imul((i8 | 0) / 4 | 0, HEAP32[i15 + 88 + (i3 * 20 | 0) >> 2] | 0) | 0) + ((i4 | 0) / 4 | 0) | 0, i10 = i10 + (Math_imul((i9 | 0) / 4 | 0, HEAP32[i15 + 88 + (i3 * 20 | 0) + 12 >> 2] | 0) | 0) | 0, i10 = HEAP32[(HEAP32[i15 + 88 + (i3 * 20 | 0) + 16 >> 2] | 0) + (i10 << 2) >> 2] | 0, (i10 | 0) != -1) : 0) {
   HEAP32[i14 + (i1 << 2) >> 2] = i10;
   i1 = i1 + 1 | 0;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 12) break;
  i8 = HEAP32[i11 + (i2 * 12 | 0) + 4 >> 2] | 0;
  i9 = HEAP32[i11 + (i2 * 12 | 0) + 8 >> 2] | 0;
 }
 if ((i1 + -3 | 0) >>> 0 >= 4) {
  if ((i1 | 0) > 6) {
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } else {
  _memset(i14 + (i1 << 2) | 0, -1, 48 - (i1 << 2) | 0) | 0;
  i7 = HEAP32[i14 >> 2] | 0;
  i6 = (i7 | 0) != -1;
  i8 = HEAP32[i14 + 4 >> 2] | 0;
  i9 = HEAP32[i14 + 8 >> 2] | 0;
  i10 = HEAP32[i14 + 12 >> 2] | 0;
  i11 = HEAP32[i14 + 16 >> 2] | 0;
  i12 = HEAP32[i14 + 20 >> 2] | 0;
  i14 = __Znwj(48) | 0;
  HEAP32[i14 + 8 >> 2] = i16;
  HEAP32[i14 + 12 >> 2] = i17;
  HEAP32[i14 + 16 >> 2] = i18;
  HEAP32[i14 + 20 >> 2] = ((i9 | 0) != -1 & 1) + ((i8 | 0) == -1 ? i6 & 1 : i6 ? 2 : 1) + ((i10 | 0) != -1 & 1) + ((i11 | 0) != -1 & 1) + ((i12 | 0) != -1 & 1);
  HEAP32[i14 + 24 >> 2] = i7;
  HEAP32[i14 + 28 >> 2] = i8;
  HEAP32[i14 + 32 >> 2] = i9;
  HEAP32[i14 + 36 >> 2] = i10;
  HEAP32[i14 + 40 >> 2] = i11;
  HEAP32[i14 + 44 >> 2] = i12;
  HEAP32[i14 >> 2] = i13;
  i18 = i13 + 4 | 0;
  i17 = HEAP32[i18 >> 2] | 0;
  HEAP32[i14 + 4 >> 2] = i17;
  HEAP32[i17 >> 2] = i14;
  HEAP32[i18 >> 2] = i14;
  i18 = i13 + 8 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  i18 = i15 + 32 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 i18 = 1;
 STACKTOP = i19;
 return i18 | 0;
}

function __ZN9QuadAdder3addERK4Vec3S2_S2_S2_RK4Vec4jj(i14, i6, i4, i7, i8, i11, i9, i10) {
 i14 = i14 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d5 = 0.0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15 + 4 | 0;
 i12 = i15;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 8 | 0, i6); else {
  HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 }
 i3 = HEAP32[i14 >> 2] | 0;
 i1 = i3 + 12 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i3 + 8 | 0, i4); else {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 8 | 0, i7); else {
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 8 | 0, i6); else {
  HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 8 | 0, i7); else {
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 8 | 0, i8); else {
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 }
 i7 = i9 & 255;
 i8 = i9 >>> 8 & 255;
 i6 = i9 >>> 16 & 255;
 HEAP8[i13 >> 0] = i7;
 HEAP8[i13 + 1 >> 0] = i8;
 HEAP8[i13 + 2 >> 0] = i6;
 HEAP8[i13 + 3 >> 0] = -1;
 d5 = +(i10 >>> 0);
 HEAPF32[i12 >> 2] = d5;
 i4 = 0;
 do {
  i1 = HEAP32[i14 >> 2] | 0;
  i2 = i1 + 48 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 52 >> 2] | 0)) __ZNSt3__16vectorI5Vec4bNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 44 | 0, i13); else {
   HEAP8[i3 >> 0] = i7;
   HEAP8[i3 + 1 >> 0] = i8;
   HEAP8[i3 + 2 >> 0] = i6;
   HEAP8[i3 + 3 >> 0] = -1;
   HEAP32[i2 >> 2] = i3 + 4;
  }
  i1 = HEAP32[i14 >> 2] | 0;
  i2 = i1 + 60 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 64 >> 2] | 0)) __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(i1 + 56 | 0, i12); else {
   HEAPF32[i3 >> 2] = d5;
   HEAP32[i2 >> 2] = i3 + 4;
  }
  i1 = HEAP32[i14 >> 2] | 0;
  i2 = i1 + 36 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 40 >> 2] | 0)) __ZNSt3__16vectorI4Vec4NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i1 + 32 | 0, i11); else {
   HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 16;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 6);
 STACKTOP = i15;
 return;
}

function __ZNK10SlvPainter5paintEP12BaseGLWidgetbii10ELinesDraw(i11, i8, i9, i6, i12, i7) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i13 + 64 | 0;
 i1 = i13;
 i2 = i8 + 108 | 0;
 i3 = i1;
 i4 = i2;
 i5 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 i3 = i10;
 i5 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 d15 = +HEAPF32[i1 >> 2];
 d17 = +HEAPF32[i1 + 16 >> 2];
 d19 = d17 * 0.0;
 d20 = +HEAPF32[i1 + 32 >> 2];
 d16 = d20 * 0.0;
 d14 = +HEAPF32[i1 + 48 >> 2];
 d18 = d14 * 0.0;
 HEAPF32[i10 >> 2] = d15 + 0.0 + d19 + d16 + d18;
 d15 = d15 * 0.0 + 0.0;
 HEAPF32[i10 + 16 >> 2] = d17 + d15 + d16 + d18;
 d19 = d20 + (d15 + d19);
 HEAPF32[i10 + 32 >> 2] = d19 + d18;
 HEAPF32[i10 + 48 >> 2] = d14 + d19;
 d19 = +HEAPF32[i1 + 4 >> 2];
 d14 = +HEAPF32[i1 + 20 >> 2];
 d18 = d14 * 0.0;
 d15 = +HEAPF32[i1 + 36 >> 2];
 d20 = d15 * 0.0;
 d16 = +HEAPF32[i1 + 52 >> 2];
 d17 = d16 * 0.0;
 HEAPF32[i10 + 4 >> 2] = d19 + 0.0 + d18 + d20 + d17;
 d19 = d19 * 0.0 + 0.0;
 HEAPF32[i10 + 20 >> 2] = d14 + d19 + d20 + d17;
 d18 = d15 + (d19 + d18);
 HEAPF32[i10 + 36 >> 2] = d18 + d17;
 HEAPF32[i10 + 52 >> 2] = d16 + d18;
 d18 = +HEAPF32[i1 + 8 >> 2];
 d16 = +HEAPF32[i1 + 24 >> 2];
 d17 = d16 * 0.0;
 d19 = +HEAPF32[i1 + 40 >> 2];
 d15 = d19 * 0.0;
 d20 = +HEAPF32[i1 + 56 >> 2];
 d14 = d20 * 0.0;
 HEAPF32[i10 + 8 >> 2] = d18 + 0.0 + d17 + d15 + d14;
 d18 = d18 * 0.0 + 0.0;
 HEAPF32[i10 + 24 >> 2] = d16 + d18 + d15 + d14;
 d17 = d19 + (d18 + d17);
 HEAPF32[i10 + 40 >> 2] = d17 + d14;
 HEAPF32[i10 + 56 >> 2] = d20 + d17;
 d17 = +HEAPF32[i1 + 12 >> 2];
 d20 = +HEAPF32[i1 + 28 >> 2];
 d14 = d20 * 0.0;
 d18 = +HEAPF32[i1 + 44 >> 2];
 d19 = d18 * 0.0;
 d15 = +HEAPF32[i1 + 60 >> 2];
 d16 = d15 * 0.0;
 HEAPF32[i10 + 12 >> 2] = d17 + 0.0 + d14 + d19 + d16;
 d17 = d17 * 0.0 + 0.0;
 HEAPF32[i10 + 28 >> 2] = d20 + d17 + d19 + d16;
 d14 = d18 + (d17 + d14);
 HEAPF32[i10 + 44 >> 2] = d14 + d16;
 HEAPF32[i10 + 60 >> 2] = d15 + d14;
 if ((i10 | 0) != (i2 | 0)) {
  i3 = i2;
  i4 = i10;
  i5 = i3 + 64 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
   i3 = i3 + 4 | 0;
   i4 = i4 + 4 | 0;
  } while ((i3 | 0) < (i5 | 0));
 }
 i5 = i11 + 36 | 0;
 __ZNK5Shape21makeTransformsMatricsEfRNSt3__16vectorI4Mat4NS0_9allocatorIS2_EEEE(HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] | 0, 0.0, i11 + 40 | 0);
 if ((i6 | 0) >= 0) {
  __ZNK10SlvPainter10paintPieceEiP12BaseGLWidgetb(i11, i6, i8, i9);
  if (!((i7 | 0) == 1 & (i9 ^ 1))) {
   STACKTOP = i13;
   return;
  }
  __ZNK10SlvPainter10paintLinesEibP12BaseGLWidget10ELinesDraw(i11, i6, 0, i8, 0);
  STACKTOP = i13;
  return;
 }
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i6 + 4 >> 2] | 0) == (i1 | 0)) {
  STACKTOP = i13;
  return;
 }
 i4 = (i12 | 0) < 0;
 i3 = (i7 | 0) != 0 & (i9 ^ 1);
 i2 = 0;
 while (1) {
  if (!(i4 | (i2 | 0) < (i12 | 0))) {
   i1 = 13;
   break;
  }
  if ((HEAP32[i1 + (i2 * 20 | 0) >> 2] | 0) != -1 ? (HEAP32[i10 >> 2] = 0, HEAP32[i10 + 4 >> 2] = 0, HEAP32[i10 + 8 >> 2] = 0, __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10), __ZNK10SlvPainter10paintPieceEiP12BaseGLWidgetb(i11, i2, i8, i9), HEAP32[i10 >> 2] = 0, HEAP32[i10 + 4 >> 2] = 0, HEAP32[i10 + 8 >> 2] = 0, __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10), i3) : 0) {
   __ZNK10SlvPainter10paintLinesEibP12BaseGLWidget10ELinesDraw(i11, i2, 0, i8, 0);
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  }
  i2 = i2 + 1 | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (i2 >>> 0 >= (((HEAP32[i7 + 4 >> 2] | 0) - i1 | 0) / 20 | 0) >>> 0) {
   i1 = 13;
   break;
  }
 }
 if ((i1 | 0) == 13) {
  STACKTOP = i13;
  return;
 }
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (i2) {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (tempRet0 = i14, i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } else {
  if (i1) {
   if (i13) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  if (!i9) {
   if (i13) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i14 = 0;
   i15 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i14 = 0;
   i15 = 0;
   return (tempRet0 = i14, i15) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i14 = 0;
  i15 = 0;
  return (tempRet0 = i14, i15) | 0;
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i4 = i3;
  i3 = 0;
  do {
   i11 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i11 = i5 << 1 | i11 >>> 31 | 0;
   i12 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7, i8, i11, i12) | 0;
   i15 = tempRet0;
   i14 = i15 >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1;
   i3 = i14 & 1;
   i5 = _i64Subtract(i11, i12, i14 & i10, (((i15 | 0) < 0 ? -1 : 0) >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1) & i9) | 0;
   i6 = tempRet0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i14 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i15 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (tempRet0 = i14, i15) | 0;
}

function __ZNK10PicPainter5paintEbRK4Vec3P12BaseGLWidgetbi(i16, i4, i5, i10, i14, i8) {
 i16 = i16 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i15 = i17 + 176 | 0;
 i1 = i17 + 112 | 0;
 i11 = i17 + 12 | 0;
 i13 = i17;
 _glPolygonOffset(1.0, 1.0);
 i6 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
 i7 = HEAP32[(HEAP32[1556] | 0) + 4 >> 2] | 0;
 i3 = __ZN13ShaderProgram8currenttI11BaseProgramEEPT_v() | 0;
 __ZN12BaseGLWidget12transformMatEv(i17 + 48 | 0, i10);
 __ZN12BaseGLWidget12transformMatEv(i1, i10);
 i2 = HEAP32[i3 + 80 >> 2] | 0;
 if ((i2 | 0) != -1) _glUniformMatrix4fv(i2 | 0, 1, 0, i1 | 0);
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 if (i4) {
  i1 = HEAP32[i3 + 100 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform3fv(i1 | 0, 1, i5 | 0);
  HEAP32[i15 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
  i16 = HEAP32[i16 >> 2] | 0;
  i16 = i16 + 1004 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  __ZNK4Mesh5paintEb(i16, 0);
  STACKTOP = i17;
  return;
 }
 i3 = __ZN13ShaderProgram8currenttI15NoiseSlvProgramEEPT_v() | 0;
 if (i3) {
  i4 = i7 + (i6 << 6) + 32 | 0;
  i1 = HEAP32[i3 + 220 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform1i(i1 | 0, HEAP32[i4 >> 2] | 0);
  i1 = HEAP32[i3 + 100 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform3fv(i1 | 0, 1, i7 + (i6 << 6) + 36 | 0);
  i1 = HEAP32[i3 + 200 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform3fv(i1 | 0, 1, i7 + (i6 << 6) + 48 | 0);
  i1 = HEAP32[i3 + 340 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform1i(i1 | 0, i8 | 0);
  i1 = i7 + (i6 << 6) + 12 | 0;
  if ((HEAP32[i1 >> 2] | 0) != 0 ? (_glActiveTexture(33984), _glBindTexture(3553, HEAP32[HEAP32[i1 >> 2] >> 2] | 0), i9 = HEAP32[i3 + 180 >> 2] | 0, (i9 | 0) != -1) : 0) _glUniform1i(i9 | 0, 0);
  i2 = HEAP32[i3 + 240 >> 2] | 0;
  i1 = i10 + 108 | 0;
  if ((i2 | 0) != -1) _glUniformMatrix4fv(i2 | 0, 1, 0, i1 | 0);
  d21 = +HEAPF32[i1 >> 2];
  d19 = +HEAPF32[i10 + 124 >> 2];
  d24 = +HEAPF32[i10 + 140 >> 2];
  d23 = +HEAPF32[i10 + 112 >> 2];
  d28 = +HEAPF32[i10 + 128 >> 2];
  d25 = +HEAPF32[i10 + 144 >> 2];
  d18 = +HEAPF32[i10 + 116 >> 2];
  d20 = +HEAPF32[i10 + 132 >> 2];
  d26 = +HEAPF32[i10 + 148 >> 2];
  d30 = d28 * d26 - d25 * d20;
  d27 = d19 * d26 - d24 * d20;
  d29 = d19 * d25 - d24 * d28;
  d22 = 1.0 / (d18 * d29 + (d21 * d30 - d23 * d27));
  HEAPF32[i11 >> 2] = d22 * d30;
  HEAPF32[i11 + 16 >> 2] = d22 * (d21 * d26 - d24 * d18);
  HEAPF32[i11 + 32 >> 2] = (d21 * d28 - d19 * d23) * d22;
  HEAPF32[i11 + 8 >> 2] = d29 * d22;
  HEAPF32[i11 + 24 >> 2] = d22 * (d23 * d20 - d28 * d18);
  HEAPF32[i11 + 4 >> 2] = d22 * -d27;
  HEAPF32[i11 + 12 >> 2] = d22 * -(d23 * d26 - d25 * d18);
  HEAPF32[i11 + 20 >> 2] = -(d21 * d25 - d24 * d23) * d22;
  HEAPF32[i11 + 28 >> 2] = d22 * -(d21 * d20 - d19 * d18);
  i1 = HEAP32[i3 + 260 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniformMatrix3fv(i1 | 0, 1, 0, i11 | 0);
  if ((HEAP32[i4 >> 2] & 16 | 0) != 0 ? (i12 = HEAP32[i16 >> 2] | 0, d30 = +(HEAP32[i12 + 988 >> 2] | 0) * .0009765625, HEAPF32[i13 >> 2] = +(HEAP32[i12 + 984 >> 2] | 0) * .0009765625, HEAPF32[i13 + 4 >> 2] = d30, HEAPF32[i13 + 8 >> 2] = i14 ? 1.0 : 0.0, i12 = HEAP32[i3 + 300 >> 2] | 0, (i12 | 0) != -1) : 0) _glUniform3fv(i12 | 0, 1, i13 | 0);
 };
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 i16 = HEAP32[i16 >> 2] | 0;
 i16 = i16 + 1004 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 __ZNK4Mesh5paintEb(i16, 0);
 STACKTOP = i17;
 return;
}

function __ZN10BuildWorld12reClacLimitsEv(i35) {
 i35 = i35 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i36 = i37;
 i1 = i35 + 40 | 0;
 i2 = i36;
 i3 = i1;
 i4 = i2 + 72 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i35 + 44 >> 2] = 0;
 HEAP32[i1 >> 2] = 50;
 HEAP32[i35 + 52 >> 2] = 0;
 HEAP32[i35 + 48 >> 2] = 50;
 HEAP32[i35 + 60 >> 2] = 0;
 HEAP32[i35 + 56 >> 2] = 50;
 HEAP32[i35 + 68 >> 2] = 0;
 HEAP32[i35 + 64 >> 2] = 50;
 HEAP32[i35 + 76 >> 2] = 0;
 HEAP32[i35 + 72 >> 2] = 50;
 HEAP32[i35 + 84 >> 2] = 0;
 HEAP32[i35 + 80 >> 2] = 50;
 HEAP32[i35 + 92 >> 2] = 0;
 HEAP32[i35 + 88 >> 2] = 50;
 HEAP32[i35 + 100 >> 2] = 0;
 HEAP32[i35 + 96 >> 2] = 50;
 HEAP32[i35 + 108 >> 2] = 0;
 HEAP32[i35 + 104 >> 2] = 50;
 i34 = 0;
 do {
  i1 = HEAP32[i36 + (i34 * 24 | 0) >> 2] | 0;
  i22 = HEAP32[i36 + (i34 * 24 | 0) + 4 >> 2] | 0;
  if ((i1 | 0) < (i22 | 0)) {
   i23 = HEAP32[i36 + (i34 * 24 | 0) + 8 >> 2] | 0;
   i24 = HEAP32[i36 + (i34 * 24 | 0) + 12 >> 2] | 0;
   i25 = (i23 | 0) < (i24 | 0);
   i26 = i36 + (i34 * 24 | 0) + 16 | 0;
   i27 = i36 + (i34 * 24 | 0) + 20 | 0;
   i28 = i35 + 40 + (i34 * 24 | 0) + 4 | 0;
   i29 = i35 + 40 + (i34 * 24 | 0) | 0;
   i30 = i35 + 40 + (i34 * 24 | 0) + 12 | 0;
   i31 = i35 + 40 + (i34 * 24 | 0) + 8 | 0;
   i32 = i35 + 40 + (i34 * 24 | 0) + 20 | 0;
   i33 = i35 + 40 + (i34 * 24 | 0) + 16 | 0;
   i21 = i1;
   while (1) {
    if (i25) {
     i15 = HEAP32[i26 >> 2] | 0;
     i16 = HEAP32[i27 >> 2] | 0;
     i17 = (i15 | 0) < (i16 | 0);
     i18 = i21 >>> 0 < 50;
     i1 = i21 + 1 | 0;
     i19 = i21 + 2 | 0;
     i20 = i21 + -1 | 0;
     i13 = i23;
     while (1) {
      if (i17) {
       i10 = i13 >>> 0 < 50;
       i2 = i13 + 1 | 0;
       i11 = i13 + 2 | 0;
       i12 = i13 + -1 | 0;
       i14 = i15;
       do {
        do if (i18 & (i10 & i14 >>> 0 < 50) ? (HEAP32[i35 + 136 + (i34 * 5e5 | 0) + (i21 * 1e4 | 0) + (i13 * 200 | 0) + (i14 << 2) >> 2] | 0) != 0 : 0) {
         i3 = HEAP32[i28 >> 2] | 0;
         if ((i3 | 0) <= (i21 | 0)) {
          HEAP32[i28 >> 2] = i1;
          i3 = i1;
         }
         i4 = HEAP32[i29 >> 2] | 0;
         if ((i4 | 0) >= (i21 | 0)) {
          HEAP32[i29 >> 2] = i20;
          i4 = i20;
         }
         i5 = HEAP32[i30 >> 2] | 0;
         if ((i5 | 0) <= (i13 | 0)) {
          HEAP32[i30 >> 2] = i2;
          i5 = i2;
         }
         i6 = HEAP32[i31 >> 2] | 0;
         if ((i6 | 0) >= (i13 | 0)) {
          HEAP32[i31 >> 2] = i12;
          i6 = i12;
         }
         i7 = HEAP32[i32 >> 2] | 0;
         if ((i7 | 0) <= (i14 | 0)) {
          i7 = i14 + 1 | 0;
          HEAP32[i32 >> 2] = i7;
         }
         i8 = HEAP32[i33 >> 2] | 0;
         if ((i8 | 0) >= (i14 | 0)) {
          i8 = i14 + -1 | 0;
          HEAP32[i33 >> 2] = i8;
         }
         i9 = i14 + 1 | 0;
         if ((i3 | 0) <= (i1 | 0)) HEAP32[i28 >> 2] = i19;
         if ((i4 | 0) >= (i1 | 0)) HEAP32[i29 >> 2] = i21;
         if ((i5 | 0) <= (i2 | 0)) HEAP32[i30 >> 2] = i11;
         if ((i6 | 0) >= (i2 | 0)) HEAP32[i31 >> 2] = i13;
         if ((i7 | 0) <= (i9 | 0)) HEAP32[i32 >> 2] = i14 + 2;
         if ((i8 | 0) < (i9 | 0)) break;
         HEAP32[i33 >> 2] = i14;
        } while (0);
        i14 = i14 + 1 | 0;
       } while ((i14 | 0) < (i16 | 0));
      } else i2 = i13 + 1 | 0;
      if ((i2 | 0) < (i24 | 0)) i13 = i2; else break;
     }
    } else i1 = i21 + 1 | 0;
    if ((i1 | 0) < (i22 | 0)) i21 = i1; else break;
   }
  }
  i34 = i34 + 1 | 0;
 } while ((i34 | 0) != 3);
 STACKTOP = i37;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i15 = i28 + 424 | 0;
 i18 = i28;
 i14 = i28 + 24 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 464 | 0;
 i12 = i28 + 4 | 0;
 i17 = i28 + 468 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 164;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 16136) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i21, i15, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 7](i1, 36887, 36897, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 392) {
   i1 = _malloc((i1 >> 2) + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 40 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 4 | 0;
   i5 = i4 + 4 | 0;
   i6 = i5 + 4 | 0;
   i7 = i6 + 4 | 0;
   i8 = i7 + 4 | 0;
   i9 = i8 + 4 | 0;
   i10 = i9 + 4 | 0;
   i11 = i10 + 4 | 0;
   i12 = i11 + 4 | 0;
   do {
    i2 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i15 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i4 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i7 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i8 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i9 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i10 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i11 >> 2] | 0) == (i2 | 0)) i2 = i11; else i2 = (HEAP32[i12 >> 2] | 0) == (i2 | 0) ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[36887 + (i2 - i14 >> 2) >> 0] | 0;
    i3 = i3 + 4 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 36883, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i21 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i1 = HEAP32[i22 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) break; else {
   i25 = 30;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i25 = 28;
   break;
  }
 } else i25 = 28; while (0);
 if ((i25 | 0) == 28 ? i3 : 0) i25 = 30;
 if ((i25 | 0) == 30) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 255](i1);
 STACKTOP = i28;
 return i2 | 0;
}
function __ZN8tinyxml210XMLElement15ParseAttributesEPc(i13, i15) {
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i17 = 0;
 if (!i15) {
  i16 = 0;
  return i16 | 0;
 }
 i14 = i13 + 4 | 0;
 i11 = i13 + 48 | 0;
 i1 = i15;
 i12 = 0;
 L4 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  i3 = i2 & 255;
  L6 : do if (!(i3 & 128)) {
   while (1) {
    if (!(_isspace(i3) | 0)) {
     i2 = i1;
     break;
    }
    i1 = i1 + 1 | 0;
    i2 = HEAP8[i1 >> 0] | 0;
    i3 = i2 & 255;
    if (i3 & 128) break L6;
   }
   if (!i2) {
    i16 = 9;
    break L4;
   }
   i1 = i2;
   i2 = HEAP8[i2 >> 0] | 0;
  } while (0);
  if (!(i2 << 24 >> 24)) {
   i16 = 9;
   break;
  }
  if (i2 << 24 >> 24 > -1 ? (_isalpha(i2 & 255) | 0) == 0 : 0) {
   i16 = 30;
   break;
  }
  i9 = __ZN8tinyxml28MemPoolTILi36EE5AllocEv((HEAP32[i14 >> 2] | 0) + 140 | 0) | 0;
  HEAP32[i9 >> 2] = 8784;
  i3 = i9 + 4 | 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 + 24 >> 2] = 0;
  i8 = HEAP32[i14 >> 2] | 0;
  i2 = i9 + 32 | 0;
  HEAP32[i2 >> 2] = i8 + 140;
  i1 = __ZN8tinyxml212XMLAttribute9ParseDeepEPcb(i9, i1, (HEAP8[i8 + 45 >> 0] | 0) != 0) | 0;
  if (!i1) {
   i1 = 0;
   i4 = i9;
   i3 = i9;
   i16 = 24;
   break;
  }
  i8 = __ZN8tinyxml27StrPair6GetStrEv(i3) | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  L18 : do if (i3) {
   while (1) {
    i4 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 4 | 0) | 0;
    if ((i4 | 0) == (i8 | 0)) break;
    i5 = HEAP8[i4 >> 0] | 0;
    if (i5 << 24 >> 24) {
     i6 = i8;
     i7 = 0;
     while (1) {
      i17 = HEAP8[i6 >> 0] | 0;
      if (!((i7 | 0) != 2147483647 & (i17 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i17 << 24 >> 24 : 0))) {
       i4 = i7;
       break;
      }
      i4 = i4 + 1 | 0;
      i6 = i6 + 1 | 0;
      i7 = i7 + 1 | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (!(i5 << 24 >> 24)) {
       i5 = 0;
       i4 = i7;
       break;
      }
     }
     if ((i4 | 0) == 2147483647) {
      i16 = 22;
      break;
     }
     if (!(i5 << 24 >> 24)) {
      i10 = i6;
      i16 = 20;
     }
    } else {
     i10 = i8;
     i16 = 20;
    }
    if ((i16 | 0) == 20 ? (i16 = 0, (HEAP8[i10 >> 0] | 0) == 0) : 0) {
     i16 = 22;
     break;
    }
    i3 = HEAP32[i3 + 28 >> 2] | 0;
    if (!i3) break L18;
   }
   if ((i16 | 0) == 22) {
    i16 = 0;
    if (!i3) break;
   }
   if (__ZN8tinyxml27StrPair6GetStrEv(i3 + 16 | 0) | 0) {
    i4 = i9;
    i3 = i9;
    i16 = 24;
    break L4;
   }
  } while (0);
  if (!i12) {
   HEAP32[i11 >> 2] = i9;
   i12 = i9;
   continue;
  } else {
   HEAP32[i12 + 28 >> 2] = i9;
   i12 = i9;
   continue;
  }
 }
 if ((i16 | 0) == 9) {
  i17 = HEAP32[i14 >> 2] | 0;
  i16 = __ZN8tinyxml27StrPair6GetStrEv(i13 + 12 | 0) | 0;
  HEAP32[i17 + 48 >> 2] = 7;
  HEAP32[i17 + 56 >> 2] = i15;
  HEAP32[i17 + 60 >> 2] = i16;
  i17 = 0;
  return i17 | 0;
 } else if ((i16 | 0) == 24) {
  if (i4) {
   i17 = HEAP32[i2 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i3);
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 63](i17, i4);
  }
  i17 = HEAP32[i14 >> 2] | 0;
  HEAP32[i17 + 48 >> 2] = 8;
  HEAP32[i17 + 56 >> 2] = i15;
  HEAP32[i17 + 60 >> 2] = i1;
  i17 = 0;
  return i17 | 0;
 } else if ((i16 | 0) == 30) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 47:
   {
    i16 = 31;
    break;
   }
  case 62:
   {
    i17 = i1 + 1 | 0;
    return i17 | 0;
   }
  default:
   {}
  }
  if ((i16 | 0) == 31 ? (HEAP8[i1 + 1 >> 0] | 0) == 62 : 0) {
   HEAP32[i13 + 44 >> 2] = 1;
   i17 = i1 + 2 | 0;
   return i17 | 0;
  }
  i17 = HEAP32[i14 >> 2] | 0;
  HEAP32[i17 + 48 >> 2] = 7;
  HEAP32[i17 + 56 >> 2] = i15;
  HEAP32[i17 + 60 >> 2] = i1;
  i17 = 0;
  return i17 | 0;
 }
 return 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 896 | 0;
 i4 = i28 + 888 | 0;
 i2 = i28 + 488 | 0;
 i20 = i28 + 480 | 0;
 i15 = i28 + 892 | 0;
 i12 = i28 + 72 | 0;
 i16 = i28 + 68 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 80 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 36898, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 36898, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1 << 2) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 16136) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 7](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + (i22 << 2) | 0, i6, i4, i15, HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i17 = i28 + 24 | 0;
 i18 = i28;
 i14 = i28 + 136 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 134 | 0;
 i12 = i28 + 4 | 0;
 i15 = i28 + 124 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 164;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 16144) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i21, i17, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 36872, 36882, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 98) {
   i1 = _malloc(i1 + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 10 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 1 | 0;
   i5 = i4 + 1 | 0;
   i6 = i5 + 1 | 0;
   i7 = i6 + 1 | 0;
   i8 = i7 + 1 | 0;
   i9 = i8 + 1 | 0;
   i10 = i9 + 1 | 0;
   i11 = i10 + 1 | 0;
   i12 = i11 + 1 | 0;
   do {
    i2 = HEAP8[i3 >> 0] | 0;
    if ((HEAP8[i15 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i4 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i5 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i6 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i7 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i8 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i9 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i10 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i11 >> 0] | 0) == i2 << 24 >> 24) i2 = i11; else i2 = (HEAP8[i12 >> 0] | 0) == i2 << 24 >> 24 ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[36872 + (i2 - i14) >> 0] | 0;
    i3 = i3 + 1 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 36883, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i21 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 i2 = HEAP32[i22 >> 2] | 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i25 = 25;
   break;
  }
  if (!i1) i25 = 26;
 } else i25 = 25; while (0);
 if ((i25 | 0) == 25 ? i1 : 0) i25 = 26;
 if ((i25 | 0) == 26) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 255](i1);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 284 | 0;
 i4 = i28 + 72 | 0;
 i2 = i28 + 184 | 0;
 i20 = i28 + 68 | 0;
 i15 = i28 + 80 | 0;
 i12 = i28 + 77 | 0;
 i16 = i28 + 76 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 84 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 36898, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 36898, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 16144) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 7](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + i22 | 0, i6, i4, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZN11CubeDocBase10onGenShapeEbP11GenTemplate(i11, i9, i1) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i2 = __Znwj(152) | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = -1;
 HEAP32[i2 + 16 >> 2] = -1;
 HEAP32[i2 + 20 >> 2] = -1;
 i4 = i2 + 24 | 0;
 i3 = i2 + 44 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP8[i4 + 16 >> 0] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i2 + 64 >> 2] = 50;
 HEAP32[i2 + 60 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 50;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 80 >> 2] = 50;
 HEAP32[i2 + 76 >> 2] = 0;
 i3 = i2 + 84 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 HEAP32[i3 + 16 >> 2] = -1;
 HEAP32[i2 + 104 >> 2] = 0;
 i3 = i2 + 108 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 HEAP32[i2 + 124 >> 2] = 0;
 i3 = i2 + 128 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 HEAP32[i2 + 144 >> 2] = 0;
 i3 = i2 + 148 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = i11 + 116 | 0;
 switch (__ZN5Shape8generateEPK10BuildWorld(i2, HEAP32[i1 >> 2] | 0) | 0) {
 case 0:
  {
   HEAP32[i3 >> 2] = 0;
   HEAP8[(HEAP32[i1 >> 2] | 0) + 1500136 >> 0] = 0;
   i8 = i11 + 104 | 0;
   i5 = __Znwj(16) | 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 >> 2] = 7172;
   HEAP32[i5 + 12 >> 2] = i4;
   HEAP32[i8 >> 2] = i4;
   i6 = i11 + 108 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i5;
   if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
   i3 = HEAP32[i11 + 92 >> 2] | 0;
   i6 = i11 + 96 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   i1 = i2 - i3 | 0;
   if ((i1 | 0) > 0) {
    i5 = i1 >> 2;
    _memset(i3 | 0, 0, (((i1 | 0) < 4 ? i5 ^ 1073741823 : 1073741822) + i5 << 2) + 8 | 0) | 0;
    i3 = i11 + 92 | 0;
    i5 = i3;
    i2 = HEAP32[i6 >> 2] | 0;
    i3 = HEAP32[i3 >> 2] | 0;
   } else i5 = i11 + 92 | 0;
   i1 = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0;
   i4 = i2 - i3 >> 2;
   if (i1 >>> 0 <= i4 >>> 0) {
    if (i1 >>> 0 < i4 >>> 0 ? (i7 = i3 + (i1 << 2) | 0, (i2 | 0) != (i7 | 0)) : 0) HEAP32[i6 >> 2] = i2 + (~((i2 + -4 - i7 | 0) >>> 2) << 2);
   } else __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj(i5, i1 - i4 | 0);
   if (!i9) {
    i11 = 1;
    return i11 | 0;
   }
   i7 = HEAP32[i11 + 112 >> 2] | 0;
   i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0;
   i4 = i7 + 8 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i6 = i7 + 12 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if ((i1 | 0) != (i2 | 0)) {
    do {
     i3 = HEAP32[i1 >> 2] | 0;
     if (i3) {
      __ZN7SlvCubeD2Ev(i3);
      __ZdlPv(i3);
      i2 = HEAP32[i6 >> 2] | 0;
     }
     i1 = i1 + 4 | 0;
    } while ((i1 | 0) != (i2 | 0));
    i1 = HEAP32[i4 >> 2] | 0;
    if ((i2 | 0) != (i1 | 0)) HEAP32[i6 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
   }
   HEAP32[i7 >> 2] = i5;
   i1 = i7 + 20 | 0;
   if ((HEAP8[i1 >> 0] | 0) != 0 ? (HEAP8[i1 >> 0] = 0, i10 = HEAP32[i7 + 4 >> 2] | 0, (i10 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[HEAP32[i10 >> 2] >> 2] & 63](i10, 0);
   HEAP32[i11 + 120 >> 2] = 0;
   i11 = 1;
   return i11 | 0;
  }
 case 1:
  {
   __Z8complainPKc(21851);
   break;
  }
 case 2:
  {
   __Z8complainPKc(21929);
   break;
  }
 case 3:
  {
   __Z8complainPKc(22048);
   break;
  }
 case 255:
  {
   __Z8complainPKc(22101);
   break;
  }
 default:
  {}
 }
 HEAP32[i3 >> 2] = 0;
 __ZN5ShapeD2Ev(i2);
 __ZdlPv(i2);
 i11 = 0;
 return i11 | 0;
}

function __ZN5Shape8readAxisEPK10BuildWorldiii6EPlaneRNSt3__14listINS_7FaceDefENS4_9allocatorIS6_EEEEPiR9SqrLimits(i1, i27, i29, i30, i31, i32, i28, i33, i26) {
 i1 = i1 | 0;
 i27 = i27 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i32 = i32 | 0;
 i28 = i28 | 0;
 i33 = i33 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i34 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i21 = i34;
 if ((i31 | 0) <= 0) {
  STACKTOP = i34;
  return;
 }
 i22 = (i29 | 0) > 0;
 i24 = (i30 | 0) > 0;
 i25 = i32 >>> 0 < 3;
 i14 = i1 + 24 | 0;
 i15 = i28 + 4 | 0;
 i16 = i28 + 8 | 0;
 i17 = i26 + 4 | 0;
 i18 = i26 + 12 | 0;
 i19 = i26 + 8 | 0;
 i12 = i26 + 20 | 0;
 i13 = i26 + 16 | 0;
 i20 = 0;
 i3 = -1;
 i2 = -1;
 i1 = -1;
 do {
  if (i22) {
   i10 = i20 >>> 0 < 50;
   i11 = 0;
   do {
    if (i24) {
     i8 = i11 >>> 0 < 50;
     i9 = 0;
     do {
      if (i25 & (i10 & (i8 & i9 >>> 0 < 50)) ? (i23 = HEAP32[i27 + 136 + (i32 * 5e5 | 0) + (i20 * 1e4 | 0) + (i11 * 200 | 0) + (i9 << 2) >> 2] | 0, (i23 & 65280 | 0) == 512) : 0) {
       switch (i32 | 0) {
       case 0:
        {
         i3 = i20;
         i2 = i11;
         i1 = i9;
         break;
        }
       case 1:
        {
         i3 = i11;
         i2 = i20;
         i1 = i9;
         break;
        }
       case 2:
        {
         i3 = i11;
         i2 = i9;
         i1 = i20;
         break;
        }
       default:
        {}
       }
       i3 = i3 << 2;
       i2 = i2 << 2;
       i1 = i1 << 2;
       if ((i23 & 65535 | 0) == 514) HEAP32[i33 >> 2] = HEAP32[i14 >> 2];
       i4 = __Znwj(196) | 0;
       HEAP32[i4 + 8 >> 2] = i32;
       HEAP32[i4 + 12 >> 2] = i3;
       HEAP32[i4 + 16 >> 2] = i2;
       HEAP32[i4 + 20 >> 2] = i1;
       HEAP32[i4 + 24 >> 2] = 2;
       i5 = i4 + 28 | 0;
       i6 = i21;
       i7 = i5 + 56 | 0;
       do {
        HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
        i5 = i5 + 4 | 0;
        i6 = i6 + 4 | 0;
       } while ((i5 | 0) < (i7 | 0));
       HEAP32[i4 + 84 >> 2] = 0;
       HEAP32[i4 + 88 >> 2] = 0;
       HEAP32[i4 + 96 >> 2] = 0;
       HEAP32[i4 + 100 >> 2] = 0;
       HEAP32[i4 + 104 >> 2] = 0;
       HEAP32[i4 + 112 >> 2] = 0;
       HEAP32[i4 + 116 >> 2] = 0;
       HEAP32[i4 + 124 >> 2] = 0;
       HEAP32[i4 + 128 >> 2] = 0;
       HEAP32[i4 + 132 >> 2] = 0;
       HEAP32[i4 + 140 >> 2] = 0;
       HEAP32[i4 + 144 >> 2] = 0;
       HEAP32[i4 + 152 >> 2] = 0;
       HEAP32[i4 + 156 >> 2] = 0;
       HEAP32[i4 + 160 >> 2] = 0;
       HEAP32[i4 + 168 >> 2] = 0;
       HEAP32[i4 + 172 >> 2] = 0;
       HEAP32[i4 + 180 >> 2] = 0;
       HEAP32[i4 + 184 >> 2] = 0;
       HEAP32[i4 + 188 >> 2] = 0;
       HEAP32[i4 >> 2] = i28;
       i7 = HEAP32[i15 >> 2] | 0;
       HEAP32[i4 + 4 >> 2] = i7;
       HEAP32[i7 >> 2] = i4;
       HEAP32[i15 >> 2] = i4;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
       if ((HEAP32[i17 >> 2] | 0) < (i1 | 0)) HEAP32[i17 >> 2] = i1;
       if ((HEAP32[i26 >> 2] | 0) > (i1 | 0)) HEAP32[i26 >> 2] = i1;
       if ((HEAP32[i18 >> 2] | 0) < (i3 | 0)) HEAP32[i18 >> 2] = i3;
       if ((HEAP32[i19 >> 2] | 0) > (i3 | 0)) HEAP32[i19 >> 2] = i3;
       if ((HEAP32[i12 >> 2] | 0) < (i2 | 0)) HEAP32[i12 >> 2] = i2;
       if ((HEAP32[i13 >> 2] | 0) > (i2 | 0)) HEAP32[i13 >> 2] = i2;
      }
      i9 = i9 + 1 | 0;
     } while ((i9 | 0) != (i30 | 0));
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i29 | 0));
  }
  i20 = i20 + 1 | 0;
 } while ((i20 | 0) != (i31 | 0));
 STACKTOP = i34;
 return;
}

function __ZN6VecRep3addERK4Vec3Pi(i15, i8, i7) {
 i15 = i15 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, d6 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i16 + 12 | 0;
 i1 = i16;
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 i1 = __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE4findIS3_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_(i15, i1) | 0;
 i9 = i15 + 4 | 0;
 if ((i1 | 0) != (i9 | 0)) {
  HEAP32[i7 >> 2] = HEAP32[i1 + 28 >> 2];
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = i15 + 12 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i4 = i2 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i2, i8); else {
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 12;
 }
 i14 = HEAP32[i1 >> 2] | 0;
 i14 = (((HEAP32[i14 + 4 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
 HEAP32[i7 >> 2] = i14;
 d11 = +HEAPF32[i8 >> 2];
 d12 = +HEAPF32[i8 + 4 >> 2];
 d10 = +HEAPF32[i8 + 8 >> 2];
 i1 = HEAP32[i9 >> 2] | 0;
 do if (i1) {
  L11 : while (1) {
   d6 = +HEAPF32[i1 + 16 >> 2];
   do if (+Math_abs(+(d11 - d6)) < .00001) {
    d3 = +HEAPF32[i1 + 20 >> 2];
    if (+Math_abs(+(d12 - d3)) < .00001) {
     d3 = +HEAPF32[i1 + 24 >> 2];
     if (d10 < d3 & !(+Math_abs(+(d10 - d3)) < .00001)) {
      i5 = 11;
      break;
     } else {
      i5 = 13;
      break;
     }
    } else if (d12 < d3) {
     i5 = 11;
     break;
    } else {
     i5 = 13;
     break;
    }
   } else if (d11 < d6) i5 = 11; else i5 = 13; while (0);
   if ((i5 | 0) == 11) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = i1;
     i5 = 12;
     break;
    } else i1 = i2;
   } else if ((i5 | 0) == 13) {
    do if (+Math_abs(+(d6 - d11)) < .00001) {
     d3 = +HEAPF32[i1 + 20 >> 2];
     if (+Math_abs(+(d3 - d12)) < .00001) {
      d6 = +HEAPF32[i1 + 24 >> 2];
      if (d6 < d10 & !(+Math_abs(+(d6 - d10)) < .00001)) break; else {
       i5 = 21;
       break L11;
      }
     } else if (d3 < d12) break; else {
      i5 = 21;
      break L11;
     }
    } else if (!(d6 < d11)) {
     i5 = 21;
     break L11;
    } while (0);
    i2 = i1 + 4 | 0;
    i4 = HEAP32[i2 >> 2] | 0;
    if (!i4) {
     i5 = 20;
     break;
    } else i1 = i4;
   }
  }
  if ((i5 | 0) == 12) {
   HEAP32[i13 >> 2] = i1;
   i5 = 24;
   break;
  } else if ((i5 | 0) == 20) {
   HEAP32[i13 >> 2] = i1;
   i5 = 24;
   break;
  } else if ((i5 | 0) == 21) {
   i4 = i1;
   HEAP32[i13 >> 2] = i4;
   i2 = i13;
   i5 = 23;
   break;
  }
 } else {
  i4 = i9;
  HEAP32[i13 >> 2] = i4;
  i2 = i9;
  i5 = 23;
 } while (0);
 if ((i5 | 0) == 23) if (!i1) {
  i1 = i4;
  i5 = 24;
 }
 if ((i5 | 0) == 24) {
  i4 = __Znwj(32) | 0;
  HEAPF32[i4 + 16 >> 2] = d11;
  HEAPF32[i4 + 20 >> 2] = d12;
  HEAPF32[i4 + 24 >> 2] = d10;
  HEAP32[i4 + 28 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = i1;
  HEAP32[i2 >> 2] = i4;
  i1 = HEAP32[HEAP32[i15 >> 2] >> 2] | 0;
  if (!i1) i1 = i4; else {
   HEAP32[i15 >> 2] = i1;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i15 + 4 >> 2] | 0, i1);
  i1 = i15 + 8 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i1 = i4;
 }
 HEAP32[i1 + 28 >> 2] = i14;
 i15 = 1;
 STACKTOP = i16;
 return i15 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i7 = i1;
  i2 = 0;
  L8 : while (1) {
   i1 = HEAP8[i7 >> 0] | 0;
   i6 = i1 & 255;
   if (i6 >>> 0 > i9 >>> 0) {
    i1 = i7;
    i2 = 42;
    break L7;
   }
   do if (i1 << 24 >> 24 > -1) i1 = i7 + 1 | 0; else {
    if ((i1 & 255) < 194) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i7 | 0) < 2) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i7 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i6 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i7;
     if ((i8 - i1 | 0) < 3) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i4 = HEAP8[i7 + 1 >> 0] | 0;
     i3 = HEAP8[i7 + 2 >> 0] | 0;
     switch (i6 | 0) {
     case 224:
      {
       if ((i4 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i4 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i4 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i3 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if (((i4 & 255) << 6 & 4032 | i6 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7;
    if ((i11 - i2 | 0) >>> 0 < 2 | (i8 - i1 | 0) < 4) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i5 = HEAP8[i7 + 1 >> 0] | 0;
    i3 = HEAP8[i7 + 2 >> 0] | 0;
    i4 = HEAP8[i7 + 3 >> 0] | 0;
    switch (i6 | 0) {
    case 240:
     {
      if ((i5 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i5 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i4 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if (((i5 & 255) << 12 & 258048 | i6 << 18 & 1835008 | i3 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7 + 4 | 0;
    i2 = i2 + 1 | 0;
   } while (0);
   i2 = i2 + 1 | 0;
   if (!(i2 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i7 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function __ZNSt3__16vectorI9PicFamilyNS_9allocatorIS1_EEE8__appendEj(i11, i2) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = i11 + 8 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 i13 = i11 + 4 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 i3 = i1;
 if (((i4 - i3 | 0) / 56 | 0) >>> 0 >= i2 >>> 0) {
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = -1;
   HEAP32[i1 + 16 >> 2] = -1;
   i3 = i1 + 20 | 0;
   i4 = i3 + 36 | 0;
   do {
    HEAP32[i3 >> 2] = 0;
    i3 = i3 + 4 | 0;
   } while ((i3 | 0) < (i4 | 0));
   i1 = (HEAP32[i13 >> 2] | 0) + 56 | 0;
   HEAP32[i13 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i3 = ((i3 - i1 | 0) / 56 | 0) + i2 | 0;
 if (i3 >>> 0 > 76695844) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i5 = i1;
 i1 = (i4 - i5 | 0) / 56 | 0;
 if (i1 >>> 0 < 38347922) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i3 = ((HEAP32[i13 >> 2] | 0) - i5 | 0) / 56 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i6 = 8;
 } else {
  i1 = 76695844;
  i3 = ((HEAP32[i13 >> 2] | 0) - i5 | 0) / 56 | 0;
  i6 = 8;
 }
 if ((i6 | 0) == 8) {
  i5 = i1;
  i4 = __Znwj(i1 * 56 | 0) | 0;
  i1 = i3;
 }
 i9 = i4 + (i1 * 56 | 0) | 0;
 i10 = i9;
 i5 = i4 + (i5 * 56 | 0) | 0;
 i3 = i9;
 i1 = i10;
 do {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = -1;
  HEAP32[i3 + 16 >> 2] = -1;
  i3 = i3 + 20 | 0;
  i4 = i3 + 36 | 0;
  do {
   HEAP32[i3 >> 2] = 0;
   i3 = i3 + 4 | 0;
  } while ((i3 | 0) < (i4 | 0));
  i3 = i1 + 56 | 0;
  i1 = i3;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i8 = i1;
 i7 = i5;
 i6 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i4 = i11;
  i5 = i13;
  i2 = i10;
  i3 = i6;
 } else {
  i3 = i9;
  i2 = i10;
  do {
   i9 = i3 + -56 | 0;
   i5 = i1;
   i1 = i1 + -56 | 0;
   HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i9 = i3 + -44 | 0;
   i10 = i5 + -44 | 0;
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   i9 = i3 + -32 | 0;
   i10 = i5 + -32 | 0;
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   i10 = i3 + -20 | 0;
   i9 = i5 + -20 | 0;
   HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i9 >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP32[i9 + 8 >> 2] = 0;
   i5 = i5 + -8 | 0;
   i9 = HEAP32[i5 + 4 >> 2] | 0;
   i10 = i3 + -8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i10 + 4 >> 2] = i9;
   i3 = i2 + -56 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i6 | 0));
  i1 = i2;
  i4 = i11;
  i5 = i13;
  i2 = i1;
  i3 = HEAP32[i11 >> 2] | 0;
  i1 = HEAP32[i13 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i12 >> 2] = i7;
 i2 = i3;
 if ((i1 | 0) != (i2 | 0)) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + -20 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + -32 | 0);
  i1 = i1 + -56 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 } while ((i1 | 0) != (i2 | 0));
 if (!i3) return;
 __ZdlPv(i3);
 return;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i4 = HEAP32[i13 >> 2] | 0;
  } else i4 = i3;
 } else {
  i4 = i3;
  i2 = i10;
 }
 i8 = i12;
 i3 = HEAP32[i11 >> 2] | 0;
 i1 = i3 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i4 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i3 >> 0] | 0;
  i6 = i1 & 255;
  if (i6 >>> 0 > i9 >>> 0) {
   i1 = 2;
   break L9;
  }
  do if (i1 << 24 >> 24 > -1) {
   HEAP16[i4 >> 1] = i1 & 255;
   HEAP32[i11 >> 2] = i3 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i2 - i3 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i3 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i6 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i2 - i3 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i5 = HEAP8[i3 + 1 >> 0] | 0;
    i1 = HEAP8[i3 + 2 >> 0] | 0;
    switch (i6 | 0) {
    case 224:
     {
      if ((i5 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i5 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i5 & 255) << 6 & 4032 | i6 << 12 | i1 & 63;
    if ((i1 & 65535) >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i3 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i5 = HEAP8[i3 + 1 >> 0] | 0;
   i1 = HEAP8[i3 + 2 >> 0] | 0;
   i3 = HEAP8[i3 + 3 >> 0] | 0;
   switch (i6 | 0) {
   case 240:
    {
     if ((i5 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i5 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i5 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i7 = i1 & 255;
   if ((i7 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i3 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i4 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = i6 & 7;
   i3 = i5 & 255;
   i5 = i7 << 6;
   i1 = i1 & 63;
   if ((i3 << 12 & 258048 | i6 << 18 | i5 & 4032 | i1) >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP16[i4 >> 1] = i3 << 2 & 60 | i7 >>> 4 & 3 | ((i3 >>> 4 & 3 | i6 << 2) << 6) + 16320 | 55296;
   i7 = i4 + 2 | 0;
   HEAP32[i13 >> 2] = i7;
   HEAP16[i7 >> 1] = i1 | i5 & 960 | 56320;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
  } while (0);
  i4 = (HEAP32[i13 >> 2] | 0) + 2 | 0;
  HEAP32[i13 >> 2] = i4;
  i3 = HEAP32[i11 >> 2] | 0;
  i1 = i3 >>> 0 < i10 >>> 0;
  if (!(i1 & i4 >>> 0 < i12 >>> 0)) {
   i14 = 39;
   break;
  }
 } else i14 = 39; while (0);
 if ((i14 | 0) == 39) i1 = i1 & 1;
 return i1 | 0;
}

function __ZNSt3__16vectorI11PicGroupDefNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 6) + 1 | 0;
 if (i3 >>> 0 > 67108863) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 6 >>> 0 < 33554431) {
  i2 = i2 >> 5;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 6;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 67108863;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 6;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 << 6) | 0;
 }
 i3 = i5 + (i1 << 6) | 0;
 i2 = i3;
 i8 = i5 + (i4 << 6) | 0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_(i3, i7);
 i12 = i7 + 12 | 0;
 i4 = HEAP32[i12 + 4 >> 2] | 0;
 i6 = i5 + (i1 << 6) + 12 | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i6 + 4 >> 2] = i4;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i5 + (i1 << 6) + 20 | 0, i7 + 20 | 0);
 i6 = i5 + (i1 << 6) + 32 | 0;
 i7 = i7 + 32 | 0;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i6 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
 i6 = i5 + (i1 + 1 << 6) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i13 = i3 + -64 | 0;
   i7 = i1;
   i1 = i1 + -64 | 0;
   HEAP32[i13 >> 2] = 0;
   i12 = i3 + -60 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i3 + -56 >> 2] = 0;
   HEAP32[i13 >> 2] = HEAP32[i1 >> 2];
   i13 = i7 + -60 | 0;
   HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
   i12 = i7 + -56 | 0;
   HEAP32[i3 + -56 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   i13 = i7 + -52 | 0;
   i12 = HEAP32[i13 + 4 >> 2] | 0;
   i4 = i3 + -52 | 0;
   HEAP32[i4 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i4 + 4 >> 2] = i12;
   i4 = i3 + -44 | 0;
   i12 = i7 + -44 | 0;
   HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   i12 = i3 + -32 | 0;
   i7 = i7 + -32 | 0;
   HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i12 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i12 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i12 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   HEAP32[i12 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
   i3 = i2 + -64 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = i1;
  i1 = i1 + -64 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2 + -44 | 0);
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i4;
  if (i4) {
   i2 = i2 + -60 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
   __ZdlPv(i4);
  }
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i6 = i1;
  i7 = 0;
  L8 : while (1) {
   i1 = HEAP8[i6 >> 0] | 0;
   i5 = i1 & 255;
   do if (i1 << 24 >> 24 > -1) {
    if (i5 >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 1 | 0;
   } else {
    if ((i1 & 255) < 194) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i6 | 0) < 2) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i6 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i5 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i6;
     if ((i8 - i1 | 0) < 3) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i3 = HEAP8[i6 + 1 >> 0] | 0;
     i2 = HEAP8[i6 + 2 >> 0] | 0;
     switch (i5 | 0) {
     case 224:
      {
       if ((i3 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i3 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i3 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i2 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if (((i3 & 255) << 6 & 4032 | i5 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6;
    if ((i8 - i1 | 0) < 4) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i4 = HEAP8[i6 + 1 >> 0] | 0;
    i2 = HEAP8[i6 + 2 >> 0] | 0;
    i3 = HEAP8[i6 + 3 >> 0] | 0;
    switch (i5 | 0) {
    case 240:
     {
      if ((i4 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i4 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i2 = i2 & 255;
    if ((i2 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i3 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if (((i4 & 255) << 12 & 258048 | i5 << 18 & 1835008 | i2 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 4 | 0;
   } while (0);
   i7 = i7 + 1 | 0;
   if (!(i7 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i6 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function __ZN5Shape18make_sides_faceneiEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i11;
 i9 = i6 + 24 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 i10 = i2 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 if (i1) {
  if (i1 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i2);
  i4 = __Znwj(i1 << 2) | 0;
  HEAP32[i2 >> 2] = i4;
  i5 = i4 + (i1 << 2) | 0;
  HEAP32[i2 + 8 >> 2] = i5;
  _memset(i4 | 0, 0, i1 << 2 | 0) | 0;
  HEAP32[i10 >> 2] = i5;
  i1 = HEAP32[i9 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i2 = HEAP32[i6 + 44 >> 2] | 0;
   i3 = 0;
   do {
    i1 = i2 + (i3 * 188 | 0) + 44 | 0;
    HEAP32[i1 >> 2] = -1;
    HEAP32[i1 + 4 >> 2] = -1;
    HEAP32[i1 + 8 >> 2] = -1;
    HEAP32[i1 + 12 >> 2] = -1;
    i3 = i3 + 1 | 0;
    i1 = HEAP32[i9 >> 2] | 0;
   } while ((i3 | 0) < (i1 | 0));
   i8 = i4;
  } else i8 = i4;
 } else {
  i8 = 0;
  i5 = 0;
  i1 = 0;
 }
 i4 = i6 + 28 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i1 = HEAP32[i6 + 48 >> 2] | 0;
  i2 = HEAP32[i6 + 44 >> 2] | 0;
  i3 = 0;
  do {
   i13 = HEAP32[i1 + (i3 * 24 | 0) + 16 >> 2] | 0;
   i7 = i8 + (i13 << 2) | 0;
   i12 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i12 + 1;
   HEAP32[i2 + (i13 * 188 | 0) + 44 + (i12 << 2) >> 2] = i3;
   i12 = HEAP32[i1 + (i3 * 24 | 0) + 20 >> 2] | 0;
   i13 = i8 + (i12 << 2) | 0;
   i7 = HEAP32[i13 >> 2] | 0;
   HEAP32[i13 >> 2] = i7 + 1;
   HEAP32[i2 + (i12 * 188 | 0) + 44 + (i7 << 2) >> 2] = i3;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i4 >> 2] | 0));
  i1 = HEAP32[i9 >> 2] | 0;
 }
 if ((i1 | 0) > 0) {
  i7 = HEAP32[i6 + 44 >> 2] | 0;
  i4 = HEAP32[i6 + 48 >> 2] | 0;
  i6 = 0;
  do {
   i1 = i7 + (i6 * 188 | 0) + 60 | 0;
   i3 = HEAP32[i7 + (i6 * 188 | 0) + 44 >> 2] | 0;
   i2 = HEAP32[i4 + (i3 * 24 | 0) + 16 >> 2] | 0;
   i3 = HEAP32[i4 + (i3 * 24 | 0) + 20 >> 2] | 0;
   do if ((i2 | 0) != (i6 | 0)) if ((i3 | 0) == (i6 | 0)) {
    HEAP32[i1 >> 2] = i2;
    break;
   } else {
    HEAP32[i1 >> 2] = -1;
    break;
   } else HEAP32[i1 >> 2] = i3; while (0);
   i2 = HEAP32[i7 + (i6 * 188 | 0) + 48 >> 2] | 0;
   i1 = HEAP32[i4 + (i2 * 24 | 0) + 16 >> 2] | 0;
   i2 = HEAP32[i4 + (i2 * 24 | 0) + 20 >> 2] | 0;
   do if ((i1 | 0) != (i6 | 0)) {
    i3 = i7 + (i6 * 188 | 0) + 64 | 0;
    if ((i2 | 0) == (i6 | 0)) {
     HEAP32[i3 >> 2] = i1;
     break;
    } else {
     HEAP32[i3 >> 2] = -1;
     break;
    }
   } else HEAP32[i7 + (i6 * 188 | 0) + 64 >> 2] = i2; while (0);
   i2 = HEAP32[i7 + (i6 * 188 | 0) + 52 >> 2] | 0;
   i1 = HEAP32[i4 + (i2 * 24 | 0) + 16 >> 2] | 0;
   i2 = HEAP32[i4 + (i2 * 24 | 0) + 20 >> 2] | 0;
   do if ((i1 | 0) != (i6 | 0)) {
    i3 = i7 + (i6 * 188 | 0) + 68 | 0;
    if ((i2 | 0) == (i6 | 0)) {
     HEAP32[i3 >> 2] = i1;
     break;
    } else {
     HEAP32[i3 >> 2] = -1;
     break;
    }
   } else HEAP32[i7 + (i6 * 188 | 0) + 68 >> 2] = i2; while (0);
   i2 = HEAP32[i7 + (i6 * 188 | 0) + 56 >> 2] | 0;
   i1 = HEAP32[i4 + (i2 * 24 | 0) + 16 >> 2] | 0;
   i2 = HEAP32[i4 + (i2 * 24 | 0) + 20 >> 2] | 0;
   do if ((i1 | 0) != (i6 | 0)) {
    i3 = i7 + (i6 * 188 | 0) + 72 | 0;
    if ((i2 | 0) == (i6 | 0)) {
     HEAP32[i3 >> 2] = i1;
     break;
    } else {
     HEAP32[i3 >> 2] = -1;
     break;
    }
   } else HEAP32[i7 + (i6 * 188 | 0) + 72 >> 2] = i2; while (0);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i9 >> 2] | 0));
 }
 if (!i8) {
  STACKTOP = i11;
  return;
 }
 if ((i5 | 0) != (i8 | 0)) HEAP32[i10 >> 2] = i5 + (~((i5 + -4 - i8 | 0) >>> 2) << 2);
 __ZdlPv(i8);
 STACKTOP = i11;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i15, i14, i6, i13) {
 i3 = i3 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i15 + 8 >> 2] | 0)) {
  if ((HEAP32[i15 + 4 >> 2] | 0) == (i14 | 0) ? (i1 = i15 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i6;
 } else {
  if ((i3 | 0) != (HEAP32[i15 >> 2] | 0)) {
   i12 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i12 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3 + 16 | 0, i15, i14, i6, i13);
   i1 = i3 + 24 | 0;
   if ((i12 | 0) <= 1) break;
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   if ((i2 & 2 | 0) == 0 ? (i5 = i15 + 36 | 0, (HEAP32[i5 >> 2] | 0) != 1) : 0) {
    if (!(i2 & 1)) {
     i2 = i15 + 54 | 0;
     while (1) {
      if (HEAP8[i2 >> 0] | 0) break L1;
      if ((HEAP32[i5 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
      i1 = i1 + 8 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break L1;
     }
    }
    i2 = i15 + 24 | 0;
    i3 = i15 + 54 | 0;
    while (1) {
     if (HEAP8[i3 >> 0] | 0) break L1;
     if ((HEAP32[i5 >> 2] | 0) == 1 ? (HEAP32[i2 >> 2] | 0) == 1 : 0) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
     i1 = i1 + 8 | 0;
     if (i1 >>> 0 >= i4 >>> 0) break L1;
    }
   }
   i2 = i15 + 54 | 0;
   while (1) {
    if (HEAP8[i2 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i4 >>> 0) break L1;
   }
  }
  if ((HEAP32[i15 + 16 >> 2] | 0) != (i14 | 0) ? (i11 = i15 + 20 | 0, (HEAP32[i11 >> 2] | 0) != (i14 | 0)) : 0) {
   HEAP32[i15 + 32 >> 2] = i6;
   i8 = i15 + 44 | 0;
   if ((HEAP32[i8 >> 2] | 0) == 4) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i2 << 3) | 0;
   i5 = i15 + 52 | 0;
   i6 = i15 + 53 | 0;
   i9 = i15 + 54 | 0;
   i7 = i3 + 8 | 0;
   i10 = i15 + 24 | 0;
   L34 : do if ((i2 | 0) > 0) {
    i2 = 0;
    i1 = 0;
    i3 = i3 + 16 | 0;
    while (1) {
     HEAP8[i5 >> 0] = 0;
     HEAP8[i6 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i3, i15, i14, i14, 1, i13);
     if (HEAP8[i9 >> 0] | 0) {
      i12 = 20;
      break L34;
     }
     do if (HEAP8[i6 >> 0] | 0) {
      if (!(HEAP8[i5 >> 0] | 0)) if (!(HEAP32[i7 >> 2] & 1)) {
       i1 = 1;
       i12 = 20;
       break L34;
      } else {
       i1 = 1;
       break;
      }
      if ((HEAP32[i10 >> 2] | 0) == 1) break L34;
      if (!(HEAP32[i7 >> 2] & 2)) break L34; else {
       i2 = 1;
       i1 = 1;
      }
     } while (0);
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 >= i4 >>> 0) {
      i12 = 20;
      break;
     }
    }
   } else {
    i2 = 0;
    i1 = 0;
    i12 = 20;
   } while (0);
   do if ((i12 | 0) == 20) {
    if ((!i2 ? (HEAP32[i11 >> 2] = i14, i14 = i15 + 40 | 0, HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1, (HEAP32[i15 + 36 >> 2] | 0) == 1) : 0) ? (HEAP32[i10 >> 2] | 0) == 2 : 0) {
     HEAP8[i9 >> 0] = 1;
     if (i1) break;
    } else i12 = 24;
    if ((i12 | 0) == 24 ? i1 : 0) break;
    HEAP32[i8 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i8 >> 2] = 3;
   break;
  }
  if ((i6 | 0) == 1) HEAP32[i15 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__16vectorI4MeshNS_9allocatorIS1_EEE8__appendEj(i12, i4) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i14;
 i5 = HEAP32[i12 + 8 >> 2] | 0;
 i6 = i12 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = i1;
 if (((i5 - i2 | 0) / 192 | 0) >>> 0 >= i4 >>> 0) {
  do {
   i3 = i1 + 104 | 0;
   i2 = i1 + 124 | 0;
   i10 = i1;
   i11 = i10 + 100 | 0;
   do {
    HEAP32[i10 >> 2] = 0;
    i10 = i10 + 4 | 0;
   } while ((i10 | 0) < (i11 | 0));
   HEAP16[i1 + 100 >> 1] = 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   HEAP32[i3 + 16 >> 2] = 0;
   HEAP32[i2 >> 2] = 34962;
   HEAP32[i1 + 128 >> 2] = 0;
   HEAP32[i1 + 132 >> 2] = 0;
   HEAP32[i1 + 136 >> 2] = 34962;
   HEAP32[i1 + 140 >> 2] = 0;
   HEAP32[i1 + 144 >> 2] = 0;
   HEAP32[i1 + 148 >> 2] = 34962;
   HEAP32[i1 + 152 >> 2] = 0;
   HEAP32[i1 + 156 >> 2] = 0;
   HEAP32[i1 + 160 >> 2] = 34962;
   HEAP32[i1 + 164 >> 2] = 0;
   HEAP32[i1 + 168 >> 2] = 0;
   HEAP32[i1 + 172 >> 2] = 34962;
   HEAP32[i1 + 176 >> 2] = 0;
   HEAP32[i1 + 180 >> 2] = 0;
   HEAP32[i1 + 184 >> 2] = 34963;
   HEAP32[i1 + 188 >> 2] = 0;
   i1 = (HEAP32[i6 >> 2] | 0) + 192 | 0;
   HEAP32[i6 >> 2] = i1;
   i4 = i4 + -1 | 0;
  } while ((i4 | 0) != 0);
  STACKTOP = i14;
  return;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 i2 = ((i2 - i1 | 0) / 192 | 0) + i4 | 0;
 if (i2 >>> 0 > 22369621) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
 i3 = i1;
 i1 = (i5 - i3 | 0) / 192 | 0;
 if (i1 >>> 0 < 11184810) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
 } else i1 = 22369621;
 i6 = ((HEAP32[i6 >> 2] | 0) - i3 | 0) / 192 | 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAP32[i13 + 16 >> 2] = i12 + 8;
 if (!i1) i7 = 0; else i7 = __Znwj(i1 * 192 | 0) | 0;
 HEAP32[i13 >> 2] = i7;
 i3 = i7 + (i6 * 192 | 0) | 0;
 i9 = i13 + 8 | 0;
 HEAP32[i9 >> 2] = i3;
 i8 = i13 + 4 | 0;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i13 + 12 >> 2] = i7 + (i1 * 192 | 0);
 i1 = i4;
 while (1) {
  i2 = i3 + 104 | 0;
  i5 = i3 + 124 | 0;
  i10 = i3;
  i11 = i10 + 100 | 0;
  do {
   HEAP32[i10 >> 2] = 0;
   i10 = i10 + 4 | 0;
  } while ((i10 | 0) < (i11 | 0));
  HEAP16[i3 + 100 >> 1] = 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i5 >> 2] = 34962;
  HEAP32[i3 + 128 >> 2] = 0;
  HEAP32[i3 + 132 >> 2] = 0;
  HEAP32[i3 + 136 >> 2] = 34962;
  HEAP32[i3 + 140 >> 2] = 0;
  HEAP32[i3 + 144 >> 2] = 0;
  HEAP32[i3 + 148 >> 2] = 34962;
  HEAP32[i3 + 152 >> 2] = 0;
  HEAP32[i3 + 156 >> 2] = 0;
  HEAP32[i3 + 160 >> 2] = 34962;
  HEAP32[i3 + 164 >> 2] = 0;
  HEAP32[i3 + 168 >> 2] = 0;
  HEAP32[i3 + 172 >> 2] = 34962;
  HEAP32[i3 + 176 >> 2] = 0;
  HEAP32[i3 + 180 >> 2] = 0;
  HEAP32[i3 + 184 >> 2] = 34963;
  HEAP32[i3 + 188 >> 2] = 0;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i3 = i3 + 192 | 0;
 }
 HEAP32[i9 >> 2] = i7 + ((i6 + i4 | 0) * 192 | 0);
 __ZNSt3__16vectorI4MeshNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE(i12, i13);
 i1 = HEAP32[i8 >> 2] | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  i3 = ~(((i2 + -192 - i1 | 0) >>> 0) / 192 | 0);
  i4 = i2;
  do {
   i4 = i4 + -192 | 0;
   __ZN4MeshD2Ev(i4);
  } while ((i4 | 0) != (i1 | 0));
  HEAP32[i9 >> 2] = i2 + (i3 * 192 | 0);
 }
 i1 = HEAP32[i13 >> 2] | 0;
 if (!i1) {
  STACKTOP = i14;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i14;
 return;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16136) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16292) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 4;
    HEAP32[i3 >> 2] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 4;
   HEAP32[i7 >> 2] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 4;
   HEAP32[i8 >> 2] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 4;
     HEAP32[i18 >> 2] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 4;
    HEAP32[i18 >> 2] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2 << 2) | 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i1 >>> 0 < i3 >>> 0) {
    do {
     i19 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i19;
     i1 = i1 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i1 >>> 0 < i3 >>> 0);
    i1 = i4;
   } else i1 = i4;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 7](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2 << 2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i23, i3, i20, i19, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i9 = i28 + 464 | 0;
 i21 = i28 + 60 | 0;
 i16 = i28 + 468 | 0;
 i13 = i28 + 56 | 0;
 i17 = i28 + 52 | 0;
 i25 = i28 + 40 | 0;
 i27 = i28 + 28 | 0;
 i26 = i28 + 16 | 0;
 i4 = i28 + 12 | 0;
 i8 = i28 + 64 | 0;
 i15 = i28 + 8 | 0;
 i14 = i28 + 4 | 0;
 i10 = i28;
 i1 = __ZNKSt3__18ios_base6getlocEv(i20) | 0;
 HEAP32[i21 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i21, 16136) | 0;
 i7 = HEAP8[i18 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i12 = i18 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i12 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP32[(i2 ? i12 : HEAP32[i18 + 8 >> 2] | 0) >> 2] | 0;
  i7 = (i7 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 63](i11, 45) | 0);
 }
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i7, i21, i16, i13, i17, i25, i27, i26, i4);
 i5 = HEAP8[i18 >> 0] | 0;
 i6 = HEAP32[i12 >> 2] | 0;
 i2 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : i6;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i29 = HEAP8[i26 >> 0] | 0;
  i4 = HEAP8[i27 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i29 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i22 = i2;
  }
 } else {
  i24 = 0;
  i22 = i8;
 }
 i29 = (i5 & 1) == 0;
 i2 = i29 ? i12 : HEAP32[i18 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i22, i15, i14, HEAP32[i20 + 4 >> 2] | 0, i2, i2 + ((i29 ? (i5 & 255) >>> 1 : i6) << 2) | 0, i11, i7, i16, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i10 >> 2] = HEAP32[i23 >> 2];
 i29 = HEAP32[i15 >> 2] | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i22, i29, i2, i20, i19) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i21 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i28;
 return i2 | 0;
}

function __ZN5Shape19makeVolumeAndFacingEv(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i19 = i22;
 i16 = ((HEAP32[i18 + 12 >> 2] | 0) / 4 | 0) + 2 | 0;
 i17 = ((HEAP32[i18 + 16 >> 2] | 0) / 4 | 0) + 2 | 0;
 i12 = ((HEAP32[i18 + 20 >> 2] | 0) / 4 | 0) + 2 | 0;
 HEAP32[i19 >> 2] = i16;
 HEAP32[i19 + 4 >> 2] = i17;
 HEAP32[i19 + 8 >> 2] = i12;
 i20 = i19 + 12 | 0;
 i13 = Math_imul(i17, i16) | 0;
 HEAP32[i20 >> 2] = i13;
 i21 = i19 + 16 | 0;
 i14 = Math_imul(i12, i13) | 0;
 i15 = __Znaj(i14 >>> 0 > 357913941 ? -1 : i14 * 12 | 0) | 0;
 if (i14) {
  i1 = i15 + (i14 * 12 | 0) | 0;
  i2 = i15;
  do {
   HEAP32[i2 >> 2] = 1;
   i11 = i2 + 4 | 0;
   HEAP8[i11 >> 0] = 0;
   HEAP8[i11 + 1 >> 0] = 0;
   HEAP8[i11 + 2 >> 0] = 0;
   HEAP8[i11 + 3 >> 0] = 0;
   HEAP8[i11 + 4 >> 0] = 0;
   HEAP8[i11 + 5 >> 0] = 0;
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != (i1 | 0));
 }
 HEAP32[i21 >> 2] = i15;
 i7 = i18 + 24 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) > 0) {
  i9 = HEAP32[i18 + 44 >> 2] | 0;
  i11 = 0;
  do {
   i25 = HEAP32[i9 + (i11 * 188 | 0) + 4 >> 2] | 0;
   i4 = (i25 | 0) / 4 | 0;
   i1 = i4 + 1 | 0;
   i24 = HEAP32[i9 + (i11 * 188 | 0) + 8 >> 2] | 0;
   i5 = (i24 | 0) / 4 | 0;
   i2 = i5 + 1 | 0;
   i23 = HEAP32[i9 + (i11 * 188 | 0) + 12 >> 2] | 0;
   i6 = (i23 | 0) / 4 | 0;
   i3 = i6 + 1 | 0;
   i10 = HEAP32[i9 + (i11 * 188 | 0) >> 2] | 0;
   i4 = (i10 | 0) == 0 ? i4 : i1;
   i5 = (i10 | 0) == 1 ? i5 : i2;
   i6 = (i10 | 0) == 2 ? i6 : i3;
   L10 : do if (((i1 | 0) < (i16 | 0) & (((i25 | 0) < -7 | (i24 | 0) < -7 | (i23 | 0) < -7) ^ 1) & (i2 | 0) < (i17 | 0) ? !((i4 | i5 | 0) < 0 | (i3 | 0) >= (i12 | 0)) : 0) ? (i6 | 0) > -1 & (i4 | 0) < (i16 | 0) & (i5 | 0) < (i17 | 0) & (i6 | 0) < (i12 | 0) : 0) {
    i2 = (Math_imul(i16, i2) | 0) + i1 + (Math_imul(i13, i3) | 0) | 0;
    i1 = (Math_imul(i16, i5) | 0) + i4 + (Math_imul(i13, i6) | 0) | 0;
    switch (i10 | 0) {
    case 2:
     {
      HEAP8[i15 + (i2 * 12 | 0) + 9 >> 0] = 1;
      HEAP8[i15 + (i1 * 12 | 0) + 8 >> 0] = 1;
      break L10;
     }
    case 0:
     {
      HEAP8[i15 + (i2 * 12 | 0) + 4 >> 0] = 1;
      HEAP8[i15 + (i1 * 12 | 0) + 5 >> 0] = 1;
      break L10;
     }
    case 1:
     {
      HEAP8[i15 + (i2 * 12 | 0) + 6 >> 0] = 1;
      HEAP8[i15 + (i1 * 12 | 0) + 7 >> 0] = 1;
      break L10;
     }
    default:
     break L10;
    }
   } while (0);
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (i8 | 0));
 }
 HEAP32[i18 + 84 >> 2] = i14 - (__ZN19BoundedBlockSpace3D9FloodFillEiii(i19, 0, 0, 0) | 0);
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) > 0) {
  i7 = HEAP32[i18 + 44 >> 2] | 0;
  i6 = HEAP32[i19 >> 2] | 0;
  i5 = HEAP32[i20 >> 2] | 0;
  i1 = HEAP32[i21 >> 2] | 0;
  i4 = 0;
  do {
   i2 = (HEAP32[i1 + ((((HEAP32[i7 + (i4 * 188 | 0) + 4 >> 2] | 0) / 4 | 0) + 1 + (Math_imul(i6, ((HEAP32[i7 + (i4 * 188 | 0) + 8 >> 2] | 0) / 4 | 0) + 1 | 0) | 0) + (Math_imul(i5, ((HEAP32[i7 + (i4 * 188 | 0) + 12 >> 2] | 0) / 4 | 0) + 1 | 0) | 0) | 0) * 12 | 0) >> 2] | 0) != 0 & 1;
   i3 = i7 + (i4 * 188 | 0) + 16 | 0;
   HEAP32[i3 >> 2] = i2;
   if ((HEAP32[i7 + (i4 * 188 | 0) >> 2] | 0) == 2) HEAP32[i3 >> 2] = i2 ^ 1;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i8 | 0));
 } else i1 = HEAP32[i21 >> 2] | 0;
 if (!i1) {
  STACKTOP = i22;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i22;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16144) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16284) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 1;
   HEAP8[i7 >> 0] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 1;
     HEAP8[i18 >> 0] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 1;
    HEAP8[i18 >> 0] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2) | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   i3 = i3 + -1 | 0;
   if (i1 >>> 0 < i3 >>> 0) do {
    i19 = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i19;
    i1 = i1 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
   i1 = HEAP32[i11 >> 2] | 0;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 7](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i22, i4, i19, i18, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i9 = i27 + 56 | 0;
 i20 = i27 + 52 | 0;
 i15 = i27 + 64 | 0;
 i12 = i27 + 61 | 0;
 i16 = i27 + 60 | 0;
 i24 = i27 + 40 | 0;
 i26 = i27 + 28 | 0;
 i25 = i27 + 16 | 0;
 i5 = i27 + 12 | 0;
 i8 = i27 + 68 | 0;
 i14 = i27 + 8 | 0;
 i13 = i27 + 4 | 0;
 i10 = i27;
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 16144) | 0;
 i7 = HEAP8[i17 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i3 = i17 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i3 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP8[(i2 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0) >> 0] | 0;
  i7 = i7 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 63](i11, 45) | 0) << 24 >> 24;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i4, i7, i20, i15, i12, i16, i24, i26, i25, i5);
 i6 = HEAP8[i17 >> 0] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = (i6 & 1) == 0 ? (i6 & 255) >>> 1 : i4;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i28 = HEAP8[i25 >> 0] | 0;
  i5 = HEAP8[i26 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 } else {
  i28 = HEAP8[i25 >> 0] | 0;
  i2 = HEAP8[i26 >> 0] | 0;
  i2 = i3 + 2 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i23 = i2;
   i21 = i2;
  }
 } else {
  i23 = 0;
  i21 = i8;
 }
 i28 = (i6 & 1) == 0;
 i2 = i28 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i2, i2 + (i28 ? (i6 & 255) >>> 1 : i4) | 0, i11, i7, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i24, i26, i25, i3);
 HEAP32[i10 >> 2] = HEAP32[i22 >> 2];
 i28 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i21, i28, i2, i19, i18) | 0;
 if (i23) {
  _free(i23);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i27;
 return i2 | 0;
}

function __ZNSt3__16vectorI7PicTypeNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(i11, i2, i12) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = i2;
 i8 = (i12 - i4 | 0) / 900 | 0;
 i10 = i11 + 8 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 i3 = i6;
 if (i8 >>> 0 > ((i1 - i3 | 0) / 900 | 0) >>> 0) {
  if (i6) {
   i7 = i11 + 4 | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if ((i1 | 0) == (i6 | 0)) i1 = i6; else {
    do {
     i3 = i1 + -900 | 0;
     HEAP32[i7 >> 2] = i3;
     i4 = HEAP32[i1 + -12 >> 2] | 0;
     i5 = i4;
     if (!i4) i1 = i3; else {
      i1 = i1 + -8 | 0;
      i3 = HEAP32[i1 >> 2] | 0;
      if ((i3 | 0) != (i4 | 0)) HEAP32[i1 >> 2] = i3 + (~((i3 + -8 - i5 | 0) >>> 3) << 3);
      __ZdlPv(i4);
      i1 = HEAP32[i7 >> 2] | 0;
     }
    } while ((i1 | 0) != (i6 | 0));
    i1 = HEAP32[i11 >> 2] | 0;
   }
   __ZdlPv(i1);
   HEAP32[i10 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
  }
  i4 = i8 >>> 0 > 4772185;
  if (i4) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i1 = (i1 - 0 | 0) / 900 | 0;
  if (i1 >>> 0 < 2386092) {
   i3 = i1 << 1;
   i1 = i3 >>> 0 >= i8 >>> 0;
   if (i1 | i4 ^ 1) i9 = i1 ? i3 : i8; else __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  } else i9 = 4772185;
  i1 = __Znwj(i9 * 900 | 0) | 0;
  i3 = i11 + 4 | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i11 >> 2] = i1;
  HEAP32[i10 >> 2] = i1 + (i9 * 900 | 0);
  if ((i2 | 0) == (i12 | 0)) return;
  do {
   _memcpy(i1 | 0, i2 | 0, 885) | 0;
   __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEEC2ERKS5_(i1 + 888 | 0, i2 + 888 | 0);
   i1 = (HEAP32[i3 >> 2] | 0) + 900 | 0;
   HEAP32[i3 >> 2] = i1;
   i2 = i2 + 900 | 0;
  } while ((i2 | 0) != (i12 | 0));
  return;
 }
 i7 = i11 + 4 | 0;
 i1 = ((HEAP32[i7 >> 2] | 0) - i3 | 0) / 900 | 0;
 i5 = i8 >>> 0 > i1 >>> 0;
 i1 = i5 ? i2 + (i1 * 900 | 0) | 0 : i12;
 if ((i1 | 0) != (i2 | 0)) {
  i4 = i1 + -900 - i4 | 0;
  i3 = i6;
  while (1) {
   _memcpy(i3 | 0, i2 | 0, 885) | 0;
   if ((i3 | 0) != (i2 | 0)) __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i3 + 888 | 0, HEAP32[i2 + 888 >> 2] | 0, HEAP32[i2 + 892 >> 2] | 0);
   i2 = i2 + 900 | 0;
   if ((i2 | 0) == (i1 | 0)) break; else i3 = i3 + 900 | 0;
  }
  i6 = i6 + ((((i4 >>> 0) / 900 | 0) + 1 | 0) * 900 | 0) | 0;
 }
 if (i5) {
  if ((i1 | 0) == (i12 | 0)) return;
  i2 = HEAP32[i7 >> 2] | 0;
  do {
   _memcpy(i2 | 0, i1 | 0, 885) | 0;
   __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEEC2ERKS5_(i2 + 888 | 0, i1 + 888 | 0);
   i2 = (HEAP32[i7 >> 2] | 0) + 900 | 0;
   HEAP32[i7 >> 2] = i2;
   i1 = i1 + 900 | 0;
  } while ((i1 | 0) != (i12 | 0));
  return;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) return;
 do {
  i2 = i1 + -900 | 0;
  HEAP32[i7 >> 2] = i2;
  i3 = HEAP32[i1 + -12 >> 2] | 0;
  i4 = i3;
  if (!i3) i1 = i2; else {
   i1 = i1 + -8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -8 - i4 | 0) >>> 3) << 3);
   __ZdlPv(i3);
   i1 = HEAP32[i7 >> 2] | 0;
  }
 } while ((i1 | 0) != (i6 | 0));
 return;
}

function __ZN12BaseGLWidget6rotateENS_5EAxisEii(i6, i5, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i24 = i26 + 128 | 0;
 i25 = i26 + 64 | 0;
 i21 = i26;
 i22 = i21;
 i23 = i22 + 64 | 0;
 do {
  HEAP32[i22 >> 2] = 0;
  i22 = i22 + 4 | 0;
 } while ((i22 | 0) < (i23 | 0));
 d4 = +(i1 | 0);
 d3 = +(i2 | 0);
 i2 = i6 + 108 | 0;
 if ((i2 | 0) != (i21 | 0)) {
  i22 = i21;
  i1 = i2;
  i23 = i22 + 64 | 0;
  do {
   HEAP32[i22 >> 2] = HEAP32[i1 >> 2];
   i22 = i22 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i22 | 0) < (i23 | 0));
 }
 i22 = i2;
 i23 = i22 + 60 | 0;
 do {
  HEAP32[i22 >> 2] = 0;
  i22 = i22 + 4 | 0;
 } while ((i22 | 0) < (i23 | 0));
 HEAPF32[i2 >> 2] = 1.0;
 HEAPF32[i6 + 128 >> 2] = 1.0;
 HEAPF32[i6 + 148 >> 2] = 1.0;
 HEAPF32[i6 + 168 >> 2] = 1.0;
 switch (i5 | 0) {
 case 0:
  {
   __ZN4Mat46rotateEffff(i2, d4, 1.0, 0.0, 0.0);
   break;
  }
 case 1:
  {
   __ZN4Mat46rotateEffff(i2, d4, 0.0, 1.0, 0.0);
   break;
  }
 case 2:
  {
   __ZN4Mat46rotateEffff(i2, d4, 0.0, 0.0, 1.0);
   break;
  }
 case 3:
  {
   __ZN4Mat46rotateEffff(i2, d4, 0.0, 1.0, 0.0);
   __ZN4Mat46rotateEffff(i2, d3, 1.0, 0.0, 0.0);
   break;
  }
 case 4:
  {
   __ZN4Mat46rotateEffff(i2, d4, 0.0, 0.0, 1.0);
   __ZN4Mat46rotateEffff(i2, d3, 1.0, 0.0, 0.0);
   break;
  }
 case 5:
  {
   __ZN4Mat46rotateEffff(i2, d4, 0.0, 1.0, 0.0);
   __ZN4Mat46rotateEffff(i2, d3, 0.0, 0.0, 1.0);
   break;
  }
 default:
  {}
 }
 i22 = i25;
 i1 = i2;
 i23 = i22 + 64 | 0;
 do {
  HEAP32[i22 >> 2] = HEAP32[i1 >> 2];
  i22 = i22 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i22 | 0) < (i23 | 0));
 d4 = +HEAPF32[i21 >> 2];
 d7 = +HEAPF32[i21 + 4 >> 2];
 d8 = +HEAPF32[i21 + 8 >> 2];
 d9 = +HEAPF32[i21 + 12 >> 2];
 d10 = +HEAPF32[i21 + 16 >> 2];
 d11 = +HEAPF32[i21 + 20 >> 2];
 d12 = +HEAPF32[i21 + 24 >> 2];
 d13 = +HEAPF32[i21 + 28 >> 2];
 d14 = +HEAPF32[i21 + 32 >> 2];
 d15 = +HEAPF32[i21 + 36 >> 2];
 d16 = +HEAPF32[i21 + 40 >> 2];
 d17 = +HEAPF32[i21 + 44 >> 2];
 d18 = +HEAPF32[i21 + 48 >> 2];
 d19 = +HEAPF32[i21 + 52 >> 2];
 d20 = +HEAPF32[i21 + 56 >> 2];
 d3 = +HEAPF32[i21 + 60 >> 2];
 i22 = i24;
 i23 = i22 + 64 | 0;
 do {
  HEAP32[i22 >> 2] = 0;
  i22 = i22 + 4 | 0;
 } while ((i22 | 0) < (i23 | 0));
 i1 = 0;
 do {
  d30 = +HEAPF32[i25 + (i1 << 2) >> 2];
  i21 = i1 + 4 | 0;
  d29 = +HEAPF32[i25 + (i21 << 2) >> 2];
  i22 = i1 + 8 | 0;
  d28 = +HEAPF32[i25 + (i22 << 2) >> 2];
  i23 = i1 + 12 | 0;
  d27 = +HEAPF32[i25 + (i23 << 2) >> 2];
  HEAPF32[i24 + (i1 << 2) >> 2] = d4 * d30 + 0.0 + d7 * d29 + d8 * d28 + d9 * d27;
  HEAPF32[i24 + (i21 << 2) >> 2] = d10 * d30 + 0.0 + d11 * d29 + d12 * d28 + d13 * d27;
  HEAPF32[i24 + (i22 << 2) >> 2] = d14 * d30 + 0.0 + d15 * d29 + d16 * d28 + d17 * d27;
  HEAPF32[i24 + (i23 << 2) >> 2] = d18 * d30 + 0.0 + d19 * d29 + d20 * d28 + d3 * d27;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i24 | 0) == (i2 | 0)) {
  STACKTOP = i26;
  return;
 }
 i22 = i2;
 i1 = i24;
 i23 = i22 + 64 | 0;
 do {
  HEAP32[i22 >> 2] = HEAP32[i1 >> 2];
  i22 = i22 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i22 | 0) < (i23 | 0));
 STACKTOP = i26;
 return;
}

function __ZN16BuildControlBase9myPaintGLEb(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i5 = i13 + 64 | 0;
 i6 = i13;
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClear(16640);
 i7 = i9 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i10 = i5;
 i11 = i1 + 108 | 0;
 i12 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  i10 = i10 + 4 | 0;
  i11 = i11 + 4 | 0;
 } while ((i10 | 0) < (i12 | 0));
 HEAP32[i5 + 64 >> 2] = 0;
 i3 = i1 + 180 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i1 + 184 >> 2] | 0) >>> 0) {
  i10 = i4;
  i11 = i5;
  i12 = i10 + 64 | 0;
  do {
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   i10 = i10 + 4 | 0;
   i11 = i11 + 4 | 0;
  } while ((i10 | 0) < (i12 | 0));
  HEAP32[i4 + 64 >> 2] = 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 68;
 } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i1 + 176 | 0, i5);
 i1 = HEAP32[i7 >> 2] | 0;
 d2 = +(HEAP32[i1 + 228 >> 2] | 0) / 100.0;
 if (!(d2 <= 1.0)) d2 = +Math_pow(3.0, +d2) + -2.0; else d2 = d2 * d2;
 i4 = i1 + 108 | 0;
 d2 = d2 * +HEAPF32[i9 + 1228 >> 2];
 i10 = i6;
 i11 = i4;
 i12 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  i10 = i10 + 4 | 0;
  i11 = i11 + 4 | 0;
 } while ((i10 | 0) < (i12 | 0));
 i10 = i5;
 i12 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = 0;
  i10 = i10 + 4 | 0;
 } while ((i10 | 0) < (i12 | 0));
 i3 = 0;
 do {
  d19 = +HEAPF32[i6 + (i3 << 2) >> 2];
  i10 = i3 + 4 | 0;
  d20 = +HEAPF32[i6 + (i10 << 2) >> 2];
  d15 = d20 * 0.0;
  i11 = i3 + 8 | 0;
  d18 = +HEAPF32[i6 + (i11 << 2) >> 2];
  d14 = d18 * 0.0;
  i12 = i3 + 12 | 0;
  d16 = +HEAPF32[i6 + (i12 << 2) >> 2];
  d17 = d16 * 0.0;
  HEAPF32[i5 + (i3 << 2) >> 2] = d2 * d19 + 0.0 + d15 + d14 + d17;
  d19 = d19 * 0.0 + 0.0;
  HEAPF32[i5 + (i10 << 2) >> 2] = d19 + d2 * d20 + d14 + d17;
  d15 = d19 + d15;
  HEAPF32[i5 + (i11 << 2) >> 2] = d15 + d2 * d18 + d17;
  HEAPF32[i5 + (i12 << 2) >> 2] = d16 + (d15 + d14);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 4);
 if ((i5 | 0) != (i4 | 0)) {
  i10 = i4;
  i11 = i5;
  i12 = i10 + 64 | 0;
  do {
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   i10 = i10 + 4 | 0;
   i11 = i11 + 4 | 0;
  } while ((i10 | 0) < (i12 | 0));
  i1 = HEAP32[i7 >> 2] | 0;
 }
 __ZN12BaseGLWidget11modelMinMaxERK4Vec3S2_(i1, i9 + 1204 | 0, i9 + 1216 | 0);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] & 63](i9, i8);
 i3 = HEAP32[i7 >> 2] | 0;
 i1 = i3 + 108 | 0;
 i4 = i3 + 180 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == (HEAP32[i3 + 176 >> 2] | 0)) {
  i13 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i13 >> 2] = 7152;
  HEAP32[i13 + 4 >> 2] = 21369;
  ___cxa_throw(i13 | 0, 2608, 44);
 }
 i6 = i5 + -68 | 0;
 if ((i6 | 0) == (i1 | 0)) {
  i11 = i5 + -4 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  i12 = i3 + 172 | 0;
  HEAP32[i12 >> 2] = i11;
  HEAP32[i4 >> 2] = i6;
  STACKTOP = i13;
  return;
 }
 i10 = i1;
 i11 = i6;
 i12 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  i10 = i10 + 4 | 0;
  i11 = i11 + 4 | 0;
 } while ((i10 | 0) < (i12 | 0));
 i11 = i5 + -4 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 i12 = i3 + 172 | 0;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i4 >> 2] = i6;
 STACKTOP = i13;
 return;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i3 = HEAP32[i13 >> 2] | 0;
   i8 = i2;
  } else i8 = i2;
 } else i8 = i10;
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = i2 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i3 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  i7 = i1 & 255;
  do if (i1 << 24 >> 24 > -1) {
   if (i7 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i7;
   HEAP32[i11 >> 2] = i2 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i8 - i2 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i2 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i7 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i8 - i2 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i2 + 1 >> 0] | 0;
    i1 = HEAP8[i2 + 2 >> 0] | 0;
    switch (i7 | 0) {
    case 224:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i4 & 255) << 6 & 4032 | i7 << 12 & 61440 | i1 & 63;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i2 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = HEAP8[i2 + 1 >> 0] | 0;
   i1 = HEAP8[i2 + 2 >> 0] | 0;
   i4 = HEAP8[i2 + 3 >> 0] | 0;
   switch (i7 | 0) {
   case 240:
    {
     if ((i6 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i6 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i5 = i1 & 255;
   if ((i5 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i4 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = (i6 & 255) << 12 & 258048 | i7 << 18 & 1835008 | i5 << 6 & 4032 | i1 & 63;
   if (i1 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i1;
   HEAP32[i11 >> 2] = i2 + 4;
  } while (0);
  i3 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i13 >> 2] = i3;
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2 >>> 0 < i10 >>> 0;
  if (!(i1 & i3 >>> 0 < i12 >>> 0)) {
   i14 = 38;
   break;
  }
 } else i14 = 38; while (0);
 if ((i14 | 0) == 38) i1 = i1 & 1;
 return i1 | 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i9 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i2 | 0, i9 | 0, 52) | 0;
 i3 = i3 & 2047;
 i7 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i7 = i7 & 2047;
 i13 = i9 & -2147483648;
 i6 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i8 = tempRet0;
 L1 : do if (!((i6 | 0) == 0 & (i8 | 0) == 0) ? (i5 = i11 & 2147483647, !(i5 >>> 0 > 2146435072 | (i5 | 0) == 2146435072 & i10 >>> 0 > 0 | (i3 | 0) == 2047)) : 0) {
  i4 = _bitshift64Shl(i2 | 0, i9 | 0, 1) | 0;
  i5 = tempRet0;
  if (!(i5 >>> 0 > i8 >>> 0 | (i5 | 0) == (i8 | 0) & i4 >>> 0 > i6 >>> 0)) return +((i4 | 0) == (i6 | 0) & (i5 | 0) == (i8 | 0) ? d12 * 0.0 : d12);
  if (!i3) {
   i3 = _bitshift64Shl(i2 | 0, i9 | 0, 12) | 0;
   i4 = tempRet0;
   if ((i4 | 0) > -1 | (i4 | 0) == -1 & i3 >>> 0 > 4294967295) {
    i5 = i3;
    i3 = 0;
    do {
     i3 = i3 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i4 | 0, 1) | 0;
     i4 = tempRet0;
    } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i3 = 0;
   i2 = _bitshift64Shl(i2 | 0, i9 | 0, 1 - i3 | 0) | 0;
   i4 = tempRet0;
  } else i4 = i9 & 1048575 | 1048576;
  if (!i7) {
   i5 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
   i6 = tempRet0;
   if ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295) {
    i7 = 0;
    do {
     i7 = i7 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i6 | 0, 1) | 0;
     i6 = tempRet0;
    } while ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i7 = 0;
   i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i7 | 0) | 0;
   i9 = tempRet0;
  } else i9 = i11 & 1048575 | 1048576;
  i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
  i6 = tempRet0;
  i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
  L23 : do if ((i3 | 0) > (i7 | 0)) {
   while (1) {
    if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) break; else {
     i2 = i8;
     i4 = i6;
    }
    i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
    i4 = tempRet0;
    i3 = i3 + -1 | 0;
    i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
    i6 = tempRet0;
    i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
    if ((i3 | 0) <= (i7 | 0)) break L23;
   }
   d1 = d12 * 0.0;
   break L1;
  } while (0);
  if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) {
   d1 = d12 * 0.0;
   break;
  } else {
   i4 = i6;
   i2 = i8;
  }
  if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0) do {
   i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
   i4 = tempRet0;
   i3 = i3 + -1 | 0;
  } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0);
  if ((i3 | 0) > 0) {
   i11 = _i64Add(i2 | 0, i4 | 0, 0, -1048576) | 0;
   i2 = tempRet0;
   i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
   i2 = i2 | tempRet0;
   i3 = i11 | i3;
  } else {
   i3 = _bitshift64Lshr(i2 | 0, i4 | 0, 1 - i3 | 0) | 0;
   i2 = tempRet0;
  }
  HEAP32[tempDoublePtr >> 2] = i3;
  HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
  d1 = +HEAPF64[tempDoublePtr >> 3];
 } else i14 = 3; while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 if (i3 & 2) if ((i2 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i6 = i8;
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP16[i1 >> 1] | 0;
   i5 = i3 & 65535;
   if (i5 >>> 0 > i7 >>> 0) {
    i1 = 2;
    break L4;
   }
   do if ((i3 & 65535) < 128) {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i2 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if ((i3 & 65535) < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 6 | 192;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) < 55296) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) >= 56320) {
     if ((i3 & 65535) < 57344) {
      i1 = 2;
      break L4;
     }
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i6 - i1 | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i1 = i1 + 2 | 0;
    i3 = HEAPU16[i1 >> 1] | 0;
    if ((i3 & 64512 | 0) != 56320) {
     i1 = 2;
     break L4;
    }
    if ((i2 - (HEAP32[i10 >> 2] | 0) | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i4 = i5 & 960;
    if (((i4 << 10) + 65536 | i5 << 10 & 64512 | i3 & 1023) >>> 0 > i7 >>> 0) {
     i1 = 2;
     break L4;
    }
    HEAP32[i9 >> 2] = i1;
    i1 = (i4 >>> 6) + 1 | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1 >>> 2 | 240;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 >>> 2 & 15 | i1 << 4 & 48 | 128;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 << 4 & 48 | i3 >>> 6 & 15 | 128;
    i5 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i3 & 63 | 128;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 2 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZN7SlvCubeC2ERKNSt3__16vectorI10ShapePlaceNS0_9allocatorIS2_EEEES7_PK7PicsSetPK5Shape(i16, i14, i13, i15, i2) {
 i16 = i16 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i20 + 8 | 0;
 i17 = i20;
 i12 = i16 + 4 | 0;
 i18 = i16 + 12 | 0;
 i19 = i16 + 16 | 0;
 i1 = i16 + 80 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 HEAP32[i16 + 20 >> 2] = 0;
 i3 = i16 + 28 | 0;
 i4 = i3 + 52 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i1 >> 2] = i2;
 i10 = i14 + 4 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = (i1 - i3 | 0) / 52 | 0;
 i9 = i16 + 8 | 0;
 if ((i1 | 0) == (i3 | 0)) {
  i2 = 0;
  i4 = 0;
 } else {
  if ((i1 | 0) == (i3 | 0)) i4 = 0; else i4 = __Znwj(i2 * 20 | 0) | 0;
  i1 = i4;
  i2 = i4 + (i2 * 20 | 0) | 0;
  HEAP32[i16 >> 2] = i1;
  HEAP32[i12 >> 2] = i1;
  HEAP32[i9 >> 2] = i2;
  i1 = HEAP32[i10 >> 2] | 0;
  i3 = HEAP32[i14 >> 2] | 0;
 }
 L7 : do if ((i1 | 0) != (i3 | 0)) {
  i5 = i11 + 4 | 0;
  i6 = i11 + 8 | 0;
  i7 = i11 + 12 | 0;
  i8 = i11 + 16 | 0;
  i1 = 0;
  while (1) {
   i23 = HEAP32[i13 >> 2] | 0;
   i22 = HEAP32[i23 + (i1 * 52 | 0) + 4 >> 2] | 0;
   i21 = HEAP32[i3 + (i1 * 52 | 0) >> 2] | 0;
   i3 = HEAP32[i3 + (i1 * 52 | 0) + 4 >> 2] | 0;
   HEAP32[i11 >> 2] = HEAP32[i23 + (i1 * 52 | 0) >> 2];
   HEAP32[i5 >> 2] = i22;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i7 >> 2] = i21;
   HEAP32[i8 >> 2] = i3;
   if (i4 >>> 0 < i2 >>> 0) {
    HEAP32[i4 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i4 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    HEAP32[i4 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 20;
   } else __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i16, i11);
   i1 = i1 + 1 | 0;
   i3 = HEAP32[i14 >> 2] | 0;
   if (i1 >>> 0 >= (((HEAP32[i10 >> 2] | 0) - i3 | 0) / 52 | 0) >>> 0) break L7;
   i4 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i9 >> 2] | 0;
  }
 } while (0);
 i6 = i15 + 16 | 0;
 i4 = i15 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i6 >> 2] | 0) == (i1 | 0)) {
  STACKTOP = i20;
  return;
 }
 i5 = i17 + 4 | 0;
 i3 = i16 + 20 | 0;
 i2 = 0;
 do {
  i23 = HEAP32[i1 + (i2 << 3) >> 2] | 0;
  i22 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
  i1 = HEAP32[i22 + (i23 * 1328 | 0) + 4 >> 2] | 0;
  HEAP32[i17 >> 2] = HEAP32[i22 + (i23 * 1328 | 0) >> 2];
  HEAP32[i5 >> 2] = i1;
  i1 = HEAP32[i19 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) {
   i21 = i17;
   i22 = HEAP32[i21 + 4 >> 2] | 0;
   i23 = i1;
   HEAP32[i23 >> 2] = HEAP32[i21 >> 2];
   HEAP32[i23 + 4 >> 2] = i22;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 8;
  } else __ZNSt3__16vectorIN7SlvCube6SlvPicENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i18, i17);
  i2 = i2 + 1 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
 } while (i2 >>> 0 < (HEAP32[i6 >> 2] | 0) - i1 >> 3 >>> 0);
 STACKTOP = i20;
 return;
}

function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = (i1 | 0) == (i5 | 0);
 HEAP8[i1 + 12 >> 0] = i8 & 1;
 if (i8) return;
 while (1) {
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  i4 = i6 + 12 | 0;
  if (HEAP8[i4 >> 0] | 0) {
   i1 = 37;
   break;
  }
  i8 = i6 + 8 | 0;
  i3 = i1;
  i1 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) == (i6 | 0)) {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i2) {
    i2 = i3;
    i7 = i8;
    i4 = i8;
    i3 = i1;
    i5 = i1;
    i1 = 7;
    break;
   }
   i2 = i2 + 12 | 0;
   if (HEAP8[i2 >> 0] | 0) {
    i2 = i3;
    i7 = i8;
    i4 = i8;
    i3 = i1;
    i5 = i1;
    i1 = 7;
    break;
   }
   HEAP8[i4 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i5 | 0) & 1;
   HEAP8[i2 >> 0] = 1;
  } else {
   if (!i2) {
    i2 = i3;
    i7 = i8;
    i5 = i8;
    i3 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   i2 = i2 + 12 | 0;
   if (HEAP8[i2 >> 0] | 0) {
    i2 = i3;
    i7 = i8;
    i5 = i8;
    i3 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   HEAP8[i4 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i5 | 0) & 1;
   HEAP8[i2 >> 0] = 1;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = 37;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) i1 = i6; else {
   i8 = i6 + 4 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i8 >> 2] = i2;
   if (!i2) i2 = i3; else {
    HEAP32[i2 + 8 >> 2] = i6;
    i2 = HEAP32[i7 >> 2] | 0;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = i2;
   i2 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = i1; else HEAP32[i2 + 4 >> 2] = i1;
   HEAP32[i1 >> 2] = i6;
   HEAP32[i7 >> 2] = i1;
   i5 = HEAP32[i3 >> 2] | 0;
  }
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i5 + 12 >> 0] = 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i4 = i3 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i5;
  i1 = i5 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 24) {
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) {
   i1 = HEAP32[i6 >> 2] | 0;
   i4 = i1 + 4 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i6 >> 2] = i2;
   if (!i2) i2 = i3; else {
    HEAP32[i2 + 8 >> 2] = i6;
    i2 = HEAP32[i7 >> 2] | 0;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = i2;
   i2 = HEAP32[i5 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = i1; else HEAP32[i2 + 4 >> 2] = i1;
   HEAP32[i4 >> 2] = i6;
   HEAP32[i7 >> 2] = i1;
   i4 = HEAP32[i3 >> 2] | 0;
  } else i1 = i6;
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i8 = i4 + 4 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 37) return;
}

function __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE15__insert_uniqueIS5_EENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEEOT_(i13, i11, i1) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i14;
 i12 = __Znwj(36) | 0;
 i3 = i12 + 16 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i2 = i11 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 do if (i1) {
  i6 = HEAP32[i3 >> 2] | 0;
  i7 = HEAP32[i12 + 20 >> 2] | 0;
  i8 = HEAP32[i12 + 24 >> 2] | 0;
  i4 = HEAP32[i12 + 28 >> 2] | 0;
  i5 = HEAP32[i12 + 32 >> 2] | 0;
  L4 : while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   do if ((i6 | 0) >= (i2 | 0)) {
    if ((i2 | 0) >= (i6 | 0)) {
     i2 = HEAP32[i1 + 20 >> 2] | 0;
     if ((i7 | 0) < (i2 | 0)) {
      i10 = 12;
      break;
     }
     if ((i2 | 0) >= (i7 | 0)) {
      i2 = HEAP32[i1 + 24 >> 2] | 0;
      if ((i8 | 0) < (i2 | 0)) {
       i10 = 12;
       break;
      }
      if ((i2 | 0) >= (i8 | 0)) {
       i2 = HEAP32[i1 + 28 >> 2] | 0;
       if ((i4 | 0) < (i2 | 0)) {
        i10 = 12;
        break;
       }
       if ((i2 | 0) >= (i4 | 0) ? (i5 | 0) < (HEAP32[i1 + 32 >> 2] | 0) : 0) {
        i10 = 12;
        break;
       }
      }
      i2 = HEAP32[i1 + 24 >> 2] | 0;
      if ((i2 | 0) >= (i8 | 0)) {
       if ((i8 | 0) < (i2 | 0)) {
        i10 = 22;
        break L4;
       }
       i2 = HEAP32[i1 + 28 >> 2] | 0;
       if ((i2 | 0) >= (i4 | 0)) {
        if ((i4 | 0) < (i2 | 0)) {
         i10 = 22;
         break L4;
        }
        if ((HEAP32[i1 + 32 >> 2] | 0) >= (i5 | 0)) {
         i10 = 22;
         break L4;
        }
       }
      }
     }
    }
    i3 = i1 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i10 = 21;
     break L4;
    } else i1 = i2;
   } else i10 = 12; while (0);
   if ((i10 | 0) == 12) {
    i10 = 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i3 = i1;
     i2 = i1;
     i10 = 13;
     break;
    } else i1 = i2;
   }
  }
  if ((i10 | 0) == 13) {
   HEAP32[i9 >> 2] = i2;
   break;
  } else if ((i10 | 0) == 21) {
   i2 = i1;
   HEAP32[i9 >> 2] = i2;
   break;
  } else if ((i10 | 0) == 22) {
   i2 = i1;
   HEAP32[i9 >> 2] = i2;
   i3 = i9;
   break;
  }
 } else {
  i10 = i2;
  HEAP32[i9 >> 2] = i10;
  i3 = i2;
  i2 = i10;
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = i2;
  HEAP32[i3 >> 2] = i12;
  i1 = HEAP32[HEAP32[i11 >> 2] >> 2] | 0;
  if (!i1) i1 = i12; else {
   HEAP32[i11 >> 2] = i1;
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i11 + 4 >> 2] | 0, i1);
  i2 = i11 + 8 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  i2 = 1;
  i1 = i12;
 } else i2 = 0;
 HEAP32[i13 >> 2] = i1;
 HEAP8[i13 + 4 >> 0] = i2;
 if (i2 << 24 >> 24) {
  STACKTOP = i14;
  return;
 }
 __ZdlPv(i12);
 STACKTOP = i14;
 return;
}

function __ZN4Mesh11makeSelfBosEv(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = i13 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = i13 + 8 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i13 + 128 >> 2] = (i1 - i2 | 0) / 12 | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 i2 = i13 + 120 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  _glGenBuffers(1, i2 | 0);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 i2 = i13 + 124 | 0;
 _glBindBuffer(HEAP32[i2 >> 2] | 0, i1 | 0);
 i4 = HEAP32[i4 >> 2] | 0;
 _glBufferData(HEAP32[i2 >> 2] | 0, (HEAP32[i3 >> 2] | 0) - i4 | 0, i4 | 0, 35044);
 if ((HEAP8[i13 + 96 >> 0] | 0) != 0 ? (i5 = i13 + 24 | 0, i3 = HEAP32[i5 >> 2] | 0, i6 = i13 + 20 | 0, i4 = HEAP32[i6 >> 2] | 0, HEAP32[i13 + 140 >> 2] = (i3 - i4 | 0) / 12 | 0, (i3 | 0) != (i4 | 0)) : 0) {
  i2 = i13 + 132 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _glGenBuffers(1, i2 | 0);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  i4 = i13 + 136 | 0;
  _glBindBuffer(HEAP32[i4 >> 2] | 0, i1 | 0);
  i6 = HEAP32[i6 >> 2] | 0;
  _glBufferData(HEAP32[i4 >> 2] | 0, (HEAP32[i5 >> 2] | 0) - i6 | 0, i6 | 0, 35044);
 }
 if ((HEAP8[i13 + 98 >> 0] | 0) != 0 ? (i7 = i13 + 48 | 0, i5 = HEAP32[i7 >> 2] | 0, i8 = i13 + 44 | 0, i6 = HEAP32[i8 >> 2] | 0, HEAP32[i13 + 164 >> 2] = i5 - i6 >> 2, (i5 | 0) != (i6 | 0)) : 0) {
  i2 = i13 + 156 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _glGenBuffers(1, i2 | 0);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  i6 = i13 + 160 | 0;
  _glBindBuffer(HEAP32[i6 >> 2] | 0, i1 | 0);
  i8 = HEAP32[i8 >> 2] | 0;
  _glBufferData(HEAP32[i6 >> 2] | 0, (HEAP32[i7 >> 2] | 0) - i8 | 0, i8 | 0, 35044);
 }
 if ((HEAP8[i13 + 97 >> 0] | 0) != 0 ? (i9 = i13 + 36 | 0, i7 = HEAP32[i9 >> 2] | 0, i10 = i13 + 32 | 0, i8 = HEAP32[i10 >> 2] | 0, HEAP32[i13 + 152 >> 2] = i7 - i8 >> 4, (i7 | 0) != (i8 | 0)) : 0) {
  i2 = i13 + 144 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _glGenBuffers(1, i2 | 0);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  i8 = i13 + 148 | 0;
  _glBindBuffer(HEAP32[i8 >> 2] | 0, i1 | 0);
  i10 = HEAP32[i10 >> 2] | 0;
  _glBufferData(HEAP32[i8 >> 2] | 0, (HEAP32[i9 >> 2] | 0) - i10 | 0, i10 | 0, 35044);
 }
 if ((HEAP8[i13 + 101 >> 0] | 0) != 0 ? (i11 = i13 + 60 | 0, i9 = HEAP32[i11 >> 2] | 0, i12 = i13 + 56 | 0, i10 = HEAP32[i12 >> 2] | 0, HEAP32[i13 + 176 >> 2] = i9 - i10 >> 2, (i9 | 0) != (i10 | 0)) : 0) {
  i2 = i13 + 168 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _glGenBuffers(1, i2 | 0);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  i10 = i13 + 172 | 0;
  _glBindBuffer(HEAP32[i10 >> 2] | 0, i1 | 0);
  i12 = HEAP32[i12 >> 2] | 0;
  _glBufferData(HEAP32[i10 >> 2] | 0, (HEAP32[i11 >> 2] | 0) - i12 | 0, i12 | 0, 35044);
 }
 if (!(HEAP8[i13 + 99 >> 0] | 0)) return;
 i3 = i13 + 72 | 0;
 i11 = HEAP32[i3 >> 2] | 0;
 i4 = i13 + 68 | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i13 + 188 >> 2] = i11 - i12 >> 1;
 if ((i11 | 0) == (i12 | 0)) return;
 i2 = i13 + 180 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  _glGenBuffers(1, i2 | 0);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 i12 = i13 + 184 | 0;
 _glBindBuffer(HEAP32[i12 >> 2] | 0, i1 | 0);
 i13 = HEAP32[i4 >> 2] | 0;
 _glBufferData(HEAP32[i12 >> 2] | 0, (HEAP32[i3 >> 2] | 0) - i13 | 0, i13 | 0, 35044);
 return;
}

function __ZN8tinyxml27StrPair6GetStrEv(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i10 + 4 | 0;
 i8 = i10;
 if (!(HEAP32[i9 >> 2] & 256)) {
  i9 = i9 + 4 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i6 = i9 + 8 | 0;
 HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = i5 ^ 256;
 HEAP32[i9 >> 2] = i1;
 if ((i5 | 0) != 256) {
  i1 = HEAP32[i9 + 4 >> 2] | 0;
  i2 = i1;
  L6 : while (1) {
   i5 = i2;
   while (1) {
    i2 = i5 + 1 | 0;
    if (i5 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break L6;
    i4 = HEAP32[i9 >> 2] | 0;
    if (i4 & 2) {
     if ((HEAP8[i5 >> 0] | 0) == 13) {
      i3 = i5;
      i5 = 8;
      break;
     }
     if ((HEAP8[i5 >> 0] | 0) == 10) {
      i3 = i5;
      i5 = 10;
      break;
     }
    }
    i3 = HEAP8[i5 >> 0] | 0;
    if (!((i4 & 1 | 0) != 0 & i3 << 24 >> 24 == 38)) {
     i5 = 20;
     break;
    }
    if ((HEAP8[i2 >> 0] | 0) != 35) {
     i4 = i5;
     i5 = 13;
     break;
    }
    i2 = i7;
    i3 = i2 + 10 | 0;
    do {
     HEAP8[i2 >> 0] = 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (i3 | 0));
    i2 = __ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi(i5, i7, i8) | 0;
    if ((HEAP32[i8 >> 2] | 0) > 0) {
     i5 = 15;
     break;
    } else i5 = i2;
   }
   if ((i5 | 0) == 8) {
    i2 = (HEAP8[i2 >> 0] | 0) == 10 ? i3 + 2 | 0 : i2;
    HEAP8[i1 >> 0] = 10;
    i1 = i1 + 1 | 0;
    continue;
   } else if ((i5 | 0) == 10) {
    i2 = (HEAP8[i2 >> 0] | 0) == 13 ? i3 + 2 | 0 : i2;
    HEAP8[i1 >> 0] = 10;
    i1 = i1 + 1 | 0;
    continue;
   } else if ((i5 | 0) == 13) {
    i5 = 0;
    if ((_strncmp(i2, 22891, 4) | 0) == 0 ? (HEAP8[i4 + 5 >> 0] | 0) == 59 : 0) {
     i2 = 8692;
     i3 = 0;
    } else i5 = 19;
    do if ((i5 | 0) == 19) {
     if ((_strncmp(i2, 22896, 3) | 0) == 0 ? (HEAP8[i4 + 4 >> 0] | 0) == 59 : 0) {
      i2 = 8704;
      i3 = 1;
      break;
     }
     if ((_strncmp(i2, 22900, 4) | 0) == 0 ? (HEAP8[i4 + 5 >> 0] | 0) == 59 : 0) {
      i2 = 8716;
      i3 = 2;
      break;
     }
     if ((_strncmp(i2, 22905, 2) | 0) == 0 ? (HEAP8[i4 + 3 >> 0] | 0) == 59 : 0) {
      i2 = 8728;
      i3 = 3;
      break;
     }
     if ((_strncmp(i2, 22908, 2) | 0) == 0 ? (HEAP8[i4 + 3 >> 0] | 0) == 59 : 0) {
      i2 = 8740;
      i3 = 4;
      break;
     }
     i1 = i1 + 1 | 0;
     continue L6;
    } while (0);
    HEAP8[i1 >> 0] = HEAP8[8688 + (i3 * 12 | 0) + 8 >> 0] | 0;
    i2 = i4 + ((HEAP32[i2 >> 2] | 0) + 2) | 0;
    i1 = i1 + 1 | 0;
    continue;
   } else if ((i5 | 0) == 15) {
    i3 = 0;
    i4 = i1;
    while (1) {
     i1 = i4 + 1 | 0;
     HEAP8[i4 >> 0] = HEAP8[i7 + i3 >> 0] | 0;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) < (HEAP32[i8 >> 2] | 0)) i4 = i1; else continue L6;
    }
   } else if ((i5 | 0) == 20) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
    continue;
   }
  }
  HEAP8[i1 >> 0] = 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 if (i1 & 4) {
  __ZN8tinyxml27StrPair18CollapseWhitespaceEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 HEAP32[i9 >> 2] = i1 & 512;
 i9 = i9 + 4 | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function __ZN8tinyxml212XMLAttribute9ParseDeepEPcb(i11, i5, i10) {
 i11 = i11 | 0;
 i5 = i5 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i12;
 if (!i5) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i2 = HEAP8[i5 >> 0] | 0;
 if (!(i2 << 24 >> 24)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i1 = i5;
 L6 : do {
  L8 : do if (i2 << 24 >> 24 > -1 ? (_isalnum(i2 & 255) | 0) == 0 : 0) {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 58:
   case 95:
    break L8;
   case 45:
    if (i1 >>> 0 > i5 >>> 0) break L8; else break L6;
   default:
    if (i1 >>> 0 > i5 >>> 0 & i2 << 24 >> 24 == 46) break L8; else break L6;
   }
  } while (0);
  i1 = i1 + 1 | 0;
  i2 = HEAP8[i1 >> 0] | 0;
 } while (i2 << 24 >> 24 != 0);
 if (i1 >>> 0 <= i5 >>> 0) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = i11 + 4 | 0;
 i2 = i11 + 8 | 0;
 if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i2 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
 HEAP32[i2 >> 2] = i5;
 HEAP32[i11 + 12 >> 2] = i1;
 HEAP32[i3 >> 2] = 256;
 if (!i1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = i2 & 255;
 L29 : do if (!(i3 & 128)) {
  while (1) {
   if (!(_isspace(i3) | 0)) break;
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = i2 & 255;
   if (i3 & 128) {
    i3 = i1;
    i1 = i2;
    break L29;
   }
  }
  if (!i1) {
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  } else {
   i3 = i1;
   i1 = HEAP8[i1 >> 0] | 0;
   break;
  }
 } else {
  i3 = i1;
  i1 = i2;
 } while (0);
 if (i1 << 24 >> 24 != 61) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = i3 + 1 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i2 & 255;
 L41 : do if (!(i3 & 128)) {
  while (1) {
   if (!(_isspace(i3) | 0)) break;
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = i2 & 255;
   if (i3 & 128) {
    i3 = i1;
    break L41;
   }
  }
  i3 = i1;
  i2 = HEAP8[i1 >> 0] | 0;
 } else i3 = i1; while (0);
 switch (i2 << 24 >> 24) {
 case 39:
 case 34:
  break;
 default:
  {
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 HEAP8[i7 >> 0] = i2;
 HEAP8[i7 + 1 >> 0] = 0;
 i5 = i3 + 1 | 0;
 i6 = _strlen(i7) | 0;
 i1 = HEAP8[i5 >> 0] | 0;
 if (!(i1 << 24 >> 24)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i4 = i5;
 while (1) {
  if (i1 << 24 >> 24 == i2 << 24 >> 24 ? (_strncmp(i4, i7, i6) | 0) == 0 : 0) break;
  i3 = i4 + 1 | 0;
  i1 = HEAP8[i3 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i1 = 0;
   i8 = 34;
   break;
  } else {
   i13 = i4;
   i4 = i3;
   i3 = i13;
  }
 }
 if ((i8 | 0) == 34) {
  STACKTOP = i12;
  return i1 | 0;
 }
 i2 = i11 + 16 | 0;
 i1 = i11 + 20 | 0;
 if ((HEAP32[i2 >> 2] & 512 | 0) != 0 ? (i9 = HEAP32[i1 >> 2] | 0, (i9 | 0) != 0) : 0) __ZdaPv(i9);
 HEAP32[i1 >> 2] = i5;
 HEAP32[i11 + 24 >> 2] = i4;
 HEAP32[i2 >> 2] = i10 ? 259 : 258;
 i13 = i3 + (i6 + 1) | 0;
 STACKTOP = i12;
 return i13 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i4, i8, i1, i13, i14, i2, i9, i12) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i16;
 L1 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
  i3 = i1;
  while (1) {
   if (!(HEAP8[i3 >> 0] | 0)) break L1;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i13 | 0)) {
    i3 = i13;
    break;
   }
  }
 } while (0);
 HEAP32[i12 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i7 = i9;
 i10 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) i15 = 29; else {
  L7 : while (1) {
   i6 = i8;
   i5 = HEAP32[i6 + 4 >> 2] | 0;
   i4 = i11;
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = i3;
   i5 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
   i6 = _mbsnrtowcs(i2, i14, i4 - i1 | 0, i7 - i2 >> 2, i8) | 0;
   if (i5) _uselocale(i5) | 0;
   switch (i6 | 0) {
   case 0:
    {
     i1 = 2;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i12 >> 2] | 0) + (i6 << 2) | 0;
   HEAP32[i12 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 19;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i3 | 0) == (i13 | 0)) i3 = i13; else {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i1 = _mbrtowc(i2, i1, 1, i8) | 0;
    if (i3) _uselocale(i3) | 0;
    if (i1) {
     i1 = 2;
     break L6;
    }
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
    i1 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
    HEAP32[i14 >> 2] = i1;
    L20 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
     i3 = i1;
     while (1) {
      if (!(HEAP8[i3 >> 0] | 0)) break L20;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == (i13 | 0)) {
       i3 = i13;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i12 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 19) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i12 >> 2] = i2;
  L29 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) {
   L30 : while (1) {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i2 = _mbrtowc(i2, i1, i4 - i1 | 0, i11) | 0;
    if (i3) _uselocale(i3) | 0;
    switch (i2 | 0) {
    case -1:
     {
      i15 = 13;
      break L30;
     }
    case -2:
     {
      i15 = 14;
      break L30;
     }
    case 0:
     {
      i1 = i1 + 1 | 0;
      break;
     }
    default:
     i1 = i1 + i2 | 0;
    }
    i2 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
    HEAP32[i12 >> 2] = i2;
    if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) break L29;
   }
   if ((i15 | 0) == 13) {
    HEAP32[i14 >> 2] = i1;
    i1 = 2;
    break L6;
   } else if ((i15 | 0) == 14) {
    HEAP32[i14 >> 2] = i1;
    i1 = 1;
    break L6;
   }
  } while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = (i1 | 0) != (i13 | 0) & 1;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i13 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZN9LineAdder7addPairEii(i14, i7, i11) {
 i14 = i14 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i15 + 8 | 0;
 i13 = i15;
 HEAP32[i13 >> 2] = i7;
 i1 = i13 + 4 | 0;
 HEAP32[i1 >> 2] = i11;
 if ((i7 | 0) > (i11 | 0)) {
  HEAP32[i13 >> 2] = i11;
  HEAP32[i1 >> 2] = i7;
  i5 = i7;
  i6 = i11;
 } else {
  i5 = i11;
  i6 = i7;
 }
 i4 = i14 + 24 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i1) {
  i2 = i4;
  L5 : do {
   while (1) {
    i3 = HEAP32[i1 + 16 >> 2] | 0;
    if ((i3 | 0) == (i6 | 0)) {
     if ((HEAP32[i1 + 20 >> 2] | 0) >= (i5 | 0)) {
      i2 = i1;
      break;
     }
    } else if ((i3 | 0) >= (i6 | 0)) {
     i2 = i1;
     break;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i1) break L5;
   }
   i1 = HEAP32[i2 >> 2] | 0;
  } while ((i1 | 0) != 0);
  if ((i2 | 0) != (i4 | 0)) {
   i1 = HEAP32[i2 + 16 >> 2] | 0;
   if ((i6 | 0) == (i1 | 0)) {
    if ((i5 | 0) < (HEAP32[i2 + 20 >> 2] | 0)) break;
    STACKTOP = i15;
    return;
   } else {
    if ((i6 | 0) < (i1 | 0)) break;
    STACKTOP = i15;
    return;
   }
  }
 } while (0);
 i1 = HEAP32[i14 >> 2] | 0;
 i10 = i1 + 68 | 0;
 i5 = i7 & 65535;
 i6 = i1 + 72 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i7 = i1 + 76 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i3 >>> 0 >= i1 >>> 0) {
  i8 = HEAP32[i10 >> 2] | 0;
  i9 = i8;
  i4 = i3 - i9 | 0;
  i2 = (i4 >> 1) + 1 | 0;
  if ((i4 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
  i16 = i8;
  i4 = i1 - i16 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
  i1 = i3 - i16 | 0;
  i2 = i1 >> 1;
  if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
  HEAP16[i3 + (i2 << 1) >> 1] = i5;
  _memcpy(i3 | 0, i8 | 0, i1 | 0) | 0;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i6 >> 2] = i3 + (i2 + 1 << 1);
  HEAP32[i7 >> 2] = i3 + (i4 << 1);
  if (i9) __ZdlPv(i9);
 } else {
  HEAP16[i3 >> 1] = i5;
  HEAP32[i6 >> 2] = i3 + 2;
 }
 i7 = HEAP32[i14 >> 2] | 0;
 i10 = i7 + 68 | 0;
 i5 = i11 & 65535;
 i6 = i7 + 72 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i7 = i7 + 76 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i3 >>> 0 >= i1 >>> 0) {
  i8 = HEAP32[i10 >> 2] | 0;
  i9 = i8;
  i16 = i3 - i9 | 0;
  i2 = (i16 >> 1) + 1 | 0;
  if ((i16 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
  i16 = i8;
  i4 = i1 - i16 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
  i1 = i3 - i16 | 0;
  i2 = i1 >> 1;
  if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
  HEAP16[i3 + (i2 << 1) >> 1] = i5;
  _memcpy(i3 | 0, i8 | 0, i1 | 0) | 0;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i6 >> 2] = i3 + (i2 + 1 << 1);
  HEAP32[i7 >> 2] = i3 + (i4 << 1);
  if (i9) __ZdlPv(i9);
 } else {
  HEAP16[i3 >> 1] = i5;
  HEAP32[i6 >> 2] = i3 + 2;
 }
 __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_(i12, i14 + 20 | 0, i13);
 STACKTOP = i15;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i19 = i16 + 424 | 0;
 i17 = i16 + 24 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 428 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 164;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 16136) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 400 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = 0; else HEAP32[HEAP32[i6 + 8 >> 2] >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -4 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP32[i1 >> 2] | 0) != (i3 | 0)) break L10;
   i1 = i1 + 4 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i10 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i8) {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i13 = 26;
   break;
  } else {
   HEAP32[i11 >> 2] = 0;
   i13 = 24;
   break;
  }
 } else i13 = 24; while (0);
 if ((i13 | 0) == 24 ? i2 : 0) i13 = 26;
 if ((i13 | 0) == 26) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 255](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function __ZN10BuildWorld5cleanENS_12ECleanMethodE(i18, i17) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i19;
 i14 = (i17 | 0) == 0;
 if (i14) {
  HEAP32[i18 + 32 >> 2] = 0;
  HEAP8[i18 + 36 >> 0] = 1;
  HEAP32[i1 >> 2] = 0;
  HEAP16[i1 + 4 >> 1] = 0;
  i2 = Math_imul(HEAP32[i18 + 20 >> 2] | 0, HEAP32[i18 + 24 >> 2] | 0) | 0;
  if ((i2 | 0) > 0) {
   i3 = i18 + 28 | 0;
   i4 = 0;
   do {
    i13 = HEAP32[i3 >> 2] | 0;
    HEAP32[i13 + (i4 * 12 | 0) >> 2] = 1;
    i13 = i13 + (i4 * 12 | 0) + 4 | 0;
    HEAP32[i13 >> 2] = HEAP32[i1 >> 2];
    HEAP16[i13 + 4 >> 1] = HEAP16[i1 + 4 >> 1] | 0;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i2 | 0));
  }
  HEAP32[i18 + 44 >> 2] = 50;
  HEAP32[i18 + 40 >> 2] = 0;
  HEAP32[i18 + 52 >> 2] = 50;
  HEAP32[i18 + 48 >> 2] = 0;
  HEAP32[i18 + 60 >> 2] = 50;
  HEAP32[i18 + 56 >> 2] = 0;
  HEAP32[i18 + 68 >> 2] = 50;
  HEAP32[i18 + 64 >> 2] = 0;
  HEAP32[i18 + 76 >> 2] = 50;
  HEAP32[i18 + 72 >> 2] = 0;
  HEAP32[i18 + 84 >> 2] = 50;
  HEAP32[i18 + 80 >> 2] = 0;
  HEAP32[i18 + 92 >> 2] = 50;
  HEAP32[i18 + 88 >> 2] = 0;
  HEAP32[i18 + 100 >> 2] = 50;
  HEAP32[i18 + 96 >> 2] = 0;
  HEAP32[i18 + 108 >> 2] = 50;
  HEAP32[i18 + 104 >> 2] = 0;
  i13 = 0;
 } else i13 = 0;
 do {
  i1 = HEAP32[i18 + 40 + (i13 * 24 | 0) >> 2] | 0;
  i6 = HEAP32[i18 + 40 + (i13 * 24 | 0) + 4 >> 2] | 0;
  i7 = HEAP32[i18 + 40 + (i13 * 24 | 0) + 8 >> 2] | 0;
  i8 = HEAP32[i18 + 40 + (i13 * 24 | 0) + 12 >> 2] | 0;
  i9 = HEAP32[i18 + 40 + (i13 * 24 | 0) + 16 >> 2] | 0;
  i10 = HEAP32[i18 + 40 + (i13 * 24 | 0) + 20 >> 2] | 0;
  if ((i1 | 0) < (i6 | 0)) {
   i11 = (i7 | 0) < (i8 | 0);
   i12 = (i9 | 0) < (i10 | 0);
   do {
    if (i11) {
     i2 = i1 >>> 0 < 50;
     i4 = i7;
     do {
      if (i12) {
       i3 = i4 >>> 0 < 50;
       i5 = i9;
       do {
        L22 : do if (i2 & (i3 & i5 >>> 0 < 50) ? (i15 = i18 + 136 + (i13 * 5e5 | 0) + (i1 * 1e4 | 0) + (i4 * 200 | 0) + (i5 << 2) | 0, i16 = HEAP32[i15 >> 2] | 0, (i16 | 0) != 0) : 0) {
         if (i14) {
          HEAP32[i15 >> 2] = 0;
          break;
         }
         switch (i17 | 0) {
         case 1:
          {
           if ((i16 & 65280 | 0) != 256) break L22;
           HEAP32[i15 >> 2] = i16 & 16711680;
           break L22;
          }
         case 2:
          break;
         default:
          break L22;
         }
         if ((i16 & 65280 | 0) == 256) {
          HEAP32[i15 >> 2] = 0;
          break;
         } else {
          HEAP32[i15 >> 2] = i16 & 65535;
          break;
         }
        } while (0);
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) != (i10 | 0));
      }
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i8 | 0));
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i6 | 0));
  }
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != 3);
 STACKTOP = i19;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i4, i7, i1, i10, i14, i2, i9, i13) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i16;
 i8 = i16 + 8 | 0;
 L1 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
  i3 = i1;
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break L1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i10 | 0)) {
    i3 = i10;
    break;
   }
  }
 } while (0);
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i6 = i9;
 i11 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) i15 = 29; else {
  L7 : while (1) {
   i17 = i7;
   i5 = HEAP32[i17 + 4 >> 2] | 0;
   i4 = i12;
   HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i5 = _wcsnrtombs(i2, i14, i3 - i1 >> 2, i6 - i2 | 0, i7) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i5 | 0) {
   case 0:
    {
     i1 = 1;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i13 >> 2] | 0) + i5 | 0;
   HEAP32[i13 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 15;
    break;
   }
   if ((i3 | 0) == (i10 | 0)) {
    i1 = HEAP32[i14 >> 2] | 0;
    i3 = i10;
   } else {
    i1 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
    i2 = _wcrtomb(i8, 0, i7) | 0;
    if (i1) _uselocale(i1) | 0;
    if ((i2 | 0) == -1) {
     i1 = 2;
     break L6;
    }
    if (i2 >>> 0 > (i6 - (HEAP32[i13 >> 2] | 0) | 0) >>> 0) {
     i1 = 1;
     break L6;
    }
    if (i2) {
     i1 = i8;
     while (1) {
      i5 = HEAP8[i1 >> 0] | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i17 + 1;
      HEAP8[i17 >> 0] = i5;
      i2 = i2 + -1 | 0;
      if (!i2) break; else i1 = i1 + 1 | 0;
     }
    }
    i1 = (HEAP32[i14 >> 2] | 0) + 4 | 0;
    HEAP32[i14 >> 2] = i1;
    L26 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
     i3 = i1;
     while (1) {
      if (!(HEAP32[i3 >> 2] | 0)) break L26;
      i3 = i3 + 4 | 0;
      if ((i3 | 0) == (i10 | 0)) {
       i3 = i10;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i13 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 15) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i13 >> 2] = i2;
  L35 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) do {
   i17 = HEAP32[i1 >> 2] | 0;
   i3 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i2 = _wcrtomb(i2, i17, i12) | 0;
   if (i3) _uselocale(i3) | 0;
   if ((i2 | 0) == -1) break L35;
   i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i2;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (HEAP32[i14 >> 2] | 0)); while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = 2;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i10 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZN16ModelControlBase11scrDblClickEbii(i7, i1, i3, i4) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i9;
 i6 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i7 + 4 >> 2] | 0, i3, i4) | 0;
 i5 = i6 + -1 | 0;
 i8 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21413, 4) | 0, i5) | 0;
 HEAP32[i10 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i10, 16144) | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
 __ZNSt3__16localeD2Ev(i10);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i8, i2) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
 i8 = i7 + 8 | 0;
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + 104 >> 2] | 0;
 do if ((i6 | 0) > (HEAP32[i2 + 24 >> 2] | 0)) {
  i2 = i7 + 580 | 0;
  HEAP8[i7 + 594 >> 0] = i1 & 1;
  i1 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i7 + 584 >> 2] | 0, i3, i4) | 0;
  if (!(HEAP8[i7 + 593 >> 0] | 0)) {
   if (__ZN16BuildControlBase13boxedDblClickEiii(i2, i1, -1, -1) | 0) break; else i1 = 0;
   STACKTOP = i9;
   return i1 | 0;
  } else {
   if (__ZN16BuildControlBase13tiledDblClickEi(i2, i1) | 0) break; else i1 = 0;
   STACKTOP = i9;
   return i1 | 0;
  }
 } else {
  i10 = HEAP32[i2 + 44 >> 2] | 0;
  i6 = HEAP32[i10 + (i5 * 188 | 0) >> 2] | 0;
  i1 = ((HEAP32[i2 + 68 >> 2] | 0) + (HEAP32[i10 + (i5 * 188 | 0) + 4 >> 2] | 0) | 0) / 4 | 0;
  i3 = ((HEAP32[i2 + 76 >> 2] | 0) + (HEAP32[i10 + (i5 * 188 | 0) + 8 >> 2] | 0) | 0) / 4 | 0;
  i2 = ((HEAP32[i2 + 60 >> 2] | 0) + (HEAP32[i10 + (i5 * 188 | 0) + 12 >> 2] | 0) | 0) / 4 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i4 = i3;
    i5 = i2;
    break;
   }
  case 1:
   {
    i4 = i1;
    i5 = i2;
    i1 = i3;
    break;
   }
  case 2:
   {
    i4 = i1;
    i5 = i3;
    i1 = i2;
    break;
   }
  default:
   {
    i4 = -1;
    i5 = -1;
    i1 = -1;
   }
  }
  i2 = i7 + 580 | 0;
  i1 = i5 << 9 & 65024 | i6 & 3 | i4 << 2 & 508 | i1 << 16 & 16711680;
  if (!(HEAP8[i7 + 593 >> 0] | 0)) {
   if (__ZN16BuildControlBase13boxedDblClickEiii(i2, i1, -1, -1) | 0) break; else i1 = 0;
   STACKTOP = i9;
   return i1 | 0;
  } else {
   if (__ZN16BuildControlBase13tiledDblClickEi(i2, i1) | 0) break; else i1 = 0;
   STACKTOP = i9;
   return i1 | 0;
  }
 } while (0);
 i1 = HEAP32[i8 >> 2] | 0;
 i10 = HEAP32[i1 + 88 >> 2] | 0;
 if ((i10 | 0) != 0 ? (HEAP8[i10 + 28 >> 0] | 0) != 0 : 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 255](i1);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
 i10 = HEAP32[i8 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 255](i10);
 i10 = 1;
 STACKTOP = i9;
 return i10 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i19 = i16 + 24 | 0;
 i17 = i16 + 32 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 28 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 164;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 16144) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 100 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 + 1 >> 0] = 0;
   HEAP8[i6 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] >> 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -1 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP8[i1 >> 0] | 0) != i3 << 24 >> 24) break L10;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i10 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i8) {
  if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1 : 0) {
   HEAP32[i11 >> 2] = 0;
   i13 = 21;
   break;
  }
  if (!i1) i13 = 22;
 } else i13 = 21; while (0);
 if ((i13 | 0) == 21 ? i1 : 0) i13 = 22;
 if ((i13 | 0) == 22) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 255](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function __ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi(i10, i9, i8) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 >> 2] = 0;
 i1 = i10 + 1 | 0;
 if ((HEAP8[i1 >> 0] | 0) != 35) {
  i10 = i1;
  return i10 | 0;
 }
 i2 = i10 + 2 | 0;
 L4 : do switch (HEAP8[i2 >> 0] | 0) {
 case 120:
  {
   i1 = i10 + 3 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) {
    i10 = 0;
    return i10 | 0;
   }
   i2 = _strchr(i1, 59) | 0;
   if (!i2) {
    i10 = 0;
    return i10 | 0;
   }
   if (!(HEAP8[i2 >> 0] | 0)) {
    i10 = 0;
    return i10 | 0;
   }
   i1 = i2 - i10 | 0;
   i3 = i2 + -1 | 0;
   i2 = HEAP8[i3 >> 0] | 0;
   if (i2 << 24 >> 24 == 120) {
    i2 = 0;
    i4 = 28;
   } else {
    i6 = i2;
    i4 = i2 << 24 >> 24;
    i7 = 1;
    i5 = i3;
    i2 = 0;
    L28 : while (1) {
     do if ((i6 + -48 & 255) < 10) i3 = i4 + -48 | 0; else {
      if ((i6 + -97 & 255) < 6) {
       i3 = i4 + -87 | 0;
       break;
      }
      if ((i6 + -65 & 255) >= 6) {
       i1 = 0;
       break L28;
      }
      i3 = i4 + -55 | 0;
     } while (0);
     i2 = (Math_imul(i3, i7) | 0) + i2 | 0;
     i5 = i5 + -1 | 0;
     i3 = HEAP8[i5 >> 0] | 0;
     if (i3 << 24 >> 24 == 120) {
      i4 = 21;
      break L4;
     } else {
      i6 = i3;
      i4 = i3 << 24 >> 24;
      i7 = i7 << 4;
     }
    }
    return i1 | 0;
   }
   break;
  }
 case 0:
  {
   i10 = i1;
   return i10 | 0;
  }
 default:
  {
   i2 = _strchr(i2, 59) | 0;
   if (!i2) {
    i10 = 0;
    return i10 | 0;
   }
   if (!(HEAP8[i2 >> 0] | 0)) {
    i10 = 0;
    return i10 | 0;
   }
   i1 = i2 - i10 | 0;
   i3 = i2 + -1 | 0;
   i2 = HEAP8[i3 >> 0] | 0;
   if (i2 << 24 >> 24 == 35) {
    i2 = 0;
    i4 = 28;
   } else {
    i7 = i2;
    i4 = i2 << 24 >> 24;
    i6 = 1;
    i5 = i3;
    i2 = 0;
    while (1) {
     if ((i7 + -48 & 255) >= 10) {
      i1 = 0;
      break;
     }
     i2 = (Math_imul(i4 + -48 | 0, i6) | 0) + i2 | 0;
     i5 = i5 + -1 | 0;
     i3 = HEAP8[i5 >> 0] | 0;
     if (i3 << 24 >> 24 == 35) {
      i4 = 21;
      break L4;
     } else {
      i7 = i3;
      i4 = i3 << 24 >> 24;
      i6 = i6 * 10 | 0;
     }
    }
    return i1 | 0;
   }
  }
 } while (0);
 L40 : do if ((i4 | 0) == 21) if (i2 >>> 0 < 128) i4 = 28; else {
  if (i2 >>> 0 < 2048) HEAP32[i8 >> 2] = 2; else {
   do if (i2 >>> 0 >= 65536) if (i2 >>> 0 < 2097152) {
    HEAP32[i8 >> 2] = 4;
    HEAP8[i9 + 3 >> 0] = i2 & 63 | 128;
    i2 = i2 >>> 6;
    break;
   } else {
    HEAP32[i8 >> 2] = 0;
    break L40;
   } else HEAP32[i8 >> 2] = 3; while (0);
   HEAP8[i9 + 2 >> 0] = i2 & 63 | 128;
   i2 = i2 >>> 6;
  }
  HEAP8[i9 + 1 >> 0] = i2 & 63 | 128;
  i2 = i2 >>> 6;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = 32;
 } while (0);
 if ((i4 | 0) == 28) {
  HEAP32[i8 >> 2] = 1;
  i3 = 1;
  i4 = 32;
 }
 if ((i4 | 0) == 32) HEAP8[i9 >> 0] = HEAP32[8748 + (i3 << 2) >> 2] | i2;
 i10 = i10 + (i1 + 1) | 0;
 return i10 | 0;
}

function __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEE8__appendEj(i7, i2) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i11;
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i3 = i1;
 if (((i5 - i3 | 0) / 52 | 0) >>> 0 >= i2 >>> 0) {
  do {
   HEAP32[i1 >> 2] = -1;
   i9 = i1 + 4 | 0;
   i10 = i1 + 24 | 0;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP32[i9 + 8 >> 2] = 0;
   HEAP32[i9 + 12 >> 2] = 0;
   HEAP32[i9 + 16 >> 2] = 0;
   HEAP32[i10 >> 2] = -1;
   HEAP32[i10 + 4 >> 2] = -1;
   HEAP32[i10 + 8 >> 2] = -1;
   HEAP32[i10 + 12 >> 2] = -1;
   HEAP32[i1 + 40 >> 2] = 0;
   HEAP32[i1 + 44 >> 2] = 0;
   HEAP32[i1 + 48 >> 2] = 0;
   i1 = (HEAP32[i6 >> 2] | 0) + 52 | 0;
   HEAP32[i6 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  STACKTOP = i11;
  return;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 i3 = ((i3 - i1 | 0) / 52 | 0) + i2 | 0;
 if (i3 >>> 0 > 82595524) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i7);
 i4 = i1;
 i1 = (i5 - i4 | 0) / 52 | 0;
 if (i1 >>> 0 < 41297762) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
 } else i1 = 82595524;
 i4 = ((HEAP32[i6 >> 2] | 0) - i4 | 0) / 52 | 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = i7 + 8;
 if (!i1) i5 = 0; else i5 = __Znwj(i1 * 52 | 0) | 0;
 HEAP32[i10 >> 2] = i5;
 i3 = i5 + (i4 * 52 | 0) | 0;
 i9 = i10 + 8 | 0;
 HEAP32[i9 >> 2] = i3;
 i6 = i10 + 4 | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i10 + 12 >> 2] = i5 + (i1 * 52 | 0);
 i1 = i2;
 while (1) {
  HEAP32[i3 >> 2] = -1;
  i12 = i3 + 4 | 0;
  i8 = i3 + 24 | 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  HEAP32[i12 + 12 >> 2] = 0;
  HEAP32[i12 + 16 >> 2] = 0;
  HEAP32[i8 >> 2] = -1;
  HEAP32[i8 + 4 >> 2] = -1;
  HEAP32[i8 + 8 >> 2] = -1;
  HEAP32[i8 + 12 >> 2] = -1;
  HEAP32[i3 + 40 >> 2] = 0;
  HEAP32[i3 + 44 >> 2] = 0;
  HEAP32[i3 + 48 >> 2] = 0;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i3 = i3 + 52 | 0;
 }
 HEAP32[i9 >> 2] = i5 + ((i4 + i2 | 0) * 52 | 0);
 __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE(i7, i10);
 i5 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 if ((i6 | 0) != (i5 | 0)) {
  i7 = ~(((i6 + -52 - i5 | 0) >>> 0) / 52 | 0);
  i8 = i6;
  do {
   i1 = HEAP32[i8 + -12 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i8 + -8 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
    __ZdlPv(i1);
   }
   i1 = HEAP32[i8 + -32 >> 2] | 0;
   i8 = i8 + -52 | 0;
   if (i1) __ZdaPv(i1);
  } while ((i8 | 0) != (i5 | 0));
  HEAP32[i9 >> 2] = i6 + (i7 * 52 | 0);
 }
 i1 = HEAP32[i10 >> 2] | 0;
 if (!i1) {
  STACKTOP = i11;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4704] | 0) == 0 ? (___cxa_guard_acquire(4704) | 0) != 0 : 0) {
  if ((HEAP8[4712] | 0) == 0 ? (___cxa_guard_acquire(4712) | 0) != 0 : 0) {
   i1 = 17940;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 18228);
   ___cxa_atexit(170, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4712);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17940, 18228) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17952, 18260) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17964, 18296) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17976, 18320) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17988, 18344) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18e3, 18360) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18012, 18380) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18024, 18400) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18036, 18428) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18048, 18468) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18060, 18500) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18072, 18536) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18084, 18572) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18096, 18588) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18108, 18604) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18120, 18620) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18132, 18344) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18144, 18636) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18156, 18652) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18168, 18668) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18180, 18684) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18192, 18700) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18204, 18716) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18216, 18732) | 0;
  HEAP32[4687] = 17940;
  ___cxa_guard_release(4704);
 }
 return HEAP32[4687] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4688] | 0) == 0 ? (___cxa_guard_acquire(4688) | 0) != 0 : 0) {
  if ((HEAP8[4696] | 0) == 0 ? (___cxa_guard_acquire(4696) | 0) != 0 : 0) {
   i1 = 17648;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 17936);
   ___cxa_atexit(169, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4696);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17648, 37e3) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17660, 37008) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17672, 37017) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17684, 37023) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17696, 37029) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17708, 37033) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17720, 37038) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17732, 37043) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17744, 37050) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17756, 37060) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17768, 37068) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17780, 37077) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17792, 37086) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17804, 37090) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17816, 37094) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17828, 37098) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17840, 37029) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17852, 37102) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17864, 37106) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17876, 37110) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17888, 37114) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17900, 37118) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17912, 37122) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17924, 37126) | 0;
  HEAP32[4484] = 17648;
  ___cxa_guard_release(4688);
 }
 return HEAP32[4484] | 0;
}

function __ZNSt3__18ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[2322] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(14052, i2, 14108);
 HEAP32[3343] = 14876;
 HEAP32[3345] = 14896;
 HEAP32[3344] = 0;
 i4 = HEAP32[3716] | 0;
 __ZNSt3__18ios_base4initEPv(13372 + i4 | 0, 14052);
 HEAP32[13372 + (i4 + 72) >> 2] = 0;
 HEAP32[13372 + (i4 + 76) >> 2] = -1;
 i4 = HEAP32[2323] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(14156, i4, 14116);
 HEAP32[3365] = 14956;
 HEAP32[3366] = 14976;
 i7 = HEAP32[3736] | 0;
 __ZNSt3__18ios_base4initEPv(13460 + i7 | 0, 14156);
 i5 = i7 + 72 | 0;
 HEAP32[13460 + i5 >> 2] = 0;
 i1 = i7 + 76 | 0;
 HEAP32[13460 + i1 >> 2] = -1;
 i3 = HEAP32[2321] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(14204, i3, 14124);
 HEAP32[3386] = 14956;
 HEAP32[3387] = 14976;
 __ZNSt3__18ios_base4initEPv(13544 + i7 | 0, 14204);
 HEAP32[13544 + i5 >> 2] = 0;
 HEAP32[13544 + i1 >> 2] = -1;
 i6 = HEAP32[13544 + ((HEAP32[(HEAP32[3386] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[3407] = 14956;
 HEAP32[3408] = 14976;
 __ZNSt3__18ios_base4initEPv(13628 + i7 | 0, i6);
 HEAP32[13628 + i5 >> 2] = 0;
 HEAP32[13628 + i1 >> 2] = -1;
 HEAP32[13372 + ((HEAP32[(HEAP32[3343] | 0) + -12 >> 2] | 0) + 72) >> 2] = 13460;
 i1 = 13544 + ((HEAP32[(HEAP32[3386] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[13544 + ((HEAP32[(HEAP32[3386] | 0) + -12 >> 2] | 0) + 72) >> 2] = 13460;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(14252, i2, 14132);
 HEAP32[3428] = 14916;
 HEAP32[3430] = 14936;
 HEAP32[3429] = 0;
 i2 = HEAP32[3726] | 0;
 __ZNSt3__18ios_base4initEPv(13712 + i2 | 0, 14252);
 HEAP32[13712 + (i2 + 72) >> 2] = 0;
 HEAP32[13712 + (i2 + 76) >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(14308, i4, 14140);
 HEAP32[3450] = 14996;
 HEAP32[3451] = 15016;
 i4 = HEAP32[3746] | 0;
 __ZNSt3__18ios_base4initEPv(13800 + i4 | 0, 14308);
 i2 = i4 + 72 | 0;
 HEAP32[13800 + i2 >> 2] = 0;
 i1 = i4 + 76 | 0;
 HEAP32[13800 + i1 >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(14356, i3, 14148);
 HEAP32[3471] = 14996;
 HEAP32[3472] = 15016;
 __ZNSt3__18ios_base4initEPv(13884 + i4 | 0, 14356);
 HEAP32[13884 + i2 >> 2] = 0;
 HEAP32[13884 + i1 >> 2] = -1;
 i3 = HEAP32[13884 + ((HEAP32[(HEAP32[3471] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[3492] = 14996;
 HEAP32[3493] = 15016;
 __ZNSt3__18ios_base4initEPv(13968 + i4 | 0, i3);
 HEAP32[13968 + i2 >> 2] = 0;
 HEAP32[13968 + i1 >> 2] = -1;
 HEAP32[13712 + ((HEAP32[(HEAP32[3428] | 0) + -12 >> 2] | 0) + 72) >> 2] = 13800;
 i1 = 13884 + ((HEAP32[(HEAP32[3471] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[13884 + ((HEAP32[(HEAP32[3471] | 0) + -12 >> 2] | 0) + 72) >> 2] = 13800;
 return;
}

function __ZN5Shape18makePieceCheckBitsEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = HEAP32[i4 + 24 >> 2] | 0;
 i1 = (i17 | 0) > 0;
 if (!i1) return;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i3 = 0;
 do {
  HEAP32[i2 + (i3 * 188 | 0) + 20 >> 2] = i3;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (i17 | 0));
 if (!i1) return;
 i16 = i4 + 52 | 0;
 i14 = HEAP32[i4 + 44 >> 2] | 0;
 i15 = 0;
 do {
  i13 = i14 + (i15 * 188 | 0) + 20 | 0;
  i1 = HEAP32[i14 + (i15 * 188 | 0) + 60 >> 2] | 0;
  if ((i1 | 0) == -1) i4 = 0; else i4 = (HEAP32[i14 + (i1 * 188 | 0) + 20 >> 2] | 0) < (HEAP32[i13 >> 2] | 0);
  i1 = HEAP32[i14 + (i15 * 188 | 0) + 64 >> 2] | 0;
  if ((i1 | 0) == -1) i3 = 0; else i3 = (HEAP32[i14 + (i1 * 188 | 0) + 20 >> 2] | 0) < (HEAP32[i13 >> 2] | 0);
  i1 = HEAP32[i14 + (i15 * 188 | 0) + 68 >> 2] | 0;
  if ((i1 | 0) == -1) i2 = 0; else i2 = (HEAP32[i14 + (i1 * 188 | 0) + 20 >> 2] | 0) < (HEAP32[i13 >> 2] | 0);
  i1 = HEAP32[i14 + (i15 * 188 | 0) + 72 >> 2] | 0;
  if ((i1 | 0) == -1) i1 = 0; else i1 = (HEAP32[i14 + (i1 * 188 | 0) + 20 >> 2] | 0) < (HEAP32[i13 >> 2] | 0);
  i12 = 1;
  i1 = (i1 ? -8192 : 0) | ((i2 ? 3584 : 0) | ((i3 ? 224 : 0) | (i4 ? 14 : 0)));
  i11 = 0;
  while (1) {
   i9 = HEAP32[i14 + (i15 * 188 | 0) + 28 + (i11 << 2) >> 2] | 0;
   if ((i9 | 0) == -1) i4 = i12; else {
    i10 = HEAP32[i16 >> 2] | 0;
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 16 >> 2] | 0;
    if ((i2 | 0) == -1) i8 = 0; else i8 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 20 >> 2] | 0;
    if ((i2 | 0) == -1) i7 = 0; else i7 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 24 >> 2] | 0;
    if ((i2 | 0) == -1) i6 = 0; else i6 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 28 >> 2] | 0;
    if ((i2 | 0) == -1) i5 = 0; else i5 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 32 >> 2] | 0;
    if ((i2 | 0) == -1) i3 = 0; else i3 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i2 = HEAP32[i10 + (i9 * 40 | 0) + 36 >> 2] | 0;
    if ((i2 | 0) == -1) i2 = 0; else i2 = (HEAP32[i14 + (i2 * 188 | 0) + 20 >> 2] | 0) <= (HEAP32[i13 >> 2] | 0);
    i4 = (i12 & 65535) << 4 & 65535;
    i1 = (((i2 & 1) + ((i3 & 1) + ((i5 & 1) + ((i6 & 1) + ((i7 & 1) + (i8 & 1))))) | 0) == (HEAP32[i10 + (i9 * 40 | 0) + 12 >> 2] | 0) ? i12 : 0) | i1;
   }
   i11 = i11 + 1 | 0;
   if ((i11 | 0) == 4) break; else i12 = i4;
  }
  HEAP16[i14 + (i15 * 188 | 0) + 24 >> 1] = i1;
  i15 = i15 + 1 | 0;
 } while ((i15 | 0) < (i17 | 0));
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if (i4 << 24 >> 24 == i2 << 24 >> 24) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if (i4 << 24 >> 24 == i3 << 24 >> 24 ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 32 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 31) i1 = -1; else {
   i3 = HEAP8[35415 + i2 >> 0] | 0;
   switch (i2 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
     i14 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i14 + 1;
     HEAP8[i14 >> 0] = i3;
     if ((i2 | 0) > 21) {
      i1 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i1 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function __ZN9PicBucket13loadUnifiedJsEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 __ZN9PicBucket14distinctMeshesEv(i5);
 i9 = __Znwj(48) | 0;
 i8 = i9 + 28 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i8 >> 2] = 34962;
 i1 = i9 + 32 | 0;
 HEAP32[i1 >> 2] = 0;
 i2 = i9 + 36 | 0;
 HEAP32[i2 >> 2] = 0;
 i3 = i9 + 40 | 0;
 HEAP32[i3 >> 2] = 34962;
 i4 = i9 + 44 | 0;
 HEAP32[i4 >> 2] = 0;
 i10 = i9;
 i11 = __Znwj(16) | 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 >> 2] = 7468;
 HEAP32[i11 + 12 >> 2] = i10;
 i9 = i9 + 24 | 0;
 _glGenBuffers(1, i9 | 0);
 _glBindBuffer(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 _emscripten_asm_const_0(6);
 HEAP32[i1 >> 2] = _emscripten_asm_const_0(7) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  _glGenBuffers(1, i2 | 0);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 _glBindBuffer(HEAP32[i3 >> 2] | 0, i1 | 0);
 _emscripten_asm_const_0(8);
 HEAP32[i4 >> 2] = _emscripten_asm_const_0(9) | 0;
 i1 = HEAP32[i5 + 64 >> 2] | 0;
 i8 = HEAP32[i5 + 68 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv(i11);
  return 1;
 }
 i9 = i11;
 do {
  i4 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP32[i1 + 4 >> 2] | 0;
  i7 = (i6 | 0) == 0;
  if (!i7) __ZNSt3__119__shared_weak_count12__add_sharedEv(i6);
  i5 = i4;
  i3 = i5 + 180 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) {
   _glGenBuffers(1, i3 | 0);
   i2 = HEAP32[i3 >> 2] | 0;
  }
  _glBindBuffer(HEAP32[i5 + 184 >> 2] | 0, i2 | 0);
  i2 = 0;
  i3 = 15;
  while (1) {
   i2 = (HEAP32[i5 + 192 + (((HEAP32[7192 + (i3 << 2) >> 2] | 0) * 5 | 0) + (HEAP32[7256 + (i3 << 2) >> 2] | 0) << 2) >> 2] | 0) != 0 | i2 << 1 & 131070;
   if ((i3 | 0) > 0) i3 = i3 + -1 | 0; else break;
  }
  _emscripten_asm_const_1(10, i2 & 65535 | 0) | 0;
  i2 = 0;
  i3 = 15;
  while (1) {
   i2 = (HEAP32[i5 + 192 + (((HEAP32[7192 + (i3 << 2) >> 2] | 0) * 5 | 0) + (HEAP32[7256 + (i3 << 2) >> 2] | 0) << 2) >> 2] | 0) != 0 | i2 << 1 & 131070;
   if ((i3 | 0) > 0) i3 = i3 + -1 | 0; else break;
  }
  HEAP32[i5 + 188 >> 2] = _emscripten_asm_const_1(11, i2 & 65535 | 0) | 0;
  HEAP32[i5 + 104 >> 2] = 2;
  HEAP8[i5 + 96 >> 0] = 1;
  HEAP8[i5 + 99 >> 0] = 1;
  __ZNSt3__119__shared_weak_count12__add_sharedEv(i11);
  HEAP32[i4 >> 2] = i10;
  i5 = i5 + 4 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i9;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
  if (!i7) __ZNSt3__119__shared_weak_count16__release_sharedEv(i6);
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i8 | 0));
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i11);
 return 1;
}

function __ZN8tinyxml211XMLDocumentD2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 >> 2] = 6752;
 i7 = i8 + 24 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (!i2) i1 = i8 + 28 | 0; else {
  i1 = i8 + 28 | 0;
  do {
   i6 = i2 + 36 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   HEAP32[i7 >> 2] = i3;
   i4 = i2 + 32 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
    i5 = HEAP32[i4 >> 2] | 0;
    HEAP32[i1 >> 2] = i5;
    i4 = i5;
   } else {
    i5 = HEAP32[i4 >> 2] | 0;
    i4 = i5;
   }
   if (i4) {
    HEAP32[i4 + 36 >> 2] = i3;
    i3 = HEAP32[i6 >> 2] | 0;
   }
   if (i3) HEAP32[i3 + 32 >> 2] = i5;
   HEAP32[i2 + 8 >> 2] = 0;
   i6 = HEAP32[i2 + 40 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 255](i2);
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 63](i6, i2);
   i2 = HEAP32[i7 >> 2] | 0;
  } while ((i2 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i1 = HEAP32[i8 + 64 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i8 + 284 >> 2] = 7412;
 i5 = i8 + 336 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i8 + 288 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if (!((i1 | 0) == (i8 + 292 | 0) | (i1 | 0) == 0)) __ZdaPv(i1);
 HEAP32[i8 + 212 >> 2] = 7384;
 i5 = i8 + 264 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i8 + 216 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if (!((i1 | 0) == (i8 + 220 | 0) | (i1 | 0) == 0)) __ZdaPv(i1);
 HEAP32[i8 + 140 >> 2] = 7356;
 i5 = i8 + 192 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i8 + 144 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if (!((i1 | 0) == (i8 + 148 | 0) | (i1 | 0) == 0)) __ZdaPv(i1);
 HEAP32[i8 + 68 >> 2] = 7328;
 i5 = i8 + 120 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i8 + 72 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i8 + 76 | 0) | (i1 | 0) == 0) {
  __ZN8tinyxml27XMLNodeD2Ev(i8);
  return;
 }
 __ZdaPv(i1);
 __ZN8tinyxml27XMLNodeD2Ev(i8);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i8, i9, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i5 = i2;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  } else {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  }
 } else i6 = 14; while (0);
 if ((i6 | 0) == 14) if (i3) i6 = 16; else {
  i5 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 6; else if ((i6 | 0) == 17) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, i1, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) i2 = 1; else i6 = 25;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   i6 = 25;
  }
  do if ((i6 | 0) == 25) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i7 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i7 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i2) break L22; else break; else {
    HEAP32[i8 >> 2] = 0;
    i6 = 37;
    break;
   }
  } else i6 = 37; while (0);
  if ((i6 | 0) == 37 ? !i2 : 0) break;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2;
 } while (0);
 return;
}

function _populatePicsSide(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i16 = i18 + 12 | 0;
 i15 = i18;
 i11 = i1 + 52 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 i17 = i1 + 56 | 0;
 i12 = HEAP32[i17 >> 2] | 0;
 if ((i2 | 0) == (i12 | 0)) {
  STACKTOP = i18;
  return;
 }
 i13 = i16 + 8 | 0;
 i14 = i16 + 1 | 0;
 i8 = i1 + 4 | 0;
 i9 = i15 + 8 | 0;
 i10 = i15 + 1 | 0;
 do {
  HEAP32[i16 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  i1 = HEAP8[i2 >> 0] | 0;
  if (!(i1 & 1)) {
   i3 = i2 + 1 | 0;
   i1 = (i1 & 255) >>> 1;
   i5 = i2 + 1 | 0;
  } else {
   i5 = HEAP32[i2 + 8 >> 2] | 0;
   i3 = i5;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
  }
  i4 = i3 + i1 | 0;
  if ((i5 | 0) != (i4 | 0)) {
   i1 = i5;
   i3 = 0;
   do {
    i7 = i3;
    i3 = HEAP8[i1 >> 0] | 0;
    if ((i7 + -65 & 255) < 26 | (i3 + -65 & 255) < 26) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i16, i3);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i4 | 0));
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i2 + 36 | 0, i16) | 0;
  if (!(HEAP8[i2 >> 0] & 1)) i1 = i2 + 1 | 0; else i1 = HEAP32[i2 + 8 >> 2] | 0;
  _emscripten_asm_const_2(1, i1 | 0, ((HEAP8[i16 >> 0] & 1) == 0 ? i14 : HEAP32[i13 >> 2] | 0) | 0) | 0;
  i4 = i2 + 16 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i5 = i2 + 12 | 0;
   i7 = 0;
   do {
    i6 = (HEAP32[i5 >> 2] | 0) + i7 | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    i3 = i1 + (i6 << 6) + 20 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i15, i3, (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj(i3, 45, 0) | 0) + 1 | 0, -1, i3);
    if (!(HEAP8[i3 >> 0] & 1)) i1 = i3 + 1 | 0; else i1 = HEAP32[i1 + (i6 << 6) + 28 >> 2] | 0;
    _emscripten_asm_const_3(2, ((HEAP8[i15 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0) | 0, i1 | 0, i6 | 0) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i16);
  i2 = i2 + 56 | 0;
 } while ((i2 | 0) != (i12 | 0));
 i1 = HEAP32[i11 >> 2] | 0;
 i3 = HEAP32[i17 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) {
  STACKTOP = i18;
  return;
 }
 do {
  if ((HEAP32[i1 + 20 >> 2] | 0) > 0) {
   i2 = i1 + 36 | 0;
   if (!(HEAP8[i2 >> 0] & 1)) i2 = i2 + 1 | 0; else i2 = HEAP32[i1 + 44 >> 2] | 0;
   _emscripten_asm_const_1(3, i2 | 0) | 0;
  }
  i1 = i1 + 56 | 0;
 } while ((i1 | 0) != (i3 | 0));
 STACKTOP = i18;
 return;
}

function __ZN5Shape9checkSideE5EAxisiiiRNSt3__14listINS_7SideDefENS1_9allocatorIS3_EEEES7_(i16, i12, i17, i18, i19, i14, i15) {
 i16 = i16 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i20;
 i6 = i12 + -1 | 0;
 i7 = i16 + 12 | 0;
 i8 = i16 + 16 | 0;
 i9 = i16 + 20 | 0;
 i11 = 0;
 i1 = 0;
 do {
  i4 = HEAP32[8496 + (i6 << 6) + (i11 << 4) >> 2] | 0;
  i5 = (HEAP32[8496 + (i6 << 6) + (i11 << 4) + 4 >> 2] | 0) + i17 | 0;
  i2 = (HEAP32[8496 + (i6 << 6) + (i11 << 4) + 8 >> 2] | 0) + i18 | 0;
  i3 = (HEAP32[8496 + (i6 << 6) + (i11 << 4) + 12 >> 2] | 0) + i19 | 0;
  if (((((i2 | i5 | i3 | 0) >= 0 ? (i5 | 0) < (HEAP32[i7 >> 2] | 0) : 0) ? (i2 | 0) < (HEAP32[i8 >> 2] | 0) : 0) ? (i3 | 0) < (HEAP32[i9 >> 2] | 0) : 0) ? (i10 = (Math_imul((i2 | 0) / 4 | 0, HEAP32[i16 + 88 + (i4 * 20 | 0) >> 2] | 0) | 0) + ((i5 | 0) / 4 | 0) | 0, i10 = i10 + (Math_imul((i3 | 0) / 4 | 0, HEAP32[i16 + 88 + (i4 * 20 | 0) + 12 >> 2] | 0) | 0) | 0, i10 = HEAP32[(HEAP32[i16 + 88 + (i4 * 20 | 0) + 16 >> 2] | 0) + (i10 << 2) >> 2] | 0, (i10 | 0) != -1) : 0) {
   HEAP32[i13 + (i1 << 2) >> 2] = i10;
   i1 = i1 + 1 | 0;
  }
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != 4);
 if ((i1 | 0) == 2) {
  i11 = HEAP32[i13 >> 2] | 0;
  i13 = HEAP32[i13 + 4 >> 2] | 0;
  i15 = __Znwj(32) | 0;
  HEAP32[i15 + 8 >> 2] = i12;
  HEAP32[i15 + 12 >> 2] = i17;
  HEAP32[i15 + 16 >> 2] = i18;
  HEAP32[i15 + 20 >> 2] = i19;
  i19 = i15 + 24 | 0;
  HEAP32[i19 >> 2] = i11;
  HEAP32[i19 + 4 >> 2] = i13;
  HEAP32[i15 >> 2] = i14;
  i19 = i14 + 4 | 0;
  i18 = HEAP32[i19 >> 2] | 0;
  HEAP32[i15 + 4 >> 2] = i18;
  HEAP32[i18 >> 2] = i15;
  HEAP32[i19 >> 2] = i15;
  i19 = i14 + 8 | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  i19 = i16 + 28 | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  i19 = 1;
  STACKTOP = i20;
  return i19 | 0;
 }
 if ((i1 | 0) <= 2) {
  i19 = 1;
  STACKTOP = i20;
  return i19 | 0;
 }
 i11 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i13 + 4 >> 2] | 0;
 i14 = __Znwj(32) | 0;
 HEAP32[i14 + 8 >> 2] = i12;
 HEAP32[i14 + 12 >> 2] = i17;
 HEAP32[i14 + 16 >> 2] = i18;
 HEAP32[i14 + 20 >> 2] = i19;
 i19 = i14 + 24 | 0;
 HEAP32[i19 >> 2] = i11;
 HEAP32[i19 + 4 >> 2] = i13;
 HEAP32[i14 >> 2] = i15;
 i19 = i15 + 4 | 0;
 i18 = HEAP32[i19 >> 2] | 0;
 HEAP32[i14 + 4 >> 2] = i18;
 HEAP32[i18 >> 2] = i14;
 HEAP32[i19 >> 2] = i14;
 i19 = i15 + 8 | 0;
 HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 i19 = i16 + 36 | 0;
 HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 i19 = 0;
 STACKTOP = i20;
 return i19 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i26, i21, i20, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i23 + 304 | 0;
 i7 = i23 + 48 | 0;
 i6 = i23 + 32 | 0;
 i3 = i23 + 24 | 0;
 i2 = i23 + 8 | 0;
 i5 = i23;
 i10 = i23 + 308 | 0;
 i8 = i23 + 72 | 0;
 i11 = i23 + 76 | 0;
 i17 = i23 + 68 | 0;
 i16 = i23 + 64 | 0;
 i13 = i23 + 60 | 0;
 i14 = i23 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 36816, HEAP32[i21 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i21 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i25 = i1;
   i15 = i2;
  }
 } else {
  i18 = HEAP32[i8 >> 2] | 0;
  i25 = 0;
  i15 = i1;
 }
 i2 = i18 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i18, i2, i21) | 0;
 if ((i18 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i18;
   i24 = i1;
   i22 = i1;
  }
 } else {
  i19 = i10;
  i24 = 0;
  i22 = i11;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i21) | 0;
 HEAP32[i13 >> 2] = i1;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i19, i3, i2, i22, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i19 = HEAP32[i17 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i22, i19, i1, i21, i20) | 0;
 HEAP32[i26 >> 2] = i1;
 if (i24) _free(i24);
 _free(i25);
 STACKTOP = i23;
 return i1 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i26, i24, i23, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i18 + 76 | 0;
 i7 = i18 + 48 | 0;
 i6 = i18 + 32 | 0;
 i3 = i18 + 24 | 0;
 i2 = i18 + 8 | 0;
 i5 = i18;
 i10 = i18 + 80 | 0;
 i8 = i18 + 72 | 0;
 i11 = i18 + 110 | 0;
 i17 = i18 + 68 | 0;
 i16 = i18 + 64 | 0;
 i13 = i18 + 60 | 0;
 i14 = i18 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 36816, HEAP32[i24 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i24 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i22 = i1;
   i15 = i2;
  }
 } else {
  i19 = HEAP32[i8 >> 2] | 0;
  i22 = 0;
  i15 = i1;
 }
 i2 = i19 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i19, i2, i24) | 0;
 if ((i19 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i20 = i19;
   i21 = i1;
   i25 = i1;
  }
 } else {
  i20 = i10;
  i21 = 0;
  i25 = i11;
 }
 i19 = __ZNKSt3__18ios_base6getlocEv(i24) | 0;
 HEAP32[i13 >> 2] = i19;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i20, i3, i2, i25, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i19) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i20 = HEAP32[i17 >> 2] | 0;
 i26 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i26 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i25, i20, i26, i24, i23) | 0;
 _free(i21);
 _free(i22);
 STACKTOP = i18;
 return i26 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if ((i4 | 0) == (i2 | 0)) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if ((i4 | 0) == (i3 | 0) ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 128 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  i1 = i2 >> 2;
  if ((i2 | 0) <= 124) {
   i3 = HEAP8[35415 + i1 >> 0] | 0;
   switch (i1 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     break;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
    }
   }
   i14 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i14 + 1;
   HEAP8[i14 >> 0] = i3;
   if ((i2 | 0) > 84) i1 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i1 = 0;
   }
  } else i1 = -1;
 } while (0);
 return i1 | 0;
}

function __ZN14BuildDimensionC2Ev(i1) {
 i1 = i1 | 0;
 __ZN14BuildDimension9BuildPageC2Ev(i1);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 1e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 2e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 3e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 4e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 5e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 6e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 7e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 8e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 9e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 1e5 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 11e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 12e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 13e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 14e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 15e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 16e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 17e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 18e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 19e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 2e5 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 21e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 22e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 23e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 24e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 25e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 26e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 27e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 28e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 29e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 3e5 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 31e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 32e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 33e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 34e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 35e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 36e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 37e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 38e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 39e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 4e5 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 41e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 42e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 43e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 44e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 45e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 46e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 47e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 48e4 | 0);
 __ZN14BuildDimension9BuildPageC2Ev(i1 + 49e4 | 0);
 return;
}

function __ZNSt3__16vectorIN4Mesh6IdxBufENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 20 | 0) + 1 | 0;
 if (i3 >>> 0 > 214748364) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 20 | 0;
 if (i2 >>> 0 < 107374182) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 20 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 214748364;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 20 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 20 | 0) | 0;
 }
 i3 = i5 + (i1 * 20 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 20 | 0) | 0;
 HEAP32[i5 + (i1 * 20 | 0) + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 i6 = i7 + 4 | 0;
 HEAP32[i5 + (i1 * 20 | 0) + 4 >> 2] = HEAP32[i6 >> 2];
 i4 = i7 + 8 | 0;
 HEAP32[i5 + (i1 * 20 | 0) + 8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i6 = i5 + (i1 * 20 | 0) + 12 | 0;
 i7 = i7 + 12 | 0;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP8[i6 + 4 >> 0] = HEAP8[i7 + 4 >> 0] | 0;
 i6 = i5 + ((i1 + 1 | 0) * 20 | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i7 = i3 + -20 | 0;
   i4 = i1;
   i1 = i1 + -20 | 0;
   HEAP32[i7 >> 2] = 0;
   i12 = i3 + -16 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i3 + -12 >> 2] = 0;
   HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
   i7 = i4 + -16 | 0;
   HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
   i12 = i4 + -12 | 0;
   HEAP32[i3 + -12 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   i7 = i3 + -8 | 0;
   i4 = i4 + -8 | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
   HEAP8[i7 + 4 >> 0] = HEAP8[i4 + 4 >> 0] | 0;
   i3 = i2 + -20 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = i1;
  i1 = i1 + -20 | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i4;
  if (i4) {
   i2 = i2 + -16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -2 - i5 | 0) >>> 1) << 1);
   __ZdlPv(i4);
  }
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZN4Cube18makePossibilities2EiR10ShapePlace(i4, i20, i3) {
 i4 = i4 | 0;
 i20 = i20 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i21;
 i12 = __ZN4Cube14getCurrentCircEi(i4, i20) | 0;
 i14 = i4 + 36 | 0;
 i18 = HEAP16[(HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0) + (i20 * 188 | 0) + 24 >> 1] | 0;
 i19 = i3 + 40 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i13 = i3 + 44 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) i1 = i2; else {
  i1 = i1 + (~((i1 + -8 - i2 | 0) >>> 3) << 3) | 0;
  HEAP32[i13 >> 2] = i1;
 }
 i9 = i4 + 32 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 i8 = (HEAP32[i8 + 28 >> 2] | 0) - (HEAP32[i8 + 24 >> 2] | 0) | 0;
 i10 = i8 >> 4;
 if ((i8 | 0) <= 0) {
  i19 = i2;
  i20 = i1;
  i20 = (i19 | 0) != (i20 | 0);
  STACKTOP = i21;
  return i20 | 0;
 }
 i7 = i4 + 72 | 0;
 i8 = i11 + 4 | 0;
 i6 = i3 + 48 | 0;
 i1 = i4 + 28 | 0;
 i4 = 0;
 do {
  i5 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i5 + (i4 << 3) >> 2] | 0) < (HEAP32[i5 + (i4 << 3) + 4 >> 2] | 0) ? (i15 = HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (i4 << 4) >> 2] | 0, i16 = HEAP32[(HEAP32[1556] | 0) + 76 >> 2] | 0, i17 = HEAP32[i16 + (i15 * 900 | 0) >> 2] | 0, (i17 | 0) > 0) : 0) {
   i2 = i16 + (i15 * 900 | 0) + 884 | 0;
   i5 = 0;
   do {
    i3 = HEAP16[i16 + (i15 * 900 | 0) + 868 + (i5 << 1) >> 1] | 0;
    do if ((i3 & i12) << 16 >> 16 == 0 ? ((i3 | i12) & i18) << 16 >> 16 == i18 << 16 >> 16 : 0) {
     if (((HEAP8[(HEAP32[i9 >> 2] | 0) + 40 >> 0] | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) ? (HEAPU8[i16 + (i15 * 900 | 0) + 4 + (i5 * 108 | 0) + 100 >> 0] | 0) == ((HEAP32[(HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0) + (i20 * 188 | 0) + 16 >> 2] | 0) == ((HEAP32[i1 >> 2] | 0) != 1 | 0) | 0) : 0) break;
     HEAP32[i11 >> 2] = i4;
     HEAP32[i8 >> 2] = i5;
     i3 = HEAP32[i13 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
      i23 = i11;
      i22 = HEAP32[i23 + 4 >> 2] | 0;
      HEAP32[i3 >> 2] = HEAP32[i23 >> 2];
      HEAP32[i3 + 4 >> 2] = i22;
      HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 8;
      break;
     } else {
      __ZNSt3__16vectorI7TypeRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i19, i11);
      break;
     }
    } while (0);
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i17 | 0));
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i10 | 0));
 i22 = HEAP32[i19 >> 2] | 0;
 i23 = HEAP32[i13 >> 2] | 0;
 i23 = (i22 | 0) != (i23 | 0);
 STACKTOP = i21;
 return i23 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i5, i6, i7, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   } else {
    HEAP32[i6 >> 2] = 0;
    i8 = 15;
    break;
   }
  } else i8 = 15; while (0);
  if ((i8 | 0) == 15) {
   i8 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 63](i4, 8192, i1) | 0)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i8 = 39;
   break;
  } else {
   HEAP32[i6 >> 2] = 0;
   i8 = 37;
   break;
  }
 } else i8 = 37; while (0);
 if ((i8 | 0) == 37 ? i2 : 0) i8 = 39;
 if ((i8 | 0) == 39) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function __ZNK5Shape10runBFSTreeIKZNKS_21makeTransformsMatricsEfRNSt3__16vectorI4Mat4NS1_9allocatorIS3_EEEEE3__1EEvR8MatStackRK5BNodefRT_(i20, i18, i19, d17, i16) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d17 = +d17;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i15 = i21;
 i1 = (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + (HEAP32[i19 >> 2] << 6) | 0;
 if ((i1 | 0) != (i18 | 0)) {
  i5 = i18;
  i6 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i1 | 0) < (i6 | 0));
 }
 i13 = i19 + 8 | 0;
 i1 = HEAP32[i19 + 12 >> 2] | 0;
 if ((i1 | 0) == (i13 | 0)) {
  STACKTOP = i21;
  return;
 }
 i14 = i15 + 64 | 0;
 i7 = i18 + 72 | 0;
 i8 = i18 + 76 | 0;
 i9 = i18 + 68 | 0;
 i10 = i18 + 64 | 0;
 i11 = i18 + 68 | 0;
 i3 = i1;
 i12 = HEAP32[i7 >> 2] | 0;
 i4 = i1;
 while (1) {
  i2 = i3 + 8 | 0;
  i1 = i15;
  i5 = i18;
  i6 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i1 | 0) < (i6 | 0));
  HEAP32[i14 >> 2] = 0;
  if (i12 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
   i1 = i12;
   i5 = i15;
   i6 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
    i1 = i1 + 4 | 0;
    i5 = i5 + 4 | 0;
   } while ((i1 | 0) < (i6 | 0));
   HEAP32[i12 + 64 >> 2] = 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 68;
  } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i15);
  __ZNK5Shape22transformFromFaceToNeiER8MatStackiif(i20, i18, HEAP32[i19 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0, d17);
  __ZNK5Shape10runBFSTreeIKZNKS_21makeTransformsMatricsEfRNSt3__16vectorI4Mat4NS1_9allocatorIS3_EEEEE3__1EEvR8MatStackRK5BNodefRT_(i20, i18, i2, d17, i16);
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i9 >> 2] | 0)) {
   i1 = 9;
   break;
  }
  i12 = i2 + -68 | 0;
  if ((i12 | 0) != (i18 | 0)) {
   i1 = i18;
   i5 = i12;
   i6 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
    i1 = i1 + 4 | 0;
    i5 = i5 + 4 | 0;
   } while ((i1 | 0) < (i6 | 0));
  }
  HEAP32[i10 >> 2] = HEAP32[i2 + -4 >> 2];
  HEAP32[i7 >> 2] = i12;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  i3 = i4;
  if ((i3 | 0) == (i13 | 0)) {
   i1 = 13;
   break;
  }
 }
 if ((i1 | 0) == 9) {
  i21 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i21 >> 2] = 7152;
  HEAP32[i21 + 4 >> 2] = 21369;
  ___cxa_throw(i21 | 0, 2608, 44);
 } else if ((i1 | 0) == 13) {
  STACKTOP = i21;
  return;
 }
}

function __ZNSt3__16vectorI7CompRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 4) + 1 | 0;
 if (i3 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 4 >>> 0 < 134217727) {
  i2 = i2 >> 3;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 4;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 268435455;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 4;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 << 4) | 0;
 }
 i3 = i5 + (i1 << 4) | 0;
 i2 = i3;
 i8 = i5 + (i4 << 4) | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i4 = i7 + 4 | 0;
 HEAP32[i5 + (i1 << 4) + 12 >> 2] = 0;
 HEAP32[i5 + (i1 << 4) + 4 >> 2] = HEAP32[i4 >> 2];
 i12 = i7 + 8 | 0;
 HEAP32[i5 + (i1 << 4) + 8 >> 2] = HEAP32[i12 >> 2];
 i7 = i7 + 12 | 0;
 HEAP32[i5 + (i1 << 4) + 12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = i6;
 i6 = i5 + (i1 + 1 << 4) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i13 = i1;
   i1 = i1 + -16 | 0;
   i12 = i3 + -16 | 0;
   HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
   i4 = i3 + -12 | 0;
   i7 = i13 + -12 | 0;
   HEAP32[i4 >> 2] = 0;
   i14 = i3 + -8 | 0;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
   i4 = i13 + -8 | 0;
   HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
   i13 = i13 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i13 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
   i3 = i2 + -16 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = HEAP32[i1 + -12 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + -8 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -8 - i3 | 0) >>> 3) << 3);
   __ZdlPv(i2);
  }
  i1 = i1 + -16 | 0;
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i10, i2, i11) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = i2;
 i7 = (i11 - i3 | 0) / 20 | 0;
 i9 = i10 + 8 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 i5 = i6;
 if (i7 >>> 0 <= ((i1 - i5 | 0) / 20 | 0) >>> 0) {
  i4 = i10 + 4 | 0;
  i1 = ((HEAP32[i4 >> 2] | 0) - i5 | 0) / 20 | 0;
  i10 = i7 >>> 0 > i1 >>> 0;
  i1 = i10 ? i2 + (i1 * 20 | 0) | 0 : i11;
  i9 = i1 - i3 | 0;
  _memmove(i6 | 0, i2 | 0, i9 | 0) | 0;
  i2 = i6 + (((i9 | 0) / 20 | 0) * 20 | 0) | 0;
  if (!i10) {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) return;
   HEAP32[i4 >> 2] = i1 + (~(((i1 + -20 - i2 | 0) >>> 0) / 20 | 0) * 20 | 0);
   return;
  }
  if ((i1 | 0) == (i11 | 0)) return;
  i2 = HEAP32[i4 >> 2] | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   i2 = (HEAP32[i4 >> 2] | 0) + 20 | 0;
   HEAP32[i4 >> 2] = i2;
   i1 = i1 + 20 | 0;
  } while ((i1 | 0) != (i11 | 0));
  return;
 }
 if (i6) {
  i1 = i10 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i3 | 0) != (i6 | 0)) HEAP32[i1 >> 2] = i3 + (~(((i3 + -20 - i5 | 0) >>> 0) / 20 | 0) * 20 | 0);
  __ZdlPv(i6);
  HEAP32[i9 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i1 = 0;
 }
 i4 = i7 >>> 0 > 214748364;
 if (i4) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
 i1 = (i1 - 0 | 0) / 20 | 0;
 if (i1 >>> 0 < 107374182) {
  i3 = i1 << 1;
  i1 = i3 >>> 0 >= i7 >>> 0;
  if (i1 | i4 ^ 1) i8 = i1 ? i3 : i7; else __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
 } else i8 = 214748364;
 i1 = __Znwj(i8 * 20 | 0) | 0;
 i3 = i10 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i9 >> 2] = i1 + (i8 * 20 | 0);
 if ((i2 | 0) == (i11 | 0)) return;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  i1 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
  HEAP32[i3 >> 2] = i1;
  i2 = i2 + 20 | 0;
 } while ((i2 | 0) != (i11 | 0));
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i24, i19, i18, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i10 = i21 + 296 | 0;
 i5 = i21 + 32 | 0;
 i3 = i21 + 24 | 0;
 i2 = i21 + 8 | 0;
 i4 = i21;
 i8 = i21 + 300 | 0;
 i6 = i21 + 64 | 0;
 i9 = i21 + 68 | 0;
 i15 = i21 + 60 | 0;
 i14 = i21 + 56 | 0;
 i11 = i21 + 52 | 0;
 i12 = i21 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 36815, HEAP32[i19 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i16 = i1;
   i23 = i1;
   i13 = i2;
  }
 } else {
  i16 = HEAP32[i6 >> 2] | 0;
  i23 = 0;
  i13 = i1;
 }
 i2 = i16 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i16, i2, i19) | 0;
 if ((i16 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i16;
   i22 = i1;
   i20 = i1;
  }
 } else {
  i17 = i8;
  i22 = 0;
  i20 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i17, i3, i2, i20, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i25 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i20, i25, i1, i19, i18) | 0;
 HEAP32[i24 >> 2] = i1;
 if (i22) _free(i22);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i24, i22, i21, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i25 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i10 = i16 + 68 | 0;
 i5 = i16 + 32 | 0;
 i3 = i16 + 24 | 0;
 i2 = i16 + 8 | 0;
 i4 = i16;
 i8 = i16 + 72 | 0;
 i6 = i16 + 64 | 0;
 i9 = i16 + 102 | 0;
 i15 = i16 + 60 | 0;
 i14 = i16 + 56 | 0;
 i11 = i16 + 52 | 0;
 i12 = i16 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 36815, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i20 = i1;
   i13 = i2;
  }
 } else {
  i17 = HEAP32[i6 >> 2] | 0;
  i20 = 0;
  i13 = i1;
 }
 i2 = i17 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i17, i2, i22) | 0;
 if ((i17 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i17;
   i19 = i1;
   i23 = i1;
  }
 } else {
  i18 = i8;
  i19 = 0;
  i23 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i22) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i18, i3, i2, i23, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i24 = HEAP32[i15 >> 2] | 0;
 i25 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i25 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i23, i24, i25, i22, i21) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i16;
 return i25 | 0;
}

function __ZN9LineAdder10addWithDirERK4Vec3S2_S2_S2_RK4Vec4(i6, i1, i2, i3, i5, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i21 = i7 + 60 | 0;
 i24 = i7 + 56 | 0;
 i23 = i7 + 52 | 0;
 i22 = i7 + 48 | 0;
 i14 = i7 + 36 | 0;
 i13 = i7 + 24 | 0;
 i11 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i8 = i7;
 i12 = i6 + 4 | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i1, i21) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i2, i24) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i3, i23) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i5, i22) | 0;
 i21 = HEAP32[i21 >> 2] | 0;
 i24 = HEAP32[i24 >> 2] | 0;
 __ZN9LineAdder7addPairEii(i6, i21, i24);
 i23 = HEAP32[i23 >> 2] | 0;
 __ZN9LineAdder7addPairEii(i6, i24, i23);
 i22 = HEAP32[i22 >> 2] | 0;
 __ZN9LineAdder7addPairEii(i6, i23, i22);
 __ZN9LineAdder7addPairEii(i6, i22, i21);
 i21 = (HEAP32[i6 >> 2] | 0) + 80 | 0;
 HEAP32[i21 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i21 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i21 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i21 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 d17 = +HEAPF32[i2 >> 2];
 d20 = +HEAPF32[i1 >> 2];
 d16 = +HEAPF32[i2 + 4 >> 2];
 d19 = +HEAPF32[i1 + 4 >> 2];
 d15 = +HEAPF32[i2 + 8 >> 2];
 d18 = +HEAPF32[i1 + 8 >> 2];
 HEAPF32[i14 >> 2] = d20 + (d17 - d20) * .20000000298023224;
 HEAPF32[i14 + 4 >> 2] = d19 + (d16 - d19) * .20000000298023224;
 HEAPF32[i14 + 8 >> 2] = d18 + (d15 - d18) * .20000000298023224;
 d19 = d19 + (+HEAPF32[i5 + 4 >> 2] - d19) * .20000000298023224;
 d18 = d18 + (+HEAPF32[i5 + 8 >> 2] - d18) * .20000000298023224;
 HEAPF32[i13 >> 2] = d20 + (+HEAPF32[i5 >> 2] - d20) * .20000000298023224;
 HEAPF32[i13 + 4 >> 2] = d19;
 HEAPF32[i13 + 8 >> 2] = d18;
 d16 = d16 + (+HEAPF32[i3 + 4 >> 2] - d16) * .20000000298023224;
 d15 = d15 + (+HEAPF32[i3 + 8 >> 2] - d15) * .20000000298023224;
 HEAPF32[i11 >> 2] = d17 + (+HEAPF32[i3 >> 2] - d17) * .20000000298023224;
 HEAPF32[i11 + 4 >> 2] = d16;
 HEAPF32[i11 + 8 >> 2] = d15;
 __ZN6VecRep3addERK4Vec3Pi(i12, i14, i9) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i13, i10) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i12, i11, i8) | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 __ZN9LineAdder7addPairEii(i6, HEAP32[i9 >> 2] | 0, i5);
 __ZN9LineAdder7addPairEii(i6, i5, HEAP32[i8 >> 2] | 0);
 STACKTOP = i7;
 return;
}

function __ZN19BoundedBlockSpace3D9FloodFillEiii(i15, i16, i17, i2) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if ((i17 | i16 | i2 | 0) < 0) {
  i17 = 0;
  return i17 | 0;
 }
 i11 = HEAP32[i15 >> 2] | 0;
 if ((i11 | 0) <= (i16 | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 if ((HEAP32[i15 + 4 >> 2] | 0) <= (i17 | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 i5 = HEAP32[i15 + 8 >> 2] | 0;
 if ((i5 | 0) <= (i2 | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 i7 = (Math_imul(i11, i17) | 0) + i16 | 0;
 i13 = i15 + 12 | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 i1 = i7 + (Math_imul(i12, i2) | 0) | 0;
 i14 = i15 + 16 | 0;
 i6 = HEAP32[i14 >> 2] | 0;
 i1 = i6 + (i1 * 12 | 0) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 L16 : do if ((i2 | 0) > 0) {
  i4 = i2;
  i1 = 1;
  while (1) {
   if (HEAP8[i6 + ((i7 + (Math_imul(i12, i4) | 0) | 0) * 12 | 0) + 9 >> 0] | 0) {
    i3 = i4;
    break L16;
   }
   i3 = i4 + -1 | 0;
   HEAP32[i6 + ((i7 + (Math_imul(i12, i3) | 0) | 0) * 12 | 0) >> 2] = 0;
   i1 = i1 + 1 | 0;
   if ((i4 | 0) > 1) i4 = i3; else break;
  }
 } else {
  i3 = i2;
  i1 = 1;
 } while (0);
 i4 = i5 + -1 | 0;
 L21 : do if ((i4 | 0) > (i2 | 0)) do {
  if (HEAP8[i6 + ((i7 + (Math_imul(i12, i2) | 0) | 0) * 12 | 0) + 8 >> 0] | 0) break L21;
  i2 = i2 + 1 | 0;
  HEAP32[i6 + ((i7 + (Math_imul(i12, i2) | 0) | 0) * 12 | 0) >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i2 | 0) < (i4 | 0)); while (0);
 if ((i3 | 0) > (i2 | 0)) {
  i17 = i1;
  return i17 | 0;
 }
 i7 = i16 + -1 | 0;
 i8 = i16 + 1 | 0;
 i9 = i17 + -1 | 0;
 i10 = i17 + 1 | 0;
 i5 = i11;
 i4 = i12;
 while (1) {
  i4 = (Math_imul(i5, i17) | 0) + i16 + (Math_imul(i4, i3) | 0) | 0;
  if (!(HEAP8[i6 + (i4 * 12 | 0) + 4 >> 0] | 0)) i1 = (__ZN19BoundedBlockSpace3D9FloodFillEiii(i15, i7, i17, i3) | 0) + i1 | 0;
  if (!(HEAP8[i6 + (i4 * 12 | 0) + 5 >> 0] | 0)) i1 = (__ZN19BoundedBlockSpace3D9FloodFillEiii(i15, i8, i17, i3) | 0) + i1 | 0;
  if (!(HEAP8[i6 + (i4 * 12 | 0) + 6 >> 0] | 0)) i1 = (__ZN19BoundedBlockSpace3D9FloodFillEiii(i15, i16, i9, i3) | 0) + i1 | 0;
  if (!(HEAP8[i6 + (i4 * 12 | 0) + 7 >> 0] | 0)) i1 = (__ZN19BoundedBlockSpace3D9FloodFillEiii(i15, i16, i10, i3) | 0) + i1 | 0;
  if ((i3 | 0) >= (i2 | 0)) break;
  i3 = i3 + 1 | 0;
  i5 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i13 >> 2] | 0;
  i6 = HEAP32[i14 >> 2] | 0;
 }
 return i1 | 0;
}

function __ZN13ShaderProgram19printProgramInfoLogEj(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8 + 24 | 0;
 i3 = i8 + 20 | 0;
 i2 = i8 + 16 | 0;
 i6 = i8 + 4 | 0;
 i7 = i8;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 _glGetProgramiv(i4 | 0, 35716, i3 | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) > 1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i6, i1, 0);
  i1 = i6 + 8 | 0;
  i9 = i6 + 1 | 0;
  _glGetProgramInfoLog(i4 | 0, HEAP32[i3 >> 2] | 0, i2 | 0, ((HEAP8[i6 >> 0] & 1) == 0 ? i9 : HEAP32[i1 >> 2] | 0) | 0);
  i10 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21108, 18) | 0;
  i3 = HEAP8[i6 >> 0] | 0;
  i2 = (i3 & 1) == 0;
  i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i10, i2 ? i9 : HEAP32[i1 >> 2] | 0, i2 ? (i3 & 255) >>> 1 : HEAP32[i6 + 4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
  i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
  __ZNSt3__16localeD2Ev(i5);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i2) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
 }
 _glGetProgramiv(i4 | 0, 35714, i7 | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) {
  i10 = i1;
  i10 = (i10 | 0) != 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  STACKTOP = i8;
  return i10 | 0;
 }
 i10 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21127, 22) | 0;
 HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i9 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
 i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, 10) | 0;
 __ZNSt3__16localeD2Ev(i5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i10, i9) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i10) | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i10 = (i10 | 0) != 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i8;
 return i10 | 0;
}

function __ZN13ShaderProgram18printShaderInfoLogEj(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8 + 24 | 0;
 i3 = i8 + 20 | 0;
 i2 = i8 + 16 | 0;
 i6 = i8 + 4 | 0;
 i7 = i8;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 _glGetShaderiv(i4 | 0, 35716, i3 | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) > 1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i6, i1, 0);
  i1 = i6 + 8 | 0;
  i9 = i6 + 1 | 0;
  _glGetShaderInfoLog(i4 | 0, HEAP32[i3 >> 2] | 0, i2 | 0, ((HEAP8[i6 >> 0] & 1) == 0 ? i9 : HEAP32[i1 >> 2] | 0) | 0);
  i10 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21068, 17) | 0;
  i3 = HEAP8[i6 >> 0] | 0;
  i2 = (i3 & 1) == 0;
  i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i10, i2 ? i9 : HEAP32[i1 >> 2] | 0, i2 ? (i3 & 255) >>> 1 : HEAP32[i6 + 4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
  i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
  __ZNSt3__16localeD2Ev(i5);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i2) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
 }
 _glGetShaderiv(i4 | 0, 35713, i7 | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) {
  i10 = i1;
  i10 = (i10 | 0) != 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  STACKTOP = i8;
  return i10 | 0;
 }
 i10 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21086, 21) | 0;
 HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i9 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
 i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, 10) | 0;
 __ZNSt3__16localeD2Ev(i5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i10, i9) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i10) | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i10 = (i10 | 0) != 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i8;
 return i10 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i7, i8, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i7 >> 2] = 0;
   i5 = 11;
   break;
  }
  if (i2) {
   i4 = i1;
   i5 = 13;
  } else i5 = 12;
 } else i5 = 11; while (0);
 if ((i5 | 0) == 11) if (i2) i5 = 12; else {
  i4 = 0;
  i5 = 13;
 }
 L16 : do if ((i5 | 0) == 12) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 6; else if ((i5 | 0) == 13) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3, i1 & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (!i1) i1 = 0; else i5 = 21;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   i5 = 21;
  }
  do if ((i5 | 0) == 21) if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  } while (0);
  i1 = (i1 | 0) == 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i7 >> 2] = 0;
    i5 = 30;
    break;
   }
   if (i1) break L16;
  } else i5 = 30; while (0);
  if ((i5 | 0) == 30 ? !i1 : 0) break;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 } while (0);
 return;
}

function __ZN8tinyxml211XMLDocument5ParseEPKcj(i10, i9, i8) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i10 + 24 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (!i2) i1 = i10 + 28 | 0; else {
  i1 = i10 + 28 | 0;
  do {
   i6 = i2 + 36 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   HEAP32[i7 >> 2] = i3;
   i4 = i2 + 32 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
    i5 = HEAP32[i4 >> 2] | 0;
    HEAP32[i1 >> 2] = i5;
    i4 = i5;
   } else {
    i5 = HEAP32[i4 >> 2] | 0;
    i4 = i5;
   }
   if (i4) {
    HEAP32[i4 + 36 >> 2] = i3;
    i3 = HEAP32[i6 >> 2] | 0;
   }
   if (i3) HEAP32[i3 + 32 >> 2] = i5;
   HEAP32[i2 + 8 >> 2] = 0;
   i6 = HEAP32[i2 + 40 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 255](i2);
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 63](i6, i2);
   i2 = HEAP32[i7 >> 2] | 0;
  } while ((i2 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i4 = i10 + 48 | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = i10 + 56 | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = i10 + 60 | 0;
 HEAP32[i6 >> 2] = 0;
 i7 = i10 + 64 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i7 >> 2] = 0;
 if ((i9 | 0) != 0 ? (HEAP8[i9 >> 0] | 0) != 0 : 0) {
  if ((i8 | 0) == -1) i1 = _strlen(i9) | 0; else i1 = i8;
  i2 = __Znaj(i1 + 1 | 0) | 0;
  HEAP32[i7 >> 2] = i2;
  _memcpy(i2 | 0, i9 | 0, i1 | 0) | 0;
  HEAP8[i2 + i1 >> 0] = 0;
  i2 = HEAPU8[i9 >> 0] | 0;
  L26 : do if (!(i2 & 128)) {
   i1 = i9;
   do {
    if (!(_isspace(i2) | 0)) break L26;
    i1 = i1 + 1 | 0;
    i2 = HEAPU8[i1 >> 0] | 0;
   } while ((i2 & 128 | 0) == 0);
  } else i1 = i9; while (0);
  i2 = i10 + 44 | 0;
  HEAP8[i2 >> 0] = 0;
  i3 = HEAP8[i1 >> 0] | 0;
  if (i3 << 24 >> 24 == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69 ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP8[i2 >> 0] = 1;
   i1 = HEAP8[i1 + 3 >> 0] | 0;
   i2 = 27;
  } else i2 = 29; else if (!i1) i2 = 28; else {
   i1 = i3;
   i2 = 27;
  }
  if ((i2 | 0) == 27) if (!(i1 << 24 >> 24)) i2 = 28; else i2 = 29;
  if ((i2 | 0) == 28) {
   HEAP32[i4 >> 2] = 15;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   i10 = 15;
   return i10 | 0;
  } else if ((i2 | 0) == 29) {
   FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 60 >> 2] & 63](i10, HEAP32[i7 >> 2] | 0, 0) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
   return i10 | 0;
  }
 }
 HEAP32[i4 >> 2] = 15;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i10 = 15;
 return i10 | 0;
}

function __ZN11BaseProgramC2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i9 + 24 | 0;
 i5 = i9 + 12 | 0;
 i7 = i9;
 i1 = i8 + 4 | 0;
 i2 = i8 + 52 | 0;
 i3 = i1;
 i4 = i3 + 44 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP8[i1 + 44 >> 0] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i8 >> 2] = 5092;
 __ZN11Mat4UniformC2EPKcP13ShaderProgram(i8 + 76 | 0, 28918, i8);
 i2 = i8 + 96 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i5, 28924, 6);
 HEAP32[i2 >> 2] = 5080;
 HEAP32[i8 + 100 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i8 + 104 | 0, i5);
 HEAP32[i6 >> 2] = i2;
 i4 = i8 + 68 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i8 + 72 | 0;
 if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i8 + 64 | 0, i6); else {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
 }
 HEAP32[i2 >> 2] = 6888;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
 i1 = i8 + 116 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i7, 28924, 6);
 HEAP32[i1 >> 2] = 5080;
 HEAP32[i8 + 120 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i8 + 124 | 0, i7);
 HEAP32[i6 >> 2] = i1;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i3 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i8 + 64 | 0, i6);
  HEAP32[i1 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i7 = i8 + 136 | 0;
  __ZN10Vec3AttribC2EPKcP13ShaderProgram(i7, 28931, i8);
  i7 = i8 + 156 | 0;
  __ZN12FloatUniformC2EPKcP13ShaderProgram(i7, 28935, i8);
  STACKTOP = i9;
  return;
 } else {
  HEAP32[i2 >> 2] = i1;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
  HEAP32[i1 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i7 = i8 + 136 | 0;
  __ZN10Vec3AttribC2EPKcP13ShaderProgram(i7, 28931, i8);
  i7 = i8 + 156 | 0;
  __ZN12FloatUniformC2EPKcP13ShaderProgram(i7, 28935, i8);
  STACKTOP = i9;
  return;
 }
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 i6 = i2;
 if (i3 & 2) if ((i6 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 > i7 >>> 0 | (i3 & -2048 | 0) == 55296) {
    i1 = 2;
    break L4;
   }
   do if (i3 >>> 0 >= 128) {
    if (i3 >>> 0 < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i6 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 6 | 192;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
    i1 = HEAP32[i10 >> 2] | 0;
    i2 = i6 - i1 | 0;
    if (i3 >>> 0 < 65536) {
     if ((i2 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 12 | 224;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    } else {
     if ((i2 | 0) < 4) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 18 | 240;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 12 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
   } else {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i6 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i2, i5, i6, i7, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i8 = 0;
 i4 = i1 + 8 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i5 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else break L1;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else break L1; else {
    HEAP32[i6 >> 2] = 0;
    i8 = 12;
    break;
   }
  } else i8 = 12; while (0);
  if ((i8 | 0) == 12) {
   i8 = 0;
   if (i1) {
    i2 = 0;
    break;
   } else i2 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
  if ((i1 & 255) << 24 >> 24 <= -1) break;
  if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i5 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i6 >> 2] = 0;
   i8 = 32;
   break;
  }
  if (!i1) i8 = 33;
 } else i8 = 32; while (0);
 if ((i8 | 0) == 32 ? i1 : 0) i8 = 33;
 if ((i8 | 0) == 33) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function __ZN7SlvCube10genPainterEv(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i11 = i16 + 92 | 0;
 i12 = i16 + 4 | 0;
 i13 = i16;
 i15 = i16 + 8 | 0;
 i4 = i14 + 28 | 0;
 i1 = i14 + 64 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  STACKTOP = i16;
  return;
 }
 HEAP32[i1 >> 2] = i14;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i1 = (i1 - i3 | 0) / 20 | 0;
  i2 = 0;
  do {
   HEAP32[i3 + (i2 * 20 | 0) + 8 >> 2] = (HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0) + ((HEAP32[i3 + (i2 * 20 | 0) >> 2] | 0) * 1328 | 0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i1 >>> 0);
 }
 HEAPF32[i14 + 28 >> 2] = 0.0;
 HEAPF32[i14 + 32 >> 2] = 0.0;
 HEAPF32[i14 + 36 >> 2] = 0.0;
 i10 = i14 + 40 | 0;
 HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 i2 = HEAP32[i14 + 80 >> 2] | 0;
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 L9 : do if ((i3 | 0) > 0) {
  i4 = i14 + 44 | 0;
  i5 = i14 + 48 | 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  i9 = 0;
  while (1) {
   switch (HEAP32[i1 + (i9 * 188 | 0) >> 2] | 0) {
   case 2:
    {
     i6 = 5;
     i7 = 5;
     i8 = 1;
     break;
    }
   case 1:
    {
     i6 = 5;
     i7 = 1;
     i8 = 5;
     break;
    }
   case 0:
    {
     i6 = 1;
     i7 = 5;
     i8 = 5;
     break;
    }
   default:
    {
     i6 = -1;
     i7 = -1;
     i8 = -1;
    }
   }
   i7 = (HEAP32[i1 + (i9 * 188 | 0) + 8 >> 2] | 0) + i7 | 0;
   i8 = (HEAP32[i1 + (i9 * 188 | 0) + 12 >> 2] | 0) + i8 | 0;
   d19 = +((HEAP32[i1 + (i9 * 188 | 0) + 4 >> 2] | 0) + i6 | 0);
   HEAPF32[i11 >> 2] = d19;
   d18 = +(i7 | 0);
   HEAPF32[i12 >> 2] = d18;
   d17 = +(i8 | 0);
   HEAPF32[i13 >> 2] = d17;
   HEAP32[i10 >> 2] = HEAP32[(+HEAPF32[i10 >> 2] < d19 ? i11 : i10) >> 2];
   HEAP32[i4 >> 2] = HEAP32[(+HEAPF32[i4 >> 2] < d18 ? i12 : i4) >> 2];
   HEAP32[i5 >> 2] = HEAP32[(+HEAPF32[i5 >> 2] < d17 ? i13 : i5) >> 2];
   i9 = i9 + 1 | 0;
   if ((i9 | 0) >= (i3 | 0)) break L9;
  }
 } while (0);
 __ZN4CubeC2EPK5ShapePK7PicsSetPK10EngineConf(i15, i2, 0, 0);
 __ZN4Cube11genLinesIFSEP7SlvCubeR15LinesCollection(i15, i14, i14 + 52 | 0);
 __ZN4CubeD2Ev(i15);
 STACKTOP = i16;
 return;
}

function __ZN7SlvCube9transformERKNSt3__16vectorIiNS0_9allocatorIiEEEE(i12, i7) {
 i12 = i12 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i13;
 i9 = i12 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[i12 >> 2] | 0;
 i1 = i3 - i8 | 0;
 i2 = (i1 | 0) / 20 | 0;
 HEAP32[i11 >> 2] = 0;
 i10 = i11 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 if ((i3 | 0) != (i8 | 0)) {
  if (i2 >>> 0 > 214748364) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i6 = __Znwj(i1) | 0;
  HEAP32[i10 >> 2] = i6;
  HEAP32[i11 >> 2] = i6;
  i1 = i6 + (i2 * 20 | 0) | 0;
  HEAP32[i11 + 8 >> 2] = i1;
  i8 = i6;
  i3 = i6;
  while (1) {
   HEAP32[i3 >> 2] = -1;
   HEAP32[i3 + 4 >> 2] = -1;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = -1;
   HEAP32[i3 + 16 >> 2] = -1;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i3 = i3 + 20 | 0;
  }
  HEAP32[i10 >> 2] = i1;
  i2 = HEAP32[i12 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) == (i2 | 0)) {
   i4 = i2;
   i5 = i2;
   i3 = i2;
   i2 = i8;
  } else {
   i5 = 0;
   do {
    i4 = i6 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + (i5 << 2) >> 2] | 0) * 20 | 0) | 0;
    i2 = i2 + (i5 * 20 | 0) | 0;
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    i5 = i5 + 1 | 0;
    i4 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    i3 = i2;
   } while (i5 >>> 0 < ((i4 - i3 | 0) / 20 | 0) >>> 0);
   i5 = i2;
   i2 = i8;
  }
 } else {
  i4 = i3;
  i5 = i3;
  i2 = 0;
  i1 = 0;
 }
 if (!i5) {
  i10 = i12 + 8 | 0;
  i7 = i2;
  i8 = i1;
  HEAP32[i12 >> 2] = i7;
  HEAP32[i9 >> 2] = i8;
  i12 = i11 + 8 | 0;
  i12 = HEAP32[i12 >> 2] | 0;
  HEAP32[i10 >> 2] = i12;
  STACKTOP = i13;
  return;
 }
 if ((i4 | 0) != (i5 | 0)) HEAP32[i9 >> 2] = i4 + (~(((i4 + -20 - i3 | 0) >>> 0) / 20 | 0) * 20 | 0);
 __ZdlPv(i5);
 i8 = i12 + 8 | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i10 = HEAP32[i10 >> 2] | 0;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i9 >> 2] = i10;
 i12 = i11 + 8 | 0;
 i12 = HEAP32[i12 >> 2] | 0;
 HEAP32[i8 >> 2] = i12;
 STACKTOP = i13;
 return;
}

function __ZN5Shape16createTrasformToEPKS_RNSt3__16vectorIiNS2_9allocatorIiEEEEPb(i1, i2, i5, i16) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i15 = i1 + 24 | 0;
 i4 = HEAP32[i15 >> 2] | 0;
 if ((i4 | 0) != (HEAP32[i2 + 24 >> 2] | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 i14 = i1 + 44 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i13 = i2 + 44 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i1 >> 2] | 0)) {
  i17 = 0;
  return i17 | 0;
 }
 i11 = (HEAP32[i3 + 4 >> 2] | 0) - (HEAP32[i1 + 4 >> 2] | 0) | 0;
 i12 = (HEAP32[i3 + 8 >> 2] | 0) - (HEAP32[i1 + 8 >> 2] | 0) | 0;
 i10 = (HEAP32[i3 + 12 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0;
 HEAP8[i16 >> 0] = 1;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = (HEAP32[i5 + 4 >> 2] | 0) - i1 | 0;
 if ((i2 | 0) > 0) {
  i9 = i2 >> 2;
  _memset(i1 | 0, -1, (i9 + ((i2 | 0) < 4 ? i9 ^ 1073741823 : 1073741822) << 2) + 8 | 0) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
 } else i1 = i4;
 if ((i1 | 0) <= 0) {
  i17 = 1;
  return i17 | 0;
 }
 i9 = HEAP32[i5 >> 2] | 0;
 i8 = 0;
 while (1) {
  L15 : do if ((i1 | 0) > 0) {
   i2 = HEAP32[i13 >> 2] | 0;
   i6 = HEAP32[i14 >> 2] | 0;
   i3 = HEAP32[i6 + (i8 * 188 | 0) + 4 >> 2] | 0;
   i4 = i6 + (i8 * 188 | 0) + 8 | 0;
   i5 = i6 + (i8 * 188 | 0) + 12 | 0;
   i6 = i6 + (i8 * 188 | 0) | 0;
   i7 = 0;
   while (1) {
    i18 = i10 + (HEAP32[i2 + (i7 * 188 | 0) + 12 >> 2] | 0) | 0;
    if ((((i11 + (HEAP32[i2 + (i7 * 188 | 0) + 4 >> 2] | 0) | 0) == (i3 | 0) ? (i12 + (HEAP32[i2 + (i7 * 188 | 0) + 8 >> 2] | 0) | 0) == (HEAP32[i4 >> 2] | 0) : 0) ? (i18 | 0) == (HEAP32[i5 >> 2] | 0) : 0) ? (HEAP32[i2 + (i7 * 188 | 0) >> 2] | 0) == (HEAP32[i6 >> 2] | 0) : 0) {
     i1 = i7;
     break;
    }
    i7 = i7 + 1 | 0;
    if ((i7 | 0) >= (i1 | 0)) {
     i17 = 17;
     break L15;
    }
   }
   HEAP32[i9 + (i8 << 2) >> 2] = i1;
   if ((i8 | 0) == (i1 | 0)) i1 = i8; else HEAP8[i16 >> 0] = 0;
  } else i17 = 17; while (0);
  if ((i17 | 0) == 17) {
   i17 = 0;
   i1 = HEAP32[i9 + (i8 << 2) >> 2] | 0;
  }
  i8 = i8 + 1 | 0;
  if ((i1 | 0) == -1) {
   i1 = 0;
   i17 = 19;
   break;
  }
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i8 | 0) >= (i1 | 0)) {
   i1 = 1;
   i17 = 19;
   break;
  }
 }
 if ((i17 | 0) == 19) return i1 | 0;
 return 0;
}

function _pop_arg(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i3 >>> 0 <= 20) do switch (i3 | 0) {
 case 9:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i3;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = ((i3 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i3 = i4;
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 8;
   i4 = i2;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i3;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _loadSolution(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i4 + 12 | 0;
 i6 = i4 + 16 | 0;
 i5 = i4;
 HEAP8[i6 >> 0] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i5, i2, _strlen(i2) | 0);
 i2 = __ZN11CubeDocBase8realOpenERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPb(8, i5, i6) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
 if (!i2) {
  i2 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 20447, 7) | 0;
  i6 = HEAP8[84] | 0;
  i5 = (i6 & 1) == 0;
  i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i2, i5 ? 85 : HEAP32[23] | 0, i5 ? (i6 & 255) >>> 1 : HEAP32[22] | 0) | 0;
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16144) | 0;
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
  __ZNSt3__16localeD2Ev(i1);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
  i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 20455, 19) | 0;
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16144) | 0;
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
  __ZNSt3__16localeD2Ev(i1);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
 }
 i1 = HEAP32[30] | 0;
 if ((i1 | 0) != 0 ? (i3 = HEAP32[i1 + 8 >> 2] | 0, (HEAP32[i1 + 12 >> 2] | 0) != (i3 | 0)) : 0) i1 = HEAP32[i3 + (HEAP32[32] << 2) >> 2] | 0; else i1 = 0;
 __ZN7SlvCube10genPainterEv(i1);
 __ZN16ModelControlBase15reCalcSlvMinMaxEv(416);
 __ZN12BaseGLWidget13switchHandlerEP9GLHandler(136, 416);
 __ZN12BaseGLWidget5resetEv(136);
 if (HEAP8[2316] | 0) {
  STACKTOP = i4;
  return;
 }
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 STACKTOP = i4;
 return;
}

function _scanexp(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i8 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i8) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9 ? (HEAP32[i7 >> 2] | 0) != 0 : 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    i5 = i2;
   } else i5 = i2;
   break;
  }
 default:
  i5 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i7 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i2 = 0;
  do {
   i2 = i1 + -48 + (i2 * 10 | 0) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i2 | 0) < 214748364);
  i3 = ((i2 | 0) < 0) << 31 >> 31;
  if ((i1 + -48 | 0) >>> 0 < 10) {
   do {
    i3 = ___muldi3(i2 | 0, i3 | 0, 10, 0) | 0;
    i2 = tempRet0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i2 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
    i3 = tempRet0;
    i1 = HEAP32[i6 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
     HEAP32[i6 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i8) | 0;
   } while ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i2 >>> 0 < 2061584302));
   i4 = i2;
  } else i4 = i2;
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i8 = (i5 | 0) != 0;
  i1 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
  i2 = i8 ? tempRet0 : i3;
  i1 = i8 ? i1 : i4;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i16, i1, i6, i8, i7, i2) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i15 + 168 | 0;
 i11 = i15 + 40 | 0;
 i10 = i15 + 32 | 0;
 i14 = i15 + 28 | 0;
 i13 = i15 + 16 | 0;
 i5 = i15 + 8 | 0;
 i9 = i15;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 >> 2] = 16620;
 i4 = HEAP8[i2 >> 0] | 0;
 i17 = (i4 & 1) == 0;
 i3 = i2 + 4 | 0;
 i1 = i17 ? i3 : HEAP32[i2 + 8 >> 2] | 0;
 i2 = i17 ? (i4 & 255) >>> 1 : HEAP32[i3 >> 2] | 0;
 i3 = i1 + (i2 << 2) | 0;
 i4 = i11 + 32 | 0;
 if ((i2 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 15](i5, i12, i1, i3, i14, i11, i4, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i13, HEAP8[i1 >> 0] | 0);
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 i1 = _catgets((i6 | 0) == -1 ? -1 : i6 << 1, i8, i7, (HEAP8[i13 >> 0] & 1) == 0 ? i13 + 1 | 0 : HEAP32[i13 + 8 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = 16668;
 i17 = _strlen(i1) | 0;
 i3 = i1 + i17 | 0;
 i4 = i3;
 i5 = i11 + 128 | 0;
 if ((i17 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 15](i9, i12, i1, (i4 - i1 | 0) > 32 ? i1 + 32 | 0 : i3, i14, i11, i5, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i16, HEAP32[i1 >> 2] | 0);
    i1 = i1 + 4 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i15;
 return;
}

function __ZNK5Shape10runBFSTreeIKZNS_17makeNeiTransformsEvE3__0EEvR8MatStackRK5BNodefRT_(i20, i18, i19, d17, i16) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d17 = +d17;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i7 = i21;
 __ZN5Shape12checkAddQuadERK4Mat4(HEAP32[i16 >> 2] | 0, i18);
 i8 = i19 + 8 | 0;
 i1 = HEAP32[i19 + 12 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) {
  STACKTOP = i21;
  return;
 }
 i12 = i7 + 64 | 0;
 i13 = i18 + 72 | 0;
 i14 = i18 + 76 | 0;
 i15 = i18 + 68 | 0;
 i9 = i18 + 64 | 0;
 i10 = i18 + 68 | 0;
 i2 = i1;
 i11 = HEAP32[i13 >> 2] | 0;
 i3 = i1;
 while (1) {
  i1 = i2 + 8 | 0;
  i4 = i7;
  i5 = i18;
  i6 = i4 + 64 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  HEAP32[i12 >> 2] = 0;
  if (i11 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
   i4 = i11;
   i5 = i7;
   i6 = i4 + 64 | 0;
   do {
    HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
    i4 = i4 + 4 | 0;
    i5 = i5 + 4 | 0;
   } while ((i4 | 0) < (i6 | 0));
   HEAP32[i11 + 64 >> 2] = 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 68;
  } else __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i10, i7);
  __ZNK5Shape22transformFromFaceToNeiER8MatStackiif(i20, i18, HEAP32[i19 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0, d17);
  __ZNK5Shape10runBFSTreeIKZNS_17makeNeiTransformsEvE3__0EEvR8MatStackRK5BNodefRT_(i20, i18, i1, d17, i16);
  i1 = HEAP32[i13 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i15 >> 2] | 0)) {
   i1 = 7;
   break;
  }
  i11 = i1 + -68 | 0;
  if ((i11 | 0) != (i18 | 0)) {
   i4 = i18;
   i5 = i11;
   i6 = i4 + 64 | 0;
   do {
    HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
    i4 = i4 + 4 | 0;
    i5 = i5 + 4 | 0;
   } while ((i4 | 0) < (i6 | 0));
  }
  HEAP32[i9 >> 2] = HEAP32[i1 + -4 >> 2];
  HEAP32[i13 >> 2] = i11;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  i2 = i3;
  if ((i2 | 0) == (i8 | 0)) {
   i1 = 11;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  i21 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i21 >> 2] = 7152;
  HEAP32[i21 + 4 >> 2] = 21369;
  ___cxa_throw(i21 | 0, 2608, 44);
 } else if ((i1 | 0) == 11) {
  STACKTOP = i21;
  return;
 }
}

function __ZNSt3__16vectorI7PicTypeNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 900 | 0) + 1 | 0;
 if (i3 >>> 0 > 4772185) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 900 | 0;
 if (i2 >>> 0 < 2386092) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 900 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 4772185;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 900 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 900 | 0) | 0;
 }
 i3 = i5 + (i1 * 900 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 900 | 0) | 0;
 _memcpy(i3 | 0, i7 | 0, 885) | 0;
 __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEEC2ERKS5_(i5 + (i1 * 900 | 0) + 888 | 0, i7 + 888 | 0);
 i6 = i5 + ((i1 + 1 | 0) * 900 | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i12 = i1;
   i1 = i1 + -900 | 0;
   _memcpy(i3 + -900 | 0, i1 | 0, 885) | 0;
   i4 = i3 + -12 | 0;
   i7 = i12 + -12 | 0;
   HEAP32[i4 >> 2] = 0;
   i13 = i3 + -8 | 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
   i4 = i12 + -8 | 0;
   HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
   i12 = i12 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   i3 = i2 + -900 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = HEAP32[i1 + -12 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + -8 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -8 - i3 | 0) >>> 3) << 3);
   __ZdlPv(i2);
  }
  i1 = i1 + -900 | 0;
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZN14MeshLinesAdder7addLineERK4Vec3S2_b9ELineType(i11, i1, i2, i3, i4) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i13 + 4 | 0;
 i12 = i13;
 if (i4 >>> 0 > 1 | i3 ^ 1) {
  STACKTOP = i13;
  return;
 }
 HEAP32[i5 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 i9 = i11 + 4 | 0;
 __ZN6VecRep3addERK4Vec3Pi(i9, i1, i5) | 0;
 __ZN6VecRep3addERK4Vec3Pi(i9, i2, i12) | 0;
 i9 = HEAP32[i11 >> 2] | 0;
 i10 = i9 + 68 | 0;
 i7 = HEAP32[i5 >> 2] & 65535;
 i8 = i9 + 72 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 i9 = i9 + 76 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if (i3 >>> 0 >= i2 >>> 0) {
  i5 = HEAP32[i10 >> 2] | 0;
  i6 = i5;
  i4 = i3 - i6 | 0;
  i1 = (i4 >> 1) + 1 | 0;
  if ((i4 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
  i14 = i5;
  i4 = i2 - i14 | 0;
  i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i1 >>> 0 ? i1 : i4) : 2147483647;
  i1 = i3 - i14 | 0;
  i2 = i1 >> 1;
  if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
  HEAP16[i3 + (i2 << 1) >> 1] = i7;
  _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i8 >> 2] = i3 + (i2 + 1 << 1);
  HEAP32[i9 >> 2] = i3 + (i4 << 1);
  if (i6) __ZdlPv(i6);
 } else {
  HEAP16[i3 >> 1] = i7;
  HEAP32[i8 >> 2] = i3 + 2;
 }
 i7 = HEAP32[i11 >> 2] | 0;
 i10 = i7 + 68 | 0;
 i5 = HEAP32[i12 >> 2] & 65535;
 i6 = i7 + 72 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i7 = i7 + 76 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i3 >>> 0 < i1 >>> 0) {
  HEAP16[i3 >> 1] = i5;
  HEAP32[i6 >> 2] = i3 + 2;
  STACKTOP = i13;
  return;
 }
 i8 = HEAP32[i10 >> 2] | 0;
 i9 = i8;
 i14 = i3 - i9 | 0;
 i2 = (i14 >> 1) + 1 | 0;
 if ((i14 | 0) < -2) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
 i14 = i8;
 i4 = i1 - i14 | 0;
 i4 = i4 >> 1 >>> 0 < 1073741823 ? (i4 >>> 0 < i2 >>> 0 ? i2 : i4) : 2147483647;
 i1 = i3 - i14 | 0;
 i2 = i1 >> 1;
 if (!i4) i3 = 0; else i3 = __Znwj(i4 << 1) | 0;
 HEAP16[i3 + (i2 << 1) >> 1] = i5;
 _memcpy(i3 | 0, i8 | 0, i1 | 0) | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i6 >> 2] = i3 + (i2 + 1 << 1);
 HEAP32[i7 >> 2] = i3 + (i4 << 1);
 if (!i9) {
  STACKTOP = i13;
  return;
 }
 __ZdlPv(i9);
 STACKTOP = i13;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 48 | 0;
 i14 = i16 + 52 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16136) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16292) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 63](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 48 | 0;
 i14 = i16 + 52 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16284) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 63](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__16vectorI6PicDefNS_9allocatorIS1_EEE8__appendEj(i10, i2) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i11 = i10 + 8 | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i12 = i10 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = i1;
 if (((i4 - i3 | 0) / 1328 | 0) >>> 0 >= i2 >>> 0) {
  do {
   __ZN6PicDefC2Ev(i1);
   i1 = (HEAP32[i12 >> 2] | 0) + 1328 | 0;
   HEAP32[i12 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 i3 = ((i3 - i1 | 0) / 1328 | 0) + i2 | 0;
 if (i3 >>> 0 > 3234162) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
 i5 = i1;
 i1 = (i4 - i5 | 0) / 1328 | 0;
 if (i1 >>> 0 < 1617081) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i3 = ((HEAP32[i12 >> 2] | 0) - i5 | 0) / 1328 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i6 = 8;
 } else {
  i1 = 3234162;
  i3 = ((HEAP32[i12 >> 2] | 0) - i5 | 0) / 1328 | 0;
  i6 = 8;
 }
 if ((i6 | 0) == 8) {
  i5 = i1;
  i4 = __Znwj(i1 * 1328 | 0) | 0;
  i1 = i3;
 }
 i7 = i4 + (i1 * 1328 | 0) | 0;
 i9 = i7;
 i4 = i4 + (i5 * 1328 | 0) | 0;
 i3 = i7;
 i1 = i9;
 do {
  __ZN6PicDefC2Ev(i3);
  i3 = i1 + 1328 | 0;
  i1 = i3;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i8 = i1;
 i6 = HEAP32[i10 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i3 = i10;
  i5 = i12;
  i2 = i9;
 } else {
  i3 = i7;
  i2 = i9;
  do {
   i9 = i1;
   i1 = i1 + -1328 | 0;
   _memcpy(i3 + -1328 | 0, i1 | 0, 1004) | 0;
   i5 = i9 + -324 | 0;
   HEAP32[i3 + -324 >> 2] = HEAP32[i5 >> 2];
   i7 = i9 + -320 | 0;
   HEAP32[i3 + -320 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i5 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   _memcpy(i3 + -316 | 0, i9 + -316 | 0, 316) | 0;
   i3 = i2 + -1328 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i6 | 0));
  i1 = i2;
  i3 = i10;
  i5 = i12;
  i2 = i1;
  i6 = HEAP32[i10 >> 2] | 0;
  i1 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i11 >> 2] = i4;
 i3 = i6;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -320 >> 2] | 0;
  i1 = i1 + -1328 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function __ZN8tinyxml28MemPoolTILi36EE5AllocEv(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 56 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i1 = __Znwj(1008) | 0;
  _memset(i1 | 0, 0, 1008) | 0;
  i7 = i10 + 4 | 0;
  i8 = i10 + 52 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = i3 + 1 | 0;
  i6 = i10 + 48 | 0;
  if ((HEAP32[i6 >> 2] | 0) < (i2 | 0)) {
   i5 = i2 << 1;
   i2 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   _memcpy(i2 | 0, i4 | 0, i3 << 2 | 0) | 0;
   if (!((i4 | 0) == 0 | (i4 | 0) == (i10 + 8 | 0))) {
    __ZdaPv(i4);
    i3 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i5;
  } else i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = i3 + 1;
  HEAP32[i2 + (i3 << 2) >> 2] = i1;
  HEAP32[i1 >> 2] = i1 + 36;
  HEAP32[i1 + 36 >> 2] = i1 + 72;
  HEAP32[i1 + 72 >> 2] = i1 + 108;
  HEAP32[i1 + 108 >> 2] = i1 + 144;
  HEAP32[i1 + 144 >> 2] = i1 + 180;
  HEAP32[i1 + 180 >> 2] = i1 + 216;
  HEAP32[i1 + 216 >> 2] = i1 + 252;
  HEAP32[i1 + 252 >> 2] = i1 + 288;
  HEAP32[i1 + 288 >> 2] = i1 + 324;
  HEAP32[i1 + 324 >> 2] = i1 + 360;
  HEAP32[i1 + 360 >> 2] = i1 + 396;
  HEAP32[i1 + 396 >> 2] = i1 + 432;
  HEAP32[i1 + 432 >> 2] = i1 + 468;
  HEAP32[i1 + 468 >> 2] = i1 + 504;
  HEAP32[i1 + 504 >> 2] = i1 + 540;
  HEAP32[i1 + 540 >> 2] = i1 + 576;
  HEAP32[i1 + 576 >> 2] = i1 + 612;
  HEAP32[i1 + 612 >> 2] = i1 + 648;
  HEAP32[i1 + 648 >> 2] = i1 + 684;
  HEAP32[i1 + 684 >> 2] = i1 + 720;
  HEAP32[i1 + 720 >> 2] = i1 + 756;
  HEAP32[i1 + 756 >> 2] = i1 + 792;
  HEAP32[i1 + 792 >> 2] = i1 + 828;
  HEAP32[i1 + 828 >> 2] = i1 + 864;
  HEAP32[i1 + 864 >> 2] = i1 + 900;
  HEAP32[i1 + 900 >> 2] = i1 + 936;
  HEAP32[i1 + 936 >> 2] = i1 + 972;
  HEAP32[i1 + 972 >> 2] = 0;
  HEAP32[i9 >> 2] = i1;
 }
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 i3 = i10 + 60 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i2 = i9 + 1 | 0;
 HEAP32[i3 >> 2] = i2;
 i3 = i10 + 68 | 0;
 if ((i9 | 0) < (HEAP32[i3 >> 2] | 0)) {
  i10 = i10 + 64 | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  i9 = i9 + 1 | 0;
  HEAP32[i10 >> 2] = i9;
  return i1 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 i10 = i10 + 64 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i9 = i9 + 1 | 0;
 HEAP32[i10 >> 2] = i9;
 return i1 | 0;
}

function __ZN10BuildWorldC2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 HEAP32[i4 >> 2] = 50;
 HEAP32[i4 + 4 >> 2] = 50;
 HEAP32[i4 + 8 >> 2] = 50;
 HEAP32[i4 + 12 >> 2] = 50;
 HEAP32[i4 + 16 >> 2] = 50;
 HEAP32[i4 + 20 >> 2] = 50;
 HEAP32[i4 + 24 >> 2] = 2500;
 i1 = __Znaj(15e5) | 0;
 i2 = i1 + 15e5 | 0;
 i3 = i1;
 do {
  HEAP32[i3 >> 2] = 1;
  i5 = i3 + 4 | 0;
  HEAP8[i5 >> 0] = 0;
  HEAP8[i5 + 1 >> 0] = 0;
  HEAP8[i5 + 2 >> 0] = 0;
  HEAP8[i5 + 3 >> 0] = 0;
  HEAP8[i5 + 4 >> 0] = 0;
  HEAP8[i5 + 5 >> 0] = 0;
  i3 = i3 + 12 | 0;
 } while ((i3 | 0) != (i2 | 0));
 HEAP32[i4 + 28 >> 2] = i1;
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP8[i4 + 36 >> 0] = 0;
 __ZN9SqrLimits4InitEi(i4 + 40 | 0, 50);
 __ZN9SqrLimits4InitEi(i4 + 64 | 0, 50);
 __ZN9SqrLimits4InitEi(i4 + 88 | 0, 50);
 __ZN9SqrLimits4InitEi(i4 + 112 | 0, 50);
 __ZN14BuildDimensionC2Ev(i4 + 136 | 0);
 __ZN14BuildDimensionC2Ev(i4 + 500136 | 0);
 __ZN14BuildDimensionC2Ev(i4 + 1000136 | 0);
 HEAP8[i4 + 1500136 >> 0] = 1;
 HEAP8[i4 + 1500137 >> 0] = 0;
 HEAP32[i4 + 1500140 >> 2] = 0;
 HEAP32[i4 + 1500144 >> 2] = 0;
 HEAP32[i4 + 1500148 >> 2] = 0;
 HEAP32[i4 + 1500152 >> 2] = -1;
 HEAP32[i4 + 1500156 >> 2] = -1;
 HEAP32[i4 + 1500160 >> 2] = -1;
 i3 = i4 + 1500164 | 0;
 i5 = i4 + 1500184 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP8[i3 + 16 >> 0] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 __ZN9SqrLimits4InitEi(i4 + 1500200 | 0, 50);
 i5 = i4 + 1500224 | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = -1;
 HEAP32[i5 + 8 >> 2] = -1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAP32[i5 + 16 >> 2] = -1;
 HEAP32[i4 + 1500244 >> 2] = 0;
 i5 = i4 + 1500248 | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = -1;
 HEAP32[i5 + 8 >> 2] = -1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAP32[i4 + 1500264 >> 2] = 0;
 i5 = i4 + 1500268 | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = -1;
 HEAP32[i5 + 8 >> 2] = -1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAP32[i4 + 1500284 >> 2] = 0;
 HEAP32[i4 + 1500288 >> 2] = 0;
 HEAP32[i4 + 1500292 >> 2] = 255;
 HEAP8[i4 + 1500296 >> 0] = 0;
 __ZN10BuildWorld13initializeNewEb(i4, 1);
 return;
}

function __ZN7PicsSet6addRefEi(i8, i12) {
 i8 = i8 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i14 + 8 | 0;
 i13 = i14;
 i11 = HEAP32[(HEAP32[1556] | 0) + 16 >> 2] | 0;
 i10 = i8 + 24 | 0;
 i6 = i8 + 28 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i4 = HEAP32[i10 >> 2] | 0;
 L1 : do if ((i7 | 0) == (i4 | 0)) i9 = 0; else {
  i2 = HEAP32[i11 + (i12 * 1328 | 0) + 1016 >> 2] | 0;
  i3 = i7 - i4 >> 4;
  i1 = 0;
  while (1) {
   if ((HEAP32[i4 + (i1 << 4) >> 2] | 0) == (i2 | 0)) {
    i9 = i1;
    break L1;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i3 >>> 0) {
    i9 = i1;
    break;
   }
  }
 } while (0);
 do if ((i9 | 0) == (i7 - i4 >> 4 | 0)) {
  i1 = HEAP32[i11 + (i12 * 1328 | 0) + 1016 >> 2] | 0;
  HEAP32[i5 >> 2] = i1;
  i2 = i5 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  i4 = i5 + 8 | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  if (i7 >>> 0 < (HEAP32[i8 + 32 >> 2] | 0) >>> 0) {
   i8 = i7 + 4 | 0;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i7 >> 2] = i1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 16;
   break;
  }
  __ZNSt3__16vectorI7CompRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i10, i5);
  i1 = HEAP32[i2 >> 2] | 0;
  i2 = i1;
  if (i1) {
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = i3 + (~((i3 + -8 - i2 | 0) >>> 3) << 3);
   __ZdlPv(i1);
  }
 } while (0);
 i3 = HEAP32[i10 >> 2] | 0;
 i1 = HEAP32[i11 + (i12 * 1328 | 0) + 1020 >> 2] | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i13 + 4 >> 2] = i1;
 i1 = i3 + (i9 << 4) + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i3 + (i9 << 4) + 12 >> 2] | 0) >>> 0) {
  i11 = i13;
  i12 = HEAP32[i11 + 4 >> 2] | 0;
  i13 = i2;
  HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i13 + 4 >> 2] = i12;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 8;
  STACKTOP = i14;
  return;
 } else {
  __ZNSt3__16vectorI7PdefRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i3 + (i9 << 4) + 4 | 0, i13);
  STACKTOP = i14;
  return;
 }
}

function __ZNSt3__110__stdinbufIcE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 1 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 15](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0;
  } else HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0; while (0);
  if (i14) {
   i1 = HEAP8[i12 >> 0] | 0;
   HEAP32[i11 + 48 >> 2] = i1 & 255;
  } else {
   while (1) {
    if ((i1 | 0) <= 0) break;
    i1 = i1 + -1 | 0;
    if ((_ungetc(HEAPU8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
   i1 = HEAP8[i12 >> 0] | 0;
  }
  i1 = i1 & 255;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i9, i2, i10) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = i2;
 i7 = i10 - i3 >> 3;
 i8 = i9 + 8 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i5 = i6;
 if (i7 >>> 0 <= i1 - i5 >> 3 >>> 0) {
  i4 = i9 + 4 | 0;
  i1 = (HEAP32[i4 >> 2] | 0) - i5 >> 3;
  i9 = i7 >>> 0 > i1 >>> 0;
  i1 = i9 ? i2 + (i1 << 3) | 0 : i10;
  i8 = i1 - i3 | 0;
  _memmove(i6 | 0, i2 | 0, i8 | 0) | 0;
  i2 = i6 + (i8 >> 3 << 3) | 0;
  if (!i9) {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) return;
   HEAP32[i4 >> 2] = i1 + (~((i1 + -8 - i2 | 0) >>> 3) << 3);
   return;
  }
  if ((i1 | 0) == (i10 | 0)) return;
  i2 = HEAP32[i4 >> 2] | 0;
  do {
   i7 = i1;
   i8 = HEAP32[i7 + 4 >> 2] | 0;
   i9 = i2;
   HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i9 + 4 >> 2] = i8;
   i2 = (HEAP32[i4 >> 2] | 0) + 8 | 0;
   HEAP32[i4 >> 2] = i2;
   i1 = i1 + 8 | 0;
  } while ((i1 | 0) != (i10 | 0));
  return;
 }
 if (i6) {
  i1 = i9 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i3 | 0) != (i6 | 0)) HEAP32[i1 >> 2] = i3 + (~((i3 + -8 - i5 | 0) >>> 3) << 3);
  __ZdlPv(i6);
  HEAP32[i8 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i1 = 0;
 }
 if (i7 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i1 = i1 - 0 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i7 >>> 0 ? i7 : i1;
  if (i1 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9); else i4 = i1;
 } else i4 = 536870911;
 i1 = __Znwj(i4 << 3) | 0;
 i3 = i9 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = i1 + (i4 << 3);
 if ((i2 | 0) == (i10 | 0)) return;
 do {
  i7 = i2;
  i8 = HEAP32[i7 + 4 >> 2] | 0;
  i9 = i1;
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i9 + 4 >> 2] = i8;
  i1 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
  HEAP32[i3 >> 2] = i1;
  i2 = i2 + 8 | 0;
 } while ((i2 | 0) != (i10 | 0));
 return;
}

function __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE4findIS5_EENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEERKT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = i1 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 if (i3) {
  i4 = HEAP32[i2 >> 2] | 0;
  i6 = HEAP32[i2 + 4 >> 2] | 0;
  i8 = HEAP32[i2 + 8 >> 2] | 0;
  i10 = HEAP32[i2 + 12 >> 2] | 0;
  i7 = HEAP32[i2 + 16 >> 2] | 0;
  i1 = i9;
  i2 = i3;
  L3 : while (1) {
   while (1) {
    i3 = HEAP32[i2 + 16 >> 2] | 0;
    if ((i3 | 0) >= (i4 | 0)) {
     if ((i4 | 0) < (i3 | 0)) {
      i1 = i2;
      break;
     }
     i3 = HEAP32[i2 + 20 >> 2] | 0;
     if ((i3 | 0) >= (i6 | 0)) {
      if ((i6 | 0) < (i3 | 0)) {
       i1 = i2;
       break;
      }
      i3 = HEAP32[i2 + 24 >> 2] | 0;
      if ((i3 | 0) >= (i8 | 0)) {
       if ((i8 | 0) < (i3 | 0)) {
        i1 = i2;
        break;
       }
       i3 = HEAP32[i2 + 28 >> 2] | 0;
       if ((i3 | 0) >= (i10 | 0)) {
        if ((i10 | 0) < (i3 | 0)) {
         i1 = i2;
         break;
        }
        if ((HEAP32[i2 + 32 >> 2] | 0) >= (i7 | 0)) {
         i1 = i2;
         break;
        }
       }
      }
     }
    }
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i2) {
     i2 = i1;
     break L3;
    }
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i2 = i1;
    break;
   }
  }
  if ((i2 | 0) != (i9 | 0) ? (i5 = HEAP32[i2 + 16 >> 2] | 0, (i4 | 0) >= (i5 | 0)) : 0) {
   if ((i5 | 0) < (i4 | 0)) {
    i10 = i2;
    return i10 | 0;
   }
   i1 = HEAP32[i2 + 20 >> 2] | 0;
   if ((i6 | 0) >= (i1 | 0)) {
    if ((i1 | 0) < (i6 | 0)) {
     i10 = i2;
     return i10 | 0;
    }
    i1 = HEAP32[i2 + 24 >> 2] | 0;
    if ((i8 | 0) >= (i1 | 0)) {
     if ((i1 | 0) < (i8 | 0)) {
      i10 = i2;
      return i10 | 0;
     }
     i1 = HEAP32[i2 + 28 >> 2] | 0;
     if ((i10 | 0) >= (i1 | 0)) {
      if ((i1 | 0) < (i10 | 0)) {
       i10 = i2;
       return i10 | 0;
      }
      if ((i7 | 0) >= (HEAP32[i2 + 32 >> 2] | 0)) {
       i10 = i2;
       return i10 | 0;
      }
     }
    }
   }
  }
 }
 i10 = i9;
 return i10 | 0;
}

function __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_(i8, i9, i7) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i10;
 i1 = i9 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2) {
  i4 = HEAP32[i7 >> 2] | 0;
  i5 = HEAP32[i7 + 4 >> 2] | 0;
  i1 = i2;
  while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if ((i4 | 0) == (i2 | 0)) {
    i2 = HEAP32[i1 + 20 >> 2] | 0;
    if ((i5 | 0) >= (i2 | 0)) if ((i2 | 0) < (i5 | 0)) i3 = 10; else {
     i3 = 13;
     break;
    } else i3 = 6;
   } else if ((i4 | 0) >= (i2 | 0)) if ((i2 | 0) < (i4 | 0)) i3 = 10; else {
    i3 = 13;
    break;
   } else i3 = 6;
   if ((i3 | 0) == 6) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = i1;
     i4 = i1;
     i3 = 7;
     break;
    } else i1 = i2;
   } else if ((i3 | 0) == 10) {
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i3 = 12;
     break;
    } else i1 = i3;
   }
  }
  if ((i3 | 0) == 7) {
   HEAP32[i6 >> 2] = i4;
   break;
  } else if ((i3 | 0) == 12) {
   HEAP32[i6 >> 2] = i1;
   i4 = i1;
   break;
  } else if ((i3 | 0) == 13) {
   HEAP32[i6 >> 2] = i1;
   i2 = i6;
   i4 = i1;
   break;
  }
 } else {
  HEAP32[i6 >> 2] = i1;
  i2 = i1;
  i4 = i1;
 } while (0);
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) {
  i7 = 0;
  i9 = i1;
  HEAP32[i8 >> 2] = i9;
  i9 = i8 + 4 | 0;
  HEAP8[i9 >> 0] = i7;
  STACKTOP = i10;
  return;
 }
 i3 = __Znwj(24) | 0;
 i6 = i7;
 i7 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i3 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = i7;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i4;
 HEAP32[i2 >> 2] = i3;
 i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
 if (!i1) i1 = i3; else {
  HEAP32[i9 >> 2] = i1;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i9 + 4 >> 2] | 0, i1);
 i7 = i9 + 8 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i7 = 1;
 i9 = i3;
 HEAP32[i8 >> 2] = i9;
 i9 = i8 + 4 | 0;
 HEAP8[i9 >> 0] = i7;
 STACKTOP = i10;
 return;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 4 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 15](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP32[i12 >> 2] = HEAP8[i13 >> 0];
  } else HEAP32[i12 >> 2] = HEAP8[i13 >> 0]; while (0);
  if (i14) {
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i11 + 48 >> 2] = i1;
   break;
  }
  while (1) {
   if ((i1 | 0) <= 0) break;
   i1 = i1 + -1 | 0;
   if ((_ungetc(HEAP8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
    i1 = -1;
    break L1;
   }
  }
  i1 = HEAP32[i12 >> 2] | 0;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP8[i8 + 24 >> 0] | 0) == i7 << 24 >> 24;
  if (!i1 ? (HEAP8[i8 + 25 >> 0] | 0) != i7 << 24 >> 24 : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if (i7 << 24 >> 24 == i3 << 24 >> 24 ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 26 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  if ((i1 | 0) > 23) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i1 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 22) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[35415 + i1 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[35415 + i1 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 if (!i5) {
  i6 = 0;
  return i6 | 0;
 }
 i2 = __ZN8tinyxml27StrPair6GetStrEv(i5 + 12 | 0) | 0;
 i1 = __ZN8tinyxml27StrPair6GetStrEv(i6 + 12 | 0) | 0;
 do if ((i2 | 0) != (i1 | 0)) {
  i3 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24) {
   i4 = i2;
   i2 = 0;
   while (1) {
    i7 = HEAP8[i1 >> 0] | 0;
    if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i3 << 24 >> 24 == i7 << 24 >> 24 : 0))) break;
    i4 = i4 + 1 | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    i3 = HEAP8[i4 >> 0] | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = 0;
     break;
    }
   }
   if ((i2 | 0) == 2147483647) break;
   if (i3 << 24 >> 24) {
    i7 = 0;
    return i7 | 0;
   }
  }
  if (HEAP8[i1 >> 0] | 0) {
   i7 = 0;
   return i7 | 0;
  }
 } while (0);
 i4 = HEAP32[i5 + 48 >> 2] | 0;
 i3 = HEAP32[i6 + 48 >> 2] | 0;
 i2 = (i3 | 0) != 0;
 i1 = (i4 | 0) != 0;
 L16 : do if (i1 & i2) {
  L17 : while (1) {
   i2 = __ZN8tinyxml27StrPair6GetStrEv(i3 + 16 | 0) | 0;
   i1 = __ZN8tinyxml27StrPair6GetStrEv(i4 + 16 | 0) | 0;
   do if ((i2 | 0) != (i1 | 0)) {
    i5 = HEAP8[i2 >> 0] | 0;
    if (i5 << 24 >> 24) {
     i6 = i2;
     i2 = 0;
     while (1) {
      i7 = HEAP8[i1 >> 0] | 0;
      if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i7 << 24 >> 24 : 0))) break;
      i6 = i6 + 1 | 0;
      i1 = i1 + 1 | 0;
      i2 = i2 + 1 | 0;
      i5 = HEAP8[i6 >> 0] | 0;
      if (!(i5 << 24 >> 24)) {
       i5 = 0;
       break;
      }
     }
     if ((i2 | 0) == 2147483647) break;
     if (i5 << 24 >> 24) {
      i1 = 0;
      i3 = 19;
      break L17;
     }
    }
    if (HEAP8[i1 >> 0] | 0) {
     i1 = 0;
     i3 = 19;
     break L17;
    }
   } while (0);
   i4 = HEAP32[i4 + 28 >> 2] | 0;
   i3 = HEAP32[i3 + 28 >> 2] | 0;
   i2 = (i3 | 0) != 0;
   i1 = (i4 | 0) != 0;
   if (!(i1 & i2)) break L16;
  }
  if ((i3 | 0) == 19) return i1 | 0;
 } while (0);
 i7 = (i1 | i2) ^ 1;
 return i7 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP32[i8 + 96 >> 2] | 0) == (i7 | 0);
  if (!i1 ? (HEAP32[i8 + 100 >> 2] | 0) != (i7 | 0) : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if ((i7 | 0) == (i3 | 0) ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 104 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  i2 = i1 >> 2;
  if ((i1 | 0) > 92) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i2 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 88) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[35415 + i2 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[35415 + i2 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZN4Mesh5clearEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7;
 HEAP32[i5 >> 2] = 0;
 i6 = i5 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i1 = HEAP32[i5 + 8 >> 2] | 0;
 i2 = i5 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~(((i3 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = i5 + 24 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~(((i3 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
 i1 = HEAP32[i5 + 32 >> 2] | 0;
 i2 = i5 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -16 - i1 | 0) >>> 4) << 4);
 i1 = HEAP32[i5 + 44 >> 2] | 0;
 i2 = i5 + 48 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((0 - i1 + (i3 + -4) | 0) >>> 2) << 2);
 i1 = HEAP32[i5 + 56 >> 2] | 0;
 i2 = i5 + 60 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 i1 = HEAP32[i5 + 68 >> 2] | 0;
 i2 = i5 + 72 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -2 - i1 | 0) >>> 1) << 1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 i6 = i5 + 80 | 0;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i6 = HEAP32[i5 + 108 >> 2] | 0;
 i5 = i5 + 112 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  STACKTOP = i7;
  return;
 }
 do {
  i2 = i1 + -20 | 0;
  HEAP32[i5 >> 2] = i2;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i3;
  if (!i3) i1 = i2; else {
   i1 = i1 + -16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -2 - i4 | 0) >>> 1) << 1);
   __ZdlPv(i3);
   i1 = HEAP32[i5 >> 2] | 0;
  }
 } while ((i1 | 0) != (i6 | 0));
 STACKTOP = i7;
 return;
}

function __ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE(i9, i1, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i2 & 255;
 L1 : do if (!(i3 & 128)) {
  while (1) {
   if (!(_isspace(i3) | 0)) break;
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = i2 & 255;
   if (i3 & 128) {
    i3 = i1;
    break L1;
   }
  }
  if (!i1) {
   i9 = 0;
   return i9 | 0;
  } else {
   i3 = i1;
   i2 = HEAP8[i1 >> 0] | 0;
   break;
  }
 } else i3 = i1; while (0);
 if (i2 << 24 >> 24 != 47) {
  i1 = i9 + 12 | 0;
  if (!i3) {
   i3 = 0;
   i2 = i9;
  } else {
   i6 = i3;
   i4 = i2;
   i2 = i9;
   i5 = 9;
  }
 } else {
  HEAP32[i9 + 44 >> 2] = 2;
  i4 = i3 + 1 | 0;
  i6 = i4;
  i4 = HEAP8[i4 >> 0] | 0;
  i1 = i9 + 12 | 0;
  i2 = i9;
  i5 = 9;
 }
 if ((i5 | 0) == 9) if (i4 << 24 >> 24) {
  i5 = i6;
  L15 : while (1) {
   L17 : do if (i4 << 24 >> 24 > -1 ? (_isalnum(i4 & 255) | 0) == 0 : 0) {
    i3 = HEAP8[i5 >> 0] | 0;
    switch (i3 << 24 >> 24) {
    case 58:
    case 95:
     break L17;
    case 45:
     if (i5 >>> 0 > i6 >>> 0) break L17; else {
      i3 = i5;
      break L15;
     }
    default:
     if (i5 >>> 0 > i6 >>> 0 & i3 << 24 >> 24 == 46) break L17; else {
      i3 = i5;
      break L15;
     }
    }
   } while (0);
   i3 = i5 + 1 | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break; else i5 = i3;
  }
  if (i3 >>> 0 > i6 >>> 0) {
   i5 = i9 + 12 | 0;
   i4 = i9 + 16 | 0;
   if ((HEAP32[i5 >> 2] & 512 | 0) != 0 ? (i7 = HEAP32[i4 >> 2] | 0, (i7 | 0) != 0) : 0) __ZdaPv(i7);
   HEAP32[i4 >> 2] = i6;
   HEAP32[i9 + 20 >> 2] = i3;
   HEAP32[i5 >> 2] = 256;
  } else i3 = 0;
 } else i3 = 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
  i9 = 0;
  return i9 | 0;
 }
 i1 = __ZN8tinyxml210XMLElement15ParseAttributesEPc(i9, i3) | 0;
 if (!i1) {
  i9 = 0;
  return i9 | 0;
 }
 if (!(HEAP8[i1 >> 0] | 0)) {
  i9 = i1;
  return i9 | 0;
 }
 if (HEAP32[i9 + 44 >> 2] | 0) {
  i9 = i1;
  return i9 | 0;
 }
 i9 = __ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE(i2, i1, i8) | 0;
 return i9 | 0;
}

function __ZN6PicArr4turnEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i8;
 i4 = i7 + 100 | 0;
 i5 = i7 + 104 | 0;
 HEAP32[i5 >> 2] = -1;
 i1 = i7;
 i2 = i1 + 100 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = i6 + 100 | 0;
 HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
 i2 = 4;
 i3 = 0;
 while (1) {
  i9 = i2 * 5 | 0;
  HEAP32[i7 + (i9 << 2) >> 2] = HEAP32[i6 + (i3 << 2) >> 2];
  HEAP32[i7 + (i9 + 1 << 2) >> 2] = HEAP32[i6 + (i3 + 5 << 2) >> 2];
  HEAP32[i7 + (i9 + 2 << 2) >> 2] = HEAP32[i6 + (i3 + 10 << 2) >> 2];
  HEAP32[i7 + (i9 + 3 << 2) >> 2] = HEAP32[i6 + (i3 + 15 << 2) >> 2];
  HEAP32[i7 + (i9 + 4 << 2) >> 2] = HEAP32[i6 + (i3 + 20 << 2) >> 2];
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == 5) break; else i2 = i2 + -1 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i6 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
 HEAP32[i6 + 32 >> 2] = HEAP32[i7 + 32 >> 2];
 HEAP32[i6 + 36 >> 2] = HEAP32[i7 + 36 >> 2];
 HEAP32[i6 + 40 >> 2] = HEAP32[i7 + 40 >> 2];
 HEAP32[i6 + 44 >> 2] = HEAP32[i7 + 44 >> 2];
 HEAP32[i6 + 48 >> 2] = HEAP32[i7 + 48 >> 2];
 HEAP32[i6 + 52 >> 2] = HEAP32[i7 + 52 >> 2];
 HEAP32[i6 + 56 >> 2] = HEAP32[i7 + 56 >> 2];
 HEAP32[i6 + 60 >> 2] = HEAP32[i7 + 60 >> 2];
 HEAP32[i6 + 64 >> 2] = HEAP32[i7 + 64 >> 2];
 HEAP32[i6 + 68 >> 2] = HEAP32[i7 + 68 >> 2];
 HEAP32[i6 + 72 >> 2] = HEAP32[i7 + 72 >> 2];
 HEAP32[i6 + 76 >> 2] = HEAP32[i7 + 76 >> 2];
 HEAP32[i6 + 80 >> 2] = HEAP32[i7 + 80 >> 2];
 HEAP32[i6 + 84 >> 2] = HEAP32[i7 + 84 >> 2];
 HEAP32[i6 + 88 >> 2] = HEAP32[i7 + 88 >> 2];
 HEAP32[i6 + 92 >> 2] = HEAP32[i7 + 92 >> 2];
 HEAP32[i6 + 96 >> 2] = HEAP32[i7 + 96 >> 2];
 HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
 HEAP32[i6 + 104 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i8;
 return;
}

function __ZN4Cube14getCurrentCircEi(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i8 = i9;
 HEAP8[i8 + 100 >> 0] = 0;
 HEAP32[i8 + 104 >> 2] = -1;
 i1 = i8;
 i2 = i1 + 100 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i2 = HEAP32[(HEAP32[i4 + 36 >> 2] | 0) + 44 >> 2] | 0;
 i6 = HEAP32[i4 + 40 >> 2] | 0;
 i7 = (Math_imul(HEAP32[i2 + (i3 * 188 | 0) + 8 >> 2] | 0, i6) | 0) + (HEAP32[i2 + (i3 * 188 | 0) + 4 >> 2] | 0) | 0;
 i5 = HEAP32[i4 + 52 >> 2] | 0;
 i7 = i7 + (Math_imul(HEAP32[i2 + (i3 * 188 | 0) + 12 >> 2] | 0, i5) | 0) | 0;
 switch (HEAP32[i2 + (i3 * 188 | 0) >> 2] | 0) {
 case 0:
  {
   i1 = HEAP32[i4 + 56 >> 2] | 0;
   i2 = 0;
   do {
    i3 = HEAP32[7192 + (i2 << 2) >> 2] | 0;
    i4 = HEAP32[7256 + (i2 << 2) >> 2] | 0;
    HEAP32[i8 + ((i3 * 5 | 0) + i4 << 2) >> 2] = HEAP32[i1 + ((Math_imul(i6, i4) | 0) + i7 + (Math_imul(i5, i3) | 0) << 2) >> 2];
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 16);
   i1 = 0;
   i2 = 15;
   break;
  }
 case 1:
  {
   i1 = HEAP32[i4 + 56 >> 2] | 0;
   i2 = 0;
   do {
    i4 = HEAP32[7192 + (i2 << 2) >> 2] | 0;
    i6 = HEAP32[7256 + (i2 << 2) >> 2] | 0;
    HEAP32[i8 + ((i4 * 5 | 0) + i6 << 2) >> 2] = HEAP32[i1 + (i4 + i7 + (Math_imul(i5, i6) | 0) << 2) >> 2];
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 16);
   i1 = 0;
   i2 = 15;
   break;
  }
 case 2:
  {
   i1 = HEAP32[i4 + 56 >> 2] | 0;
   i2 = 0;
   do {
    i4 = HEAP32[7192 + (i2 << 2) >> 2] | 0;
    i5 = HEAP32[7256 + (i2 << 2) >> 2] | 0;
    HEAP32[i8 + ((i4 * 5 | 0) + i5 << 2) >> 2] = HEAP32[i1 + (i4 + i7 + (Math_imul(i6, i5) | 0) << 2) >> 2];
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 16);
   i1 = 0;
   i2 = 15;
   break;
  }
 default:
  {
   i1 = 0;
   i2 = 15;
  }
 }
 while (1) {
  i1 = (HEAP32[i8 + (((HEAP32[7192 + (i2 << 2) >> 2] | 0) * 5 | 0) + (HEAP32[7256 + (i2 << 2) >> 2] | 0) << 2) >> 2] | 0) != 0 | i1 << 1 & 131070;
  if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break;
 }
 STACKTOP = i9;
 return i1 & 65535 | 0;
}

function __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 56 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i1 = __Znwj(1012) | 0;
  _memset(i1 | 0, 0, 1012) | 0;
  i7 = i10 + 4 | 0;
  i8 = i10 + 52 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = i3 + 1 | 0;
  i6 = i10 + 48 | 0;
  if ((HEAP32[i6 >> 2] | 0) < (i2 | 0)) {
   i5 = i2 << 1;
   i2 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   _memcpy(i2 | 0, i4 | 0, i3 << 2 | 0) | 0;
   if (!((i4 | 0) == 0 | (i4 | 0) == (i10 + 8 | 0))) {
    __ZdaPv(i4);
    i3 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i5;
  } else i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = i3 + 1;
  HEAP32[i2 + (i3 << 2) >> 2] = i1;
  HEAP32[i1 >> 2] = i1 + 44;
  HEAP32[i1 + 44 >> 2] = i1 + 88;
  HEAP32[i1 + 88 >> 2] = i1 + 132;
  HEAP32[i1 + 132 >> 2] = i1 + 176;
  HEAP32[i1 + 176 >> 2] = i1 + 220;
  HEAP32[i1 + 220 >> 2] = i1 + 264;
  HEAP32[i1 + 264 >> 2] = i1 + 308;
  HEAP32[i1 + 308 >> 2] = i1 + 352;
  HEAP32[i1 + 352 >> 2] = i1 + 396;
  HEAP32[i1 + 396 >> 2] = i1 + 440;
  HEAP32[i1 + 440 >> 2] = i1 + 484;
  HEAP32[i1 + 484 >> 2] = i1 + 528;
  HEAP32[i1 + 528 >> 2] = i1 + 572;
  HEAP32[i1 + 572 >> 2] = i1 + 616;
  HEAP32[i1 + 616 >> 2] = i1 + 660;
  HEAP32[i1 + 660 >> 2] = i1 + 704;
  HEAP32[i1 + 704 >> 2] = i1 + 748;
  HEAP32[i1 + 748 >> 2] = i1 + 792;
  HEAP32[i1 + 792 >> 2] = i1 + 836;
  HEAP32[i1 + 836 >> 2] = i1 + 880;
  HEAP32[i1 + 880 >> 2] = i1 + 924;
  HEAP32[i1 + 924 >> 2] = i1 + 968;
  HEAP32[i1 + 968 >> 2] = 0;
  HEAP32[i9 >> 2] = i1;
 }
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 i3 = i10 + 60 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i2 = i9 + 1 | 0;
 HEAP32[i3 >> 2] = i2;
 i3 = i10 + 68 | 0;
 if ((i9 | 0) < (HEAP32[i3 >> 2] | 0)) {
  i10 = i10 + 64 | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  i9 = i9 + 1 | 0;
  HEAP32[i10 >> 2] = i9;
  return i1 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 i10 = i10 + 64 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i9 = i9 + 1 | 0;
 HEAP32[i10 >> 2] = i9;
 return i1 | 0;
}

function __ZN6PicArr4revYEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i8;
 i4 = i7 + 100 | 0;
 i5 = i7 + 104 | 0;
 HEAP32[i5 >> 2] = -1;
 i1 = i7;
 i2 = i1 + 100 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = i6 + 100 | 0;
 HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
 i2 = 4;
 i3 = 0;
 while (1) {
  HEAP32[i7 + (i2 << 2) >> 2] = HEAP32[i6 + (i3 << 2) >> 2];
  HEAP32[i7 + (i2 + 5 << 2) >> 2] = HEAP32[i6 + (i3 + 5 << 2) >> 2];
  HEAP32[i7 + (i2 + 10 << 2) >> 2] = HEAP32[i6 + (i3 + 10 << 2) >> 2];
  HEAP32[i7 + (i2 + 15 << 2) >> 2] = HEAP32[i6 + (i3 + 15 << 2) >> 2];
  HEAP32[i7 + (i2 + 20 << 2) >> 2] = HEAP32[i6 + (i3 + 20 << 2) >> 2];
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == 5) break; else i2 = i2 + -1 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i6 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
 HEAP32[i6 + 32 >> 2] = HEAP32[i7 + 32 >> 2];
 HEAP32[i6 + 36 >> 2] = HEAP32[i7 + 36 >> 2];
 HEAP32[i6 + 40 >> 2] = HEAP32[i7 + 40 >> 2];
 HEAP32[i6 + 44 >> 2] = HEAP32[i7 + 44 >> 2];
 HEAP32[i6 + 48 >> 2] = HEAP32[i7 + 48 >> 2];
 HEAP32[i6 + 52 >> 2] = HEAP32[i7 + 52 >> 2];
 HEAP32[i6 + 56 >> 2] = HEAP32[i7 + 56 >> 2];
 HEAP32[i6 + 60 >> 2] = HEAP32[i7 + 60 >> 2];
 HEAP32[i6 + 64 >> 2] = HEAP32[i7 + 64 >> 2];
 HEAP32[i6 + 68 >> 2] = HEAP32[i7 + 68 >> 2];
 HEAP32[i6 + 72 >> 2] = HEAP32[i7 + 72 >> 2];
 HEAP32[i6 + 76 >> 2] = HEAP32[i7 + 76 >> 2];
 HEAP32[i6 + 80 >> 2] = HEAP32[i7 + 80 >> 2];
 HEAP32[i6 + 84 >> 2] = HEAP32[i7 + 84 >> 2];
 HEAP32[i6 + 88 >> 2] = HEAP32[i7 + 88 >> 2];
 HEAP32[i6 + 92 >> 2] = HEAP32[i7 + 92 >> 2];
 HEAP32[i6 + 96 >> 2] = HEAP32[i7 + 96 >> 2];
 HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
 HEAP32[i6 + 104 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i8;
 return;
}

function _wcsrtombs(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 L1 : do if (!i3) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = 0;
   do {
    if (i2 >>> 0 > 127) {
     i2 = _wcrtomb(i7, i2, 0) | 0;
     if ((i2 | 0) == -1) {
      i1 = -1;
      break L1;
     }
    } else i2 = 1;
    i1 = i2 + i1 | 0;
    i3 = i3 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) != 0);
  }
 } else {
  L9 : do if (i1 >>> 0 > 3) {
   i2 = i1;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) break;
     i5 = _wcrtomb(i3, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (i2 >>> 0 <= 3) break L9;
   }
   HEAP8[i3 >> 0] = 0;
   HEAP32[i6 >> 2] = 0;
   i1 = i1 - i2 | 0;
   break L1;
  } else i2 = i1; while (0);
  if (i2) {
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) {
      i4 = 19;
      break;
     }
     i5 = _wcrtomb(i7, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = 22;
      break;
     }
     _wcrtomb(i3, HEAP32[i4 >> 2] | 0, 0) | 0;
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (!i2) break L1;
   }
   if ((i4 | 0) == 19) {
    HEAP8[i3 >> 0] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = i1 - i2 | 0;
    break;
   } else if ((i4 | 0) == 22) {
    i1 = i1 - i2 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZN4MeshD2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 108 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  i7 = i8 + 112 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   i3 = i2;
   while (1) {
    i2 = i3 + -20 | 0;
    HEAP32[i7 >> 2] = i2;
    i5 = HEAP32[i2 >> 2] | 0;
    i4 = i5;
    if (i5) {
     i2 = i3 + -16 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) != (i5 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -2 - i4 | 0) >>> 1) << 1);
     __ZdlPv(i5);
     i2 = HEAP32[i7 >> 2] | 0;
    }
    if ((i2 | 0) == (i1 | 0)) break; else i3 = i2;
   }
   i1 = HEAP32[i6 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 68 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 72 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -2 - i2 | 0) >>> 1) << 1);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 56 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 60 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 44 >> 2] | 0;
 if (i1) {
  i2 = i8 + 48 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((0 - i1 + (i3 + -4) | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 32 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 36 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -16 - i2 | 0) >>> 4) << 4);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 20 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 24 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 8 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 12 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if (!i1) return;
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI7PicDispEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i13, i10) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 i14 = i13 + 4 | 0;
 i11 = HEAP32[i13 >> 2] | 0;
 i2 = ((HEAP32[i14 >> 2] | 0) - i11 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i13);
 i15 = i13 + 8 | 0;
 i4 = i11;
 i1 = (HEAP32[i15 >> 2] | 0) - i4 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i3 = i1 >> 2;
  i2 = i3 >>> 0 < i2 >>> 0 ? i2 : i3;
  i3 = HEAP32[i14 >> 2] | 0;
  i1 = i3;
  i4 = i1 - i4 >> 3;
  if (!i2) {
   i5 = 0;
   i9 = 0;
   i6 = i4;
  } else i7 = 6;
 } else {
  i3 = HEAP32[i14 >> 2] | 0;
  i1 = i3;
  i2 = 536870911;
  i4 = i1 - i4 >> 3;
  i7 = 6;
 }
 if ((i7 | 0) == 6) {
  i5 = i2;
  i9 = __Znwj(i2 << 3) | 0;
  i6 = i4;
 }
 i2 = i9 + (i6 << 3) | 0;
 i8 = i2;
 i12 = i9 + (i5 << 3) | 0;
 HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
 i4 = HEAP32[i10 + 4 >> 2] | 0;
 HEAP32[i9 + (i6 << 3) + 4 >> 2] = i4;
 if (!i4) i4 = i11; else {
  __ZNSt3__119__shared_weak_count12__add_sharedEv(i4);
  i1 = HEAP32[i14 >> 2] | 0;
  i3 = i1;
  i4 = HEAP32[i13 >> 2] | 0;
 }
 i7 = i9 + (i6 + 1 << 3) | 0;
 if ((i3 | 0) == (i4 | 0)) {
  i4 = i13;
  i5 = i14;
  i2 = i8;
  i6 = i3;
 } else {
  i1 = i8;
  do {
   i11 = i3;
   i3 = i3 + -8 | 0;
   HEAP32[i2 + -8 >> 2] = HEAP32[i3 >> 2];
   i11 = i11 + -4 | 0;
   HEAP32[i2 + -4 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i3 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   i2 = i1 + -8 | 0;
   i1 = i2;
  } while ((i3 | 0) != (i4 | 0));
  i4 = i13;
  i5 = i14;
  i2 = i1;
  i6 = HEAP32[i13 >> 2] | 0;
  i1 = HEAP32[i14 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i7;
 HEAP32[i15 >> 2] = i12;
 i3 = i6;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function ___stdio_write(i14, i2, i1) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i15 + 16 | 0;
 i10 = i15;
 i3 = i15 + 32 | 0;
 i12 = i14 + 28 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 i13 = i14 + 20 | 0;
 i4 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = i2;
 HEAP32[i3 + 12 >> 2] = i1;
 i8 = i14 + 60 | 0;
 i9 = i14 + 44 | 0;
 i2 = 2;
 i4 = i4 + i1 | 0;
 while (1) {
  if (!(HEAP32[2259] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i11 + 4 >> 2] = i3;
   HEAP32[i11 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i11 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(162, i14 | 0);
   HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i10 + 4 >> 2] = i3;
   HEAP32[i10 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
  }
  if ((i4 | 0) == (i6 | 0)) {
   i4 = 6;
   break;
  }
  if ((i6 | 0) < 0) {
   i4 = 8;
   break;
  }
  i4 = i4 - i6 | 0;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if (i6 >>> 0 <= i5 >>> 0) if ((i2 | 0) == 2) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i6;
   i7 = i5;
   i2 = 2;
  } else i7 = i5; else {
   i7 = HEAP32[i9 >> 2] | 0;
   HEAP32[i12 >> 2] = i7;
   HEAP32[i13 >> 2] = i7;
   i7 = HEAP32[i3 + 12 >> 2] | 0;
   i6 = i6 - i5 | 0;
   i3 = i3 + 8 | 0;
   i2 = i2 + -1 | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i6;
  HEAP32[i3 + 4 >> 2] = i7 - i6;
 }
 if ((i4 | 0) == 6) {
  i11 = HEAP32[i9 >> 2] | 0;
  HEAP32[i14 + 16 >> 2] = i11 + (HEAP32[i14 + 48 >> 2] | 0);
  i14 = i11;
  HEAP32[i12 >> 2] = i14;
  HEAP32[i13 >> 2] = i14;
 } else if ((i4 | 0) == 8) {
  HEAP32[i14 + 16 >> 2] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i3 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0) + 1 | 0;
 if (i3 >>> 0 > 357913941) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 12 | 0;
 if (i2 >>> 0 < 178956970) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 357913941;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 12 | 0) | 0;
 }
 i3 = i5 + (i1 * 12 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i7 = i5 + ((i1 + 1 | 0) * 12 | 0) | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i4 = i9;
  i5 = i10;
  i3 = i6;
 } else {
  do {
   i5 = i3 + -12 | 0;
   i1 = i1 + -12 | 0;
   HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i3 = i2 + -12 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i6 | 0));
  i1 = i2;
  i4 = i9;
  i5 = i10;
  i2 = i1;
  i3 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i7;
 HEAP32[i11 >> 2] = i8;
 i2 = i3;
 if ((i1 | 0) != (i2 | 0)) do {
  i1 = i1 + -12 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 } while ((i1 | 0) != (i2 | 0));
 if (!i3) return;
 __ZdlPv(i3);
 return;
}

function __ZN8tinyxml28MemPoolTILi48EE5AllocEv(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 56 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i1 = __Znwj(1008) | 0;
  _memset(i1 | 0, 0, 1008) | 0;
  i7 = i10 + 4 | 0;
  i8 = i10 + 52 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = i3 + 1 | 0;
  i6 = i10 + 48 | 0;
  if ((HEAP32[i6 >> 2] | 0) < (i2 | 0)) {
   i5 = i2 << 1;
   i2 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   _memcpy(i2 | 0, i4 | 0, i3 << 2 | 0) | 0;
   if (!((i4 | 0) == 0 | (i4 | 0) == (i10 + 8 | 0))) {
    __ZdaPv(i4);
    i3 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i5;
  } else i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = i3 + 1;
  HEAP32[i2 + (i3 << 2) >> 2] = i1;
  HEAP32[i1 >> 2] = i1 + 48;
  HEAP32[i1 + 48 >> 2] = i1 + 96;
  HEAP32[i1 + 96 >> 2] = i1 + 144;
  HEAP32[i1 + 144 >> 2] = i1 + 192;
  HEAP32[i1 + 192 >> 2] = i1 + 240;
  HEAP32[i1 + 240 >> 2] = i1 + 288;
  HEAP32[i1 + 288 >> 2] = i1 + 336;
  HEAP32[i1 + 336 >> 2] = i1 + 384;
  HEAP32[i1 + 384 >> 2] = i1 + 432;
  HEAP32[i1 + 432 >> 2] = i1 + 480;
  HEAP32[i1 + 480 >> 2] = i1 + 528;
  HEAP32[i1 + 528 >> 2] = i1 + 576;
  HEAP32[i1 + 576 >> 2] = i1 + 624;
  HEAP32[i1 + 624 >> 2] = i1 + 672;
  HEAP32[i1 + 672 >> 2] = i1 + 720;
  HEAP32[i1 + 720 >> 2] = i1 + 768;
  HEAP32[i1 + 768 >> 2] = i1 + 816;
  HEAP32[i1 + 816 >> 2] = i1 + 864;
  HEAP32[i1 + 864 >> 2] = i1 + 912;
  HEAP32[i1 + 912 >> 2] = i1 + 960;
  HEAP32[i1 + 960 >> 2] = 0;
  HEAP32[i9 >> 2] = i1;
 }
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 i3 = i10 + 60 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i2 = i9 + 1 | 0;
 HEAP32[i3 >> 2] = i2;
 i3 = i10 + 68 | 0;
 if ((i9 | 0) < (HEAP32[i3 >> 2] | 0)) {
  i10 = i10 + 64 | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  i9 = i9 + 1 | 0;
  HEAP32[i10 >> 2] = i9;
  return i1 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 i10 = i10 + 64 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i9 = i9 + 1 | 0;
 HEAP32[i10 >> 2] = i9;
 return i1 | 0;
}

function __ZN11CubeDocBase13transferShapeEv(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i15 + 32 | 0;
 i4 = i15 + 12 | 0;
 i13 = i15;
 i9 = HEAP32[i14 + 108 >> 2] | 0;
 i10 = (i9 | 0) == 0;
 if (!i10) __ZNSt3__119__shared_weak_count12__add_sharedEv(i9);
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 i11 = i13 + 4 | 0;
 HEAP32[i13 >> 2] = i11;
 i12 = i14 + 104 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[i1 + 24 >> 2] | 0) > 0) {
  i5 = i4 + 4 | 0;
  i6 = i4 + 8 | 0;
  i7 = i4 + 12 | 0;
  i8 = i4 + 16 | 0;
  i2 = 0;
  do {
   i20 = HEAP32[i1 + 44 >> 2] | 0;
   i19 = (HEAP32[i20 + (i2 * 188 | 0) + 8 >> 2] | 0) + (HEAP32[i1 + 76 >> 2] | 0) | 0;
   i18 = (HEAP32[i20 + (i2 * 188 | 0) + 12 >> 2] | 0) + (HEAP32[i1 + 60 >> 2] | 0) | 0;
   i17 = HEAP32[i20 + (i2 * 188 | 0) >> 2] | 0;
   i16 = HEAP32[i20 + (i2 * 188 | 0) + 16 >> 2] | 0;
   HEAP32[i4 >> 2] = (HEAP32[i20 + (i2 * 188 | 0) + 4 >> 2] | 0) + (HEAP32[i1 + 68 >> 2] | 0);
   HEAP32[i5 >> 2] = i19;
   HEAP32[i6 >> 2] = i18;
   HEAP32[i7 >> 2] = i17;
   HEAP32[i8 >> 2] = i16;
   __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE15__insert_uniqueIS5_EENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEEOT_(i3, i13, i4);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i1 + 24 >> 2] | 0));
 }
 if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 63](i14, 0, i13) | 0) __ZN9Solutions10toNewShapeEPK5Shape(HEAP32[i14 + 112 >> 2] | 0, HEAP32[i12 >> 2] | 0);
 __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i13, HEAP32[i11 >> 2] | 0);
 if (i10) {
  STACKTOP = i15;
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i9);
 STACKTOP = i15;
 return;
}

function __ZNSt3__16vectorI4Mat4NS_9allocatorIS1_EEE8__appendEj(i10, i2) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i11 = i10 + 8 | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i12 = i10 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = i1;
 if (i4 - i3 >> 6 >>> 0 >= i2 >>> 0) {
  do {
   i7 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) < (i7 | 0));
   i1 = (HEAP32[i12 >> 2] | 0) + 64 | 0;
   HEAP32[i12 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 i3 = (i3 - i1 >> 6) + i2 | 0;
 if (i3 >>> 0 > 67108863) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i10);
 i5 = i1;
 i1 = i4 - i5 | 0;
 if (i1 >> 6 >>> 0 < 33554431) {
  i1 = i1 >> 5;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i3 = (HEAP32[i12 >> 2] | 0) - i5 >> 6;
  if (!i1) {
   i6 = 0;
   i5 = 0;
   i1 = i3;
  } else i7 = 8;
 } else {
  i1 = 67108863;
  i3 = (HEAP32[i12 >> 2] | 0) - i5 >> 6;
  i7 = 8;
 }
 if ((i7 | 0) == 8) {
  i6 = i1;
  i5 = __Znwj(i1 << 6) | 0;
  i1 = i3;
 }
 i4 = i5 + (i1 << 6) | 0;
 i9 = i4;
 i5 = i5 + (i6 << 6) | 0;
 i1 = i4;
 i3 = i9;
 do {
  i7 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i7 | 0));
  i1 = i3 + 64 | 0;
  i3 = i1;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i8 = i5;
 i2 = HEAP32[i10 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i4 = i10;
  i1 = i9;
 } else {
  i6 = i1;
  i5 = i9;
  while (1) {
   i6 = i6 + -64 | 0;
   i1 = i4 + -64 | 0;
   i4 = i6;
   i7 = i1 + 64 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i1 = i1 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i1 | 0) < (i7 | 0));
   i4 = i5 + -64 | 0;
   i1 = i4;
   if ((i6 | 0) == (i2 | 0)) break; else i5 = i1;
  }
  i4 = i10;
  i2 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i11 >> 2] = i8;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc(i7, i10) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0;
 i9 = i7 + 48 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 L1 : do if (i1) {
  while (1) {
   i2 = __ZN8tinyxml27StrPair6GetStrEv(i1 + 4 | 0) | 0;
   if ((i2 | 0) == (i10 | 0)) {
    i8 = 14;
    break;
   }
   i3 = HEAP8[i2 >> 0] | 0;
   if (i3 << 24 >> 24) {
    i4 = i10;
    i5 = 0;
    while (1) {
     i11 = HEAP8[i4 >> 0] | 0;
     if (!((i5 | 0) != 2147483647 & (i11 << 24 >> 24 != 0 ? i3 << 24 >> 24 == i11 << 24 >> 24 : 0))) {
      i2 = i5;
      break;
     }
     i2 = i2 + 1 | 0;
     i4 = i4 + 1 | 0;
     i5 = i5 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) {
      i3 = 0;
      i2 = i5;
      break;
     }
    }
    if ((i2 | 0) == 2147483647) {
     i8 = 14;
     break;
    }
    if (!(i3 << 24 >> 24)) {
     i6 = i4;
     i8 = 8;
    }
   } else {
    i6 = i10;
    i8 = 8;
   }
   if ((i8 | 0) == 8 ? (i8 = 0, (HEAP8[i6 >> 0] | 0) == 0) : 0) {
    i8 = 14;
    break;
   }
   i2 = HEAP32[i1 + 28 >> 2] | 0;
   if (!i2) break L1; else i1 = i2;
  }
  if ((i8 | 0) == 14) return i1 | 0;
 } else i1 = 0; while (0);
 i11 = i7 + 4 | 0;
 i2 = __ZN8tinyxml28MemPoolTILi36EE5AllocEv((HEAP32[i11 >> 2] | 0) + 140 | 0) | 0;
 HEAP32[i2 >> 2] = 8784;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = (HEAP32[i11 >> 2] | 0) + 140;
 if (!i1) HEAP32[i9 >> 2] = i2; else HEAP32[i1 + 28 >> 2] = i2;
 i6 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i11 = i2 + 12 | 0;
 HEAP32[i11 >> 2] = 0;
 i9 = _strlen(i10) | 0;
 i7 = i9 + 1 | 0;
 i8 = __Znaj(i7) | 0;
 HEAP32[i6 >> 2] = i8;
 _memcpy(i8 | 0, i10 | 0, i7 | 0) | 0;
 HEAP32[i11 >> 2] = i8 + i9;
 HEAP32[i3 >> 2] = 512;
 i11 = i2;
 return i11 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i6, i10, i5, i4, i7) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i11 + 20 | 0;
 i2 = i11 + 16 | 0;
 i3 = i11 + 12 | 0;
 i9 = i11;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i9 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i9 & 31](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 16284) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i9, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i9, i1);
  i5 = HEAP8[i9 >> 0] | 0;
  i8 = (i5 & 1) == 0;
  i1 = i9 + 1 | 0;
  i7 = i9 + 8 | 0;
  i6 = i8 ? i1 : i9 + 1 | 0;
  i1 = i8 ? i1 : HEAP32[i9 + 8 >> 2] | 0;
  i8 = i9 + 4 | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0)) do {
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = HEAP32[i10 >> 2] | 0;
   do if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) != (HEAP32[i3 + 28 >> 2] | 0)) {
     HEAP32[i4 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i2;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 63](i3, i2 & 255) | 0) == -1) HEAP32[i10 >> 2] = 0;
   } while (0);
   i1 = i1 + 1 | 0;
   i5 = HEAP8[i9 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0));
  i1 = HEAP32[i10 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNK8tinyxml210XMLElement9AttributeEPKcS2_(i2, i9, i1) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i2 = HEAP32[i2 + 48 >> 2] | 0;
 if (!i2) {
  i10 = 0;
  return i10 | 0;
 }
 while (1) {
  i3 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 4 | 0) | 0;
  if ((i3 | 0) == (i9 | 0)) break;
  i5 = HEAP8[i3 >> 0] | 0;
  if (i5 << 24 >> 24) {
   i6 = i9;
   i7 = 0;
   while (1) {
    i11 = HEAP8[i6 >> 0] | 0;
    if (!((i7 | 0) != 2147483647 & (i11 << 24 >> 24 != 0 ? i5 << 24 >> 24 == i11 << 24 >> 24 : 0))) {
     i3 = i7;
     break;
    }
    i3 = i3 + 1 | 0;
    i6 = i6 + 1 | 0;
    i7 = i7 + 1 | 0;
    i5 = HEAP8[i3 >> 0] | 0;
    if (!(i5 << 24 >> 24)) {
     i5 = 0;
     i3 = i7;
     break;
    }
   }
   if ((i3 | 0) == 2147483647) {
    i10 = 10;
    break;
   }
   if (!(i5 << 24 >> 24)) {
    i8 = i6;
    i10 = 8;
   }
  } else {
   i8 = i9;
   i10 = 8;
  }
  if ((i10 | 0) == 8 ? (i10 = 0, (HEAP8[i8 >> 0] | 0) == 0) : 0) {
   i10 = 10;
   break;
  }
  i2 = HEAP32[i2 + 28 >> 2] | 0;
  if (!i2) {
   i1 = 0;
   i10 = 20;
   break;
  }
 }
 if ((i10 | 0) == 20) return i1 | 0;
 if ((i10 | 0) == 10) if (!i2) {
  i11 = 0;
  return i11 | 0;
 }
 i5 = i2 + 16 | 0;
 do if ((i1 | 0) != 0 ? (i4 = __ZN8tinyxml27StrPair6GetStrEv(i5) | 0, (i4 | 0) != (i1 | 0)) : 0) {
  i2 = HEAP8[i4 >> 0] | 0;
  if (i2 << 24 >> 24) {
   i3 = i2;
   i2 = 0;
   while (1) {
    i11 = HEAP8[i1 >> 0] | 0;
    if (!((i2 | 0) != 2147483647 & (i11 << 24 >> 24 != 0 ? i3 << 24 >> 24 == i11 << 24 >> 24 : 0))) break;
    i4 = i4 + 1 | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    i3 = HEAP8[i4 >> 0] | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = 0;
     break;
    }
   }
   if ((i2 | 0) == 2147483647) break;
   if (i3 << 24 >> 24) {
    i11 = 0;
    return i11 | 0;
   }
  }
  if (HEAP8[i1 >> 0] | 0) {
   i11 = 0;
   return i11 | 0;
  }
 } while (0);
 i11 = __ZN8tinyxml27StrPair6GetStrEv(i5) | 0;
 return i11 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i6, i9, i5, i4, i7) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i10 + 20 | 0;
 i2 = i10 + 16 | 0;
 i3 = i10 + 12 | 0;
 i8 = i10;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i8 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i8 & 31](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 16292) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i8, i1);
  i5 = HEAP8[i8 >> 0] | 0;
  i4 = (i5 & 1) == 0;
  i1 = i8 + 4 | 0;
  i7 = i8 + 8 | 0;
  i6 = i4 ? i1 : i8 + 4 | 0;
  i1 = i4 ? i1 : HEAP32[i8 + 8 >> 2] | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0)) do {
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 63](i3, i2) | 0; else {
     HEAP32[i4 >> 2] = i5 + 4;
     HEAP32[i5 >> 2] = i2;
    }
    if ((i2 | 0) == -1) HEAP32[i9 >> 2] = 0;
   }
   i1 = i1 + 4 | 0;
   i5 = HEAP8[i8 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0));
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZN5Shape15faceNeiFirstOptEiPNS_9TransTypeE(i1, i18, i17) {
 i1 = i1 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i19;
 i10 = i1 + 68 | 0;
 i11 = i1 + 76 | 0;
 i12 = i1 + 60 | 0;
 i13 = i9 + 4 | 0;
 i14 = i9 + 8 | 0;
 i15 = i9 + 12 | 0;
 i16 = i9 + 16 | 0;
 i8 = HEAP32[i1 + 44 >> 2] | 0;
 i4 = HEAP32[i1 + 148 >> 2] | 0;
 i5 = (i4 | 0) == 0;
 i6 = i4 + 4 | 0;
 i7 = 0;
 i1 = -1;
 i3 = 0;
 while (1) {
  i2 = HEAP32[i8 + (i18 * 188 | 0) + 60 + (i7 << 2) >> 2] | 0;
  if (!i5 ? (i23 = (HEAP32[i8 + (i2 * 188 | 0) + 8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, i22 = (HEAP32[i8 + (i2 * 188 | 0) + 12 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, i21 = HEAP32[i8 + (i2 * 188 | 0) >> 2] | 0, i20 = HEAP32[i8 + (i2 * 188 | 0) + 16 >> 2] | 0, HEAP32[i9 >> 2] = (HEAP32[i8 + (i2 * 188 | 0) + 4 >> 2] | 0) + (HEAP32[i10 >> 2] | 0), HEAP32[i13 >> 2] = i23, HEAP32[i14 >> 2] = i22, HEAP32[i15 >> 2] = i21, HEAP32[i16 >> 2] = i20, (__ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE4findIS5_EENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEERKT_(i4, i9) | 0) == (i6 | 0)) : 0) i2 = i3; else if ((HEAP32[i17 + (i2 << 3) >> 2] | 0) == -1) {
   i23 = ((HEAP32[i17 + (HEAP32[i8 + (i2 * 188 | 0) + 72 >> 2] << 3) >> 2] | 0) != -1 & 1) + (((HEAP32[i17 + (HEAP32[i8 + (i2 * 188 | 0) + 68 >> 2] << 3) >> 2] | 0) != -1 & 1) + (((HEAP32[i17 + (HEAP32[i8 + (i2 * 188 | 0) + 64 >> 2] << 3) >> 2] | 0) != -1 & 1) + ((HEAP32[i17 + (HEAP32[i8 + (i2 * 188 | 0) + 60 >> 2] << 3) >> 2] | 0) != -1 & 1))) | 0;
   i22 = (i23 | 0) > (i3 | 0);
   i1 = i22 ? i2 : i1;
   i2 = i22 ? i23 : i3;
  } else i2 = i3;
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == 4) break; else i3 = i2;
 }
 STACKTOP = i19;
 return i1 | 0;
}

function __ZN8tinyxml28MemPoolTILi52EE5AllocEv(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 56 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i1 = __Znwj(988) | 0;
  _memset(i1 | 0, 0, 988) | 0;
  i7 = i10 + 4 | 0;
  i8 = i10 + 52 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = i3 + 1 | 0;
  i6 = i10 + 48 | 0;
  if ((HEAP32[i6 >> 2] | 0) < (i2 | 0)) {
   i5 = i2 << 1;
   i2 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   _memcpy(i2 | 0, i4 | 0, i3 << 2 | 0) | 0;
   if (!((i4 | 0) == 0 | (i4 | 0) == (i10 + 8 | 0))) {
    __ZdaPv(i4);
    i3 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i5;
  } else i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = i3 + 1;
  HEAP32[i2 + (i3 << 2) >> 2] = i1;
  HEAP32[i1 >> 2] = i1 + 52;
  HEAP32[i1 + 52 >> 2] = i1 + 104;
  HEAP32[i1 + 104 >> 2] = i1 + 156;
  HEAP32[i1 + 156 >> 2] = i1 + 208;
  HEAP32[i1 + 208 >> 2] = i1 + 260;
  HEAP32[i1 + 260 >> 2] = i1 + 312;
  HEAP32[i1 + 312 >> 2] = i1 + 364;
  HEAP32[i1 + 364 >> 2] = i1 + 416;
  HEAP32[i1 + 416 >> 2] = i1 + 468;
  HEAP32[i1 + 468 >> 2] = i1 + 520;
  HEAP32[i1 + 520 >> 2] = i1 + 572;
  HEAP32[i1 + 572 >> 2] = i1 + 624;
  HEAP32[i1 + 624 >> 2] = i1 + 676;
  HEAP32[i1 + 676 >> 2] = i1 + 728;
  HEAP32[i1 + 728 >> 2] = i1 + 780;
  HEAP32[i1 + 780 >> 2] = i1 + 832;
  HEAP32[i1 + 832 >> 2] = i1 + 884;
  HEAP32[i1 + 884 >> 2] = i1 + 936;
  HEAP32[i1 + 936 >> 2] = 0;
  HEAP32[i9 >> 2] = i1;
 }
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 i3 = i10 + 60 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i2 = i9 + 1 | 0;
 HEAP32[i3 >> 2] = i2;
 i3 = i10 + 68 | 0;
 if ((i9 | 0) < (HEAP32[i3 >> 2] | 0)) {
  i10 = i10 + 64 | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  i9 = i9 + 1 | 0;
  HEAP32[i10 >> 2] = i9;
  return i1 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 i10 = i10 + 64 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i9 = i9 + 1 | 0;
 HEAP32[i10 >> 2] = i9;
 return i1 | 0;
}

function ___cxx_global_array_dtor112(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19260);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19248);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19236);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19212);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19200);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19188);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19176);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19164);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19152);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19140);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19128);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19116);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19104);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19092);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19080);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19068);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19044);
 return;
}

function ___cxx_global_array_dtor109(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(19028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(19016);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(19004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18980);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18968);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18956);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18944);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18932);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18920);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18908);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18896);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18884);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18872);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18860);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18848);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18836);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18824);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18812);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18800);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18788);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18776);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18764);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18752);
 return;
}

function ___cxx_global_array_dtor61(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17924);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17912);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17900);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17888);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17876);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17864);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17852);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17840);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17828);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17816);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17804);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17792);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17780);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17768);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17756);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17744);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17732);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17720);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17708);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17696);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17684);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17672);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17660);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17648);
 return;
}

function ___cxx_global_array_dtor85(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18216);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18204);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18192);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18180);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18168);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18156);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18144);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18132);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18108);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18096);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18084);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18072);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18060);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18048);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18036);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18024);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18012);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(18e3);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17988);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17976);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17964);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17952);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17940);
 return;
}

function __ZN4Mat46rotateEffff(i16, d1, d3, d4, d11) {
 i16 = i16 | 0;
 d1 = +d1;
 d3 = +d3;
 d4 = +d4;
 d11 = +d11;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i14 = i17 + 64 | 0;
 i15 = i17;
 i12 = i15;
 i2 = i16;
 i13 = i12 + 64 | 0;
 do {
  HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
  i12 = i12 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i12 | 0) < (i13 | 0));
 d5 = d1 / 180.0 * 3.141592653589793;
 d18 = +Math_cos(+d5);
 d5 = +Math_sin(+d5);
 d1 = 1.0 - d18;
 d6 = d18 + d3 * d3 * d1;
 d10 = d3 * d4 * d1;
 d9 = d5 * d11;
 d7 = d10 - d9;
 d21 = d3 * d11 * d1;
 d20 = d5 * d4;
 d8 = d21 + d20;
 d9 = d10 + d9;
 d10 = d18 + d4 * d4 * d1;
 d19 = d4 * d11 * d1;
 d5 = d5 * d3;
 d3 = d19 - d5;
 d4 = d21 - d20;
 d5 = d19 + d5;
 d1 = d18 + d11 * d11 * d1;
 i12 = i14;
 i13 = i12 + 64 | 0;
 do {
  HEAP32[i12 >> 2] = 0;
  i12 = i12 + 4 | 0;
 } while ((i12 | 0) < (i13 | 0));
 i2 = 0;
 do {
  d19 = +HEAPF32[i15 + (i2 << 2) >> 2];
  i22 = i2 + 4 | 0;
  d20 = +HEAPF32[i15 + (i22 << 2) >> 2];
  i12 = i2 + 8 | 0;
  d21 = +HEAPF32[i15 + (i12 << 2) >> 2];
  i13 = i2 + 12 | 0;
  d18 = +HEAPF32[i15 + (i13 << 2) >> 2];
  d11 = d18 * 0.0;
  HEAPF32[i14 + (i2 << 2) >> 2] = d6 * d19 + 0.0 + d9 * d20 + d4 * d21 + d11;
  HEAPF32[i14 + (i22 << 2) >> 2] = d7 * d19 + 0.0 + d10 * d20 + d5 * d21 + d11;
  HEAPF32[i14 + (i12 << 2) >> 2] = d8 * d19 + 0.0 + d3 * d20 + d1 * d21 + d11;
  HEAPF32[i14 + (i13 << 2) >> 2] = d18 + (d19 * 0.0 + 0.0 + d20 * 0.0 + d21 * 0.0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 4);
 if ((i14 | 0) == (i16 | 0)) {
  STACKTOP = i17;
  return;
 }
 i12 = i16;
 i2 = i14;
 i13 = i12 + 64 | 0;
 do {
  HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
  i12 = i12 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i12 | 0) < (i13 | 0));
 STACKTOP = i17;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4672] | 0) == 0 ? (___cxa_guard_acquire(4672) | 0) != 0 : 0) {
  if ((HEAP8[4680] | 0) == 0 ? (___cxa_guard_acquire(4680) | 0) != 0 : 0) {
   i1 = 17136;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 17304);
   ___cxa_atexit(168, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4680);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17136, 17304) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17148, 17332) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17160, 17360) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17172, 17392) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17184, 17432) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17196, 17468) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17208, 17496) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17220, 17532) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17232, 17548) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17244, 17564) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17256, 17580) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17268, 17596) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17280, 17612) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17292, 17628) | 0;
  HEAP32[4411] = 17136;
  ___cxa_guard_release(4672);
 }
 return HEAP32[4411] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4656] | 0) == 0 ? (___cxa_guard_acquire(4656) | 0) != 0 : 0) {
  if ((HEAP8[4664] | 0) == 0 ? (___cxa_guard_acquire(4664) | 0) != 0 : 0) {
   i1 = 16964;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 17132);
   ___cxa_atexit(167, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4664);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16964, 36915) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16976, 36922) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16988, 36929) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17e3, 36937) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17012, 36947) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17024, 36956) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17036, 36963) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17048, 36972) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17060, 36976) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17072, 36980) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17084, 36984) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17096, 36988) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17108, 36992) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17120, 36996) | 0;
  HEAP32[4283] = 16964;
  ___cxa_guard_release(4656);
 }
 return HEAP32[4283] | 0;
}

function __ZN4Cube5clearEi(i7, i12) {
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i7 + 76 >> 2] | 0;
 i3 = HEAP32[i7 + 72 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i1 = i1 - i3 >> 3;
  i2 = 0;
  do {
   HEAP32[i3 + (i2 << 3) >> 2] = 0;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i1 >>> 0);
 }
 i6 = i7 + 36 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i1 + 24 >> 2] | 0) > 0) {
  i4 = i7 + 60 | 0;
  i5 = 0;
  do {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 + (i5 * 52 | 0) >> 2] = -1;
   HEAP32[i1 + (i5 * 52 | 0) + 4 >> 2] = 0;
   HEAP32[i1 + (i5 * 52 | 0) + 8 >> 2] = 0;
   if (HEAP32[i1 + (i5 * 52 | 0) + 16 >> 2] | 0) _memset(HEAP32[i1 + (i5 * 52 | 0) + 20 >> 2] | 0, 0, HEAP32[i1 + (i5 * 52 | 0) + 12 >> 2] << 2 | 0) | 0;
   i3 = HEAP32[i1 + (i5 * 52 | 0) + 40 >> 2] | 0;
   i1 = i1 + (i5 * 52 | 0) + 44 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -8 - i3 | 0) >>> 3) << 3);
   i5 = i5 + 1 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
  } while ((i5 | 0) < (HEAP32[i1 + 24 >> 2] | 0));
 }
 i9 = i1 + 12 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i2 | 0) <= 0) return;
 i10 = i7 + 40 | 0;
 i11 = i7 + 52 | 0;
 i8 = i7 + 56 | 0;
 i7 = i1 + 16 | 0;
 i6 = i1 + 20 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i5 = 0;
 do {
  if ((i1 | 0) > 0) {
   i2 = HEAP32[i6 >> 2] | 0;
   i4 = 0;
   do {
    if ((i2 | 0) > 0) {
     i1 = HEAP32[i8 >> 2] | 0;
     i3 = 0;
     do {
      i2 = (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + i5 | 0;
      HEAP32[i1 + (i2 + (Math_imul(HEAP32[i11 >> 2] | 0, i3) | 0) << 2) >> 2] = i12;
      i3 = i3 + 1 | 0;
      i2 = HEAP32[i6 >> 2] | 0;
     } while ((i3 | 0) < (i2 | 0));
     i1 = HEAP32[i7 >> 2] | 0;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i1 | 0));
   i2 = HEAP32[i9 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i2 | 0));
 return;
}

function __ZN8tinyxml27XMLNodeD2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 >> 2] = 6352;
 i7 = i8 + 24 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (!i2) i1 = i8 + 28 | 0; else {
  i1 = i8 + 28 | 0;
  do {
   i6 = i2 + 36 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   HEAP32[i7 >> 2] = i3;
   i4 = i2 + 32 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
    i5 = HEAP32[i4 >> 2] | 0;
    HEAP32[i1 >> 2] = i5;
    i4 = i5;
   } else {
    i5 = HEAP32[i4 >> 2] | 0;
    i4 = i5;
   }
   if (i4) {
    HEAP32[i4 + 36 >> 2] = i3;
    i3 = HEAP32[i6 >> 2] | 0;
   }
   if (i3) HEAP32[i3 + 32 >> 2] = i5;
   HEAP32[i2 + 8 >> 2] = 0;
   i6 = HEAP32[i2 + 40 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 255](i2);
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 63](i6, i2);
   i2 = HEAP32[i7 >> 2] | 0;
  } while ((i2 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i4 = i8 + 8 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i2 = i1 + 24 | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i8 | 0)) HEAP32[i2 >> 2] = HEAP32[i8 + 36 >> 2];
  i1 = i1 + 28 | 0;
  i2 = i8 + 32 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i8 | 0)) {
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i1 >> 2] = i3;
   i2 = i3;
  } else {
   i3 = HEAP32[i2 >> 2] | 0;
   i2 = i3;
  }
  i1 = i8 + 36 | 0;
  if (i2) HEAP32[i2 + 36 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) HEAP32[i1 + 32 >> 2] = i3;
  HEAP32[i4 >> 2] = 0;
 }
 i2 = i8 + 12 | 0;
 i1 = i8 + 16 | 0;
 if (!(HEAP32[i2 >> 2] & 512)) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i8 = i8 + 20 | 0;
  HEAP32[i8 >> 2] = 0;
  return;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i8 = i8 + 20 | 0;
  HEAP32[i8 >> 2] = 0;
  return;
 }
 __ZdaPv(i3);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i8 = i8 + 20 | 0;
 HEAP32[i8 >> 2] = 0;
 return;
}

function __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE8__appendEj(i11, i13) {
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i10 = i11 + 8 | 0;
 i4 = HEAP32[i10 >> 2] | 0;
 i12 = i11 + 4 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i1 = i3;
 if (((i4 - i1 | 0) / 20 | 0) >>> 0 >= i13 >>> 0) {
  i1 = i13;
  i2 = i3;
  while (1) {
   HEAP32[i2 >> 2] = -1;
   HEAP32[i2 + 4 >> 2] = -1;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = -1;
   HEAP32[i2 + 16 >> 2] = -1;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 20 | 0;
  }
  HEAP32[i12 >> 2] = i3 + (i13 * 20 | 0);
  return;
 }
 i9 = HEAP32[i11 >> 2] | 0;
 i2 = ((i1 - i9 | 0) / 20 | 0) + i13 | 0;
 if (i2 >>> 0 > 214748364) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i3 = i9;
 i1 = (i4 - i3 | 0) / 20 | 0;
 if (i1 >>> 0 < 107374182) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i12 >> 2] | 0) - i3 | 0;
  i2 = (i3 | 0) / 20 | 0;
  if (!i1) {
   i5 = 0;
   i7 = 0;
   i6 = i2;
   i4 = i3;
  } else i8 = 9;
 } else {
  i3 = (HEAP32[i12 >> 2] | 0) - i3 | 0;
  i1 = 214748364;
  i2 = (i3 | 0) / 20 | 0;
  i8 = 9;
 }
 if ((i8 | 0) == 9) {
  i5 = i1;
  i7 = __Znwj(i1 * 20 | 0) | 0;
  i6 = i2;
  i4 = i3;
 }
 i3 = i7 + (i5 * 20 | 0) | 0;
 i1 = i13;
 i2 = i7 + (i6 * 20 | 0) | 0;
 while (1) {
  HEAP32[i2 >> 2] = -1;
  HEAP32[i2 + 4 >> 2] = -1;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = -1;
  HEAP32[i2 + 16 >> 2] = -1;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i2 = i2 + 20 | 0;
 }
 i8 = i7 + ((((i4 | 0) / -20 | 0) + i6 | 0) * 20 | 0) | 0;
 _memcpy(i8 | 0, i9 | 0, i4 | 0) | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i12 >> 2] = i7 + ((i6 + i13 | 0) * 20 | 0);
 HEAP32[i10 >> 2] = i3;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i9 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i6 = i8 + 4 | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i6;
  i4 = i9;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i5;
 } else {
  i2 = HEAP32[i6 >> 2] | 0;
  do {
   i4 = i1;
   i1 = i1 + -52 | 0;
   i11 = i1;
   i10 = HEAP32[i11 + 4 >> 2] | 0;
   i3 = i2 + -52 | 0;
   HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i3 + 4 >> 2] = i10;
   i3 = i2 + -44 | 0;
   i10 = i4 + -44 | 0;
   HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
   i11 = HEAP32[i4 + -40 >> 2] | 0;
   HEAP32[i2 + -40 >> 2] = i11;
   HEAP32[i2 + -36 >> 2] = HEAP32[i4 + -36 >> 2];
   i12 = __Znaj(i11 >>> 0 > 1073741823 ? -1 : i11 << 2) | 0;
   HEAP32[i2 + -32 >> 2] = i12;
   _memcpy(i12 | 0, HEAP32[i4 + -32 >> 2] | 0, i11 << 5 | 0) | 0;
   HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
   i3 = i2 + -28 | 0;
   i10 = i4 + -28 | 0;
   HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   __ZNSt3__16vectorI7TypeRefNS_9allocatorIS1_EEEC2ERKS4_(i2 + -12 | 0, i4 + -12 | 0);
   i2 = (HEAP32[i6 >> 2] | 0) + -52 | 0;
   HEAP32[i6 >> 2] = i2;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i6;
  i4 = i9;
  i2 = HEAP32[i9 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 i10 = i8 + 8 | 0;
 i12 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = i12;
 i10 = i9 + 8 | 0;
 i12 = i8 + 12 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i12 >> 2] = i11;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 return;
}

function __ZN12BaseGLWidget12transformMatEv(i22, i3) {
 i22 = i22 | 0;
 i3 = i3 | 0;
 var i1 = 0, d2 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i21 = i23;
 i19 = i21;
 i1 = i3 + 28 | 0;
 i20 = i19 + 64 | 0;
 do {
  HEAP32[i19 >> 2] = HEAP32[i1 >> 2];
  i19 = i19 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i19 | 0) < (i20 | 0));
 d14 = +HEAPF32[i3 + 108 >> 2];
 d16 = +HEAPF32[i3 + 112 >> 2];
 d17 = +HEAPF32[i3 + 116 >> 2];
 d18 = +HEAPF32[i3 + 120 >> 2];
 d4 = +HEAPF32[i3 + 124 >> 2];
 d5 = +HEAPF32[i3 + 128 >> 2];
 d6 = +HEAPF32[i3 + 132 >> 2];
 d7 = +HEAPF32[i3 + 136 >> 2];
 d8 = +HEAPF32[i3 + 140 >> 2];
 d9 = +HEAPF32[i3 + 144 >> 2];
 d10 = +HEAPF32[i3 + 148 >> 2];
 d11 = +HEAPF32[i3 + 152 >> 2];
 d12 = +HEAPF32[i3 + 156 >> 2];
 d13 = +HEAPF32[i3 + 160 >> 2];
 d15 = +HEAPF32[i3 + 164 >> 2];
 d2 = +HEAPF32[i3 + 168 >> 2];
 i19 = i22;
 i20 = i19 + 64 | 0;
 do {
  HEAP32[i19 >> 2] = 0;
  i19 = i19 + 4 | 0;
 } while ((i19 | 0) < (i20 | 0));
 i1 = 0;
 do {
  d27 = +HEAPF32[i21 + (i1 << 2) >> 2];
  i3 = i1 + 4 | 0;
  d26 = +HEAPF32[i21 + (i3 << 2) >> 2];
  i19 = i1 + 8 | 0;
  d25 = +HEAPF32[i21 + (i19 << 2) >> 2];
  i20 = i1 + 12 | 0;
  d24 = +HEAPF32[i21 + (i20 << 2) >> 2];
  HEAPF32[i22 + (i1 << 2) >> 2] = d14 * d27 + 0.0 + d16 * d26 + d17 * d25 + d18 * d24;
  HEAPF32[i22 + (i3 << 2) >> 2] = d4 * d27 + 0.0 + d5 * d26 + d6 * d25 + d7 * d24;
  HEAPF32[i22 + (i19 << 2) >> 2] = d8 * d27 + 0.0 + d9 * d26 + d10 * d25 + d11 * d24;
  HEAPF32[i22 + (i20 << 2) >> 2] = d12 * d27 + 0.0 + d13 * d26 + d15 * d25 + d2 * d24;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 STACKTOP = i23;
 return;
}

function _mbsnrtowcs(i2, i12, i3, i1, i9) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i8 = i13 + 8 | 0;
 i11 = i13;
 i7 = HEAP32[i12 >> 2] | 0;
 HEAP32[i11 >> 2] = i7;
 i10 = (i2 | 0) != 0;
 i1 = i10 ? i1 : 256;
 i2 = i10 ? i2 : i8;
 i4 = i7;
 L1 : do if ((i1 | 0) != 0 & (i7 | 0) != 0) {
  i6 = i1;
  i7 = i4;
  i1 = 0;
  while (1) {
   i4 = i3 >>> 2;
   i5 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 >>> 0 > 131 | i5)) {
    i4 = i7;
    break L1;
   }
   i4 = i5 ? i6 : i4;
   i3 = i3 - i4 | 0;
   i4 = _mbsrtowcs(i2, i11, i4, i9) | 0;
   if ((i4 | 0) == -1) {
    i1 = i3;
    break;
   }
   i14 = (i2 | 0) == (i8 | 0);
   i7 = i14 ? 0 : i4;
   i5 = i6 - i7 | 0;
   i2 = i14 ? i2 : i2 + (i4 << 2) | 0;
   i1 = i4 + i1 | 0;
   i4 = HEAP32[i11 >> 2] | 0;
   if ((i6 | 0) != (i7 | 0) & (i4 | 0) != 0) {
    i6 = i5;
    i7 = i4;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i3 = i1;
  i6 = 0;
  i4 = HEAP32[i11 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i4 | 0) != 0 ? (i6 | 0) != 0 & (i3 | 0) != 0 : 0) {
  i5 = i4;
  i4 = i2;
  while (1) {
   i2 = _mbrtowc(i4, i5, i3, i9) | 0;
   if ((i2 + 2 | 0) >>> 0 < 3) break;
   i5 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
   HEAP32[i11 >> 2] = i5;
   i6 = i6 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != 0 & (i3 | 0) != (i2 | 0))) break L8; else {
    i3 = i3 - i2 | 0;
    i4 = i4 + 4 | 0;
   }
  }
  switch (i2 | 0) {
  case -1:
   {
    i1 = -1;
    break L8;
   }
  case 0:
   {
    HEAP32[i11 >> 2] = 0;
    break L8;
   }
  default:
   {
    HEAP32[i9 >> 2] = 0;
    break L8;
   }
  }
 } while (0);
 if (i10) HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i1 | 0;
}

function __ZN6MyFile10seekHeaderEPKc(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i8 + 24 | 0;
 i2 = i8 + 12 | 0;
 i3 = i8;
 if ((HEAP32[i6 + 12 >> 2] | 0) != 1) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = i6 + 20 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i1 = i6 + 28 | 0;
  if (HEAP32[i1 >> 2] | 0) {
   HEAP32[i1 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP8[i6 + 32 >> 0] = 0;
  }
 } else _fseek(i1, 0, 0) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i3, 21626, 1);
 i5 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i3, i5) | 0;
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 i5 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i2, 22871) | 0;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3);
 if ((__ZN6MyFile10seekStringEPKcS1_(i6, (HEAP8[i7 >> 0] & 1) == 0 ? i7 + 1 | 0 : HEAP32[i7 + 8 >> 2] | 0, 0) | 0) == -1) i1 = 0; else {
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   if (!i1) i1 = 0; else i1 = i1 - (HEAP32[i6 + 24 >> 2] | 0) | 0;
  } else i1 = _ftell(i1) | 0;
  HEAP32[i6 + 16 >> 2] = i1;
  i1 = 1;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZN4Cube9rmvPicArrERK6PicArri(i2, i8, i1) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[(HEAP32[i2 + 36 >> 2] | 0) + 44 >> 2] | 0;
 i6 = HEAP32[i2 + 40 >> 2] | 0;
 i7 = (Math_imul(HEAP32[i4 + (i1 * 188 | 0) + 8 >> 2] | 0, i6) | 0) + (HEAP32[i4 + (i1 * 188 | 0) + 4 >> 2] | 0) | 0;
 i5 = HEAP32[i2 + 52 >> 2] | 0;
 i7 = i7 + (Math_imul(HEAP32[i4 + (i1 * 188 | 0) + 12 >> 2] | 0, i5) | 0) | 0;
 switch (HEAP32[i4 + (i1 * 188 | 0) >> 2] | 0) {
 case 0:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i3 = (Math_imul(i6, i3) | 0) + i7 + (Math_imul(i5, i2) | 0) | 0;
     i3 = (HEAP32[i1 >> 2] | 0) + (i3 << 2) | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 case 1:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i6 = i2 + i7 + (Math_imul(i5, i3) | 0) | 0;
     i6 = (HEAP32[i1 >> 2] | 0) + (i6 << 2) | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 case 2:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i5 = i2 + i7 + (Math_imul(i6, i3) | 0) | 0;
     i5 = (HEAP32[i1 >> 2] | 0) + (i5 << 2) | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 default:
  return;
 }
}

function __ZN9GlTexture4initEjRK5Vec2iijjjPKvjjj(i12, i5, i11, i7, i3, i2, i6, i4, i9, i8, i13) {
 i12 = i12 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i1 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i14;
 if ((HEAP32[i12 >> 2] | 0) == -1) i1 = i12 + 16 | 0; else {
  _glDeleteTextures(1, i12 | 0);
  HEAP32[i12 >> 2] = -1;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  HEAP32[i12 + 12 >> 2] = 0;
  i1 = i12 + 16 | 0;
  HEAP32[i1 >> 2] = -1;
 }
 HEAP32[i1 >> 2] = i5;
 _glGenTextures(1, i12 | 0);
 _glBindTexture(i5 | 0, HEAP32[i12 >> 2] | 0);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 if ((i5 | 0) != 3553) {
  i14 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i14 >> 2] = 7152;
  HEAP32[i14 + 4 >> 2] = 21347;
  ___cxa_throw(i14 | 0, 2608, 44);
 }
 if (!i4) i1 = i11 + 4 | 0; else {
  i1 = i11 + 4 | 0;
  _glTexImage2D(3553, 0, i3 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i1 >> 2] | 0, 0, i2 | 0, i6 | 0, i4 | 0);
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 }
 _glTexParameteri(3553, 10241, i9 | 0);
 _glTexParameteri(3553, 10240, i8 | 0);
 _glTexParameteri(3553, 10242, i13 | 0);
 _glTexParameteri(3553, 10243, i13 | 0);
 i13 = HEAP32[i1 >> 2] | 0;
 HEAP32[i12 + 4 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i12 + 8 >> 2] = i13;
 HEAP32[i12 + 12 >> 2] = i7;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i14;
 return;
}

function __ZN4Cube9putPicArrERK6PicArri(i2, i8, i1) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[(HEAP32[i2 + 36 >> 2] | 0) + 44 >> 2] | 0;
 i6 = HEAP32[i2 + 40 >> 2] | 0;
 i7 = (Math_imul(HEAP32[i4 + (i1 * 188 | 0) + 8 >> 2] | 0, i6) | 0) + (HEAP32[i4 + (i1 * 188 | 0) + 4 >> 2] | 0) | 0;
 i5 = HEAP32[i2 + 52 >> 2] | 0;
 i7 = i7 + (Math_imul(HEAP32[i4 + (i1 * 188 | 0) + 12 >> 2] | 0, i5) | 0) | 0;
 switch (HEAP32[i4 + (i1 * 188 | 0) >> 2] | 0) {
 case 0:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i3 = (Math_imul(i6, i3) | 0) + i7 + (Math_imul(i5, i2) | 0) | 0;
     i3 = (HEAP32[i1 >> 2] | 0) + (i3 << 2) | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 case 1:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i6 = i2 + i7 + (Math_imul(i5, i3) | 0) | 0;
     i6 = (HEAP32[i1 >> 2] | 0) + (i6 << 2) | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 case 2:
  {
   i1 = i2 + 56 | 0;
   i4 = 0;
   do {
    i2 = HEAP32[7192 + (i4 << 2) >> 2] | 0;
    i3 = HEAP32[7256 + (i4 << 2) >> 2] | 0;
    if (HEAP32[i8 + ((i2 * 5 | 0) + i3 << 2) >> 2] | 0) {
     i5 = i2 + i7 + (Math_imul(i6, i3) | 0) | 0;
     i5 = (HEAP32[i1 >> 2] | 0) + (i5 << 2) | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 16);
   return;
  }
 default:
  return;
 }
}

function __ZN16ModelControlBaseD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 6152;
 HEAP32[i1 + 580 >> 2] = 6832;
 i2 = i1 + 1588 | 0;
 HEAP32[i2 >> 2] = 6944;
 HEAP32[i1 + 1764 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1772 | 0);
 HEAP32[i2 >> 2] = 5092;
 HEAP32[i1 + 1744 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1752 | 0);
 HEAP32[i1 + 1724 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1732 | 0);
 HEAP32[i1 + 1704 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1712 | 0);
 HEAP32[i1 + 1684 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1692 | 0);
 HEAP32[i1 + 1664 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 1672 | 0);
 __ZN13ShaderProgramD2Ev(i2);
 __ZN4MeshD2Ev(i1 + 1396 | 0);
 __ZN4MeshD2Ev(i1 + 1204 | 0);
 __ZN4MeshD2Ev(i1 + 1012 | 0);
 __ZN4MeshD2Ev(i1 + 820 | 0);
 __ZN4MeshD2Ev(i1 + 628 | 0);
 i2 = i1 + 380 | 0;
 HEAP32[i2 >> 2] = 5092;
 HEAP32[i1 + 536 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 544 | 0);
 HEAP32[i1 + 516 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 524 | 0);
 HEAP32[i1 + 496 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 504 | 0);
 HEAP32[i1 + 476 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 484 | 0);
 HEAP32[i1 + 456 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 464 | 0);
 __ZN13ShaderProgramD2Ev(i2);
 __ZN15NoiseSlvProgramD2Ev(i1 + 24 | 0);
 return;
}

function __ZN11CubeDocBase7solveGoEv(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i9;
 i4 = i8 + 88 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) != 0 ? (HEAP8[i2 + 28 >> 0] | 0) != 0 : 0) {
  HEAP32[i2 + 24 >> 2] = 1;
  STACKTOP = i9;
  return;
 }
 i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 22161, 8) | 0;
 HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16144) | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
 __ZNSt3__16localeD2Ev(i1);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
 i1 = i8 + 104 | 0;
 if (!((HEAP32[i1 >> 2] | 0) != 0 ? (HEAP8[(HEAP32[i8 + 116 >> 2] | 0) + 1500136 >> 0] | 0) == 0 : 0)) i3 = 6;
 if ((i3 | 0) == 6 ? !(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 63](i8, 1, 0) | 0) : 0) {
  STACKTOP = i9;
  return;
 }
 i5 = __Znwj(44) | 0;
 __ZN7PicsSetC2Eb(i5, (HEAP32[i8 + 32 >> 2] | 0) != 0);
 i6 = i8 + 4 | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i8 + 112 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i4 | 0) != 0 ? (i7 = HEAP32[i4 + 8 >> 2] | 0, (HEAP32[i4 + 12 >> 2] | 0) != (i7 | 0)) : 0) i1 = HEAP32[i7 + (HEAP32[i8 + 120 >> 2] << 2) >> 2] | 0; else i1 = 0;
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i3 + 16 >> 2] = i6;
 HEAP32[i3 + 8 >> 2] = i4;
 HEAP32[i3 + 12 >> 2] = i2;
 HEAP32[i3 + 20 >> 2] = i1;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 255](i3);
 STACKTOP = i9;
 return;
}

function __ZN6MyFile10seekStringEPKcS1_(i1, i12, i11) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 i7 = _strlen(i12) | 0;
 if (!i7) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!i11) i10 = 0; else i10 = _strlen(i11) | 0;
 i8 = i1 + 20 | 0;
 i9 = i1 + 28 | 0;
 i5 = i1 + 32 | 0;
 i6 = (i10 | 0) > 0;
 i4 = 0;
 i1 = -1;
 L7 : while (1) {
  i2 = HEAP32[i8 >> 2] | 0;
  if (i2) {
   if (_feof(i2) | 0) {
    i1 = -1;
    i14 = 22;
    break;
   }
   i2 = HEAP32[i8 >> 2] | 0;
   if (!i2) i14 = 12; else {
    _fread(i13, 1, 1, i2) | 0;
    i2 = HEAP8[i13 >> 0] | 0;
   }
  } else {
   if (!(HEAP32[i9 >> 2] | 0)) {
    i1 = -1;
    i14 = 22;
    break;
   }
   if (HEAP8[i5 >> 0] | 0) {
    i1 = -1;
    i14 = 22;
    break;
   }
   i14 = 12;
  }
  if ((i14 | 0) == 12) {
   i14 = 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (!i2) i2 = 0; else {
    HEAP32[i9 >> 2] = i2 + 1;
    i2 = HEAP8[i2 >> 0] | 0;
    HEAP8[i5 >> 0] = i2 << 24 >> 24 == 0 & 1;
   }
  }
  i3 = i1 + 1 | 0;
  if (i4 >>> 0 < i7 >>> 0 ? i2 << 24 >> 24 == (HEAP8[i12 + i4 >> 0] | 0) : 0) {
   i2 = i4 + 1 | 0;
   if ((i2 | 0) == (i7 | 0)) {
    i14 = 18;
    break;
   } else {
    i4 = i2;
    i1 = i3;
    continue;
   }
  }
  if (i6) {
   i1 = 0;
   do {
    if (i2 << 24 >> 24 == (HEAP8[i11 + i1 >> 0] | 0)) {
     i1 = -1;
     i14 = 22;
     break L7;
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i10 | 0));
  }
  i4 = i2 << 24 >> 24 == (HEAP8[i12 >> 0] | 0) & 1;
  i1 = i3;
 }
 if ((i14 | 0) == 18) {
  i14 = i1 + 2 | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i14 | 0) == 22) {
  STACKTOP = i15;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__16vectorIN8MatStack8MatEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i13, i11) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i14 = i13 + 4 | 0;
 i12 = HEAP32[i13 >> 2] | 0;
 i3 = (((HEAP32[i14 >> 2] | 0) - i12 | 0) / 68 | 0) + 1 | 0;
 if (i3 >>> 0 > 63161283) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i13);
 i15 = i13 + 8 | 0;
 i2 = i12;
 i1 = ((HEAP32[i15 >> 2] | 0) - i2 | 0) / 68 | 0;
 if (i1 >>> 0 < 31580641) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i4 = HEAP32[i14 >> 2] | 0;
  i3 = (i4 - i2 | 0) / 68 | 0;
  if (!i1) {
   i5 = 0;
   i9 = 0;
  } else i6 = 6;
 } else {
  i4 = HEAP32[i14 >> 2] | 0;
  i1 = 63161283;
  i3 = (i4 - i2 | 0) / 68 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i5 = i1;
  i9 = __Znwj(i1 * 68 | 0) | 0;
 }
 i6 = i9 + (i3 * 68 | 0) | 0;
 i1 = i6;
 i10 = i9 + (i5 * 68 | 0) | 0;
 i5 = i6;
 i7 = i11;
 i8 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  i5 = i5 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i5 | 0) < (i8 | 0));
 HEAP32[i9 + (i3 * 68 | 0) + 64 >> 2] = HEAP32[i11 + 64 >> 2];
 i9 = i9 + ((i3 + 1 | 0) * 68 | 0) | 0;
 if ((i4 | 0) == (i12 | 0)) i3 = i13; else {
  i3 = i6;
  do {
   i2 = i4;
   i4 = i4 + -68 | 0;
   i5 = i3 + -68 | 0;
   i7 = i4;
   i8 = i5 + 64 | 0;
   do {
    HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
    i5 = i5 + 4 | 0;
    i7 = i7 + 4 | 0;
   } while ((i5 | 0) < (i8 | 0));
   HEAP32[i3 + -4 >> 2] = HEAP32[i2 + -4 >> 2];
   i3 = i1 + -68 | 0;
   i1 = i3;
  } while ((i4 | 0) != (i12 | 0));
  i3 = i13;
  i2 = HEAP32[i13 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i14 >> 2] = i9;
 HEAP32[i15 >> 2] = i10;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZN16ModelControlBase11drawTargetsEb(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i9 + 12 | 0;
 i5 = i9;
 i6 = i8 + 8 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i1 + 112 >> 2] | 0;
 if (!i2) {
  STACKTOP = i9;
  return;
 }
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) == (i3 | 0)) {
  STACKTOP = i9;
  return;
 }
 i2 = HEAP32[i3 + (HEAP32[i1 + 120 >> 2] << 2) >> 2] | 0;
 if (!i2) {
  STACKTOP = i9;
  return;
 }
 if (!(HEAP32[i2 + 64 >> 2] | 0)) __ZN7SlvCube10genPainterEv(i2);
 i1 = i7 ? i8 + 380 | 0 : i8 + 24 | 0;
 i3 = HEAP32[1279] | 0;
 HEAP32[1279] = i3 + 1;
 if ((i3 | 0) == 0 ? (HEAP8[i1 + 48 >> 0] | 0) != 0 : 0) {
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  _glUseProgram(HEAP32[i1 + 4 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[1280] = i1;
 }
 if (!i7) {
  HEAPF32[i5 >> 2] = 0.0;
  HEAPF32[i5 + 4 >> 2] = 0.0;
  HEAPF32[i5 + 8 >> 2] = 1.0e3;
  i1 = HEAP32[i8 + 344 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform3fv(i1 | 0, 1, i5 | 0);
  i1 = HEAP32[i8 + 184 >> 2] | 0;
  if ((i1 | 0) != -1) _glUniform1f(i1 | 0, +(+HEAPF32[i8 + 1812 >> 2]));
 }
 i6 = HEAP32[i6 >> 2] | 0;
 __ZN16ModelControlBase5paintEP12BaseGLWidgetP11CubeDocBaseP7SlvCubebii(HEAP32[i8 + 4 >> 2] | 0, i6, i2, i7, HEAP32[i8 + 12 >> 2] | 0, HEAP32[i6 + 124 >> 2] | 0);
 i8 = (HEAP32[1279] | 0) + -1 | 0;
 HEAP32[1279] = i8;
 if (i8) {
  STACKTOP = i9;
  return;
 }
 _glUseProgram(0);
 HEAP32[1280] = 0;
 STACKTOP = i9;
 return;
}

function __ZN15NoiseSlvProgramD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 6976;
 HEAP32[i1 + 336 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 344 | 0);
 HEAP32[i1 + 316 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 324 | 0);
 HEAP32[i1 + 296 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 304 | 0);
 HEAP32[i1 + 276 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 284 | 0);
 HEAP32[i1 + 256 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 264 | 0);
 HEAP32[i1 + 236 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 244 | 0);
 HEAP32[i1 + 216 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 224 | 0);
 HEAP32[i1 + 196 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 204 | 0);
 HEAP32[i1 + 176 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 184 | 0);
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 return;
}

function __ZN11PicGroupDef10blendImageEP6ImgBuf(i17, i16) {
 i17 = i17 | 0;
 i16 = i16 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0;
 i18 = __Znwj(20) | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i10 = i16 + 4 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i11;
 i12 = i18 + 8 | 0;
 i13 = Math_imul(i11, i2) | 0;
 HEAP32[i12 >> 2] = 0;
 i14 = i18 + 12 | 0;
 HEAP32[i14 >> 2] = 0;
 i15 = i18 + 16 | 0;
 HEAP32[i15 >> 2] = 0;
 do if (i13) if (i13 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12); else {
  i9 = i13 << 2;
  i19 = __Znwj(i9) | 0;
  HEAP32[i12 >> 2] = i19;
  i3 = i19 + (i13 << 2) | 0;
  HEAP32[i15 >> 2] = i3;
  _memset(i19 | 0, 0, i9 | 0) | 0;
  HEAP32[i14 >> 2] = i3;
  i3 = HEAP32[i16 >> 2] | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  break;
 } else {
  i3 = i2;
  i9 = i11;
  i19 = 0;
 } while (0);
 i9 = Math_imul(i3 << 2, i9) | 0;
 if ((i9 | 0) <= 0) return i18 | 0;
 i3 = HEAP32[i16 + 8 >> 2] | 0;
 d4 = +HEAPF32[i17 + 56 >> 2];
 d5 = +HEAPF32[i17 + 52 >> 2];
 d6 = +HEAPF32[i17 + 48 >> 2];
 d7 = +HEAPF32[i17 + 44 >> 2];
 d8 = +HEAPF32[i17 + 40 >> 2];
 d1 = +HEAPF32[i17 + 36 >> 2];
 i2 = 0;
 do {
  d22 = +(HEAPU8[i3 + i2 >> 0] | 0);
  i16 = i2 | 1;
  d21 = +(HEAPU8[i3 + i16 >> 0] | 0);
  i17 = i2 | 2;
  d20 = +(HEAPU8[i3 + i17 >> 0] | 0);
  HEAP8[i19 + i2 >> 0] = ~~((255.0 - d22) * d7 + d22 * d4);
  HEAP8[i19 + i16 >> 0] = ~~((255.0 - d21) * d8 + d21 * d5);
  HEAP8[i19 + i17 >> 0] = ~~((255.0 - d20) * d1 + d20 * d6);
  HEAP8[i19 + (i2 | 3) >> 0] = -1;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i9 | 0));
 return i18 | 0;
}

function __ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) i1 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 i10 = i1 + 68 | 0;
 i6 = __ZN8tinyxml28MemPoolTILi52EE5AllocEv(i10) | 0;
 HEAP32[i6 + 4 >> 2] = i1;
 i1 = i6 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i6 >> 2] = 6672;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 + 48 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = i10;
 i1 = i6 + 12 | 0;
 i10 = i6 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 i5 = i6 + 20 | 0;
 HEAP32[i5 >> 2] = 0;
 i4 = _strlen(i9) | 0;
 i8 = i4 + 1 | 0;
 i3 = __Znaj(i8) | 0;
 HEAP32[i10 >> 2] = i3;
 _memcpy(i3 | 0, i9 | 0, i8 | 0) | 0;
 HEAP32[i5 >> 2] = i3 + i4;
 HEAP32[i1 >> 2] = 512;
 i1 = HEAP32[i2 + 48 >> 2] | 0;
 if (!i1) return i6 | 0;
 do {
  i4 = __ZN8tinyxml27StrPair6GetStrEv(i1 + 4 | 0) | 0;
  i3 = __ZN8tinyxml27StrPair6GetStrEv(i1 + 16 | 0) | 0;
  i4 = __ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc(i6, i4) | 0;
  i5 = i4 + 16 | 0;
  i2 = i4 + 20 | 0;
  if ((HEAP32[i5 >> 2] & 512 | 0) != 0 ? (i7 = HEAP32[i2 >> 2] | 0, (i7 | 0) != 0) : 0) __ZdaPv(i7);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i10 = i4 + 24 | 0;
  HEAP32[i10 >> 2] = 0;
  i9 = _strlen(i3) | 0;
  i4 = i9 + 1 | 0;
  i8 = __Znaj(i4) | 0;
  HEAP32[i2 >> 2] = i8;
  _memcpy(i8 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i10 >> 2] = i8 + i9;
  HEAP32[i5 >> 2] = 512;
  i1 = HEAP32[i1 + 28 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return i6 | 0;
}

function __ZN13ShaderProgramD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 HEAP32[i5 >> 2] = 6912;
 FUNCTION_TABLE_vi[HEAP32[6920 >> 2] & 255](i5);
 i1 = HEAP32[i5 + 64 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 68 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 + 52 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 56 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i3 = i5 + 36 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 40 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -12 | 0;
    HEAP32[i4 >> 2] = i6;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i3 = i5 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 28 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -12 | 0;
    HEAP32[i4 >> 2] = i6;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) return;
 i3 = i5 + 16 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i6 = i2 + -12 | 0;
   HEAP32[i3 >> 2] = i6;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
   i2 = HEAP32[i3 >> 2] | 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i4 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZN15NoiseSlvProgram8getCodesEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 12 | 0;
 i4 = i6;
 i2 = HEAP32[1584] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, _strlen(i2) | 0);
 i2 = i5 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 20 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 } else __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 12 | 0, i1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 i1 = HEAP32[1585] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 i1 = i5 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i5 + 44 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 } else {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 36 | 0, i4);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 }
}

function __ZN12BuildProgram8getCodesEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 12 | 0;
 i4 = i6;
 i2 = HEAP32[1580] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, _strlen(i2) | 0);
 i2 = i5 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 20 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 } else __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 12 | 0, i1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 i1 = HEAP32[1581] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 i1 = i5 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i5 + 44 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 } else {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 36 | 0, i4);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 }
}

function __ZN11FlatProgram8getCodesEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 12 | 0;
 i4 = i6;
 i2 = HEAP32[1582] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, _strlen(i2) | 0);
 i2 = i5 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 20 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 12;
 } else __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 12 | 0, i1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 i1 = HEAP32[1583] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 i1 = i5 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i5 + 44 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 } else {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i5 + 36 | 0, i4);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  STACKTOP = i6;
  return;
 }
}

function __ZNSt3__16vectorI5Vec4bNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i14, i9) {
 i14 = i14 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = i14 + 4 | 0;
 i10 = HEAP32[i14 >> 2] | 0;
 i11 = i10;
 i3 = ((HEAP32[i12 >> 2] | 0) - i11 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i14);
 i13 = i14 + 8 | 0;
 i1 = i10;
 i2 = (HEAP32[i13 >> 2] | 0) - i1 | 0;
 if (i2 >> 2 >>> 0 < 536870911) {
  i2 = i2 >> 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i4 = HEAP32[i12 >> 2] | 0;
  i3 = i4 - i1 >> 2;
  if (!i2) {
   i5 = 0;
   i8 = 0;
  } else i6 = 6;
 } else {
  i4 = HEAP32[i12 >> 2] | 0;
  i2 = 1073741823;
  i3 = i4 - i1 >> 2;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i5 = i2;
  i8 = __Znwj(i2 << 2) | 0;
 }
 i2 = i8 + (i3 << 2) | 0;
 i7 = i8 + (i5 << 2) | 0;
 HEAP8[i2 >> 0] = HEAP8[i9 >> 0] | 0;
 HEAP8[i8 + (i3 << 2) + 1 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
 HEAP8[i8 + (i3 << 2) + 2 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
 HEAP8[i8 + (i3 << 2) + 3 >> 0] = HEAP8[i9 + 3 >> 0] | 0;
 i6 = i8 + (i3 + 1 << 2) | 0;
 if ((i4 | 0) != (i10 | 0)) {
  i5 = 0 - i1 + (i4 + -4) | 0;
  i1 = i4;
  while (1) {
   i9 = i1;
   i1 = i1 + -4 | 0;
   HEAP8[i2 + -4 >> 0] = HEAP8[i1 >> 0] | 0;
   HEAP8[i2 + -3 >> 0] = HEAP8[i9 + -3 >> 0] | 0;
   HEAP8[i2 + -2 >> 0] = HEAP8[i9 + -2 >> 0] | 0;
   HEAP8[i2 + -1 >> 0] = HEAP8[i9 + -1 >> 0] | 0;
   if ((i1 | 0) == (i10 | 0)) break; else i2 = i2 + -4 | 0;
  }
  i2 = i8 + (i3 + ~(i5 >>> 2) << 2) | 0;
  i1 = i11;
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i13 >> 2] = i7;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function __ZN12BaseGLWidget11modelMinMaxERK4Vec3S2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, d19 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i10 + 64 | 0;
 i9 = i10;
 i6 = i1 + 108 | 0;
 d7 = (+HEAPF32[i2 >> 2] + +HEAPF32[i3 >> 2]) * -.5;
 d5 = (+HEAPF32[i2 + 4 >> 2] + +HEAPF32[i3 + 4 >> 2]) * -.5;
 d4 = (+HEAPF32[i2 + 8 >> 2] + +HEAPF32[i3 + 8 >> 2]) * -.5;
 i1 = i9;
 i2 = i6;
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i1 = i8;
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i1 = 0;
 do {
  d13 = +HEAPF32[i9 + (i1 << 2) >> 2];
  i18 = i1 + 4 | 0;
  d12 = +HEAPF32[i9 + (i18 << 2) >> 2];
  d16 = d12 * 0.0;
  i2 = i1 + 8 | 0;
  d11 = +HEAPF32[i9 + (i2 << 2) >> 2];
  d19 = d11 * 0.0;
  i3 = i1 + 12 | 0;
  d14 = +HEAPF32[i9 + (i3 << 2) >> 2];
  d15 = d14 * 0.0;
  HEAPF32[i8 + (i1 << 2) >> 2] = d13 + 0.0 + d16 + d19 + d15;
  d17 = d13 * 0.0 + 0.0;
  HEAPF32[i8 + (i18 << 2) >> 2] = d12 + d17 + d19 + d15;
  HEAPF32[i8 + (i2 << 2) >> 2] = d11 + (d17 + d16) + d15;
  HEAPF32[i8 + (i3 << 2) >> 2] = d14 + (d7 * d13 + 0.0 + d5 * d12 + d4 * d11);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 4);
 if ((i8 | 0) == (i6 | 0)) {
  STACKTOP = i10;
  return;
 }
 i1 = i6;
 i2 = i8;
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 STACKTOP = i10;
 return;
}

function _wcsnrtombs(i3, i11, i4, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i7 = i10 + 8 | 0;
 i9 = i10;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = i6;
 i8 = (i3 | 0) != 0;
 i1 = i8 ? i2 : 256;
 i2 = i8 ? i3 : i7;
 i3 = i6;
 L1 : do if ((i1 | 0) != 0 & (i6 | 0) != 0) {
  i6 = i1;
  i5 = i3;
  i1 = 0;
  while (1) {
   i3 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 | i4 >>> 0 > 32)) {
    i3 = i5;
    break L1;
   }
   i3 = i3 ? i6 : i4;
   i4 = i4 - i3 | 0;
   i3 = _wcsrtombs(i2, i9, i3, 0) | 0;
   if ((i3 | 0) == -1) {
    i1 = i4;
    break;
   }
   i13 = (i2 | 0) == (i7 | 0);
   i12 = i13 ? 0 : i3;
   i5 = i6 - i12 | 0;
   i2 = i13 ? i2 : i2 + i3 | 0;
   i1 = i3 + i1 | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if ((i6 | 0) != (i12 | 0) & (i3 | 0) != 0) {
    i6 = i5;
    i5 = i3;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i4 = i1;
  i6 = 0;
  i3 = HEAP32[i9 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i3 | 0) != 0 ? (i6 | 0) != 0 & (i4 | 0) != 0 : 0) {
  i5 = i3;
  i3 = i2;
  while (1) {
   i2 = _wcrtomb(i3, HEAP32[i5 >> 2] | 0, 0) | 0;
   if ((i2 + 1 | 0) >>> 0 < 2) break;
   i5 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i5;
   i4 = i4 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != (i2 | 0) & (i4 | 0) != 0)) break L8; else {
    i6 = i6 - i2 | 0;
    i3 = i3 + i2 | 0;
   }
  }
  if (!i2) HEAP32[i9 >> 2] = 0; else i1 = -1;
 } while (0);
 if (i8) HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function __ZN4Cube9placeIntoEiiP4Vec3S1_S1_(i1, i10, i7, i11, i8, i9) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, d5 = 0.0, d6 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0;
 i4 = i1 + 36 | 0;
 i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0;
 i1 = HEAP32[i2 + (i7 * 188 | 0) >> 2] | 0;
 if ((i10 | 0) <= 0) return;
 d6 = +((i1 | 0) == 2 | 0);
 d5 = +((i1 | 0) == 1 | 0);
 d3 = +((i1 | 0) == 0 | 0);
 i1 = 0;
 while (1) {
  i13 = i8 + (i1 * 12 | 0) | 0;
  i12 = i11 + (i1 * 12 | 0) | 0;
  d16 = +HEAPF32[i12 >> 2];
  i15 = i11 + (i1 * 12 | 0) + 8 | 0;
  HEAPF32[i13 >> 2] = d3 * +HEAPF32[i15 >> 2] + (d5 * d16 + (+(HEAP32[i2 + (i7 * 188 | 0) + 4 >> 2] | 0) + d6 * d16));
  i14 = i11 + (i1 * 12 | 0) + 4 | 0;
  d16 = +HEAPF32[i14 >> 2];
  HEAPF32[i8 + (i1 * 12 | 0) + 4 >> 2] = d3 * d16 + (+(HEAP32[i2 + (i7 * 188 | 0) + 8 >> 2] | 0) + d6 * d16 + d5 * +HEAPF32[i15 >> 2]);
  HEAPF32[i8 + (i1 * 12 | 0) + 8 >> 2] = +(HEAP32[i2 + (i7 * 188 | 0) + 12 >> 2] | 0) + d6 * +HEAPF32[i15 >> 2] + d5 * +HEAPF32[i14 >> 2] + d3 * +HEAPF32[i12 >> 2];
  i2 = i10 - i1 + -1 | 0;
  i12 = i9 + (i2 * 12 | 0) | 0;
  HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAPF32[i12 >> 2] = d3 + +HEAPF32[i12 >> 2];
  i12 = i9 + (i2 * 12 | 0) + 4 | 0;
  HEAPF32[i12 >> 2] = d5 + +HEAPF32[i12 >> 2];
  i2 = i9 + (i2 * 12 | 0) + 8 | 0;
  HEAPF32[i2 >> 2] = d6 + +HEAPF32[i2 >> 2];
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == (i10 | 0)) break;
  i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0;
 }
 return;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i8, i10, i1) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i5 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i8);
 if (!(HEAP8[i9 >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i8 + (i2 + 24) >> 2];
 i7 = i8 + i2 | 0;
 i6 = HEAP32[i8 + (i2 + 4) >> 2] | 0;
 i3 = i10 + i1 | 0;
 i2 = i8 + (i2 + 76) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i7) | 0;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 16144) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i1 = i1 << 24 >> 24;
  HEAP32[i2 >> 2] = i1;
 }
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i4, i10, (i6 & 176 | 0) == 32 ? i3 : i10, i3, i7, i1 & 255) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i8 + i10 | 0, HEAP32[i8 + (i10 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i8 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i7, i6, i2, i4) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i8 = 0, i9 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i7 + 8 >> 2] | 0)) {
  if ((HEAP32[i7 + 4 >> 2] | 0) == (i6 | 0) ? (i1 = i7 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i2;
 } else {
  if ((i3 | 0) != (HEAP32[i7 >> 2] | 0)) {
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 3](i8, i7, i6, i2, i4);
   break;
  }
  if ((HEAP32[i7 + 16 >> 2] | 0) != (i6 | 0) ? (i5 = i7 + 20 | 0, (HEAP32[i5 >> 2] | 0) != (i6 | 0)) : 0) {
   HEAP32[i7 + 32 >> 2] = i2;
   i2 = i7 + 44 | 0;
   if ((HEAP32[i2 >> 2] | 0) == 4) break;
   i1 = i7 + 52 | 0;
   HEAP8[i1 >> 0] = 0;
   i9 = i7 + 53 | 0;
   HEAP8[i9 >> 0] = 0;
   i3 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 7](i3, i7, i6, i6, 1, i4);
   if (HEAP8[i9 >> 0] | 0) {
    if (!(HEAP8[i1 >> 0] | 0)) {
     i1 = 1;
     i8 = 13;
    }
   } else {
    i1 = 0;
    i8 = 13;
   }
   do if ((i8 | 0) == 13) {
    HEAP32[i5 >> 2] = i6;
    i9 = i7 + 40 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    if ((HEAP32[i7 + 36 >> 2] | 0) == 1 ? (HEAP32[i7 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i7 + 54 >> 0] = 1;
     if (i1) break;
    } else i8 = 16;
    if ((i8 | 0) == 16 ? i1 : 0) break;
    HEAP32[i2 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i2 >> 2] = 3;
   break;
  }
  if ((i2 | 0) == 1) HEAP32[i7 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i7, i10, i1, i2, i6) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i9 = HEAP32[i11 >> 2] | 0;
 if (!i9) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i13 = i7;
 i4 = i1 - i13 | 0;
 i5 = i2 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = (i3 | 0) > (i4 | 0) ? i3 - i4 | 0 : 0;
 i3 = i10;
 i2 = i3 - i13 | 0;
 if ((i2 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, i7, i2) | 0) != (i2 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 do if ((i4 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i8, i4, i6);
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, (HEAP8[i8 >> 0] & 1) == 0 ? i8 + 1 | 0 : HEAP32[i8 + 8 >> 2] | 0, i4) | 0) == (i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   break;
  }
  HEAP32[i11 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 } while (0);
 i1 = i1 - i3 | 0;
 if ((i1 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, i10, i1) | 0) != (i1 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i13 = i9;
 STACKTOP = i12;
 return i13 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[36804] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[36805] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[36806] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[36807] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[36808] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[36809] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 36810, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[36804] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[36805] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[36806] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[36807] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[36808] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[36809] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 36810, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[36804] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[36805] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[36806] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[36807] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[36808] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[36809] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 36810, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[36804] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[36805] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[36806] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[36807] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[36808] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[36809] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 36810, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE(i7, i6, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP8[i7 + 44 >> 0] | 0)) {
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  i4 = (HEAP8[i3 + 45 >> 0] | 0) != 0 ? 3 : 2;
  i4 = (HEAP32[i3 + 52 >> 2] | 0) == 1 ? i4 | 4 : i4;
  i2 = HEAP8[i6 >> 0] | 0;
  L3 : do if (i2 << 24 >> 24) {
   i1 = i6;
   while (1) {
    if (i2 << 24 >> 24 == 60) break;
    i1 = i1 + 1 | 0;
    i2 = HEAP8[i1 >> 0] | 0;
    if (!(i2 << 24 >> 24)) break L3;
   }
   i3 = i7 + 12 | 0;
   i2 = i7 + 16 | 0;
   if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i5 = HEAP32[i2 >> 2] | 0, (i5 | 0) != 0) : 0) __ZdaPv(i5);
   HEAP32[i2 >> 2] = i6;
   HEAP32[i7 + 20 >> 2] = i1;
   HEAP32[i3 >> 2] = i4 | 256;
   return ((HEAP8[i1 + 1 >> 0] | 0) == 0 ? 0 : i1) | 0;
  } while (0);
  HEAP32[i3 + 48 >> 2] = 10;
  HEAP32[i3 + 56 >> 2] = i6;
  HEAP32[i3 + 60 >> 2] = 0;
  i7 = 0;
  return i7 | 0;
 }
 i1 = HEAP8[i6 >> 0] | 0;
 L15 : do if (i1 << 24 >> 24) {
  i2 = i6;
  while (1) {
   if (i1 << 24 >> 24 == 93 ? (_strncmp(i2, 22932, 3) | 0) == 0 : 0) break;
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break L15;
  }
  i3 = i7 + 12 | 0;
  i1 = i7 + 16 | 0;
  if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
  HEAP32[i1 >> 2] = i6;
  HEAP32[i7 + 20 >> 2] = i2;
  HEAP32[i3 >> 2] = 258;
  i7 = i2 + 3 | 0;
  return i7 | 0;
 } while (0);
 i7 = HEAP32[i7 + 4 >> 2] | 0;
 HEAP32[i7 + 48 >> 2] = 11;
 HEAP32[i7 + 56 >> 2] = i6;
 HEAP32[i7 + 60 >> 2] = 0;
 i7 = 0;
 return i7 | 0;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i8, i10, i2, i3, i7) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12;
 i1 = HEAP32[i11 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i13 = i8;
  i5 = i2 - i13 >> 2;
  i6 = i3 + 12 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i5 = (i3 | 0) > (i5 | 0) ? i3 - i5 | 0 : 0;
  i3 = i10;
  i13 = i3 - i13 | 0;
  i4 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i8, i4) | 0) != (i4 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  do if ((i5 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i9, i5, i7);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, (HEAP8[i9 >> 0] & 1) == 0 ? i9 + 4 | 0 : HEAP32[i9 + 8 >> 2] | 0, i5) | 0) == (i5 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    break;
   } else {
    HEAP32[i11 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    i1 = 0;
    break L1;
   }
  } while (0);
  i13 = i2 - i3 | 0;
  i2 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i10, i2) | 0) != (i2 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function ___dynamic_cast(i2, i3, i12, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i13 = i14;
 i11 = HEAP32[i2 >> 2] | 0;
 i10 = i2 + (HEAP32[i11 + -8 >> 2] | 0) | 0;
 i11 = HEAP32[i11 + -4 >> 2] | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i13 + 4 >> 2] = i2;
 HEAP32[i13 + 8 >> 2] = i3;
 HEAP32[i13 + 12 >> 2] = i1;
 i1 = i13 + 16 | 0;
 i2 = i13 + 20 | 0;
 i3 = i13 + 24 | 0;
 i4 = i13 + 28 | 0;
 i5 = i13 + 32 | 0;
 i6 = i13 + 40 | 0;
 i7 = (i11 | 0) == (i12 | 0);
 i8 = i1;
 i9 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 L1 : do if (i7) {
  HEAP32[i13 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 7](i12, i13, i10, i10, 1, 0);
  i1 = (HEAP32[i3 >> 2] | 0) == 1 ? i10 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 3](i11, i13, i10, 1, 0);
  switch (HEAP32[i13 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = (HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i3 >> 2] | 0) != 1 ? !((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1) : 0) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i14;
 return i1 | 0;
}

function _vfprintf(i15, i11, i1) {
 i15 = i15 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i10 = i16 + 120 | 0;
 i14 = i16 + 80 | 0;
 i13 = i16;
 i12 = i16 + 136 | 0;
 i2 = i14;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i11, i10, i13, i14) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i8 = ___lockfile(i15) | 0; else i8 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i1 = i15 + 48 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i12;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i12;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i12;
   HEAP32[i1 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i12 + 80;
   i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 63](i15, 0, 0) | 0;
    i2 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i2;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i1 | i9;
  if (i8) ___unlockfile(i15);
  i1 = (i1 & 32 | 0) == 0 ? i2 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNK8tinyxml210XMLElement12IntAttributeEPKc(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i11;
 i8 = i11 + 4 | 0;
 HEAP32[i8 >> 2] = 0;
 i1 = HEAP32[i1 + 48 >> 2] | 0;
 if (!i1) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 while (1) {
  i2 = __ZN8tinyxml27StrPair6GetStrEv(i1 + 4 | 0) | 0;
  if ((i2 | 0) == (i7 | 0)) break;
  i3 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24) {
   i4 = i7;
   i5 = 0;
   while (1) {
    i12 = HEAP8[i4 >> 0] | 0;
    if (!((i5 | 0) != 2147483647 & (i12 << 24 >> 24 != 0 ? i3 << 24 >> 24 == i12 << 24 >> 24 : 0))) {
     i2 = i5;
     break;
    }
    i2 = i2 + 1 | 0;
    i4 = i4 + 1 | 0;
    i5 = i5 + 1 | 0;
    i3 = HEAP8[i2 >> 0] | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = 0;
     i2 = i5;
     break;
    }
   }
   if ((i2 | 0) == 2147483647) {
    i10 = 10;
    break;
   }
   if (!(i3 << 24 >> 24)) {
    i6 = i4;
    i10 = 8;
   }
  } else {
   i6 = i7;
   i10 = 8;
  }
  if ((i10 | 0) == 8 ? (i10 = 0, (HEAP8[i6 >> 0] | 0) == 0) : 0) {
   i10 = 10;
   break;
  }
  i1 = HEAP32[i1 + 28 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i10 = 12;
   break;
  }
 }
 if ((i10 | 0) == 12) {
  STACKTOP = i11;
  return i1 | 0;
 }
 if ((i10 | 0) == 10) if (!i1) {
  i12 = 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 i12 = __ZN8tinyxml27StrPair6GetStrEv(i1 + 16 | 0) | 0;
 HEAP32[i9 >> 2] = i8;
 _sscanf(i12, 22868, i9) | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i11;
 return i12 | 0;
}

function __ZN9PicBucket11makeAllCompEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i9;
 i1 = i8;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP8[i8 + 40 >> 0] = 0;
 i1 = i3 + 20 | 0;
 i7 = i3 + 16 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
  i2 = 0;
  do {
   __ZN7PicsSet3addEib(i8, i2, 0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < (((HEAP32[i1 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) / 1328 | 0) >>> 0);
 }
 i1 = i3 + 76 | 0;
 if ((i1 | 0) != (i8 | 0)) __ZNSt3__16vectorI7PicTypeNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(i1, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0);
 i2 = HEAP32[i3 + 80 >> 2] | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (i6 | 0)) {
  __ZN7PicsSetD2Ev(i8);
  STACKTOP = i9;
  return;
 }
 i2 = (i2 - i6 | 0) / 900 | 0;
 i5 = 0;
 do {
  i1 = HEAP32[i6 + (i5 * 900 | 0) + 888 >> 2] | 0;
  i3 = HEAP32[i6 + (i5 * 900 | 0) + 892 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   i4 = HEAP32[i7 >> 2] | 0;
   do {
    i10 = HEAP32[i1 >> 2] | 0;
    HEAP32[i4 + (i10 * 1328 | 0) + 1016 >> 2] = i5;
    HEAP32[i4 + (i10 * 1328 | 0) + 1020 >> 2] = HEAP32[i1 + 4 >> 2];
    i1 = i1 + 8 | 0;
   } while ((i1 | 0) != (i3 | 0));
  }
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < i2 >>> 0);
 __ZN7PicsSetD2Ev(i8);
 STACKTOP = i9;
 return;
}

function _mbrtowc(i4, i3, i7, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9;
 i6 = (i1 | 0) == 0 ? 9352 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i3) if (!i1) i1 = 0; else i8 = 15; else {
  i5 = (i4 | 0) == 0 ? i2 : i4;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i3 >> 0] | 0;
    i2 = i1 & 255;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i2;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i1 = i2 + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 15;
     break;
    }
    i1 = HEAP32[9080 + (i1 << 2) >> 2] | 0;
    i2 = i7 + -1 | 0;
    if (i2) {
     i3 = i3 + 1 | 0;
     i8 = 9;
    }
   } else {
    i2 = i7;
    i8 = 9;
   }
   L11 : do if ((i8 | 0) == 9) {
    i4 = HEAP8[i3 >> 0] | 0;
    i10 = (i4 & 255) >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 15;
     break L1;
    }
    while (1) {
     i3 = i3 + 1 | 0;
     i1 = (i4 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i2) break L11;
     i4 = HEAP8[i3 >> 0] | 0;
     if ((i4 & -64) << 24 >> 24 != -128) {
      i8 = 15;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 15) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN16BuildControlBase11drawTargetsEb(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i6 + 64 | 0;
 i3 = i6;
 i1 = i5 + 1008 | 0;
 i7 = HEAP32[1279] | 0;
 HEAP32[1279] = i7 + 1;
 if ((i7 | 0) == 0 ? (HEAP8[i5 + 1056 >> 0] | 0) != 0 : 0) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  _glUseProgram(HEAP32[i5 + 1012 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  HEAP32[1280] = i1;
 }
 __ZN12BaseGLWidget12transformMatEv(i3, HEAP32[i5 + 4 >> 2] | 0);
 i1 = HEAP32[i5 + 1088 >> 2] | 0;
 if ((i1 | 0) != -1) _glUniformMatrix4fv(i1 | 0, 1, 0, i3 | 0);
 i1 = HEAP32[i5 + 1168 >> 2] | 0;
 if ((i1 | 0) != -1) _glUniform1f(i1 | 0, +(+HEAPF32[i5 + 1232 >> 2]));
 _glEnable(3042);
 _glBlendFunc(770, 771);
 _glEnable(32823);
 _glPolygonOffset(1.0, 1.0);
 __ZNK4Mesh5paintEb(i5 + 48 | 0, i4);
 if (!i4) {
  __ZN16BuildControlBase17drawErrorCylidersEv(i5);
  _glPolygonOffset(0.0, 0.0);
  __ZNK4Mesh5paintEb(i5 + 432 | 0, 0);
  _glPolygonOffset(1.0, 1.0);
  __ZNK4Mesh5paintEb(i5 + 240 | 0, 0);
  _glPolygonOffset(0.0, 0.0);
  __ZNK4Mesh5paintEb(i5 + 624 | 0, 0);
 }
 i7 = (HEAP32[1279] | 0) + -1 | 0;
 HEAP32[1279] = i7;
 if (i7) {
  STACKTOP = i6;
  return;
 }
 _glUseProgram(0);
 HEAP32[1280] = 0;
 STACKTOP = i6;
 return;
}

function __ZNSt3__16vectorIN7SlvCube6SlvPicENS_9allocatorIS2_EEE8__appendEj(i12, i14) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i11 = i12 + 8 | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i13 = i12 + 4 | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i1 = i3;
 if (i4 - i1 >> 3 >>> 0 >= i14 >>> 0) {
  i1 = i14;
  i2 = i3;
  while (1) {
   HEAP32[i2 >> 2] = -1;
   HEAP32[i2 + 4 >> 2] = -1;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 8 | 0;
  }
  HEAP32[i13 >> 2] = i3 + (i14 << 3);
  return;
 }
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = i9;
 i2 = (i1 - i10 >> 3) + i14 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
 i3 = i9;
 i1 = i4 - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i13 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i7 = 0;
   i6 = i2;
   i4 = i3;
  } else i8 = 9;
 } else {
  i3 = (HEAP32[i13 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i8 = 9;
 }
 if ((i8 | 0) == 9) {
  i5 = i1;
  i7 = __Znwj(i1 << 3) | 0;
  i6 = i2;
  i4 = i3;
 }
 i2 = i7 + (i5 << 3) | 0;
 i1 = i14;
 i3 = i7 + (i6 << 3) | 0;
 while (1) {
  HEAP32[i3 >> 2] = -1;
  HEAP32[i3 + 4 >> 2] = -1;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i3 = i3 + 8 | 0;
 }
 _memcpy(i7 | 0, i9 | 0, i4 | 0) | 0;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i13 >> 2] = i7 + (i6 + i14 << 3);
 HEAP32[i11 >> 2] = i2;
 if (!i10) return;
 __ZdlPv(i10);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i10 = i6;
 i5 = i6 + 180 | 0;
 i7 = i6 + 160 | 0;
 i8 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[36818] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[36819] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[36820] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[36821] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[36822] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[36823] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i7, i9, i8) | 0;
 i5 = i8 + (i5 << 2) | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7 << 2) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZN13ShaderProgram5clearEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i5 + 12 >> 2] | 0;
 i3 = i5 + 16 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i4 = i1 + -12 | 0;
  HEAP32[i3 >> 2] = i4;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 i2 = HEAP32[i5 + 36 >> 2] | 0;
 i3 = i5 + 40 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i4 = i1 + -12 | 0;
  HEAP32[i3 >> 2] = i4;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 i2 = HEAP32[i5 + 24 >> 2] | 0;
 i3 = i5 + 28 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i4 = i1 + -12 | 0;
  HEAP32[i3 >> 2] = i4;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 _glDeleteProgram(HEAP32[i5 + 4 >> 2] | 0);
 i2 = i5 + 52 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i4 = i5 + 56 | 0;
 if ((i1 | 0) == (HEAP32[i4 >> 2] | 0)) {
  i5 = i5 + 48 | 0;
  HEAP8[i5 >> 0] = 0;
  return;
 }
 while (1) {
  _glDeleteShader(HEAP32[i1 >> 2] | 0);
  i3 = i1 + 4 | 0;
  if ((i3 | 0) == (HEAP32[i4 >> 2] | 0)) break; else i1 = i3;
 }
 i2 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (i2 | 0)) {
  i5 = i5 + 48 | 0;
  HEAP8[i5 >> 0] = 0;
  return;
 }
 HEAP32[i4 >> 2] = i1 + (0 - ((i1 - i2 | 0) >>> 2) << 2);
 i5 = i5 + 48 | 0;
 HEAP8[i5 >> 0] = 0;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i6;
 i5 = i6 + 72 | 0;
 i7 = i6 + 52 | 0;
 i8 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[36818] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[36819] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[36820] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[36821] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[36822] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[36823] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, i7, i9, i8) | 0;
 i5 = i8 + i5 | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(i1, i8, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i2 = i1 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  HEAP32[i8 >> 2] = i2;
  i8 = i2;
  return i8 | 0;
 }
 i7 = HEAP8[i3 >> 0] | 0;
 i6 = (i7 & 1) == 0;
 i7 = i6 ? (i7 & 255) >>> 1 : HEAP32[i3 + 4 >> 2] | 0;
 i6 = i6 ? i3 + 1 | 0 : HEAP32[i3 + 8 >> 2] | 0;
 while (1) {
  i3 = i1 + 16 | 0;
  i2 = HEAP8[i3 >> 0] | 0;
  i4 = (i2 & 1) == 0;
  i2 = i4 ? (i2 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0;
  i3 = i4 ? i3 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0;
  i4 = i2 >>> 0 < i7 >>> 0;
  i9 = _memcmp(i6, i3, i4 ? i2 : i7) | 0;
  i5 = i7 >>> 0 < i2 >>> 0;
  if ((((i9 | 0) == 0 ? (i5 ? -2147483648 : 0) : i9) | 0) < 0) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i2 = i1;
    i3 = 5;
    break;
   } else i1 = i2;
  } else {
   i9 = _memcmp(i3, i6, i5 ? i7 : i2) | 0;
   if ((((i9 | 0) == 0 ? (i4 ? -2147483648 : 0) : i9) | 0) >= 0) {
    i3 = 10;
    break;
   }
   i2 = i1 + 4 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) {
    i3 = 9;
    break;
   } else i1 = i3;
  }
 }
 if ((i3 | 0) == 5) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 9) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  i9 = i8;
  return i9 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i1 | 0) == (HEAP32[i12 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i12, i11, i10, i13); else {
  i6 = i12 + 52 | 0;
  i7 = HEAP8[i6 >> 0] | 0;
  i8 = i12 + 53 | 0;
  i9 = HEAP8[i8 >> 0] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i5 << 3) | 0;
  HEAP8[i6 >> 0] = 0;
  HEAP8[i8 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i12, i11, i10, i13, i14);
  L4 : do if ((i5 | 0) > 1) {
   i3 = i12 + 24 | 0;
   i4 = i1 + 8 | 0;
   i5 = i12 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    if (HEAP8[i5 >> 0] | 0) break L4;
    if (!(HEAP8[i6 >> 0] | 0)) {
     if ((HEAP8[i8 >> 0] | 0) != 0 ? (HEAP32[i4 >> 2] & 1 | 0) == 0 : 0) break L4;
    } else {
     if ((HEAP32[i3 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i4 >> 2] & 2)) break L4;
    }
    HEAP8[i6 >> 0] = 0;
    HEAP8[i8 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14);
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  } while (0);
  HEAP8[i6 >> 0] = i7;
  HEAP8[i8 >> 0] = i9;
 }
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE4findIS3_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var d2 = 0.0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0;
 i7 = i1 + 4 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 do if (i4) {
  d5 = +HEAPF32[i3 >> 2];
  d8 = +HEAPF32[i3 + 4 >> 2];
  d6 = +HEAPF32[i3 + 8 >> 2];
  i1 = i7;
  i3 = i4;
  L3 : do {
   L5 : while (1) {
    d2 = +HEAPF32[i3 + 16 >> 2];
    do if (+Math_abs(+(d2 - d5)) < .00001) {
     d2 = +HEAPF32[i3 + 20 >> 2];
     if (+Math_abs(+(d2 - d8)) < .00001) {
      d2 = +HEAPF32[i3 + 24 >> 2];
      if (d2 < d6 & !(+Math_abs(+(d2 - d6)) < .00001)) break; else {
       i1 = i3;
       break L5;
      }
     } else if (d2 < d8) break; else {
      i1 = i3;
      break L5;
     }
    } else if (!(d2 < d5)) {
     i1 = i3;
     break L5;
    } while (0);
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    if (!i3) break L3;
   }
   i3 = HEAP32[i1 >> 2] | 0;
  } while ((i3 | 0) != 0);
  if ((i1 | 0) != (i7 | 0)) {
   d2 = +HEAPF32[i1 + 16 >> 2];
   if (!(+Math_abs(+(d5 - d2)) < .00001)) {
    if (d5 < d2) break;
    return i1 | 0;
   }
   d2 = +HEAPF32[i1 + 20 >> 2];
   if (+Math_abs(+(d8 - d2)) < .00001) {
    d8 = +HEAPF32[i1 + 24 >> 2];
    if (d6 < d8 & !(+Math_abs(+(d6 - d8)) < .00001)) break;
    return i1 | 0;
   } else {
    if (d8 < d2) break;
    return i1 | 0;
   }
  }
 } while (0);
 return i7 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 204 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 36812, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 196 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 36812, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 75 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 36812, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 74 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 36812, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i10, i8) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 15316) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i2 & 31](i7, i5, i4, i1 & 255, i8) | 0)) {
   i8 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i10, i8) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 15316) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i2 & 31](i7, i5, i4, i1 & 255, i8) | 0)) {
   i8 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEb(i10, i8) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 15316) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16144) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i2 & 31](i7, i5, i4, i1 & 255, i8) | 0)) {
   i8 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZN10BuildWorld13initializeNewEb(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7;
 HEAP32[i6 >> 2] = 50;
 HEAP32[i6 + 4 >> 2] = 50;
 HEAP32[i6 + 8 >> 2] = 50;
 HEAP8[i6 + 1500136 >> 0] = 1;
 HEAP8[i6 + 1500137 >> 0] = 0;
 HEAP8[i6 + 1500296 >> 0] = 0;
 __ZN10BuildWorld5cleanENS_12ECleanMethodE(i6, 0);
 if (!i1) {
  HEAP32[i6 + 540952 >> 2] = 514;
  HEAP32[i6 + 32 >> 2] = 1;
  HEAP8[i6 + 36 >> 0] = 0;
  __ZN10BuildWorld13doTransparentEv(i6);
  STACKTOP = i7;
  return;
 };
 HEAP32[i4 >> 2] = 0;
 HEAP16[i4 + 4 >> 1] = 0;
 i3 = i6 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = Math_imul(HEAP32[i6 + 20 >> 2] | 0, i1) | 0;
 i5 = i6 + 28 | 0;
 if ((i2 | 0) > 0) {
  i1 = 0;
  do {
   i8 = HEAP32[i5 >> 2] | 0;
   HEAP32[i8 + (i1 * 12 | 0) >> 2] = 0;
   i8 = i8 + (i1 * 12 | 0) + 4 | 0;
   HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
   HEAP16[i8 + 4 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + ((((i1 + (HEAP32[i6 + 12 >> 2] | 0) | 0) * 24 | 0) + 24 | 0) * 12 | 0) >> 2] = 1;
 HEAP32[i6 + 1245032 >> 2] = 514;
 HEAP32[i6 + 1255032 >> 2] = 513;
 HEAP32[i6 + 745032 >> 2] = 513;
 HEAP32[i6 + 755032 >> 2] = 513;
 HEAP32[i6 + 245032 >> 2] = 513;
 HEAP32[i6 + 255032 >> 2] = 513;
 HEAP32[i6 + 32 >> 2] = 6;
 HEAP8[i6 + 36 >> 0] = 1;
 __ZN10BuildWorld12reClacLimitsEv(i6);
 STACKTOP = i7;
 return;
}

function __ZN12UniformParam11getLocationEj(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 i4 = i6 + 8 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 12 >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return;
 }
 if (i2) i1 = i4 + 1 | 0; else i1 = HEAP32[i6 + 16 >> 2] | 0;
 i5 = _glGetUniformLocation(i5 | 0, i1 | 0) | 0;
 HEAP32[i6 + 4 >> 2] = i5;
 if ((i5 | 0) != -1) {
  STACKTOP = i7;
  return;
 }
 i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21220, 18) | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 i2 = (i5 & 1) == 0;
 i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i1, i2 ? i4 + 1 | 0 : HEAP32[i6 + 16 >> 2] | 0, i2 ? (i5 & 255) >>> 1 : HEAP32[i6 + 12 >> 2] | 0) | 0, 21239, 17) | 0;
 HEAP32[i3 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 16144) | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
 __ZNSt3__16localeD2Ev(i3);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
 STACKTOP = i7;
 return;
}

function __ZN11AttribParam11getLocationEj(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 i4 = i6 + 8 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 12 >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return;
 }
 if (i2) i1 = i4 + 1 | 0; else i1 = HEAP32[i6 + 16 >> 2] | 0;
 i5 = _glGetAttribLocation(i5 | 0, i1 | 0) | 0;
 HEAP32[i6 + 4 >> 2] = i5;
 if ((i5 | 0) != -1) {
  STACKTOP = i7;
  return;
 }
 i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 21257, 20) | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 i2 = (i5 & 1) == 0;
 i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i1, i2 ? i4 + 1 | 0 : HEAP32[i6 + 16 >> 2] | 0, i2 ? (i5 & 255) >>> 1 : HEAP32[i6 + 12 >> 2] | 0) | 0, 21239, 17) | 0;
 HEAP32[i3 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 16144) | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
 __ZNSt3__16localeD2Ev(i3);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
 STACKTOP = i7;
 return;
}

function __ZN16ModelControlBase7scrMoveEbbii(i9, i1, i8, i2, i3) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i9 + 4 >> 2] | 0, i2, i3) | 0;
 i4 = i7 + -1 | 0;
 i5 = HEAP32[(HEAP32[i9 + 8 >> 2] | 0) + 104 >> 2] | 0;
 if ((i7 | 0) > 0 ? (i7 | 0) <= (HEAP32[i5 + 24 >> 2] | 0) : 0) {
  i2 = HEAP32[i5 + 44 >> 2] | 0;
  i7 = HEAP32[i2 + (i4 * 188 | 0) >> 2] | 0;
  i1 = ((HEAP32[i5 + 68 >> 2] | 0) + (HEAP32[i2 + (i4 * 188 | 0) + 4 >> 2] | 0) | 0) / 4 | 0;
  i6 = ((HEAP32[i5 + 76 >> 2] | 0) + (HEAP32[i2 + (i4 * 188 | 0) + 8 >> 2] | 0) | 0) / 4 | 0;
  i2 = ((HEAP32[i5 + 60 >> 2] | 0) + (HEAP32[i2 + (i4 * 188 | 0) + 12 >> 2] | 0) | 0) / 4 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i3 = i6;
    i4 = i2;
    break;
   }
  case 1:
   {
    i3 = i1;
    i4 = i2;
    i1 = i6;
    break;
   }
  case 2:
   {
    i3 = i1;
    i4 = i6;
    i1 = i2;
    break;
   }
  default:
   {
    i3 = -1;
    i4 = -1;
    i1 = -1;
   }
  }
  i9 = __ZN16BuildControlBase15choiseMouseMoveEib(i9 + 580 | 0, i4 << 9 & 65024 | i7 & 3 | i3 << 2 & 508 | i1 << 16 & 16711680, i8) | 0;
  return i9 | 0;
 }
 if (HEAP8[i9 + 593 >> 0] | 0) {
  i9 = 0;
  return i9 | 0;
 }
 if ((i2 | 0) == -1) i1 = HEAP32[i9 + 600 >> 2] | 0; else i1 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i9 + 584 >> 2] | 0, i2, i3) | 0;
 i9 = __ZN16BuildControlBase15choiseMouseMoveEib(i9 + 580 | 0, i1, i8) | 0;
 return i9 | 0;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP32[i1 >> 2] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 4, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i8 = i1 + 4 | 0;
  i9 = i2 + 36 | 0;
  i4 = i2 + 40 | 0;
  i5 = i12 + 8 | 0;
  i6 = i12;
  i7 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i9 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i4 >> 2] | 0, i1, i8, i10, i12, i5, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i6 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i7 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i7 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP8[i1 >> 0] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 1, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i9 = i1 + 1 | 0;
  i4 = i2 + 36 | 0;
  i5 = i2 + 40 | 0;
  i6 = i12 + 8 | 0;
  i7 = i12;
  i8 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 >> 2] | 0, i1, i9, i10, i12, i6, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i8 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i8 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = i1 + 4 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  i5 = HEAP8[i3 >> 0] | 0;
  i1 = (i5 & 1) == 0;
  i5 = i1 ? (i5 & 255) >>> 1 : HEAP32[i3 + 4 >> 2] | 0;
  i3 = i1 ? i3 + 1 | 0 : HEAP32[i3 + 8 >> 2] | 0;
  i1 = i4;
  L3 : do {
   while (1) {
    i6 = i2 + 16 | 0;
    i7 = HEAP8[i6 >> 0] | 0;
    i8 = (i7 & 1) == 0;
    i7 = i8 ? (i7 & 255) >>> 1 : HEAP32[i2 + 20 >> 2] | 0;
    i6 = _memcmp(i8 ? i6 + 1 | 0 : HEAP32[i2 + 24 >> 2] | 0, i3, i5 >>> 0 < i7 >>> 0 ? i5 : i7) | 0;
    if ((((i6 | 0) == 0 ? (i7 >>> 0 < i5 >>> 0 ? -2147483648 : 0) : i6) | 0) >= 0) {
     i1 = i2;
     break;
    }
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i2) break L3;
   }
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
  if ((i1 | 0) != (i4 | 0) ? (i8 = i1 + 16 | 0, i7 = HEAP8[i8 >> 0] | 0, i6 = (i7 & 1) == 0, i7 = i6 ? (i7 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0, i8 = _memcmp(i3, i6 ? i8 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0, i7 >>> 0 < i5 >>> 0 ? i7 : i5) | 0, (((i8 | 0) == 0 ? (i5 >>> 0 < i7 >>> 0 ? -2147483648 : 0) : i8) | 0) >= 0) : 0) {
   i8 = i1;
   return i8 | 0;
  }
 }
 i8 = i4;
 return i8 | 0;
}

function __ZNSt3__16vectorIN7SlvCube8SlvPieceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = (((HEAP32[i6 >> 2] | 0) - i8 | 0) / 20 | 0) + 1 | 0;
 if (i2 >>> 0 > 214748364) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = ((HEAP32[i9 >> 2] | 0) - i3 | 0) / 20 | 0;
 if (i1 >>> 0 < 107374182) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = (i3 | 0) / 20 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 214748364;
  i2 = (i3 | 0) / 20 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 20 | 0) | 0;
  i1 = i3;
 }
 i12 = i4 + (i2 * 20 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i12 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
 i12 = i4 + ((((i1 | 0) / -20 | 0) + i2 | 0) * 20 | 0) | 0;
 _memcpy(i12 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i6 >> 2] = i4 + ((i2 + 1 | 0) * 20 | 0);
 HEAP32[i9 >> 2] = i4 + (i5 * 20 | 0);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZN7PicsSetD2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 24 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  i7 = i8 + 28 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   i3 = i2;
   while (1) {
    i2 = i3 + -16 | 0;
    HEAP32[i7 >> 2] = i2;
    i5 = HEAP32[i3 + -12 >> 2] | 0;
    i4 = i5;
    if (i5) {
     i2 = i3 + -8 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) != (i5 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i4 | 0) >>> 3) << 3);
     __ZdlPv(i5);
     i2 = HEAP32[i7 >> 2] | 0;
    }
    if ((i2 | 0) == (i1 | 0)) break; else i3 = i2;
   }
   i1 = HEAP32[i6 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 + 12 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i8 + 16 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) return;
 i6 = i8 + 4 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = i2 + -900 | 0;
   HEAP32[i6 >> 2] = i3;
   i4 = HEAP32[i2 + -12 >> 2] | 0;
   i5 = i4;
   if (!i4) i2 = i3; else {
    i2 = i2 + -8 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i5 | 0) >>> 3) << 3);
    __ZdlPv(i4);
    i2 = HEAP32[i6 >> 2] | 0;
   }
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i8 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i5, i3, i6, i7) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i4 = i5 + 4 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L1 : do if (((i1 & 1) == 0 ? (i1 & 255) >>> 1 : i2) | 0) {
  if ((i3 | 0) != (i6 | 0)) {
   i1 = i6 + -4 | 0;
   if (i1 >>> 0 > i3 >>> 0) {
    i2 = i3;
    do {
     i8 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i1 >> 2] = i8;
     i2 = i2 + 4 | 0;
     i1 = i1 + -4 | 0;
    } while (i2 >>> 0 < i1 >>> 0);
   }
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = HEAP32[i4 >> 2] | 0;
  }
  i8 = (i1 & 1) == 0;
  i4 = i8 ? i5 + 1 | 0 : HEAP32[i5 + 8 >> 2] | 0;
  i6 = i6 + -4 | 0;
  i5 = i4 + (i8 ? (i1 & 255) >>> 1 : i2) | 0;
  i2 = HEAP8[i4 >> 0] | 0;
  i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
  L10 : do if (i6 >>> 0 > i3 >>> 0) {
   while (1) {
    if (!i1 ? (i2 << 24 >> 24 | 0) != (HEAP32[i3 >> 2] | 0) : 0) break;
    i4 = (i5 - i4 | 0) > 1 ? i4 + 1 | 0 : i4;
    i3 = i3 + 4 | 0;
    i2 = HEAP8[i4 >> 0] | 0;
    i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
    if (i3 >>> 0 >= i6 >>> 0) break L10;
   }
   HEAP32[i7 >> 2] = 4;
   break L1;
  } while (0);
  if (!i1 ? ((HEAP32[i6 >> 2] | 0) + -1 | 0) >>> 0 >= i2 << 24 >> 24 >>> 0 : 0) HEAP32[i7 >> 2] = 4;
 } while (0);
 return;
}

function ___stdio_read(i8, i7, i9) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i10 + 16 | 0;
 i2 = i10;
 i1 = i10 + 32 | 0;
 HEAP32[i1 >> 2] = i7;
 i4 = i1 + 4 | 0;
 i6 = i8 + 48 | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = i9 - ((i11 | 0) != 0 & 1);
 i5 = i8 + 44 | 0;
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 12 >> 2] = i11;
 if (!(HEAP32[2259] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i3 + 4 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(161, i8 | 0);
  HEAP32[i2 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i2 | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
 }
 if ((i1 | 0) >= 1) {
  i4 = HEAP32[i4 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i3 = HEAP32[i5 >> 2] | 0;
   i2 = i8 + 4 | 0;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i8 + 8 >> 2] = i3 + (i1 - i4);
   if (!(HEAP32[i6 >> 2] | 0)) i1 = i9; else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i7 + (i9 + -1) >> 0] = HEAP8[i3 >> 0] | 0;
    i1 = i9;
   }
  }
 } else {
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | i1 & 48 ^ 16;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZN12BaseGLWidgetD2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i6 >> 2] = 6208;
 i2 = HEAP32[i6 + 176 >> 2] | 0;
 i3 = i2;
 if (i2) {
  i4 = i6 + 180 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~(((i5 + -68 - i3 | 0) >>> 0) / 68 | 0) * 68 | 0);
  __ZdlPv(i2);
 }
 i2 = HEAP32[i6 + 96 >> 2] | 0;
 i3 = i2;
 if (i2) {
  i4 = i6 + 100 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~(((i5 + -68 - i3 | 0) >>> 0) / 68 | 0) * 68 | 0);
  __ZdlPv(i2);
 }
 i3 = i6 + 16 | 0;
 i2 = i6 + 24 | 0;
 if ((HEAP32[i2 >> 2] | 0) != 0 ? (i1 = HEAP32[i6 + 20 >> 2] | 0, i5 = (HEAP32[i3 >> 2] | 0) + 4 | 0, i4 = HEAP32[i1 >> 2] | 0, HEAP32[i4 + 4 >> 2] = HEAP32[i5 >> 2], HEAP32[HEAP32[i5 >> 2] >> 2] = i4, HEAP32[i2 >> 2] = 0, (i1 | 0) != (i3 | 0)) : 0) do {
  i5 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i5);
 } while ((i1 | 0) != (i3 | 0));
 i3 = i6 + 4 | 0;
 i2 = i6 + 12 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) return;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 i6 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[HEAP32[i6 >> 2] >> 2] = i5;
 HEAP32[i2 >> 2] = 0;
 if ((i1 | 0) == (i3 | 0)) return;
 do {
  i6 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i6);
 } while ((i1 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = (((HEAP32[i6 >> 2] | 0) - i8 | 0) / 12 | 0) + 1 | 0;
 if (i2 >>> 0 > 357913941) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = ((HEAP32[i9 >> 2] | 0) - i3 | 0) / 12 | 0;
 if (i1 >>> 0 < 178956970) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = (i3 | 0) / 12 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 357913941;
  i2 = (i3 | 0) / 12 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 12 | 0) | 0;
  i1 = i3;
 }
 i12 = i4 + (i2 * 12 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 i12 = i4 + ((((i1 | 0) / -12 | 0) + i2 | 0) * 12 | 0) | 0;
 _memcpy(i12 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i6 >> 2] = i4 + ((i2 + 1 | 0) * 12 | 0);
 HEAP32[i9 >> 2] = i4 + (i5 * 12 | 0);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorI4Vec3NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = (((HEAP32[i6 >> 2] | 0) - i8 | 0) / 12 | 0) + 1 | 0;
 if (i2 >>> 0 > 357913941) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = ((HEAP32[i9 >> 2] | 0) - i3 | 0) / 12 | 0;
 if (i1 >>> 0 < 178956970) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = (i3 | 0) / 12 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 357913941;
  i2 = (i3 | 0) / 12 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 12 | 0) | 0;
  i1 = i3;
 }
 i12 = i4 + (i2 * 12 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 i12 = i4 + ((((i1 | 0) / -12 | 0) + i2 | 0) * 12 | 0) | 0;
 _memcpy(i12 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i6 >> 2] = i4 + ((i2 + 1 | 0) * 12 | 0);
 HEAP32[i9 >> 2] = i4 + (i5 * 12 | 0);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function _mbtowc(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 L1 : do if (!i6) i1 = 0; else {
  do if (i4) {
   i5 = (i2 | 0) == 0 ? i1 : i2;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = i1 & 255;
   if (i1 << 24 >> 24 > -1) {
    HEAP32[i5 >> 2] = i2;
    i1 = i1 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i1 = i2 + -194 | 0;
   if (i1 >>> 0 <= 50) {
    i2 = i6 + 1 | 0;
    i3 = HEAP32[9080 + (i1 << 2) >> 2] | 0;
    if (i4 >>> 0 < 4 ? (i3 & -2147483648 >>> ((i4 * 6 | 0) + -6 | 0) | 0) != 0 : 0) break;
    i1 = HEAPU8[i2 >> 0] | 0;
    i4 = i1 >>> 3;
    if ((i4 + -16 | i4 + (i3 >> 26)) >>> 0 <= 7) {
     i1 = i1 + -128 | i3 << 6;
     if ((i1 | 0) >= 0) {
      HEAP32[i5 >> 2] = i1;
      i1 = 2;
      break L1;
     }
     i2 = HEAPU8[i6 + 2 >> 0] | 0;
     if ((i2 & 192 | 0) == 128) {
      i2 = i2 + -128 | i1 << 6;
      if ((i2 | 0) >= 0) {
       HEAP32[i5 >> 2] = i2;
       i1 = 3;
       break L1;
      }
      i1 = HEAPU8[i6 + 3 >> 0] | 0;
      if ((i1 & 192 | 0) == 128) {
       HEAP32[i5 >> 2] = i1 + -128 | i2 << 6;
       i1 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZN8tinyxml27StrPair18CollapseWhitespaceEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = i1 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAPU8[i1 >> 0] | 0;
 L1 : do if (!(i2 & 128)) {
  do {
   if (!(_isspace(i2) | 0)) {
    i4 = 5;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = HEAPU8[i1 >> 0] | 0;
  } while ((i2 & 128 | 0) == 0);
  HEAP32[i3 >> 2] = i1;
  i3 = i1;
 } else i4 = 5; while (0);
 if ((i4 | 0) == 5) {
  HEAP32[i3 >> 2] = i1;
  if (!i1) return; else i3 = i1;
 }
 i1 = HEAP8[i3 >> 0] | 0;
 if (!(i1 << 24 >> 24)) return; else {
  i4 = i1;
  i2 = i3;
  i1 = i3;
 }
 do {
  i3 = i4 & 255;
  if ((i3 & 128 | 0) == 0 ? (_isspace(i3) | 0) != 0 : 0) {
   i3 = HEAP8[i2 >> 0] | 0;
   i4 = i3 & 255;
   L17 : do if (!(i4 & 128)) {
    while (1) {
     if (!(_isspace(i4) | 0)) break;
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     i4 = i3 & 255;
     if (i4 & 128) {
      i4 = i2;
      i2 = i3;
      break L17;
     }
    }
    i4 = i2;
    i2 = HEAP8[i2 >> 0] | 0;
   } else {
    i4 = i2;
    i2 = i3;
   } while (0);
   if (!(i2 << 24 >> 24)) break;
   HEAP8[i1 >> 0] = 32;
   i2 = i4;
   i1 = i1 + 1 | 0;
  }
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  i4 = HEAP8[i2 >> 0] | 0;
 } while (i4 << 24 >> 24 != 0);
 HEAP8[i1 >> 0] = 0;
 return;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 8 | 0;
 i3 = i10 + 4 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 4 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 4 | 0;
 i3 = i10 + 8 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP8[i3 >> 0] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 1 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZN11CubeDocBaseC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 7008;
 HEAP8[i1 + 4 >> 0] = 0;
 HEAP8[i1 + 5 >> 0] = 1;
 HEAP8[i1 + 6 >> 0] = 1;
 HEAP32[i1 + 8 >> 2] = 2e3;
 HEAP32[i1 + 12 >> 2] = 8;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 1;
 HEAP8[i1 + 24 >> 0] = 1;
 HEAP32[i1 + 28 >> 2] = 1;
 HEAP32[i1 + 32 >> 2] = 1;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 48 >> 0] = 0;
 HEAP8[i1 + 49 >> 0] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = -1;
 HEAPF32[i1 + 60 >> 2] = .5;
 HEAPF32[i1 + 64 >> 2] = .5;
 HEAPF32[i1 + 68 >> 2] = .5;
 i3 = i1 + 44 | 0;
 HEAP8[i3 >> 0] = 0;
 HEAP8[i3 + 1 >> 0] = 0;
 HEAP8[i3 + 2 >> 0] = 0;
 HEAP8[i3 + 3 >> 0] = 0;
 i3 = i1 + 72 | 0;
 i2 = i1 + 92 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 i2 = __Znwj(1500300) | 0;
 __ZN10BuildWorldC2Ev(i2);
 HEAP32[i1 + 116 >> 2] = i2;
 i2 = __Znwj(24) | 0;
 HEAP32[i2 >> 2] = -1;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP8[i3 + 16 >> 0] = 0;
 HEAP32[i1 + 112 >> 2] = i2;
 HEAP32[1549] = i1;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 11) i6 = 10; else i6 = (i2 + 16 & -16) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 10) {
   i2 = __Znwj(i6 + 1 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 1 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 1 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _memcpy(i2 | 0, i4 | 0, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 2) i6 = 1; else i6 = (i2 + 4 & -4) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 1) {
   i2 = __Znwj((i6 << 2) + 4 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 4 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 4 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _wmemcpy(i2, i4, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i8, i1, i3, i5, i4, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i10 = (i9 & 1) == 0;
 i1 = i10 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0;
 i9 = i10 ? (i9 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0;
 i2 = i1 + i9 | 0;
 if ((i9 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 i1 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i5, i4, (HEAP8[i6 >> 0] & 1) == 0 ? i6 + 1 | 0 : HEAP32[i6 + 8 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i10 = _strlen(i1) | 0;
 i2 = i1 + i10 | 0;
 if ((i10 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i7;
 return;
}

function __ZN4Mesh6addIdxENS_4TypeE(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i7;
 HEAP32[i2 >> 2] = 0;
 i6 = i2 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP8[i2 + 16 >> 0] = 1;
 i5 = i4 + 112 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i4 + 116 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i6 = i1 + 12 | 0;
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  HEAP8[i6 + 4 >> 0] = HEAP8[i3 + 4 >> 0] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 20;
  i6 = HEAP32[i5 >> 2] | 0;
  i6 = i6 + -20 | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 __ZNSt3__16vectorIN4Mesh6IdxBufENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i4 + 108 | 0, i2);
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  i6 = HEAP32[i5 >> 2] | 0;
  i6 = i6 + -20 | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i6 >> 2] = i2 + (~((i2 + -2 - i1 | 0) >>> 1) << 1);
 __ZdlPv(i1);
 i6 = HEAP32[i5 >> 2] | 0;
 i6 = i6 + -20 | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__16vectorI4Vec4NS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 4) + 1 | 0;
 if (i2 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 4 >>> 0 < 134217727) {
  i1 = i1 >> 3;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 4;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 268435455;
  i2 = i3 >> 4;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 4) | 0;
  i1 = i3;
 }
 i12 = i4 + (i2 << 4) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 4);
 HEAP32[i9 >> 2] = i4 + (i5 << 4);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZN8MainCtrlC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 __ZN11CubeDocBaseC2Ev(i1);
 i2 = i1 + 128 | 0;
 __ZN12BaseGLWidgetC2Ev(i2);
 i3 = i1 + 408 | 0;
 __ZN16ModelControlBaseC2EP12BaseGLWidgetP11CubeDocBase(i3, i2, i1);
 i2 = i1 + 2224 | 0;
 HEAP32[i2 >> 2] = 5056;
 i4 = i1 + 2228 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i1 + 2248 >> 2] = 0;
 HEAP8[i1 + 2252 >> 0] = 0;
 i4 = i1 + 2256 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP8[i1 + 2264 >> 0] = 0;
 HEAP32[i1 + 2268 >> 2] = 0;
 HEAP32[i1 + 2272 >> 2] = 0;
 HEAP8[i1 + 2276 >> 0] = 0;
 i4 = i1 + 2280 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i2 >> 2] = 5032;
 HEAP8[i1 + 2308 >> 0] = 0;
 i4 = i1 + 144 | 0;
 i5 = __Znwj(12) | 0;
 HEAP32[i5 + 8 >> 2] = i3;
 HEAP32[i5 + 4 >> 2] = i4;
 i6 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = i6;
 HEAP32[i6 + 4 >> 2] = i5;
 HEAP32[i4 >> 2] = i5;
 i4 = i1 + 152 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 HEAP32[i1 + 2304 >> 2] = i3;
 HEAP32[i1 + 88 >> 2] = i2;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9;
 i4 = HEAP32[i8 + 8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if (i4 - i1 >> 2 >>> 0 < i6 >>> 0) {
  i2 = HEAP32[i8 >> 2] | 0;
  i5 = i1 - i2 >> 2;
  i3 = i5 + i6 | 0;
  if (i3 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = i4 - i2 | 0;
  if (i1 >> 2 >>> 0 < 536870911) {
   i1 = i1 >> 1;
   i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  } else i1 = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i7, i1, i5, i8 + 16 | 0);
  i5 = i7 + 8 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  _memset(i4 | 0, 0, i6 << 2 | 0) | 0;
  HEAP32[i5 >> 2] = i4 + (i6 << 2);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i8, i7);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i7);
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i8, i6);
 STACKTOP = i9;
 return;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i5 + 32 | 0;
 i3 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i6 = i5;
 i5 = i5 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if ((i1 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) {
  i1 = i4 + 48 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
   HEAP32[i3 >> 2] = HEAP32[2258];
   _abort_message(29959, i3);
  }
  if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i4 + 44 >> 2] | 0; else i1 = i4 + 80 | 0;
  HEAP32[i5 >> 2] = i1;
  i4 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i4 + 4 >> 2] | 0;
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[2888 >> 2] | 0) + 16 >> 2] & 63](2888, i4, i5) | 0) {
   i8 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[2258] | 0;
   i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](i8) | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i6 + 4 >> 2] = i1;
   HEAP32[i6 + 8 >> 2] = i8;
   _abort_message(29873, i6);
  } else {
   HEAP32[i8 >> 2] = HEAP32[2258];
   HEAP32[i8 + 4 >> 2] = i1;
   _abort_message(29918, i8);
  }
 }
 _abort_message(29997, i7);
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (i2 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i2 & 1024) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i7 = i2 & 260;
 i5 = i2 >>> 14;
 i8 = (i7 | 0) == 260;
 if (i8) i6 = 0; else {
  HEAP8[i1 >> 0] = 46;
  HEAP8[i1 + 1 >> 0] = 42;
  i1 = i1 + 2 | 0;
  i6 = 1;
 }
 i2 = HEAP8[i4 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i3 = i1;
  while (1) {
   i4 = i4 + 1 | 0;
   i1 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break; else i3 = i1;
  }
 }
 L14 : do switch (i7 | 0) {
 case 4:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 102;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 70;
   break L14;
  }
 case 256:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 101;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 69;
   break L14;
  }
 default:
  {
   i2 = (i5 & 1 | 0) != 0;
   if (i8) if (i2) {
    HEAP8[i1 >> 0] = 65;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 97;
    break L14;
   } else if (i2) {
    HEAP8[i1 >> 0] = 71;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 103;
    break L14;
   }
  }
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 1;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 >> 2;
 do if (i6) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 4 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i7 + ((i8 - i3 | 0) >>> 2) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + (i7 << 2) | 0;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i4 + (i3 << 2) >> 2] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i8 = i11 + 8 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = i1;
 if (i3 - i2 >> 2 >>> 0 >= i10 >>> 0) {
  _memset(i1 | 0, 0, i10 << 2 | 0) | 0;
  HEAP32[i9 >> 2] = i1 + (i10 << 2);
  return;
 }
 i6 = HEAP32[i11 >> 2] | 0;
 i7 = i6;
 i2 = (i2 - i7 >> 2) + i10 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i4 = i6;
 i1 = i3 - i4 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 8;
 } else {
  i3 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 8;
 }
 if ((i12 | 0) == 8) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 _memset(i4 + (i2 << 2) | 0, 0, i10 << 2 | 0) | 0;
 _memcpy(i4 | 0, i6 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i9 >> 2] = i4 + (i2 + i10 << 2);
 HEAP32[i8 >> 2] = i4 + (i5 << 2);
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 10;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 | 0;
 do if ((i8 | 0) != (i5 | 0)) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i8 + (i7 - i3) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + i7 | 0;
   while (1) {
    HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 1 | 0;
   }
  }
  HEAP8[i4 + i3 >> 0] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function __ZN16ModelControlBase5paintEP12BaseGLWidgetP11CubeDocBaseP7SlvCubebii(i6, i7, i10, i8, i1, i11) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12;
 i5 = HEAP32[i10 >> 2] | 0;
 i1 = (((HEAP32[i10 + 4 >> 2] | 0) - i5 | 0) / 20 | 0 | 0) < (i1 | 0) ? 0 : i1;
 if (!i8) {
  d4 = +HEAPF32[i7 + 60 >> 2];
  d2 = +HEAPF32[i7 + 64 >> 2];
  d3 = +HEAPF32[i7 + 68 >> 2];
  if ((i1 | 0) > -1 ? (HEAP32[(HEAP32[(HEAP32[1556] | 0) + 4 >> 2] | 0) + (HEAP32[HEAP32[i5 + (i1 * 20 | 0) + 8 >> 2] >> 2] << 6) + 60 >> 2] | 0) > 0 : 0) _glClearColor(.25, .25, .25, 1.0); else _glClearColor(+d4, +d2, +d3, 1.0);
  _glClear(16640);
 };
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 __ZNK10SlvPainter5paintEP12BaseGLWidgetbii10ELinesDraw(i10 + 28 | 0, i6, i8, i1, i11, HEAP32[i7 + 52 >> 2] | 0);
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 STACKTOP = i12;
 return;
}

function __ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = __ZN8tinyxml27StrPair6GetStrEv((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0) + 12 | 0) | 0;
 i1 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i4 = i2;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i1 >> 0] | 0;
   if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i4 << 24 >> 24 == i7 << 24 >> 24 : 0))) {
    i3 = i4;
    break;
   }
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  }
  if ((i2 | 0) != 2147483647) if (!(i3 << 24 >> 24)) {
   i5 = i1;
   i6 = 8;
   break;
  } else break; else {
   i7 = 1;
   return i7 | 0;
  }
 } else {
  i5 = i1;
  i6 = 8;
 } while (0);
 if ((i6 | 0) == 8 ? (HEAP8[i5 >> 0] | 0) == 0 : 0) {
  i7 = 1;
  return i7 | 0;
 }
 i7 = 0;
 return i7 | 0;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i2 | 0) != 0;
 L1 : do if (i3 & (i1 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   i3 = (i2 | 0) != 0;
   if (!(i3 & (i1 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i2 = 0;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) {
   i3 = Math_imul(i6, 16843009) | 0;
   L11 : do if (i2 >>> 0 > 3) while (1) {
    i6 = HEAP32[i1 >> 2] ^ i3;
    if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009) break;
    i1 = i1 + 4 | 0;
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 <= 3) {
     i7 = 11;
     break L11;
    }
   } else i7 = 11; while (0);
   if ((i7 | 0) == 11) if (!i2) {
    i2 = 0;
    break;
   }
   while (1) {
    if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break L8;
    i1 = i1 + 1 | 0;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i2 = 0;
     break;
    }
   }
  }
 } while (0);
 return ((i2 | 0) != 0 ? i1 : 0) | 0;
}

function __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 3) | 0;
  i1 = i3;
 }
 i3 = i10;
 i10 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = i4 + (i2 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 3);
 HEAP32[i9 >> 2] = i4 + (i5 << 3);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIN7SlvCube6SlvPicENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 3) | 0;
  i1 = i3;
 }
 i3 = i10;
 i10 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = i4 + (i2 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 3);
 HEAP32[i9 >> 2] = i4 + (i5 << 3);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i1) | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = __ZN8tinyxml27StrPair6GetStrEv((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i1) | 0) + 12 | 0) | 0;
 i1 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i4 = i2;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i1 >> 0] | 0;
   if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i4 << 24 >> 24 == i7 << 24 >> 24 : 0))) {
    i3 = i4;
    break;
   }
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  }
  if ((i2 | 0) != 2147483647) if (!(i3 << 24 >> 24)) {
   i5 = i1;
   i6 = 8;
   break;
  } else break; else {
   i7 = 1;
   return i7 | 0;
  }
 } else {
  i5 = i1;
  i6 = 8;
 } while (0);
 if ((i6 | 0) == 8 ? (HEAP8[i5 >> 0] | 0) == 0 : 0) {
  i7 = 1;
  return i7 | 0;
 }
 i7 = 0;
 return i7 | 0;
}

function __ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i1) | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = __ZN8tinyxml27StrPair6GetStrEv((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i1) | 0) + 12 | 0) | 0;
 i1 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i4 = i2;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i1 >> 0] | 0;
   if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i4 << 24 >> 24 == i7 << 24 >> 24 : 0))) {
    i3 = i4;
    break;
   }
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  }
  if ((i2 | 0) != 2147483647) if (!(i3 << 24 >> 24)) {
   i5 = i1;
   i6 = 8;
   break;
  } else break; else {
   i7 = 1;
   return i7 | 0;
  }
 } else {
  i5 = i1;
  i6 = 8;
 } while (0);
 if ((i6 | 0) == 8 ? (HEAP8[i5 >> 0] | 0) == 0 : 0) {
  i7 = 1;
  return i7 | 0;
 }
 i7 = 0;
 return i7 | 0;
}

function __ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = __ZN8tinyxml27StrPair6GetStrEv((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) + 12 | 0) | 0;
 i1 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i4 = i2;
  i2 = 0;
  while (1) {
   i7 = HEAP8[i1 >> 0] | 0;
   if (!((i2 | 0) != 2147483647 & (i7 << 24 >> 24 != 0 ? i4 << 24 >> 24 == i7 << 24 >> 24 : 0))) {
    i3 = i4;
    break;
   }
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  }
  if ((i2 | 0) != 2147483647) if (!(i3 << 24 >> 24)) {
   i5 = i1;
   i6 = 8;
   break;
  } else break; else {
   i7 = 1;
   return i7 | 0;
  }
 } else {
  i5 = i1;
  i6 = 8;
 } while (0);
 if ((i6 | 0) == 8 ? (HEAP8[i5 >> 0] | 0) == 0 : 0) {
  i7 = 1;
  return i7 | 0;
 }
 i7 = 0;
 return i7 | 0;
}

function __ZN6ImgBuf4copyEiiii(i10, i12, i13, i11, i9) {
 i10 = i10 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = __Znwj(20) | 0;
 HEAP32[i7 >> 2] = i11;
 HEAP32[i7 + 4 >> 2] = i9;
 i1 = i7 + 8 | 0;
 i2 = Math_imul(i9, i11) | 0;
 HEAP32[i1 >> 2] = 0;
 i3 = i7 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = i7 + 16 | 0;
 HEAP32[i4 >> 2] = 0;
 do if (i2) if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1); else {
  i5 = i2 << 2;
  i8 = __Znwj(i5) | 0;
  HEAP32[i1 >> 2] = i8;
  i6 = i8 + (i2 << 2) | 0;
  HEAP32[i4 >> 2] = i6;
  _memset(i8 | 0, 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = i6;
  break;
 } else i8 = 0; while (0);
 i1 = HEAP32[i10 + 8 >> 2] | 0;
 if ((i9 | 0) <= 0) return i7 | 0;
 i2 = (i11 | 0) > 0;
 i6 = 0;
 do {
  if (i2) {
   i3 = i6 + i13 | 0;
   i4 = Math_imul(i6, i11) | 0;
   i5 = 0;
   do {
    HEAP32[i8 + (i5 + i4 << 2) >> 2] = HEAP32[i1 + (i5 + i12 + (Math_imul(HEAP32[i10 >> 2] | 0, i3) | 0) << 2) >> 2];
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i11 | 0));
  }
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i9 | 0));
 return i7 | 0;
}

function __ZNSt3__16vectorI8AddedPicNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 3) | 0;
  i1 = i3;
 }
 i3 = i10;
 i10 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = i4 + (i2 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 3);
 HEAP32[i9 >> 2] = i4 + (i5 << 3);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorI7TypeRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 3) | 0;
  i1 = i3;
 }
 i3 = i10;
 i10 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = i4 + (i2 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 3);
 HEAP32[i9 >> 2] = i4 + (i5 << 3);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorI7PdefRefNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 3) | 0;
  i1 = i3;
 }
 i3 = i10;
 i10 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = i4 + (i2 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 3);
 HEAP32[i9 >> 2] = i4 + (i5 << 3);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEEixERSA_(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 i4 = __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(i6, i3, i2) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i6 = i1;
  i6 = i6 + 28 | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i5 = __Znwj(32) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i5 + 16 | 0, i2);
 HEAP32[i5 + 28 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i5;
 i1 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
 if (!i1) i1 = i5; else {
  HEAP32[i6 >> 2] = i1;
  i1 = HEAP32[i4 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i6 + 4 >> 2] | 0, i1);
 i6 = i6 + 8 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 i6 = i5;
 i6 = i6 + 28 | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN12BaseGLWidget4initEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](i4, 22185);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClearDepthf(1.0);
 _glEnable(2929);
 if (HEAP8[i4 + 192 >> 0] | 0) _glEnable(2884);
 HEAP32[i4 + 228 >> 2] = 100;
 __ZN12BaseGLWidget10reCalcProjEb(i4, 1);
 i1 = i4 + 108 | 0;
 i2 = i1;
 i3 = i2 + 60 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAPF32[i1 >> 2] = 1.0;
 HEAPF32[i4 + 128 >> 2] = 1.0;
 HEAPF32[i4 + 148 >> 2] = 1.0;
 HEAPF32[i4 + 168 >> 2] = 1.0;
 if (HEAP8[i4 + 233 >> 0] | 0) {
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, 3, -20, 20);
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, 2, -5, 0);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](i4, 22196);
 i3 = i4 + 16 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) return;
 i2 = i1;
 do {
  i4 = HEAP32[i2 + 8 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i1;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function ___cxx_global_array_dtor46(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17292);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17280);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17268);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17256);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17244);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17232);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17220);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17208);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17196);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17184);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17172);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17160);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17148);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(17136);
 return;
}

function ___cxx_global_array_dtor(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17120);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17108);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17096);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17084);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17072);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17060);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17048);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17036);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17024);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17012);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(17e3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16988);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16976);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16964);
 return;
}

function _fread(i2, i9, i1, i8) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i6 = Math_imul(i1, i9) | 0;
 if ((HEAP32[i8 + 76 >> 2] | 0) > -1) i7 = ___lockfile(i8) | 0; else i7 = 0;
 i3 = i8 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i3 = i8 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = (HEAP32[i8 + 8 >> 2] | 0) - i4 | 0;
 if ((i5 | 0) > 0) {
  i5 = i5 >>> 0 < i6 >>> 0 ? i5 : i6;
  _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = i4 + i5;
  i2 = i2 + i5 | 0;
  i3 = i6 - i5 | 0;
 } else i3 = i6;
 L7 : do if (!i3) i10 = 13; else {
  i5 = i8 + 32 | 0;
  i4 = i3;
  while (1) {
   if (___toread(i8) | 0) {
    i1 = i4;
    break;
   }
   i3 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 63](i8, i2, i4) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) {
    i1 = i4;
    break;
   }
   if ((i4 | 0) == (i3 | 0)) {
    i10 = 13;
    break L7;
   } else {
    i2 = i2 + i3 | 0;
    i4 = i4 - i3 | 0;
   }
  }
  if (i7) ___unlockfile(i8);
  i1 = ((i6 - i1 | 0) >>> 0) / (i9 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i7) ___unlockfile(i8);
 return i1 | 0;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 L1 : do if ((i1 | 0) == (i6 | 0)) {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } else {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  do if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0) {
    i1 = 2147483647;
    break L1;
   }
  } else {
   if ((i2 | 0) < -1 | (i2 | 0) == -1 & i1 >>> 0 < 2147483648) {
    HEAP32[i7 >> 2] = 4;
    break;
   }
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
    HEAP32[i7 >> 2] = 4;
    i1 = 2147483647;
    break L1;
   } else break L1;
  } while (0);
  i1 = -2147483648;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN6MyFile8readNumsEiz(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10;
 i7 = i10 + 24 | 0;
 i8 = i10 + 8 | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) != 1) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = i1;
 L4 : do if ((i6 | 0) > 0) {
  i5 = i2 + 20 | 0;
  i4 = i2 + 28 | 0;
  i1 = 0;
  while (1) {
   i2 = (HEAP32[i8 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i8 >> 2] = i2 + 4;
   i2 = HEAP32[i5 >> 2] | 0;
   if (!i2) {
    i2 = HEAP32[i4 >> 2] | 0;
    if (i2) {
     HEAP32[i7 >> 2] = 0;
     HEAP32[i3 >> 2] = _strtoul(i2, i7, 10) | 0;
     i2 = HEAP32[i7 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i4 >> 2] | 0)) break;
     HEAP32[i4 >> 2] = i2;
    }
   } else {
    HEAP32[i9 >> 2] = i3;
    if ((_fscanf(i2, 22868, i9) | 0) < 1) break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) break L4;
  }
  i9 = i1;
  STACKTOP = i10;
  return i9 | 0;
 } else i1 = 0; while (0);
 i9 = i1;
 STACKTOP = i10;
 return i9 | 0;
}

function __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIP9GlTextureNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIP7SlvCubeNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIP6ImgBufNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZN12FloatUniformC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8812;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8812;
  STACKTOP = i7;
  return;
 }
}

function __ZN11Vec3UniformC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8860;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8860;
  STACKTOP = i7;
  return;
 }
}

function __ZN11Mat4UniformC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8836;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8836;
  STACKTOP = i7;
  return;
 }
}

function __ZN11Mat3UniformC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8848;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8848;
  STACKTOP = i7;
  return;
 }
}

function __ZN11FloatAttribC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8800;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8800;
  STACKTOP = i7;
  return;
 }
}

function __ZN10Vec3AttribC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8824;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6900;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8824;
  STACKTOP = i7;
  return;
 }
}

function __ZN10IntUniformC2EPKcP13ShaderProgram(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7 + 12 | 0;
 i4 = i7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, i1, _strlen(i1) | 0);
 HEAP32[i6 >> 2] = 5080;
 HEAP32[i6 + 4 >> 2] = -1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6 + 8 | 0, i4);
 HEAP32[i3 >> 2] = i6;
 i1 = i5 + 68 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i5 + 72 >> 2] | 0)) {
  __ZNSt3__16vectorIP11ShaderParamNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5 + 64 | 0, i3);
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8872;
  STACKTOP = i7;
  return;
 } else {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i6 >> 2] = 6888;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  HEAP32[i6 >> 2] = 8872;
  STACKTOP = i7;
  return;
 }
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((1073741806 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 4 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 536870887) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i8) _wmemcpy(i3, i6, i8) | 0;
 if (i7) _wmemcpy(i3 + (i8 << 2) | 0, i5, i7) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _wmemcpy(i3 + (i7 + i8 << 2) | 0, i6 + (i9 + i8 << 2) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 1) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP32[i3 + (i10 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((-18 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 1 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 2147483623) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i8) _memcpy(i3 | 0, i6 | 0, i8 | 0) | 0;
 if (i7) _memcpy(i3 + i8 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _memcpy(i3 + (i7 + i8) | 0, i6 + (i9 + i8) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 10) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP8[i3 + i10 >> 0] = 0;
 return;
}

function ___fwritex(i3, i4, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i5 = 4;
 } else i1 = 0; else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i7 = i6 + 20 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  if ((i2 - i5 | 0) >>> 0 < i4 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i3, i4) | 0;
   break;
  }
  L9 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i1 = i4;
   while (1) {
    if (!i1) {
     i2 = i5;
     i1 = 0;
     break L9;
    }
    i2 = i1 + -1 | 0;
    if ((HEAP8[i3 + i2 >> 0] | 0) == 10) break; else i1 = i2;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i3, i1) | 0) >>> 0 < i1 >>> 0) break L4;
   i4 = i4 - i1 | 0;
   i3 = i3 + i1 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
  } else {
   i2 = i5;
   i1 = 0;
  } while (0);
  _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i4;
  i1 = i1 + i4 | 0;
 } while (0);
 return i1 | 0;
}

function __ZN7SlvCubeD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i1 = HEAP32[i5 + 68 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 72 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -64 - i2 | 0) >>> 6) << 6);
  __ZdlPv(i1);
 }
 i3 = i5 + 52 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 56 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -192 | 0;
    HEAP32[i4 >> 2] = i6;
    __ZN4MeshD2Ev(i6);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 16 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 i3 = HEAP32[i5 >> 2] | 0;
 if (!i3) return;
 i1 = i5 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -20 - i3 | 0) >>> 0) / 20 | 0) * 20 | 0);
 __ZdlPv(i3);
 return;
}

function __ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) i1 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 i4 = i1 + 212 | 0;
 i3 = __ZN8tinyxml28MemPoolTILi48EE5AllocEv(i4) | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 i1 = i3 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i3 >> 2] = 7072;
 i1 = i3 + 44 | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP32[i3 + 40 >> 2] = i4;
 i4 = i3 + 12 | 0;
 i10 = i3 + 16 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 i5 = i3 + 20 | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = _strlen(i9) | 0;
 i8 = i6 + 1 | 0;
 i7 = __Znaj(i8) | 0;
 HEAP32[i10 >> 2] = i7;
 _memcpy(i7 | 0, i9 | 0, i8 | 0) | 0;
 HEAP32[i5 >> 2] = i7 + i6;
 HEAP32[i4 >> 2] = 512;
 HEAP8[i1 >> 0] = HEAP8[i2 + 44 >> 0] | 0;
 return i3 | 0;
}

function __ZN13ShaderProgram8currenttI15NoiseSlvProgramEEPT_v() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1280] | 0;
 if (!i1) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i1 = ___dynamic_cast(i1, 2368, 2424, 0) | 0;
 if (!i1) {
  i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 29102, 26) | 0;
  HEAP32[i2 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 16144) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 10) | 0;
  __ZNSt3__16localeD2Ev(i2);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i1) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
  i3 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i3 >> 2] = 7152;
  HEAP32[i3 + 4 >> 2] = 29129;
  ___cxa_throw(i3 | 0, 2608, 44);
 } else {
  i2 = i1;
  STACKTOP = i3;
  return i2 | 0;
 }
 return 0;
}

function __ZN13ShaderProgram8currenttI11BaseProgramEEPT_v() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1280] | 0;
 if (!i1) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i1 = ___dynamic_cast(i1, 2368, 2352, 0) | 0;
 if (!i1) {
  i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 29102, 26) | 0;
  HEAP32[i2 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 16144) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 10) | 0;
  __ZNSt3__16localeD2Ev(i2);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i1) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
  i3 = ___cxa_allocate_exception(8) | 0;
  HEAP32[i3 >> 2] = 7152;
  HEAP32[i3 + 4 >> 2] = 29129;
  ___cxa_throw(i3 | 0, 2608, 44);
 } else {
  i2 = i1;
  STACKTOP = i3;
  return i2 | 0;
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i14 = i6 + 8 | 0;
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 127](i14) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i12 = HEAP8[i14 >> 0] | 0;
 i13 = (i12 & 1) == 0;
 i2 = i14 + 4 | 0;
 i1 = i13 ? i2 : HEAP32[i14 + 8 >> 2] | 0;
 i2 = i1 + ((i13 ? (i12 & 255) >>> 1 : HEAP32[i2 >> 2] | 0) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _vsnprintf(i3, i1, i10, i8) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i2 = i11 + 112 | 0;
 i9 = i11;
 i4 = i9;
 i5 = 9356;
 i6 = i4 + 112 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i1 = 1;
  i7 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else {
  i2 = i3;
  i7 = 4;
 }
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i9 + 48 >> 2] = i7;
  i3 = i9 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i9 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i9 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i9 + 28 >> 2] = i1;
  i1 = _vfprintf(i9, i10, i8) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNK10SlvPainter10paintLinesEibP12BaseGLWidget10ELinesDraw(i3, i8, i2, i4, i1) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i7 + 16 | 0;
 i5 = i7;
 i6 = i3 + 24 | 0;
 if ((((HEAP32[i3 + 28 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) / 192 | 0) >>> 0 <= i8 >>> 0) {
  STACKTOP = i7;
  return;
 }
 i3 = __ZN13ShaderProgram8currenttI15NoiseSlvProgramEEPT_v() | 0;
 __ZN12BaseGLWidget12transformMatEv(i2, i4);
 i1 = HEAP32[i3 + 80 >> 2] | 0;
 if ((i1 | 0) != -1) _glUniformMatrix4fv(i1 | 0, 1, 0, i2 | 0);
 i1 = HEAP32[i3 + 220 >> 2] | 0;
 if ((i1 | 0) != -1) _glUniform1i(i1 | 0, 256);
 HEAPF32[i5 >> 2] = .800000011920929;
 HEAPF32[i5 + 4 >> 2] = .800000011920929;
 HEAPF32[i5 + 8 >> 2] = .800000011920929;
 i1 = HEAP32[i3 + 100 >> 2] | 0;
 if ((i1 | 0) != -1) _glUniform3fv(i1 | 0, 1, i5 | 0);
 _glPolygonOffset(0.0, 0.0);
 __ZNK4Mesh5paintEb((HEAP32[i6 >> 2] | 0) + (i8 * 192 | 0) | 0, 0);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i6 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 127](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP8[i12 >> 0] | 0;
 i13 = (i2 & 1) == 0;
 i1 = i13 ? i12 + 1 | 0 : HEAP32[i12 + 8 >> 2] | 0;
 i2 = i1 + (i13 ? (i2 & 255) >>> 1 : HEAP32[i12 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i7, i8, i1, i2, i6, i3, i4) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i9 + 4 | 0;
 i1 = i9;
 HEAP32[i1 >> 2] = i5 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i7 + 8 | 0, i5, i1, i6, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i5 | 0) != (i6 | 0)) do {
  i4 = HEAP8[i5 >> 0] | 0;
  do if (i1) {
   i2 = i1 + 24 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i8 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 63](i1, i4 & 255) | 0) == -1;
    i1 = i8 ? 0 : i1;
    break;
   } else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i4;
    break;
   }
  } else i1 = 0; while (0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i6 | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN10RunContext18notifyLastSolutionEb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1;
 i2 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 20436, 10) | 0;
 HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i3 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 16144) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, 10) | 0;
 __ZNSt3__16localeD2Ev(i4);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i3) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 i2 = HEAP32[30] | 0;
 HEAP32[32] = ((HEAP32[i2 + 12 >> 2] | 0) - (HEAP32[i2 + 8 >> 2] | 0) >> 2) + -1;
 HEAP32[33] = HEAP32[(HEAP32[28] | 0) + 24 >> 2];
 if (HEAP8[2316] | 0) {
  STACKTOP = i1;
  return;
 }
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 STACKTOP = i1;
 return;
}

function __ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i1) i1 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 i8 = i1 + 284 | 0;
 i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i8) | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i2 >> 2] = 6512;
 HEAP32[i2 + 40 >> 2] = i8;
 i7 = (i7 | 0) != 0 ? i7 : 22943;
 i1 = i2 + 12 | 0;
 i8 = i2 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 i3 = i2 + 20 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = _strlen(i7) | 0;
 i6 = i4 + 1 | 0;
 i5 = __Znaj(i6) | 0;
 HEAP32[i8 >> 2] = i5;
 _memcpy(i5 | 0, i7 | 0, i6 | 0) | 0;
 HEAP32[i3 >> 2] = i5 + i4;
 HEAP32[i1 >> 2] = 512;
 return i2 | 0;
}

function ___shgetc(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = i6 + 104 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) != 0 ? (HEAP32[i6 + 108 >> 2] | 0) >= (i5 | 0) : 0) i7 = 4; else {
  i1 = ___uflow(i6) | 0;
  if ((i1 | 0) >= 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   i2 = i6 + 8 | 0;
   if (i4) {
    i3 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i6 + 4 >> 2] | 0;
    i2 = i3;
    i4 = i4 - (HEAP32[i6 + 108 >> 2] | 0) + -1 | 0;
    if ((i2 - i5 | 0) > (i4 | 0)) HEAP32[i6 + 100 >> 2] = i5 + i4; else i7 = 9;
   } else {
    i3 = HEAP32[i2 >> 2] | 0;
    i2 = i3;
    i7 = 9;
   }
   if ((i7 | 0) == 9) HEAP32[i6 + 100 >> 2] = i2;
   i2 = HEAP32[i6 + 4 >> 2] | 0;
   if (i3) {
    i6 = i6 + 108 | 0;
    HEAP32[i6 >> 2] = i3 + 1 - i2 + (HEAP32[i6 >> 2] | 0);
   }
   i2 = i2 + -1 | 0;
   if ((HEAPU8[i2 >> 0] | 0 | 0) != (i1 | 0)) HEAP8[i2 >> 0] = i1;
  } else i7 = 4;
 }
 if ((i7 | 0) == 4) {
  HEAP32[i6 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i6, i7, i1, i2, i5, i3, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 HEAP32[i1 >> 2] = i2 + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i6 + 8 | 0, i2, i1, i5, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  i5 = i2;
  do {
   i2 = HEAP32[i5 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = i1 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 63](i1, i2) | 0; else {
     HEAP32[i3 >> 2] = i4 + 4;
     HEAP32[i4 >> 2] = i2;
    }
    i1 = (i2 | 0) == -1 ? 0 : i1;
   }
   i5 = i5 + 4 | 0;
  } while ((i5 | 0) != (i6 | 0));
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__16vectorI10ShapePlaceNS_9allocatorIS1_EEEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i2 >> 2] = 0;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 if (!i1) return;
 if (i1 >>> 0 > 82595524) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i2);
 i4 = __Znwj(i1 * 52 | 0) | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i2 >> 2] = i4;
 HEAP32[i2 + 8 >> 2] = i4 + (i1 * 52 | 0);
 i2 = i4;
 do {
  HEAP32[i2 >> 2] = -1;
  i5 = i2 + 4 | 0;
  i4 = i2 + 24 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i4 >> 2] = -1;
  HEAP32[i4 + 4 >> 2] = -1;
  HEAP32[i4 + 8 >> 2] = -1;
  HEAP32[i4 + 12 >> 2] = -1;
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAP32[i2 + 48 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 52 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i6, i7);
 L1 : do if (HEAP8[i6 >> 0] | 0) {
  i2 = HEAP32[i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  i3 = i2;
  do if (i2) {
   i4 = i3 + 24 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] & 63](i3, i5 & 255) | 0) == -1) break; else break L1; else {
    HEAP32[i4 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i5;
    break L1;
   }
  } while (0);
  i5 = i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i8;
 return i7 | 0;
}

function __ZN9SolutionsD2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i4 = i6 + 8 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i7 = i6 + 12 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3) {
    __ZN7SlvCubeD2Ev(i3);
    __ZdlPv(i3);
    i1 = HEAP32[i7 >> 2] | 0;
   }
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i1 | 0));
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) {
   HEAP32[i7 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
   i1 = i2;
  }
 } else i1 = i2;
 HEAP32[i6 >> 2] = -1;
 i2 = i6 + 20 | 0;
 if ((HEAP8[i2 >> 0] | 0) != 0 ? (HEAP8[i2 >> 0] = 0, i5 = HEAP32[i6 + 4 >> 2] | 0, (i5 | 0) != 0) : 0) {
  FUNCTION_TABLE_vii[HEAP32[HEAP32[i5 >> 2] >> 2] & 63](i5, 0);
  i1 = HEAP32[i4 >> 2] | 0;
 }
 if (!i1) return;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i7 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 return;
}

function __ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i1) i1 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 i8 = i1 + 284 | 0;
 i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i8) | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i2 >> 2] = 6592;
 HEAP32[i2 + 40 >> 2] = i8;
 i1 = i2 + 12 | 0;
 i8 = i2 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 i3 = i2 + 20 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = _strlen(i7) | 0;
 i6 = i4 + 1 | 0;
 i5 = __Znaj(i6) | 0;
 HEAP32[i8 >> 2] = i5;
 _memcpy(i5 | 0, i7 | 0, i6 | 0) | 0;
 HEAP32[i3 >> 2] = i5 + i4;
 HEAP32[i1 >> 2] = 512;
 return i2 | 0;
}

function __ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i1) i1 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = __ZN8tinyxml27StrPair6GetStrEv(i2 + 12 | 0) | 0;
 i8 = i1 + 284 | 0;
 i2 = __ZN8tinyxml28MemPoolTILi44EE5AllocEv(i8) | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i2 >> 2] = 6432;
 HEAP32[i2 + 40 >> 2] = i8;
 i1 = i2 + 12 | 0;
 i8 = i2 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 i3 = i2 + 20 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = _strlen(i7) | 0;
 i6 = i4 + 1 | 0;
 i5 = __Znaj(i6) | 0;
 HEAP32[i8 >> 2] = i5;
 _memcpy(i5 | 0, i7 | 0, i6 | 0) | 0;
 HEAP32[i3 >> 2] = i5 + i4;
 HEAP32[i1 >> 2] = 512;
 return i2 | 0;
}

function __ZN6MyFile9seekValueEPKcib(i5, i6, i3, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i7 = i8;
 i4 = i8 + 8 | 0;
 if ((HEAP32[i5 + 12 >> 2] | 0) != 1) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 do if (i1) {
  i2 = HEAP32[i5 + 16 >> 2] | 0;
  i1 = HEAP32[i5 + 20 >> 2] | 0;
  if (i1) {
   _fseek(i1, 0, 0) | 0;
   break;
  }
  i1 = i5 + 28 | 0;
  if (HEAP32[i1 >> 2] | 0) {
   HEAP32[i1 >> 2] = (HEAP32[i5 + 24 >> 2] | 0) + i2;
   HEAP8[i5 + 32 >> 0] = 0;
  }
 } while (0);
 if ((_strlen(i6) | 0) >>> 0 > 255) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i7 >> 2] = i3 + 58;
 HEAP32[i7 + 4 >> 2] = i6;
 _sprintf(i4, 21616, i7) | 0;
 if ((__ZN6MyFile10seekStringEPKcS1_(i5, i4, 21626) | 0) == -1) i1 = 0; else i1 = (__ZN6MyFile10seekStringEPKcS1_(i5, 21628, 21630) | 0) != -1;
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZN4CubeD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i5 + 56 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 i1 = HEAP32[i5 + 72 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 76 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 i8 = i5 + 60 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) return;
 i7 = i5 + 64 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   HEAP32[i7 >> 2] = i2 + -52;
   i3 = HEAP32[i2 + -12 >> 2] | 0;
   i4 = i3;
   if (i3) {
    i5 = i2 + -8 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    if ((i6 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i6 + (~((i6 + -8 - i4 | 0) >>> 3) << 3);
    __ZdlPv(i3);
   }
   i2 = HEAP32[i2 + -32 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   i2 = HEAP32[i7 >> 2] | 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i8 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZN16ModelControlBase7initTexEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 8 | 0;
 i1 = i6;
 i5 = __Znwj(20) | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = -1;
 HEAP32[i2 >> 2] = 1024;
 HEAP32[i2 + 4 >> 2] = 512;
 __ZN9GlTexture4initEjRK5Vec2iijjjPKvjjj(i5, 3553, i2, 1, 6408, 6408, 5121, 0, 9729, 9729, 33071);
 _emscripten_asm_const_2(5, 21336, HEAP32[i5 >> 2] | 0) | 0;
 i2 = HEAP32[1556] | 0;
 HEAP32[i1 >> 2] = i5;
 i3 = i2 + 44 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i2 + 48 >> 2] | 0) >>> 0) {
  HEAP32[i4 >> 2] = i5;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
  STACKTOP = i6;
  return;
 } else {
  __ZNSt3__16vectorIP9GlTextureNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i2 + 40 | 0, i1);
  STACKTOP = i6;
  return;
 }
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 65535 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else {
   i1 = i1 & 65535;
   break;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i2, i5, i3, i1, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i1 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i1 = i5 + 16 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i5 + 24 >> 2] = i4;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i4 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i5 + 36 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = i5 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i2 >> 2] = i4;
   i1 = i4;
  }
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0) == 0); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZN16ModelControlBase8switchInEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 + 188 >> 2] = 10;
 if (HEAP8[21292] | 0) return;
 HEAP8[21292] = 1;
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 i3 = HEAP32[i2 + 112 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i1 = HEAP32[i3 + 8 >> 2] | 0, (HEAP32[i3 + 12 >> 2] | 0) != (i1 | 0)) : 0) i1 = HEAP32[i1 + (HEAP32[i2 + 120 >> 2] << 2) >> 2] | 0; else i1 = 0;
 i3 = i1 + 28 | 0;
 i2 = i6 + 556 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 _memmove(i5 + 196 | 0, i3 | 0, 12) | 0;
 i5 = (HEAP32[i4 >> 2] | 0) + 208 | 0;
 i4 = i6 + 568 | 0;
 i6 = i1 + 40 | 0;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 _memmove(i5 | 0, i6 | 0, 12) | 0;
 return;
}

function __ZN12BaseGLWidgetC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 6208;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i1 + 12 >> 2] = 0;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i1 + 20 >> 2] = i2;
 i2 = i1 + 196 | 0;
 HEAP32[i1 + 236 >> 2] = 0;
 HEAP32[i1 + 240 >> 2] = 0;
 HEAP32[i1 + 244 >> 2] = 0;
 _memset(i1 + 24 | 0, 0, 168) | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i1 + 248 >> 2] = 1;
 HEAP32[i1 + 252 >> 2] = 1;
 HEAP32[i1 + 220 >> 2] = 3;
 HEAP8[i1 + 192 >> 0] = 1;
 HEAP8[i1 + 232 >> 0] = 0;
 HEAP8[i1 + 233 >> 0] = 1;
 HEAP32[i1 + 228 >> 2] = 100;
 HEAPF32[i2 >> 2] = -3.0;
 HEAPF32[i1 + 200 >> 2] = -3.0;
 HEAPF32[i1 + 204 >> 2] = -3.0;
 HEAPF32[i1 + 208 >> 2] = 3.0;
 HEAPF32[i1 + 212 >> 2] = 3.0;
 HEAPF32[i1 + 216 >> 2] = 3.0;
 return;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i8 = (i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0;
   tempRet0 = i8 ? 2147483647 : -2147483648;
   STACKTOP = i9;
   return (i8 ? -1 : 0) | 0;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((1073741807 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 4 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 536870887) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i7) _wmemcpy(i3, i5, i7) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _wmemcpy(i3 + (i6 + i7 << 2) | 0, i5 + (i8 + i7 << 2) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 1) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function __ZN16ModelControlBase15reCalcSlvMinMaxEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if (HEAP8[21292] | 0) return;
 HEAP8[21292] = 1;
 i2 = HEAP32[i4 + 8 >> 2] | 0;
 i3 = HEAP32[i2 + 112 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i1 = HEAP32[i3 + 8 >> 2] | 0, (HEAP32[i3 + 12 >> 2] | 0) != (i1 | 0)) : 0) i1 = HEAP32[i1 + (HEAP32[i2 + 120 >> 2] << 2) >> 2] | 0; else i1 = 0;
 i2 = i1 + 28 | 0;
 i3 = i4 + 4 | 0;
 i5 = (HEAP32[i3 >> 2] | 0) + 196 | 0;
 i6 = i4 + 556 | 0;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 _memmove(i5 | 0, i2 | 0, 12) | 0;
 i3 = (HEAP32[i3 >> 2] | 0) + 208 | 0;
 i2 = i4 + 568 | 0;
 i4 = i1 + 40 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 _memmove(i3 | 0, i4 | 0, 12) | 0;
 return;
}

function __ZNSt3__16vectorIN7PicType8AddedRefENS_9allocatorIS2_EEEC2ERKS5_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 3;
 if (!i2) return;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i1 = __Znwj(i1) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i1 + (i2 << 3);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  i7 = i2;
  i4 = HEAP32[i7 + 4 >> 2] | 0;
  i5 = i1;
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
  i1 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
  HEAP32[i6 >> 2] = i1;
  i2 = i2 + 8 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((-17 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 1 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 2147483623) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i7) _memcpy(i3 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _memcpy(i3 + (i6 + i7) | 0, i5 + (i8 + i7) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 10) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function __ZNSt3__16vectorI7TypeRefNS_9allocatorIS1_EEEC2ERKS4_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 3;
 if (!i2) return;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i1 = __Znwj(i1) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i1 + (i2 << 3);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  i7 = i2;
  i4 = HEAP32[i7 + 4 >> 2] | 0;
  i5 = i1;
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
  i1 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
  HEAP32[i6 >> 2] = i1;
  i2 = i2 + 8 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 16136) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] & 7](i8, 35415, 35447, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 16292) | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i5, i6, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i1 | 0) != (i5 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  i1 = _strtoull_l(i1, i7, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i2 | 0) == 34) {
   HEAP32[i6 >> 2] = 4;
   i2 = -1;
   i1 = -1;
  } else i2 = tempRet0;
 } else {
  HEAP32[i6 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 L1 : do if ((i1 | 0) != (HEAP32[i5 + 8 >> 2] | 0)) {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i3 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i5, i4, i6);
  if ((i3 | 0) > 1) {
   i3 = i5 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6);
    if (HEAP8[i3 >> 0] | 0) break L1;
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  }
 } else __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i5, i4, i6); while (0);
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 16144) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] & 7](i8, 35415, 35447, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 16284) | 0;
 HEAP8[i2 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 do if ((i6 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  if ((HEAP32[i4 + 4 >> 2] | 0) == (i3 | 0) ? (i2 = i4 + 28 | 0, (HEAP32[i2 >> 2] | 0) != 1) : 0) HEAP32[i2 >> 2] = i5;
 } else if ((i6 | 0) == (HEAP32[i4 >> 2] | 0)) {
  if ((HEAP32[i4 + 16 >> 2] | 0) != (i3 | 0) ? (i1 = i4 + 20 | 0, (HEAP32[i1 >> 2] | 0) != (i3 | 0)) : 0) {
   HEAP32[i4 + 32 >> 2] = i5;
   HEAP32[i1 >> 2] = i3;
   i7 = i4 + 40 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   if ((HEAP32[i4 + 36 >> 2] | 0) == 1 ? (HEAP32[i4 + 24 >> 2] | 0) == 2 : 0) HEAP8[i4 + 54 >> 0] = 1;
   HEAP32[i4 + 44 >> 2] = 4;
   break;
  }
  if ((i5 | 0) == 1) HEAP32[i4 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i1, i3, i6, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0;
 if (i5 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i5 & 512) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i4 = i3;
  while (1) {
   i4 = i4 + 1 | 0;
   i3 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i1 = i3;
    break;
   } else i1 = i3;
  }
 }
 L11 : do switch (i5 & 74 | 0) {
 case 64:
  {
   HEAP8[i1 >> 0] = 111;
   break;
  }
 case 8:
  if (!(i5 & 16384)) {
   HEAP8[i1 >> 0] = 120;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 88;
   break L11;
  }
 default:
  if (i6) {
   HEAP8[i1 >> 0] = 100;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 117;
   break L11;
  }
 } while (0);
 return;
}

function __ZNSt3__111__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i4, i1, i6) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i5 = i1;
 i2 = i6 - i5 | 0;
 i3 = i2 >> 2;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i4);
 if (i3 >>> 0 < 2) {
  HEAP8[i4 >> 0] = i2 >>> 1;
  i4 = i4 + 4 | 0;
 } else {
  i7 = i3 + 4 & -4;
  i2 = __Znwj(i7 << 2) | 0;
  HEAP32[i4 + 8 >> 2] = i2;
  HEAP32[i4 >> 2] = i7 | 1;
  HEAP32[i4 + 4 >> 2] = i3;
  i4 = i2;
 }
 i3 = (i6 - i5 | 0) >>> 2;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i4;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 4 | 0;
  }
 }
 HEAP32[i4 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 1 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _memmove(i1 | 0, i5 | 0, i4 | 0) | 0;
  HEAP8[i1 + i4 >> 0] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (i5) {
  i1 = HEAP8[i6 >> 0] | 0;
  if (!(i1 & 1)) i2 = 10; else {
   i1 = HEAP32[i6 >> 2] | 0;
   i2 = (i1 & -2) + -1 | 0;
   i1 = i1 & 255;
  }
  if (!(i1 & 1)) i3 = (i1 & 255) >>> 1; else i3 = HEAP32[i6 + 4 >> 2] | 0;
  if ((i2 - i3 | 0) >>> 0 < i5 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i6, i2, i5 - i2 + i3 | 0, i3, i3, 0, 0);
   i1 = HEAP8[i6 >> 0] | 0;
  }
  if (!(i1 & 1)) i2 = i6 + 1 | 0; else i2 = HEAP32[i6 + 8 >> 2] | 0;
  _memset(i2 + i3 | 0, i4 | 0, i5 | 0) | 0;
  i1 = i3 + i5 | 0;
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = i1 << 1; else HEAP32[i6 + 4 >> 2] = i1;
  HEAP8[i2 + i1 >> 0] = 0;
 }
 return i6 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 4 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _wmemmove(i1, i5, i4) | 0;
  HEAP32[i1 + (i4 << 2) >> 2] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i2 = 10; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i3 = (i1 & 255) >>> 1; else i3 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i2 - i3 | 0) >>> 0 >= i4 >>> 0) {
  if (i4) {
   if (!(i1 & 1)) i2 = i6 + 1 | 0; else i2 = HEAP32[i6 + 8 >> 2] | 0;
   _memcpy(i2 + i3 | 0, i5 | 0, i4 | 0) | 0;
   i1 = i3 + i4 | 0;
   if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = i1 << 1; else HEAP32[i6 + 4 >> 2] = i1;
   HEAP8[i2 + i1 >> 0] = 0;
  }
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i2, i4 - i2 + i3 | 0, i3, i3, 0, i4, i5);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 1;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 4 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i6;
 HEAP32[i1 + (i2 << 2) >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i6, i1, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i7;
 if ((i6 | 0) != (i1 | 0)) if ((i1 | 0) != 0 ? (i3 = ___dynamic_cast(i1, 2904, 2920, 0) | 0, (i3 | 0) != 0) : 0) {
  i1 = i5;
  i2 = i1 + 56 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  HEAP32[i5 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i6;
  HEAP32[i5 + 12 >> 2] = -1;
  HEAP32[i5 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 15](i3, i5, HEAP32[i4 >> 2] | 0, 1);
  if ((HEAP32[i5 + 24 >> 2] | 0) == 1) {
   HEAP32[i4 >> 2] = HEAP32[i5 + 16 >> 2];
   i1 = 1;
  } else i1 = 0;
 } else i1 = 0; else i1 = 1;
 STACKTOP = i7;
 return i1 | 0;
}

function __ZN12BuildProgramD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 6944;
 HEAP32[i1 + 176 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 184 | 0);
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i4 >> 2] = 0;
 i7 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 2;
 if (!i2) return;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i6 = __Znwj(i1) | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i4 + 8 >> 2] = i6 + (i2 << 2);
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) return;
 i4 = (i3 + -4 - i1 | 0) >>> 2;
 i2 = i6;
 while (1) {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) break; else i2 = i2 + 4 | 0;
 }
 HEAP32[i7 >> 2] = i6 + (i4 + 1 << 2);
 return;
}

function _wcrtomb(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (i1) {
  if (i3 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  }
  if (i3 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i3 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i3 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i3 >>> 0 < 55296 | (i3 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i3 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i3 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i3 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i3 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i3 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZN8MainCtrlD2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 + 2224 >> 2] = 5056;
 i3 = i4 + 2272 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (i1) {
  __ZN4CubeD2Ev(i1);
  __ZdlPv(i1);
 }
 __ZN16ModelControlBaseD2Ev(i4 + 408 | 0);
 __ZN12BaseGLWidgetD2Ev(i4 + 128 | 0);
 HEAP32[i4 >> 2] = 7008;
 i1 = HEAP32[i4 + 108 >> 2] | 0;
 if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i1 = HEAP32[i4 + 92 >> 2] | 0;
 if (!i1) {
  i4 = i4 + 76 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  return;
 }
 i2 = i4 + 96 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 i4 = i4 + 76 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
 return;
}

function __ZN7PicsSetC2Eb(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = i7 + 40 | 0;
 i2 = i6 & 1;
 i3 = i7;
 i4 = i3 + 40 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP8[i1 >> 0] = i2;
 i5 = HEAP32[1556] | 0;
 i4 = i5 + 20 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i5 = i5 + 16 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return; else i3 = 0;
 do {
  if ((HEAP32[i2 + (i3 * 1328 | 0) + 1024 >> 2] | 0) > 0) {
   i1 = 0;
   do {
    __ZN7PicsSet3addEib(i7, i3, i6);
    __ZN7PicsSet6addRefEi(i7, i3);
    i1 = i1 + 1 | 0;
    i2 = HEAP32[i5 >> 2] | 0;
   } while ((i1 | 0) < (HEAP32[i2 + (i3 * 1328 | 0) + 1024 >> 2] | 0));
   i1 = HEAP32[i4 >> 2] | 0;
  }
  i3 = i3 + 1 | 0;
 } while (i3 >>> 0 < ((i1 - i2 | 0) / 1328 | 0) >>> 0);
 return;
}

function __ZN12BuildProgramD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 6944;
 HEAP32[i1 + 176 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 184 | 0);
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 return;
}

function __Z8complainPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2;
 i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 20428, 7) | 0;
 i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i3, i1, _strlen(i1) | 0) | 0;
 HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i3 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 16144) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, 10) | 0;
 __ZNSt3__16localeD2Ev(i4);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i1, i3) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
 STACKTOP = i2;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 10;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 1 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP8[i1 + i5 >> 0] = i6;
 HEAP8[i1 + i2 >> 0] = 0;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i2, i4, i3, i5, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 HEAP32[i6 >> 2] = i3;
 i3 = _uselocale(HEAP32[i2 + 8 >> 2] | 0) | 0;
 i2 = _wcrtomb(i1, 0, i4) | 0;
 if (i3) _uselocale(i3) | 0;
 switch (i2 | 0) {
 case 0:
 case -1:
  {
   i1 = 2;
   break;
  }
 default:
  {
   i2 = i2 + -1 | 0;
   if (i2 >>> 0 <= (i5 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0) if (!i2) i1 = 0; else while (1) {
    i4 = HEAP8[i1 >> 0] | 0;
    i5 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i4;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i1 = 0;
     break;
    } else i1 = i1 + 1 | 0;
   } else i1 = 1;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16136) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 16144) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZN12BaseGLWidget9mouseMoveEiiii(i4, i3, i2, i5, i6) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0;
 i1 = HEAP32[i4 + 236 >> 2] | 0;
 if (!i1) i1 = 0; else i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, (i3 | 0) != 0, (i2 | 0) != 0, i5, i6) | 0;
 if (!i3) {
  i6 = i1;
  return i6 | 0;
 }
 i1 = i4 + 240 | 0;
 i2 = i5 - (HEAP32[i1 >> 2] | 0) | 0;
 i3 = i6 - (HEAP32[i4 + 244 >> 2] | 0) | 0;
 switch (HEAP32[i4 + 224 >> 2] | 0) {
 case 0:
  {
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, HEAP32[i4 + 220 >> 2] | 0, i2, i3);
   break;
  }
 case 1:
  {
   __ZN12BaseGLWidget9translateEii(i4, i2, i3);
   break;
  }
 default:
  {}
 }
 i4 = i1;
 HEAP32[i4 >> 2] = i5;
 HEAP32[i4 + 4 >> 2] = i6;
 i6 = 1;
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i1, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i4 = i1;
 i2 = i6 - i4 | 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i2 >>> 0 < 11) {
  HEAP8[i3 >> 0] = i2 << 1;
  i5 = i3 + 1 | 0;
 } else {
  i7 = i2 + 16 & -16;
  i5 = __Znwj(i7) | 0;
  HEAP32[i3 + 8 >> 2] = i5;
  HEAP32[i3 >> 2] = i7 | 1;
  HEAP32[i3 + 4 >> 2] = i2;
 }
 i3 = i6 - i4 | 0;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i5;
  while (1) {
   HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 1 | 0;
  }
 }
 HEAP8[i5 + i3 >> 0] = 0;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 L1 : do if (i1 << 24 >> 24) {
  i2 = i5;
  while (1) {
   if (i1 << 24 >> 24 == 63 ? (_strncmp(i2, 22940, 2) | 0) == 0 : 0) break;
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break L1;
  }
  i3 = i6 + 12 | 0;
  i1 = i6 + 16 | 0;
  if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
  HEAP32[i1 >> 2] = i5;
  HEAP32[i6 + 20 >> 2] = i2;
  HEAP32[i3 >> 2] = 258;
  i6 = i2 + 2 | 0;
  return i6 | 0;
 } while (0);
 i6 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i6 + 48 >> 2] = 13;
 HEAP32[i6 + 56 >> 2] = i5;
 HEAP32[i6 + 60 >> 2] = 0;
 i6 = 0;
 return i6 | 0;
}

function __ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 L1 : do if (i1 << 24 >> 24) {
  i2 = i5;
  while (1) {
   if (i1 << 24 >> 24 == 45 ? (_strncmp(i2, 22936, 3) | 0) == 0 : 0) break;
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break L1;
  }
  i3 = i6 + 12 | 0;
  i1 = i6 + 16 | 0;
  if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
  HEAP32[i1 >> 2] = i5;
  HEAP32[i6 + 20 >> 2] = i2;
  HEAP32[i3 >> 2] = 258;
  i6 = i2 + 3 | 0;
  return i6 | 0;
 } while (0);
 i6 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i6 + 48 >> 2] = 12;
 HEAP32[i6 + 56 >> 2] = i5;
 HEAP32[i6 + 60 >> 2] = 0;
 i6 = 0;
 return i6 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i6 = i2 + 4 | 0;
 i3 = i1 + 4 | 0;
 i5 = (HEAP32[i6 >> 2] | 0) - i4 | 0;
 i7 = (HEAP32[i3 >> 2] | 0) + (0 - (i5 >> 2) << 2) | 0;
 HEAP32[i3 >> 2] = i7;
 _memcpy(i7 | 0, i4 | 0, i5 | 0) | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i3 >> 2] = i5;
 i5 = i1 + 8 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i4;
 i5 = i2 + 8 | 0;
 i2 = i1 + 12 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 164;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 175;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 164;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 175;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj(i7, i4, i3) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i2 = HEAP8[i7 >> 0] | 0;
 i1 = (i2 & 1) == 0;
 if (i1) i6 = (i2 & 255) >>> 1; else i6 = HEAP32[i7 + 4 >> 2] | 0;
 if (i6 >>> 0 < i4 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(i7);
 if (i3) {
  if (i1) i5 = i7 + 1 | 0; else i5 = HEAP32[i7 + 8 >> 2] | 0;
  i1 = i6 - i4 | 0;
  i3 = i1 >>> 0 < i3 >>> 0 ? i1 : i3;
  if ((i1 | 0) != (i3 | 0)) {
   _memmove(i5 + i4 | 0, i5 + (i3 + i4) | 0, i1 - i3 | 0) | 0;
   i2 = HEAP8[i7 >> 0] | 0;
  }
  i1 = i6 - i3 | 0;
  if (!(i2 & 1)) HEAP8[i7 >> 0] = i1 << 1; else HEAP32[i7 + 4 >> 2] = i1;
  HEAP8[i5 + i1 >> 0] = 0;
 }
 return i7 | 0;
}

function _fputc(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 if ((HEAP32[i6 + 76 >> 2] | 0) >= 0 ? (___lockfile(i6) | 0) != 0 : 0) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i2 = i6 + 20 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i2 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i5;
   i1 = i5 & 255;
  } else i1 = ___overflow(i6, i5) | 0;
  ___unlockfile(i6);
 } else i7 = 3;
 do if ((i7 | 0) == 3) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i4 = i6 + 20 | 0, i1 = HEAP32[i4 >> 2] | 0, i1 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i4 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i5;
   i1 = i5 & 255;
   break;
  }
  i1 = ___overflow(i6, i5) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16136) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 7](i7, 35415, 35441, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16292) | 0;
 HEAP32[i3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 164;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 | 0;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 175;
 HEAP32[i8 >> 2] = i1 + i5;
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16144) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] & 7](i7, 35415, 35441, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 16284) | 0;
 HEAP8[i3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function ___overflow(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i5 = i6 & 255;
 HEAP8[i7 >> 0] = i5;
 i2 = i8 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) if (!(___towrite(i8) | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = 4;
 } else i1 = -1; else i4 = 4;
 do if ((i4 | 0) == 4) {
  i2 = i8 + 20 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if (i4 >>> 0 < i3 >>> 0 ? (i1 = i6 & 255, (i1 | 0) != (HEAP8[i8 + 75 >> 0] | 0)) : 0) {
   HEAP32[i2 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i5;
   break;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i8 + 36 >> 2] & 63](i8, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i10, i2, i8, i9) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i8;
 i6 = i1 + 8 | 0;
 L1 : do if ((i2 | 0) == (i8 | 0) | (i9 | 0) == 0) i1 = 0; else {
  i1 = 0;
  i5 = 0;
  while (1) {
   i4 = _uselocale(HEAP32[i6 >> 2] | 0) | 0;
   i3 = _mbrlen(i2, i7 - i2 | 0, i10) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i3 | 0) {
   case -2:
   case -1:
    break L1;
   case 0:
    {
     i2 = i2 + 1 | 0;
     i3 = 1;
     break;
    }
   default:
    i2 = i2 + i3 | 0;
   }
   i1 = i3 + i1 | 0;
   i5 = i5 + 1 | 0;
   if ((i2 | 0) == (i8 | 0) | i5 >>> 0 >= i9 >>> 0) break L1;
  }
 } while (0);
 return i1 | 0;
}

function __ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 L1 : do if (i1 << 24 >> 24) {
  i2 = i5;
  while (1) {
   if (i1 << 24 >> 24 == 62) break;
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break L1;
  }
  i3 = i6 + 12 | 0;
  i1 = i6 + 16 | 0;
  if ((HEAP32[i3 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
  HEAP32[i1 >> 2] = i5;
  HEAP32[i6 + 20 >> 2] = i2;
  HEAP32[i3 >> 2] = 258;
  i6 = i2 + 1 | 0;
  return i6 | 0;
 } while (0);
 i6 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i6 + 48 >> 2] = 14;
 HEAP32[i6 + 56 >> 2] = i5;
 HEAP32[i6 + 60 >> 2] = 0;
 i6 = 0;
 return i6 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function __ZN16BuildControlBase11fadeTimeoutEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, d5 = 0.0;
 i1 = i4 + 36 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  i3 = i4 + 1232 | 0;
  d2 = +HEAPF32[i3 >> 2] + .2;
  HEAPF32[i3 >> 2] = d2;
  if (!(d2 >= 1.0)) i3 = 1; else {
   HEAP8[i1 >> 0] = 0;
   i3 = 1;
  }
 } else i3 = 0;
 i1 = HEAP32[(HEAP32[i4 + 8 >> 2] | 0) + 116 >> 2] | 0;
 if (!(HEAP8[i1 + 1500296 >> 0] | 0)) {
  i4 = i3;
  return i4 | 0;
 }
 if ((HEAP32[i1 + 1500292 >> 2] | 0) != 3) {
  i4 = i3;
  return i4 | 0;
 }
 i1 = i4 + 44 | 0;
 d2 = +HEAPF32[i1 >> 2];
 i4 = i4 + 40 | 0;
 d5 = d2 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 >> 2] = d5;
 if (!(d5 >= 1.0) & !(d5 <= .1)) {
  i4 = 1;
  return i4 | 0;
 }
 HEAPF32[i1 >> 2] = -d2;
 i4 = 1;
 return i4 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4736] | 0) == 0 ? (___cxa_guard_acquire(4736) | 0) != 0 : 0) {
  if ((HEAP8[4744] | 0) == 0 ? (___cxa_guard_acquire(4744) | 0) != 0 : 0) {
   i1 = 19044;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 19332);
   ___cxa_atexit(172, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4744);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19044, 19332) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19056, 19344) | 0;
  HEAP32[4839] = 19044;
  ___cxa_guard_release(4736);
 }
 return HEAP32[4839] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4720] | 0) == 0 ? (___cxa_guard_acquire(4720) | 0) != 0 : 0) {
  if ((HEAP8[4728] | 0) == 0 ? (___cxa_guard_acquire(4728) | 0) != 0 : 0) {
   i1 = 18752;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 19040);
   ___cxa_atexit(171, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(4728);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18752, 37130) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18764, 37133) | 0;
  HEAP32[4760] = 18752;
  ___cxa_guard_release(4720);
 }
 return HEAP32[4760] | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (i2) {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else {
  if (!(HEAP32[2324] | 0)) i1 = 0; else i1 = _fflush(HEAP32[2324] | 0) | 0;
  ___lock(9064);
  i2 = HEAP32[2265] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___unlock(9064);
 } while (0);
 return i1 | 0;
}

function _pad(i6, i2, i5, i4, i1) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i7 = i8;
 do if ((i5 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i5 - i4 | 0;
  _memset(i7 | 0, i2 | 0, (i1 >>> 0 > 256 ? 256 : i1) | 0) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = (i2 & 32 | 0) == 0;
  if (i1 >>> 0 > 255) {
   i4 = i5 - i4 | 0;
   do {
    if (i3) {
     ___fwritex(i7, 256, i6) | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    }
    i1 = i1 + -256 | 0;
    i3 = (i2 & 32 | 0) == 0;
   } while (i1 >>> 0 > 255);
   if (i3) i1 = i4 & 255; else break;
  } else if (!i3) break;
  ___fwritex(i7, i1, i6) | 0;
 } while (0);
 STACKTOP = i8;
 return;
}

function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i5 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i10 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i6 ^ i2, i7, i6) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i1, i2, _i64Subtract(i10 ^ i3, i9 ^ i4, i10, i9) | 0, tempRet0, i8) | 0;
 i4 = _i64Subtract(HEAP32[i8 >> 2] ^ i7, HEAP32[i8 + 4 >> 2] ^ i6, i7, i6) | 0;
 i3 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i3, i4) | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, 16712, 16744) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, 36824, 36832) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i4, i5, i6, i3, i1, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i8 = i7;
 i9 = i7 + 8 | 0;
 HEAP32[i11 >> 2] = i10 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i4, i10, i11, i3, i1, i2);
 i2 = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = i10;
 i2 = (HEAP32[i6 >> 2] | 0) - i5 >> 2;
 i1 = _uselocale(HEAP32[i4 >> 2] | 0) | 0;
 i2 = _mbsrtowcs(i5, i9, i2, i8) | 0;
 if (i1) _uselocale(i1) | 0;
 HEAP32[i6 >> 2] = i5 + (i2 << 2);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN10RunContext14notifyFullEnumEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1;
 i2 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(13460, 20717, 9) | 0;
 HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i3 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 16144) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, 10) | 0;
 __ZNSt3__16localeD2Ev(i4);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i3) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, i6, i2, i7, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i4 = (i1 & 1) == 0;
 if (i4) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i8 | 0) == -1 | i1 >>> 0 < i6 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(i5);
 i3 = i1 - i6 | 0;
 i3 = i3 >>> 0 < i2 >>> 0 ? i3 : i2;
 if (i4) i1 = i5 + 1 | 0; else i1 = HEAP32[i5 + 8 >> 2] | 0;
 i2 = i3 >>> 0 > i8 >>> 0;
 i1 = _memcmp(i1 + i6 | 0, i7, i2 ? i8 : i3) | 0;
 if (!i1) if (i3 >>> 0 < i8 >>> 0) i1 = -1; else return i2 & 1 | 0;
 return i1 | 0;
}

function __ZN15NoiseSlvProgramC2Ev(i1) {
 i1 = i1 | 0;
 __ZN11BaseProgramC2Ev(i1);
 HEAP32[i1 >> 2] = 6976;
 __ZN10IntUniformC2EPKcP13ShaderProgram(i1 + 176 | 0, 28988, i1);
 __ZN11Vec3UniformC2EPKcP13ShaderProgram(i1 + 196 | 0, 28995, i1);
 __ZN10IntUniformC2EPKcP13ShaderProgram(i1 + 216 | 0, 29002, i1);
 __ZN11Mat4UniformC2EPKcP13ShaderProgram(i1 + 236 | 0, 29011, i1);
 __ZN11Mat3UniformC2EPKcP13ShaderProgram(i1 + 256 | 0, 29020, i1);
 __ZN10Vec3AttribC2EPKcP13ShaderProgram(i1 + 276 | 0, 29030, i1);
 __ZN11Vec3UniformC2EPKcP13ShaderProgram(i1 + 296 | 0, 29037, i1);
 __ZN11Vec3UniformC2EPKcP13ShaderProgram(i1 + 316 | 0, 29047, i1);
 __ZN10IntUniformC2EPKcP13ShaderProgram(i1 + 336 | 0, 29056, i1);
 return;
}

function ___fseeko_unlocked(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 if ((i5 | 0) == 1) i1 = i1 - (HEAP32[i4 + 8 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i3 = i4 + 20 | 0;
 i2 = i4 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 63](i4, 0, 0) | 0, (HEAP32[i3 >> 2] | 0) == 0) : 0) i1 = -1; else {
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 40 >> 2] & 63](i4, i1, i5) | 0) < 0) i1 = -1; else {
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function __ZN11FlatProgramD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN11BaseProgramD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i2 + 1;
    i2 = HEAP8[i2 >> 0] | 0;
   } else {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
    i2 = i2 & 255;
   }
   HEAP8[i3 >> 0] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 63](i7, HEAP32[i3 >> 2] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP32[i4 >> 2] = i2 + 4;
    HEAP32[i2 >> 2] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 63](i7, HEAPU8[i3 >> 0] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP8[i3 >> 0] | 0;
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 L1 : do switch (HEAP32[i2 + 4 >> 2] & 176 | 0) {
 case 16:
  {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 43:
   case 45:
    {
     i1 = i1 + 1 | 0;
     break L1;
    }
   default:
    {}
   }
   if ((i3 - i1 | 0) > 1 & i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i1 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i1 = i3;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 return i1 | 0;
}

function _scalbn(d1, i3) {
 d1 = +d1;
 i3 = i3 | 0;
 var i2 = 0;
 if ((i3 | 0) > 1023) {
  d1 = d1 * 89884656743115795.0e291;
  i2 = i3 + -1023 | 0;
  if ((i2 | 0) > 1023) {
   i2 = i3 + -2046 | 0;
   i2 = (i2 | 0) > 1023 ? 1023 : i2;
   d1 = d1 * 89884656743115795.0e291;
  }
 } else if ((i3 | 0) < -1022) {
  d1 = d1 * 2.2250738585072014e-308;
  i2 = i3 + 1022 | 0;
  if ((i2 | 0) < -1022) {
   i2 = i3 + 2044 | 0;
   i2 = (i2 | 0) < -1022 ? -1022 : i2;
   d1 = d1 * 2.2250738585072014e-308;
  }
 } else i2 = i3;
 i2 = _bitshift64Shl(i2 + 1023 | 0, 0, 52) | 0;
 i3 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(d1 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i5) return;
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 16 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 __ZdlPv(i5);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZN11BaseProgramD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 5092;
 HEAP32[i1 + 156 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 164 | 0);
 HEAP32[i1 + 136 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 HEAP32[i1 + 116 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 124 | 0);
 HEAP32[i1 + 96 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 104 | 0);
 HEAP32[i1 + 76 >> 2] = 5080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 84 | 0);
 __ZN13ShaderProgramD2Ev(i1);
 return;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 14412;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16212) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 14540;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 16204) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 i4 = i4 & 2047;
 switch (i4 | 0) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709552.0e3, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = i4 + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
   } else {
    HEAP32[i4 >> 2] = i2 + 4;
    i2 = HEAP32[i2 >> 2] | 0;
   }
   HEAP32[i3 >> 2] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _ungetc(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 do if ((i1 | 0) != -1) {
  if ((HEAP32[i5 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i5) | 0; else i4 = 0;
  if (!((HEAP32[i5 + 8 >> 2] | 0) == 0 ? (___toread(i5) | 0) != 0 : 0)) i6 = 6;
  if ((i6 | 0) == 6 ? (i2 = i5 + 4 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 > ((HEAP32[i5 + 44 >> 2] | 0) + -8 | 0) >>> 0) : 0) {
   i6 = i3 + -1 | 0;
   HEAP32[i2 >> 2] = i6;
   HEAP8[i6 >> 0] = i1;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -17;
   if (!i4) break;
   ___unlockfile(i5);
   break;
  }
  if (i4) {
   ___unlockfile(i5);
   i1 = -1;
  } else i1 = -1;
 } else i1 = -1; while (0);
 return i1 | 0;
}

function __ZN16ModelControlBaseC2EP12BaseGLWidgetP11CubeDocBase(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 >> 2] = 6152;
 HEAP32[i3 + 8 >> 2] = i1;
 __ZN15NoiseSlvProgramC2Ev(i3 + 24 | 0);
 i4 = i3 + 380 | 0;
 __ZN11BaseProgramC2Ev(i4);
 HEAP32[i4 >> 2] = 7040;
 i4 = i3 + 556 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 __ZN16BuildControlBaseC2EP12BaseGLWidgetP11CubeDocBase(i3 + 580 | 0, i2, i1);
 HEAP32[i3 + 12 >> 2] = -1;
 HEAP32[i3 + 16 >> 2] = -1;
 HEAP32[i3 + 20 >> 2] = -1;
 return;
}

function __ZNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i2 >> 2] = 0;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 if (!i1) return;
 if (i1 >>> 0 > 357913941) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i2);
 i5 = __Znwj(i1 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i2 >> 2] = i5;
 i4 = i5 + (i1 * 12 | 0) | 0;
 HEAP32[i2 + 8 >> 2] = i4;
 i2 = i5;
 while (1) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i2 = i2 + 12 | 0;
 }
 HEAP32[i3 >> 2] = i4;
 return;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) == (i5 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function ___fflush_unlocked(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = i7 + 20 | 0;
 i5 = i7 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i7 + 36 >> 2] & 63](i7, 0, 0) | 0, (HEAP32[i1 >> 2] | 0) == 0) : 0) i1 = -1; else {
  i6 = i7 + 4 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i7 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i7 + 40 >> 2] & 63](i7, i2 - i4 | 0, 1) | 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24 < i4 << 24 >> 24) {
   i1 = -1;
   break L1;
  }
  if (i4 << 24 >> 24 < i3 << 24 >> 24) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function _strtox(i7, i6, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i8;
 i3 = i5;
 i4 = i3 + 112 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i7;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i7;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i6) HEAP32[i6 >> 2] = (i1 | 0) != 0 ? i7 + i1 | 0 : i7;
 STACKTOP = i8;
 return +d2;
}

function __ZNSt3__16locale5__impD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i5 >> 2] = 16120;
 i3 = i5 + 8 | 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) != (i1 | 0)) {
  i2 = 0;
  do {
   i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   if (i1) __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) - i1 >> 2 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5 + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i3);
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIN6VecRep7VecWrapEiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function _vasprintf(i7, i6, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 i2 = _malloc(240) | 0;
 do if (i2) {
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  i1 = _vsnprintf(i2, 240, i6, i1) | 0;
  if (i1 >>> 0 < 240) {
   i6 = _realloc(i2, i1 + 1 | 0) | 0;
   HEAP32[i7 >> 2] = (i6 | 0) != 0 ? i6 : i2;
   break;
  }
  _free(i2);
  if ((i1 | 0) >= 0 ? (i4 = i1 + 1 | 0, i3 = _malloc(i4) | 0, HEAP32[i7 >> 2] = i3, (i3 | 0) != 0) : 0) i1 = _vsnprintf(i3, i4, i6, i5) | 0; else i1 = -1;
 } else i1 = -1; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _getc(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) >= 0 ? (___lockfile(i4) | 0) != 0 : 0) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
  } else i1 = ___uflow(i4) | 0;
  ___unlockfile(i4);
 } else i3 = 3;
 do if ((i3 | 0) == 3) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i4) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function __ZN11CubeDocBaseD0Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 7008;
 i1 = HEAP32[i4 + 108 >> 2] | 0;
 if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i1 = HEAP32[i4 + 92 >> 2] | 0;
 if (!i1) {
  i3 = i4 + 76 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3);
  __ZdlPv(i4);
  return;
 }
 i2 = i4 + 96 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 i3 = i4 + 76 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3);
 __ZdlPv(i4);
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < (i4 | 0)) {
   i1 = -1;
   break L1;
  }
  if ((i4 | 0) < (i3 | 0)) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function _memcpy(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i2 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i4 | 0, i2 | 0) | 0;
 i3 = i1 | 0;
 if ((i1 & 3) == (i4 & 3)) {
  while (i1 & 3) {
   if (!i2) return i3 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 - 1 | 0;
  }
  while ((i2 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
   i2 = i2 - 4 | 0;
  }
 }
 while ((i2 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
  i2 = i2 - 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZN12BaseGLWidget5resetEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 HEAP32[i2 + 228 >> 2] = 100;
 __ZN12BaseGLWidget10reCalcProjEb(i2, 1);
 i1 = i2 + 108 | 0;
 i3 = i1;
 i4 = i3 + 60 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAPF32[i1 >> 2] = 1.0;
 HEAPF32[i2 + 128 >> 2] = 1.0;
 HEAPF32[i2 + 148 >> 2] = 1.0;
 HEAPF32[i2 + 168 >> 2] = 1.0;
 if (!(HEAP8[i2 + 233 >> 0] | 0)) return;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, 3, -20, 20);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, 2, -5, 0);
 return;
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 if (!i3) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i1) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i3 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
 _free(i3);
 i3 = i1;
 return i3 | 0;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) ___lockfile(i4) | 0;
 i3 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i3) {
  ___lock(9064);
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  i1 = i4 + 56 | 0;
  if (i2) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[2265] | 0) == (i4 | 0)) HEAP32[2265] = i1;
  ___unlock(9064);
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 127](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2) _free(i2);
 if (!i3) _free(i4);
 return i1 | 0;
}

function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = _i64Subtract(i10 ^ i1, i9 ^ i2, i10, i9) | 0;
 i7 = tempRet0;
 i1 = i6 ^ i10;
 i2 = i5 ^ i9;
 return _i64Subtract((___udivmoddi4(i8, i7, _i64Subtract(i6 ^ i3, i5 ^ i4, i6, i5) | 0, tempRet0, 0) | 0) ^ i1, tempRet0 ^ i2, i1, i2) | 0;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 44 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 63](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 & 20) if (!(i1 & 4)) i1 = -1; else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 + 8 >> 2] = i1;
  HEAP32[i3 + 4 >> 2] = i1;
  i1 = 0;
 }
 return i1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 + 4 >> 2] | 0;
 do if (i1 >>> 0 >= i4 >>> 0) if (i2) {
  HEAP8[i5 + 1 + i4 >> 0] = 0;
  HEAP8[i5 >> 0] = i4 << 1;
  break;
 } else {
  HEAP8[(HEAP32[i5 + 8 >> 2] | 0) + i4 >> 0] = 0;
  HEAP32[i5 + 4 >> 2] = i4;
  break;
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i5, i4 - i1 | 0, i3) | 0; while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i4, i3, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i1 = i4 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2) {
  if ((i2 | 0) != (i3 | 0)) {
   i5 = i4 + 36 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i4 + 24 >> 2] = 2;
   HEAP8[i4 + 54 >> 0] = 1;
   break;
  }
  i1 = i4 + 24 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 2) HEAP32[i1 >> 2] = i5;
 } else {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i4 + 24 >> 2] = i5;
  HEAP32[i4 + 36 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 14476;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 14604;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i9, i5, i6, i7, i3, i4) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 HEAP8[i8 >> 0] = 37;
 i1 = i8 + 1 | 0;
 HEAP8[i1 >> 0] = i3;
 i2 = i8 + 2 | 0;
 HEAP8[i2 >> 0] = i4;
 HEAP8[i8 + 3 >> 0] = 0;
 if (i4 << 24 >> 24) {
  HEAP8[i1 >> 0] = i4;
  HEAP8[i2 >> 0] = i3;
 }
 HEAP32[i6 >> 2] = i5 + (_strftime_l(i5 | 0, (HEAP32[i6 >> 2] | 0) - i5 | 0, i8 | 0, i7 | 0, HEAP32[i9 >> 2] | 0) | 0);
 STACKTOP = i10;
 return;
}

function __ZN12SolveContext4initEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = i3 + 32 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP8[i3 + 40 >> 0] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 i4 = __Znwj(84) | 0;
 __ZN4CubeC2EPK5ShapePK7PicsSetPK10EngineConf(i4, HEAP32[i3 + 12 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0);
 i1 = i3 + 48 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i4;
 if (i2) {
  __ZN4CubeD2Ev(i2);
  __ZdlPv(i2);
 }
 HEAP8[i3 + 28 >> 0] = 1;
 __ZN4Cube10initPuttgrEP12SolveContextP7SlvCube(HEAP32[i1 >> 2] | 0, i3, HEAP32[i3 + 20 >> 2] | 0);
 return;
}

function _strtox555(i8, i7, i3, i1, i2) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i9;
 HEAP32[i6 >> 2] = 0;
 i4 = i6 + 4 | 0;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i6 + 44 >> 2] = i8;
 i5 = i6 + 8 | 0;
 HEAP32[i5 >> 2] = (i8 | 0) < 0 ? -1 : i8 + 2147483647 | 0;
 HEAP32[i6 + 76 >> 2] = -1;
 ___shlim(i6, 0);
 i1 = ___intscan(i6, i3, 1, i1, i2) | 0;
 if (i7) HEAP32[i7 >> 2] = i8 + ((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 + 108 >> 2] | 0) - (HEAP32[i5 >> 2] | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN11CubeDocBaseD2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 7008;
 i1 = HEAP32[i4 + 108 >> 2] | 0;
 if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i1 = HEAP32[i4 + 92 >> 2] | 0;
 if (!i1) {
  i4 = i4 + 76 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  return;
 }
 i2 = i4 + 96 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 i4 = i4 + 76 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i5, i4, i3, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[i5 >> 0] | 0;
 i1 = (i2 & 1) == 0;
 i2 = i1 ? (i2 & 255) >>> 1 : HEAP32[i5 + 4 >> 2] | 0;
 if (i2 >>> 0 < i4 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(i6); else {
  i2 = i2 - i4 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i6, (i1 ? i5 + 1 | 0 : HEAP32[i5 + 8 >> 2] | 0) + i4 | 0, i2 >>> 0 < i3 >>> 0 ? i2 : i3);
  return;
 }
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv(i4);
 i3 = i2 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) - i1 >> 2 >>> 0 <= i5 >>> 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i3, i5 + 1 | 0);
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i2 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
 if (i2) {
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i4;
 return;
}

function _fmt_u(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i3 >>> 0 > 0 | (i3 | 0) == 0 & i2 >>> 0 > 4294967295) while (1) {
  i4 = ___uremdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i4 | 48;
  i4 = ___udivdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  if (i3 >>> 0 > 9 | (i3 | 0) == 9 & i2 >>> 0 > 4294967295) {
   i2 = i4;
   i3 = tempRet0;
  } else {
   i2 = i4;
   break;
  }
 }
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i5, i3, i4, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = i1;
 do if (i3) {
  i2 = i1 + 112 | 0;
  if (i3 >>> 0 < 29 & (HEAP8[i2 >> 0] | 0) == 0) {
   HEAP8[i2 >> 0] = 1;
   break;
  } else {
   i1 = __Znwj(i3 << 2) | 0;
   break;
  }
 } else i1 = 0; while (0);
 HEAP32[i5 >> 2] = i1;
 i4 = i1 + (i4 << 2) | 0;
 HEAP32[i5 + 8 >> 2] = i4;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 12 >> 2] = i1 + (i3 << 2);
 return;
}

function __ZN8tinyxml210XMLElementD0Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 HEAP32[i3 >> 2] = 6672;
 i2 = i3 + 48 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  __ZN8tinyxml27XMLNodeD2Ev(i3);
  __ZdlPv(i3);
  return;
 }
 do {
  i5 = i1;
  i1 = HEAP32[i1 + 28 >> 2] | 0;
  i4 = HEAP32[i5 + 32 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 255](i5);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 63](i4, HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = i1;
 } while ((i1 | 0) != 0);
 __ZN8tinyxml27XMLNodeD2Ev(i3);
 __ZdlPv(i3);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZN8tinyxml28MemPoolTILi52EED0Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7328;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) {
  __ZdlPv(i7);
  return;
 }
 __ZdaPv(i1);
 __ZdlPv(i7);
 return;
}

function __ZN8tinyxml28MemPoolTILi48EED0Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7384;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) {
  __ZdlPv(i7);
  return;
 }
 __ZdaPv(i1);
 __ZdlPv(i7);
 return;
}

function __ZN8tinyxml28MemPoolTILi44EED0Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7412;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) {
  __ZdlPv(i7);
  return;
 }
 __ZdaPv(i1);
 __ZdlPv(i7);
 return;
}

function __ZN8tinyxml28MemPoolTILi36EED0Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7356;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) {
  __ZdlPv(i7);
  return;
 }
 __ZdaPv(i1);
 __ZdlPv(i7);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = i5 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i3 = i1 - i2 >> 2;
 if (i3 >>> 0 >= i4 >>> 0) {
  if (i3 >>> 0 > i4 >>> 0 ? (i6 = i2 + (i4 << 2) | 0, (i1 | 0) != (i6 | 0)) : 0) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i6 | 0));
   HEAP32[i7 >> 2] = i1;
  }
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i5, i4 - i3 | 0);
 return;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 4; else {
  i2 = i1;
  i1 = i4;
  while (1) {
   if (!(HEAP8[i2 >> 0] | 0)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (!(i1 & 3)) {
    i1 = i2;
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function __ZN16BuildControlBase8switchInEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i3 + 188 >> 2] = 6;
 i3 = i3 + 196 | 0;
 i4 = i1 + 1204 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 i3 = (HEAP32[i2 >> 2] | 0) + 208 | 0;
 i1 = i1 + 1216 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP8[(HEAP32[i2 >> 2] | 0) + 192 >> 0] = 0;
 return;
}

function __ZN5Shape10deallocateEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 44 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) __ZdaPv(i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i3 + 48 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) __ZdaPv(i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i3 + 52 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) __ZdaPv(i2);
 HEAP32[i1 >> 2] = 0;
 i2 = i3 + 56 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i2 >> 2] = 0;
 i3 = i3 + 24 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 if (i1 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i1 >>> 0 < 11) {
  HEAP8[i2 >> 0] = i4 << 1;
  i1 = i2 + 1 | 0;
 } else {
  i5 = i1 + 16 & -16;
  i1 = __Znwj(i5) | 0;
  HEAP32[i2 + 8 >> 2] = i1;
  HEAP32[i2 >> 2] = i5 | 1;
  HEAP32[i2 + 4 >> 2] = i4;
 }
 _memcpy(i1 | 0, i3 | 0, i4 | 0) | 0;
 HEAP8[i1 + i4 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemcpy(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memset(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function _strncmp(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0;
 if (!i2) i1 = 0; else {
  i3 = HEAP8[i4 >> 0] | 0;
  L3 : do if (!(i3 << 24 >> 24)) i3 = 0; else while (1) {
   i2 = i2 + -1 | 0;
   i5 = HEAP8[i1 >> 0] | 0;
   if (!(i3 << 24 >> 24 == i5 << 24 >> 24 & ((i2 | 0) != 0 & i5 << 24 >> 24 != 0))) break L3;
   i4 = i4 + 1 | 0;
   i1 = i1 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  } while (0);
  i1 = (i3 & 255) - (HEAPU8[i1 >> 0] | 0) | 0;
 }
 return i1 | 0;
}

function _solveGo() {
 var i1 = 0, i2 = 0;
 __ZN11CubeDocBase7solveGoEv(8);
 __ZN12SolveContext5doRunEi(2232, -1);
 i1 = HEAP32[30] | 0;
 if ((i1 | 0) != 0 ? (i2 = HEAP32[i1 + 8 >> 2] | 0, (HEAP32[i1 + 12 >> 2] | 0) != (i2 | 0)) : 0) i1 = HEAP32[i2 + (HEAP32[32] << 2) >> 2] | 0; else i1 = 0;
 __ZN7SlvCube10genPainterEv(i1);
 __ZN16ModelControlBase15reCalcSlvMinMaxEv(416);
 __ZN12BaseGLWidget13switchHandlerEP9GLHandler(136, 416);
 __ZN12BaseGLWidget5resetEv(136);
 if (HEAP8[2316] | 0) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemset(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(14660) | 0;
 if ((HEAP32[i2 >> 2] | 0) == 1) do _pthread_cond_wait(14688, 14660) | 0; while ((HEAP32[i2 >> 2] | 0) == 1);
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 1;
  _pthread_mutex_unlock(14660) | 0;
  FUNCTION_TABLE_vi[i3 & 255](i1);
  _pthread_mutex_lock(14660) | 0;
  HEAP32[i2 >> 2] = -1;
  _pthread_mutex_unlock(14660) | 0;
  _pthread_cond_broadcast(14688) | 0;
 } else _pthread_mutex_unlock(14660) | 0;
 return;
}

function __ZN8tinyxml210XMLElementD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 HEAP32[i3 >> 2] = 6672;
 i2 = i3 + 48 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  __ZN8tinyxml27XMLNodeD2Ev(i3);
  return;
 }
 do {
  i5 = i1;
  i1 = HEAP32[i1 + 28 >> 2] | 0;
  i4 = HEAP32[i5 + 32 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 255](i5);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 63](i4, HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = i1;
 } while ((i1 | 0) != 0);
 __ZN8tinyxml27XMLNodeD2Ev(i3);
 return;
}

function _memset(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) >= 20) {
  i6 = i6 & 255;
  i5 = i2 & 3;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i4 = i3 & ~3;
  if (i5) {
   i5 = i2 + 4 - i5 | 0;
   while ((i2 | 0) < (i5 | 0)) {
    HEAP8[i2 >> 0] = i6;
    i2 = i2 + 1 | 0;
   }
  }
  while ((i2 | 0) < (i4 | 0)) {
   HEAP32[i2 >> 2] = i7;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i2 | 0) < (i3 | 0)) {
  HEAP8[i2 >> 0] = i6;
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}

function __ZN8tinyxml212XMLAttributeD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i5 >> 2] = 8784;
 i2 = i5 + 16 | 0;
 i1 = i5 + 20 | 0;
 if ((HEAP32[i2 >> 2] & 512 | 0) != 0 ? (i3 = HEAP32[i1 >> 2] | 0, (i3 | 0) != 0) : 0) __ZdaPv(i3);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 i2 = i5 + 4 | 0;
 i1 = i5 + 8 | 0;
 if ((HEAP32[i2 >> 2] & 512 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 return;
}

function __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_5tupleIJiii6EPlaneN5Shape7EFacingEEEENS_4lessIS5_EENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 L1 : do if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 63](i3, i2, HEAP32[i2 + 48 >> 2] | 0) | 0 ? (i1 = HEAP32[i2 + 24 >> 2] | 0, (i1 | 0) != 0) : 0) do {
  if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 56 >> 2] & 63](i1, i3) | 0)) break L1;
  i1 = HEAP32[i1 + 36 >> 2] | 0;
 } while ((i1 | 0) != 0); while (0);
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i3, i2) | 0;
}

function __ZN8tinyxml28MemPoolTILi52EED2Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7328;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) return;
 __ZdaPv(i1);
 return;
}

function __ZN8tinyxml28MemPoolTILi48EED2Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7384;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) return;
 __ZdaPv(i1);
 return;
}

function __ZN8tinyxml28MemPoolTILi44EED2Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7412;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) return;
 __ZdaPv(i1);
 return;
}

function __ZN8tinyxml28MemPoolTILi36EED2Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i7 >> 2] = 7356;
 i5 = i7 + 52 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i6 = i7 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i4 = 0;
  do {
   i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i2 | 0));
 }
 if ((i1 | 0) == (i7 + 8 | 0) | (i1 | 0) == 0) return;
 __ZdaPv(i1);
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 0;
 while (1) {
  if ((HEAPU8[30018 + i2 >> 0] | 0) == (i1 | 0)) {
   i3 = 2;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 87) {
   i2 = 87;
   i1 = 30106;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 2) if (!i2) i1 = 30106; else {
  i1 = 30106;
  i3 = 5;
 }
 if ((i3 | 0) == 5) while (1) {
  i3 = i1;
  while (1) {
   i1 = i3 + 1 | 0;
   if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i1;
  }
  i2 = i2 + -1 | 0;
  if (!i2) break; else i3 = 5;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i4 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP8[i1 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4); else {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 7](i5, i3, i2, i1, i4, i6);
 }
 return;
}

function __ZN5BNodeD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = i1 + 16 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) return;
 i3 = i1 + 8 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 >> 2];
 HEAP32[HEAP32[i4 >> 2] >> 2] = i5;
 HEAP32[i2 >> 2] = 0;
 if ((i1 | 0) == (i3 | 0)) return;
 do {
  i5 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZN5BNodeD2Ev(i5 + 8 | 0);
  __ZdlPv(i5);
 } while ((i1 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, HEAP32[i2 >> 2] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 4 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 4, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, HEAPU8[i2 >> 0] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 1 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 1, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 L1 : do if (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i2) | 0 ? (i1 = HEAP32[i2 + 24 >> 2] | 0, (i1 | 0) != 0) : 0) do {
  if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 56 >> 2] & 63](i1, i3) | 0)) break L1;
  i1 = HEAP32[i1 + 36 >> 2] | 0;
 } while ((i1 | 0) != 0); while (0);
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3, i2) | 0;
}

function __ZN16ModelControlBase11initializedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 __ZN13ShaderProgram4initERK15ProgCompileConf(i1 + 380 | 0, 0) | 0;
 __ZN13ShaderProgram4initERK15ProgCompileConf(i1 + 24 | 0, 0) | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3);
 __ZN16BuildControlBase11initializedEv(i1 + 580 | 0);
 STACKTOP = i2;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7, i5, i4, i3, i6, i8) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 7](i7, i5, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i6 : 2, i8);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt(i1, i6, i5, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = (i5 - i6 | 0) >>> 2;
 if ((i6 | 0) != (i5 | 0)) {
  i3 = i6;
  while (1) {
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAPU16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] | 0; else i1 = 0;
   HEAP16[i2 >> 1] = i1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i5 | 0)) break; else i2 = i2 + 2 | 0;
  }
 }
 return i6 + (i4 << 2) | 0;
}

function ___stdio_seek(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i3 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i3;
 HEAP32[i6 + 16 >> 2] = i4;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i3 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZN8tinyxml212XMLAttributeD0Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 8784;
 i2 = i4 + 16 | 0;
 i1 = i4 + 20 | 0;
 if ((HEAP32[i2 >> 2] & 512 | 0) != 0 ? (i3 = HEAP32[i1 >> 2] | 0, (i3 | 0) != 0) : 0) __ZdaPv(i3);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 if (!(HEAP32[i4 + 4 >> 2] & 512)) {
  __ZdlPv(i4);
  return;
 }
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if (!i1) {
  __ZdlPv(i4);
  return;
 }
 __ZdaPv(i1);
 __ZdlPv(i4);
 return;
}

function __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeIN9LineAdder10SortedPairENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function _wmemmove(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0;
 if (i4 - i3 >> 2 >>> 0 < i1 >>> 0) {
  if (!i2) do {
   i1 = i1 + -1 | 0;
   HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i3 + (i1 << 2) >> 2];
  } while ((i1 | 0) != 0);
 } else if (!i2) {
  i2 = i3;
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj(i3, i5, i6) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = HEAP8[i3 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = (i1 & 255) >>> 1;
  i1 = i3 + 1 | 0;
 } else {
  i2 = HEAP32[i3 + 4 >> 2] | 0;
  i1 = HEAP32[i3 + 8 >> 2] | 0;
 }
 if (i2 >>> 0 > i6 >>> 0 ? (i4 = _memchr(i1 + i6 | 0, i5 & 255, i2 - i6 | 0) | 0, (i4 | 0) != 0) : 0) i1 = i4 - i1 | 0; else i1 = -1;
 return i1 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i3);
 i1 = i3 + 128 | 0;
 if (i2 >>> 0 < 29 & (HEAP8[i1 >> 0] | 0) == 0) {
  HEAP8[i1 >> 0] = 1;
  i1 = i3 + 16 | 0;
 } else i1 = __Znwj(i2 << 2) | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 8 >> 2] = i1 + (i2 << 2);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 3](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2, i7);
 return;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i3 = i4 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
   HEAP32[i3 >> 2] = i1;
  }
  if ((i4 + 16 | 0) == (i2 | 0)) {
   HEAP8[i4 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZN5ShapeD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 __ZN5Shape10deallocateEv(i2);
 i1 = HEAP32[i2 + 144 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 i1 = HEAP32[i2 + 124 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 i1 = HEAP32[i2 + 104 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 i1 = i2 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -12 - i3 | 0) >>> 0) / 12 | 0) * 12 | 0);
 __ZdlPv(i3);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3); else {
  i4 = HEAP32[i4 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 15](i4, i2, i1, i3);
 }
 return;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16212) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16204) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i6, i4, i3, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 15](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2);
 return;
}

function ___towrite(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 74 | 0;
 i3 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i3 + 255 | i3;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 8)) {
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 28 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i1;
  HEAP32[i2 + 16 >> 2] = i1 + (HEAP32[i2 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function ___stdout_write(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5;
 HEAP32[i2 + 36 >> 2] = 10;
 if ((HEAP32[i2 >> 2] & 64 | 0) == 0 ? (HEAP32[i4 >> 2] = HEAP32[i2 + 60 >> 2], HEAP32[i4 + 4 >> 2] = 21505, HEAP32[i4 + 8 >> 2] = i5 + 12, (___syscall54(54, i4 | 0) | 0) != 0) : 0) HEAP8[i2 + 75 >> 0] = -1;
 i4 = ___stdio_write(i2, i1, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 >= 128) break L1;
  if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16)) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _memcmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (!i1) i1 = 0; else {
  i5 = i1;
  i4 = i2;
  while (1) {
   i2 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i3 >> 0] | 0;
   if (i2 << 24 >> 24 != i1 << 24 >> 24) break;
   i5 = i5 + -1 | 0;
   if (!i5) {
    i1 = 0;
    break L1;
   } else {
    i4 = i4 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
  }
  i1 = (i2 & 255) - (i1 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function _vsscanf(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i6;
 i5 = i2;
 i7 = i5 + 112 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i2 + 32 >> 2] = 33;
 HEAP32[i2 + 44 >> 2] = i4;
 HEAP32[i2 + 76 >> 2] = -1;
 HEAP32[i2 + 84 >> 2] = i4;
 i7 = _vfscanf(i2, i3, i1) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function __ZN16BuildControlBase11scrDblClickEbii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP8[i4 + 14 >> 0] = i1 & 1;
 i1 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i4 + 4 >> 2] | 0, i2, i3) | 0;
 if (!(HEAP8[i4 + 13 >> 0] | 0)) {
  i4 = __ZN16BuildControlBase13boxedDblClickEiii(i4, i1, -1, -1) | 0;
  return i4 | 0;
 } else {
  i4 = __ZN16BuildControlBase13tiledDblClickEi(i4, i1) | 0;
  return i4 | 0;
 }
 return 0;
}

function __ZN12BaseGLWidget13switchHandlerEP9GLHandler(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i4 + 236 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2);
 HEAP32[i1 >> 2] = i3;
 if (!i3) {
  __ZN12BaseGLWidget10reCalcProjEb(i4, 1);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 255](i3);
 __ZN12BaseGLWidget10reCalcProjEb(i4, 1);
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc(i1, i7, i6, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i6 - i7 | 0) >>> 2;
 if ((i7 | 0) != (i6 | 0)) {
  i2 = i7;
  i1 = i4;
  while (1) {
   i4 = HEAP32[i2 >> 2] | 0;
   HEAP8[i1 >> 0] = i4 >>> 0 < 128 ? i4 & 255 : i5;
   i2 = i2 + 4 | 0;
   if ((i2 | 0) == (i6 | 0)) break; else i1 = i1 + 1 | 0;
  }
 }
 return i7 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < 128 ? (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16 != 0 : 0) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function ___string_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i2 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i1 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i2 + 4 >> 2] = i6 + i3;
 i1 = i6 + i5 | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 return i3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNSt3__18ios_base4initEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = (i1 | 0) == 0 & 1;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4098;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 6;
 i3 = i2 + 28 | 0;
 i1 = i2 + 32 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 __ZNSt3__16localeC2Ev(i3);
 return;
}

function _strcmp(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24) i2 = i3; else {
  do {
   i4 = i4 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i2 >> 0] | 0;
  } while (!(i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24));
  i2 = i3;
 }
 return (i2 & 255) - (i1 & 255) | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 128 >> 0] = 0;
 if (i1) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i2, i1);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i2, i1);
 }
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (i1 >>> 0 <= i4 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(i3);
 if (i2) i1 = i3 + 1 | 0; else i1 = HEAP32[i3 + 8 >> 2] | 0;
 return i1 + i4 | 0;
}

function _setGrpCount(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[1556] | 0;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = HEAP32[i4 + (i2 << 6) >> 2] | 0;
 i4 = HEAP32[i4 + (i2 << 6) + 4 >> 2] | 0;
 if ((i1 | 0) == (i4 | 0)) return;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 do {
  HEAP32[i2 + ((HEAP32[i1 >> 2] | 0) * 1328 | 0) + 1024 >> 2] = i5;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i4 | 0));
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[i1 >> 0] & 1)) {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 63](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i2 | 0) != (i1 | 0)) {
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = (i3 & 1) == 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i2, i4 ? i1 + 1 | 0 : HEAP32[i1 + 8 >> 2] | 0, i4 ? (i3 & 255) >>> 1 : HEAP32[i1 + 4 >> 2] | 0) | 0;
 }
 return i2 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 8 | 0;
 i2 = _uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i2) _uselocale(i2) | 0;
 if (!i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) {
   i1 = _uselocale(i1) | 0;
   if (!i1) i1 = 0; else {
    _uselocale(i1) | 0;
    i1 = 0;
   }
  } else i1 = 1;
 } else i1 = -1;
 return i1 | 0;
}

function __ZNSt3__16chrono12steady_clock3nowEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 (_clock_gettime(1, i1 | 0) | 0) != 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = ___muldi3(i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0, 1e9, 0) | 0;
 i1 = _i64Add(i3 | 0, tempRet0 | 0, i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function __ZN16BuildControlBase7scrMoveEbbii(i5, i1, i4, i2, i3) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (HEAP8[i5 + 13 >> 0] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 if ((i2 | 0) == -1) i1 = HEAP32[i5 + 20 >> 2] | 0; else i1 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i5 + 4 >> 2] | 0, i2, i3) | 0;
 i5 = __ZN16BuildControlBase15choiseMouseMoveEib(i5, i1, i4) | 0;
 return i5 | 0;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 i1 = _malloc(i2) | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = __ZSt15get_new_handlerv() | 0;
   if (!i1) break;
   FUNCTION_TABLE_v[i1 & 3]();
   i1 = _malloc(i2) | 0;
   if (i1) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 8888;
  ___cxa_throw(i2 | 0, 2872, 66);
 } while (0);
 return i1 | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (((i1 | 0) != 0 ? (i2 = HEAP32[i1 >> 2] | 0, (i2 | 0) != 0) : 0) ? (i1 = i2 + 48 | 0, (HEAP32[i1 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i1 + 4 >> 2] | 0) == 1129074247 : 0) : 0) __ZSt11__terminatePFvvE(HEAP32[i2 + 12 >> 2] | 0);
 i2 = HEAP32[2219] | 0;
 HEAP32[2219] = i2 + 0;
 __ZSt11__terminatePFvvE(i2);
}

function __ZN9PicBucket15createSingletonEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[1556] | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = __Znwj(92) | 0;
 HEAP32[i1 >> 2] = -1;
 i2 = i1 + 88 | 0;
 i3 = i1 + 4 | 0;
 i4 = i3 + 84 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 >> 2] = 1234;
 HEAP32[1556] = i1;
 i4 = i1;
 return i4 | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = i5 + 32 | 0;
 i3 = i5 + 36 | 0;
 if (i1) do {
  i1 = i1 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] & 1](i4, i5, HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0);
 } while ((i1 | 0) != 0);
 return;
}

function __ZN13ShaderProgram11successLinkEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 64 >> 2] | 0;
 i3 = i2 + 68 | 0;
 if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) return;
 i2 = i2 + 4 | 0;
 do {
  i4 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[HEAP32[i4 >> 2] >> 2] & 63](i4, HEAP32[i2 >> 2] | 0);
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (HEAP32[i3 >> 2] | 0));
 return;
}

function _fwrite(i2, i5, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = Math_imul(i1, i5) | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i4, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i4, i3) | 0;
 if ((i2 | 0) != (i4 | 0)) i1 = (i2 >>> 0) / (i5 >>> 0) | 0;
 return i1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4);
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i5, i4, i1, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsnprintf(i5, i4, i3, i7) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16212) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 16204) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function _llvm_cttz_i32(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[cttz_i8 + (i2 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 8 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 8 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 16 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 16 | 0;
 return (HEAP8[cttz_i8 + (i2 >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNSt3__16locale2id5__getEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 >> 2] | 0) != -1) {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = 165;
  HEAP32[i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, 166);
 }
 STACKTOP = i3;
 return (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
}

function ___cxa_can_catch(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 63](i1, i2, i3) | 0;
 if (i1) HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i5;
 return i1 & 1 | 0;
}

function _calloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i3) {
  i2 = Math_imul(i1, i3) | 0;
  if ((i1 | i3) >>> 0 > 65535) i2 = ((i2 >>> 0) / (i3 >>> 0) | 0 | 0) == (i1 | 0) ? i2 : -1;
 } else i2 = 0;
 i1 = _malloc(i2) | 0;
 if (!i1) return i1 | 0;
 if (!(HEAP32[i1 + -4 >> 2] & 3)) return i1 | 0;
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4760] | 0) == 0 ? (___cxa_guard_acquire(4760) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(19408, 19372, _wcslen(19372) | 0);
  ___cxa_atexit(174, 19408, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4760);
 }
 return 19408;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4808] | 0) == 0 ? (___cxa_guard_acquire(4808) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(19648, 19600, _wcslen(19600) | 0);
  ___cxa_atexit(174, 19648, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4808);
 }
 return 19648;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4792] | 0) == 0 ? (___cxa_guard_acquire(4792) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(19576, 19492, _wcslen(19492) | 0);
  ___cxa_atexit(174, 19576, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4792);
 }
 return 19576;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4776] | 0) == 0 ? (___cxa_guard_acquire(4776) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(19468, 19432, _wcslen(19432) | 0);
  ___cxa_atexit(174, 19468, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4776);
 }
 return 19468;
}

function __ZN16ModelControlBase8scrPressEbii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) return;
 i3 = __ZN12BaseGLWidget8doChoiseEii(HEAP32[i4 + 4 >> 2] | 0, i2, i3) | 0;
 i1 = i3 + -1 | 0;
 HEAP32[i4 + 12 >> 2] = i1;
 if (!i3) return;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4, i1);
 return;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = (HEAP32[i2 >> 2] | 0) + (i3 >> 1) | 0;
 if (i3 & 1) i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + i1 >> 2] | 0;
 FUNCTION_TABLE_vi[i1 & 255](i2);
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vasprintf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZN12BaseGLWidget5paintEb(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, 21392);
 i1 = HEAP32[i3 + 236 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1, i2);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, 21396);
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc(i3, i2, i5, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i5 | 0)) while (1) {
  i3 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i3 << 24 >> 24 > -1 ? i3 : i4;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i5 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsscanf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP32[i2 >> 2] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP8[i2 >> 0] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function _cpp_start() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i1;
 _emscripten_webgl_init_context_attributes(i2 | 0);
 HEAP32[i2 >> 2] = 0;
 _emscripten_webgl_make_context_current(_emscripten_webgl_create_context(20638, i2 | 0) | 0) | 0;
 HEAP8[328] = 0;
 __ZN12BaseGLWidget4initEv(136);
 STACKTOP = i1;
 return;
}

function __ZNSt3__18ios_base4InitD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13460) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13628) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13800) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13968) | 0;
 return;
}

function __ZN12BaseGLWidget10mousePressEiii(i3, i2, i4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 236 >> 2] | 0;
 if (i1) FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 15](i1, (i2 | 0) == 2, i4, i5);
 i3 = i3 + 240 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i3 + 4 >> 2] = i5;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4800] | 0) == 0 ? (___cxa_guard_acquire(4800) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(19588, 37175, 11);
  ___cxa_atexit(173, 19588, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4800);
 }
 return 19588;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4784] | 0) == 0 ? (___cxa_guard_acquire(4784) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(19480, 37154, 20);
  ___cxa_atexit(173, 19480, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4784);
 }
 return 19480;
}

function ___uflow(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 + 8 >> 2] | 0) == 0 ? (___toread(i2) | 0) != 0 : 0) i1 = -1; else if ((FUNCTION_TABLE_iiii[HEAP32[i2 + 32 >> 2] & 63](i2, i1, 1) | 0) == 1) i1 = HEAPU8[i1 >> 0] | 0; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4752] | 0) == 0 ? (___cxa_guard_acquire(4752) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(19360, 37136, 8);
  ___cxa_atexit(173, 19360, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4752);
 }
 return 19360;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[4768] | 0) == 0 ? (___cxa_guard_acquire(4768) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(19420, 37145, 8);
  ___cxa_atexit(173, 19420, ___dso_handle | 0) | 0;
  ___cxa_guard_release(4768);
 }
 return 19420;
}

function ___shlim(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 HEAP32[i3 + 104 >> 2] = i4;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = i2 - i1 | 0;
 HEAP32[i3 + 108 >> 2] = i5;
 if ((i4 | 0) != 0 & (i5 | 0) > (i4 | 0)) HEAP32[i3 + 100 >> 2] = i1 + i4; else HEAP32[i3 + 100 >> 2] = i2;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZN12SolveContext5doRunEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZN4Cube6puttgrEP9SolutionsP12SolveContextP7SlvCubei(HEAP32[i2 + 48 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0, i2, HEAP32[i2 + 20 >> 2] | 0, i1);
 if ((HEAP32[i2 + 24 >> 2] | 0) == 0 ? (HEAP8[i2 + 52 >> 0] | 0) == 0 : 0) return;
 HEAP8[i2 + 28 >> 0] = 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14808;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14744;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 }
 return i1 | 0;
}

function _sn_write(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 _memcpy(i5 | 0, i3 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i2 | 0;
}

function _initCubeEngine(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = __ZN9PicBucket15createSingletonEv() | 0;
 __ZN16ModelControlBase7initTexEv(416);
 if (!(__ZN9PicBucket7loadXMLEPKc(i1, i2) | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 _populatePicsSide(i1);
 __ZN9PicBucket13loadUnifiedJsEv(i1) | 0;
 i2 = 1;
 return i2 | 0;
}
function __ZNSt3__18ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 15032;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__16localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function __ZNSt3__15ctypeIcEC2EPKtbj(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 16160;
 i1 = i4 + 8 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP8[i4 + 12 >> 0] = i2 & 1;
 if (!i3) HEAP32[i1 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2];
 return;
}

function __ZN12BaseGLWidget11checkErrorsEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 STACKTOP = i2;
 return;
}

function __ZN11CubeDocBase9solveStopEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + 88 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 if (!(HEAP8[i2 + 28 >> 0] | 0)) return;
 HEAP32[i2 + 24 >> 2] = 1;
 i2 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2);
 return;
}

function __ZN12BaseGLWidget16mouseDoubleClickEbii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = HEAP32[i1 + 236 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 7](i1, i2, i3, i4) | 0;
 return i4 | 0;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i9 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__114__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP32[i1 >> 2] = HEAP8[i2 >> 0];
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 4 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__18numpunctIwEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 16348;
 HEAP32[i2 + 8 >> 2] = 46;
 HEAP32[i2 + 12 >> 2] = 44;
 i2 = i2 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__18numpunctIcEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 16308;
 HEAP8[i2 + 8 >> 0] = 46;
 HEAP8[i2 + 9 >> 0] = 44;
 i2 = i2 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0, i3 | 0 | 0) | 0;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 4 >> 2] & 74 | 0) {
 case 64:
  {
   i1 = 8;
   break;
  }
 case 8:
  {
   i1 = 16;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = 10;
 }
 return i1 | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function _wmemcpy(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i1) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(9028, 3) | 0)) {
  i2 = _pthread_getspecific(HEAP32[2256] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(29522, i1);
 return 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function __ZN8tinyxml28MemPoolTILi52EE4FreeEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!i1) return;
 i3 = i2 + 60 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 i2 = i2 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i1;
 return;
}

function __ZN8tinyxml28MemPoolTILi48EE4FreeEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!i1) return;
 i3 = i2 + 60 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 i2 = i2 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i1;
 return;
}

function __ZN8tinyxml28MemPoolTILi44EE4FreeEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!i1) return;
 i3 = i2 + 60 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 i2 = i2 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i1;
 return;
}

function __ZN8tinyxml28MemPoolTILi36EE4FreeEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!i1) return;
 i3 = i2 + 60 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 i2 = i2 + 56 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i1;
 return;
}

function _snprintf(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i3, i2, i1, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[2256] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(29676, i2);
}

function _feof(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = (HEAP32[i2 >> 2] | 0) >>> 4 & 1;
  if (!i3) ___unlockfile(i2);
 } else i1 = (HEAP32[i2 >> 2] | 0) >>> 4 & 1;
 return i1 | 0;
}

function __ZNSt3__119__shared_weak_count14__release_weakEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 255](i1);
 return;
}

function _mouseDblClick(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = __ZN12BaseGLWidget16mouseDoubleClickEbii(136, (i1 | 0) != 0, i2, i3) | 0;
 if (!(i3 & (HEAP8[2316] | 0) == 0)) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function ___ftello(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___ftello_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else i1 = ___ftello_unlocked(i2) | 0;
 return i1 | 0;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16024) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15988) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15952) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15916) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15624) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15592) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15560) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15468) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15376) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15316) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15256) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15184) | 0);
 return;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i2, 0, -1, i1, _strlen(i1) | 0) | 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 60 >> 2];
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function __ZNSt3__16locale8__globalEv() {
 if ((HEAP8[4648] | 0) == 0 ? (___cxa_guard_acquire(4648) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[4229] = 16912;
  ___cxa_guard_release(4648);
 }
 return HEAP32[4229] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if ((HEAP8[4480] | 0) == 0 ? (___cxa_guard_acquire(4480) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[4227] = 16904;
  ___cxa_guard_release(4480);
 }
 return HEAP32[4227] | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (i1) {
  i1 = _uselocale(i1) | 0;
  if (!i1) i1 = 4; else {
   _uselocale(i1) | 0;
   i1 = 4;
  }
 } else i1 = 1;
 return i1 | 0;
}

function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 28405 ? i2 + 12 | 0 : 0) | 0;
}

function _newlocale(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (((HEAP8[i3 >> 0] | 0) != 0 ? (_strcmp(i3, 36802) | 0) != 0 : 0) ? (_strcmp(i3, 32185) | 0) != 0 : 0) i1 = 0; else if (!i1) i1 = _calloc(1, 4) | 0;
 return i1 | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 16228;
 i1 = i1 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEtw(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] & i2) << 16 >> 16 != 0; else i1 = 0;
 return i1 | 0;
}

function _mouseMove(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 __ZN12BaseGLWidget9mouseMoveEiiii(136, i1, i2, i3, i4) | 0;
 if (HEAP8[2316] | 0) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZN8MainCtrl4drawEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 2308 | 0;
 HEAP8[i2 >> 0] = 0;
 HEAP8[i2 >> 0] = (__ZN16BuildControlBase11fadeTimeoutEv(i1 + 988 | 0) | 0) & 1;
 __ZN12BaseGLWidget5paintEb(i1 + 128 | 0, 0);
 return;
}

function _sprintf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsprintf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function dynCall_iiiiiid(i7, i1, i2, i3, i4, i5, d6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiiid[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function _sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i2, i1, _wcslen(i1) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i2, i1, _strlen(i1) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i2, i1, _strlen(i1) | 0) | 0;
}

function __ZN9SqrLimits4InitEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = 0;
 return;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function __ZNKSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 28548 ? i2 + 12 | 0 : 0) | 0;
}

function _wmemset(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i1) {
  i2 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i1) break; else i2 = i2 + 4 | 0;
  }
 }
 return i4 | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 28801 ? i2 + 12 | 0 : 0) | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function __ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 __ZN4MeshD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[2321] | 0;
 _vfprintf(i2, i1, i3) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function __ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 __ZN5ShapeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN12BaseGLWidget15mouseWheelEventEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = i2 + 228 | 0;
 i1 = (HEAP32[i2 >> 2] | 0) + i1 | 0;
 i1 = (i1 | 0) < 50 ? 50 : i1;
 HEAP32[i2 >> 2] = (i1 | 0) < 200 ? i1 : 200;
 return;
}

function __ZN12BaseGLWidget12mouseReleaseEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 236 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, (i2 | 0) != 0);
 return;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function __ZNKSt3__18ios_base6getlocEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 __ZNSt3__16localeC2ERKS0_(i2, i1 + 28 | 0);
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(9024, 160) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(29626, i1);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i3, i2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i2 - i3 | 0;
 return (i5 >>> 0 < i4 >>> 0 ? i5 : i4) | 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16268) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16276) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 if ((HEAP8[4160] | 0) == 0 ? (___cxa_guard_acquire(4160) | 0) != 0 : 0) {
  HEAP32[4177] = _newlocale(2147483647, 36802, 0) | 0;
  ___cxa_guard_release(4160);
 }
 return HEAP32[4177] | 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16212) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16204) | 0);
 return;
}

function __ZNKSt3__16locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = __ZNSt3__16locale2id5__getEv(i2) | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
 return i1 | 0;
}

function runPostSets() {}
function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ((i1 & 255) << 2) >> 2] & 255;
 return i1 | 0;
}

function _mouseDown(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 __ZN12BaseGLWidget10mousePressEiii(136, i1, i2, i3);
 if (HEAP8[2316] | 0) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15880) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15816) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15752) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15688) | 0);
 return;
}

function __ZN16ModelControlBase10scrReleaseEb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return;
 HEAP32[i2 + 12 >> 2] = -1;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2, -1);
 return;
}

function dynCall_iiiiid(i6, i1, i2, i3, i4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return FUNCTION_TABLE_iiiiid[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var i1 = 0;
 i1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
 HEAP32[4228] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return 16912;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16292) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16284) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16104) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16064) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15112) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(15072) | 0);
 return;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__16localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 __ZNSt3__114__shared_count12__add_sharedEv(i2);
 return;
}

function __ZNSt3__119__shared_weak_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__114__shared_count16__release_sharedEv(i1) | 0) __ZNSt3__119__shared_weak_count14__release_weakEv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 16940, _wcslen(16940) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16136) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(16144) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 16920, _wcslen(16920) | 0);
 return;
}

function __ZN12BaseGLWidget6resizeEii(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 248 >> 2] = i3;
 HEAP32[i2 + 252 >> 2] = i1;
 __ZN12BaseGLWidget10reCalcProjEb(i2, 1);
 return;
}

function __ZNSt3__15ctypeIcED2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 >> 2] = 16160;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i2 + 12 >> 0] | 0) != 0 : 0) __ZdaPv(i1);
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 36909, 5);
 return;
}

function __ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2, i1) | 0;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0, i3 | 0) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 36904, 4);
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function __ZNSt3__110__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2, i1) | 0;
}

function __ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i2, i1) | 0;
}

function b11(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(11);
 return 0;
}

function _cpp_slvrun() {
 var i1 = 0;
 if (!(HEAP8[2260] | 0)) {
  i1 = 0;
  return i1 | 0;
 }
 __ZN12SolveContext5doRunEi(2232, 1e4);
 i1 = (HEAP8[2260] | 0) != 0;
 return i1 | 0;
}

function __ZNSt3__16localeC2ERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, i1) | 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function _cpp_draw(d1) {
 d1 = +d1;
 var i2 = 0;
 if (!(HEAP8[2316] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 __ZN8MainCtrl4drawEv(8);
 i2 = (HEAP8[2316] | 0) != 0;
 return i2 | 0;
}

function _mouseWheel(i1) {
 i1 = i1 | 0;
 __ZN12BaseGLWidget15mouseWheelEventEi(136, i1);
 if (HEAP8[2316] | 0) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__18numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 16348;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 16308;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 return;
}

function _uselocale(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = (_pthread_self() | 0) + 176 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i3) HEAP32[i1 >> 2] = i3;
 return i2 | 0;
}

function _mouseUp(i1) {
 i1 = i1 | 0;
 __ZN12BaseGLWidget12mouseReleaseEi(136, i1);
 if (HEAP8[2316] | 0) return;
 HEAP8[2316] = 1;
 _emscripten_asm_const_0(0);
 return;
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
 _abort_message(29586, i2);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14808;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14744;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 63](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__16locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[4033] | 0;
 HEAP32[4033] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function _strchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = ___strchrnul(i2, i1) | 0;
 return ((HEAP8[i2 >> 0] | 0) == (i1 & 255) << 24 >> 24 ? i2 : 0) | 0;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14808;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 14744;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function _wcslen(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2;
 while (1) if (!(HEAP32[i1 >> 2] | 0)) break; else i1 = i1 + 4 | 0;
 return i1 - i2 >> 2 | 0;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function ___errno_location() {
 var i1 = 0;
 if (!(HEAP32[2259] | 0)) i1 = 9312; else i1 = HEAP32[(_pthread_self() | 0) + 60 >> 2] | 0;
 return i1 | 0;
}

function __ZSt17__throw_bad_allocv() {
 var i1 = 0;
 i1 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev(i1);
 ___cxa_throw(i1 | 0, 2872, 66);
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 1](i1 | 0, i2 | 0, i3 | 0);
}

function __ZNSt3__119__shared_weak_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 2904, 2952, 0) | 0) != 0;
 return i1 & 1 | 0;
}

function __ZNSt3__18ios_base5clearEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 16 >> 2] = (HEAP32[i2 + 24 >> 2] | 0) == 0 | i1;
 return;
}

function __ZNSt3__114__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 >>> 0 < 128 ? i1 & 255 : i2) | 0;
}

function b6(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(6);
 return 0;
}

function _strtoull_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoull(i4, i3, i1) | 0;
 return i4 | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 << 24 >> 24 > -1 ? i1 : i2) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtoll_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoll(i4, i3, i1) | 0;
 return i4 | 0;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 if ((i1 + -48 | 0) >>> 0 < 10) i1 = 1; else i1 = ((i1 | 32) + -97 | 0) >>> 0 < 6;
 return i1 & 1 | 0;
}

function b3(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 abort(3);
 return 0;
}

function _strtoll(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox555(i3, i2, i1, 0, -2147483648) | 0;
 return i3 | 0;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(29823, 29758, 1175, 29852);
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(29729, 29758, 1164, 29501);
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(29413, 29436, 303, 29501);
}

function b13(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(13);
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 63](i1 | 0, i2 | 0) | 0;
}

function __ZNSt3__16localeD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function _strtoull(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox555(i3, i2, i1, -1, -1) | 0;
 return i3 | 0;
}

function _mbrlen(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i2, i1, (i3 | 0) != 0 ? i3 : 9348) | 0;
}

function _getTms() {
 var i1 = 0;
 i1 = 2264;
 return +(+((HEAP32[i1 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i1 + 4 >> 2] | 0));
}

function _strtoul(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox555(i3, i2, i1, -1, 0) | 0;
 return i3 | 0;
}

function __ZN16BuildControlBase13emitTileHoverEiNS_10EActStatusE(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(4488, 1);
 HEAP32[4226] = 4488;
 return 16904;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function b15(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(15);
 return 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN10RunContext7doStartEv(i1) {
 i1 = i1 | 0;
 __ZN12SolveContext4initEv(i1);
 _emscripten_asm_const_0(4);
 return;
}

function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(163, 34797, ___dso_handle | 0) | 0;
 return;
}

function __ZNSt3__110__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 63](i1 | 0, i2 | 0);
}

function b7(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(7);
 return 0;
}

function _vsprintf(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _vsnprintf(i3, 2147483647, i2, i1) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__110__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZN9GLHandler8scrPressEbii(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}

function __ZN8tinyxml211XMLDocumentD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml211XMLDocumentD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __GLOBAL__sub_I_js_main_cpp() {
 __ZN8MainCtrlC2Ev(8);
 ___cxa_atexit(159, 8, ___dso_handle | 0) | 0;
 return;
}

function __ZN8tinyxml214XMLDeclarationD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml27XMLNodeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function b2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(2);
}

function __ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0;
 return i1 & 1 | 0;
}

function _do_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return ___string_read(i2, i1, i3) | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[2225] | 0;
 HEAP32[2225] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__16locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__16locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN8tinyxml210XMLUnknownD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml27XMLNodeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN8tinyxml210XMLCommentD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml27XMLNodeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function b12(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(12);
 return 0;
}

function __ZN8tinyxml27XMLTextD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml27XMLNodeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN8tinyxml27XMLNodeD0Ev(i1) {
 i1 = i1 | 0;
 __ZN8tinyxml27XMLNodeD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN15NoiseSlvProgramD0Ev(i1) {
 i1 = i1 | 0;
 __ZN15NoiseSlvProgramD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _isalnum(i1) {
 i1 = i1 | 0;
 return ((i1 + -48 | 0) >>> 0 < 10 | (_isalpha(i1) | 0) != 0) & 1 | 0;
}

function _strtold_l(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +(+_strtox(i3, i2, 2));
}

function _resize(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZN12BaseGLWidget6resizeEii(136, i2, i1);
 return;
}

function _catgets(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i3 | 0;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 127](i1 | 0) | 0;
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, i3) | 0;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 << 24 >> 24 | 0;
}

function __ZNSt3__18ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__15ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__15ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZN13ShaderProgramD0Ev(i1) {
 i1 = i1 | 0;
 __ZN13ShaderProgramD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}

function __ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function __ZN12BaseGLWidgetD0Ev(i1) {
 i1 = i1 | 0;
 __ZN12BaseGLWidgetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _cleanup526(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function _cleanup521(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN14BuildDimension9BuildPageC2Ev(i1) {
 i1 = i1 | 0;
 _memset(i1 | 0, 0, 1e4) | 0;
 return;
}

function __ZN10RunContext6doWaitEv(i1) {
 i1 = i1 | 0;
 __ZN12SolveContext5doRunEi(i1, -1);
 return;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function b16(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(16);
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN16ModelControlBase15emitChosenPieceEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN16ModelControlBase14emitHoverPieceEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZN16BuildControlBase14emitTilesCountEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZN12SolveContext18notifyLastSolutionEb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 255](i1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__120__throw_system_errorEiPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNK8tinyxml214XMLDeclaration13ToDeclarationEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN8tinyxml214XMLDeclaration13ToDeclarationEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function b1(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(1);
 return 0;
}

function __ZNK13ShaderProgram4typeEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNK11HCException4whatEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}

function __ZNK8tinyxml211XMLDocument10ToDocumentEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN8tinyxml211XMLDocument10ToDocumentEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN9GLHandler10scrReleaseEb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _isalpha(i1) {
 i1 = i1 | 0;
 return ((i1 | 32) + -97 | 0) >>> 0 < 26 | 0;
}

function __ZNSt9bad_allocC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 8888;
 return;
}

function __ZNK8tinyxml210XMLUnknown9ToUnknownEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZNK8tinyxml210XMLElement9ToElementEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZNK8tinyxml210XMLComment9ToCommentEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function __ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv(i1) {
 i1 = i1 | 0;
 return 52;
}

function __ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv(i1) {
 i1 = i1 | 0;
 return 48;
}

function __ZNK8tinyxml28MemPoolTILi44EE8ItemSizeEv(i1) {
 i1 = i1 | 0;
 return 44;
}

function __ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv(i1) {
 i1 = i1 | 0;
 return 36;
}

function __ZN8tinyxml210XMLUnknown9ToUnknownEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN8tinyxml210XMLElement9ToElementEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN8tinyxml210XMLComment9ToCommentEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _scalbnl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _frexpl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_frexp(d2, i1));
}

function __ZNSt3__16locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNK8tinyxml27XMLNode13ToDeclarationEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function b9(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(9);
}

function __ZNSt3__18messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN8tinyxml27XMLNode13ToDeclarationEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__17collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNK8tinyxml27XMLText6ToTextEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZNK8tinyxml27XMLNode10ToDocumentEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__15ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__121__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN8tinyxml27XMLText6ToTextEv(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN8tinyxml27XMLNode10ToDocumentEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function __ZNK8tinyxml27XMLNode9ToUnknownEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNK8tinyxml27XMLNode9ToElementEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNK8tinyxml27XMLNode9ToCommentEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN12SolveContext14notifyFullEnumEv(i1) {
 i1 = i1 | 0;
 return;
}

function b14(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(14);
 return 0;
}

function __ZN8tinyxml27XMLNode9ToUnknownEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN8tinyxml27XMLNode9ToElementEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN8tinyxml27XMLNode9ToCommentEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN11HCExceptionD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN16BuildControlBase9switchOutEv(i1) {
 i1 = i1 | 0;
 return;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK8tinyxml27XMLNode6ToTextEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN8tinyxml27XMLNode6ToTextEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__114__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 29571;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
}

function __ZN12SolveContext7doStartEv(i1) {
 i1 = i1 | 0;
 return;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZNSt3__16locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__112__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN12SolveContext6doWaitEv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN9GLHandler9switchOutEv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _ftell(i1) {
 i1 = i1 | 0;
 return ___ftello(i1) | 0;
}

function _freelocale(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function b5(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(5);
}

function __Znaj(i1) {
 i1 = i1 | 0;
 return __Znwj(i1) | 0;
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function b8(i1) {
 i1 = i1 | 0;
 abort(8);
 return 0;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___ctype_toupper_loc() {
 return 9308;
}

function ___ctype_tolower_loc() {
 return 9304;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b4(i1) {
 i1 = i1 | 0;
 abort(4);
}

function ___ctype_b_loc() {
 return 9300;
}

function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0];
var FUNCTION_TABLE_iiii = [b1,__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE,__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE,__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE,__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE,__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE,__ZN11CubeDocBase10onGenShapeEbP11GenTemplate,__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc
,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_do_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_iiiiiid = [b3,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b3];
var FUNCTION_TABLE_vi = [b4,__ZN10RunContext14notifyFullEnumEv,__ZN10RunContext7doStartEv,__ZN10RunContext6doWaitEv,__ZN12SolveContext14notifyFullEnumEv,__ZN12SolveContext7doStartEv,__ZN12SolveContext6doWaitEv,__ZN11BaseProgramD2Ev,__ZN11BaseProgramD0Ev,__ZN13ShaderProgram5clearEv,__ZN13ShaderProgram11successLinkEv,__ZN16ModelControlBase11initializedEv,__ZN16ModelControlBase8switchInEv,__ZN9GLHandler9switchOutEv,__ZN12BaseGLWidgetD2Ev,__ZN12BaseGLWidgetD0Ev,__ZN8tinyxml27XMLNodeD2Ev,__ZN8tinyxml27XMLNodeD0Ev,__ZN8tinyxml210XMLCommentD0Ev,__ZN8tinyxml214XMLDeclarationD0Ev,__ZN8tinyxml210XMLUnknownD0Ev,__ZN8tinyxml210XMLElementD2Ev,__ZN8tinyxml210XMLElementD0Ev,__ZN8tinyxml211XMLDocumentD2Ev,__ZN8tinyxml211XMLDocumentD0Ev,__ZN16BuildControlBase11initializedEv,__ZN16BuildControlBase8switchInEv,__ZN16BuildControlBase9switchOutEv,__ZN13ShaderProgramD2Ev
,__ZN13ShaderProgramD0Ev,__ZN12BuildProgramD2Ev,__ZN12BuildProgramD0Ev,__ZN12BuildProgram8getCodesEv,__ZN15NoiseSlvProgramD2Ev,__ZN15NoiseSlvProgramD0Ev,__ZN15NoiseSlvProgram8getCodesEv,__ZN11CubeDocBaseD2Ev,__ZN11CubeDocBaseD0Ev,__ZN11CubeDocBase13transferShapeEv,__ZN11CubeDocBase7solveGoEv,__ZN11CubeDocBase9solveStopEv,__ZN11FlatProgramD0Ev,__ZN11FlatProgram8getCodesEv,__ZN8tinyxml27XMLTextD0Ev,__ZNSt9exceptionD2Ev,__ZN11HCExceptionD0Ev,__ZNSt3__114__shared_countD2Ev,__ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZN8tinyxml28MemPoolTILi52EED2Ev,__ZN8tinyxml28MemPoolTILi52EED0Ev,__ZN8tinyxml28MemPoolTILi36EED2Ev,__ZN8tinyxml28MemPoolTILi36EED0Ev,__ZN8tinyxml28MemPoolTILi48EED2Ev,__ZN8tinyxml28MemPoolTILi48EED0Ev,__ZN8tinyxml28MemPoolTILi44EED2Ev,__ZN8tinyxml28MemPoolTILi44EED0Ev,__ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev
,__ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN8tinyxml212XMLAttributeD2Ev,__ZN8tinyxml212XMLAttributeD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev
,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZN8MainCtrlD2Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup521,_cleanup526,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor46,___cxx_global_array_dtor61,___cxx_global_array_dtor85,___cxx_global_array_dtor109,___cxx_global_array_dtor112,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_free,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,__ZN10RunContext18notifyLastSolutionEb,__ZN12SolveContext18notifyLastSolutionEb,__ZN16ModelControlBase9myPaintGLEb,__ZN16ModelControlBase10scrReleaseEb,__ZN16ModelControlBase11drawTargetsEb,__ZN16ModelControlBase15emitChosenPieceEi,__ZN16ModelControlBase14emitHoverPieceEi,__ZN12BaseGLWidget11checkErrorsEPKc,__ZN16BuildControlBase9myPaintGLEb,__ZN9GLHandler10scrReleaseEb,__ZN16BuildControlBase11drawTargetsEb,__ZN16BuildControlBase14emitTilesCountEi,__ZN12UniformParam11getLocationEj,__ZN11AttribParam11getLocationEj,__ZN8tinyxml28MemPoolTILi52EE4FreeEPv,__ZN8tinyxml28MemPoolTILi36EE4FreeEPv,__ZN8tinyxml28MemPoolTILi48EE4FreeEPv,__ZN8tinyxml28MemPoolTILi44EE4FreeEPv,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv
,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiid = [b7,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,__ZNK13ShaderProgram4typeEv,__ZN8tinyxml27XMLNode9ToElementEv,__ZN8tinyxml27XMLNode6ToTextEv,__ZN8tinyxml27XMLNode9ToCommentEv,__ZN8tinyxml27XMLNode10ToDocumentEv,__ZN8tinyxml27XMLNode13ToDeclarationEv,__ZN8tinyxml27XMLNode9ToUnknownEv,__ZNK8tinyxml27XMLNode9ToElementEv,__ZNK8tinyxml27XMLNode6ToTextEv,__ZNK8tinyxml27XMLNode9ToCommentEv,__ZNK8tinyxml27XMLNode10ToDocumentEv,__ZNK8tinyxml27XMLNode13ToDeclarationEv,__ZNK8tinyxml27XMLNode9ToUnknownEv,__ZN8tinyxml210XMLComment9ToCommentEv,__ZNK8tinyxml210XMLComment9ToCommentEv,__ZN8tinyxml214XMLDeclaration13ToDeclarationEv,__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv,__ZN8tinyxml210XMLUnknown9ToUnknownEv,__ZNK8tinyxml210XMLUnknown9ToUnknownEv,__ZN8tinyxml210XMLElement9ToElementEv,__ZNK8tinyxml210XMLElement9ToElementEv,__ZN8tinyxml211XMLDocument10ToDocumentEv,__ZNK8tinyxml211XMLDocument10ToDocumentEv,__ZN16BuildControlBase11fadeTimeoutEv,__ZN8tinyxml27XMLText6ToTextEv,__ZNK8tinyxml27XMLText6ToTextEv,__ZNK11HCException4whatEv,__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv
,__ZN8tinyxml28MemPoolTILi52EE5AllocEv,__ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi36EE5AllocEv,__ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi48EE5AllocEv,__ZNK8tinyxml28MemPoolTILi44EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi44EE5AllocEv,__ZNKSt9bad_alloc4whatEv,___stdio_close,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv
,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv
,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,__ZN16BuildControlBase13emitTileHoverEiNS_10EActStatusE];
var FUNCTION_TABLE_v = [b10,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZN16ModelControlBase11scrDblClickEbii,__ZN16BuildControlBase11scrDblClickEbii,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw];
var FUNCTION_TABLE_viiiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE];
var FUNCTION_TABLE_iii = [b14,__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE,__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE,__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE,__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE,__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_,__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE,__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE,__ZNKSt3__120__shared_ptr_pointerIP5ShapeNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP7PicDispNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIPN4Mesh10CommonDataENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiiiii = [b15,__ZN16ModelControlBase7scrMoveEbbii,__ZN16BuildControlBase7scrMoveEbbii,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiii = [b16,__ZN16ModelControlBase8scrPressEbii,__ZN12BaseGLWidget6rotateENS_5EAxisEii,__ZN9GLHandler8scrPressEbii,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b16,b16,b16,b16,b16];

  return { _loadSolution: _loadSolution, _solveGo: _solveGo, _memset: _memset, _mouseUp: _mouseUp, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _cpp_draw: _cpp_draw, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _mouseWheel: _mouseWheel, _mouseDown: _mouseDown, _getTms: _getTms, _cpp_slvrun: _cpp_slvrun, _memcpy: _memcpy, _setGrpCount: _setGrpCount, _i64Subtract: _i64Subtract, _resize: _resize, _i64Add: _i64Add, _initCubeEngine: _initCubeEngine, _mouseMove: _mouseMove, ___errno_location: ___errno_location, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _mouseDblClick: _mouseDblClick, _malloc: _malloc, _cpp_start: _cpp_start, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_js_main_cpp: __GLOBAL__sub_I_js_main_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _loadSolution = Module["_loadSolution"] = asm["_loadSolution"];
var __GLOBAL__sub_I_js_main_cpp = Module["__GLOBAL__sub_I_js_main_cpp"] = asm["__GLOBAL__sub_I_js_main_cpp"];
var _solveGo = Module["_solveGo"] = asm["_solveGo"];
var _mouseUp = Module["_mouseUp"] = asm["_mouseUp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _cpp_draw = Module["_cpp_draw"] = asm["_cpp_draw"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _mouseWheel = Module["_mouseWheel"] = asm["_mouseWheel"];
var _memset = Module["_memset"] = asm["_memset"];
var _getTms = Module["_getTms"] = asm["_getTms"];
var _mouseDown = Module["_mouseDown"] = asm["_mouseDown"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _cpp_slvrun = Module["_cpp_slvrun"] = asm["_cpp_slvrun"];
var _setGrpCount = Module["_setGrpCount"] = asm["_setGrpCount"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _resize = Module["_resize"] = asm["_resize"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _initCubeEngine = Module["_initCubeEngine"] = asm["_initCubeEngine"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _mouseMove = Module["_mouseMove"] = asm["_mouseMove"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _mouseDblClick = Module["_mouseDblClick"] = asm["_mouseDblClick"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _cpp_start = Module["_cpp_start"] = asm["_cpp_start"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.establishStackSpace = asm["establishStackSpace"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (Module["_main"] && shouldRunNow) Module["callMain"](args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"]) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["stdout"]["once"]("drain", (function() {
   process["exit"](status);
  }));
  console.log(" ");
  setTimeout((function() {
   process["exit"](status);
  }), 500);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 var output = "abort(" + what + ") at " + stackTrace() + extra;
 if (abortDecorators) {
  abortDecorators.forEach((function(decorator) {
   output = decorator(output, what);
  }));
 }
 throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();




